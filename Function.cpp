// Function  CoreUObject.Object.ExecuteUbergraph
// Offset::0x3D30810;
void FObject::ExecuteUbergraph(int32_t EntryPoint);


// Function  Engine.ActorComponent.Activate
// Offset::0x26E1130;
void FActorComponent::Activate(bool bReset);


// Function  Engine.ActorComponent.AddTickPrerequisiteActor
// Offset::0x62FB640;
void FActorComponent::AddTickPrerequisiteActor(FActor* PrerequisiteActor);


// Function  Engine.ActorComponent.AddTickPrerequisiteComponent
// Offset::0x62FB5A0;
void FActorComponent::AddTickPrerequisiteComponent(FActorComponent* PrerequisiteComponent);


// Function  Engine.ActorComponent.ComponentHasTag
// Offset::0x62FBDA0;
bool FActorComponent::ComponentHasTag(FName Tag);


// Function  Engine.ActorComponent.Deactivate
// Offset::0x179DDF0;
void FActorComponent::Deactivate();


// Function  Engine.ActorComponent.GetComponentTickInterval
// Offset::0x62FB810;
float FActorComponent::GetComponentTickInterval();


// Function  Engine.ActorComponent.GetOwner
// Offset::0x62FBE40;
FActor* FActorComponent::GetOwner();


// Function  Engine.ActorComponent.GetUsesReplicationKeyForReplication
// Offset::0x62FBA50;
bool FActorComponent::GetUsesReplicationKeyForReplication();


// Function  Engine.ActorComponent.IsActive
// Offset::0x62FBC80;
bool FActorComponent::IsActive();


// Function  Engine.ActorComponent.IsBeingDestroyed
// Offset::0x62FBE60;
bool FActorComponent::IsBeingDestroyed();


// Function  Engine.ActorComponent.IsComponentTickEnabled
// Offset::0x62FB980;
bool FActorComponent::IsComponentTickEnabled();


// Function  Engine.ActorComponent.K2_DestroyComponent
// Offset::0x62FB770;
void FActorComponent::K2_DestroyComponent(FObject* Object);


// Function  Engine.ActorComponent.OnRep_IsActive
// Offset::0x1A7E910;
void FActorComponent::OnRep_IsActive();


// Function  Engine.ActorComponent.ReceiveBeginPlay
// Offset::0x3D30810;
void FActorComponent::ReceiveBeginPlay();


// Function  Engine.ActorComponent.ReceiveEndPlay
// Offset::0x3D30810;
void FActorComponent::ReceiveEndPlay(enum class EEndPlayReason EndPlayReason);


// Function  Engine.ActorComponent.ReceiveTick
// Offset::0x3D30810;
void FActorComponent::ReceiveTick(float DeltaSeconds);


// Function  Engine.ActorComponent.RemoveTickPrerequisiteActor
// Offset::0x62FB500;
void FActorComponent::RemoveTickPrerequisiteActor(FActor* PrerequisiteActor);


// Function  Engine.ActorComponent.RemoveTickPrerequisiteComponent
// Offset::0x62FB460;
void FActorComponent::RemoveTickPrerequisiteComponent(FActorComponent* PrerequisiteComponent);


// Function  Engine.ActorComponent.SetActive
// Offset::0x62FBCB0;
void FActorComponent::SetActive(bool bNewActive,bool bReset);


// Function  Engine.ActorComponent.SetAutoActivate
// Offset::0x26D9B00;
void FActorComponent::SetAutoActivate(bool bNewAutoActivate);


// Function  Engine.ActorComponent.SetComponentTickEnabled
// Offset::0x62FB9B0;
void FActorComponent::SetComponentTickEnabled(bool bEnabled);


// Function  Engine.ActorComponent.SetComponentTickInterval
// Offset::0x62FB8E0;
void FActorComponent::SetComponentTickInterval(float TickInterval);


// Function  Engine.ActorComponent.SetComponentTickIntervalAndCooldown
// Offset::0x62FB840;
void FActorComponent::SetComponentTickIntervalAndCooldown(float TickInterval);


// Function  Engine.ActorComponent.SetIsReplicated
// Offset::0x62FBB40;
void FActorComponent::SetIsReplicated(bool ShouldReplicate);


// Function  Engine.ActorComponent.SetReplicationKeyDirty
// Offset::0x62FBB20;
void FActorComponent::SetReplicationKeyDirty();


// Function  Engine.ActorComponent.SetTickableWhenPaused
// Offset::0x62FBBE0;
void FActorComponent::SetTickableWhenPaused(bool bTickableWhenPaused);


// Function  Engine.ActorComponent.SetTickGroup
// Offset::0x62FB6E0;
void FActorComponent::SetTickGroup(enum class ETickingGroup NewTickGroup);


// Function  Engine.ActorComponent.SetUsesReplicationKeyForReplication
// Offset::0x62FBA80;
void FActorComponent::SetUsesReplicationKeyForReplication(bool bNewUserRepKeyForReplication);


// Function  Engine.ActorComponent.ToggleActive
// Offset::0x17AA8C0;
void FActorComponent::ToggleActive();


// Function  Engine.MovementComponent.ConstrainDirectionToPlane
// Offset::0x6498E90;
FVector FMovementComponent::ConstrainDirectionToPlane(FVector Direction);


// Function  Engine.MovementComponent.ConstrainLocationToPlane
// Offset::0x6498DD0;
FVector FMovementComponent::ConstrainLocationToPlane(FVector Location);


// Function  Engine.MovementComponent.ConstrainNormalToPlane
// Offset::0x6498D10;
FVector FMovementComponent::ConstrainNormalToPlane(FVector Normal);


// Function  Engine.MovementComponent.GetGravityZ
// Offset::0x6499870;
float FMovementComponent::GetGravityZ();


// Function  Engine.MovementComponent.GetMaxSpeed
// Offset::0x6499840;
float FMovementComponent::GetMaxSpeed();


// Function  Engine.MovementComponent.GetPhysicsVolume
// Offset::0x6499750;
FPhysicsVolume* FMovementComponent::GetPhysicsVolume();


// Function  Engine.MovementComponent.GetPlaneConstraintAxisSetting
// Offset::0x64992E0;
enum class EPlaneConstraintAxisSetting FMovementComponent::GetPlaneConstraintAxisSetting();


// Function  Engine.MovementComponent.GetPlaneConstraintNormal
// Offset::0x6498F90;
FVector FMovementComponent::GetPlaneConstraintNormal();


// Function  Engine.MovementComponent.GetPlaneConstraintOrigin
// Offset::0x6498F50;
FVector FMovementComponent::GetPlaneConstraintOrigin();


// Function  Engine.MovementComponent.IsExceedingMaxSpeed
// Offset::0x64997A0;
bool FMovementComponent::IsExceedingMaxSpeed(float MaxSpeed);


// Function  Engine.MovementComponent.K2_MoveUpdatedComponent
// Offset::0x64993B0;
bool FMovementComponent::K2_MoveUpdatedComponent(FVector Delta,FRotator NewRotation,FHitResult OutHit,bool bSweep,bool bTeleport);


// Function  Engine.MovementComponent.PhysicsVolumeChanged
// Offset::0x4EDB0;
void FMovementComponent::PhysicsVolumeChanged(FPhysicsVolume* NewVolume);


// Function  Engine.MovementComponent.SetPlaneConstraintAxisSetting
// Offset::0x6499310;
void FMovementComponent::SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting);


// Function  Engine.MovementComponent.SetPlaneConstraintEnabled
// Offset::0x6498FD0;
void FMovementComponent::SetPlaneConstraintEnabled(bool bEnabled);


// Function  Engine.MovementComponent.SetPlaneConstraintFromVectors
// Offset::0x6499120;
void FMovementComponent::SetPlaneConstraintFromVectors(FVector Forward,FVector Up);


// Function  Engine.MovementComponent.SetPlaneConstraintNormal
// Offset::0x6499230;
void FMovementComponent::SetPlaneConstraintNormal(FVector PlaneNormal);


// Function  Engine.MovementComponent.SetPlaneConstraintOrigin
// Offset::0x6499070;
void FMovementComponent::SetPlaneConstraintOrigin(FVector PlaneOrigin);


// Function  Engine.MovementComponent.SetUpdatedComponent
// Offset::0x64996B0;
void FMovementComponent::SetUpdatedComponent(FSceneComponent* NewUpdatedComponent);


// Function  Engine.MovementComponent.SnapUpdatedComponentToPlane
// Offset::0x208E230;
void FMovementComponent::SnapUpdatedComponentToPlane();


// Function  Engine.MovementComponent.StopMovementImmediately
// Offset::0x6499780;
void FMovementComponent::StopMovementImmediately();


// Function  Engine.InterpToMovementComponent.AddControlPointPosition
// Offset::0x63CEBF0;
void FInterpToMovementComponent::AddControlPointPosition(FVector Pos,bool bPositionIsRelative);


// Function  Engine.InterpToMovementComponent.FinaliseControlPoints
// Offset::0x63CEB30;
void FInterpToMovementComponent::FinaliseControlPoints();


// Function  Engine.InterpToMovementComponent.ResetControlPoints
// Offset::0x63CEB10;
void FInterpToMovementComponent::ResetControlPoints();


// Function  Engine.InterpToMovementComponent.RestartMovement
// Offset::0x63CEB50;
void FInterpToMovementComponent::RestartMovement(float InitialDirection);


// Function  Engine.InterpToMovementComponent.StopSimulating
// Offset::0x63CECF0;
void FInterpToMovementComponent::StopSimulating(FHitResult HitResult);


// Function  Engine.KismetSystemLibrary.AddFloatHistorySample
// Offset::0x64443B0;
FDebugFloatHistory FKismetSystemLibrary::AddFloatHistorySample(float Value,FDebugFloatHistory FloatHistory);


// Function  Engine.KismetSystemLibrary.BeginTransaction
// Offset::0x6442AD0;
int32_t FKismetSystemLibrary::BeginTransaction(FString Context,FText Description,FObject* PrimaryObject);


// Function  Engine.KismetSystemLibrary.BoxOverlapActors
// Offset::0x6450F40;
bool FKismetSystemLibrary::BoxOverlapActors(FObject* WorldContextObject,FVector BoxPos,FVector BoxExtent,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ActorClassFilter,TArray<FActor*> ActorsToIgnore,TArray<FActor*> OutActors);


// Function  Engine.KismetSystemLibrary.BoxOverlapComponents
// Offset::0x6450BF0;
bool FKismetSystemLibrary::BoxOverlapComponents(FObject* WorldContextObject,FVector BoxPos,FVector Extent,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ComponentClassFilter,TArray<FActor*> ActorsToIgnore,TArray<FPrimitiveComponent*> OutComponents);


// Function  Engine.KismetSystemLibrary.BoxTraceMulti
// Offset::0x644DBF0;
bool FKismetSystemLibrary::BoxTraceMulti(FObject* WorldContextObject,FVector Start,FVector End,FVector HalfSize,FRotator Orientation,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.BoxTraceMultiByProfile
// Offset::0x6447BE0;
bool FKismetSystemLibrary::BoxTraceMultiByProfile(FObject* WorldContextObject,FVector Start,FVector End,FVector HalfSize,FRotator Orientation,FName ProfileName,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.BoxTraceMultiForObjects
// Offset::0x644ABA0;
bool FKismetSystemLibrary::BoxTraceMultiForObjects(FObject* WorldContextObject,FVector Start,FVector End,FVector HalfSize,FRotator Orientation,TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.BoxTraceSingle
// Offset::0x644E1E0;
bool FKismetSystemLibrary::BoxTraceSingle(FObject* WorldContextObject,FVector Start,FVector End,FVector HalfSize,FRotator Orientation,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.BoxTraceSingleByProfile
// Offset::0x64481D0;
bool FKismetSystemLibrary::BoxTraceSingleByProfile(FObject* WorldContextObject,FVector Start,FVector End,FVector HalfSize,FRotator Orientation,FName ProfileName,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.BoxTraceSingleForObjects
// Offset::0x644B1C0;
bool FKismetSystemLibrary::BoxTraceSingleForObjects(FObject* WorldContextObject,FVector Start,FVector End,FVector HalfSize,FRotator Orientation,TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.BreakSoftClassPath
// Offset::0x6457D10;
void FKismetSystemLibrary::BreakSoftClassPath(FSoftClassPath InSoftClassPath,FString PathString);


// Function  Engine.KismetSystemLibrary.BreakSoftObjectPath
// Offset::0x6457D10;
void FKismetSystemLibrary::BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath,FString PathString);


// Function  Engine.KismetSystemLibrary.CancelTransaction
// Offset::0x6442A40;
void FKismetSystemLibrary::CancelTransaction(int32_t Index);


// Function  Engine.KismetSystemLibrary.CanLaunchURL
// Offset::0x6443D80;
bool FKismetSystemLibrary::CanLaunchURL(FString URL);


// Function  Engine.KismetSystemLibrary.CapsuleOverlapActors
// Offset::0x6450870;
bool FKismetSystemLibrary::CapsuleOverlapActors(FObject* WorldContextObject,FVector CapsulePos,float Radius,float HalfHeight,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ActorClassFilter,TArray<FActor*> ActorsToIgnore,TArray<FActor*> OutActors);


// Function  Engine.KismetSystemLibrary.CapsuleOverlapComponents
// Offset::0x64504F0;
bool FKismetSystemLibrary::CapsuleOverlapComponents(FObject* WorldContextObject,FVector CapsulePos,float Radius,float HalfHeight,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ComponentClassFilter,TArray<FActor*> ActorsToIgnore,TArray<FPrimitiveComponent*> OutComponents);


// Function  Engine.KismetSystemLibrary.CapsuleTraceMulti
// Offset::0x644CFA0;
bool FKismetSystemLibrary::CapsuleTraceMulti(FObject* WorldContextObject,FVector Start,FVector End,float Radius,float HalfHeight,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile
// Offset::0x6446F80;
bool FKismetSystemLibrary::CapsuleTraceMultiByProfile(FObject* WorldContextObject,FVector Start,FVector End,float Radius,float HalfHeight,FName ProfileName,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
// Offset::0x6449F00;
bool FKismetSystemLibrary::CapsuleTraceMultiForObjects(FObject* WorldContextObject,FVector Start,FVector End,float Radius,float HalfHeight,TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.CapsuleTraceSingle
// Offset::0x644D570;
bool FKismetSystemLibrary::CapsuleTraceSingle(FObject* WorldContextObject,FVector Start,FVector End,float Radius,float HalfHeight,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile
// Offset::0x6447550;
bool FKismetSystemLibrary::CapsuleTraceSingleByProfile(FObject* WorldContextObject,FVector Start,FVector End,float Radius,float HalfHeight,FName ProfileName,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
// Offset::0x644A4F0;
bool FKismetSystemLibrary::CapsuleTraceSingleForObjects(FObject* WorldContextObject,FVector Start,FVector End,float Radius,float HalfHeight,TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.CollectGarbage
// Offset::0x6443D60;
void FKismetSystemLibrary::CollectGarbage();


// Function  Engine.KismetSystemLibrary.ComponentOverlapActors
// Offset::0x6450200;
bool FKismetSystemLibrary::ComponentOverlapActors(FPrimitiveComponent* Component,FTransform ComponentTransform,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ActorClassFilter,TArray<FActor*> ActorsToIgnore,TArray<FActor*> OutActors);


// Function  Engine.KismetSystemLibrary.ComponentOverlapComponents
// Offset::0x644FF10;
bool FKismetSystemLibrary::ComponentOverlapComponents(FPrimitiveComponent* Component,FTransform ComponentTransform,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ComponentClassFilter,TArray<FActor*> ActorsToIgnore,TArray<FPrimitiveComponent*> OutComponents);


// Function  Engine.KismetSystemLibrary.ControlScreensaver
// Offset::0x64438A0;
void FKismetSystemLibrary::ControlScreensaver(bool bAllowScreenSaver);


// Function  Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference
// Offset::0x6456FF0;
TSoftClassPtr<UObject> FKismetSystemLibrary::Conv_ClassToSoftClassReference(FObject* Class);


// Function  Engine.KismetSystemLibrary.Conv_InterfaceToObject
// Offset::0x64581B0;
FObject* FKismetSystemLibrary::Conv_InterfaceToObject(TScriptInterface<IInterface> Interface);


// Function  Engine.KismetSystemLibrary.Conv_ObjectToClass
// Offset::0x6458260;
FObject* FKismetSystemLibrary::Conv_ObjectToClass(FObject* Object,FObject* Class);


// Function  Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference
// Offset::0x6457110;
TSoftObjectPtr<FObject> FKismetSystemLibrary::Conv_ObjectToSoftObjectReference(FObject* Object);


// Function  Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString
// Offset::0x6442000;
FString FKismetSystemLibrary::Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId);


// Function  Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString
// Offset::0x1FF3B00;
FString FKismetSystemLibrary::Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType);


// Function  Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef
// Offset::0x6457BB0;
TSoftClassPtr<UObject> FKismetSystemLibrary::Conv_SoftClassPathToSoftClassRef(FSoftClassPath SoftClassPath);


// Function  Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass
// Offset::0x6457220;
FObject* FKismetSystemLibrary::Conv_SoftClassReferenceToClass(TSoftClassPtr<UObject> SoftClass);


// Function  Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString
// Offset::0x6457860;
FString FKismetSystemLibrary::Conv_SoftClassReferenceToString(TSoftClassPtr<UObject> SoftClassReference);


// Function  Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject
// Offset::0x6457310;
FObject* FKismetSystemLibrary::Conv_SoftObjectReferenceToObject(TSoftObjectPtr<FObject> SoftObject);


// Function  Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString
// Offset::0x6457860;
FString FKismetSystemLibrary::Conv_SoftObjectReferenceToString(TSoftObjectPtr<FObject> SoftObjectReference);


// Function  Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef
// Offset::0x6457F90;
TSoftObjectPtr<FObject> FKismetSystemLibrary::Conv_SoftObjPathToSoftObjRef(FSoftObjectPath SoftObjectPath);


// Function  Engine.KismetSystemLibrary.ConvertToAbsolutePath
// Offset::0x6458AF0;
FString FKismetSystemLibrary::ConvertToAbsolutePath(FString Filename);


// Function  Engine.KismetSystemLibrary.ConvertToRelativePath
// Offset::0x6458BD0;
FString FKismetSystemLibrary::ConvertToRelativePath(FString Filename);


// Function  Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
// Offset::0x64429B0;
void FKismetSystemLibrary::CreateCopyForUndoBuffer(FObject* ObjectToModify);


// Function  Engine.KismetSystemLibrary.Delay
// Offset::0x6455670;
void FKismetSystemLibrary::Delay(FObject* WorldContextObject,float Duration,FLatentActionInfo LatentInfo);


// Function  Engine.KismetSystemLibrary.DelayUntilNextTick
// Offset::0x6455570;
void FKismetSystemLibrary::DelayUntilNextTick(FObject* WorldContextObject,FLatentActionInfo LatentInfo);


// Function  Engine.KismetSystemLibrary.DoesImplementInterface
// Offset::0x64587B0;
bool FKismetSystemLibrary::DoesImplementInterface(FObject* TestObject,FInterface* Interface);


// Function  Engine.KismetSystemLibrary.DrawDebugArrow
// Offset::0x64462A0;
void FKismetSystemLibrary::DrawDebugArrow(FObject* WorldContextObject,FVector LineStart,FVector LineEnd,float ArrowSize,FLinearColor LineColor,float Duration,float Thickness);


// Function  Engine.KismetSystemLibrary.DrawDebugBox
// Offset::0x6445FA0;
void FKismetSystemLibrary::DrawDebugBox(FObject* WorldContextObject,FVector Center,FVector Extent,FLinearColor LineColor,FRotator Rotation,float Duration,float Thickness);


// Function  Engine.KismetSystemLibrary.DrawDebugCamera
// Offset::0x6444AA0;
void FKismetSystemLibrary::DrawDebugCamera(FCameraActor* CameraActor,FLinearColor CameraColor,float Duration);


// Function  Engine.KismetSystemLibrary.DrawDebugCapsule
// Offset::0x64452C0;
void FKismetSystemLibrary::DrawDebugCapsule(FObject* WorldContextObject,FVector Center,float HalfHeight,float Radius,FRotator Rotation,FLinearColor LineColor,float Duration,float Thickness);


// Function  Engine.KismetSystemLibrary.DrawDebugCircle
// Offset::0x6446780;
void FKismetSystemLibrary::DrawDebugCircle(FObject* WorldContextObject,FVector Center,float Radius,int32_t NumSegments,FLinearColor LineColor,float Duration,float Thickness,FVector YAxis,FVector ZAxis,bool bDrawAxis);


// Function  Engine.KismetSystemLibrary.DrawDebugCone
// Offset::0x6445600;
void FKismetSystemLibrary::DrawDebugCone(FObject* WorldContextObject,FVector Origin,FVector Direction,float Length,float AngleWidth,float AngleHeight,int32_t NumSides,FLinearColor LineColor,float Duration,float Thickness);


// Function  Engine.KismetSystemLibrary.DrawDebugConeInDegrees
// Offset::0x6445600;
void FKismetSystemLibrary::DrawDebugConeInDegrees(FObject* WorldContextObject,FVector Origin,FVector Direction,float Length,float AngleWidth,float AngleHeight,int32_t NumSides,FLinearColor LineColor,float Duration,float Thickness);


// Function  Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
// Offset::0x6445D40;
void FKismetSystemLibrary::DrawDebugCoordinateSystem(FObject* WorldContextObject,FVector AxisLoc,FRotator AxisRot,float Scale,float Duration,float Thickness);


// Function  Engine.KismetSystemLibrary.DrawDebugCylinder
// Offset::0x6445A00;
void FKismetSystemLibrary::DrawDebugCylinder(FObject* WorldContextObject,FVector Start,FVector End,float Radius,int32_t Segments,FLinearColor LineColor,float Duration,float Thickness);


// Function  Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
// Offset::0x6444520;
void FKismetSystemLibrary::DrawDebugFloatHistoryLocation(FObject* WorldContextObject,FDebugFloatHistory FloatHistory,FVector DrawLocation,FVector2D DrawSize,FLinearColor DrawColor,float Duration);


// Function  Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
// Offset::0x64447C0;
void FKismetSystemLibrary::DrawDebugFloatHistoryTransform(FObject* WorldContextObject,FDebugFloatHistory FloatHistory,FTransform DrawTransform,FVector2D DrawSize,FLinearColor DrawColor,float Duration);


// Function  Engine.KismetSystemLibrary.DrawDebugFrustum
// Offset::0x6444BD0;
void FKismetSystemLibrary::DrawDebugFrustum(FObject* WorldContextObject,FTransform FrustumTransform,FLinearColor FrustumColor,float Duration,float Thickness);


// Function  Engine.KismetSystemLibrary.DrawDebugLine
// Offset::0x6446B90;
void FKismetSystemLibrary::DrawDebugLine(FObject* WorldContextObject,FVector LineStart,FVector LineEnd,FLinearColor LineColor,float Duration,float Thickness);


// Function  Engine.KismetSystemLibrary.DrawDebugPlane
// Offset::0x6444E00;
void FKismetSystemLibrary::DrawDebugPlane(FObject* WorldContextObject,FPlane PlaneCoordinates,FVector Location,float Size,FLinearColor PlaneColor,float Duration);


// Function  Engine.KismetSystemLibrary.DrawDebugPoint
// Offset::0x6446580;
void FKismetSystemLibrary::DrawDebugPoint(FObject* WorldContextObject,FVector Position,float Size,FLinearColor PointColor,float Duration);


// Function  Engine.KismetSystemLibrary.DrawDebugSphere
// Offset::0x243B8B0;
void FKismetSystemLibrary::DrawDebugSphere(FObject* WorldContextObject,FVector Center,float Radius,int32_t Segments,FLinearColor LineColor,float Duration,float Thickness);


// Function  Engine.KismetSystemLibrary.DrawDebugString
// Offset::0x6445060;
void FKismetSystemLibrary::DrawDebugString(FObject* WorldContextObject,FVector TextLocation,FString Text,FActor* TestBaseActor,FLinearColor TextColor,float Duration);


// Function  Engine.KismetSystemLibrary.EndTransaction
// Offset::0x2455B20;
int32_t FKismetSystemLibrary::EndTransaction();


// Function  Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId
// Offset::0x1FF36C0;
bool FKismetSystemLibrary::EqualEqual_PrimaryAssetId(FPrimaryAssetId A,FPrimaryAssetId B);


// Function  Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType
// Offset::0x1FF3A20;
bool FKismetSystemLibrary::EqualEqual_PrimaryAssetType(FPrimaryAssetType A,FPrimaryAssetType B);


// Function  Engine.KismetSystemLibrary.EqualEqual_SoftClassReference
// Offset::0x64576F0;
bool FKismetSystemLibrary::EqualEqual_SoftClassReference(TSoftClassPtr<UObject> A,TSoftClassPtr<UObject> B);


// Function  Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference
// Offset::0x64576F0;
bool FKismetSystemLibrary::EqualEqual_SoftObjectReference(TSoftObjectPtr<FObject> A,TSoftObjectPtr<FObject> B);


// Function  Engine.KismetSystemLibrary.ExecuteConsoleCommand
// Offset::0x6455B30;
void FKismetSystemLibrary::ExecuteConsoleCommand(FObject* WorldContextObject,FString Command,FPlayerController* SpecificPlayer);


// Function  Engine.KismetSystemLibrary.FlushDebugStrings
// Offset::0x64429B0;
void FKismetSystemLibrary::FlushDebugStrings(FObject* WorldContextObject);


// Function  Engine.KismetSystemLibrary.FlushPersistentDebugLines
// Offset::0x64429B0;
void FKismetSystemLibrary::FlushPersistentDebugLines(FObject* WorldContextObject);


// Function  Engine.KismetSystemLibrary.ForceCloseAdBanner
// Offset::0x6443C10;
void FKismetSystemLibrary::ForceCloseAdBanner();


// Function  Engine.KismetSystemLibrary.GetActorBounds
// Offset::0x64440F0;
void FKismetSystemLibrary::GetActorBounds(FActor* Actor,FVector Origin,FVector BoxExtent);


// Function  Engine.KismetSystemLibrary.GetActorListFromComponentList
// Offset::0x6446E10;
void FKismetSystemLibrary::GetActorListFromComponentList(TArray<FPrimitiveComponent*> ComponentList,FObject* ActorClassFilter,TArray<FActor*> OutActorList);


// Function  Engine.KismetSystemLibrary.GetAdIDCount
// Offset::0x6443C50;
int32_t FKismetSystemLibrary::GetAdIDCount();


// Function  Engine.KismetSystemLibrary.GetBuildConfiguration
// Offset::0x6458EB0;
FString FKismetSystemLibrary::GetBuildConfiguration();


// Function  Engine.KismetSystemLibrary.GetBuildVersion
// Offset::0x6458F30;
FString FKismetSystemLibrary::GetBuildVersion();


// Function  Engine.KismetSystemLibrary.GetClassDisplayName
// Offset::0x64590D0;
FString FKismetSystemLibrary::GetClassDisplayName(FObject* Class);


// Function  Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId
// Offset::0x6442860;
FObject* FKismetSystemLibrary::GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);


// Function  Engine.KismetSystemLibrary.GetCommandLine
// Offset::0x64431A0;
FString FKismetSystemLibrary::GetCommandLine();


// Function  Engine.KismetSystemLibrary.GetComponentBounds
// Offset::0x6444220;
void FKismetSystemLibrary::GetComponentBounds(FSceneComponent* Component,FVector Origin,FVector BoxExtent,float SphereRadius);


// Function  Engine.KismetSystemLibrary.GetConsoleVariableBoolValue
// Offset::0x6455920;
bool FKismetSystemLibrary::GetConsoleVariableBoolValue(FString VariableName);


// Function  Engine.KismetSystemLibrary.GetConsoleVariableFloatValue
// Offset::0x6455A80;
float FKismetSystemLibrary::GetConsoleVariableFloatValue(FString VariableName);


// Function  Engine.KismetSystemLibrary.GetConsoleVariableIntValue
// Offset::0x64559D0;
int32_t FKismetSystemLibrary::GetConsoleVariableIntValue(FString VariableName);


// Function  Engine.KismetSystemLibrary.GetConvenientWindowedResolutions
// Offset::0x6443F30;
bool FKismetSystemLibrary::GetConvenientWindowedResolutions(TArray<FIntPoint> Resolutions);


// Function  Engine.KismetSystemLibrary.GetCurrentBundleState
// Offset::0x6441D50;
bool FKismetSystemLibrary::GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId,bool bForceCurrentState,TArray<FName> OutBundles);


// Function  Engine.KismetSystemLibrary.GetDefaultLanguage
// Offset::0x64433F0;
FString FKismetSystemLibrary::GetDefaultLanguage();


// Function  Engine.KismetSystemLibrary.GetDefaultLocale
// Offset::0x6443370;
FString FKismetSystemLibrary::GetDefaultLocale();


// Function  Engine.KismetSystemLibrary.GetDeviceId
// Offset::0x64432F0;
FString FKismetSystemLibrary::GetDeviceId();


// Function  Engine.KismetSystemLibrary.GetDisplayName
// Offset::0x64591A0;
FString FKismetSystemLibrary::GetDisplayName(FObject* Object);


// Function  Engine.KismetSystemLibrary.GetEngineVersion
// Offset::0x6458FB0;
FString FKismetSystemLibrary::GetEngineVersion();


// Function  Engine.KismetSystemLibrary.GetFrameCount
// Offset::0x64586E0;
int64_t FKismetSystemLibrary::GetFrameCount();


// Function  Engine.KismetSystemLibrary.GetGameBundleId
// Offset::0x6458990;
FString FKismetSystemLibrary::GetGameBundleId();


// Function  Engine.KismetSystemLibrary.GetGameName
// Offset::0x6458E30;
FString FKismetSystemLibrary::GetGameName();


// Function  Engine.KismetSystemLibrary.GetGamepadButtonGlyph
// Offset::0x6443640;
FTexture2D* FKismetSystemLibrary::GetGamepadButtonGlyph(FString ButtonKey,int32_t ControllerIndex);


// Function  Engine.KismetSystemLibrary.GetGamepadControllerName
// Offset::0x6443730;
FString FKismetSystemLibrary::GetGamepadControllerName(int32_t ControllerId);


// Function  Engine.KismetSystemLibrary.GetGameTimeInSeconds
// Offset::0x6458710;
float FKismetSystemLibrary::GetGameTimeInSeconds(FObject* WorldContextObject);


// Function  Engine.KismetSystemLibrary.GetLocalCurrencyCode
// Offset::0x64432F0;
FString FKismetSystemLibrary::GetLocalCurrencyCode();


// Function  Engine.KismetSystemLibrary.GetLocalCurrencySymbol
// Offset::0x64432F0;
FString FKismetSystemLibrary::GetLocalCurrencySymbol();


// Function  Engine.KismetSystemLibrary.GetMinYResolutionFor3DView
// Offset::0x6443ED0;
int32_t FKismetSystemLibrary::GetMinYResolutionFor3DView();


// Function  Engine.KismetSystemLibrary.GetMinYResolutionForUI
// Offset::0x6443F00;
int32_t FKismetSystemLibrary::GetMinYResolutionForUI();


// Function  Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId
// Offset::0x6442910;
FObject* FKismetSystemLibrary::GetObjectFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);


// Function  Engine.KismetSystemLibrary.GetObjectName
// Offset::0x643C2A0;
FString FKismetSystemLibrary::GetObjectName(FObject* Object);


// Function  Engine.KismetSystemLibrary.GetOuterObject
// Offset::0x6459030;
FObject* FKismetSystemLibrary::GetOuterObject(FObject* Object);


// Function  Engine.KismetSystemLibrary.GetPathName
// Offset::0x6459340;
FString FKismetSystemLibrary::GetPathName(FObject* Object);


// Function  Engine.KismetSystemLibrary.GetPlatformUserDir
// Offset::0x6458890;
FString FKismetSystemLibrary::GetPlatformUserDir();


// Function  Engine.KismetSystemLibrary.GetPlatformUserName
// Offset::0x6458910;
FString FKismetSystemLibrary::GetPlatformUserName();


// Function  Engine.KismetSystemLibrary.GetPreferredLanguages
// Offset::0x6443470;
TArray<FString> FKismetSystemLibrary::GetPreferredLanguages();


// Function  Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass
// Offset::0x64424E0;
FPrimaryAssetId FKismetSystemLibrary::GetPrimaryAssetIdFromClass(FObject* Class);


// Function  Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject
// Offset::0x6442580;
FPrimaryAssetId FKismetSystemLibrary::GetPrimaryAssetIdFromObject(FObject* Object);


// Function  Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference
// Offset::0x64421E0;
FPrimaryAssetId FKismetSystemLibrary::GetPrimaryAssetIdFromSoftClassReference(TSoftClassPtr<UObject> SoftClassReference);


// Function  Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference
// Offset::0x6442360;
FPrimaryAssetId FKismetSystemLibrary::GetPrimaryAssetIdFromSoftObjectReference(TSoftObjectPtr<FObject> SoftObjectReference);


// Function  Engine.KismetSystemLibrary.GetPrimaryAssetIdList
// Offset::0x64420E0;
void FKismetSystemLibrary::GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType,TArray<FPrimaryAssetId> OutPrimaryAssetIdList);


// Function  Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState
// Offset::0x6441AF0;
void FKismetSystemLibrary::GetPrimaryAssetsWithBundleState(TArray<FName> RequiredBundles,TArray<FName> ExcludedBundles,TArray<FPrimaryAssetType> ValidTypes,bool bForceCurrentState,TArray<FPrimaryAssetId> OutPrimaryAssetIdList);


// Function  Engine.KismetSystemLibrary.GetProjectContentDirectory
// Offset::0x6458D30;
FString FKismetSystemLibrary::GetProjectContentDirectory();


// Function  Engine.KismetSystemLibrary.GetProjectDirectory
// Offset::0x6458DB0;
FString FKismetSystemLibrary::GetProjectDirectory();


// Function  Engine.KismetSystemLibrary.GetProjectSavedDirectory
// Offset::0x6458CB0;
FString FKismetSystemLibrary::GetProjectSavedDirectory();


// Function  Engine.KismetSystemLibrary.GetRenderingDetailMode
// Offset::0x64440C0;
int32_t FKismetSystemLibrary::GetRenderingDetailMode();


// Function  Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
// Offset::0x6444090;
int32_t FKismetSystemLibrary::GetRenderingMaterialQualityLevel();


// Function  Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId
// Offset::0x6442620;
TSoftClassPtr<UObject> FKismetSystemLibrary::GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);


// Function  Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId
// Offset::0x6442740;
TSoftObjectPtr<FObject> FKismetSystemLibrary::GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);


// Function  Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
// Offset::0x6443FE0;
bool FKismetSystemLibrary::GetSupportedFullscreenResolutions(TArray<FIntPoint> Resolutions);


// Function  Engine.KismetSystemLibrary.GetSystemPath
// Offset::0x6459270;
FString FKismetSystemLibrary::GetSystemPath(FObject* Object);


// Function  Engine.KismetSystemLibrary.GetUniqueDeviceId
// Offset::0x6458340;
FString FKismetSystemLibrary::GetUniqueDeviceId();


// Function  Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
// Offset::0x20074E0;
bool FKismetSystemLibrary::GetVolumeButtonsHandledBySystem();


// Function  Engine.KismetSystemLibrary.HasMultipleLocalPlayers
// Offset::0x64583C0;
bool FKismetSystemLibrary::HasMultipleLocalPlayers(FObject* WorldContextObject);


// Function  Engine.KismetSystemLibrary.HideAdBanner
// Offset::0x6443C30;
void FKismetSystemLibrary::HideAdBanner();


// Function  Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
// Offset::0x6443800;
bool FKismetSystemLibrary::IsControllerAssignedToGamepad(int32_t ControllerId);


// Function  Engine.KismetSystemLibrary.IsDedicatedServer
// Offset::0x64585A0;
bool FKismetSystemLibrary::IsDedicatedServer(FObject* WorldContextObject);


// Function  Engine.KismetSystemLibrary.IsInterstitialAdAvailable
// Offset::0x6443B50;
bool FKismetSystemLibrary::IsInterstitialAdAvailable();


// Function  Engine.KismetSystemLibrary.IsInterstitialAdRequested
// Offset::0x6443B20;
bool FKismetSystemLibrary::IsInterstitialAdRequested();


// Function  Engine.KismetSystemLibrary.IsLoggedIn
// Offset::0x6443930;
bool FKismetSystemLibrary::IsLoggedIn(FPlayerController* SpecificPlayer);


// Function  Engine.KismetSystemLibrary.IsPackagedForDistribution
// Offset::0x20074E0;
bool FKismetSystemLibrary::IsPackagedForDistribution();


// Function  Engine.KismetSystemLibrary.IsScreensaverEnabled
// Offset::0x243E320;
bool FKismetSystemLibrary::IsScreensaverEnabled();


// Function  Engine.KismetSystemLibrary.IsServer
// Offset::0x6458640;
bool FKismetSystemLibrary::IsServer(FObject* WorldContextObject);


// Function  Engine.KismetSystemLibrary.IsSplitScreen
// Offset::0x6458460;
bool FKismetSystemLibrary::IsSplitScreen(FObject* WorldContextObject);


// Function  Engine.KismetSystemLibrary.IsStandalone
// Offset::0x6458500;
bool FKismetSystemLibrary::IsStandalone(FObject* WorldContextObject);


// Function  Engine.KismetSystemLibrary.IsUnattended
// Offset::0x244D8C0;
bool FKismetSystemLibrary::IsUnattended();


// Function  Engine.KismetSystemLibrary.IsValid
// Offset::0x6459410;
bool FKismetSystemLibrary::IsValid(FObject* Object);


// Function  Engine.KismetSystemLibrary.IsValidClass
// Offset::0x6459410;
bool FKismetSystemLibrary::IsValidClass(FObject* Class);


// Function  Engine.KismetSystemLibrary.IsValidPrimaryAssetId
// Offset::0x1FF38A0;
bool FKismetSystemLibrary::IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);


// Function  Engine.KismetSystemLibrary.IsValidPrimaryAssetType
// Offset::0x1FF3BD0;
bool FKismetSystemLibrary::IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType);


// Function  Engine.KismetSystemLibrary.IsValidSoftClassReference
// Offset::0x6457970;
bool FKismetSystemLibrary::IsValidSoftClassReference(TSoftClassPtr<UObject> SoftClassReference);


// Function  Engine.KismetSystemLibrary.IsValidSoftObjectReference
// Offset::0x6457970;
bool FKismetSystemLibrary::IsValidSoftObjectReference(TSoftObjectPtr<FObject> SoftObjectReference);


// Function  Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle
// Offset::0x64545A0;
void FKismetSystemLibrary::K2_ClearAndInvalidateTimerHandle(FObject* WorldContextObject,FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.K2_ClearTimer
// Offset::0x6453AB0;
void FKismetSystemLibrary::K2_ClearTimer(FObject* Object,FString FunctionName);


// Function  Engine.KismetSystemLibrary.K2_ClearTimerDelegate
// Offset::0x6454CF0;
void FKismetSystemLibrary::K2_ClearTimerDelegate(FDelegate Delegate);


// Function  Engine.KismetSystemLibrary.K2_ClearTimerHandle
// Offset::0x6454690;
void FKismetSystemLibrary::K2_ClearTimerHandle(FObject* WorldContextObject,FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
// Offset::0x6453350;
float FKismetSystemLibrary::K2_GetTimerElapsedTime(FObject* Object,FString FunctionName);


// Function  Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
// Offset::0x64548D0;
float FKismetSystemLibrary::K2_GetTimerElapsedTimeDelegate(FDelegate Delegate);


// Function  Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
// Offset::0x6454050;
float FKismetSystemLibrary::K2_GetTimerElapsedTimeHandle(FObject* WorldContextObject,FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
// Offset::0x6453210;
float FKismetSystemLibrary::K2_GetTimerRemainingTime(FObject* Object,FString FunctionName);


// Function  Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
// Offset::0x6454820;
float FKismetSystemLibrary::K2_GetTimerRemainingTimeDelegate(FDelegate Delegate);


// Function  Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
// Offset::0x6453F60;
float FKismetSystemLibrary::K2_GetTimerRemainingTimeHandle(FObject* WorldContextObject,FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
// Offset::0x6454770;
FTimerHandle FKismetSystemLibrary::K2_InvalidateTimerHandle(FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.K2_IsTimerActive
// Offset::0x6453710;
bool FKismetSystemLibrary::K2_IsTimerActive(FObject* Object,FString FunctionName);


// Function  Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
// Offset::0x6454AE0;
bool FKismetSystemLibrary::K2_IsTimerActiveDelegate(FDelegate Delegate);


// Function  Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
// Offset::0x6454300;
bool FKismetSystemLibrary::K2_IsTimerActiveHandle(FObject* WorldContextObject,FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.K2_IsTimerPaused
// Offset::0x64535D0;
bool FKismetSystemLibrary::K2_IsTimerPaused(FObject* Object,FString FunctionName);


// Function  Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
// Offset::0x6454A30;
bool FKismetSystemLibrary::K2_IsTimerPausedDelegate(FDelegate Delegate);


// Function  Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
// Offset::0x6454220;
bool FKismetSystemLibrary::K2_IsTimerPausedHandle(FObject* WorldContextObject,FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.K2_IsValidTimerHandle
// Offset::0x2196D50;
bool FKismetSystemLibrary::K2_IsValidTimerHandle(FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.K2_PauseTimer
// Offset::0x6453980;
void FKismetSystemLibrary::K2_PauseTimer(FObject* Object,FString FunctionName);


// Function  Engine.KismetSystemLibrary.K2_PauseTimerDelegate
// Offset::0x6454C40;
void FKismetSystemLibrary::K2_PauseTimerDelegate(FDelegate Delegate);


// Function  Engine.KismetSystemLibrary.K2_PauseTimerHandle
// Offset::0x64544C0;
void FKismetSystemLibrary::K2_PauseTimerHandle(FObject* WorldContextObject,FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.K2_SetTimer
// Offset::0x6453D30;
FTimerHandle FKismetSystemLibrary::K2_SetTimer(FObject* Object,FName FunctionName,float Time,bool bLooping,float InitialStartDelay,float InitialStartDelayVariance);


// Function  Engine.KismetSystemLibrary.K2_SetTimerDelegate
// Offset::0x6454E60;
FTimerHandle FKismetSystemLibrary::K2_SetTimerDelegate(FDelegate Delegate,float Time,bool bLooping,float InitialStartDelay,float InitialStartDelayVariance);


// Function  Engine.KismetSystemLibrary.K2_SetTimerForNextTick
// Offset::0x6453BE0;
FTimerHandle FKismetSystemLibrary::K2_SetTimerForNextTick(FObject* Object,FString FunctionName);


// Function  Engine.KismetSystemLibrary.K2_SetTimerForNextTickDelegate
// Offset::0x6454DA0;
FTimerHandle FKismetSystemLibrary::K2_SetTimerForNextTickDelegate(FDelegate Delegate);


// Function  Engine.KismetSystemLibrary.K2_TimerExists
// Offset::0x6453490;
bool FKismetSystemLibrary::K2_TimerExists(FObject* Object,FString FunctionName);


// Function  Engine.KismetSystemLibrary.K2_TimerExistsDelegate
// Offset::0x6454980;
bool FKismetSystemLibrary::K2_TimerExistsDelegate(FDelegate Delegate);


// Function  Engine.KismetSystemLibrary.K2_TimerExistsHandle
// Offset::0x6454140;
bool FKismetSystemLibrary::K2_TimerExistsHandle(FObject* WorldContextObject,FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.K2_UnPauseTimer
// Offset::0x6453850;
void FKismetSystemLibrary::K2_UnPauseTimer(FObject* Object,FString FunctionName);


// Function  Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
// Offset::0x6454B90;
void FKismetSystemLibrary::K2_UnPauseTimerDelegate(FDelegate Delegate);


// Function  Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
// Offset::0x64543E0;
void FKismetSystemLibrary::K2_UnPauseTimerHandle(FObject* WorldContextObject,FTimerHandle Handle);


// Function  Engine.KismetSystemLibrary.LaunchURL
// Offset::0x6443E30;
void FKismetSystemLibrary::LaunchURL(FString URL);


// Function  Engine.KismetSystemLibrary.LineTraceMulti
// Offset::0x644F430;
bool FKismetSystemLibrary::LineTraceMulti(FObject* WorldContextObject,FVector Start,FVector End,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.LineTraceMultiByProfile
// Offset::0x6449420;
bool FKismetSystemLibrary::LineTraceMultiByProfile(FObject* WorldContextObject,FVector Start,FVector End,FName ProfileName,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.LineTraceMultiForObjects
// Offset::0x644C480;
bool FKismetSystemLibrary::LineTraceMultiForObjects(FObject* WorldContextObject,FVector Start,FVector End,TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.LineTraceSingle
// Offset::0x644F940;
bool FKismetSystemLibrary::LineTraceSingle(FObject* WorldContextObject,FVector Start,FVector End,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.LineTraceSingleByProfile
// Offset::0x6449930;
bool FKismetSystemLibrary::LineTraceSingleByProfile(FObject* WorldContextObject,FVector Start,FVector End,FName ProfileName,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.LineTraceSingleForObjects
// Offset::0x644C9B0;
bool FKismetSystemLibrary::LineTraceSingleForObjects(FObject* WorldContextObject,FVector Start,FVector End,TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.LoadAsset
// Offset::0x6456D20;
void FKismetSystemLibrary::LoadAsset(FObject* WorldContextObject,TSoftObjectPtr<FObject> Asset,FDelegate OnLoaded,FLatentActionInfo LatentInfo);


// Function  Engine.KismetSystemLibrary.LoadAsset_Blocking
// Offset::0x6457A50;
FObject* FKismetSystemLibrary::LoadAsset_Blocking(TSoftObjectPtr<FObject> Asset);


// Function  Engine.KismetSystemLibrary.LoadAssetClass
// Offset::0x6456A50;
void FKismetSystemLibrary::LoadAssetClass(FObject* WorldContextObject,TSoftClassPtr<UObject> AssetClass,FDelegate OnLoaded,FLatentActionInfo LatentInfo);


// Function  Engine.KismetSystemLibrary.LoadClassAsset_Blocking
// Offset::0x64573F0;
FObject* FKismetSystemLibrary::LoadClassAsset_Blocking(TSoftClassPtr<UObject> AssetClass);


// Function  Engine.KismetSystemLibrary.LoadInterstitialAd
// Offset::0x6443B80;
void FKismetSystemLibrary::LoadInterstitialAd(int32_t AdIdIndex);


// Function  Engine.KismetSystemLibrary.LogString
// Offset::0x6456300;
void FKismetSystemLibrary::LogString(FString InString,bool bPrintToLog);


// Function  Engine.KismetSystemLibrary.MakeLiteralBool
// Offset::0x63EAA30;
bool FKismetSystemLibrary::MakeLiteralBool(bool Value);


// Function  Engine.KismetSystemLibrary.MakeLiteralByte
// Offset::0x64566E0;
char FKismetSystemLibrary::MakeLiteralByte(char Value);


// Function  Engine.KismetSystemLibrary.MakeLiteralDouble
// Offset::0x6456800;
double FKismetSystemLibrary::MakeLiteralDouble(double Value);


// Function  Engine.KismetSystemLibrary.MakeLiteralFloat
// Offset::0x64568A0;
float FKismetSystemLibrary::MakeLiteralFloat(float Value);


// Function  Engine.KismetSystemLibrary.MakeLiteralInt
// Offset::0x64569C0;
int32_t FKismetSystemLibrary::MakeLiteralInt(int32_t Value);


// Function  Engine.KismetSystemLibrary.MakeLiteralInt64
// Offset::0x6456930;
int64_t FKismetSystemLibrary::MakeLiteralInt64(int64_t Value);


// Function  Engine.KismetSystemLibrary.MakeLiteralName
// Offset::0x6456770;
FName FKismetSystemLibrary::MakeLiteralName(FName Value);


// Function  Engine.KismetSystemLibrary.MakeLiteralString
// Offset::0x6456590;
FString FKismetSystemLibrary::MakeLiteralString(FString Value);


// Function  Engine.KismetSystemLibrary.MakeLiteralText
// Offset::0x64563F0;
FText FKismetSystemLibrary::MakeLiteralText(FText Value);


// Function  Engine.KismetSystemLibrary.MakeSoftClassPath
// Offset::0x6457E80;
FSoftClassPath FKismetSystemLibrary::MakeSoftClassPath(FString PathString);


// Function  Engine.KismetSystemLibrary.MakeSoftObjectPath
// Offset::0x64580C0;
FSoftObjectPath FKismetSystemLibrary::MakeSoftObjectPath(FString PathString);


// Function  Engine.KismetSystemLibrary.MoveComponentTo
// Offset::0x6455060;
void FKismetSystemLibrary::MoveComponentTo(FSceneComponent* Component,FVector TargetRelativeLocation,FRotator TargetRelativeRotation,bool bEaseOut,bool bEaseIn,float OverTime,bool bForceShortestRotationPath,enum class EMoveComponentAction MoveAction,FLatentActionInfo LatentInfo);


// Function  Engine.KismetSystemLibrary.NormalizeFilename
// Offset::0x6458A10;
FString FKismetSystemLibrary::NormalizeFilename(FString InFilename);


// Function  Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId
// Offset::0x1FF35C0;
bool FKismetSystemLibrary::NotEqual_PrimaryAssetId(FPrimaryAssetId A,FPrimaryAssetId B);


// Function  Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType
// Offset::0x1FF3940;
bool FKismetSystemLibrary::NotEqual_PrimaryAssetType(FPrimaryAssetType A,FPrimaryAssetType B);


// Function  Engine.KismetSystemLibrary.NotEqual_SoftClassReference
// Offset::0x6457580;
bool FKismetSystemLibrary::NotEqual_SoftClassReference(TSoftClassPtr<UObject> A,TSoftClassPtr<UObject> B);


// Function  Engine.KismetSystemLibrary.NotEqual_SoftObjectReference
// Offset::0x6457580;
bool FKismetSystemLibrary::NotEqual_SoftObjectReference(TSoftObjectPtr<FObject> A,TSoftObjectPtr<FObject> B);


// Function  Engine.KismetSystemLibrary.ParseCommandLine
// Offset::0x6442ED0;
void FKismetSystemLibrary::ParseCommandLine(FString InCmdLine,TArray<FString> OutTokens,TArray<FString> OutSwitches,TMap<FString,FString> OutParams);


// Function  Engine.KismetSystemLibrary.ParseParam
// Offset::0x6442DD0;
bool FKismetSystemLibrary::ParseParam(FString InString,FString InParam);


// Function  Engine.KismetSystemLibrary.ParseParamValue
// Offset::0x6442C60;
bool FKismetSystemLibrary::ParseParamValue(FString InString,FString InParam,FString OutValue);


// Function  Engine.KismetSystemLibrary.PrintString
// Offset::0x6456050;
void FKismetSystemLibrary::PrintString(FObject* WorldContextObject,FString InString,bool bPrintToScreen,bool bPrintToLog,FLinearColor TextColor,float Duration,FName Key);


// Function  Engine.KismetSystemLibrary.PrintText
// Offset::0x6455D40;
void FKismetSystemLibrary::PrintText(FObject* WorldContextObject,FText InText,bool bPrintToScreen,bool bPrintToLog,FLinearColor TextColor,float Duration,FName Key);


// Function  Engine.KismetSystemLibrary.PrintWarning
// Offset::0x244BC30;
void FKismetSystemLibrary::PrintWarning(FString InString);


// Function  Engine.KismetSystemLibrary.QuitGame
// Offset::0x64557B0;
void FKismetSystemLibrary::QuitGame(FObject* WorldContextObject,FPlayerController* SpecificPlayer,enum class EQuitPreference QuitPreference,bool bIgnorePlatformRestrictions);


// Function  Engine.KismetSystemLibrary.RegisterForRemoteNotifications
// Offset::0x64432D0;
void FKismetSystemLibrary::RegisterForRemoteNotifications();


// Function  Engine.KismetSystemLibrary.ResetGamepadAssignments
// Offset::0x1B91E70;
void FKismetSystemLibrary::ResetGamepadAssignments();


// Function  Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
// Offset::0x6442A40;
void FKismetSystemLibrary::ResetGamepadAssignmentToController(int32_t ControllerId);


// Function  Engine.KismetSystemLibrary.RetriggerableDelay
// Offset::0x6455430;
void FKismetSystemLibrary::RetriggerableDelay(FObject* WorldContextObject,float Duration,FLatentActionInfo LatentInfo);


// Function  Engine.KismetSystemLibrary.SetBoolPropertyByName
// Offset::0x6452C20;
void FKismetSystemLibrary::SetBoolPropertyByName(FObject* Object,FName PropertyName,bool Value);


// Function  Engine.KismetSystemLibrary.SetBytePropertyByName
// Offset::0x6452E80;
void FKismetSystemLibrary::SetBytePropertyByName(FObject* Object,FName PropertyName,char Value);


// Function  Engine.KismetSystemLibrary.SetClassPropertyByName
// Offset::0x64529C0;
void FKismetSystemLibrary::SetClassPropertyByName(FObject* Object,FName PropertyName,FObject* Value);


// Function  Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
// Offset::0x645EC10;
void FKismetSystemLibrary::SetCollisionProfileNameProperty(FObject* Object,FName PropertyName,FCollisionProfileName Value);


// Function  Engine.KismetSystemLibrary.SetColorPropertyByName
// Offset::0x6451BC0;
void FKismetSystemLibrary::SetColorPropertyByName(FObject* Object,FName PropertyName,FColor Value);


// Function  Engine.KismetSystemLibrary.SetDoublePropertyByName
// Offset::0x6452D50;
void FKismetSystemLibrary::SetDoublePropertyByName(FObject* Object,FName PropertyName,double Value);


// Function  Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback
// Offset::0x64438A0;
void FKismetSystemLibrary::SetGamepadsBlockDeviceFeedback(bool bBlock);


// Function  Engine.KismetSystemLibrary.SetInt64PropertyByName
// Offset::0x6452FB0;
void FKismetSystemLibrary::SetInt64PropertyByName(FObject* Object,FName PropertyName,int64_t Value);


// Function  Engine.KismetSystemLibrary.SetInterfacePropertyByName
// Offset::0x6452880;
void FKismetSystemLibrary::SetInterfacePropertyByName(FObject* Object,FName PropertyName,TScriptInterface<IInterface> Value);


// Function  Engine.KismetSystemLibrary.SetIntPropertyByName
// Offset::0x64530E0;
void FKismetSystemLibrary::SetIntPropertyByName(FObject* Object,FName PropertyName,int32_t Value);


// Function  Engine.KismetSystemLibrary.SetLinearColorPropertyByName
// Offset::0x6451CF0;
void FKismetSystemLibrary::SetLinearColorPropertyByName(FObject* Object,FName PropertyName,FLinearColor Value);


// Function  Engine.KismetSystemLibrary.SetNamePropertyByName
// Offset::0x6452740;
void FKismetSystemLibrary::SetNamePropertyByName(FObject* Object,FName PropertyName,FName Value);


// Function  Engine.KismetSystemLibrary.SetObjectPropertyByName
// Offset::0x6452AF0;
void FKismetSystemLibrary::SetObjectPropertyByName(FObject* Object,FName PropertyName,FObject* Value);


// Function  Engine.KismetSystemLibrary.SetRotatorPropertyByName
// Offset::0x6451E20;
void FKismetSystemLibrary::SetRotatorPropertyByName(FObject* Object,FName PropertyName,FRotator Value);


// Function  Engine.KismetSystemLibrary.SetSoftClassPropertyByName
// Offset::0x6452460;
void FKismetSystemLibrary::SetSoftClassPropertyByName(FObject* Object,FName PropertyName,TSoftClassPtr<UObject> Value);


// Function  Engine.KismetSystemLibrary.SetSoftObjectPropertyByName
// Offset::0x64525D0;
void FKismetSystemLibrary::SetSoftObjectPropertyByName(FObject* Object,FName PropertyName,TSoftObjectPtr<FObject> Value);


// Function  Engine.KismetSystemLibrary.SetStringPropertyByName
// Offset::0x6452320;
void FKismetSystemLibrary::SetStringPropertyByName(FObject* Object,FName PropertyName,FString Value);


// Function  Engine.KismetSystemLibrary.SetStructurePropertyByName
// Offset::0x645EC10;
void FKismetSystemLibrary::SetStructurePropertyByName(FObject* Object,FName PropertyName,FGenericStruct Value);


// Function  Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage
// Offset::0x6443560;
void FKismetSystemLibrary::SetSuppressViewportTransitionMessage(FObject* WorldContextObject,bool bState);


// Function  Engine.KismetSystemLibrary.SetTextPropertyByName
// Offset::0x64521B0;
void FKismetSystemLibrary::SetTextPropertyByName(FObject* Object,FName PropertyName,FText Value);


// Function  Engine.KismetSystemLibrary.SetTransformPropertyByName
// Offset::0x6451A30;
void FKismetSystemLibrary::SetTransformPropertyByName(FObject* Object,FName PropertyName,FTransform Value);


// Function  Engine.KismetSystemLibrary.SetUserActivity
// Offset::0x6443220;
void FKismetSystemLibrary::SetUserActivity(FUserActivity UserActivity);


// Function  Engine.KismetSystemLibrary.SetVector3fPropertyByName
// Offset::0x6451F50;
void FKismetSystemLibrary::SetVector3fPropertyByName(FObject* Object,FName PropertyName,FVector3f Value);


// Function  Engine.KismetSystemLibrary.SetVectorPropertyByName
// Offset::0x6452080;
void FKismetSystemLibrary::SetVectorPropertyByName(FObject* Object,FName PropertyName,FVector Value);


// Function  Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
// Offset::0x64438A0;
void FKismetSystemLibrary::SetVolumeButtonsHandledBySystem(bool bEnabled);


// Function  Engine.KismetSystemLibrary.SetWindowTitle
// Offset::0x6455C70;
void FKismetSystemLibrary::SetWindowTitle(FText Title);


// Function  Engine.KismetSystemLibrary.ShowAdBanner
// Offset::0x6443C80;
void FKismetSystemLibrary::ShowAdBanner(int32_t AdIdIndex,bool bShowOnBottomOfScreen);


// Function  Engine.KismetSystemLibrary.ShowInterstitialAd
// Offset::0x6443B00;
void FKismetSystemLibrary::ShowInterstitialAd();


// Function  Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
// Offset::0x64439D0;
void FKismetSystemLibrary::ShowPlatformSpecificAchievementsScreen(FPlayerController* SpecificPlayer);


// Function  Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
// Offset::0x6443A60;
void FKismetSystemLibrary::ShowPlatformSpecificLeaderboardScreen(FString CategoryName);


// Function  Engine.KismetSystemLibrary.SnapshotObject
// Offset::0x64429B0;
void FKismetSystemLibrary::SnapshotObject(FObject* Object);


// Function  Engine.KismetSystemLibrary.SphereOverlapActors
// Offset::0x64515B0;
bool FKismetSystemLibrary::SphereOverlapActors(FObject* WorldContextObject,FVector SpherePos,float SphereRadius,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ActorClassFilter,TArray<FActor*> ActorsToIgnore,TArray<FActor*> OutActors);


// Function  Engine.KismetSystemLibrary.SphereOverlapComponents
// Offset::0x6451290;
bool FKismetSystemLibrary::SphereOverlapComponents(FObject* WorldContextObject,FVector SpherePos,float SphereRadius,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ComponentClassFilter,TArray<FActor*> ActorsToIgnore,TArray<FPrimitiveComponent*> OutComponents);


// Function  Engine.KismetSystemLibrary.SphereTraceMulti
// Offset::0x644E890;
bool FKismetSystemLibrary::SphereTraceMulti(FObject* WorldContextObject,FVector Start,FVector End,float Radius,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.SphereTraceMultiByProfile
// Offset::0x6448880;
bool FKismetSystemLibrary::SphereTraceMultiByProfile(FObject* WorldContextObject,FVector Start,FVector End,float Radius,FName ProfileName,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.SphereTraceMultiForObjects
// Offset::0x644B8A0;
bool FKismetSystemLibrary::SphereTraceMultiForObjects(FObject* WorldContextObject,FVector Start,FVector End,float Radius,TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.SphereTraceSingle
// Offset::0x644EE00;
bool FKismetSystemLibrary::SphereTraceSingle(FObject* WorldContextObject,FVector Start,FVector End,float Radius,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.SphereTraceSingleByProfile
// Offset::0x6448DF0;
bool FKismetSystemLibrary::SphereTraceSingleByProfile(FObject* WorldContextObject,FVector Start,FVector End,float Radius,FName ProfileName,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.SphereTraceSingleForObjects
// Offset::0x644BE30;
bool FKismetSystemLibrary::SphereTraceSingleForObjects(FObject* WorldContextObject,FVector Start,FVector End,float Radius,TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  Engine.KismetSystemLibrary.StackTrace
// Offset::0x645ED30;
void FKismetSystemLibrary::StackTrace();


// Function  Engine.KismetSystemLibrary.TransactObject
// Offset::0x64429B0;
void FKismetSystemLibrary::TransactObject(FObject* Object);


// Function  Engine.KismetSystemLibrary.UnloadPrimaryAsset
// Offset::0x6441F60;
void FKismetSystemLibrary::UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId);


// Function  Engine.KismetSystemLibrary.UnloadPrimaryAssetList
// Offset::0x6441EB0;
void FKismetSystemLibrary::UnloadPrimaryAssetList(TArray<FPrimaryAssetId> PrimaryAssetIdList);


// Function  Engine.KismetSystemLibrary.UnregisterForRemoteNotifications
// Offset::0x64432D0;
void FKismetSystemLibrary::UnregisterForRemoteNotifications();


// Function  Engine.PlatformEventsComponent.IsInLaptopMode
// Offset::0x64BE6A0;
bool FPlatformEventsComponent::IsInLaptopMode();


// Function  Engine.PlatformEventsComponent.IsInTabletMode
// Offset::0x64BE670;
bool FPlatformEventsComponent::IsInTabletMode();


// Function  Engine.PlatformEventsComponent.SupportsConvertibleLaptops
// Offset::0x64BE640;
bool FPlatformEventsComponent::SupportsConvertibleLaptops();


// Function  Engine.GameInstance.DebugCreatePlayer
// Offset::0x6394B50;
void FGameInstance::DebugCreatePlayer(int32_t ControllerId);


// Function  Engine.GameInstance.DebugRemovePlayer
// Offset::0x20A2C80;
void FGameInstance::DebugRemovePlayer(int32_t ControllerId);


// Function  Engine.GameInstance.HandleClientActionReasonError
// Offset::0x3D30810;
void FGameInstance::HandleClientActionReasonError(int32_t ActionReason,FString ErrorString);


// Function  Engine.GameInstance.HandleClientViolationTypeError
// Offset::0x3D30810;
void FGameInstance::HandleClientViolationTypeError(int32_t ViolationType,FString ErrorString);


// Function  Engine.GameInstance.HandleNetworkError
// Offset::0x3D30810;
void FGameInstance::HandleNetworkError(enum class ENetworkFailure FailureType,bool bIsServer,FString ErrorString);


// Function  Engine.GameInstance.HandleTravelError
// Offset::0x3D30810;
void FGameInstance::HandleTravelError(enum class ETravelFailure FailureType);


// Function  Engine.GameInstance.ReceiveInit
// Offset::0x3D30810;
void FGameInstance::ReceiveInit();


// Function  Engine.GameInstance.ReceiveShutdown
// Offset::0x3D30810;
void FGameInstance::ReceiveShutdown();


// Function  Engine.ProjectileMovementComponent.IsInterpolationComplete
// Offset::0x64F1210;
bool FProjectileMovementComponent::IsInterpolationComplete();


// Function  Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
// Offset::0x64F1630;
bool FProjectileMovementComponent::IsVelocityUnderSimulationThreshold();


// Function  Engine.ProjectileMovementComponent.LimitVelocity
// Offset::0x64F1150;
FVector FProjectileMovementComponent::LimitVelocity(FVector NewVelocity);


// Function  Engine.ProjectileMovementComponent.MoveInterpolationTarget
// Offset::0x64F1280;
void FProjectileMovementComponent::MoveInterpolationTarget(FVector NewLocation,FRotator NewRotation);


// Function  Engine.ProjectileMovementComponent.ResetInterpolation
// Offset::0x64F1260;
void FProjectileMovementComponent::ResetInterpolation();


// Function  Engine.ProjectileMovementComponent.SetInterpolatedComponent
// Offset::0x64F1370;
void FProjectileMovementComponent::SetInterpolatedComponent(FSceneComponent* Component);


// Function  Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
// Offset::0x64F1580;
void FProjectileMovementComponent::SetVelocityInLocalSpace(FVector NewVelocity);


// Function  Engine.ProjectileMovementComponent.StopSimulating
// Offset::0x64F1410;
void FProjectileMovementComponent::StopSimulating(FHitResult HitResult);


// Function  Engine.BlueprintAsyncActionBase.Activate
// Offset::0x20E8030;
void FBlueprintAsyncActionBase::Activate();


// Function  Engine.CancellableAsyncAction.Cancel
// Offset::0x17A1E00;
void FCancellableAsyncAction::Cancel();


// Function  Engine.CancellableAsyncAction.IsActive
// Offset::0x2876320;
bool FCancellableAsyncAction::IsActive();


// Function  GameplayAbilities.AbilityAsync.EndAction
// Offset::0x1799CB0;
void FAbilityAsync::EndAction();


// Function  GameplayAbilities.AbilityAsync_WaitAttributeChanged.WaitForAttributeChanged
// Offset::0x1B69B50;
FAbilityAsync_WaitAttributeChanged* FAbilityAsync_WaitAttributeChanged::WaitForAttributeChanged(FActor* TargetActor,FGameplayAttribute Attribute,bool OnlyTriggerOnce);


// Function  GameplayAbilities.AbilityAsync_WaitGameplayEffectApplied.WaitGameplayEffectAppliedToActor
// Offset::0x1B6A000;
FAbilityAsync_WaitGameplayEffectApplied* FAbilityAsync_WaitGameplayEffectApplied::WaitGameplayEffectAppliedToActor(FActor* TargetActor,FGameplayTargetDataFilterHandle SourceFilter,FGameplayTagRequirements SourceTagRequirements,FGameplayTagRequirements TargetTagRequirements,bool TriggerOnce,bool ListenForPeriodicEffect);


// Function  GameplayAbilities.AbilityAsync_WaitGameplayEvent.WaitGameplayEventToActor
// Offset::0x1B6A7B0;
FAbilityAsync_WaitGameplayEvent* FAbilityAsync_WaitGameplayEvent::WaitGameplayEventToActor(FActor* TargetActor,FGameplayTag EventTag,bool OnlyTriggerOnce,bool OnlyMatchExact);


// Function  GameplayTasks.GameplayTask.EndTask
// Offset::0x6860570;
void FGameplayTask::EndTask();


// Function  GameplayTasks.GameplayTask.ReadyForActivation
// Offset::0x6860590;
void FGameplayTask::ReadyForActivation();


// Function  GameplayTasks.GameplayTask_WaitDelay.TaskWaitDelay
// Offset::0x6862090;
FGameplayTask_WaitDelay* FGameplayTask_WaitDelay::TaskWaitDelay(TScriptInterface<IGameplayTaskOwnerInterface> TaskOwner,float Time,char Priority);


// Function  GameplayTasks.GameplayTasksComponent.K2_RunGameplayTask
// Offset::0x6860B80;
enum class EGameplayTaskRunResult FGameplayTasksComponent::K2_RunGameplayTask(TScriptInterface<IGameplayTaskOwnerInterface> TaskOwner,FGameplayTask* Task,char Priority,TArray<FGameplayTaskResource*> AdditionalRequiredResources,TArray<FGameplayTaskResource*> AdditionalClaimedResources);


// Function  GameplayTasks.GameplayTasksComponent.OnRep_SimulatedTasks
// Offset::0x6860E30;
void FGameplayTasksComponent::OnRep_SimulatedTasks();


// Function  GameplayAbilities.AbilitySystemComponent.BP_ApplyGameplayEffectSpecToSelf
// Offset::0x1B850F0;
FActiveGameplayEffectHandle FAbilitySystemComponent::BP_ApplyGameplayEffectSpecToSelf(FGameplayEffectSpecHandle SpecHandle);


// Function  GameplayAbilities.AbilitySystemComponent.BP_ApplyGameplayEffectSpecToTarget
// Offset::0x1B851E0;
FActiveGameplayEffectHandle FAbilitySystemComponent::BP_ApplyGameplayEffectSpecToTarget(FGameplayEffectSpecHandle SpecHandle,FAbilitySystemComponent* Target);


// Function  GameplayAbilities.AbilitySystemComponent.BP_ApplyGameplayEffectToSelf
// Offset::0x1B83FB0;
FActiveGameplayEffectHandle FAbilitySystemComponent::BP_ApplyGameplayEffectToSelf(FGameplayEffect* GameplayEffectClass,float Level,FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemComponent.BP_ApplyGameplayEffectToTarget
// Offset::0x1B84160;
FActiveGameplayEffectHandle FAbilitySystemComponent::BP_ApplyGameplayEffectToTarget(FGameplayEffect* GameplayEffectClass,FAbilitySystemComponent* Target,float Level,FGameplayEffectContextHandle Context);


// Function  GameplayAbilities.AbilitySystemComponent.ClearAbility
// Offset::0x1B817A0;
void FAbilitySystemComponent::ClearAbility(FGameplayAbilitySpecHandle Handle);


// Function  GameplayAbilities.AbilitySystemComponent.ClearAllAbilities
// Offset::0x1B818F0;
void FAbilitySystemComponent::ClearAllAbilities();


// Function  GameplayAbilities.AbilitySystemComponent.ClearAllAbilitiesWithInputID
// Offset::0x1B81850;
void FAbilitySystemComponent::ClearAllAbilitiesWithInputID(int32_t InputID);


// Function  GameplayAbilities.AbilitySystemComponent.ClientActivateAbilityFailed
// Offset::0x1B7E4D0;
void FAbilitySystemComponent::ClientActivateAbilityFailed(FGameplayAbilitySpecHandle AbilityToActivate,int16_t PredictionKey);


// Function  GameplayAbilities.AbilitySystemComponent.ClientActivateAbilitySucceed
// Offset::0x1B7E3C0;
void FAbilitySystemComponent::ClientActivateAbilitySucceed(FGameplayAbilitySpecHandle AbilityToActivate,FPredictionKey PredictionKey);


// Function  GameplayAbilities.AbilitySystemComponent.ClientActivateAbilitySucceedWithEventData
// Offset::0x1B7DFC0;
void FAbilitySystemComponent::ClientActivateAbilitySucceedWithEventData(FGameplayAbilitySpecHandle AbilityToActivate,FPredictionKey PredictionKey,FGameplayEventData TriggerEventData);


// Function  GameplayAbilities.AbilitySystemComponent.ClientCancelAbility
// Offset::0x1B7E5C0;
void FAbilitySystemComponent::ClientCancelAbility(FGameplayAbilitySpecHandle AbilityToCancel,FGameplayAbilityActivationInfo ActivationInfo);


// Function  GameplayAbilities.AbilitySystemComponent.ClientEndAbility
// Offset::0x1B7E840;
void FAbilitySystemComponent::ClientEndAbility(FGameplayAbilitySpecHandle AbilityToEnd,FGameplayAbilityActivationInfo ActivationInfo);


// Function  GameplayAbilities.AbilitySystemComponent.ClientPrintDebug_Response
// Offset::0x1B80D30;
void FAbilitySystemComponent::ClientPrintDebug_Response(TArray<FString> Strings,int32_t GameFlags);


// Function  GameplayAbilities.AbilitySystemComponent.ClientSetReplicatedEvent
// Offset::0x1B7FC50;
void FAbilitySystemComponent::ClientSetReplicatedEvent(enum class EAbilityGenericReplicatedEvent EventType,FGameplayAbilitySpecHandle AbilityHandle,FPredictionKey AbilityOriginalPredictionKey);


// Function  GameplayAbilities.AbilitySystemComponent.ClientTryActivateAbility
// Offset::0x1B7EB90;
void FAbilitySystemComponent::ClientTryActivateAbility(FGameplayAbilitySpecHandle AbilityToActivate);


// Function  GameplayAbilities.AbilitySystemComponent.FindAllAbilitiesMatchingQuery
// Offset::0x1B810C0;
void FAbilitySystemComponent::FindAllAbilitiesMatchingQuery(TArray<FGameplayAbilitySpecHandle> OutAbilityHandles,FGameplayTagQuery Query);


// Function  GameplayAbilities.AbilitySystemComponent.FindAllAbilitiesWithInputID
// Offset::0x1B80FC0;
void FAbilitySystemComponent::FindAllAbilitiesWithInputID(TArray<FGameplayAbilitySpecHandle> OutAbilityHandles,int32_t InputID);


// Function  GameplayAbilities.AbilitySystemComponent.FindAllAbilitiesWithTags
// Offset::0x1B81240;
void FAbilitySystemComponent::FindAllAbilitiesWithTags(TArray<FGameplayAbilitySpecHandle> OutAbilityHandles,FGameplayTagContainer Tags,bool bExactMatch);


// Function  GameplayAbilities.AbilitySystemComponent.GetActiveEffects
// Offset::0x1B83EB0;
TArray<FActiveGameplayEffectHandle> FAbilitySystemComponent::GetActiveEffects(FGameplayEffectQuery Query);


// Function  GameplayAbilities.AbilitySystemComponent.GetActiveEffectsWithAllTags
// Offset::0x1B83D90;
TArray<FActiveGameplayEffectHandle> FAbilitySystemComponent::GetActiveEffectsWithAllTags(FGameplayTagContainer Tags);


// Function  GameplayAbilities.AbilitySystemComponent.GetAllAbilities
// Offset::0x1B813E0;
void FAbilitySystemComponent::GetAllAbilities(TArray<FGameplayAbilitySpecHandle> OutAbilityHandles);


// Function  GameplayAbilities.AbilitySystemComponent.GetAllAttributes
// Offset::0x1B85520;
void FAbilitySystemComponent::GetAllAttributes(TArray<FGameplayAttribute> OutAttributes);


// Function  GameplayAbilities.AbilitySystemComponent.GetAttributeSet
// Offset::0x1B85480;
FAttributeSet* FAbilitySystemComponent::GetAttributeSet(FAttributeSet* AttributeSetClass);


// Function  GameplayAbilities.AbilitySystemComponent.GetGameplayAttributeValue
// Offset::0x1B85320;
float FAbilitySystemComponent::GetGameplayAttributeValue(FGameplayAttribute Attribute,bool bFound);


// Function  GameplayAbilities.AbilitySystemComponent.GetGameplayEffectCount
// Offset::0x1B84A80;
int32_t FAbilitySystemComponent::GetGameplayEffectCount(FGameplayEffect* SourceGameplayEffect,FAbilitySystemComponent* OptionalInstigatorFilterComponent,bool bEnforceOnGoingCheck);


// Function  GameplayAbilities.AbilitySystemComponent.GetGameplayEffectMagnitude
// Offset::0x1B84410;
float FAbilitySystemComponent::GetGameplayEffectMagnitude(FActiveGameplayEffectHandle Handle,FGameplayAttribute Attribute);


// Function  GameplayAbilities.AbilitySystemComponent.GetGameplayTagCount
// Offset::0x1B84370;
int32_t FAbilitySystemComponent::GetGameplayTagCount(FGameplayTag GameplayTag);


// Function  GameplayAbilities.AbilitySystemComponent.GetUserAbilityActivationInhibited
// Offset::0x1B80830;
bool FAbilitySystemComponent::GetUserAbilityActivationInhibited();


// Function  GameplayAbilities.AbilitySystemComponent.InputCancel
// Offset::0x1B80610;
void FAbilitySystemComponent::InputCancel();


// Function  GameplayAbilities.AbilitySystemComponent.InputConfirm
// Offset::0x1B80630;
void FAbilitySystemComponent::InputConfirm();


// Function  GameplayAbilities.AbilitySystemComponent.IsGameplayCueActive
// Offset::0x1B81B90;
bool FAbilitySystemComponent::IsGameplayCueActive(FGameplayTag GameplayCueTag);


// Function  GameplayAbilities.AbilitySystemComponent.K2_GiveAbility
// Offset::0x1B81A50;
FGameplayAbilitySpecHandle FAbilitySystemComponent::K2_GiveAbility(FGameplayAbility* AbilityClass,int32_t Level,int32_t InputID);


// Function  GameplayAbilities.AbilitySystemComponent.K2_GiveAbilityAndActivateOnce
// Offset::0x1B81910;
FGameplayAbilitySpecHandle FAbilitySystemComponent::K2_GiveAbilityAndActivateOnce(FGameplayAbility* AbilityClass,int32_t Level,int32_t InputID);


// Function  GameplayAbilities.AbilitySystemComponent.K2_InitStats
// Offset::0x1B85610;
void FAbilitySystemComponent::K2_InitStats(FAttributeSet* Attributes,FDataTable* DataTable);


// Function  GameplayAbilities.AbilitySystemComponent.MakeEffectContext
// Offset::0x1B84BC0;
FGameplayEffectContextHandle FAbilitySystemComponent::MakeEffectContext();


// Function  GameplayAbilities.AbilitySystemComponent.MakeOutgoingSpec
// Offset::0x1B84C90;
FGameplayEffectSpecHandle FAbilitySystemComponent::MakeOutgoingSpec(FGameplayEffect* GameplayEffectClass,float Level,FGameplayEffectContextHandle Context);


// Function  GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueAdded
// Offset::0x1B82A20;
void FAbilitySystemComponent::NetMulticast_InvokeGameplayCueAdded(FGameplayTag GameplayCueTag,FPredictionKey PredictionKey,FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueAdded_WithParams
// Offset::0x1B82600;
void FAbilitySystemComponent::NetMulticast_InvokeGameplayCueAdded_WithParams(FGameplayTag GameplayCueTag,FPredictionKey PredictionKey,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec
// Offset::0x1B824D0;
void FAbilitySystemComponent::NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(FGameplayEffectSpecForRPC Spec,FPredictionKey PredictionKey);


// Function  GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams
// Offset::0x1B820B0;
void FAbilitySystemComponent::NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(FGameplayTag GameplayCueTag,FPredictionKey PredictionKey,FGameplayCueParameters GameplayCueParameters);


// Function  GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueExecuted
// Offset::0x1B836C0;
void FAbilitySystemComponent::NetMulticast_InvokeGameplayCueExecuted(FGameplayTag GameplayCueTag,FPredictionKey PredictionKey,FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueExecuted_FromSpec
// Offset::0x1B83890;
void FAbilitySystemComponent::NetMulticast_InvokeGameplayCueExecuted_FromSpec(FGameplayEffectSpecForRPC Spec,FPredictionKey PredictionKey);


// Function  GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCueExecuted_WithParams
// Offset::0x1B83060;
void FAbilitySystemComponent::NetMulticast_InvokeGameplayCueExecuted_WithParams(FGameplayTag GameplayCueTag,FPredictionKey PredictionKey,FGameplayCueParameters GameplayCueParameters);


// Function  GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams
// Offset::0x1B81C40;
void FAbilitySystemComponent::NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(FGameplayTagContainer GameplayCueTags,FPredictionKey PredictionKey,FGameplayCueParameters GameplayCueParameters);


// Function  GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCuesExecuted
// Offset::0x1B83480;
void FAbilitySystemComponent::NetMulticast_InvokeGameplayCuesExecuted(FGameplayTagContainer GameplayCueTags,FPredictionKey PredictionKey,FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemComponent.NetMulticast_InvokeGameplayCuesExecuted_WithParams
// Offset::0x1B82BF0;
void FAbilitySystemComponent::NetMulticast_InvokeGameplayCuesExecuted_WithParams(FGameplayTagContainer GameplayCueTags,FPredictionKey PredictionKey,FGameplayCueParameters GameplayCueParameters);


// Function  GameplayAbilities.AbilitySystemComponent.OnAvatarActorDestroyed
// Offset::0x1B80510;
void FAbilitySystemComponent::OnAvatarActorDestroyed(FActor* InActor);


// Function  GameplayAbilities.AbilitySystemComponent.OnOwnerActorDestroyed
// Offset::0x1B80470;
void FAbilitySystemComponent::OnOwnerActorDestroyed(FActor* InActor);


// Function  GameplayAbilities.AbilitySystemComponent.OnRep_ActivateAbilities
// Offset::0x1B7F4E0;
void FAbilitySystemComponent::OnRep_ActivateAbilities();


// Function  GameplayAbilities.AbilitySystemComponent.OnRep_ClientDebugString
// Offset::0x1B80D10;
void FAbilitySystemComponent::OnRep_ClientDebugString();


// Function  GameplayAbilities.AbilitySystemComponent.OnRep_OwningActor
// Offset::0x1B805B0;
void FAbilitySystemComponent::OnRep_OwningActor();


// Function  GameplayAbilities.AbilitySystemComponent.OnRep_ReplicatedAnimMontage
// Offset::0x1B7DFA0;
void FAbilitySystemComponent::OnRep_ReplicatedAnimMontage();


// Function  GameplayAbilities.AbilitySystemComponent.OnRep_ServerDebugString
// Offset::0x1B80CF0;
void FAbilitySystemComponent::OnRep_ServerDebugString();


// Function  GameplayAbilities.AbilitySystemComponent.OnSpawnedAttributesEndPlayed
// Offset::0x1B80390;
void FAbilitySystemComponent::OnSpawnedAttributesEndPlayed(FActor* InActor,enum class EEndPlayReason EndPlayReason);


// Function  GameplayAbilities.AbilitySystemComponent.PressInputID
// Offset::0x1B806F0;
void FAbilitySystemComponent::PressInputID(int32_t InputID);


// Function  GameplayAbilities.AbilitySystemComponent.ReleaseInputID
// Offset::0x1B80650;
void FAbilitySystemComponent::ReleaseInputID(int32_t InputID);


// Function  GameplayAbilities.AbilitySystemComponent.RemoveActiveEffectsWithAppliedTags
// Offset::0x1B83AF0;
int32_t FAbilitySystemComponent::RemoveActiveEffectsWithAppliedTags(FGameplayTagContainer Tags);


// Function  GameplayAbilities.AbilitySystemComponent.RemoveActiveEffectsWithGrantedTags
// Offset::0x1B83AF0;
int32_t FAbilitySystemComponent::RemoveActiveEffectsWithGrantedTags(FGameplayTagContainer Tags);


// Function  GameplayAbilities.AbilitySystemComponent.RemoveActiveEffectsWithSourceTags
// Offset::0x1B83BD0;
int32_t FAbilitySystemComponent::RemoveActiveEffectsWithSourceTags(FGameplayTagContainer Tags);


// Function  GameplayAbilities.AbilitySystemComponent.RemoveActiveEffectsWithTags
// Offset::0x1B83CB0;
int32_t FAbilitySystemComponent::RemoveActiveEffectsWithTags(FGameplayTagContainer Tags);


// Function  GameplayAbilities.AbilitySystemComponent.RemoveActiveGameplayEffect
// Offset::0x1B85000;
bool FAbilitySystemComponent::RemoveActiveGameplayEffect(FActiveGameplayEffectHandle Handle,int32_t StacksToRemove);


// Function  GameplayAbilities.AbilitySystemComponent.RemoveActiveGameplayEffectBySourceEffect
// Offset::0x1B84ED0;
void FAbilitySystemComponent::RemoveActiveGameplayEffectBySourceEffect(FGameplayEffect* GameplayEffect,FAbilitySystemComponent* InstigatorAbilitySystemComponent,int32_t StacksToRemove);


// Function  GameplayAbilities.AbilitySystemComponent.ServerAbilityRPCBatch
// Offset::0x1B80860;
void FAbilitySystemComponent::ServerAbilityRPCBatch(FServerAbilityRPCBatch BatchInfo);


// Function  GameplayAbilities.AbilitySystemComponent.ServerCancelAbility
// Offset::0x1B7E6D0;
void FAbilitySystemComponent::ServerCancelAbility(FGameplayAbilitySpecHandle AbilityToCancel,FGameplayAbilityActivationInfo ActivationInfo);


// Function  GameplayAbilities.AbilitySystemComponent.ServerCurrentMontageJumpToSectionName
// Offset::0x1B7DCD0;
void FAbilitySystemComponent::ServerCurrentMontageJumpToSectionName(FAnimMontage* ClientAnimMontage,FName SectionName);


// Function  GameplayAbilities.AbilitySystemComponent.ServerCurrentMontageSetNextSectionName
// Offset::0x1B7DDE0;
void FAbilitySystemComponent::ServerCurrentMontageSetNextSectionName(FAnimMontage* ClientAnimMontage,float ClientPosition,FName SectionName,FName NextSectionName);


// Function  GameplayAbilities.AbilitySystemComponent.ServerCurrentMontageSetPlayRate
// Offset::0x1B7DBC0;
void FAbilitySystemComponent::ServerCurrentMontageSetPlayRate(FAnimMontage* ClientAnimMontage,float InPlayRate);


// Function  GameplayAbilities.AbilitySystemComponent.ServerEndAbility
// Offset::0x1B7E950;
void FAbilitySystemComponent::ServerEndAbility(FGameplayAbilitySpecHandle AbilityToEnd,FGameplayAbilityActivationInfo ActivationInfo,FPredictionKey PredictionKey);


// Function  GameplayAbilities.AbilitySystemComponent.ServerPrintDebug_Request
// Offset::0x1B80F70;
void FAbilitySystemComponent::ServerPrintDebug_Request();


// Function  GameplayAbilities.AbilitySystemComponent.ServerPrintDebug_RequestWithStrings
// Offset::0x1B80E60;
void FAbilitySystemComponent::ServerPrintDebug_RequestWithStrings(TArray<FString> Strings);


// Function  GameplayAbilities.AbilitySystemComponent.ServerSetInputPressed
// Offset::0x1B7F5C0;
void FAbilitySystemComponent::ServerSetInputPressed(FGameplayAbilitySpecHandle AbilityHandle);


// Function  GameplayAbilities.AbilitySystemComponent.ServerSetInputReleased
// Offset::0x1B7F500;
void FAbilitySystemComponent::ServerSetInputReleased(FGameplayAbilitySpecHandle AbilityHandle);


// Function  GameplayAbilities.AbilitySystemComponent.ServerSetReplicatedEvent
// Offset::0x1B800F0;
void FAbilitySystemComponent::ServerSetReplicatedEvent(enum class EAbilityGenericReplicatedEvent EventType,FGameplayAbilitySpecHandle AbilityHandle,FPredictionKey AbilityOriginalPredictionKey,FPredictionKey CurrentPredictionKey);


// Function  GameplayAbilities.AbilitySystemComponent.ServerSetReplicatedEventWithPayload
// Offset::0x1B7FDB0;
void FAbilitySystemComponent::ServerSetReplicatedEventWithPayload(enum class EAbilityGenericReplicatedEvent EventType,FGameplayAbilitySpecHandle AbilityHandle,FPredictionKey AbilityOriginalPredictionKey,FPredictionKey CurrentPredictionKey,FVector_NetQuantize100 VectorPayload);


// Function  GameplayAbilities.AbilitySystemComponent.ServerSetReplicatedTargetData
// Offset::0x1B7F8B0;
void FAbilitySystemComponent::ServerSetReplicatedTargetData(FGameplayAbilitySpecHandle AbilityHandle,FPredictionKey AbilityOriginalPredictionKey,FGameplayAbilityTargetDataHandle ReplicatedTargetDataHandle,FGameplayTag ApplicationTag,FPredictionKey CurrentPredictionKey);


// Function  GameplayAbilities.AbilitySystemComponent.ServerSetReplicatedTargetDataCancelled
// Offset::0x1B7F680;
void FAbilitySystemComponent::ServerSetReplicatedTargetDataCancelled(FGameplayAbilitySpecHandle AbilityHandle,FPredictionKey AbilityOriginalPredictionKey,FPredictionKey CurrentPredictionKey);


// Function  GameplayAbilities.AbilitySystemComponent.ServerTryActivateAbility
// Offset::0x1B7F320;
void FAbilitySystemComponent::ServerTryActivateAbility(FGameplayAbilitySpecHandle AbilityToActivate,bool InputPressed,FPredictionKey PredictionKey);


// Function  GameplayAbilities.AbilitySystemComponent.ServerTryActivateAbilityWithEventData
// Offset::0x1B7EC30;
void FAbilitySystemComponent::ServerTryActivateAbilityWithEventData(FGameplayAbilitySpecHandle AbilityToActivate,bool InputPressed,FPredictionKey PredictionKey,FGameplayEventData TriggerEventData);


// Function  GameplayAbilities.AbilitySystemComponent.SetActiveGameplayEffectLevel
// Offset::0x1B846A0;
void FAbilitySystemComponent::SetActiveGameplayEffectLevel(FActiveGameplayEffectHandle ActiveHandle,int32_t NewLevel);


// Function  GameplayAbilities.AbilitySystemComponent.SetActiveGameplayEffectLevelUsingQuery
// Offset::0x1B84570;
void FAbilitySystemComponent::SetActiveGameplayEffectLevelUsingQuery(FGameplayEffectQuery Query,int32_t NewLevel);


// Function  GameplayAbilities.AbilitySystemComponent.SetUserAbilityActivationInhibited
// Offset::0x1B80790;
void FAbilitySystemComponent::SetUserAbilityActivationInhibited(bool NewInhibit);


// Function  GameplayAbilities.AbilitySystemComponent.TargetCancel
// Offset::0x1B805D0;
void FAbilitySystemComponent::TargetCancel();


// Function  GameplayAbilities.AbilitySystemComponent.TargetConfirm
// Offset::0x1B805F0;
void FAbilitySystemComponent::TargetConfirm();


// Function  GameplayAbilities.AbilitySystemComponent.TryActivateAbilitiesByTag
// Offset::0x1B81670;
bool FAbilitySystemComponent::TryActivateAbilitiesByTag(FGameplayTagContainer GameplayTagContainer,bool bAllowRemoteActivation);


// Function  GameplayAbilities.AbilitySystemComponent.TryActivateAbility
// Offset::0x1B81490;
bool FAbilitySystemComponent::TryActivateAbility(FGameplayAbilitySpecHandle AbilityToActivate,bool bAllowRemoteActivation);


// Function  GameplayAbilities.AbilitySystemComponent.TryActivateAbilityByClass
// Offset::0x1B81580;
bool FAbilitySystemComponent::TryActivateAbilityByClass(FGameplayAbility* InAbilityToActivate,bool bAllowRemoteActivation);


// Function  GameplayAbilities.AbilitySystemComponent.UpdateActiveGameplayEffectSetByCallerMagnitude
// Offset::0x1B84940;
void FAbilitySystemComponent::UpdateActiveGameplayEffectSetByCallerMagnitude(FActiveGameplayEffectHandle ActiveHandle,FGameplayTag SetByCallerTag,float NewValue);


// Function  GameplayAbilities.AbilitySystemComponent.UpdateActiveGameplayEffectSetByCallerMagnitudes
// Offset::0x1B84790;
void FAbilitySystemComponent::UpdateActiveGameplayEffectSetByCallerMagnitudes(FActiveGameplayEffectHandle ActiveHandle,TMap<FGameplayTag,float> NewSetByCallerValues);


// Function  UMG.Widget.ForceLayoutPrepass
// Offset::0x573C600;
void FWidget::ForceLayoutPrepass();


// Function  UMG.Widget.ForceVolatile
// Offset::0x573C9F0;
void FWidget::ForceVolatile(bool bForce);


// Function  UMG.Widget.GetAccessibleSummaryText
// Offset::0x573BDB0;
FText FWidget::GetAccessibleSummaryText();


// Function  UMG.Widget.GetAccessibleText
// Offset::0x573BE40;
FText FWidget::GetAccessibleText();


// Function  UMG.Widget.GetCachedGeometry
// Offset::0x573BF60;
FGeometry FWidget::GetCachedGeometry();


// Function  UMG.Widget.GetClipping
// Offset::0x573CB20;
enum class EWidgetClipping FWidget::GetClipping();


// Function  UMG.Widget.GetDesiredSize
// Offset::0x573C590;
FVector2D FWidget::GetDesiredSize();


// Function  UMG.Widget.GetGameInstance
// Offset::0x573BED0;
FGameInstance* FWidget::GetGameInstance();


// Function  UMG.Widget.GetIsEnabled
// Offset::0x573CFF0;
bool FWidget::GetIsEnabled();


// Function  UMG.Widget.GetOwningLocalPlayer
// Offset::0x26D22B0;
FLocalPlayer* FWidget::GetOwningLocalPlayer();


// Function  UMG.Widget.GetOwningPlayer
// Offset::0x17A1E20;
FPlayerController* FWidget::GetOwningPlayer();


// Function  UMG.Widget.GetPaintSpaceGeometry
// Offset::0x573BF00;
FGeometry FWidget::GetPaintSpaceGeometry();


// Function  UMG.Widget.GetParent
// Offset::0x573BF90;
FPanelWidget* FWidget::GetParent();


// Function  UMG.Widget.GetRenderOpacity
// Offset::0x573CBF0;
float FWidget::GetRenderOpacity();


// Function  UMG.Widget.GetRenderTransformAngle
// Offset::0x573D160;
float FWidget::GetRenderTransformAngle();


// Function  UMG.Widget.GetTickSpaceGeometry
// Offset::0x573BF30;
FGeometry FWidget::GetTickSpaceGeometry();


// Function  UMG.Widget.GetVisibility
// Offset::0x573CCC0;
enum class ESlateVisibility FWidget::GetVisibility();


// Function  UMG.Widget.HasAnyUserFocus
// Offset::0x573C7B0;
bool FWidget::HasAnyUserFocus();


// Function  UMG.Widget.HasFocusedDescendants
// Offset::0x573C780;
bool FWidget::HasFocusedDescendants();


// Function  UMG.Widget.HasKeyboardFocus
// Offset::0x573C9C0;
bool FWidget::HasKeyboardFocus();


// Function  UMG.Widget.HasMouseCapture
// Offset::0x573C990;
bool FWidget::HasMouseCapture();


// Function  UMG.Widget.HasMouseCaptureByUser
// Offset::0x573C8A0;
bool FWidget::HasMouseCaptureByUser(int32_t UserIndex,int32_t PointerIndex);


// Function  UMG.Widget.HasUserFocus
// Offset::0x573C7E0;
bool FWidget::HasUserFocus(FPlayerController* PlayerController);


// Function  UMG.Widget.HasUserFocusedDescendants
// Offset::0x573C6E0;
bool FWidget::HasUserFocusedDescendants(FPlayerController* PlayerController);


// Function  UMG.Widget.InvalidateLayoutAndVolatility
// Offset::0x573C5E0;
void FWidget::InvalidateLayoutAndVolatility();


// Function  UMG.Widget.IsHovered
// Offset::0x17AF4E0;
bool FWidget::IsHovered();


// Function  UMG.Widget.IsVisible
// Offset::0x573CCF0;
bool FWidget::IsVisible();


// Function  UMG.Widget.RemoveFromParent
// Offset::0x17A1E00;
void FWidget::RemoveFromParent();


// Function  UMG.Widget.ResetCursor
// Offset::0x573CD20;
void FWidget::ResetCursor();


// Function  UMG.Widget.SetAllNavigationRules
// Offset::0x573C4B0;
void FWidget::SetAllNavigationRules(enum class EUINavigationRule Rule,FName WidgetToFocus);


// Function  UMG.Widget.SetClipping
// Offset::0x573CA90;
void FWidget::SetClipping(enum class EWidgetClipping InClipping);


// Function  UMG.Widget.SetCursor
// Offset::0x573CD40;
void FWidget::SetCursor(enum class EMouseCursor InCursor);


// Function  UMG.Widget.SetFocus
// Offset::0x573C6C0;
void FWidget::SetFocus();


// Function  UMG.Widget.SetIsEnabled
// Offset::0x573CF50;
void FWidget::SetIsEnabled(bool bInIsEnabled);


// Function  UMG.Widget.SetKeyboardFocus
// Offset::0x573C880;
void FWidget::SetKeyboardFocus();


// Function  UMG.Widget.SetNavigationRule
// Offset::0x573C380;
void FWidget::SetNavigationRule(enum class EUINavigation Direction,enum class EUINavigationRule Rule,FName WidgetToFocus);


// Function  UMG.Widget.SetNavigationRuleBase
// Offset::0x573C2A0;
void FWidget::SetNavigationRuleBase(enum class EUINavigation Direction,enum class EUINavigationRule Rule);


// Function  UMG.Widget.SetNavigationRuleCustom
// Offset::0x573C0C0;
void FWidget::SetNavigationRuleCustom(enum class EUINavigation Direction,FDelegate InCustomDelegate);


// Function  UMG.Widget.SetNavigationRuleCustomBoundary
// Offset::0x573BFC0;
void FWidget::SetNavigationRuleCustomBoundary(enum class EUINavigation Direction,FDelegate InCustomDelegate);


// Function  UMG.Widget.SetNavigationRuleExplicit
// Offset::0x573C1C0;
void FWidget::SetNavigationRuleExplicit(enum class EUINavigation Direction,FWidget* InWidget);


// Function  UMG.Widget.SetRenderOpacity
// Offset::0x573CB50;
void FWidget::SetRenderOpacity(float InOpacity);


// Function  UMG.Widget.SetRenderScale
// Offset::0x573D2D0;
void FWidget::SetRenderScale(FVector2D Scale);


// Function  UMG.Widget.SetRenderShear
// Offset::0x573D230;
void FWidget::SetRenderShear(FVector2D Shear);


// Function  UMG.Widget.SetRenderTransform
// Offset::0x573D370;
void FWidget::SetRenderTransform(FWidgetTransform InTransform);


// Function  UMG.Widget.SetRenderTransformAngle
// Offset::0x573D190;
void FWidget::SetRenderTransformAngle(float Angle);


// Function  UMG.Widget.SetRenderTransformPivot
// Offset::0x573D020;
void FWidget::SetRenderTransformPivot(FVector2D Pivot);


// Function  UMG.Widget.SetRenderTranslation
// Offset::0x573D0C0;
void FWidget::SetRenderTranslation(FVector2D Translation);


// Function  UMG.Widget.SetToolTip
// Offset::0x573CDD0;
void FWidget::SetToolTip(FWidget* Widget);


// Function  UMG.Widget.SetToolTipText
// Offset::0x573CE70;
void FWidget::SetToolTipText(FText InToolTipText);


// Function  UMG.Widget.SetUserFocus
// Offset::0x573C620;
void FWidget::SetUserFocus(FPlayerController* PlayerController);


// Function  UMG.Widget.SetVisibility
// Offset::0x573CC20;
void FWidget::SetVisibility(enum class ESlateVisibility InVisibility);


// Function  UMG.ComboBoxKey.AddOption
// Offset::0x57051C0;
void FComboBoxKey::AddOption(FName Option);


// Function  UMG.ComboBoxKey.ClearOptions
// Offset::0x5705100;
void FComboBoxKey::ClearOptions();


// Function  UMG.ComboBoxKey.ClearSelection
// Offset::0x57050E0;
void FComboBoxKey::ClearSelection();


// Function  UMG.ComboBoxKey.GetSelectedOption
// Offset::0x5025AA0;
FName FComboBoxKey::GetSelectedOption();


// Function  UMG.ComboBoxKey.IsOpen
// Offset::0x5705010;
bool FComboBoxKey::IsOpen();


// Function  UMG.ComboBoxKey.RemoveOption
// Offset::0x5705120;
bool FComboBoxKey::RemoveOption(FName Option);


// Function  UMG.ComboBoxKey.SetSelectedOption
// Offset::0x5705040;
void FComboBoxKey::SetSelectedOption(FName Option);


// Function  UMG.ComboBoxString.AddOption
// Offset::0x5705DD0;
void FComboBoxString::AddOption(FString Option);


// Function  UMG.ComboBoxString.ClearOptions
// Offset::0x5705B70;
void FComboBoxString::ClearOptions();


// Function  UMG.ComboBoxString.ClearSelection
// Offset::0x5705B50;
void FComboBoxString::ClearSelection();


// Function  UMG.ComboBoxString.FindOptionIndex
// Offset::0x5705C70;
int32_t FComboBoxString::FindOptionIndex(FString Option);


// Function  UMG.ComboBoxString.GetOptionAtIndex
// Offset::0x5705B90;
FString FComboBoxString::GetOptionAtIndex(int32_t Index);


// Function  UMG.ComboBoxString.GetOptionCount
// Offset::0x57058C0;
int32_t FComboBoxString::GetOptionCount();


// Function  UMG.ComboBoxString.GetSelectedIndex
// Offset::0x57058F0;
int32_t FComboBoxString::GetSelectedIndex();


// Function  UMG.ComboBoxString.GetSelectedOption
// Offset::0x5705920;
FString FComboBoxString::GetSelectedOption();


// Function  UMG.ComboBoxString.IsOpen
// Offset::0x5705890;
bool FComboBoxString::IsOpen();


// Function  UMG.ComboBoxString.RefreshOptions
// Offset::0x5705B30;
void FComboBoxString::RefreshOptions();


// Function  UMG.ComboBoxString.RemoveOption
// Offset::0x5705D20;
bool FComboBoxString::RemoveOption(FString Option);


// Function  UMG.ComboBoxString.SetSelectedIndex
// Offset::0x57059A0;
void FComboBoxString::SetSelectedIndex(int32_t Index);


// Function  UMG.ComboBoxString.SetSelectedOption
// Offset::0x5705A40;
void FComboBoxString::SetSelectedOption(FString Option);


// Function  UMG.EditableText.GetText
// Offset::0x5709200;
FText FEditableText::GetText();


// Function  UMG.EditableText.SetHintText
// Offset::0x5708F80;
void FEditableText::SetHintText(FText InHintText);


// Function  UMG.EditableText.SetIsPassword
// Offset::0x5709070;
void FEditableText::SetIsPassword(bool InbIsPassword);


// Function  UMG.EditableText.SetIsReadOnly
// Offset::0x5708EE0;
void FEditableText::SetIsReadOnly(bool InbIsReadyOnly);


// Function  UMG.EditableText.SetJustification
// Offset::0x5708E50;
void FEditableText::SetJustification(enum class ETextJustify InJustification);


// Function  UMG.EditableText.SetText
// Offset::0x5709110;
void FEditableText::SetText(FText InText);


// Function  UMG.EditableText.SetTextOverflowPolicy
// Offset::0x5708DC0;
void FEditableText::SetTextOverflowPolicy(enum class ETextOverflowPolicy InOverflowPolicy);


// Function  UMG.EditableTextBox.ClearError
// Offset::0x5709B00;
void FEditableTextBox::ClearError();


// Function  UMG.EditableTextBox.GetText
// Offset::0x5709F30;
FText FEditableTextBox::GetText();


// Function  UMG.EditableTextBox.HasError
// Offset::0x5709AD0;
bool FEditableTextBox::HasError();


// Function  UMG.EditableTextBox.SetError
// Offset::0x5709C60;
void FEditableTextBox::SetError(FText InError);


// Function  UMG.EditableTextBox.SetForegroundColor
// Offset::0x5709910;
void FEditableTextBox::SetForegroundColor(FLinearColor Color);


// Function  UMG.EditableTextBox.SetHintText
// Offset::0x5709D50;
void FEditableTextBox::SetHintText(FText InText);


// Function  UMG.EditableTextBox.SetIsPassword
// Offset::0x5709B20;
void FEditableTextBox::SetIsPassword(bool bIsPassword);


// Function  UMG.EditableTextBox.SetIsReadOnly
// Offset::0x5709BC0;
void FEditableTextBox::SetIsReadOnly(bool bReadOnly);


// Function  UMG.EditableTextBox.SetJustification
// Offset::0x5709A40;
void FEditableTextBox::SetJustification(enum class ETextJustify InJustification);


// Function  UMG.EditableTextBox.SetText
// Offset::0x5709E40;
void FEditableTextBox::SetText(FText InText);


// Function  UMG.EditableTextBox.SetTextOverflowPolicy
// Offset::0x57099B0;
void FEditableTextBox::SetTextOverflowPolicy(enum class ETextOverflowPolicy InOverflowPolicy);


// Function  UMG.InputKeySelector.GetIsSelectingKey
// Offset::0x570EA90;
bool FInputKeySelector::GetIsSelectingKey();


// Function  UMG.InputKeySelector.SetAllowGamepadKeys
// Offset::0x570EAC0;
void FInputKeySelector::SetAllowGamepadKeys(bool bInAllowGamepadKeys);


// Function  UMG.InputKeySelector.SetAllowModifierKeys
// Offset::0x570EB60;
void FInputKeySelector::SetAllowModifierKeys(bool bInAllowModifierKeys);


// Function  UMG.InputKeySelector.SetEscapeKeys
// Offset::0x570E900;
void FInputKeySelector::SetEscapeKeys(TArray<FKey> InKeys);


// Function  UMG.InputKeySelector.SetKeySelectionText
// Offset::0x570ECF0;
void FInputKeySelector::SetKeySelectionText(FText InKeySelectionText);


// Function  UMG.InputKeySelector.SetNoKeySpecifiedText
// Offset::0x570EC00;
void FInputKeySelector::SetNoKeySpecifiedText(FText InNoKeySpecifiedText);


// Function  UMG.InputKeySelector.SetSelectedKey
// Offset::0x570EDE0;
void FInputKeySelector::SetSelectedKey(FInputChord InSelectedKey);


// Function  UMG.InputKeySelector.SetTextBlockVisibility
// Offset::0x570EA00;
void FInputKeySelector::SetTextBlockVisibility(enum class ESlateVisibility InVisibility);


// Function  UMG.PanelWidget.AddChild
// Offset::0x57177F0;
FPanelSlot* FPanelWidget::AddChild(FWidget* Content);


// Function  UMG.PanelWidget.ClearChildren
// Offset::0x5717730;
void FPanelWidget::ClearChildren();


// Function  UMG.PanelWidget.GetAllChildren
// Offset::0x5717A70;
TArray<FWidget*> FPanelWidget::GetAllChildren();


// Function  UMG.PanelWidget.GetChildAt
// Offset::0x5717AF0;
FWidget* FPanelWidget::GetChildAt(int32_t Index);


// Function  UMG.PanelWidget.GetChildIndex
// Offset::0x57179D0;
int32_t FPanelWidget::GetChildIndex(FWidget* Content);


// Function  UMG.PanelWidget.GetChildrenCount
// Offset::0x5717B90;
int32_t FPanelWidget::GetChildrenCount();


// Function  UMG.PanelWidget.HasAnyChildren
// Offset::0x208B8A0;
bool FPanelWidget::HasAnyChildren();


// Function  UMG.PanelWidget.HasChild
// Offset::0x5717930;
bool FPanelWidget::HasChild(FWidget* Content);


// Function  UMG.PanelWidget.RemoveChild
// Offset::0x5717750;
bool FPanelWidget::RemoveChild(FWidget* Content);


// Function  UMG.PanelWidget.RemoveChildAt
// Offset::0x5717890;
bool FPanelWidget::RemoveChildAt(int32_t Index);


// Function  UMG.ContentWidget.GetContent
// Offset::0x5706740;
FWidget* FContentWidget::GetContent();


// Function  UMG.ContentWidget.GetContentSlot
// Offset::0x5706810;
FPanelSlot* FContentWidget::GetContentSlot();


// Function  UMG.ContentWidget.SetContent
// Offset::0x5706770;
FPanelSlot* FContentWidget::SetContent(FWidget* Content);


// Function  UMG.MenuAnchor.Close
// Offset::0x5714090;
void FMenuAnchor::Close();


// Function  UMG.MenuAnchor.FitInWindow
// Offset::0x57141F0;
void FMenuAnchor::FitInWindow(bool bFit);


// Function  UMG.MenuAnchor.GetMenuPosition
// Offset::0x5713FE0;
FVector2D FMenuAnchor::GetMenuPosition();


// Function  UMG.MenuAnchor.HasOpenSubMenus
// Offset::0x5713FB0;
bool FMenuAnchor::HasOpenSubMenus();


// Function  UMG.MenuAnchor.IsOpen
// Offset::0x5714060;
bool FMenuAnchor::IsOpen();


// Function  UMG.MenuAnchor.Open
// Offset::0x57140B0;
void FMenuAnchor::Open(bool bFocusMenu);


// Function  UMG.MenuAnchor.SetPlacement
// Offset::0x5714290;
void FMenuAnchor::SetPlacement(enum class EMenuPlacement InPlacement);


// Function  UMG.MenuAnchor.ShouldOpenDueToClick
// Offset::0x5714030;
bool FMenuAnchor::ShouldOpenDueToClick();


// Function  UMG.MenuAnchor.ToggleOpen
// Offset::0x5714150;
void FMenuAnchor::ToggleOpen(bool bFocusOnOpen);


// Function  UMG.TextLayoutWidget.SetJustification
// Offset::0x5727040;
void FTextLayoutWidget::SetJustification(enum class ETextJustify InJustification);


// Function  UMG.MultiLineEditableText.GetHintText
// Offset::0x57156D0;
FText FMultiLineEditableText::GetHintText();


// Function  UMG.MultiLineEditableText.GetText
// Offset::0x5715850;
FText FMultiLineEditableText::GetText();


// Function  UMG.MultiLineEditableText.SetHintText
// Offset::0x57155E0;
void FMultiLineEditableText::SetHintText(FText InHintText);


// Function  UMG.MultiLineEditableText.SetIsReadOnly
// Offset::0x5715540;
void FMultiLineEditableText::SetIsReadOnly(bool bReadOnly);


// Function  UMG.MultiLineEditableText.SetText
// Offset::0x5715760;
void FMultiLineEditableText::SetText(FText InText);


// Function  UMG.MultiLineEditableText.SetWidgetStyle
// Offset::0x5715480;
void FMultiLineEditableText::SetWidgetStyle(FTextBlockStyle InWidgetStyle);


// Function  UMG.MultiLineEditableTextBox.GetHintText
// Offset::0x5716290;
FText FMultiLineEditableTextBox::GetHintText();


// Function  UMG.MultiLineEditableTextBox.GetText
// Offset::0x5716410;
FText FMultiLineEditableTextBox::GetText();


// Function  UMG.MultiLineEditableTextBox.SetError
// Offset::0x57160B0;
void FMultiLineEditableTextBox::SetError(FText InError);


// Function  UMG.MultiLineEditableTextBox.SetForegroundColor
// Offset::0x5715EB0;
void FMultiLineEditableTextBox::SetForegroundColor(FLinearColor Color);


// Function  UMG.MultiLineEditableTextBox.SetHintText
// Offset::0x57161A0;
void FMultiLineEditableTextBox::SetHintText(FText InHintText);


// Function  UMG.MultiLineEditableTextBox.SetIsReadOnly
// Offset::0x5716010;
void FMultiLineEditableTextBox::SetIsReadOnly(bool bReadOnly);


// Function  UMG.MultiLineEditableTextBox.SetText
// Offset::0x5716320;
void FMultiLineEditableTextBox::SetText(FText InText);


// Function  UMG.MultiLineEditableTextBox.SetTextStyle
// Offset::0x5715F50;
void FMultiLineEditableTextBox::SetTextStyle(FTextBlockStyle InTextStyle);


// Function  UMG.SpinBox.ClearMaxSliderValue
// Offset::0x5723710;
void FSpinBox::ClearMaxSliderValue();


// Function  UMG.SpinBox.ClearMaxValue
// Offset::0x57238F0;
void FSpinBox::ClearMaxValue();


// Function  UMG.SpinBox.ClearMinSliderValue
// Offset::0x5723800;
void FSpinBox::ClearMinSliderValue();


// Function  UMG.SpinBox.ClearMinValue
// Offset::0x57239E0;
void FSpinBox::ClearMinValue();


// Function  UMG.SpinBox.GetAlwaysUsesDeltaSnap
// Offset::0x5723C40;
bool FSpinBox::GetAlwaysUsesDeltaSnap();


// Function  UMG.SpinBox.GetDelta
// Offset::0x5723B70;
float FSpinBox::GetDelta();


// Function  UMG.SpinBox.GetMaxFractionalDigits
// Offset::0x5723D10;
int32_t FSpinBox::GetMaxFractionalDigits();


// Function  UMG.SpinBox.GetMaxSliderValue
// Offset::0x57237D0;
float FSpinBox::GetMaxSliderValue();


// Function  UMG.SpinBox.GetMaxValue
// Offset::0x57239B0;
float FSpinBox::GetMaxValue();


// Function  UMG.SpinBox.GetMinFractionalDigits
// Offset::0x5723DE0;
int32_t FSpinBox::GetMinFractionalDigits();


// Function  UMG.SpinBox.GetMinSliderValue
// Offset::0x57238C0;
float FSpinBox::GetMinSliderValue();


// Function  UMG.SpinBox.GetMinValue
// Offset::0x5723AA0;
float FSpinBox::GetMinValue();


// Function  UMG.SpinBox.GetValue
// Offset::0x5723EB0;
float FSpinBox::GetValue();


// Function  UMG.SpinBox.SetAlwaysUsesDeltaSnap
// Offset::0x5723BA0;
void FSpinBox::SetAlwaysUsesDeltaSnap(bool bNewValue);


// Function  UMG.SpinBox.SetDelta
// Offset::0x5723AD0;
void FSpinBox::SetDelta(float NewValue);


// Function  UMG.SpinBox.SetForegroundColor
// Offset::0x5723660;
void FSpinBox::SetForegroundColor(FSlateColor InForegroundColor);


// Function  UMG.SpinBox.SetMaxFractionalDigits
// Offset::0x5723C70;
void FSpinBox::SetMaxFractionalDigits(int32_t NewValue);


// Function  UMG.SpinBox.SetMaxSliderValue
// Offset::0x5723730;
void FSpinBox::SetMaxSliderValue(float NewValue);


// Function  UMG.SpinBox.SetMaxValue
// Offset::0x5723910;
void FSpinBox::SetMaxValue(float NewValue);


// Function  UMG.SpinBox.SetMinFractionalDigits
// Offset::0x5723D40;
void FSpinBox::SetMinFractionalDigits(int32_t NewValue);


// Function  UMG.SpinBox.SetMinSliderValue
// Offset::0x5723820;
void FSpinBox::SetMinSliderValue(float NewValue);


// Function  UMG.SpinBox.SetMinValue
// Offset::0x5723A00;
void FSpinBox::SetMinValue(float NewValue);


// Function  UMG.SpinBox.SetValue
// Offset::0x5723E10;
void FSpinBox::SetValue(float NewValue);


// Function  UMG.WidgetBlueprintLibrary.CancelDragDrop
// Offset::0x57432C0;
void FWidgetBlueprintLibrary::CancelDragDrop();


// Function  UMG.WidgetBlueprintLibrary.CaptureJoystick
// Offset::0x5743C90;
FEventReply FWidgetBlueprintLibrary::CaptureJoystick(FEventReply Reply,FWidget* CapturingWidget,bool bInAllJoysticks);


// Function  UMG.WidgetBlueprintLibrary.CaptureMouse
// Offset::0x57444B0;
FEventReply FWidgetBlueprintLibrary::CaptureMouse(FEventReply Reply,FWidget* CapturingWidget);


// Function  UMG.WidgetBlueprintLibrary.ClearUserFocus
// Offset::0x5743AF0;
FEventReply FWidgetBlueprintLibrary::ClearUserFocus(FEventReply Reply,bool bInAllUsers);


// Function  UMG.WidgetBlueprintLibrary.Create
// Offset::0x1A90BF0;
FUserWidget* FWidgetBlueprintLibrary::Create(FObject* WorldContextObject,FUserWidget* WidgetType,FPlayerController* OwningPlayer);


// Function  UMG.WidgetBlueprintLibrary.CreateDragDropOperation
// Offset::0x5745590;
FDragDropOperation* FWidgetBlueprintLibrary::CreateDragDropOperation(FDragDropOperation* OperationClass);


// Function  UMG.WidgetBlueprintLibrary.DetectDrag
// Offset::0x5743710;
FEventReply FWidgetBlueprintLibrary::DetectDrag(FEventReply Reply,FWidget* WidgetDetectingDrag,FKey DragKey);


// Function  UMG.WidgetBlueprintLibrary.DetectDragIfPressed
// Offset::0x5743490;
FEventReply FWidgetBlueprintLibrary::DetectDragIfPressed(FPointerEvent PointerEvent,FWidget* WidgetDetectingDrag,FKey DragKey);


// Function  UMG.WidgetBlueprintLibrary.DismissAllMenus
// Offset::0x5742750;
void FWidgetBlueprintLibrary::DismissAllMenus();


// Function  UMG.WidgetBlueprintLibrary.DrawBox
// Offset::0x5745040;
void FWidgetBlueprintLibrary::DrawBox(FPaintContext Context,FVector2D Position,FVector2D Size,FSlateBrushAsset* Brush,FLinearColor Tint);


// Function  UMG.WidgetBlueprintLibrary.DrawLine
// Offset::0x5744DE0;
void FWidgetBlueprintLibrary::DrawLine(FPaintContext Context,FVector2D PositionA,FVector2D PositionB,FLinearColor Tint,bool bAntiAlias,float Thickness);


// Function  UMG.WidgetBlueprintLibrary.DrawLines
// Offset::0x5744BD0;
void FWidgetBlueprintLibrary::DrawLines(FPaintContext Context,TArray<FVector2D> Points,FLinearColor Tint,bool bAntiAlias,float Thickness);


// Function  UMG.WidgetBlueprintLibrary.DrawText
// Offset::0x5744A30;
void FWidgetBlueprintLibrary::DrawText(FPaintContext Context,FString InString,FVector2D Position,FLinearColor Tint);


// Function  UMG.WidgetBlueprintLibrary.DrawTextFormatted
// Offset::0x5744730;
void FWidgetBlueprintLibrary::DrawTextFormatted(FPaintContext Context,FText Text,FVector2D Position,FFont* Font,int32_t FontSize,FName FontTypeFace,FLinearColor Tint);


// Function  UMG.WidgetBlueprintLibrary.EndDragDrop
// Offset::0x5743340;
FEventReply FWidgetBlueprintLibrary::EndDragDrop(FEventReply Reply);


// Function  UMG.WidgetBlueprintLibrary.GetAllWidgetsOfClass
// Offset::0x57425B0;
void FWidgetBlueprintLibrary::GetAllWidgetsOfClass(FObject* WorldContextObject,TArray<FUserWidget*> FoundWidgets,FUserWidget* WidgetClass,bool TopLevelOnly);


// Function  UMG.WidgetBlueprintLibrary.GetAllWidgetsWithInterface
// Offset::0x5742410;
void FWidgetBlueprintLibrary::GetAllWidgetsWithInterface(FObject* WorldContextObject,TArray<FUserWidget*> FoundWidgets,FInterface* Interface,bool TopLevelOnly);


// Function  UMG.WidgetBlueprintLibrary.GetBrushResource
// Offset::0x5742C90;
FObject* FWidgetBlueprintLibrary::GetBrushResource(FSlateBrush Brush);


// Function  UMG.WidgetBlueprintLibrary.GetBrushResourceAsMaterial
// Offset::0x5742AB0;
FMaterialInterface* FWidgetBlueprintLibrary::GetBrushResourceAsMaterial(FSlateBrush Brush);


// Function  UMG.WidgetBlueprintLibrary.GetBrushResourceAsTexture2D
// Offset::0x5742BA0;
FTexture2D* FWidgetBlueprintLibrary::GetBrushResourceAsTexture2D(FSlateBrush Brush);


// Function  UMG.WidgetBlueprintLibrary.GetDragDroppingContent
// Offset::0x57432E0;
FDragDropOperation* FWidgetBlueprintLibrary::GetDragDroppingContent();


// Function  UMG.WidgetBlueprintLibrary.GetDynamicMaterial
// Offset::0x5742770;
FMaterialInstanceDynamic* FWidgetBlueprintLibrary::GetDynamicMaterial(FSlateBrush Brush);


// Function  UMG.WidgetBlueprintLibrary.GetInputEventFromCharacterEvent
// Offset::0x5742040;
FInputEvent FWidgetBlueprintLibrary::GetInputEventFromCharacterEvent(FCharacterEvent Event);


// Function  UMG.WidgetBlueprintLibrary.GetInputEventFromKeyEvent
// Offset::0x57422F0;
FInputEvent FWidgetBlueprintLibrary::GetInputEventFromKeyEvent(FKeyEvent Event);


// Function  UMG.WidgetBlueprintLibrary.GetInputEventFromNavigationEvent
// Offset::0x5741DE0;
FInputEvent FWidgetBlueprintLibrary::GetInputEventFromNavigationEvent(FNavigationEvent Event);


// Function  UMG.WidgetBlueprintLibrary.GetInputEventFromPointerEvent
// Offset::0x5741EC0;
FInputEvent FWidgetBlueprintLibrary::GetInputEventFromPointerEvent(FPointerEvent Event);


// Function  UMG.WidgetBlueprintLibrary.GetKeyEventFromAnalogInputEvent
// Offset::0x5742120;
FKeyEvent FWidgetBlueprintLibrary::GetKeyEventFromAnalogInputEvent(FAnalogInputEvent Event);


// Function  UMG.WidgetBlueprintLibrary.GetSafeZonePadding
// Offset::0x5741C10;
void FWidgetBlueprintLibrary::GetSafeZonePadding(FObject* WorldContextObject,FVector4 SafePadding,FVector2D SafePaddingScale,FVector4 SpillOverPadding);


// Function  UMG.WidgetBlueprintLibrary.Handled
// Offset::0x57446C0;
FEventReply FWidgetBlueprintLibrary::Handled();


// Function  UMG.WidgetBlueprintLibrary.IsDragDropping
// Offset::0x5743310;
bool FWidgetBlueprintLibrary::IsDragDropping();


// Function  UMG.WidgetBlueprintLibrary.LockMouse
// Offset::0x57441C0;
FEventReply FWidgetBlueprintLibrary::LockMouse(FEventReply Reply,FWidget* CapturingWidget);


// Function  UMG.WidgetBlueprintLibrary.MakeBrushFromAsset
// Offset::0x5743160;
FSlateBrush FWidgetBlueprintLibrary::MakeBrushFromAsset(FSlateBrushAsset* BrushAsset);


// Function  UMG.WidgetBlueprintLibrary.MakeBrushFromMaterial
// Offset::0x5742D80;
FSlateBrush FWidgetBlueprintLibrary::MakeBrushFromMaterial(FMaterialInterface* Material,int32_t Width,int32_t Height);


// Function  UMG.WidgetBlueprintLibrary.MakeBrushFromTexture
// Offset::0x5742F70;
FSlateBrush FWidgetBlueprintLibrary::MakeBrushFromTexture(FTexture2D* Texture,int32_t Width,int32_t Height);


// Function  UMG.WidgetBlueprintLibrary.NoResourceBrush
// Offset::0x5742860;
FSlateBrush FWidgetBlueprintLibrary::NoResourceBrush();


// Function  UMG.WidgetBlueprintLibrary.ReleaseJoystickCapture
// Offset::0x5743AF0;
FEventReply FWidgetBlueprintLibrary::ReleaseJoystickCapture(FEventReply Reply,bool bInAllJoysticks);


// Function  UMG.WidgetBlueprintLibrary.ReleaseMouseCapture
// Offset::0x5744360;
FEventReply FWidgetBlueprintLibrary::ReleaseMouseCapture(FEventReply Reply);


// Function  UMG.WidgetBlueprintLibrary.RestorePreviousWindowTitleBarState
// Offset::0x5741720;
void FWidgetBlueprintLibrary::RestorePreviousWindowTitleBarState();


// Function  UMG.WidgetBlueprintLibrary.SetBrushResourceToMaterial
// Offset::0x5742970;
void FWidgetBlueprintLibrary::SetBrushResourceToMaterial(FSlateBrush Brush,FMaterialInterface* Material);


// Function  UMG.WidgetBlueprintLibrary.SetBrushResourceToTexture
// Offset::0x5742970;
void FWidgetBlueprintLibrary::SetBrushResourceToTexture(FSlateBrush Brush,FTexture2D* Texture);


// Function  UMG.WidgetBlueprintLibrary.SetColorVisionDeficiencyType
// Offset::0x5741A90;
void FWidgetBlueprintLibrary::SetColorVisionDeficiencyType(enum class EColorVisionDeficiency Type,float Severity,bool CorrectDeficiency,bool ShowCorrectionWithDeficiency);


// Function  UMG.WidgetBlueprintLibrary.SetFocusToGameViewport
// Offset::0x5745240;
void FWidgetBlueprintLibrary::SetFocusToGameViewport();


// Function  UMG.WidgetBlueprintLibrary.SetHardwareCursor
// Offset::0x5741910;
bool FWidgetBlueprintLibrary::SetHardwareCursor(FObject* WorldContextObject,enum class EMouseCursor CursorShape,FName CursorName,FVector2D HotSpot);


// Function  UMG.WidgetBlueprintLibrary.SetInputMode_GameAndUIEx
// Offset::0x57452F0;
void FWidgetBlueprintLibrary::SetInputMode_GameAndUIEx(FPlayerController* PlayerController,FWidget* InWidgetToFocus,enum class EMouseLockMode InMouseLockMode,bool bHideCursorDuringCapture);


// Function  UMG.WidgetBlueprintLibrary.SetInputMode_GameOnly
// Offset::0x5745260;
void FWidgetBlueprintLibrary::SetInputMode_GameOnly(FPlayerController* PlayerController);


// Function  UMG.WidgetBlueprintLibrary.SetInputMode_UIOnlyEx
// Offset::0x5745460;
void FWidgetBlueprintLibrary::SetInputMode_UIOnlyEx(FPlayerController* PlayerController,FWidget* InWidgetToFocus,enum class EMouseLockMode InMouseLockMode);


// Function  UMG.WidgetBlueprintLibrary.SetMousePosition
// Offset::0x5743950;
FEventReply FWidgetBlueprintLibrary::SetMousePosition(FEventReply Reply,FVector2D NewMousePosition);


// Function  UMG.WidgetBlueprintLibrary.SetUserFocus
// Offset::0x5743E80;
FEventReply FWidgetBlueprintLibrary::SetUserFocus(FEventReply Reply,FWidget* FocusWidget,bool bInAllUsers);


// Function  UMG.WidgetBlueprintLibrary.SetWindowTitleBarCloseButtonActive
// Offset::0x57415E0;
void FWidgetBlueprintLibrary::SetWindowTitleBarCloseButtonActive(bool bActive);


// Function  UMG.WidgetBlueprintLibrary.SetWindowTitleBarOnCloseClickedDelegate
// Offset::0x5741670;
void FWidgetBlueprintLibrary::SetWindowTitleBarOnCloseClickedDelegate(FDelegate Delegate);


// Function  UMG.WidgetBlueprintLibrary.SetWindowTitleBarState
// Offset::0x5741740;
void FWidgetBlueprintLibrary::SetWindowTitleBarState(FWidget* TitleBarContent,enum class EWindowTitleBarMode Mode,bool bTitleBarDragEnabled,bool bWindowButtonsVisible,bool bTitleBarVisible);


// Function  UMG.WidgetBlueprintLibrary.Unhandled
// Offset::0x5744650;
FEventReply FWidgetBlueprintLibrary::Unhandled();


// Function  UMG.WidgetBlueprintLibrary.UnlockMouse
// Offset::0x5744070;
FEventReply FWidgetBlueprintLibrary::UnlockMouse(FEventReply Reply);


// Function  CommonUI.CommonActionWidget.GetDisplayText
// Offset::0x2089020;
FText FCommonActionWidget::GetDisplayText();


// Function  CommonUI.CommonActionWidget.GetIcon
// Offset::0x20890B0;
FSlateBrush FCommonActionWidget::GetIcon();


// Function  CommonUI.CommonActionWidget.IsHeldAction
// Offset::0x2088D20;
bool FCommonActionWidget::IsHeldAction();


// Function  CommonUI.CommonActionWidget.SetIconRimBrush
// Offset::0x2088D50;
void FCommonActionWidget::SetIconRimBrush(FSlateBrush InIconRimBrush);


// Function  CommonUI.CommonActionWidget.SetInputAction
// Offset::0x2088F80;
void FCommonActionWidget::SetInputAction(FDataTableRowHandle InputActionRow);


// Function  CommonUI.CommonActionWidget.SetInputActions
// Offset::0x2088E90;
void FCommonActionWidget::SetInputActions(TArray<FDataTableRowHandle> NewInputActions);


// Function  UMG.Border.GetDynamicMaterial
// Offset::0x56FF270;
FMaterialInstanceDynamic* FBorder::GetDynamicMaterial();


// Function  UMG.Border.SetBrush
// Offset::0x56FF3E0;
void FBorder::SetBrush(FSlateBrush InBrush);


// Function  UMG.Border.SetBrushColor
// Offset::0x56FF4D0;
void FBorder::SetBrushColor(FLinearColor InBrushColor);


// Function  UMG.Border.SetBrushFromAsset
// Offset::0x56FF340;
void FBorder::SetBrushFromAsset(FSlateBrushAsset* Asset);


// Function  UMG.Border.SetBrushFromMaterial
// Offset::0x56FF2A0;
void FBorder::SetBrushFromMaterial(FMaterialInterface* Material);


// Function  UMG.Border.SetBrushFromTexture
// Offset::0x56FF2A0;
void FBorder::SetBrushFromTexture(FTexture2D* Texture);


// Function  UMG.Border.SetContentColorAndOpacity
// Offset::0x56FF730;
void FBorder::SetContentColorAndOpacity(FLinearColor InContentColorAndOpacity);


// Function  UMG.Border.SetDesiredSizeScale
// Offset::0x56FF1D0;
void FBorder::SetDesiredSizeScale(FVector2D InScale);


// Function  UMG.Border.SetHorizontalAlignment
// Offset::0x56FF600;
void FBorder::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.Border.SetPadding
// Offset::0x56FF690;
void FBorder::SetPadding(FMargin InPadding);


// Function  UMG.Border.SetVerticalAlignment
// Offset::0x56FF570;
void FBorder::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  CommonUI.CommonLoadGuard.BP_GuardAndLoadAsset
// Offset::0x2097710;
void FCommonLoadGuard::BP_GuardAndLoadAsset(TSoftObjectPtr<FObject> InLazyAsset,FDelegate OnAssetLoaded);


// Function  CommonUI.CommonLoadGuard.IsLoading
// Offset::0x2097870;
bool FCommonLoadGuard::IsLoading();


// Function  CommonUI.CommonLoadGuard.SetIsLoading
// Offset::0x20978A0;
void FCommonLoadGuard::SetIsLoading(bool bInIsLoading);


// Function  CommonUI.CommonLoadGuard.SetLoadingText
// Offset::0x2097940;
void FCommonLoadGuard::SetLoadingText(FText InLoadingText);


// Function  UMG.TextBlock.GetDynamicFontMaterial
// Offset::0x5725E70;
FMaterialInstanceDynamic* FTextBlock::GetDynamicFontMaterial();


// Function  UMG.TextBlock.GetDynamicOutlineMaterial
// Offset::0x5725E40;
FMaterialInstanceDynamic* FTextBlock::GetDynamicOutlineMaterial();


// Function  UMG.TextBlock.GetText
// Offset::0x5725DB0;
FText FTextBlock::GetText();


// Function  UMG.TextBlock.SetAutoWrapText
// Offset::0x5725FC0;
void FTextBlock::SetAutoWrapText(bool InAutoTextWrap);


// Function  UMG.TextBlock.SetColorAndOpacity
// Offset::0x5726550;
void FTextBlock::SetColorAndOpacity(FSlateColor InColorAndOpacity);


// Function  UMG.TextBlock.SetFont
// Offset::0x5726240;
void FTextBlock::SetFont(FSlateFontInfo InFontInfo);


// Function  UMG.TextBlock.SetMinDesiredWidth
// Offset::0x5726060;
void FTextBlock::SetMinDesiredWidth(float InMinDesiredWidth);


// Function  UMG.TextBlock.SetOpacity
// Offset::0x57264B0;
void FTextBlock::SetOpacity(float InOpacity);


// Function  UMG.TextBlock.SetShadowColorAndOpacity
// Offset::0x5726410;
void FTextBlock::SetShadowColorAndOpacity(FLinearColor InShadowColorAndOpacity);


// Function  UMG.TextBlock.SetShadowOffset
// Offset::0x5726370;
void FTextBlock::SetShadowOffset(FVector2D InShadowOffset);


// Function  UMG.TextBlock.SetStrikeBrush
// Offset::0x5726100;
void FTextBlock::SetStrikeBrush(FSlateBrush InStrikeBrush);


// Function  UMG.TextBlock.SetText
// Offset::0x5725CC0;
void FTextBlock::SetText(FText InText);


// Function  UMG.TextBlock.SetTextOverflowPolicy
// Offset::0x5725EA0;
void FTextBlock::SetTextOverflowPolicy(enum class ETextOverflowPolicy InOverflowPolicy);


// Function  UMG.TextBlock.SetTextTransformPolicy
// Offset::0x5725F30;
void FTextBlock::SetTextTransformPolicy(enum class ETextTransformPolicy InTransformPolicy);


// Function  CommonUI.CommonTextBlock.ResetScrollState
// Offset::0x209DF60;
void FCommonTextBlock::ResetScrollState();


// Function  CommonUI.CommonTextBlock.SetStyle
// Offset::0x209DF80;
void FCommonTextBlock::SetStyle(FCommonTextStyle* InStyle);


// Function  CommonUI.CommonTextBlock.SetTextCase
// Offset::0x209E020;
void FCommonTextBlock::SetTextCase(bool bUseAllCaps);


// Function  CommonUI.CommonTextBlock.SetWrapTextWidth
// Offset::0x209E0C0;
void FCommonTextBlock::SetWrapTextWidth(int32_t InWrapTextAt);


// Function  CommonUI.CommonNumericTextBlock.GetTargetValue
// Offset::0x20983C0;
float FCommonNumericTextBlock::GetTargetValue();


// Function  CommonUI.CommonNumericTextBlock.InterpolateToValue
// Offset::0x20981A0;
void FCommonNumericTextBlock::InterpolateToValue(float TargetValue,float MaximumInterpolationDuration,float MinimumChangeRate,float OutroOffset);


// Function  CommonUI.CommonNumericTextBlock.IsInterpolatingNumericValue
// Offset::0x2098170;
bool FCommonNumericTextBlock::IsInterpolatingNumericValue();


// Function  CommonUI.CommonNumericTextBlock.SetCurrentValue
// Offset::0x2098320;
void FCommonNumericTextBlock::SetCurrentValue(float NewValue);


// Function  CommonUI.CommonNumericTextBlock.SetNumericType
// Offset::0x20980E0;
void FCommonNumericTextBlock::SetNumericType(enum class ECommonNumericType InNumericType);


// Function  UMG.UserWidget.AddToPlayerScreen
// Offset::0x572BEC0;
bool FUserWidget::AddToPlayerScreen(int32_t ZOrder);


// Function  UMG.UserWidget.AddToViewport
// Offset::0x572BF60;
void FUserWidget::AddToViewport(int32_t ZOrder);


// Function  UMG.UserWidget.BindToAnimationEvent
// Offset::0x572B2D0;
void FUserWidget::BindToAnimationEvent(FWidgetAnimation* Animation,FDelegate Delegate,enum class EWidgetAnimationEvent AnimationEvent,FName UserTag);


// Function  UMG.UserWidget.BindToAnimationFinished
// Offset::0x572B600;
void FUserWidget::BindToAnimationFinished(FWidgetAnimation* Animation,FDelegate Delegate);


// Function  UMG.UserWidget.BindToAnimationStarted
// Offset::0x572B8A0;
void FUserWidget::BindToAnimationStarted(FWidgetAnimation* Animation,FDelegate Delegate);


// Function  UMG.UserWidget.CancelLatentActions
// Offset::0x572B9C0;
void FUserWidget::CancelLatentActions();


// Function  UMG.UserWidget.Construct
// Offset::0x3D30810;
void FUserWidget::Construct();


// Function  UMG.UserWidget.Destruct
// Offset::0x3D30810;
void FUserWidget::Destruct();


// Function  UMG.UserWidget.FlushAnimations
// Offset::0x572A1A0;
void FUserWidget::FlushAnimations();


// Function  UMG.UserWidget.GetAlignmentInViewport
// Offset::0x572BB10;
FVector2D FUserWidget::GetAlignmentInViewport();


// Function  UMG.UserWidget.GetAnchorsInViewport
// Offset::0x572BB60;
FAnchors FUserWidget::GetAnchorsInViewport();


// Function  UMG.UserWidget.GetAnimationCurrentTime
// Offset::0x572A670;
float FUserWidget::GetAnimationCurrentTime(FWidgetAnimation* InAnimation);


// Function  UMG.UserWidget.GetIsVisible
// Offset::0x572BAE0;
bool FUserWidget::GetIsVisible();


// Function  UMG.UserWidget.GetOwningPlayerCameraManager
// Offset::0x572B9E0;
FPlayerCameraManager* FUserWidget::GetOwningPlayerCameraManager();


// Function  UMG.UserWidget.GetOwningPlayerPawn
// Offset::0x572BA10;
FPawn* FUserWidget::GetOwningPlayerPawn();


// Function  UMG.UserWidget.IsAnimationPlaying
// Offset::0x572A4F0;
bool FUserWidget::IsAnimationPlaying(FWidgetAnimation* InAnimation);


// Function  UMG.UserWidget.IsAnimationPlayingForward
// Offset::0x572A1C0;
bool FUserWidget::IsAnimationPlayingForward(FWidgetAnimation* InAnimation);


// Function  UMG.UserWidget.IsAnyAnimationPlaying
// Offset::0x572A4C0;
bool FUserWidget::IsAnyAnimationPlaying();


// Function  UMG.UserWidget.IsInteractable
// Offset::0x3D30810;
bool FUserWidget::IsInteractable();


// Function  UMG.UserWidget.IsInViewport
// Offset::0x572BAE0;
bool FUserWidget::IsInViewport();


// Function  UMG.UserWidget.IsListeningForInputAction
// Offset::0x5729D60;
bool FUserWidget::IsListeningForInputAction(FName ActionName);


// Function  UMG.UserWidget.IsPlayingAnimation
// Offset::0x572A0E0;
bool FUserWidget::IsPlayingAnimation();


// Function  UMG.UserWidget.ListenForInputAction
// Offset::0x5729F40;
void FUserWidget::ListenForInputAction(FName ActionName,enum class EInputEvent EventType,bool bConsume,FDelegate Callback);


// Function  UMG.UserWidget.OnAddedToFocusPath
// Offset::0x3D30810;
void FUserWidget::OnAddedToFocusPath(FFocusEvent InFocusEvent);


// Function  UMG.UserWidget.OnAnalogValueChanged
// Offset::0x3D30810;
FEventReply FUserWidget::OnAnalogValueChanged(FGeometry MyGeometry,FAnalogInputEvent InAnalogInputEvent);


// Function  UMG.UserWidget.OnAnimationFinished
// Offset::0x572B190;
void FUserWidget::OnAnimationFinished(FWidgetAnimation* Animation);


// Function  UMG.UserWidget.OnAnimationStarted
// Offset::0x572B230;
void FUserWidget::OnAnimationStarted(FWidgetAnimation* Animation);


// Function  UMG.UserWidget.OnDragCancelled
// Offset::0x3D30810;
void FUserWidget::OnDragCancelled(FPointerEvent PointerEvent,FDragDropOperation* Operation);


// Function  UMG.UserWidget.OnDragDetected
// Offset::0x3D30810;
void FUserWidget::OnDragDetected(FGeometry MyGeometry,FPointerEvent PointerEvent,FDragDropOperation* Operation);


// Function  UMG.UserWidget.OnDragEnter
// Offset::0x3D30810;
void FUserWidget::OnDragEnter(FGeometry MyGeometry,FPointerEvent PointerEvent,FDragDropOperation* Operation);


// Function  UMG.UserWidget.OnDragLeave
// Offset::0x3D30810;
void FUserWidget::OnDragLeave(FPointerEvent PointerEvent,FDragDropOperation* Operation);


// Function  UMG.UserWidget.OnDragOver
// Offset::0x3D30810;
bool FUserWidget::OnDragOver(FGeometry MyGeometry,FPointerEvent PointerEvent,FDragDropOperation* Operation);


// Function  UMG.UserWidget.OnDrop
// Offset::0x3D30810;
bool FUserWidget::OnDrop(FGeometry MyGeometry,FPointerEvent PointerEvent,FDragDropOperation* Operation);


// Function  UMG.UserWidget.OnFocusLost
// Offset::0x3D30810;
void FUserWidget::OnFocusLost(FFocusEvent InFocusEvent);


// Function  UMG.UserWidget.OnFocusReceived
// Offset::0x3D30810;
FEventReply FUserWidget::OnFocusReceived(FGeometry MyGeometry,FFocusEvent InFocusEvent);


// Function  UMG.UserWidget.OnInitialized
// Offset::0x3D30810;
void FUserWidget::OnInitialized();


// Function  UMG.UserWidget.OnKeyChar
// Offset::0x3D30810;
FEventReply FUserWidget::OnKeyChar(FGeometry MyGeometry,FCharacterEvent InCharacterEvent);


// Function  UMG.UserWidget.OnKeyDown
// Offset::0x3D30810;
FEventReply FUserWidget::OnKeyDown(FGeometry MyGeometry,FKeyEvent InKeyEvent);


// Function  UMG.UserWidget.OnKeyUp
// Offset::0x3D30810;
FEventReply FUserWidget::OnKeyUp(FGeometry MyGeometry,FKeyEvent InKeyEvent);


// Function  UMG.UserWidget.OnMotionDetected
// Offset::0x3D30810;
FEventReply FUserWidget::OnMotionDetected(FGeometry MyGeometry,FMotionEvent InMotionEvent);


// Function  UMG.UserWidget.OnMouseButtonDoubleClick
// Offset::0x3D30810;
FEventReply FUserWidget::OnMouseButtonDoubleClick(FGeometry InMyGeometry,FPointerEvent InMouseEvent);


// Function  UMG.UserWidget.OnMouseButtonDown
// Offset::0x3D30810;
FEventReply FUserWidget::OnMouseButtonDown(FGeometry MyGeometry,FPointerEvent MouseEvent);


// Function  UMG.UserWidget.OnMouseButtonUp
// Offset::0x3D30810;
FEventReply FUserWidget::OnMouseButtonUp(FGeometry MyGeometry,FPointerEvent MouseEvent);


// Function  UMG.UserWidget.OnMouseCaptureLost
// Offset::0x3D30810;
void FUserWidget::OnMouseCaptureLost();


// Function  UMG.UserWidget.OnMouseEnter
// Offset::0x3D30810;
void FUserWidget::OnMouseEnter(FGeometry MyGeometry,FPointerEvent MouseEvent);


// Function  UMG.UserWidget.OnMouseLeave
// Offset::0x3D30810;
void FUserWidget::OnMouseLeave(FPointerEvent MouseEvent);


// Function  UMG.UserWidget.OnMouseMove
// Offset::0x3D30810;
FEventReply FUserWidget::OnMouseMove(FGeometry MyGeometry,FPointerEvent MouseEvent);


// Function  UMG.UserWidget.OnMouseWheel
// Offset::0x3D30810;
FEventReply FUserWidget::OnMouseWheel(FGeometry MyGeometry,FPointerEvent MouseEvent);


// Function  UMG.UserWidget.OnPaint
// Offset::0x3D30810;
void FUserWidget::OnPaint(FPaintContext Context);


// Function  UMG.UserWidget.OnPreviewKeyDown
// Offset::0x3D30810;
FEventReply FUserWidget::OnPreviewKeyDown(FGeometry MyGeometry,FKeyEvent InKeyEvent);


// Function  UMG.UserWidget.OnPreviewMouseButtonDown
// Offset::0x3D30810;
FEventReply FUserWidget::OnPreviewMouseButtonDown(FGeometry MyGeometry,FPointerEvent MouseEvent);


// Function  UMG.UserWidget.OnRemovedFromFocusPath
// Offset::0x3D30810;
void FUserWidget::OnRemovedFromFocusPath(FFocusEvent InFocusEvent);


// Function  UMG.UserWidget.OnTouchEnded
// Offset::0x3D30810;
FEventReply FUserWidget::OnTouchEnded(FGeometry MyGeometry,FPointerEvent InTouchEvent);


// Function  UMG.UserWidget.OnTouchForceChanged
// Offset::0x3D30810;
FEventReply FUserWidget::OnTouchForceChanged(FGeometry MyGeometry,FPointerEvent InTouchEvent);


// Function  UMG.UserWidget.OnTouchGesture
// Offset::0x3D30810;
FEventReply FUserWidget::OnTouchGesture(FGeometry MyGeometry,FPointerEvent GestureEvent);


// Function  UMG.UserWidget.OnTouchMoved
// Offset::0x3D30810;
FEventReply FUserWidget::OnTouchMoved(FGeometry MyGeometry,FPointerEvent InTouchEvent);


// Function  UMG.UserWidget.OnTouchStarted
// Offset::0x3D30810;
FEventReply FUserWidget::OnTouchStarted(FGeometry MyGeometry,FPointerEvent InTouchEvent);


// Function  UMG.UserWidget.PauseAnimation
// Offset::0x572A710;
float FUserWidget::PauseAnimation(FWidgetAnimation* InAnimation);


// Function  UMG.UserWidget.PlayAnimation
// Offset::0x572AD70;
FUMGSequencePlayer* FUserWidget::PlayAnimation(FWidgetAnimation* InAnimation,float StartAtTime,int32_t NumLoopsToPlay,enum class EUMGSequencePlayMode PlayMode,float PlaybackSpeed,bool bRestoreState);


// Function  UMG.UserWidget.PlayAnimationForward
// Offset::0x572A9B0;
FUMGSequencePlayer* FUserWidget::PlayAnimationForward(FWidgetAnimation* InAnimation,float PlaybackSpeed,bool bRestoreState);


// Function  UMG.UserWidget.PlayAnimationReverse
// Offset::0x572A870;
FUMGSequencePlayer* FUserWidget::PlayAnimationReverse(FWidgetAnimation* InAnimation,float PlaybackSpeed,bool bRestoreState);


// Function  UMG.UserWidget.PlayAnimationTimeRange
// Offset::0x572AAF0;
FUMGSequencePlayer* FUserWidget::PlayAnimationTimeRange(FWidgetAnimation* InAnimation,float StartAtTime,float EndAtTime,int32_t NumLoopsToPlay,enum class EUMGSequencePlayMode PlayMode,float PlaybackSpeed,bool bRestoreState);


// Function  UMG.UserWidget.PlaySound
// Offset::0x572A100;
void FUserWidget::PlaySound(FSoundBase* SoundToPlay);


// Function  UMG.UserWidget.PreConstruct
// Offset::0x3D30810;
void FUserWidget::PreConstruct(bool IsDesignTime);


// Function  UMG.UserWidget.RegisterInputComponent
// Offset::0x5729E20;
void FUserWidget::RegisterInputComponent();


// Function  UMG.UserWidget.RemoveFromViewport
// Offset::0x572BEA0;
void FUserWidget::RemoveFromViewport();


// Function  UMG.UserWidget.ReverseAnimation
// Offset::0x572A260;
void FUserWidget::ReverseAnimation(FWidgetAnimation* InAnimation);


// Function  UMG.UserWidget.SetAlignmentInViewport
// Offset::0x572BBC0;
void FUserWidget::SetAlignmentInViewport(FVector2D Alignment);


// Function  UMG.UserWidget.SetAnchorsInViewport
// Offset::0x572BC60;
void FUserWidget::SetAnchorsInViewport(FAnchors Anchors);


// Function  UMG.UserWidget.SetAnimationCurrentTime
// Offset::0x572A590;
void FUserWidget::SetAnimationCurrentTime(FWidgetAnimation* InAnimation,float InTime);


// Function  UMG.UserWidget.SetColorAndOpacity
// Offset::0x572B0F0;
void FUserWidget::SetColorAndOpacity(FLinearColor InColorAndOpacity);


// Function  UMG.UserWidget.SetDesiredSizeInViewport
// Offset::0x572BD10;
void FUserWidget::SetDesiredSizeInViewport(FVector2D Size);


// Function  UMG.UserWidget.SetForegroundColor
// Offset::0x572B040;
void FUserWidget::SetForegroundColor(FSlateColor InForegroundColor);


// Function  UMG.UserWidget.SetInputActionBlocking
// Offset::0x5729C20;
void FUserWidget::SetInputActionBlocking(bool bShouldBlock);


// Function  UMG.UserWidget.SetInputActionPriority
// Offset::0x5729CC0;
void FUserWidget::SetInputActionPriority(int32_t NewPriority);


// Function  UMG.UserWidget.SetNumLoopsToPlay
// Offset::0x572A3E0;
void FUserWidget::SetNumLoopsToPlay(FWidgetAnimation* InAnimation,int32_t NumLoopsToPlay);


// Function  UMG.UserWidget.SetOwningPlayer
// Offset::0x572BA40;
void FUserWidget::SetOwningPlayer(FPlayerController* LocalPlayerController);


// Function  UMG.UserWidget.SetPadding
// Offset::0x572AFA0;
void FUserWidget::SetPadding(FMargin InPadding);


// Function  UMG.UserWidget.SetPlaybackSpeed
// Offset::0x572A300;
void FUserWidget::SetPlaybackSpeed(FWidgetAnimation* InAnimation,float PlaybackSpeed);


// Function  UMG.UserWidget.SetPositionInViewport
// Offset::0x572BDB0;
void FUserWidget::SetPositionInViewport(FVector2D Position,bool bRemoveDPIScale);


// Function  UMG.UserWidget.StopAllAnimations
// Offset::0x572A7B0;
void FUserWidget::StopAllAnimations();


// Function  UMG.UserWidget.StopAnimation
// Offset::0x572A7D0;
void FUserWidget::StopAnimation(FWidgetAnimation* InAnimation);


// Function  UMG.UserWidget.StopAnimationsAndLatentActions
// Offset::0x572B9A0;
void FUserWidget::StopAnimationsAndLatentActions();


// Function  UMG.UserWidget.StopListeningForAllInputActions
// Offset::0x5729E40;
void FUserWidget::StopListeningForAllInputActions();


// Function  UMG.UserWidget.StopListeningForInputAction
// Offset::0x5729E60;
void FUserWidget::StopListeningForInputAction(FName ActionName,enum class EInputEvent EventType);


// Function  UMG.UserWidget.Tick
// Offset::0x3D30810;
void FUserWidget::Tick(FGeometry MyGeometry,float InDeltaTime);


// Function  UMG.UserWidget.UnbindAllFromAnimationFinished
// Offset::0x572B460;
void FUserWidget::UnbindAllFromAnimationFinished(FWidgetAnimation* Animation);


// Function  UMG.UserWidget.UnbindAllFromAnimationStarted
// Offset::0x572B700;
void FUserWidget::UnbindAllFromAnimationStarted(FWidgetAnimation* Animation);


// Function  UMG.UserWidget.UnbindFromAnimationFinished
// Offset::0x572B500;
void FUserWidget::UnbindFromAnimationFinished(FWidgetAnimation* Animation,FDelegate Delegate);


// Function  UMG.UserWidget.UnbindFromAnimationStarted
// Offset::0x572B7A0;
void FUserWidget::UnbindFromAnimationStarted(FWidgetAnimation* Animation,FDelegate Delegate);


// Function  UMG.UserWidget.UnregisterInputComponent
// Offset::0x5729E00;
void FUserWidget::UnregisterInputComponent();


// Function  CommonUI.CommonUserWidget.SetConsumePointerInput
// Offset::0x20A1620;
void FCommonUserWidget::SetConsumePointerInput(bool bInConsumePointerInput);


// Function  CommonUI.CommonTabListWidgetBase.DisableTabWithReason
// Offset::0x209B250;
void FCommonTabListWidgetBase::DisableTabWithReason(FName TabNameID,FText Reason);


// Function  CommonUI.CommonTabListWidgetBase.GetActiveTab
// Offset::0x209BB20;
FName FCommonTabListWidgetBase::GetActiveTab();


// Function  CommonUI.CommonTabListWidgetBase.GetLinkedSwitcher
// Offset::0x209BA50;
FCommonAnimatedSwitcher* FCommonTabListWidgetBase::GetLinkedSwitcher();


// Function  CommonUI.CommonTabListWidgetBase.GetSelectedTabId
// Offset::0x209B6E0;
FName FCommonTabListWidgetBase::GetSelectedTabId();


// Function  CommonUI.CommonTabListWidgetBase.GetTabButtonBaseByID
// Offset::0x209B110;
FCommonButtonBase* FCommonTabListWidgetBase::GetTabButtonBaseByID(FName TabNameID);


// Function  CommonUI.CommonTabListWidgetBase.GetTabCount
// Offset::0x209B820;
int32_t FCommonTabListWidgetBase::GetTabCount();


// Function  CommonUI.CommonTabListWidgetBase.GetTabIdAtIndex
// Offset::0x209B630;
FName FCommonTabListWidgetBase::GetTabIdAtIndex(int32_t Index);


// Function  CommonUI.CommonTabListWidgetBase.GetTabWidgetBaseByID
// Offset::0x209B070;
FWidget* FCommonTabListWidgetBase::GetTabWidgetBaseByID(FName TabNameID);


// Function  CommonUI.CommonTabListWidgetBase.HandleNextTabInputAction
// Offset::0x209AB80;
void FCommonTabListWidgetBase::HandleNextTabInputAction(bool bPassThrough);


// Function  CommonUI.CommonTabListWidgetBase.HandlePostLinkedSwitcherChanged_BP
// Offset::0x3D30810;
void FCommonTabListWidgetBase::HandlePostLinkedSwitcherChanged_BP();


// Function  CommonUI.CommonTabListWidgetBase.HandlePreLinkedSwitcherChanged_BP
// Offset::0x3D30810;
void FCommonTabListWidgetBase::HandlePreLinkedSwitcherChanged_BP();


// Function  CommonUI.CommonTabListWidgetBase.HandlePreviousTabInputAction
// Offset::0x209AC20;
void FCommonTabListWidgetBase::HandlePreviousTabInputAction(bool bPassThrough);


// Function  CommonUI.CommonTabListWidgetBase.HandleTabButtonSelected
// Offset::0x209ACC0;
void FCommonTabListWidgetBase::HandleTabButtonSelected(FCommonButtonBase* SelectedTabButton,int32_t ButtonIndex);


// Function  CommonUI.CommonTabListWidgetBase.HandleTabCreation
// Offset::0x209AF80;
void FCommonTabListWidgetBase::HandleTabCreation(FName TabNameID,FCommonButtonBase* TabButton);


// Function  CommonUI.CommonTabListWidgetBase.HandleTabRemoval
// Offset::0x209AE90;
void FCommonTabListWidgetBase::HandleTabRemoval(FName TabNameID,FCommonButtonBase* TabButton);


// Function  CommonUI.CommonTabListWidgetBase.HandleTabSelection
// Offset::0x209ADA0;
void FCommonTabListWidgetBase::HandleTabSelection(FName TabNameID,FCommonButtonBase* TabButton);


// Function  CommonUI.CommonTabListWidgetBase.RegisterTab
// Offset::0x209B910;
bool FCommonTabListWidgetBase::RegisterTab(FName TabNameID,FCommonButtonBase* ButtonWidgetType,FWidget* ContentWidget);


// Function  CommonUI.CommonTabListWidgetBase.RemoveAllTabs
// Offset::0x209B850;
void FCommonTabListWidgetBase::RemoveAllTabs();


// Function  CommonUI.CommonTabListWidgetBase.RemoveTab
// Offset::0x209B870;
bool FCommonTabListWidgetBase::RemoveTab(FName TabNameID);


// Function  CommonUI.CommonTabListWidgetBase.SelectTabByID
// Offset::0x209B730;
bool FCommonTabListWidgetBase::SelectTabByID(FName TabNameID,bool bSuppressClickFeedback);


// Function  CommonUI.CommonTabListWidgetBase.SetLinkedSwitcher
// Offset::0x209BA80;
void FCommonTabListWidgetBase::SetLinkedSwitcher(FCommonAnimatedSwitcher* CommonSwitcher);


// Function  CommonUI.CommonTabListWidgetBase.SetListeningForInput
// Offset::0x209B1B0;
void FCommonTabListWidgetBase::SetListeningForInput(bool bShouldListen);


// Function  CommonUI.CommonTabListWidgetBase.SetTabEnabled
// Offset::0x209B460;
void FCommonTabListWidgetBase::SetTabEnabled(FName TabNameID,bool bEnable);


// Function  CommonUI.CommonTabListWidgetBase.SetTabInteractionEnabled
// Offset::0x209B370;
void FCommonTabListWidgetBase::SetTabInteractionEnabled(FName TabNameID,bool bEnable);


// Function  CommonUI.CommonTabListWidgetBase.SetTabVisibility
// Offset::0x209B550;
void FCommonTabListWidgetBase::SetTabVisibility(FName TabNameID,enum class ESlateVisibility NewVisibility);


// Function  Engine.Actor.ActorHasTag
// Offset::0x62EDA80;
bool FActor::ActorHasTag(FName Tag);


// Function  Engine.Actor.AddComponent
// Offset::0x62EE7D0;
FActorComponent* FActor::AddComponent(FName TemplateName,bool bManualAttachment,FTransform RelativeTransform,FObject* ComponentTemplateContext,bool bDeferredFinish);


// Function  Engine.Actor.AddComponentByClass
// Offset::0x62EE5D0;
FActorComponent* FActor::AddComponentByClass(FActorComponent* Class,bool bManualAttachment,FTransform RelativeTransform,bool bDeferredFinish);


// Function  Engine.Actor.AddTickPrerequisiteActor
// Offset::0x62ED9B0;
void FActor::AddTickPrerequisiteActor(FActor* PrerequisiteActor);


// Function  Engine.Actor.AddTickPrerequisiteComponent
// Offset::0x62ED910;
void FActor::AddTickPrerequisiteComponent(FActorComponent* PrerequisiteComponent);


// Function  Engine.Actor.DetachRootComponentFromParent
// Offset::0x62EDC50;
void FActor::DetachRootComponentFromParent(bool bMaintainWorldPosition);


// Function  Engine.Actor.DisableInput
// Offset::0x26DA5F0;
void FActor::DisableInput(FPlayerController* PlayerController);


// Function  Engine.Actor.EnableInput
// Offset::0x26DA550;
void FActor::EnableInput(FPlayerController* PlayerController);


// Function  Engine.Actor.FinishAddComponent
// Offset::0x62EE430;
void FActor::FinishAddComponent(FActorComponent* Component,bool bManualAttachment,FTransform RelativeTransform);


// Function  Engine.Actor.FlushNetDormancy
// Offset::0x62ED060;
void FActor::FlushNetDormancy();


// Function  Engine.Actor.ForceNetUpdate
// Offset::0x62EC9C0;
void FActor::ForceNetUpdate();


// Function  Engine.Actor.GetActorBounds
// Offset::0x62F14F0;
void FActor::GetActorBounds(bool bOnlyCollidingComponents,FVector Origin,FVector BoxExtent,bool bIncludeFromChildActors);


// Function  Engine.Actor.GetActorEnableCollision
// Offset::0x62EEA70;
bool FActor::GetActorEnableCollision();


// Function  Engine.Actor.GetActorEyesViewPoint
// Offset::0x62EC790;
void FActor::GetActorEyesViewPoint(FVector OutLocation,FRotator OutRotation);


// Function  Engine.Actor.GetActorForwardVector
// Offset::0x62F1810;
FVector FActor::GetActorForwardVector();


// Function  Engine.Actor.GetActorRelativeScale3D
// Offset::0x62EEBE0;
FVector FActor::GetActorRelativeScale3D();


// Function  Engine.Actor.GetActorRightVector
// Offset::0x62F1690;
FVector FActor::GetActorRightVector();


// Function  Engine.Actor.GetActorScale3D
// Offset::0x62F0F60;
FVector FActor::GetActorScale3D();


// Function  Engine.Actor.GetActorTickInterval
// Offset::0x62ED270;
float FActor::GetActorTickInterval();


// Function  Engine.Actor.GetActorTimeDilation
// Offset::0x62EDA50;
float FActor::GetActorTimeDilation();


// Function  Engine.Actor.GetActorUpVector
// Offset::0x62F1750;
FVector FActor::GetActorUpVector();


// Function  Engine.Actor.GetAllChildActors
// Offset::0x62ECF20;
void FActor::GetAllChildActors(TArray<FActor*> ChildActors,bool bIncludeDescendants);


// Function  Engine.Actor.GetAttachedActors
// Offset::0x62ECB10;
void FActor::GetAttachedActors(TArray<FActor*> OutActors,bool bResetArray,bool bRecursivelyIncludeAttachedActors);


// Function  Engine.Actor.GetAttachParentActor
// Offset::0x62ECCC0;
FActor* FActor::GetAttachParentActor();


// Function  Engine.Actor.GetAttachParentSocketName
// Offset::0x62ECC70;
FName FActor::GetAttachParentSocketName();


// Function  Engine.Actor.GetComponentByClass
// Offset::0x62EC6F0;
FActorComponent* FActor::GetComponentByClass(FActorComponent* ComponentClass);


// Function  Engine.Actor.GetComponentsByInterface
// Offset::0x62EC410;
TArray<FActorComponent*> FActor::GetComponentsByInterface(FInterface* Interface);


// Function  Engine.Actor.GetComponentsByTag
// Offset::0x62EC4F0;
TArray<FActorComponent*> FActor::GetComponentsByTag(FActorComponent* ComponentClass,FName Tag);


// Function  Engine.Actor.GetDistanceTo
// Offset::0x62F0EC0;
float FActor::GetDistanceTo(FActor* OtherActor);


// Function  Engine.Actor.GetDotProductTo
// Offset::0x62F0BA0;
float FActor::GetDotProductTo(FActor* OtherActor);


// Function  Engine.Actor.GetGameTimeSinceCreation
// Offset::0x62ED6D0;
float FActor::GetGameTimeSinceCreation();


// Function  Engine.Actor.GetHorizontalDistanceTo
// Offset::0x62F0D80;
float FActor::GetHorizontalDistanceTo(FActor* OtherActor);


// Function  Engine.Actor.GetHorizontalDotProductTo
// Offset::0x62F0B00;
float FActor::GetHorizontalDotProductTo(FActor* OtherActor);


// Function  Engine.Actor.GetInputAxisKeyValue
// Offset::0x62F1FC0;
float FActor::GetInputAxisKeyValue(FKey InputAxisKey);


// Function  Engine.Actor.GetInputAxisValue
// Offset::0x62F20B0;
float FActor::GetInputAxisValue(FName InputAxisName);


// Function  Engine.Actor.GetInputVectorAxisValue
// Offset::0x62F1EC0;
FVector FActor::GetInputVectorAxisValue(FKey InputAxisKey);


// Function  Engine.Actor.GetInstigator
// Offset::0x62F1E90;
FPawn* FActor::GetInstigator();


// Function  Engine.Actor.GetInstigatorController
// Offset::0x62F1E60;
FController* FActor::GetInstigatorController();


// Function  Engine.Actor.GetLevel
// Offset::0x62ECD80;
FLevel* FActor::GetLevel();


// Function  Engine.Actor.GetLevelTransform
// Offset::0x62ECCF0;
FTransform FActor::GetLevelTransform();


// Function  Engine.Actor.GetLifeSpan
// Offset::0x62ED410;
float FActor::GetLifeSpan();


// Function  Engine.Actor.GetLocalRole
// Offset::0x5026350;
enum class ENetRole FActor::GetLocalRole();


// Function  Engine.Actor.GetOverlappingActors
// Offset::0x62ED590;
void FActor::GetOverlappingActors(TArray<FActor*> OverlappingActors,FActor* ClassFilter);


// Function  Engine.Actor.GetOverlappingComponents
// Offset::0x62ED4E0;
void FActor::GetOverlappingComponents(TArray<FPrimitiveComponent*> OverlappingComponents);


// Function  Engine.Actor.GetOwner
// Offset::0x22C1D40;
FActor* FActor::GetOwner();


// Function  Engine.Actor.GetParentActor
// Offset::0x62ECEC0;
FActor* FActor::GetParentActor();


// Function  Engine.Actor.GetParentComponent
// Offset::0x62ECEF0;
FChildActorComponent* FActor::GetParentComponent();


// Function  Engine.Actor.GetRayTracingGroupId
// Offset::0x62F2150;
int32_t FActor::GetRayTracingGroupId();


// Function  Engine.Actor.GetRemoteRole
// Offset::0x62F2220;
enum class ENetRole FActor::GetRemoteRole();


// Function  Engine.Actor.GetSquaredDistanceTo
// Offset::0x62F0E20;
float FActor::GetSquaredDistanceTo(FActor* OtherActor);


// Function  Engine.Actor.GetSquaredHorizontalDistanceTo
// Offset::0x62F0CE0;
float FActor::GetSquaredHorizontalDistanceTo(FActor* OtherActor);


// Function  Engine.Actor.GetTickableWhenPaused
// Offset::0x62ED7A0;
bool FActor::GetTickableWhenPaused();


// Function  Engine.Actor.GetTransform
// Offset::0x62F1DD0;
FTransform FActor::GetTransform();


// Function  Engine.Actor.GetVelocity
// Offset::0x62F1470;
FVector FActor::GetVelocity();


// Function  Engine.Actor.GetVerticalDistanceTo
// Offset::0x62F0C40;
float FActor::GetVerticalDistanceTo(FActor* OtherActor);


// Function  Engine.Actor.HasAuthority
// Offset::0x62EEA20;
bool FActor::HasAuthority();


// Function  Engine.Actor.IsActorBeingDestroyed
// Offset::0x62ED6A0;
bool FActor::IsActorBeingDestroyed();


// Function  Engine.Actor.IsActorTickEnabled
// Offset::0x62ED340;
bool FActor::IsActorTickEnabled();


// Function  Engine.Actor.IsChildActor
// Offset::0x62ED030;
bool FActor::IsChildActor();


// Function  Engine.Actor.IsOverlappingActor
// Offset::0x62ED110;
bool FActor::IsOverlappingActor(FActor* Other);


// Function  Engine.Actor.K2_AddActorLocalOffset
// Offset::0x62EFA80;
void FActor::K2_AddActorLocalOffset(FVector DeltaLocation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_AddActorLocalRotation
// Offset::0x62EF7E0;
void FActor::K2_AddActorLocalRotation(FRotator DeltaRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_AddActorLocalTransform
// Offset::0x62EF500;
void FActor::K2_AddActorLocalTransform(FTransform NewTransform,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_AddActorWorldOffset
// Offset::0x62F0860;
void FActor::K2_AddActorWorldOffset(FVector DeltaLocation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_AddActorWorldRotation
// Offset::0x62F05C0;
void FActor::K2_AddActorWorldRotation(FRotator DeltaRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_AddActorWorldTransform
// Offset::0x62F02E0;
void FActor::K2_AddActorWorldTransform(FTransform DeltaTransform,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_AddActorWorldTransformKeepScale
// Offset::0x62F0000;
void FActor::K2_AddActorWorldTransformKeepScale(FTransform DeltaTransform,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_AttachRootComponentTo
// Offset::0x62EE2B0;
void FActor::K2_AttachRootComponentTo(FSceneComponent* InParent,FName InSocketName,enum class EAttachLocation AttachLocationType,bool bWeldSimulatedBodies);


// Function  Engine.Actor.K2_AttachRootComponentToActor
// Offset::0x62EDF10;
void FActor::K2_AttachRootComponentToActor(FActor* InParentActor,FName InSocketName,enum class EAttachLocation AttachLocationType,bool bWeldSimulatedBodies);


// Function  Engine.Actor.K2_AttachToActor
// Offset::0x62EDCF0;
void FActor::K2_AttachToActor(FActor* ParentActor,FName SocketName,enum class EAttachmentRule LocationRule,enum class EAttachmentRule RotationRule,enum class EAttachmentRule ScaleRule,bool bWeldSimulatedBodies);


// Function  Engine.Actor.K2_AttachToComponent
// Offset::0x62EE090;
void FActor::K2_AttachToComponent(FSceneComponent* Parent,FName SocketName,enum class EAttachmentRule LocationRule,enum class EAttachmentRule RotationRule,enum class EAttachmentRule ScaleRule,bool bWeldSimulatedBodies);


// Function  Engine.Actor.K2_DestroyActor
// Offset::0x62EEA50;
void FActor::K2_DestroyActor();


// Function  Engine.Actor.K2_DetachFromActor
// Offset::0x62EDB20;
void FActor::K2_DetachFromActor(enum class EDetachmentRule LocationRule,enum class EDetachmentRule RotationRule,enum class EDetachmentRule ScaleRule);


// Function  Engine.Actor.K2_GetActorLocation
// Offset::0x62F1D80;
FVector FActor::K2_GetActorLocation();


// Function  Engine.Actor.K2_GetActorRotation
// Offset::0x62F18D0;
FRotator FActor::K2_GetActorRotation();


// Function  Engine.Actor.K2_GetComponentsByClass
// Offset::0x62EC610;
TArray<FActorComponent*> FActor::K2_GetComponentsByClass(FActorComponent* ComponentClass);


// Function  Engine.Actor.K2_GetRootComponent
// Offset::0x62F14D0;
FSceneComponent* FActor::K2_GetRootComponent();


// Function  Engine.Actor.K2_OnBecomeViewTarget
// Offset::0x3D30810;
void FActor::K2_OnBecomeViewTarget(FPlayerController* PC);


// Function  Engine.Actor.K2_OnEndViewTarget
// Offset::0x3D30810;
void FActor::K2_OnEndViewTarget(FPlayerController* PC);


// Function  Engine.Actor.K2_OnReset
// Offset::0x3D30810;
void FActor::K2_OnReset();


// Function  Engine.Actor.K2_SetActorLocation
// Offset::0x62F1AE0;
bool FActor::K2_SetActorLocation(FVector NewLocation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_SetActorLocationAndRotation
// Offset::0x62F1060;
bool FActor::K2_SetActorLocationAndRotation(FVector NewLocation,FRotator NewRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_SetActorRelativeLocation
// Offset::0x62EF260;
void FActor::K2_SetActorRelativeLocation(FVector NewRelativeLocation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_SetActorRelativeRotation
// Offset::0x62EEFC0;
void FActor::K2_SetActorRelativeRotation(FRotator NewRelativeRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_SetActorRelativeTransform
// Offset::0x62EECE0;
void FActor::K2_SetActorRelativeTransform(FTransform NewRelativeTransform,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_SetActorRotation
// Offset::0x62F1370;
bool FActor::K2_SetActorRotation(FRotator NewRotation,bool bTeleportPhysics);


// Function  Engine.Actor.K2_SetActorTransform
// Offset::0x62EFD20;
bool FActor::K2_SetActorTransform(FTransform NewTransform,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.Actor.K2_TeleportTo
// Offset::0x62ECDB0;
bool FActor::K2_TeleportTo(FVector DestLocation,FRotator DestRotation);


// Function  Engine.Actor.MakeNoise
// Offset::0x62EC220;
void FActor::MakeNoise(float Loudness,FPawn* NoiseInstigator,FVector NoiseLocation,float MaxRange,FName Tag);


// Function  Engine.Actor.OnRep_AttachmentReplication
// Offset::0x179F4A0;
void FActor::OnRep_AttachmentReplication();


// Function  Engine.Actor.OnRep_Instigator
// Offset::0x2341800;
void FActor::OnRep_Instigator();


// Function  Engine.Actor.OnRep_Owner
// Offset::0x179DEB0;
void FActor::OnRep_Owner();


// Function  Engine.Actor.OnRep_ReplicatedMovement
// Offset::0x62ED250;
void FActor::OnRep_ReplicatedMovement();


// Function  Engine.Actor.OnRep_ReplicateMovement
// Offset::0x179D370;
void FActor::OnRep_ReplicateMovement();


// Function  Engine.Actor.PrestreamTextures
// Offset::0x62EC880;
void FActor::PrestreamTextures(float Seconds,bool bEnableStreaming,int32_t CinematicTextureGroups);


// Function  Engine.Actor.ReceiveActorBeginCursorOver
// Offset::0x3D30810;
void FActor::ReceiveActorBeginCursorOver();


// Function  Engine.Actor.ReceiveActorBeginOverlap
// Offset::0x3D30810;
void FActor::ReceiveActorBeginOverlap(FActor* OtherActor);


// Function  Engine.Actor.ReceiveActorEndCursorOver
// Offset::0x3D30810;
void FActor::ReceiveActorEndCursorOver();


// Function  Engine.Actor.ReceiveActorEndOverlap
// Offset::0x3D30810;
void FActor::ReceiveActorEndOverlap(FActor* OtherActor);


// Function  Engine.Actor.ReceiveActorOnClicked
// Offset::0x3D30810;
void FActor::ReceiveActorOnClicked(FKey ButtonPressed);


// Function  Engine.Actor.ReceiveActorOnInputTouchBegin
// Offset::0x3D30810;
void FActor::ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex);


// Function  Engine.Actor.ReceiveActorOnInputTouchEnd
// Offset::0x3D30810;
void FActor::ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex);


// Function  Engine.Actor.ReceiveActorOnInputTouchEnter
// Offset::0x3D30810;
void FActor::ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex);


// Function  Engine.Actor.ReceiveActorOnInputTouchLeave
// Offset::0x3D30810;
void FActor::ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex);


// Function  Engine.Actor.ReceiveActorOnReleased
// Offset::0x3D30810;
void FActor::ReceiveActorOnReleased(FKey ButtonReleased);


// Function  Engine.Actor.ReceiveAnyDamage
// Offset::0x3D30810;
void FActor::ReceiveAnyDamage(float Damage,FDamageType* DamageType,FController* InstigatedBy,FActor* DamageCauser);


// Function  Engine.Actor.ReceiveBeginPlay
// Offset::0x3D30810;
void FActor::ReceiveBeginPlay();


// Function  Engine.Actor.ReceiveDestroyed
// Offset::0x3D30810;
void FActor::ReceiveDestroyed();


// Function  Engine.Actor.ReceiveEndPlay
// Offset::0x3D30810;
void FActor::ReceiveEndPlay(enum class EEndPlayReason EndPlayReason);


// Function  Engine.Actor.ReceiveHit
// Offset::0x3D30810;
void FActor::ReceiveHit(FPrimitiveComponent* MyComp,FActor* Other,FPrimitiveComponent* OtherComp,bool bSelfMoved,FVector HitLocation,FVector HitNormal,FVector NormalImpulse,FHitResult Hit);


// Function  Engine.Actor.ReceivePointDamage
// Offset::0x3D30810;
void FActor::ReceivePointDamage(float Damage,FDamageType* DamageType,FVector HitLocation,FVector HitNormal,FPrimitiveComponent* HitComponent,FName BoneName,FVector ShotFromDirection,FController* InstigatedBy,FActor* DamageCauser,FHitResult HitInfo);


// Function  Engine.Actor.ReceiveRadialDamage
// Offset::0x3D30810;
void FActor::ReceiveRadialDamage(float DamageReceived,FDamageType* DamageType,FVector Origin,FHitResult HitInfo,FController* InstigatedBy,FActor* DamageCauser);


// Function  Engine.Actor.ReceiveTick
// Offset::0x3D30810;
void FActor::ReceiveTick(float DeltaSeconds);


// Function  Engine.Actor.RemoveTickPrerequisiteActor
// Offset::0x62ED870;
void FActor::RemoveTickPrerequisiteActor(FActor* PrerequisiteActor);


// Function  Engine.Actor.RemoveTickPrerequisiteComponent
// Offset::0x62ED7D0;
void FActor::RemoveTickPrerequisiteComponent(FActorComponent* PrerequisiteComponent);


// Function  Engine.Actor.SetActorEnableCollision
// Offset::0x62EEAA0;
void FActor::SetActorEnableCollision(bool bNewActorEnableCollision);


// Function  Engine.Actor.SetActorHiddenInGame
// Offset::0x62EEB40;
void FActor::SetActorHiddenInGame(bool bNewHidden);


// Function  Engine.Actor.SetActorRelativeScale3D
// Offset::0x62EEC40;
void FActor::SetActorRelativeScale3D(FVector NewRelativeScale);


// Function  Engine.Actor.SetActorScale3D
// Offset::0x62F0FC0;
void FActor::SetActorScale3D(FVector NewScale3D);


// Function  Engine.Actor.SetActorTickEnabled
// Offset::0x62ED370;
void FActor::SetActorTickEnabled(bool bEnabled);


// Function  Engine.Actor.SetActorTickInterval
// Offset::0x62ED2A0;
void FActor::SetActorTickInterval(float TickInterval);


// Function  Engine.Actor.SetAutoDestroyWhenFinished
// Offset::0x62F2380;
void FActor::SetAutoDestroyWhenFinished(bool bVal);


// Function  Engine.Actor.SetLifeSpan
// Offset::0x62ED440;
void FActor::SetLifeSpan(float InLifespan);


// Function  Engine.Actor.SetNetDormancy
// Offset::0x62ED080;
void FActor::SetNetDormancy(enum class ENetDormancy NewDormancy);


// Function  Engine.Actor.SetOwner
// Offset::0x62ED1B0;
void FActor::SetOwner(FActor* NewOwner);


// Function  Engine.Actor.SetRayTracingGroupId
// Offset::0x62F2180;
void FActor::SetRayTracingGroupId(int32_t InRaytracingGroupId);


// Function  Engine.Actor.SetReplicateMovement
// Offset::0x62F2240;
void FActor::SetReplicateMovement(bool bInReplicateMovement);


// Function  Engine.Actor.SetReplicates
// Offset::0x62F22E0;
void FActor::SetReplicates(bool bInReplicates);


// Function  Engine.Actor.SetTickableWhenPaused
// Offset::0x62ED700;
void FActor::SetTickableWhenPaused(bool bTickableWhenPaused);


// Function  Engine.Actor.SetTickGroup
// Offset::0x62ECA80;
void FActor::SetTickGroup(enum class ETickingGroup NewTickGroup);


// Function  Engine.Actor.TearOff
// Offset::0x179DDF0;
void FActor::TearOff();


// Function  Engine.Actor.UserConstructionScript
// Offset::0x3D30810;
void FActor::UserConstructionScript();


// Function  Engine.Actor.WasRecentlyRendered
// Offset::0x62EC9E0;
bool FActor::WasRecentlyRendered(float Tolerance);


// Function  Engine.Controller.ClientSetLocation
// Offset::0x6370A80;
void FController::ClientSetLocation(FVector NewLocation,FRotator NewRotation);


// Function  Engine.Controller.ClientSetRotation
// Offset::0x6370940;
void FController::ClientSetRotation(FRotator NewRotation,bool bResetCamera);


// Function  Engine.Controller.GetControlRotation
// Offset::0x6370F30;
FRotator FController::GetControlRotation();


// Function  Engine.Controller.GetDesiredRotation
// Offset::0x6370880;
FRotator FController::GetDesiredRotation();


// Function  Engine.Controller.GetPlayerViewPoint
// Offset::0x6370610;
void FController::GetPlayerViewPoint(FVector Location,FRotator Rotation);


// Function  Engine.Controller.GetViewTarget
// Offset::0x63708E0;
FActor* FController::GetViewTarget();


// Function  Engine.Controller.IsLocalController
// Offset::0x63707C0;
bool FController::IsLocalController();


// Function  Engine.Controller.IsLocalPlayerController
// Offset::0x63707F0;
bool FController::IsLocalPlayerController();


// Function  Engine.Controller.IsLookInputIgnored
// Offset::0x6370430;
bool FController::IsLookInputIgnored();


// Function  Engine.Controller.IsMoveInputIgnored
// Offset::0x6370520;
bool FController::IsMoveInputIgnored();


// Function  Engine.Controller.IsPlayerController
// Offset::0x6370850;
bool FController::IsPlayerController();


// Function  Engine.Controller.K2_GetPawn
// Offset::0x6370910;
FPawn* FController::K2_GetPawn();


// Function  Engine.Controller.LineOfSightTo
// Offset::0x6370C50;
bool FController::LineOfSightTo(FActor* Other,FVector ViewPoint,bool bAlternateChecks);


// Function  Engine.Controller.OnRep_Pawn
// Offset::0x6370C30;
void FController::OnRep_Pawn();


// Function  Engine.Controller.OnRep_PlayerState
// Offset::0x6370C10;
void FController::OnRep_PlayerState();


// Function  Engine.Controller.Possess
// Offset::0x6370720;
void FController::Possess(FPawn* InPawn);


// Function  Engine.Controller.ReceiveInstigatedAnyDamage
// Offset::0x3D30810;
void FController::ReceiveInstigatedAnyDamage(float Damage,FDamageType* DamageType,FActor* DamagedActor,FActor* DamageCauser);


// Function  Engine.Controller.ReceivePossess
// Offset::0x3D30810;
void FController::ReceivePossess(FPawn* PossessedPawn);


// Function  Engine.Controller.ReceiveUnPossess
// Offset::0x3D30810;
void FController::ReceiveUnPossess(FPawn* UnpossessedPawn);


// Function  Engine.Controller.ResetIgnoreInputFlags
// Offset::0x6370410;
void FController::ResetIgnoreInputFlags();


// Function  Engine.Controller.ResetIgnoreLookInput
// Offset::0x6370460;
void FController::ResetIgnoreLookInput();


// Function  Engine.Controller.ResetIgnoreMoveInput
// Offset::0x6370550;
void FController::ResetIgnoreMoveInput();


// Function  Engine.Controller.SetControlRotation
// Offset::0x6370E90;
void FController::SetControlRotation(FRotator NewRotation);


// Function  Engine.Controller.SetIgnoreLookInput
// Offset::0x6370480;
void FController::SetIgnoreLookInput(bool bNewLookInput);


// Function  Engine.Controller.SetIgnoreMoveInput
// Offset::0x6370570;
void FController::SetIgnoreMoveInput(bool bNewMoveInput);


// Function  Engine.Controller.SetInitialLocationAndRotation
// Offset::0x6370DA0;
void FController::SetInitialLocationAndRotation(FVector NewLocation,FRotator NewRotation);


// Function  Engine.Controller.StopMovement
// Offset::0x1B805F0;
void FController::StopMovement();


// Function  Engine.Controller.UnPossess
// Offset::0x6370700;
void FController::UnPossess();


// Function  AIModule.EnvQueryInstanceBlueprintWrapper.GetItemScore
// Offset::0x69912A0;
float FEnvQueryInstanceBlueprintWrapper::GetItemScore(int32_t ItemIndex);


// Function  AIModule.EnvQueryInstanceBlueprintWrapper.GetQueryResultsAsActors
// Offset::0x69911E0;
bool FEnvQueryInstanceBlueprintWrapper::GetQueryResultsAsActors(TArray<FActor*> ResultActors);


// Function  AIModule.EnvQueryInstanceBlueprintWrapper.GetQueryResultsAsLocations
// Offset::0x6991120;
bool FEnvQueryInstanceBlueprintWrapper::GetQueryResultsAsLocations(TArray<FVector> ResultLocations);


// Function  AIModule.EnvQueryInstanceBlueprintWrapper.GetResultsAsActors
// Offset::0x69910A0;
TArray<FActor*> FEnvQueryInstanceBlueprintWrapper::GetResultsAsActors();


// Function  AIModule.EnvQueryInstanceBlueprintWrapper.GetResultsAsLocations
// Offset::0x6991020;
TArray<FVector> FEnvQueryInstanceBlueprintWrapper::GetResultsAsLocations();


// Function  AIModule.EnvQueryInstanceBlueprintWrapper.SetNamedParam
// Offset::0x6990F40;
void FEnvQueryInstanceBlueprintWrapper::SetNamedParam(FName ParamName,float Value);


// Function  AIModule.PawnSensingComponent.GetPeripheralVisionAngle
// Offset::0x699A950;
float FPawnSensingComponent::GetPeripheralVisionAngle();


// Function  AIModule.PawnSensingComponent.GetPeripheralVisionCosine
// Offset::0x699A920;
float FPawnSensingComponent::GetPeripheralVisionCosine();


// Function  AIModule.PawnSensingComponent.SetPeripheralVisionAngle
// Offset::0x699A980;
void FPawnSensingComponent::SetPeripheralVisionAngle(float NewPeripheralVisionAngle);


// Function  AIModule.PawnSensingComponent.SetSensingInterval
// Offset::0x25DD4B0;
void FPawnSensingComponent::SetSensingInterval(float NewSensingInterval);


// Function  AIModule.PawnSensingComponent.SetSensingUpdatesEnabled
// Offset::0x699AA20;
void FPawnSensingComponent::SetSensingUpdatesEnabled(bool bEnabled);


// Function  AIModule.AIController.ClaimTaskResource
// Offset::0x6971DD0;
void FAIController::ClaimTaskResource(FGameplayTaskResource* ResourceClass);


// Function  AIModule.AIController.GetAIPerceptionComponent
// Offset::0x6971960;
FAIPerceptionComponent* FAIController::GetAIPerceptionComponent();


// Function  AIModule.AIController.GetFocalPoint
// Offset::0x6971CD0;
FVector FAIController::GetFocalPoint();


// Function  AIModule.AIController.GetFocalPointOnActor
// Offset::0x6971C10;
FVector FAIController::GetFocalPointOnActor(FActor* Actor);


// Function  AIModule.AIController.GetFocusActor
// Offset::0x6971AA0;
FActor* FAIController::GetFocusActor();


// Function  AIModule.AIController.GetImmediateMoveDestination
// Offset::0x69720B0;
FVector FAIController::GetImmediateMoveDestination();


// Function  AIModule.AIController.GetMoveStatus
// Offset::0x6972140;
enum class EPathFollowingStatus FAIController::GetMoveStatus();


// Function  AIModule.AIController.GetPathFollowingComponent
// Offset::0x5404B90;
FPathFollowingComponent* FAIController::GetPathFollowingComponent();


// Function  AIModule.AIController.HasPartialPath
// Offset::0x6972110;
bool FAIController::HasPartialPath();


// Function  AIModule.AIController.K2_ClearFocus
// Offset::0x6971A80;
void FAIController::K2_ClearFocus();


// Function  AIModule.AIController.K2_SetFocalPoint
// Offset::0x6971B70;
void FAIController::K2_SetFocalPoint(FVector FP);


// Function  AIModule.AIController.K2_SetFocus
// Offset::0x6971AD0;
void FAIController::K2_SetFocus(FActor* NewFocus);


// Function  AIModule.AIController.MoveToActor
// Offset::0x6972470;
enum class EPathFollowingRequestResult FAIController::MoveToActor(FActor* Goal,float AcceptanceRadius,bool bStopOnOverlap,bool bUsePathfinding,bool bCanStrafe,FNavigationQueryFilter* FilterClass,bool bAllowPartialPath);


// Function  AIModule.AIController.MoveToLocation
// Offset::0x6972170;
enum class EPathFollowingRequestResult FAIController::MoveToLocation(FVector Dest,float AcceptanceRadius,bool bStopOnOverlap,bool bUsePathfinding,bool bProjectDestinationToNavigation,bool bCanStrafe,FNavigationQueryFilter* FilterClass,bool bAllowPartialPath);


// Function  AIModule.AIController.OnGameplayTaskResourcesClaimed
// Offset::0x6971990;
void FAIController::OnGameplayTaskResourcesClaimed(FGameplayResourceSet NewlyClaimed,FGameplayResourceSet FreshlyReleased);


// Function  AIModule.AIController.OnUsingBlackBoard
// Offset::0x3D30810;
void FAIController::OnUsingBlackBoard(FBlackboardComponent* BlackboardComp,FBlackboardData* BlackboardAsset);


// Function  AIModule.AIController.RunBehaviorTree
// Offset::0x6971F70;
bool FAIController::RunBehaviorTree(FBehaviorTree* BTAsset);


// Function  AIModule.AIController.SetMoveBlockDetection
// Offset::0x6972010;
void FAIController::SetMoveBlockDetection(bool bEnable);


// Function  AIModule.AIController.SetPathFollowingComponent
// Offset::0x69718C0;
void FAIController::SetPathFollowingComponent(FPathFollowingComponent* NewPFComponent);


// Function  AIModule.AIController.UnclaimTaskResource
// Offset::0x6971D30;
void FAIController::UnclaimTaskResource(FGameplayTaskResource* ResourceClass);


// Function  AIModule.AIController.UseBlackboard
// Offset::0x6971E70;
bool FAIController::UseBlackboard(FBlackboardData* BlackboardAsset,FBlackboardComponent* BlackboardComponent);


// Function  EmbarkAI.EmbarkAIController.AddPerceptionComponent
// Offset::0x20E9E40;
int32_t FEmbarkAIController::AddPerceptionComponent(FSceneComponent* OwningComponent,TArray<FAISenseConfig*> SenseConfigs);


// Function  EmbarkAI.EmbarkAIController.BP_GetTeam
// Offset::0x20EA7F0;
enum class EEmbarkTeamId FEmbarkAIController::BP_GetTeam();


// Function  EmbarkAI.EmbarkAIController.BP_SetTeam
// Offset::0x20EA820;
void FEmbarkAIController::BP_SetTeam(enum class EEmbarkTeamId NewTeam);


// Function  EmbarkAI.EmbarkAIController.ConfigureSense
// Offset::0x20EA5C0;
void FEmbarkAIController::ConfigureSense(FAIPerceptionComponent* InPerceptionComponent,FAISenseConfig* SenseConfig);


// Function  EmbarkAI.EmbarkAIController.ForgetActor
// Offset::0x20EA730;
void FEmbarkAIController::ForgetActor(FActor* ActorToForget);


// Function  EmbarkAI.EmbarkAIController.ForgetEverything
// Offset::0x20EA7D0;
void FEmbarkAIController::ForgetEverything();


// Function  EmbarkAI.EmbarkAIController.GetPerceptionComponents
// Offset::0x20E9F50;
void FEmbarkAIController::GetPerceptionComponents(TArray<FAIPerceptionComponent*> OutPerceptionComponents);


// Function  EmbarkAI.EmbarkAIController.GetPerceptionDamageConfig
// Offset::0x20EA0A0;
FAISenseConfig_Damage* FEmbarkAIController::GetPerceptionDamageConfig(FAIPerceptionComponent* InPerceptionComponent);


// Function  EmbarkAI.EmbarkAIController.GetPerceptionHearingConfig
// Offset::0x20EA140;
FEmbarkAISenseConfig_Hearing* FEmbarkAIController::GetPerceptionHearingConfig(FAIPerceptionComponent* InPerceptionComponent);


// Function  EmbarkAI.EmbarkAIController.GetPerceptionNetworkConfig
// Offset::0x20EA000;
FEmbarkAISenseConfig_Network* FEmbarkAIController::GetPerceptionNetworkConfig(FAIPerceptionComponent* InPerceptionComponent);


// Function  EmbarkAI.EmbarkAIController.GetPerceptionSightConfig
// Offset::0x20EA1E0;
FEmbarkAISenseConfig_Sight* FEmbarkAIController::GetPerceptionSightConfig(FAIPerceptionComponent* InPerceptionComponent);


// Function  EmbarkAI.EmbarkAIController.MakeAIForgetActor
// Offset::0x20EA6A0;
void FEmbarkAIController::MakeAIForgetActor(FActor* ActorToForget);


// Function  EmbarkAI.EmbarkAIController.OnActorPerceptionUpdated
// Offset::0x20EA280;
void FEmbarkAIController::OnActorPerceptionUpdated(FActor* Actor,FAIStimulus Stimulus);


// Function  EmbarkAI.EmbarkAIController.ReceivePostInitializeComponents
// Offset::0x3D30810;
void FEmbarkAIController::ReceivePostInitializeComponents();


// Function  EmbarkAI.EmbarkAIController.ReceiveRegisterAIData
// Offset::0x3D30810;
void FEmbarkAIController::ReceiveRegisterAIData(FEmbarkAITemplateDataAsset* DataAsset);


// Function  EmbarkAI.EmbarkAIController.RegisterAIData
// Offset::0x20EA520;
void FEmbarkAIController::RegisterAIData(FEmbarkAITemplateDataAsset* DataAsset);


// Function  EmbarkAI.EmbarkAIController.RemovePerceptionComponent
// Offset::0x20E9DA0;
void FEmbarkAIController::RemovePerceptionComponent(FSceneComponent* OwningComponent);


// Function  EmbarkAI.EmbarkAIController.RemovePerceptionComponentByIndex
// Offset::0x20E9D00;
void FEmbarkAIController::RemovePerceptionComponentByIndex(int32_t PerceptionComponentIdx);


// Function  Engine.GameStateBase.GetPlayerRespawnDelay
// Offset::0x63B1480;
float FGameStateBase::GetPlayerRespawnDelay(FController* Controller);


// Function  Engine.GameStateBase.GetPlayerStartTime
// Offset::0x63B1530;
float FGameStateBase::GetPlayerStartTime(FController* Controller);


// Function  Engine.GameStateBase.GetServerWorldTimeSeconds
// Offset::0x63B1640;
float FGameStateBase::GetServerWorldTimeSeconds();


// Function  Engine.GameStateBase.HasBegunPlay
// Offset::0x63B1610;
bool FGameStateBase::HasBegunPlay();


// Function  Engine.GameStateBase.HasMatchEnded
// Offset::0x63B15E0;
bool FGameStateBase::HasMatchEnded();


// Function  Engine.GameStateBase.HasMatchStarted
// Offset::0x2D4DA10;
bool FGameStateBase::HasMatchStarted();


// Function  Engine.GameStateBase.OnRep_GameModeClass
// Offset::0x6370C30;
void FGameStateBase::OnRep_GameModeClass();


// Function  Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
// Offset::0x29C4350;
void FGameStateBase::OnRep_ReplicatedHasBegunPlay();


// Function  Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
// Offset::0x1B80CF0;
void FGameStateBase::OnRep_ReplicatedWorldTimeSeconds();


// Function  Engine.GameStateBase.OnRep_SpectatorClass
// Offset::0x6370C10;
void FGameStateBase::OnRep_SpectatorClass();


// Function  Engine.GameState.OnRep_ElapsedTime
// Offset::0x6397A00;
void FGameState::OnRep_ElapsedTime();


// Function  Engine.GameState.OnRep_MatchState
// Offset::0x63B0F00;
void FGameState::OnRep_MatchState();


// Function  EmbarkGameplay.EmbarkGameStateBase.GetRealtimeServerWorldTimeSeconds
// Offset::0x21EE5E0;
float FEmbarkGameStateBase::GetRealtimeServerWorldTimeSeconds();


// Function  EmbarkGameplay.EmbarkGameStateBase.OnMod_Squads
// Offset::0x21EE580;
void FEmbarkGameStateBase::OnMod_Squads();


// Function  EmbarkGameplay.EmbarkGameStateBase.OnOnlineTweakablesRegistered
// Offset::0x21EE480;
void FEmbarkGameStateBase::OnOnlineTweakablesRegistered(FOnlineTweakablesContainer InOnlineTweakablesContainer);


// Function  EmbarkGameplay.EmbarkGameStateBase.OnRep_MatchesId
// Offset::0x21EE440;
void FEmbarkGameStateBase::OnRep_MatchesId();


// Function  EmbarkGameplay.EmbarkGameStateBase.OnRep_OnlineTweakablesContainer
// Offset::0x21EE460;
void FEmbarkGameStateBase::OnRep_OnlineTweakablesContainer();


// Function  EmbarkGameplay.EmbarkGameStateBase.OnRep_ReplicatedRealtimeWorldTimeSeconds
// Offset::0x21EE5C0;
void FEmbarkGameStateBase::OnRep_ReplicatedRealtimeWorldTimeSeconds();


// Function  EmbarkGameplay.EmbarkGameStateBase.OnRep_Squads
// Offset::0x21EE5A0;
void FEmbarkGameStateBase::OnRep_Squads();


// Function  Engine.PlayerController.ActivateTouchInterface
// Offset::0x64C4700;
void FPlayerController::ActivateTouchInterface(FTouchInterface* NewTouchInterface);


// Function  Engine.PlayerController.AddPitchInput
// Offset::0x64C5550;
void FPlayerController::AddPitchInput(float Val);


// Function  Engine.PlayerController.AddRollInput
// Offset::0x64C5410;
void FPlayerController::AddRollInput(float Val);


// Function  Engine.PlayerController.AddYawInput
// Offset::0x64C54B0;
void FPlayerController::AddYawInput(float Val);


// Function  Engine.PlayerController.Camera
// Offset::0x64C45C0;
void FPlayerController::Camera(FName NewMode);


// Function  Engine.PlayerController.CanRestartPlayer
// Offset::0x64C4120;
bool FPlayerController::CanRestartPlayer();


// Function  Engine.PlayerController.ClearAudioListenerAttenuationOverride
// Offset::0x64C4150;
void FPlayerController::ClearAudioListenerAttenuationOverride();


// Function  Engine.PlayerController.ClearAudioListenerOverride
// Offset::0x64C4260;
void FPlayerController::ClearAudioListenerOverride();


// Function  Engine.PlayerController.ClientAddTextureStreamingLoc
// Offset::0x64C9800;
void FPlayerController::ClientAddTextureStreamingLoc(FVector InLoc,float Duration,bool bOverrideLocation);


// Function  Engine.PlayerController.ClientCancelPendingMapChange
// Offset::0x64C97E0;
void FPlayerController::ClientCancelPendingMapChange();


// Function  Engine.PlayerController.ClientCapBandwidth
// Offset::0x64C9740;
void FPlayerController::ClientCapBandwidth(int32_t Cap);


// Function  Engine.PlayerController.ClientClearCameraLensEffects
// Offset::0x5748070;
void FPlayerController::ClientClearCameraLensEffects();


// Function  Engine.PlayerController.ClientCommitMapChange
// Offset::0x64C9720;
void FPlayerController::ClientCommitMapChange();


// Function  Engine.PlayerController.ClientEnableNetworkVoice
// Offset::0x64CA5D0;
void FPlayerController::ClientEnableNetworkVoice(bool bEnable);


// Function  Engine.PlayerController.ClientEndOnlineSession
// Offset::0x64C6480;
void FPlayerController::ClientEndOnlineSession();


// Function  Engine.PlayerController.ClientFlushLevelStreaming
// Offset::0x64C9700;
void FPlayerController::ClientFlushLevelStreaming();


// Function  Engine.PlayerController.ClientForceGarbageCollection
// Offset::0x64C96E0;
void FPlayerController::ClientForceGarbageCollection();


// Function  Engine.PlayerController.ClientGameEnded
// Offset::0x64C95F0;
void FPlayerController::ClientGameEnded(FActor* EndGameFocus,bool bIsWinner);


// Function  Engine.PlayerController.ClientGotoState
// Offset::0x64C9550;
void FPlayerController::ClientGotoState(FName NewState);


// Function  Engine.PlayerController.ClientIgnoreLookInput
// Offset::0x64C94B0;
void FPlayerController::ClientIgnoreLookInput(bool bIgnore);


// Function  Engine.PlayerController.ClientIgnoreMoveInput
// Offset::0x64C9410;
void FPlayerController::ClientIgnoreMoveInput(bool bIgnore);


// Function  Engine.PlayerController.ClientMessage
// Offset::0x64C92D0;
void FPlayerController::ClientMessage(FString S,FName Type,float MsgLifeTime);


// Function  Engine.PlayerController.ClientMutePlayer
// Offset::0x64CA080;
void FPlayerController::ClientMutePlayer(FUniqueNetIdRepl PlayerId);


// Function  Engine.PlayerController.ClientPlayCameraAnim
// Offset::0x64C8F30;
void FPlayerController::ClientPlayCameraAnim(FCameraAnim* AnimToPlay,float Scale,float Rate,float BlendInTime,float BlendOutTime,bool bLoop,bool bRandomStartTime,enum class ECameraShakePlaySpace Space,FRotator CustomPlaySpace);


// Function  Engine.PlayerController.ClientPlayForceFeedback_Internal
// Offset::0x64C7660;
void FPlayerController::ClientPlayForceFeedback_Internal(FForceFeedbackEffect* ForceFeedbackEffect,FForceFeedbackParameters Params);


// Function  Engine.PlayerController.ClientPlaySound
// Offset::0x64C8B90;
void FPlayerController::ClientPlaySound(FSoundBase* Sound,float VolumeMultiplier,float PitchMultiplier);


// Function  Engine.PlayerController.ClientPlaySoundAtLocation
// Offset::0x64C8A00;
void FPlayerController::ClientPlaySoundAtLocation(FSoundBase* Sound,FVector Location,float VolumeMultiplier,float PitchMultiplier);


// Function  Engine.PlayerController.ClientPrepareMapChange
// Offset::0x64C88C0;
void FPlayerController::ClientPrepareMapChange(FName LevelName,bool bFirst,bool bLast);


// Function  Engine.PlayerController.ClientPrestreamTextures
// Offset::0x64C8730;
void FPlayerController::ClientPrestreamTextures(FActor* ForcedActor,float ForceDuration,bool bEnableStreaming,int32_t CinematicTextureGroups);


// Function  Engine.PlayerController.ClientReceiveLocalizedMessage
// Offset::0x64C62A0;
void FPlayerController::ClientReceiveLocalizedMessage(FLocalMessage* Message,int32_t SWITCH,FPlayerState* RelatedPlayerState,FPlayerState* RelatedPlayerState,FObject* OptionalObject);


// Function  Engine.PlayerController.ClientRecvServerAckFrame
// Offset::0x64C3BE0;
void FPlayerController::ClientRecvServerAckFrame(int32_t LastProcessedInputFrame,int32_t RecvServerFrameNumber,int8_t TimeDilation);


// Function  Engine.PlayerController.ClientRecvServerAckFrameDebug
// Offset::0x64C3B00;
void FPlayerController::ClientRecvServerAckFrameDebug(char NumBuffered,float TargetNumBufferedCmds);


// Function  Engine.PlayerController.ClientRepObjRef
// Offset::0x64CBC70;
void FPlayerController::ClientRepObjRef(FObject* Object);


// Function  Engine.PlayerController.ClientReset
// Offset::0x64C8710;
void FPlayerController::ClientReset();


// Function  Engine.PlayerController.ClientRestart
// Offset::0x64C8670;
void FPlayerController::ClientRestart(FPawn* NewPawn);


// Function  Engine.PlayerController.ClientRetryClientRestart
// Offset::0x260F2C0;
void FPlayerController::ClientRetryClientRestart(FPawn* NewPawn);


// Function  Engine.PlayerController.ClientReturnToMainMenu
// Offset::0x64CBDE0;
void FPlayerController::ClientReturnToMainMenu(FString ReturnReason);


// Function  Engine.PlayerController.ClientReturnToMainMenuWithTextReason
// Offset::0x64CBD10;
void FPlayerController::ClientReturnToMainMenuWithTextReason(FText ReturnReason);


// Function  Engine.PlayerController.ClientSetBlockOnAsyncLoading
// Offset::0x64C8650;
void FPlayerController::ClientSetBlockOnAsyncLoading();


// Function  Engine.PlayerController.ClientSetCameraFade
// Offset::0x64C8420;
void FPlayerController::ClientSetCameraFade(bool bEnableFading,FColor FadeColor,FVector2D FadeAlpha,float FadeTime,bool bFadeAudio,bool bHoldWhenFinished);


// Function  Engine.PlayerController.ClientSetCameraMode
// Offset::0x64C8380;
void FPlayerController::ClientSetCameraMode(FName NewCamMode);


// Function  Engine.PlayerController.ClientSetCinematicMode
// Offset::0x64C81E0;
void FPlayerController::ClientSetCinematicMode(bool bInCinematicMode,bool bAffectsMovement,bool bAffectsTurning,bool bAffectsHUD);


// Function  Engine.PlayerController.ClientSetForceMipLevelsToBeResident
// Offset::0x64C80B0;
void FPlayerController::ClientSetForceMipLevelsToBeResident(FMaterialInterface* Material,float ForceDuration,int32_t CinematicTextureGroups);


// Function  Engine.PlayerController.ClientSetHUD
// Offset::0x64C8010;
void FPlayerController::ClientSetHUD(FHUD* NewHUDClass);


// Function  Engine.PlayerController.ClientSetSpectatorWaiting
// Offset::0x64CC360;
void FPlayerController::ClientSetSpectatorWaiting(bool bWaiting);


// Function  Engine.PlayerController.ClientSetViewTarget
// Offset::0x64C7D00;
void FPlayerController::ClientSetViewTarget(FActor* A,FViewTargetTransitionParams TransitionParams);


// Function  Engine.PlayerController.ClientSpawnCameraLensEffect
// Offset::0x64C7BC0;
void FPlayerController::ClientSpawnCameraLensEffect(FEmitterCameraLensEffectBase* LensEffectEmitterClass);


// Function  Engine.PlayerController.ClientSpawnGenericCameraLensEffect
// Offset::0x64C7C60;
void FPlayerController::ClientSpawnGenericCameraLensEffect(FActor* LensEffectEmitterClass);


// Function  Engine.PlayerController.ClientStartCameraShake
// Offset::0x64C8DA0;
void FPlayerController::ClientStartCameraShake(FCameraShakeBase* Shake,float Scale,enum class ECameraShakePlaySpace PlaySpace,FRotator UserPlaySpaceRot);


// Function  Engine.PlayerController.ClientStartCameraShakeFromSource
// Offset::0x64C8CC0;
void FPlayerController::ClientStartCameraShakeFromSource(FCameraShakeBase* Shake,FCameraShakeSourceComponent* SourceComponent);


// Function  Engine.PlayerController.ClientStartOnlineSession
// Offset::0x64C64A0;
void FPlayerController::ClientStartOnlineSession();


// Function  Engine.PlayerController.ClientStopCameraAnim
// Offset::0x64C7B20;
void FPlayerController::ClientStopCameraAnim(FCameraAnim* AnimToStop);


// Function  Engine.PlayerController.ClientStopCameraShake
// Offset::0x64C7A30;
void FPlayerController::ClientStopCameraShake(FCameraShakeBase* Shake,bool bImmediately);


// Function  Engine.PlayerController.ClientStopCameraShakesFromSource
// Offset::0x64C7940;
void FPlayerController::ClientStopCameraShakesFromSource(FCameraShakeSourceComponent* SourceComponent,bool bImmediately);


// Function  Engine.PlayerController.ClientStopForceFeedback
// Offset::0x64C7570;
void FPlayerController::ClientStopForceFeedback(FForceFeedbackEffect* ForceFeedbackEffect,FName Tag);


// Function  Engine.PlayerController.ClientTeamMessage
// Offset::0x64C5640;
void FPlayerController::ClientTeamMessage(FPlayerState* SenderPlayerState,FString S,FName Type,float MsgLifeTime);


// Function  Engine.PlayerController.ClientTravel
// Offset::0x64C6B10;
void FPlayerController::ClientTravel(FString URL,enum class ETravelType TravelType,bool bSeamless,FGuid MapPackageGuid);


// Function  Engine.PlayerController.ClientTravelInternal
// Offset::0x64C6960;
void FPlayerController::ClientTravelInternal(FString URL,enum class ETravelType TravelType,bool bSeamless,FGuid MapPackageGuid);


// Function  Engine.PlayerController.ClientUnmutePlayer
// Offset::0x64C9F50;
void FPlayerController::ClientUnmutePlayer(FUniqueNetIdRepl PlayerId);


// Function  Engine.PlayerController.ClientUnmutePlayers
// Offset::0x64C9AE0;
void FPlayerController::ClientUnmutePlayers(TArray<FUniqueNetIdRepl> PlayerIds);


// Function  Engine.PlayerController.ClientUpdateLevelStreamingStatus
// Offset::0x64C6640;
void FPlayerController::ClientUpdateLevelStreamingStatus(FName PackageName,bool bNewShouldBeLoaded,bool bNewShouldBeVisible,bool bNewShouldBlockOnLoad,bool bNewShouldBlockOnUnload,int32_t LODIndex,FTransform LevelTransform);


// Function  Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
// Offset::0x64C6590;
void FPlayerController::ClientUpdateMultipleLevelsStreamingStatus(TArray<FUpdateLevelStreamingLevelStatus> LevelStatuses);


// Function  Engine.PlayerController.ClientVoiceHandshakeComplete
// Offset::0x64CA510;
void FPlayerController::ClientVoiceHandshakeComplete();


// Function  Engine.PlayerController.ClientWasKicked
// Offset::0x64C64C0;
void FPlayerController::ClientWasKicked(FText KickReason);


// Function  Engine.PlayerController.ConsoleKey
// Offset::0x64C99F0;
void FPlayerController::ConsoleKey(FKey Key);


// Function  Engine.PlayerController.DeprojectMousePositionToWorld
// Offset::0x64CAB70;
bool FPlayerController::DeprojectMousePositionToWorld(FVector WorldLocation,FVector WorldDirection);


// Function  Engine.PlayerController.DeprojectScreenPositionToWorld
// Offset::0x64CA9D0;
bool FPlayerController::DeprojectScreenPositionToWorld(float ScreenX,float ScreenY,FVector WorldLocation,FVector WorldDirection);


// Function  Engine.PlayerController.EnableCheats
// Offset::0x64CC0D0;
void FPlayerController::EnableCheats();


// Function  Engine.PlayerController.FOV
// Offset::0x64CC030;
void FPlayerController::FOV(float NewFOV);


// Function  Engine.PlayerController.GetDeprecatedInputPitchScale
// Offset::0x64CC300;
float FPlayerController::GetDeprecatedInputPitchScale();


// Function  Engine.PlayerController.GetDeprecatedInputRollScale
// Offset::0x64CC2D0;
float FPlayerController::GetDeprecatedInputRollScale();


// Function  Engine.PlayerController.GetDeprecatedInputYawScale
// Offset::0x64CC330;
float FPlayerController::GetDeprecatedInputYawScale();


// Function  Engine.PlayerController.GetFocalLocation
// Offset::0x64C3E00;
FVector FPlayerController::GetFocalLocation();


// Function  Engine.PlayerController.GetHitResultUnderCursor
// Offset::0x64CB8C0;
bool FPlayerController::GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel,bool bTraceComplex,FHitResult HitResult);


// Function  Engine.PlayerController.GetHitResultUnderCursorByChannel
// Offset::0x64CB690;
bool FPlayerController::GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,FHitResult HitResult);


// Function  Engine.PlayerController.GetHitResultUnderCursorForObjects
// Offset::0x64CB440;
bool FPlayerController::GetHitResultUnderCursorForObjects(TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,FHitResult HitResult);


// Function  Engine.PlayerController.GetHitResultUnderFinger
// Offset::0x64CB1B0;
bool FPlayerController::GetHitResultUnderFinger(enum class ETouchIndex FingerIndex,enum class ECollisionChannel TraceChannel,bool bTraceComplex,FHitResult HitResult);


// Function  Engine.PlayerController.GetHitResultUnderFingerByChannel
// Offset::0x64CAF20;
bool FPlayerController::GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,FHitResult HitResult);


// Function  Engine.PlayerController.GetHitResultUnderFingerForObjects
// Offset::0x64CAC70;
bool FPlayerController::GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex,TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,FHitResult HitResult);


// Function  Engine.PlayerController.GetHUD
// Offset::0x64C7EE0;
FHUD* FPlayerController::GetHUD();


// Function  Engine.PlayerController.GetInputAnalogKeyState
// Offset::0x64C5050;
float FPlayerController::GetInputAnalogKeyState(FKey Key);


// Function  Engine.PlayerController.GetInputAnalogStickState
// Offset::0x64C47A0;
void FPlayerController::GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick,float StickX,float StickY);


// Function  Engine.PlayerController.GetInputKeyTimeDown
// Offset::0x64C49F0;
float FPlayerController::GetInputKeyTimeDown(FKey Key);


// Function  Engine.PlayerController.GetInputMotionState
// Offset::0x64C4BF0;
void FPlayerController::GetInputMotionState(FVector Tilt,FVector RotationRate,FVector Gravity,FVector Acceleration);


// Function  Engine.PlayerController.GetInputMouseDelta
// Offset::0x64C48F0;
void FPlayerController::GetInputMouseDelta(float DeltaX,float DeltaY);


// Function  Engine.PlayerController.GetInputTouchState
// Offset::0x64C4DA0;
void FPlayerController::GetInputTouchState(enum class ETouchIndex FingerIndex,float LocationX,float LocationY,bool bIsCurrentlyPressed);


// Function  Engine.PlayerController.GetInputVectorKeyState
// Offset::0x64C4F50;
FVector FPlayerController::GetInputVectorKeyState(FKey Key);


// Function  Engine.PlayerController.GetMousePosition
// Offset::0x64C4AE0;
bool FPlayerController::GetMousePosition(float LocationX,float LocationY);


// Function  Engine.PlayerController.GetSpectatorPawn
// Offset::0x64C3E60;
FSpectatorPawn* FPlayerController::GetSpectatorPawn();


// Function  Engine.PlayerController.GetViewportSize
// Offset::0x64C7F10;
void FPlayerController::GetViewportSize(int32_t SizeX,int32_t SizeY);


// Function  Engine.PlayerController.IsInputKeyDown
// Offset::0x64C5320;
bool FPlayerController::IsInputKeyDown(FKey Key);


// Function  Engine.PlayerController.IsStreamingSourceEnabled
// Offset::0x64CA770;
bool FPlayerController::IsStreamingSourceEnabled();


// Function  Engine.PlayerController.K2_ClientPlayForceFeedback
// Offset::0x64C7760;
void FPlayerController::K2_ClientPlayForceFeedback(FForceFeedbackEffect* ForceFeedbackEffect,FName Tag,bool bLooping,bool bIgnoreTimeDilation,bool bPlayWhilePaused);


// Function  Engine.PlayerController.LocalTravel
// Offset::0x64CBF60;
void FPlayerController::LocalTravel(FString URL);


// Function  Engine.PlayerController.OnServerStartedVisualLogger
// Offset::0x64C3E90;
void FPlayerController::OnServerStartedVisualLogger(bool bIsLogging);


// Function  Engine.PlayerController.Pause
// Offset::0x64CBC50;
void FPlayerController::Pause();


// Function  Engine.PlayerController.PlayDynamicForceFeedback
// Offset::0x64C7220;
void FPlayerController::PlayDynamicForceFeedback(float Intensity,float Duration,bool bAffectsLeftLarge,bool bAffectsLeftSmall,bool bAffectsRightLarge,bool bAffectsRightSmall,enum class EDynamicForceFeedbackAction Action,FLatentActionInfo LatentInfo);


// Function  Engine.PlayerController.PlayHapticEffect
// Offset::0x64C6FC0;
void FPlayerController::PlayHapticEffect(FHapticFeedbackEffect_Base* HapticEffect,enum class EControllerHand Hand,float Scale,bool bLoop);


// Function  Engine.PlayerController.ProjectWorldLocationToScreen
// Offset::0x64CA880;
bool FPlayerController::ProjectWorldLocationToScreen(FVector WorldLocation,FVector2D ScreenLocation,bool bPlayerViewportRelative);


// Function  Engine.PlayerController.ResetControllerLightColor
// Offset::0x64C6CB0;
void FPlayerController::ResetControllerLightColor();


// Function  Engine.PlayerController.RestartLevel
// Offset::0x64CC010;
void FPlayerController::RestartLevel();


// Function  Engine.PlayerController.SendToConsole
// Offset::0x64C9940;
void FPlayerController::SendToConsole(FString Command);


// Function  Engine.PlayerController.ServerAcknowledgePossession
// Offset::0x64C61E0;
void FPlayerController::ServerAcknowledgePossession(FPawn* P);


// Function  Engine.PlayerController.ServerBlockPlayer
// Offset::0x64C9DA0;
void FPlayerController::ServerBlockPlayer(FUniqueNetIdRepl PlayerId);


// Function  Engine.PlayerController.ServerCamera
// Offset::0x64C6120;
void FPlayerController::ServerCamera(FName NewMode);


// Function  Engine.PlayerController.ServerChangeName
// Offset::0x64C6050;
void FPlayerController::ServerChangeName(FString S);


// Function  Engine.PlayerController.ServerCheckClientPossession
// Offset::0x64C5D10;
void FPlayerController::ServerCheckClientPossession();


// Function  Engine.PlayerController.ServerCheckClientPossessionReliable
// Offset::0x64C5CC0;
void FPlayerController::ServerCheckClientPossessionReliable();


// Function  Engine.PlayerController.ServerExec
// Offset::0x2344A30;
void FPlayerController::ServerExec(FString Msg);


// Function  Engine.PlayerController.ServerExecRPC
// Offset::0x64CBE90;
void FPlayerController::ServerExecRPC(FString Msg);


// Function  Engine.PlayerController.ServerMutePlayer
// Offset::0x64CA360;
void FPlayerController::ServerMutePlayer(FUniqueNetIdRepl PlayerId);


// Function  Engine.PlayerController.ServerNotifyLoadedWorld
// Offset::0x64C5F90;
void FPlayerController::ServerNotifyLoadedWorld(FName WorldPackageName);


// Function  Engine.PlayerController.ServerPause
// Offset::0x64C5F40;
void FPlayerController::ServerPause();


// Function  Engine.PlayerController.ServerRecvClientInputFrame
// Offset::0x64C3D10;
void FPlayerController::ServerRecvClientInputFrame(int32_t RecvClientInputFrame,TArray<char> Data);


// Function  Engine.PlayerController.ServerRestartPlayer
// Offset::0x64C5EF0;
void FPlayerController::ServerRestartPlayer();


// Function  Engine.PlayerController.ServerSetSpectatorLocation
// Offset::0x64C5D60;
void FPlayerController::ServerSetSpectatorLocation(FVector NewLoc,FRotator NewRot);


// Function  Engine.PlayerController.ServerSetSpectatorWaiting
// Offset::0x64CC400;
void FPlayerController::ServerSetSpectatorWaiting(bool bWaiting);


// Function  Engine.PlayerController.ServerShortTimeout
// Offset::0x64C5C70;
void FPlayerController::ServerShortTimeout();


// Function  Engine.PlayerController.ServerToggleAILogging
// Offset::0x64C55F0;
void FPlayerController::ServerToggleAILogging();


// Function  Engine.PlayerController.ServerUnblockPlayer
// Offset::0x64C9BF0;
void FPlayerController::ServerUnblockPlayer(FUniqueNetIdRepl PlayerId);


// Function  Engine.PlayerController.ServerUnmutePlayer
// Offset::0x64CA1B0;
void FPlayerController::ServerUnmutePlayer(FUniqueNetIdRepl PlayerId);


// Function  Engine.PlayerController.ServerUpdateCamera
// Offset::0x64C5B30;
void FPlayerController::ServerUpdateCamera(FVector_NetQuantize CamLoc,int32_t CamPitchAndYaw);


// Function  Engine.PlayerController.ServerUpdateLevelVisibility
// Offset::0x64C5A70;
void FPlayerController::ServerUpdateLevelVisibility(FUpdateLevelVisibilityLevelInfo LevelVisibility);


// Function  Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
// Offset::0x64C59A0;
void FPlayerController::ServerUpdateMultipleLevelsVisibility(TArray<FUpdateLevelVisibilityLevelInfo> LevelVisibilities);


// Function  Engine.PlayerController.ServerVerifyViewTarget
// Offset::0x64C5950;
void FPlayerController::ServerVerifyViewTarget();


// Function  Engine.PlayerController.ServerViewNextPlayer
// Offset::0x64C5900;
void FPlayerController::ServerViewNextPlayer();


// Function  Engine.PlayerController.ServerViewPrevPlayer
// Offset::0x64C58B0;
void FPlayerController::ServerViewPrevPlayer();


// Function  Engine.PlayerController.ServerViewSelf
// Offset::0x64C57D0;
void FPlayerController::ServerViewSelf(FViewTargetTransitionParams TransitionParams);


// Function  Engine.PlayerController.SetAudioListenerAttenuationOverride
// Offset::0x64C4170;
void FPlayerController::SetAudioListenerAttenuationOverride(FSceneComponent* AttachToComponent,FVector AttenuationLocationOVerride);


// Function  Engine.PlayerController.SetAudioListenerOverride
// Offset::0x64C4280;
void FPlayerController::SetAudioListenerOverride(FSceneComponent* AttachToComponent,FVector Location,FRotator Rotation);


// Function  Engine.PlayerController.SetCinematicMode
// Offset::0x64C3F30;
void FPlayerController::SetCinematicMode(bool bInCinematicMode,bool bHidePlayer,bool bAffectsHUD,bool bAffectsMovement,bool bAffectsTurning);


// Function  Engine.PlayerController.SetControllerLightColor
// Offset::0x64C6CD0;
void FPlayerController::SetControllerLightColor(FColor Color);


// Function  Engine.PlayerController.SetDeprecatedInputPitchScale
// Offset::0x64CC190;
void FPlayerController::SetDeprecatedInputPitchScale(float NewValue);


// Function  Engine.PlayerController.SetDeprecatedInputRollScale
// Offset::0x64CC0F0;
void FPlayerController::SetDeprecatedInputRollScale(float NewValue);


// Function  Engine.PlayerController.SetDeprecatedInputYawScale
// Offset::0x64CC230;
void FPlayerController::SetDeprecatedInputYawScale(float NewValue);


// Function  Engine.PlayerController.SetDisableHaptics
// Offset::0x64C6D60;
void FPlayerController::SetDisableHaptics(bool bNewDisabled);


// Function  Engine.PlayerController.SetHapticsByValue
// Offset::0x64C6E00;
void FPlayerController::SetHapticsByValue(float Frequency,float Amplitude,enum class EControllerHand Hand);


// Function  Engine.PlayerController.SetMouseCursorWidget
// Offset::0x64C7E00;
void FPlayerController::SetMouseCursorWidget(enum class EMouseCursor Cursor,FUserWidget* CursorWidget);


// Function  Engine.PlayerController.SetMouseLocation
// Offset::0x64CA7A0;
void FPlayerController::SetMouseLocation(int32_t X,int32_t Y);


// Function  Engine.PlayerController.SetName
// Offset::0x64CBBA0;
void FPlayerController::SetName(FString S);


// Function  Engine.PlayerController.SetViewTargetWithBlend
// Offset::0x64C43E0;
void FPlayerController::SetViewTargetWithBlend(FActor* NewViewTarget,float BlendTime,enum class EViewTargetBlendFunction BlendFunc,float BlendExp,bool bLockOutgoing);


// Function  Engine.PlayerController.SetVirtualJoystickVisibility
// Offset::0x64C4660;
void FPlayerController::SetVirtualJoystickVisibility(bool bVisible);


// Function  Engine.PlayerController.StartFire
// Offset::0x64CA670;
void FPlayerController::StartFire(char FireModeNum);


// Function  Engine.PlayerController.StopHapticEffect
// Offset::0x64C6F30;
void FPlayerController::StopHapticEffect(enum class EControllerHand Hand);


// Function  Engine.PlayerController.StreamingSourceShouldActivate
// Offset::0x64CA740;
bool FPlayerController::StreamingSourceShouldActivate();


// Function  Engine.PlayerController.StreamingSourceShouldBlockOnSlowStreaming
// Offset::0x64CA710;
bool FPlayerController::StreamingSourceShouldBlockOnSlowStreaming();


// Function  Engine.PlayerController.SwitchLevel
// Offset::0x64CBAF0;
void FPlayerController::SwitchLevel(FString URL);


// Function  Engine.PlayerController.TestServerLevelVisibilityChange
// Offset::0x64C7140;
void FPlayerController::TestServerLevelVisibilityChange(FName PackageName,FName Filename);


// Function  Engine.PlayerController.ToggleSpeaking
// Offset::0x64CA530;
void FPlayerController::ToggleSpeaking(bool bInSpeaking);


// Function  Engine.PlayerController.WasInputKeyJustPressed
// Offset::0x64C5230;
bool FPlayerController::WasInputKeyJustPressed(FKey Key);


// Function  Engine.PlayerController.WasInputKeyJustReleased
// Offset::0x64C5140;
bool FPlayerController::WasInputKeyJustReleased(FKey Key);


// Function  EmbarkGameplay.EmbarkPlayerController.BP_GetTeam
// Offset::0x21F7A50;
enum class EEmbarkTeamId FEmbarkPlayerController::BP_GetTeam();


// Function  EmbarkGameplay.EmbarkPlayerController.BP_SetTeam
// Offset::0x21F7A80;
void FEmbarkPlayerController::BP_SetTeam(enum class EEmbarkTeamId NewTeam);


// Function  EmbarkGameplay.EmbarkPlayerController.ClientEmbarkWasKicked
// Offset::0x21F7840;
void FEmbarkPlayerController::ClientEmbarkWasKicked(char KickType,FText KickReason);


// Function  EmbarkGameplay.EmbarkPlayerController.ClientReceiveSquadVoiceChannelInfo
// Offset::0x21F7470;
void FEmbarkPlayerController::ClientReceiveSquadVoiceChannelInfo(FVoiceChannelInfo VoiceChannelInfo);


// Function  EmbarkGameplay.EmbarkPlayerController.DisableTabNavigation
// Offset::0x21F7800;
void FEmbarkPlayerController::DisableTabNavigation();


// Function  EmbarkGameplay.EmbarkPlayerController.EnableTabNavigation
// Offset::0x21F7820;
void FEmbarkPlayerController::EnableTabNavigation();


// Function  EmbarkGameplay.EmbarkPlayerController.GetRotationInput
// Offset::0x21F76E0;
FRotator FEmbarkPlayerController::GetRotationInput();


// Function  EmbarkGameplay.EmbarkPlayerController.GetTotalForceFeedbackValue
// Offset::0x21F7770;
float FEmbarkPlayerController::GetTotalForceFeedbackValue();


// Function  EmbarkGameplay.EmbarkPlayerController.GetUniqueNetId
// Offset::0x21F7950;
FUniqueNetIdRepl FEmbarkPlayerController::GetUniqueNetId();


// Function  EmbarkGameplay.EmbarkPlayerController.HasLocalPlayerSubsystem
// Offset::0x21F72C0;
bool FEmbarkPlayerController::HasLocalPlayerSubsystem(FLocalPlayerSubsystem* Subsystem);


// Function  EmbarkGameplay.EmbarkPlayerController.IsAnyForceFeedbackActive
// Offset::0x21F7740;
bool FEmbarkPlayerController::IsAnyForceFeedbackActive();


// Function  EmbarkGameplay.EmbarkPlayerController.LocalPawnChanged
// Offset::0x3D30810;
void FEmbarkPlayerController::LocalPawnChanged(FPawn* NewPawn);


// Function  EmbarkGameplay.EmbarkPlayerController.OnServerKick
// Offset::0x3D30810;
void FEmbarkPlayerController::OnServerKick(char Type,FText Reason);


// Function  EmbarkGameplay.EmbarkPlayerController.ReceiveGetSeamlessTravelActorList
// Offset::0x3D30810;
void FEmbarkPlayerController::ReceiveGetSeamlessTravelActorList(bool bToEntry,TArray<FActor*> ActorList);


// Function  EmbarkGameplay.EmbarkPlayerController.ReceiveNotifyLoadedWorld
// Offset::0x3D30810;
void FEmbarkPlayerController::ReceiveNotifyLoadedWorld(FName WorldPackageName,bool bFinalDest);


// Function  EmbarkGameplay.EmbarkPlayerController.ReceiveOnRep_ControlledPawn
// Offset::0x3D30810;
void FEmbarkPlayerController::ReceiveOnRep_ControlledPawn();


// Function  EmbarkGameplay.EmbarkPlayerController.ReceiveOnSquadVoiceChannelInfoReceived
// Offset::0x3D30810;
void FEmbarkPlayerController::ReceiveOnSquadVoiceChannelInfoReceived(FVoiceChannelInfo VoiceChannelInfo);


// Function  EmbarkGameplay.EmbarkPlayerController.ReceivePostSeamlessTravel
// Offset::0x3D30810;
void FEmbarkPlayerController::ReceivePostSeamlessTravel();


// Function  EmbarkGameplay.EmbarkPlayerController.ReceivePreClientTravel
// Offset::0x3D30810;
void FEmbarkPlayerController::ReceivePreClientTravel(FString PendingURL,enum class ETravelType TravelType,bool bIsSeamlessTravel);


// Function  EmbarkGameplay.EmbarkPlayerController.ReceiveSeamlessTravelFrom
// Offset::0x3D30810;
void FEmbarkPlayerController::ReceiveSeamlessTravelFrom(FPlayerController* OldPC);


// Function  EmbarkGameplay.EmbarkPlayerController.ReceiveSeamlessTravelTo
// Offset::0x3D30810;
void FEmbarkPlayerController::ReceiveSeamlessTravelTo(FPlayerController* NewPC);


// Function  EmbarkGameplay.EmbarkPlayerController.ReceiveSetupInputComponent
// Offset::0x3D30810;
void FEmbarkPlayerController::ReceiveSetupInputComponent(FInputComponent* PlayerInputComponent);


// Function  EmbarkGameplay.EmbarkPlayerController.ServerLogConsoleCommandFromClient
// Offset::0x21F71F0;
void FEmbarkPlayerController::ServerLogConsoleCommandFromClient(FString Cmd);


// Function  EmbarkGameplay.EmbarkPlayerController.ServerNotifyHasReplicatedPlayerState
// Offset::0x21F7370;
void FEmbarkPlayerController::ServerNotifyHasReplicatedPlayerState();


// Function  EmbarkGameplay.EmbarkPlayerController.ServerSetMatchId
// Offset::0x21F70D0;
void FEmbarkPlayerController::ServerSetMatchId(FName InPlatformKey,FString InMatchId);


// Function  EmbarkGameplay.EmbarkPlayerController.SetStartSpot
// Offset::0x21F7630;
void FEmbarkPlayerController::SetStartSpot(FActor* Actor);


// Function  EmbarkGameplay.EmbarkPlayerController.TriggerInputAction
// Offset::0x21F7390;
void FEmbarkPlayerController::TriggerInputAction(FName InputAction,enum class EInputEvent InputEvent);


// Function  EmbarkGameplay.EmbarkPlayerController.WasUsingGamepad
// Offset::0x21F77A0;
bool FEmbarkPlayerController::WasUsingGamepad();


// Function  EmbarkGameplay.EmbarkPlayerController.WasUsingKeyboard
// Offset::0x21F77D0;
bool FEmbarkPlayerController::WasUsingKeyboard();


// Function  EmbarkGameplay.EmbarkPlayerController.WasUsingMouse
// Offset::0x21F77D0;
bool FEmbarkPlayerController::WasUsingMouse();


// Function  EmbarkUI.EmbarkViewData.AddFloatUFunction
// Offset::0x2347CD0;
void FEmbarkViewData::AddFloatUFunction(FName PropertyName,FObject* Object,FName FunctionName);


// Function  EmbarkUI.EmbarkViewData.AddIntUFunction
// Offset::0x2347F50;
void FEmbarkViewData::AddIntUFunction(FName PropertyName,FObject* Object,FName FunctionName);


// Function  EmbarkUI.EmbarkViewData.AddStringUFunction
// Offset::0x23477D0;
void FEmbarkViewData::AddStringUFunction(FName PropertyName,FObject* Object,FName FunctionName);


// Function  EmbarkUI.EmbarkViewData.AddTextUFunction
// Offset::0x2347A50;
void FEmbarkViewData::AddTextUFunction(FName PropertyName,FObject* Object,FName FunctionName);


// Function  EmbarkUI.EmbarkViewData.RemoveFloatUFunction
// Offset::0x2347340;
void FEmbarkViewData::RemoveFloatUFunction(FName PropertyName,FObject* Object);


// Function  EmbarkUI.EmbarkViewData.RemoveIntUFunction
// Offset::0x2347590;
void FEmbarkViewData::RemoveIntUFunction(FName PropertyName,FObject* Object);


// Function  EmbarkUI.EmbarkViewData.RemoveStringUFunction
// Offset::0x2346EA0;
void FEmbarkViewData::RemoveStringUFunction(FName PropertyName,FObject* Object);


// Function  EmbarkUI.EmbarkViewData.RemoveTextUFunction
// Offset::0x23470F0;
void FEmbarkViewData::RemoveTextUFunction(FName PropertyName,FObject* Object);


// Function  EmbarkUI.EmbarkViewData.SetFloatProperty
// Offset::0x2346990;
void FEmbarkViewData::SetFloatProperty(FName PropertyName,float Value);


// Function  EmbarkUI.EmbarkViewData.SetIntProperty
// Offset::0x2346C30;
void FEmbarkViewData::SetIntProperty(FName PropertyName,int32_t Value);


// Function  EmbarkUI.EmbarkViewData.SetStringProperty
// Offset::0x2346740;
void FEmbarkViewData::SetStringProperty(FName PropertyName,FString Value);


// Function  EmbarkUI.EmbarkViewData.SetTextProperty
// Offset::0x2346850;
void FEmbarkViewData::SetTextProperty(FName PropertyName,FText Value);


// Function  Engine.SceneComponent.DetachFromParent
// Offset::0x64FFD00;
void FSceneComponent::DetachFromParent(bool bMaintainWorldPosition,bool bCallModify);


// Function  Engine.SceneComponent.DoesSocketExist
// Offset::0x64FF6D0;
bool FSceneComponent::DoesSocketExist(FName InSocketName);


// Function  Engine.SceneComponent.GetAllSocketNames
// Offset::0x64FFB00;
TArray<FName> FSceneComponent::GetAllSocketNames();


// Function  Engine.SceneComponent.GetAttachParent
// Offset::0x62F14D0;
FSceneComponent* FSceneComponent::GetAttachParent();


// Function  Engine.SceneComponent.GetAttachSocketName
// Offset::0x5026370;
FName FSceneComponent::GetAttachSocketName();


// Function  Engine.SceneComponent.GetChildComponent
// Offset::0x65002B0;
FSceneComponent* FSceneComponent::GetChildComponent(int32_t ChildIndex);


// Function  Engine.SceneComponent.GetChildrenComponents
// Offset::0x65001A0;
void FSceneComponent::GetChildrenComponents(bool bIncludeAllDescendants,TArray<FSceneComponent*> Children);


// Function  Engine.SceneComponent.GetComponentVelocity
// Offset::0x64FF670;
FVector FSceneComponent::GetComponentVelocity();


// Function  Engine.SceneComponent.GetForwardVector
// Offset::0x64BD740;
FVector FSceneComponent::GetForwardVector();


// Function  Engine.SceneComponent.GetNumChildrenComponents
// Offset::0x6500350;
int32_t FSceneComponent::GetNumChildrenComponents();


// Function  Engine.SceneComponent.GetParentComponents
// Offset::0x6500380;
void FSceneComponent::GetParentComponents(TArray<FSceneComponent*> Parents);


// Function  Engine.SceneComponent.GetPhysicsVolume
// Offset::0x64FF340;
FPhysicsVolume* FSceneComponent::GetPhysicsVolume();


// Function  Engine.SceneComponent.GetRelativeTransform
// Offset::0x6502960;
FTransform FSceneComponent::GetRelativeTransform();


// Function  Engine.SceneComponent.GetRightVector
// Offset::0x6500510;
FVector FSceneComponent::GetRightVector();


// Function  Engine.SceneComponent.GetShouldSkipChildTransformUpdate
// Offset::0x65034B0;
bool FSceneComponent::GetShouldSkipChildTransformUpdate();


// Function  Engine.SceneComponent.GetShouldUpdatePhysicsVolume
// Offset::0x65033D0;
bool FSceneComponent::GetShouldUpdatePhysicsVolume();


// Function  Engine.SceneComponent.GetSocketLocation
// Offset::0x64FF8F0;
FVector FSceneComponent::GetSocketLocation(FName InSocketName);


// Function  Engine.SceneComponent.GetSocketQuaternion
// Offset::0x64FF770;
FQuat FSceneComponent::GetSocketQuaternion(FName InSocketName);


// Function  Engine.SceneComponent.GetSocketRotation
// Offset::0x64FF830;
FRotator FSceneComponent::GetSocketRotation(FName InSocketName);


// Function  Engine.SceneComponent.GetSocketTransform
// Offset::0x64FF9B0;
FTransform FSceneComponent::GetSocketTransform(FName InSocketName,enum class ERelativeTransformSpace TransformSpace);


// Function  Engine.SceneComponent.GetUpVector
// Offset::0x6500570;
FVector FSceneComponent::GetUpVector();


// Function  Engine.SceneComponent.IsAnySimulatingPhysics
// Offset::0x6500440;
bool FSceneComponent::IsAnySimulatingPhysics();


// Function  Engine.SceneComponent.IsSimulatingPhysics
// Offset::0x6500470;
bool FSceneComponent::IsSimulatingPhysics(FName BoneName);


// Function  Engine.SceneComponent.IsVisible
// Offset::0x64FF640;
bool FSceneComponent::IsVisible();


// Function  Engine.SceneComponent.K2_AddLocalOffset
// Offset::0x65020C0;
void FSceneComponent::K2_AddLocalOffset(FVector DeltaLocation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_AddLocalRotation
// Offset::0x6501E20;
void FSceneComponent::K2_AddLocalRotation(FRotator DeltaRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_AddLocalTransform
// Offset::0x6501B40;
void FSceneComponent::K2_AddLocalTransform(FTransform DeltaTransform,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_AddRelativeLocation
// Offset::0x6502600;
void FSceneComponent::K2_AddRelativeLocation(FVector DeltaLocation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_AddRelativeRotation
// Offset::0x6502360;
void FSceneComponent::K2_AddRelativeRotation(FRotator DeltaRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_AddWorldOffset
// Offset::0x6500FE0;
void FSceneComponent::K2_AddWorldOffset(FVector DeltaLocation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_AddWorldRotation
// Offset::0x6500D40;
void FSceneComponent::K2_AddWorldRotation(FRotator DeltaRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_AddWorldTransform
// Offset::0x6500A60;
void FSceneComponent::K2_AddWorldTransform(FTransform DeltaTransform,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_AddWorldTransformKeepScale
// Offset::0x6500780;
void FSceneComponent::K2_AddWorldTransformKeepScale(FTransform DeltaTransform,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_AttachTo
// Offset::0x6500010;
bool FSceneComponent::K2_AttachTo(FSceneComponent* InParent,FName InSocketName,enum class EAttachLocation AttachType,bool bWeldSimulatedBodies);


// Function  Engine.SceneComponent.K2_AttachToComponent
// Offset::0x64FFDF0;
bool FSceneComponent::K2_AttachToComponent(FSceneComponent* Parent,FName SocketName,enum class EAttachmentRule LocationRule,enum class EAttachmentRule RotationRule,enum class EAttachmentRule ScaleRule,bool bWeldSimulatedBodies);


// Function  Engine.SceneComponent.K2_DetachFromComponent
// Offset::0x64FFB80;
void FSceneComponent::K2_DetachFromComponent(enum class EDetachmentRule LocationRule,enum class EDetachmentRule RotationRule,enum class EDetachmentRule ScaleRule,bool bCallModify);


// Function  Engine.SceneComponent.K2_GetComponentLocation
// Offset::0x6500720;
FVector FSceneComponent::K2_GetComponentLocation();


// Function  Engine.SceneComponent.K2_GetComponentRotation
// Offset::0x65006C0;
FRotator FSceneComponent::K2_GetComponentRotation();


// Function  Engine.SceneComponent.K2_GetComponentScale
// Offset::0x6500660;
FVector FSceneComponent::K2_GetComponentScale();


// Function  Engine.SceneComponent.K2_GetComponentToWorld
// Offset::0x65005D0;
FTransform FSceneComponent::K2_GetComponentToWorld();


// Function  Engine.SceneComponent.K2_SetRelativeLocation
// Offset::0x6502F70;
void FSceneComponent::K2_SetRelativeLocation(FVector NewLocation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_SetRelativeLocationAndRotation
// Offset::0x64FF030;
void FSceneComponent::K2_SetRelativeLocationAndRotation(FVector NewLocation,FRotator NewRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_SetRelativeRotation
// Offset::0x6502CD0;
void FSceneComponent::K2_SetRelativeRotation(FRotator NewRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_SetRelativeTransform
// Offset::0x65029F0;
void FSceneComponent::K2_SetRelativeTransform(FTransform NewTransform,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_SetWorldLocation
// Offset::0x65018A0;
void FSceneComponent::K2_SetWorldLocation(FVector NewLocation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_SetWorldLocationAndRotation
// Offset::0x64FEBE0;
void FSceneComponent::K2_SetWorldLocationAndRotation(FVector NewLocation,FRotator NewRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_SetWorldRotation
// Offset::0x6501600;
void FSceneComponent::K2_SetWorldRotation(FRotator NewRotation,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.K2_SetWorldTransform
// Offset::0x6501280;
void FSceneComponent::K2_SetWorldTransform(FTransform NewTransform,bool bSweep,FHitResult SweepHitResult,bool bTeleport);


// Function  Engine.SceneComponent.OnRep_AttachChildren
// Offset::0x65032D0;
void FSceneComponent::OnRep_AttachChildren();


// Function  Engine.SceneComponent.OnRep_AttachParent
// Offset::0x65032F0;
void FSceneComponent::OnRep_AttachParent();


// Function  Engine.SceneComponent.OnRep_AttachSocketIndex
// Offset::0x6503210;
void FSceneComponent::OnRep_AttachSocketIndex();


// Function  Engine.SceneComponent.OnRep_Transform
// Offset::0x6503310;
void FSceneComponent::OnRep_Transform();


// Function  Engine.SceneComponent.OnRep_Visibility
// Offset::0x6503230;
void FSceneComponent::OnRep_Visibility(bool OldValue);


// Function  Engine.SceneComponent.ResetRelativeTransform
// Offset::0x6502940;
void FSceneComponent::ResetRelativeTransform();


// Function  Engine.SceneComponent.SetAbsolute
// Offset::0x64FEEF0;
void FSceneComponent::SetAbsolute(bool bNewAbsoluteLocation,bool bNewAbsoluteRotation,bool bNewAbsoluteScale);


// Function  Engine.SceneComponent.SetHiddenInGame
// Offset::0x64FF370;
void FSceneComponent::SetHiddenInGame(bool NewHidden,bool bPropagateToChildren);


// Function  Engine.SceneComponent.SetMobility
// Offset::0x64FEB40;
void FSceneComponent::SetMobility(enum class EComponentMobility NewMobility);


// Function  Engine.SceneComponent.SetRelativeScale3D
// Offset::0x65028A0;
void FSceneComponent::SetRelativeScale3D(FVector NewScale3D);


// Function  Engine.SceneComponent.SetShouldSkipChildTransformUpdate
// Offset::0x6503410;
void FSceneComponent::SetShouldSkipChildTransformUpdate(bool bInShouldSkipChildTransformUpdate);


// Function  Engine.SceneComponent.SetShouldUpdatePhysicsVolume
// Offset::0x6503330;
void FSceneComponent::SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);


// Function  Engine.SceneComponent.SetVisibility
// Offset::0x64FF540;
void FSceneComponent::SetVisibility(bool bNewVisibility,bool bPropagateToChildren);


// Function  Engine.SceneComponent.SetWorldScale3D
// Offset::0x6501560;
void FSceneComponent::SetWorldScale3D(FVector NewScale);


// Function  Engine.SceneComponent.ToggleVisibility
// Offset::0x64FF470;
void FSceneComponent::ToggleVisibility(bool bPropagateToChildren);


// Function  Text3D.Text3DComponent.GetBounds
// Offset::0x2EB6750;
void FText3DComponent::GetBounds(FVector Origin,FVector BoxExtent);


// Function  Text3D.Text3DComponent.GetGlyphCount
// Offset::0x2EB6720;
int32_t FText3DComponent::GetGlyphCount();


// Function  Text3D.Text3DComponent.GetGlyphKerningComponent
// Offset::0x2EB6680;
FSceneComponent* FText3DComponent::GetGlyphKerningComponent(int32_t Index);


// Function  Text3D.Text3DComponent.GetGlyphKerningComponents
// Offset::0x2EB6610;
TArray<FSceneComponent*> FText3DComponent::GetGlyphKerningComponents();


// Function  Text3D.Text3DComponent.GetGlyphMeshComponent
// Offset::0x2EB6570;
FStaticMeshComponent* FText3DComponent::GetGlyphMeshComponent(int32_t Index);


// Function  Text3D.Text3DComponent.GetGlyphMeshComponents
// Offset::0x2EB6500;
TArray<FStaticMeshComponent*> FText3DComponent::GetGlyphMeshComponents();


// Function  Text3D.Text3DComponent.SetBackMaterial
// Offset::0x2EB6FA0;
void FText3DComponent::SetBackMaterial(FMaterialInterface* Value);


// Function  Text3D.Text3DComponent.SetBevel
// Offset::0x2EB7350;
void FText3DComponent::SetBevel(float Value);


// Function  Text3D.Text3DComponent.SetBevelMaterial
// Offset::0x2EB70E0;
void FText3DComponent::SetBevelMaterial(FMaterialInterface* Value);


// Function  Text3D.Text3DComponent.SetBevelSegments
// Offset::0x2EB7220;
void FText3DComponent::SetBevelSegments(int32_t Value);


// Function  Text3D.Text3DComponent.SetBevelType
// Offset::0x2EB72C0;
void FText3DComponent::SetBevelType(enum class EText3DBevelType Value);


// Function  Text3D.Text3DComponent.SetCastShadow
// Offset::0x2EB6840;
void FText3DComponent::SetCastShadow(bool NewCastShadow);


// Function  Text3D.Text3DComponent.SetExtrude
// Offset::0x2EB73F0;
void FText3DComponent::SetExtrude(float Value);


// Function  Text3D.Text3DComponent.SetExtrudeMaterial
// Offset::0x2EB7040;
void FText3DComponent::SetExtrudeMaterial(FMaterialInterface* Value);


// Function  Text3D.Text3DComponent.SetFont
// Offset::0x2EB75D0;
void FText3DComponent::SetFont(FFont* InFont);


// Function  Text3D.Text3DComponent.SetFreeze
// Offset::0x2EB68E0;
void FText3DComponent::SetFreeze(bool bFreeze);


// Function  Text3D.Text3DComponent.SetFrontMaterial
// Offset::0x2EB7180;
void FText3DComponent::SetFrontMaterial(FMaterialInterface* Value);


// Function  Text3D.Text3DComponent.SetHasMaxHeight
// Offset::0x2EB6AC0;
void FText3DComponent::SetHasMaxHeight(bool Value);


// Function  Text3D.Text3DComponent.SetHasMaxWidth
// Offset::0x2EB6C00;
void FText3DComponent::SetHasMaxWidth(bool Value);


// Function  Text3D.Text3DComponent.SetHorizontalAlignment
// Offset::0x2EB6D30;
void FText3DComponent::SetHorizontalAlignment(enum class EText3DHorizontalTextAlignment Value);


// Function  Text3D.Text3DComponent.SetKerning
// Offset::0x2EB6F00;
void FText3DComponent::SetKerning(float Value);


// Function  Text3D.Text3DComponent.SetLineSpacing
// Offset::0x2EB6E60;
void FText3DComponent::SetLineSpacing(float Value);


// Function  Text3D.Text3DComponent.SetMaxHeight
// Offset::0x2EB6A20;
void FText3DComponent::SetMaxHeight(float Value);


// Function  Text3D.Text3DComponent.SetMaxWidth
// Offset::0x2EB6B60;
void FText3DComponent::SetMaxWidth(float Value);


// Function  Text3D.Text3DComponent.SetOutline
// Offset::0x2EB7530;
void FText3DComponent::SetOutline(bool bValue);


// Function  Text3D.Text3DComponent.SetOutlineExpand
// Offset::0x2EB7490;
void FText3DComponent::SetOutlineExpand(float Value);


// Function  Text3D.Text3DComponent.SetScaleProportionally
// Offset::0x2EB6980;
void FText3DComponent::SetScaleProportionally(bool Value);


// Function  Text3D.Text3DComponent.SetText
// Offset::0x2EB7670;
void FText3DComponent::SetText(FText Value);


// Function  Text3D.Text3DComponent.SetVerticalAlignment
// Offset::0x2EB6CA0;
void FText3DComponent::SetVerticalAlignment(enum class EText3DVerticalTextAlignment Value);


// Function  Text3D.Text3DComponent.SetWordSpacing
// Offset::0x2EB6DC0;
void FText3DComponent::SetWordSpacing(float Value);


// Function  AudioWidgets.AudioMeter.GetMeterChannelInfo
// Offset::0x33AA550;
TArray<FMeterChannelInfo> FAudioMeter::GetMeterChannelInfo();


// Function  AudioWidgets.AudioMeter.SetBackgroundColor
// Offset::0x33AA400;
void FAudioMeter::SetBackgroundColor(FLinearColor InValue);


// Function  AudioWidgets.AudioMeter.SetMeterBackgroundColor
// Offset::0x33AA360;
void FAudioMeter::SetMeterBackgroundColor(FLinearColor InValue);


// Function  AudioWidgets.AudioMeter.SetMeterChannelInfo
// Offset::0x33AA4A0;
void FAudioMeter::SetMeterChannelInfo(TArray<FMeterChannelInfo> InMeterChannelInfo);


// Function  AudioWidgets.AudioMeter.SetMeterClippingColor
// Offset::0x33AA180;
void FAudioMeter::SetMeterClippingColor(FLinearColor InValue);


// Function  AudioWidgets.AudioMeter.SetMeterPeakColor
// Offset::0x33AA220;
void FAudioMeter::SetMeterPeakColor(FLinearColor InValue);


// Function  AudioWidgets.AudioMeter.SetMeterScaleColor
// Offset::0x33AA0E0;
void FAudioMeter::SetMeterScaleColor(FLinearColor InValue);


// Function  AudioWidgets.AudioMeter.SetMeterScaleLabelColor
// Offset::0x33AA040;
void FAudioMeter::SetMeterScaleLabelColor(FLinearColor InValue);


// Function  AudioWidgets.AudioMeter.SetMeterValueColor
// Offset::0x33AA2C0;
void FAudioMeter::SetMeterValueColor(FLinearColor InValue);


// Function  MRMesh.MockDataMeshTrackerComponent.ConnectMRMesh
// Offset::0x4FEDB20;
void FMockDataMeshTrackerComponent::ConnectMRMesh(FMRMeshComponent* InMRMeshPtr);


// Function  MRMesh.MockDataMeshTrackerComponent.DisconnectMRMesh
// Offset::0x4FEDA80;
void FMockDataMeshTrackerComponent::DisconnectMRMesh(FMRMeshComponent* InMRMeshPtr);


// Function  AugmentedReality.ARLifeCycleComponent.ServerDestroyARActor
// Offset::0x501EC70;
void FARLifeCycleComponent::ServerDestroyARActor(FARActor* Actor);


// Function  AugmentedReality.ARLifeCycleComponent.ServerSpawnARActor
// Offset::0x501ED30;
void FARLifeCycleComponent::ServerSpawnARActor(FObject* ComponentClass,FGuid NativeID);


// Function  AugmentedReality.CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy.CheckGeoTrackingAvailability
// Offset::0x501BFA0;
FCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* FCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy::CheckGeoTrackingAvailability(FObject* WorldContextObject);


// Function  AugmentedReality.CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy.CheckGeoTrackingAvailabilityAtLocation
// Offset::0x501BE70;
FCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy* FCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy::CheckGeoTrackingAvailabilityAtLocation(FObject* WorldContextObject,float Longitude,float Latitude);


// Function  AugmentedReality.GetGeoLocationAsyncTaskBlueprintProxy.GetGeoLocationAtWorldPosition
// Offset::0x501C3D0;
FGetGeoLocationAsyncTaskBlueprintProxy* FGetGeoLocationAsyncTaskBlueprintProxy::GetGeoLocationAtWorldPosition(FObject* WorldContextObject,FVector WorldPosition);


// Function  TypedElementRuntime.TypedElementSelectionSet.AllowSelectionModifiers
// Offset::0x575A4E0;
bool FTypedElementSelectionSet::AllowSelectionModifiers(FScriptTypedElementHandle InElementHandle);


// Function  TypedElementRuntime.TypedElementSelectionSet.CanDeselectElement
// Offset::0x575AC50;
bool FTypedElementSelectionSet::CanDeselectElement(FScriptTypedElementHandle InElementHandle,FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSet.CanSelectElement
// Offset::0x575AD80;
bool FTypedElementSelectionSet::CanSelectElement(FScriptTypedElementHandle InElementHandle,FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSet.ClearSelection
// Offset::0x575BC90;
bool FTypedElementSelectionSet::ClearSelection(FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSet.CountSelectedElements
// Offset::0x575BA60;
int32_t FTypedElementSelectionSet::CountSelectedElements(FInterface* InBaseInterfaceType);


// Function  TypedElementRuntime.TypedElementSelectionSet.CountSelectedObjects
// Offset::0x575B700;
int32_t FTypedElementSelectionSet::CountSelectedObjects(FObject* InRequiredClass);


// Function  TypedElementRuntime.TypedElementSelectionSet.DeselectElement
// Offset::0x575A880;
bool FTypedElementSelectionSet::DeselectElement(FScriptTypedElementHandle InElementHandle,FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSet.DeselectElements
// Offset::0x575A710;
bool FTypedElementSelectionSet::DeselectElements(TArray<FScriptTypedElementHandle> InElementHandles,FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSet.GetBottomSelectedObject
// Offset::0x575B1C0;
FObject* FTypedElementSelectionSet::GetBottomSelectedObject(FObject* InRequiredClass);


// Function  TypedElementRuntime.TypedElementSelectionSet.GetCurrentSelectionState
// Offset::0x575B0C0;
FTypedElementSelectionSetState FTypedElementSelectionSet::GetCurrentSelectionState();


// Function  TypedElementRuntime.TypedElementSelectionSet.GetNumSelectedElements
// Offset::0x575BC60;
int32_t FTypedElementSelectionSet::GetNumSelectedElements();


// Function  TypedElementRuntime.TypedElementSelectionSet.GetSelectedObjects
// Offset::0x575B520;
TArray<FObject*> FTypedElementSelectionSet::GetSelectedObjects(FObject* InRequiredClass);


// Function  TypedElementRuntime.TypedElementSelectionSet.GetSelectionElement
// Offset::0x575A3C0;
FScriptTypedElementHandle FTypedElementSelectionSet::GetSelectionElement(FScriptTypedElementHandle InElementHandle,enum class ETypedElementSelectionMethod InSelectionMethod);


// Function  TypedElementRuntime.TypedElementSelectionSet.GetTopSelectedObject
// Offset::0x575B370;
FObject* FTypedElementSelectionSet::GetTopSelectedObject(FObject* InRequiredClass);


// Function  TypedElementRuntime.TypedElementSelectionSet.HasSelectedElements
// Offset::0x575BB60;
bool FTypedElementSelectionSet::HasSelectedElements(FInterface* InBaseInterfaceType);


// Function  TypedElementRuntime.TypedElementSelectionSet.HasSelectedObjects
// Offset::0x575B8B0;
bool FTypedElementSelectionSet::HasSelectedObjects(FObject* InRequiredClass);


// Function  TypedElementRuntime.TypedElementSelectionSet.IsElementSelected
// Offset::0x575AEB0;
bool FTypedElementSelectionSet::IsElementSelected(FScriptTypedElementHandle InElementHandle,FTypedElementIsSelectedOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSet.K2_GetSelectedElementHandles
// Offset::0x575A250;
TArray<FScriptTypedElementHandle> FTypedElementSelectionSet::K2_GetSelectedElementHandles(FInterface* InBaseInterfaceType);


// Function  TypedElementRuntime.TypedElementSelectionSet.RestoreSelectionState
// Offset::0x575AFC0;
void FTypedElementSelectionSet::RestoreSelectionState(FTypedElementSelectionSetState InSelectionState);


// Function  TypedElementRuntime.TypedElementSelectionSet.SelectElement
// Offset::0x575AB20;
bool FTypedElementSelectionSet::SelectElement(FScriptTypedElementHandle InElementHandle,FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSet.SelectElements
// Offset::0x575A9B0;
bool FTypedElementSelectionSet::SelectElements(TArray<FScriptTypedElementHandle> InElementHandles,FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSet.SetSelection
// Offset::0x575A5A0;
bool FTypedElementSelectionSet::SetSelection(TArray<FScriptTypedElementHandle> InElementHandles,FTypedElementSelectionOptions InSelectionOptions);


// Function  Engine.PrimitiveComponent.AddAngularImpulseInDegrees
// Offset::0x64E9010;
void FPrimitiveComponent::AddAngularImpulseInDegrees(FVector Impulse,FName BoneName,bool bVelChange);


// Function  Engine.PrimitiveComponent.AddAngularImpulseInRadians
// Offset::0x64E91D0;
void FPrimitiveComponent::AddAngularImpulseInRadians(FVector Impulse,FName BoneName,bool bVelChange);


// Function  Engine.PrimitiveComponent.AddForce
// Offset::0x64E8A30;
void FPrimitiveComponent::AddForce(FVector Force,FName BoneName,bool bAccelChange);


// Function  Engine.PrimitiveComponent.AddForceAtLocation
// Offset::0x64E88D0;
void FPrimitiveComponent::AddForceAtLocation(FVector Force,FVector Location,FName BoneName);


// Function  Engine.PrimitiveComponent.AddForceAtLocationLocal
// Offset::0x64E8770;
void FPrimitiveComponent::AddForceAtLocationLocal(FVector Force,FVector Location,FName BoneName);


// Function  Engine.PrimitiveComponent.AddImpulse
// Offset::0x64E9310;
void FPrimitiveComponent::AddImpulse(FVector Impulse,FName BoneName,bool bVelChange);


// Function  Engine.PrimitiveComponent.AddImpulseAtLocation
// Offset::0x64E8EB0;
void FPrimitiveComponent::AddImpulseAtLocation(FVector Impulse,FVector Location,FName BoneName);


// Function  Engine.PrimitiveComponent.AddRadialForce
// Offset::0x64E8590;
void FPrimitiveComponent::AddRadialForce(FVector Origin,float Radius,float Strength,enum class ERadialImpulseFalloff Falloff,bool bAccelChange);


// Function  Engine.PrimitiveComponent.AddRadialImpulse
// Offset::0x64E8B70;
void FPrimitiveComponent::AddRadialImpulse(FVector Origin,float Radius,float Strength,enum class ERadialImpulseFalloff Falloff,bool bVelChange);


// Function  Engine.PrimitiveComponent.AddTorqueInDegrees
// Offset::0x64E8290;
void FPrimitiveComponent::AddTorqueInDegrees(FVector Torque,FName BoneName,bool bAccelChange);


// Function  Engine.PrimitiveComponent.AddTorqueInRadians
// Offset::0x64E8450;
void FPrimitiveComponent::AddTorqueInRadians(FVector Torque,FName BoneName,bool bAccelChange);


// Function  Engine.PrimitiveComponent.AddVelocityChangeImpulseAtLocation
// Offset::0x64E8D50;
void FPrimitiveComponent::AddVelocityChangeImpulseAtLocation(FVector Impulse,FVector Location,FName BoneName);


// Function  Engine.PrimitiveComponent.CanCharacterStepUp
// Offset::0x64E3DA0;
bool FPrimitiveComponent::CanCharacterStepUp(FPawn* Pawn);


// Function  Engine.PrimitiveComponent.ClearMoveIgnoreActors
// Offset::0x64EAEF0;
void FPrimitiveComponent::ClearMoveIgnoreActors();


// Function  Engine.PrimitiveComponent.ClearMoveIgnoreComponents
// Offset::0x64EAD10;
void FPrimitiveComponent::ClearMoveIgnoreComponents();


// Function  Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
// Offset::0x64EAF10;
TArray<FActor*> FPrimitiveComponent::CopyArrayOfMoveIgnoreActors();


// Function  Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
// Offset::0x64EAD80;
TArray<FPrimitiveComponent*> FPrimitiveComponent::CopyArrayOfMoveIgnoreComponents();


// Function  Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
// Offset::0x64E99B0;
FMaterialInstanceDynamic* FPrimitiveComponent::CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex);


// Function  Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
// Offset::0x64E98C0;
FMaterialInstanceDynamic* FPrimitiveComponent::CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex,FMaterialInterface* Parent);


// Function  Engine.PrimitiveComponent.CreateDynamicMaterialInstance
// Offset::0x64E9780;
FMaterialInstanceDynamic* FPrimitiveComponent::CreateDynamicMaterialInstance(int32_t ElementIndex,FMaterialInterface* SourceMaterial,FName OptionalName);


// Function  Engine.PrimitiveComponent.GetAngularDamping
// Offset::0x64E4840;
float FPrimitiveComponent::GetAngularDamping();


// Function  Engine.PrimitiveComponent.GetCenterOfMass
// Offset::0x64E7650;
FVector FPrimitiveComponent::GetCenterOfMass(FName BoneName);


// Function  Engine.PrimitiveComponent.GetClosestPointOnCollision
// Offset::0x64E4DF0;
float FPrimitiveComponent::GetClosestPointOnCollision(FVector Point,FVector OutPointOnBody,FName BoneName);


// Function  Engine.PrimitiveComponent.GetCollisionEnabled
// Offset::0x64E4DC0;
enum class ECollisionEnabled FPrimitiveComponent::GetCollisionEnabled();


// Function  Engine.PrimitiveComponent.GetCollisionObjectType
// Offset::0x64E4C00;
enum class ECollisionChannel FPrimitiveComponent::GetCollisionObjectType();


// Function  Engine.PrimitiveComponent.GetCollisionProfileName
// Offset::0x64E67F0;
FName FPrimitiveComponent::GetCollisionProfileName();


// Function  Engine.PrimitiveComponent.GetCollisionResponseToChannel
// Offset::0x64E4C30;
enum class ECollisionResponse FPrimitiveComponent::GetCollisionResponseToChannel(enum class ECollisionChannel Channel);


// Function  Engine.PrimitiveComponent.GetCustomPrimitiveDataIndexForScalarParameter
// Offset::0x64EAC70;
int32_t FPrimitiveComponent::GetCustomPrimitiveDataIndexForScalarParameter(FName ParameterName);


// Function  Engine.PrimitiveComponent.GetCustomPrimitiveDataIndexForVectorParameter
// Offset::0x64EABD0;
int32_t FPrimitiveComponent::GetCustomPrimitiveDataIndexForVectorParameter(FName ParameterName);


// Function  Engine.PrimitiveComponent.GetGenerateOverlapEvents
// Offset::0x64EB300;
bool FPrimitiveComponent::GetGenerateOverlapEvents();


// Function  Engine.PrimitiveComponent.GetInertiaTensor
// Offset::0x64E43D0;
FVector FPrimitiveComponent::GetInertiaTensor(FName BoneName);


// Function  Engine.PrimitiveComponent.GetLinearDamping
// Offset::0x64E4870;
float FPrimitiveComponent::GetLinearDamping();


// Function  Engine.PrimitiveComponent.GetMass
// Offset::0x64E4490;
float FPrimitiveComponent::GetMass();


// Function  Engine.PrimitiveComponent.GetMassScale
// Offset::0x64E46A0;
float FPrimitiveComponent::GetMassScale(FName BoneName);


// Function  Engine.PrimitiveComponent.GetMaterial
// Offset::0x64E9C30;
FMaterialInterface* FPrimitiveComponent::GetMaterial(int32_t ElementIndex);


// Function  Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
// Offset::0x64E9680;
FMaterialInterface* FPrimitiveComponent::GetMaterialFromCollisionFaceIndex(int32_t FaceIndex,int32_t SectionIndex);


// Function  Engine.PrimitiveComponent.GetNumMaterials
// Offset::0x64E4F40;
int32_t FPrimitiveComponent::GetNumMaterials();


// Function  Engine.PrimitiveComponent.GetOverlappingActors
// Offset::0x64E9E20;
void FPrimitiveComponent::GetOverlappingActors(TArray<FActor*> OverlappingActors,FActor* ClassFilter);


// Function  Engine.PrimitiveComponent.GetOverlappingComponents
// Offset::0x64E9D70;
void FPrimitiveComponent::GetOverlappingComponents(TArray<FPrimitiveComponent*> OutOverlappingComponents);


// Function  Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
// Offset::0x64E77B0;
FVector FPrimitiveComponent::GetPhysicsAngularVelocityInDegrees(FName BoneName);


// Function  Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
// Offset::0x64E7700;
FVector FPrimitiveComponent::GetPhysicsAngularVelocityInRadians(FName BoneName);


// Function  Engine.PrimitiveComponent.GetPhysicsLinearVelocity
// Offset::0x64E8090;
FVector FPrimitiveComponent::GetPhysicsLinearVelocity(FName BoneName);


// Function  Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
// Offset::0x64E7F80;
FVector FPrimitiveComponent::GetPhysicsLinearVelocityAtPoint(FVector Point,FName BoneName);


// Function  Engine.PrimitiveComponent.GetWalkableSlopeOverride
// Offset::0x64E9650;
FWalkableSlopeOverride FPrimitiveComponent::GetWalkableSlopeOverride();


// Function  Engine.PrimitiveComponent.IgnoreActorWhenMoving
// Offset::0x64EAF90;
void FPrimitiveComponent::IgnoreActorWhenMoving(FActor* Actor,bool bShouldIgnore);


// Function  Engine.PrimitiveComponent.IgnoreComponentWhenMoving
// Offset::0x64EAE00;
void FPrimitiveComponent::IgnoreComponentWhenMoving(FPrimitiveComponent* Component,bool bShouldIgnore);


// Function  Engine.PrimitiveComponent.IsAnyRigidBodyAwake
// Offset::0x64E4100;
bool FPrimitiveComponent::IsAnyRigidBodyAwake();


// Function  Engine.PrimitiveComponent.IsGravityEnabled
// Offset::0x64E48A0;
bool FPrimitiveComponent::IsGravityEnabled();


// Function  Engine.PrimitiveComponent.IsOverlappingActor
// Offset::0x64E9F30;
bool FPrimitiveComponent::IsOverlappingActor(FActor* Other);


// Function  Engine.PrimitiveComponent.IsOverlappingComponent
// Offset::0x64E9FD0;
bool FPrimitiveComponent::IsOverlappingComponent(FPrimitiveComponent* OtherComp);


// Function  Engine.PrimitiveComponent.K2_BoxOverlapComponent
// Offset::0x64E5870;
bool FPrimitiveComponent::K2_BoxOverlapComponent(FVector InBoxCentre,FBox InBox,bool bTraceComplex,bool bShowTrace,bool bPersistentShowTrace,FVector HitLocation,FVector HitNormal,FName BoneName,FHitResult OutHit);


// Function  Engine.PrimitiveComponent.K2_IsCollisionEnabled
// Offset::0x64E4D70;
bool FPrimitiveComponent::K2_IsCollisionEnabled();


// Function  Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
// Offset::0x64E4CD0;
bool FPrimitiveComponent::K2_IsPhysicsCollisionEnabled();


// Function  Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
// Offset::0x64E4D20;
bool FPrimitiveComponent::K2_IsQueryCollisionEnabled();


// Function  Engine.PrimitiveComponent.K2_LineTraceComponent
// Offset::0x64E6280;
bool FPrimitiveComponent::K2_LineTraceComponent(FVector TraceStart,FVector TraceEnd,bool bTraceComplex,bool bShowTrace,bool bPersistentShowTrace,FVector HitLocation,FVector HitNormal,FName BoneName,FHitResult OutHit);


// Function  Engine.PrimitiveComponent.K2_SphereOverlapComponent
// Offset::0x64E53C0;
bool FPrimitiveComponent::K2_SphereOverlapComponent(FVector InSphereCentre,float InSphereRadius,bool bTraceComplex,bool bShowTrace,bool bPersistentShowTrace,FVector HitLocation,FVector HitNormal,FName BoneName,FHitResult OutHit);


// Function  Engine.PrimitiveComponent.K2_SphereTraceComponent
// Offset::0x64E5D60;
bool FPrimitiveComponent::K2_SphereTraceComponent(FVector TraceStart,FVector TraceEnd,float SphereRadius,bool bTraceComplex,bool bShowTrace,bool bPersistentShowTrace,FVector HitLocation,FVector HitNormal,FName BoneName,FHitResult OutHit);


// Function  Engine.PrimitiveComponent.PutRigidBodyToSleep
// Offset::0x64E7420;
void FPrimitiveComponent::PutRigidBodyToSleep(FName BoneName);


// Function  Engine.PrimitiveComponent.ScaleByMomentOfInertia
// Offset::0x64E42C0;
FVector FPrimitiveComponent::ScaleByMomentOfInertia(FVector InputVector,FName BoneName);


// Function  Engine.PrimitiveComponent.SetAllMassScale
// Offset::0x64E4600;
void FPrimitiveComponent::SetAllMassScale(float InMassScale);


// Function  Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
// Offset::0x64E4A80;
void FPrimitiveComponent::SetAllPhysicsAngularVelocityInDegrees(FVector NewAngVel,bool bAddToCurrent);


// Function  Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
// Offset::0x64E4990;
void FPrimitiveComponent::SetAllPhysicsAngularVelocityInRadians(FVector NewAngVel,bool bAddToCurrent);


// Function  Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
// Offset::0x64E7E80;
void FPrimitiveComponent::SetAllPhysicsLinearVelocity(FVector NewVel,bool bAddToCurrent);


// Function  Engine.PrimitiveComponent.SetAllUseCCD
// Offset::0x64E4130;
void FPrimitiveComponent::SetAllUseCCD(bool InUseCCD);


// Function  Engine.PrimitiveComponent.SetAngularDamping
// Offset::0x637DE50;
void FPrimitiveComponent::SetAngularDamping(float InDamping);


// Function  Engine.PrimitiveComponent.SetBoundsScale
// Offset::0x64E9CD0;
void FPrimitiveComponent::SetBoundsScale(float NewBoundsScale);


// Function  Engine.PrimitiveComponent.SetCastContactShadow
// Offset::0x64E6E80;
void FPrimitiveComponent::SetCastContactShadow(bool bInCastContactShadow);


// Function  Engine.PrimitiveComponent.SetCastHiddenShadow
// Offset::0x64E6FC0;
void FPrimitiveComponent::SetCastHiddenShadow(bool NewCastHiddenShadow);


// Function  Engine.PrimitiveComponent.SetCastInsetShadow
// Offset::0x64E6F20;
void FPrimitiveComponent::SetCastInsetShadow(bool bInCastInsetShadow);


// Function  Engine.PrimitiveComponent.SetCastShadow
// Offset::0x64E7100;
void FPrimitiveComponent::SetCastShadow(bool NewCastShadow);


// Function  Engine.PrimitiveComponent.SetCenterOfMass
// Offset::0x64E7560;
void FPrimitiveComponent::SetCenterOfMass(FVector CenterOfMassOffset,FName BoneName);


// Function  Engine.PrimitiveComponent.SetCollisionEnabled
// Offset::0x64E6A20;
void FPrimitiveComponent::SetCollisionEnabled(enum class ECollisionEnabled NewType);


// Function  Engine.PrimitiveComponent.SetCollisionEnabledEx
// Offset::0x64E6930;
void FPrimitiveComponent::SetCollisionEnabledEx(enum class ECollisionEnabled NewType,bool bOnlySetCollisionIfDifferentFromOwner);


// Function  Engine.PrimitiveComponent.SetCollisionObjectType
// Offset::0x64E6750;
void FPrimitiveComponent::SetCollisionObjectType(enum class ECollisionChannel Channel);


// Function  Engine.PrimitiveComponent.SetCollisionProfileName
// Offset::0x64E6840;
void FPrimitiveComponent::SetCollisionProfileName(FName InCollisionProfileName,bool bUpdateOverlaps);


// Function  Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
// Offset::0x64E3F80;
void FPrimitiveComponent::SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse);


// Function  Engine.PrimitiveComponent.SetCollisionResponseToChannel
// Offset::0x64E4020;
void FPrimitiveComponent::SetCollisionResponseToChannel(enum class ECollisionChannel Channel,enum class ECollisionResponse NewResponse);


// Function  Engine.PrimitiveComponent.SetConstraintMode
// Offset::0x64E9450;
void FPrimitiveComponent::SetConstraintMode(enum class EDOFMode ConstraintMode);


// Function  Engine.PrimitiveComponent.SetCullDistance
// Offset::0x64E3E40;
void FPrimitiveComponent::SetCullDistance(float NewCullDistance);


// Function  Engine.PrimitiveComponent.SetCustomDepthStencilValue
// Offset::0x64E5280;
void FPrimitiveComponent::SetCustomDepthStencilValue(int32_t Value);


// Function  Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
// Offset::0x64E51F0;
void FPrimitiveComponent::SetCustomDepthStencilWriteMask(enum class ERendererStencilMask WriteMaskBit);


// Function  Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
// Offset::0x64EA900;
void FPrimitiveComponent::SetCustomPrimitiveDataFloat(int32_t DataIndex,float Value);


// Function  Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
// Offset::0x64EA820;
void FPrimitiveComponent::SetCustomPrimitiveDataVector2(int32_t DataIndex,FVector2D Value);


// Function  Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
// Offset::0x64EA730;
void FPrimitiveComponent::SetCustomPrimitiveDataVector3(int32_t DataIndex,FVector Value);


// Function  Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
// Offset::0x64EA620;
void FPrimitiveComponent::SetCustomPrimitiveDataVector4(int32_t DataIndex,FVector4 Value);


// Function  Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat
// Offset::0x64EA350;
void FPrimitiveComponent::SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex,float Value);


// Function  Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2
// Offset::0x64EA270;
void FPrimitiveComponent::SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex,FVector2D Value);


// Function  Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3
// Offset::0x64EA180;
void FPrimitiveComponent::SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex,FVector Value);


// Function  Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4
// Offset::0x64EA070;
void FPrimitiveComponent::SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex,FVector4 Value);


// Function  Engine.PrimitiveComponent.SetEmissiveLightSource
// Offset::0x64E7060;
void FPrimitiveComponent::SetEmissiveLightSource(bool NewEmissiveLightSource);


// Function  Engine.PrimitiveComponent.SetEnableGravity
// Offset::0x64E48D0;
void FPrimitiveComponent::SetEnableGravity(bool bGravityEnabled);


// Function  Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
// Offset::0x64E6D40;
void FPrimitiveComponent::SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);


// Function  Engine.PrimitiveComponent.SetGenerateOverlapEvents
// Offset::0x64EB260;
void FPrimitiveComponent::SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);


// Function  Engine.PrimitiveComponent.SetHiddenInSceneCapture
// Offset::0x64E4F70;
void FPrimitiveComponent::SetHiddenInSceneCapture(bool bValue);


// Function  Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
// Offset::0x64E6DE0;
void FPrimitiveComponent::SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);


// Function  Engine.PrimitiveComponent.SetLightingChannels
// Offset::0x64EB120;
void FPrimitiveComponent::SetLightingChannels(bool bChannel0,bool bChannel1,bool bChannel2);


// Function  Engine.PrimitiveComponent.SetLinearDamping
// Offset::0x637DF90;
void FPrimitiveComponent::SetLinearDamping(float InDamping);


// Function  Engine.PrimitiveComponent.SetMassOverrideInKg
// Offset::0x64E44C0;
void FPrimitiveComponent::SetMassOverrideInKg(FName BoneName,float MassInKg,bool bOverrideMass);


// Function  Engine.PrimitiveComponent.SetMassScale
// Offset::0x64E4750;
void FPrimitiveComponent::SetMassScale(FName BoneName,float InMassScale);


// Function  Engine.PrimitiveComponent.SetMaterial
// Offset::0x64E9B40;
void FPrimitiveComponent::SetMaterial(int32_t ElementIndex,FMaterialInterface* Material);


// Function  Engine.PrimitiveComponent.SetMaterialByName
// Offset::0x64E9A50;
void FPrimitiveComponent::SetMaterialByName(FName MaterialSlotName,FMaterialInterface* Material);


// Function  Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// Offset::0x64E7380;
void FPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);


// Function  Engine.PrimitiveComponent.SetOnlyOwnerSee
// Offset::0x64E7240;
void FPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee);


// Function  Engine.PrimitiveComponent.SetOwnerNoSee
// Offset::0x64E72E0;
void FPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee);


// Function  Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
// Offset::0x64E7B70;
void FPrimitiveComponent::SetPhysicsAngularVelocityInDegrees(FVector NewAngVel,bool bAddToCurrent,FName BoneName);


// Function  Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
// Offset::0x64E7D30;
void FPrimitiveComponent::SetPhysicsAngularVelocityInRadians(FVector NewAngVel,bool bAddToCurrent,FName BoneName);


// Function  Engine.PrimitiveComponent.SetPhysicsLinearVelocity
// Offset::0x64E8140;
void FPrimitiveComponent::SetPhysicsLinearVelocity(FVector NewVel,bool bAddToCurrent,FName BoneName);


// Function  Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
// Offset::0x64E7A20;
void FPrimitiveComponent::SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel,bool bAddToCurrent,FName BoneName);


// Function  Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
// Offset::0x64E78E0;
void FPrimitiveComponent::SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel,bool bAddToCurrent,FName BoneName);


// Function  Engine.PrimitiveComponent.SetPhysMaterialOverride
// Offset::0x64E3EE0;
void FPrimitiveComponent::SetPhysMaterialOverride(FPhysicalMaterial* NewPhysMaterial);


// Function  Engine.PrimitiveComponent.SetReceivesDecals
// Offset::0x64E6AC0;
void FPrimitiveComponent::SetReceivesDecals(bool bNewReceivesDecals);


// Function  Engine.PrimitiveComponent.SetRenderCustomDepth
// Offset::0x64E5320;
void FPrimitiveComponent::SetRenderCustomDepth(bool bValue);


// Function  Engine.PrimitiveComponent.SetRenderInDepthPass
// Offset::0x64E50B0;
void FPrimitiveComponent::SetRenderInDepthPass(bool bValue);


// Function  Engine.PrimitiveComponent.SetRenderInMainPass
// Offset::0x64E5150;
void FPrimitiveComponent::SetRenderInMainPass(bool bValue);


// Function  Engine.PrimitiveComponent.SetScalarParameterForCustomPrimitiveData
// Offset::0x64EAAF0;
void FPrimitiveComponent::SetScalarParameterForCustomPrimitiveData(FName ParameterName,float Value);


// Function  Engine.PrimitiveComponent.SetScalarParameterForDefaultCustomPrimitiveData
// Offset::0x64EA540;
void FPrimitiveComponent::SetScalarParameterForDefaultCustomPrimitiveData(FName ParameterName,float Value);


// Function  Engine.PrimitiveComponent.SetSimulatePhysics
// Offset::0x64E94F0;
void FPrimitiveComponent::SetSimulatePhysics(bool bSimulate);


// Function  Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
// Offset::0x64E6CA0;
void FPrimitiveComponent::SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);


// Function  Engine.PrimitiveComponent.SetTranslucencySortDistanceOffset
// Offset::0x64E6B60;
void FPrimitiveComponent::SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);


// Function  Engine.PrimitiveComponent.SetTranslucentSortPriority
// Offset::0x64E6C00;
void FPrimitiveComponent::SetTranslucentSortPriority(int32_t NewTranslucentSortPriority);


// Function  Engine.PrimitiveComponent.SetUseCCD
// Offset::0x64E41D0;
void FPrimitiveComponent::SetUseCCD(bool InUseCCD,FName BoneName);


// Function  Engine.PrimitiveComponent.SetVectorParameterForCustomPrimitiveData
// Offset::0x64EA9E0;
void FPrimitiveComponent::SetVectorParameterForCustomPrimitiveData(FName ParameterName,FVector4 Value);


// Function  Engine.PrimitiveComponent.SetVectorParameterForDefaultCustomPrimitiveData
// Offset::0x64EA430;
void FPrimitiveComponent::SetVectorParameterForDefaultCustomPrimitiveData(FName ParameterName,FVector4 Value);


// Function  Engine.PrimitiveComponent.SetVisibleInRayTracing
// Offset::0x64E71A0;
void FPrimitiveComponent::SetVisibleInRayTracing(bool bNewVisibleInRayTracing);


// Function  Engine.PrimitiveComponent.SetVisibleInSceneCaptureOnly
// Offset::0x64E5010;
void FPrimitiveComponent::SetVisibleInSceneCaptureOnly(bool bValue);


// Function  Engine.PrimitiveComponent.SetWalkableSlopeOverride
// Offset::0x64E9590;
void FPrimitiveComponent::SetWalkableSlopeOverride(FWalkableSlopeOverride NewOverride);


// Function  Engine.PrimitiveComponent.WakeAllRigidBodies
// Offset::0x64E4970;
void FPrimitiveComponent::WakeAllRigidBodies();


// Function  Engine.PrimitiveComponent.WakeRigidBody
// Offset::0x64E74C0;
void FPrimitiveComponent::WakeRigidBody(FName BoneName);


// Function  Engine.PrimitiveComponent.WasRecentlyRendered
// Offset::0x64EB080;
bool FPrimitiveComponent::WasRecentlyRendered(float Tolerance);


// Function  Engine.MeshComponent.GetMaterialIndex
// Offset::0x64949A0;
int32_t FMeshComponent::GetMaterialIndex(FName MaterialSlotName);


// Function  Engine.MeshComponent.GetMaterials
// Offset::0x6494A40;
TArray<FMaterialInterface*> FMeshComponent::GetMaterials();


// Function  Engine.MeshComponent.GetMaterialSlotNames
// Offset::0x6494920;
TArray<FName> FMeshComponent::GetMaterialSlotNames();


// Function  Engine.MeshComponent.IsMaterialSlotNameValid
// Offset::0x6494880;
bool FMeshComponent::IsMaterialSlotNameValid(FName MaterialSlotName);


// Function  Engine.MeshComponent.PrestreamTextures
// Offset::0x6494740;
void FMeshComponent::PrestreamTextures(float Seconds,bool bPrioritizeCharacterTextures,int32_t CinematicTextureGroups);


// Function  Engine.MeshComponent.SetScalarParameterValueOnMaterials
// Offset::0x6494660;
void FMeshComponent::SetScalarParameterValueOnMaterials(FName ParameterName,float ParameterValue);


// Function  Engine.MeshComponent.SetVectorParameterValueOnMaterials
// Offset::0x6494570;
void FMeshComponent::SetVectorParameterValueOnMaterials(FName ParameterName,FVector ParameterValue);


// Function  GeometryCollectionEngine.GeometryCollectionComponent.ApplyKinematicField
// Offset::0x6B1C0A0;
void FGeometryCollectionComponent::ApplyKinematicField(float Radius,FVector Position);


// Function  GeometryCollectionEngine.GeometryCollectionComponent.ApplyPhysicsField
// Offset::0x6B1BF20;
void FGeometryCollectionComponent::ApplyPhysicsField(bool Enabled,enum class EGeometryCollectionPhysicsTypeEnum Target,FFieldSystemMetaData* MetaData,FFieldNodeBase* Field);


// Function  GeometryCollectionEngine.GeometryCollectionComponent.NetAbandonCluster
// Offset::0x6B1BC80;
void FGeometryCollectionComponent::NetAbandonCluster(int32_t TransformIndex);


// Function  GeometryCollectionEngine.GeometryCollectionComponent.OnRep_RepData
// Offset::0x6B1BD20;
void FGeometryCollectionComponent::OnRep_RepData(FGeometryCollectionRepData OldData);


// Function  GeometryCollectionEngine.GeometryCollectionComponent.ReceivePhysicsCollision
// Offset::0x3D30810;
void FGeometryCollectionComponent::ReceivePhysicsCollision(FChaosPhysicsCollisionInfo CollisionInfo);


// Function  GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyBreaks
// Offset::0x6B1BE80;
void FGeometryCollectionComponent::SetNotifyBreaks(bool bNewNotifyBreaks);


// Function  GeometryCollectionEngine.GeometryCollectionComponent.SetNotifyRemovals
// Offset::0x6B1BDE0;
void FGeometryCollectionComponent::SetNotifyRemovals(bool bNewNotifyRemovals);


// Function  LevelSequence.LevelSequenceActor.AddBinding
// Offset::0x59100E0;
void FLevelSequenceActor::AddBinding(FMovieSceneObjectBindingID Binding,FActor* Actor,bool bAllowBindingsFromAsset);


// Function  LevelSequence.LevelSequenceActor.AddBindingByTag
// Offset::0x590FFB0;
void FLevelSequenceActor::AddBindingByTag(FName BindingTag,FActor* Actor,bool bAllowBindingsFromAsset);


// Function  LevelSequence.LevelSequenceActor.FindNamedBinding
// Offset::0x590FC30;
FMovieSceneObjectBindingID FLevelSequenceActor::FindNamedBinding(FName Tag);


// Function  LevelSequence.LevelSequenceActor.FindNamedBindings
// Offset::0x590FB50;
TArray<FMovieSceneObjectBindingID> FLevelSequenceActor::FindNamedBindings(FName Tag);


// Function  LevelSequence.LevelSequenceActor.GetSequence
// Offset::0x59106C0;
FLevelSequence* FLevelSequenceActor::GetSequence();


// Function  LevelSequence.LevelSequenceActor.GetSequencePlayer
// Offset::0x5910550;
FLevelSequencePlayer* FLevelSequenceActor::GetSequencePlayer();


// Function  LevelSequence.LevelSequenceActor.HideBurnin
// Offset::0x5910530;
void FLevelSequenceActor::HideBurnin();


// Function  LevelSequence.LevelSequenceActor.LoadSequence
// Offset::0x59106C0;
FLevelSequence* FLevelSequenceActor::LoadSequence();


// Function  LevelSequence.LevelSequenceActor.RemoveBinding
// Offset::0x590FEA0;
void FLevelSequenceActor::RemoveBinding(FMovieSceneObjectBindingID Binding,FActor* Actor);


// Function  LevelSequence.LevelSequenceActor.RemoveBindingByTag
// Offset::0x590FDC0;
void FLevelSequenceActor::RemoveBindingByTag(FName Tag,FActor* Actor);


// Function  LevelSequence.LevelSequenceActor.ResetBinding
// Offset::0x590FD00;
void FLevelSequenceActor::ResetBinding(FMovieSceneObjectBindingID Binding);


// Function  LevelSequence.LevelSequenceActor.ResetBindings
// Offset::0x590FCE0;
void FLevelSequenceActor::ResetBindings();


// Function  LevelSequence.LevelSequenceActor.SetBinding
// Offset::0x5910390;
void FLevelSequenceActor::SetBinding(FMovieSceneObjectBindingID Binding,TArray<FActor*> Actors,bool bAllowBindingsFromAsset);


// Function  LevelSequence.LevelSequenceActor.SetBindingByTag
// Offset::0x5910240;
void FLevelSequenceActor::SetBindingByTag(FName BindingTag,TArray<FActor*> Actors,bool bAllowBindingsFromAsset);


// Function  LevelSequence.LevelSequenceActor.SetReplicatePlayback
// Offset::0x5910580;
void FLevelSequenceActor::SetReplicatePlayback(bool ReplicatePlayback);


// Function  LevelSequence.LevelSequenceActor.SetSequence
// Offset::0x5910620;
void FLevelSequenceActor::SetSequence(FLevelSequence* InSequence);


// Function  LevelSequence.LevelSequenceActor.ShowBurnin
// Offset::0x5910510;
void FLevelSequenceActor::ShowBurnin();


// Function  DiscoveryGameplay.DiscoveryAnimationSignificanceSystemBase.ReceiveTickDebug
// Offset::0x3D30810;
void FDiscoveryAnimationSignificanceSystemBase::ReceiveTickDebug(float DeltaSeconds);


// Function  Engine.Pawn.AddControllerPitchInput
// Offset::0x64B2160;
void FPawn::AddControllerPitchInput(float Val);


// Function  Engine.Pawn.AddControllerRollInput
// Offset::0x64B2020;
void FPawn::AddControllerRollInput(float Val);


// Function  Engine.Pawn.AddControllerYawInput
// Offset::0x64B20C0;
void FPawn::AddControllerYawInput(float Val);


// Function  Engine.Pawn.AddMovementInput
// Offset::0x64B22C0;
void FPawn::AddMovementInput(FVector WorldDirection,float ScaleValue,bool bForce);


// Function  Engine.Pawn.ConsumeMovementInputVector
// Offset::0x64B2200;
FVector FPawn::ConsumeMovementInputVector();


// Function  Engine.Pawn.DetachFromControllerPendingDestroy
// Offset::0x64B2400;
void FPawn::DetachFromControllerPendingDestroy();


// Function  Engine.Pawn.GetBaseAimRotation
// Offset::0x64B2420;
FRotator FPawn::GetBaseAimRotation();


// Function  Engine.Pawn.GetController
// Offset::0x64B26F0;
FController* FPawn::GetController();


// Function  Engine.Pawn.GetControlRotation
// Offset::0x64B2690;
FRotator FPawn::GetControlRotation();


// Function  Engine.Pawn.GetLastMovementInputVector
// Offset::0x635F5A0;
FVector FPawn::GetLastMovementInputVector();


// Function  Engine.Pawn.GetLocalViewingPlayerController
// Offset::0x64B2840;
FPlayerController* FPawn::GetLocalViewingPlayerController();


// Function  Engine.Pawn.GetMovementBaseActor
// Offset::0x64B2770;
FActor* FPawn::GetMovementBaseActor(FPawn* Pawn);


// Function  Engine.Pawn.GetMovementComponent
// Offset::0x637CCC0;
FPawnMovementComponent* FPawn::GetMovementComponent();


// Function  Engine.Pawn.GetNavAgentLocation
// Offset::0x64B2510;
FVector FPawn::GetNavAgentLocation();


// Function  Engine.Pawn.GetPendingMovementInputVector
// Offset::0x64B2260;
FVector FPawn::GetPendingMovementInputVector();


// Function  Engine.Pawn.IsBotControlled
// Offset::0x64B2480;
bool FPawn::IsBotControlled();


// Function  Engine.Pawn.IsControlled
// Offset::0x64B2740;
bool FPawn::IsControlled();


// Function  Engine.Pawn.IsLocallyControlled
// Offset::0x64B24E0;
bool FPawn::IsLocallyControlled();


// Function  Engine.Pawn.IsLocallyViewed
// Offset::0x64B2810;
bool FPawn::IsLocallyViewed();


// Function  Engine.Pawn.IsMoveInputIgnored
// Offset::0x64B1FF0;
bool FPawn::IsMoveInputIgnored();


// Function  Engine.Pawn.IsPawnControlled
// Offset::0x64B2710;
bool FPawn::IsPawnControlled();


// Function  Engine.Pawn.IsPlayerControlled
// Offset::0x64B24B0;
bool FPawn::IsPlayerControlled();


// Function  Engine.Pawn.OnRep_Controller
// Offset::0x29515D0;
void FPawn::OnRep_Controller();


// Function  Engine.Pawn.OnRep_PlayerState
// Offset::0x64B2670;
void FPawn::OnRep_PlayerState();


// Function  Engine.Pawn.PawnMakeNoise
// Offset::0x64B2870;
void FPawn::PawnMakeNoise(float Loudness,FVector NoiseLocation,bool bUseNoiseMakerLocation,FActor* NoiseMaker);


// Function  Engine.Pawn.ReceiveControllerChanged
// Offset::0x3D30810;
void FPawn::ReceiveControllerChanged(FController* OldController,FController* NewController);


// Function  Engine.Pawn.ReceivePossessed
// Offset::0x3D30810;
void FPawn::ReceivePossessed(FController* NewController);


// Function  Engine.Pawn.ReceiveRestarted
// Offset::0x3D30810;
void FPawn::ReceiveRestarted();


// Function  Engine.Pawn.ReceiveUnpossessed
// Offset::0x3D30810;
void FPawn::ReceiveUnpossessed(FController* OldController);


// Function  Engine.Pawn.SetCanAffectNavigationGeneration
// Offset::0x64B2580;
void FPawn::SetCanAffectNavigationGeneration(bool bNewValue,bool bForceUpdate);


// Function  Engine.Pawn.SpawnDefaultController
// Offset::0x1B805F0;
void FPawn::SpawnDefaultController();


// Function  Engine.Character.CacheInitialMeshOffset
// Offset::0x6354220;
void FCharacter::CacheInitialMeshOffset(FVector MeshRelativeLocation,FRotator MeshRelativeRotation);


// Function  Engine.Character.CanCrouch
// Offset::0x6353960;
bool FCharacter::CanCrouch();


// Function  Engine.Character.CanJump
// Offset::0x6354060;
bool FCharacter::CanJump();


// Function  Engine.Character.CanJumpInternal
// Offset::0x6354030;
bool FCharacter::CanJumpInternal();


// Function  Engine.Character.ClientAckGoodMove
// Offset::0x6355430;
void FCharacter::ClientAckGoodMove(float Timestamp);


// Function  Engine.Character.ClientAdjustPosition
// Offset::0x63550E0;
void FCharacter::ClientAdjustPosition(float Timestamp,FVector NewLoc,FVector NewVel,FPrimitiveComponent* NewBase,FName NewBaseBoneName,bool bHasBase,bool bBaseRelativePosition,char ServerMovementMode);


// Function  Engine.Character.ClientAdjustRootMotionPosition
// Offset::0x6354A30;
void FCharacter::ClientAdjustRootMotionPosition(float Timestamp,float ServerMontageTrackPosition,FVector ServerLoc,FVector_NetQuantizeNormal ServerRotation,float ServerVelZ,FPrimitiveComponent* ServerBase,FName ServerBoneName,bool bHasBase,bool bBaseRelativePosition,char ServerMovementMode);


// Function  Engine.Character.ClientAdjustRootMotionSourcePosition
// Offset::0x6354330;
void FCharacter::ClientAdjustRootMotionSourcePosition(float Timestamp,FRootMotionSourceGroup ServerRootMotion,bool bHasAnimRootMotion,float ServerMontageTrackPosition,FVector ServerLoc,FVector_NetQuantizeNormal ServerRotation,float ServerVelZ,FPrimitiveComponent* ServerBase,FName ServerBoneName,bool bHasBase,bool bBaseRelativePosition,char ServerMovementMode);


// Function  Engine.Character.ClientCheatFly
// Offset::0x6353920;
void FCharacter::ClientCheatFly();


// Function  Engine.Character.ClientCheatGhost
// Offset::0x6353900;
void FCharacter::ClientCheatGhost();


// Function  Engine.Character.ClientCheatWalk
// Offset::0x6353940;
void FCharacter::ClientCheatWalk();


// Function  Engine.Character.ClientMoveResponsePacked
// Offset::0x6357020;
void FCharacter::ClientMoveResponsePacked(FCharacterMoveResponsePackedBits PackedBits);


// Function  Engine.Character.ClientVeryShortAdjustPosition
// Offset::0x6354E40;
void FCharacter::ClientVeryShortAdjustPosition(float Timestamp,FVector NewLoc,FPrimitiveComponent* NewBase,FName NewBaseBoneName,bool bHasBase,bool bBaseRelativePosition,char ServerMovementMode);


// Function  Engine.Character.Crouch
// Offset::0x6353A30;
void FCharacter::Crouch(bool bClientSimulation);


// Function  Engine.Character.GetAnimRootMotionTranslationScale
// Offset::0x6353770;
float FCharacter::GetAnimRootMotionTranslationScale();


// Function  Engine.Character.GetBaseRotationOffsetRotator
// Offset::0x63540F0;
FRotator FCharacter::GetBaseRotationOffsetRotator();


// Function  Engine.Character.GetBaseTranslationOffset
// Offset::0x63541B0;
FVector FCharacter::GetBaseTranslationOffset();


// Function  Engine.Character.GetCurrentMontage
// Offset::0x6353DF0;
FAnimMontage* FCharacter::GetCurrentMontage();


// Function  Engine.Character.HasAnyRootMotion
// Offset::0x63537D0;
bool FCharacter::HasAnyRootMotion();


// Function  Engine.Character.IsJumpProvidingForce
// Offset::0x6354000;
bool FCharacter::IsJumpProvidingForce();


// Function  Engine.Character.IsPlayingNetworkedRootMotionMontage
// Offset::0x63537A0;
bool FCharacter::IsPlayingNetworkedRootMotionMontage();


// Function  Engine.Character.IsPlayingRootMotion
// Offset::0x6353800;
bool FCharacter::IsPlayingRootMotion();


// Function  Engine.Character.Jump
// Offset::0x63540B0;
void FCharacter::Jump();


// Function  Engine.Character.K2_OnEndCrouch
// Offset::0x3D30810;
void FCharacter::K2_OnEndCrouch(float HalfHeightAdjust,float ScaledHalfHeightAdjust);


// Function  Engine.Character.K2_OnMovementModeChanged
// Offset::0x3D30810;
void FCharacter::K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode,enum class EMovementMode NewMovementMode,char PrevCustomMode,char NewCustomMode);


// Function  Engine.Character.K2_OnStartCrouch
// Offset::0x3D30810;
void FCharacter::K2_OnStartCrouch(float HalfHeightAdjust,float ScaledHalfHeightAdjust);


// Function  Engine.Character.K2_UpdateCustomMovement
// Offset::0x3D30810;
void FCharacter::K2_UpdateCustomMovement(float DeltaTime);


// Function  Engine.Character.LaunchCharacter
// Offset::0x6353CA0;
void FCharacter::LaunchCharacter(FVector LaunchVelocity,bool bXYOverride,bool bZOverride);


// Function  Engine.Character.OnJumped
// Offset::0x6353C80;
void FCharacter::OnJumped();


// Function  Engine.Character.OnLanded
// Offset::0x3D30810;
void FCharacter::OnLanded(FHitResult Hit);


// Function  Engine.Character.OnLaunched
// Offset::0x3D30810;
void FCharacter::OnLaunched(FVector LaunchVelocity,bool bXYOverride,bool bZOverride);


// Function  Engine.Character.OnRep_IsCrouched
// Offset::0x63540D0;
void FCharacter::OnRep_IsCrouched();


// Function  Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp
// Offset::0x63541E0;
void FCharacter::OnRep_ReplayLastTransformUpdateTimeStamp();


// Function  Engine.Character.OnRep_ReplicatedBasedMovement
// Offset::0x6354200;
void FCharacter::OnRep_ReplicatedBasedMovement();


// Function  Engine.Character.OnRep_RootMotion
// Offset::0x6353830;
void FCharacter::OnRep_RootMotion();


// Function  Engine.Character.OnWalkingOffLedge
// Offset::0x6353AD0;
void FCharacter::OnWalkingOffLedge(FVector PreviousFloorImpactNormal,FVector PreviousFloorContactNormal,FVector PreviousLocation,float TimeDelta);


// Function  Engine.Character.PlayAnimMontage
// Offset::0x6353EC0;
float FCharacter::PlayAnimMontage(FAnimMontage* AnimMontage,float InPlayRate,FName StartSectionName);


// Function  Engine.Character.RootMotionDebugClientPrintOnScreen
// Offset::0x6353850;
void FCharacter::RootMotionDebugClientPrintOnScreen(FString InString);


// Function  Engine.Character.ServerMove
// Offset::0x6356BC0;
void FCharacter::ServerMove(float Timestamp,FVector_NetQuantize10 InAccel,FVector_NetQuantize100 ClientLoc,char CompressedMoveFlags,char ClientRoll,uint32_t View,FPrimitiveComponent* ClientMovementBase,FName ClientBaseBoneName,char ClientMovementMode);


// Function  Engine.Character.ServerMoveDual
// Offset::0x6356200;
void FCharacter::ServerMoveDual(float TimeStamp0,FVector_NetQuantize10 InAccel0,char PendingFlags,uint32_t View0,float Timestamp,FVector_NetQuantize10 InAccel,FVector_NetQuantize100 ClientLoc,char NewFlags,char ClientRoll,uint32_t View,FPrimitiveComponent* ClientMovementBase,FName ClientBaseBoneName,char ClientMovementMode);


// Function  Engine.Character.ServerMoveDualHybridRootMotion
// Offset::0x6355650;
void FCharacter::ServerMoveDualHybridRootMotion(float TimeStamp0,FVector_NetQuantize10 InAccel0,char PendingFlags,uint32_t View0,float Timestamp,FVector_NetQuantize10 InAccel,FVector_NetQuantize100 ClientLoc,char NewFlags,char ClientRoll,uint32_t View,FPrimitiveComponent* ClientMovementBase,FName ClientBaseBoneName,char ClientMovementMode);


// Function  Engine.Character.ServerMoveDualNoBase
// Offset::0x6355C90;
void FCharacter::ServerMoveDualNoBase(float TimeStamp0,FVector_NetQuantize10 InAccel0,char PendingFlags,uint32_t View0,float Timestamp,FVector_NetQuantize10 InAccel,FVector_NetQuantize100 ClientLoc,char NewFlags,char ClientRoll,uint32_t View,char ClientMovementMode);


// Function  Engine.Character.ServerMoveNoBase
// Offset::0x6356840;
void FCharacter::ServerMoveNoBase(float Timestamp,FVector_NetQuantize10 InAccel,FVector_NetQuantize100 ClientLoc,char CompressedMoveFlags,char ClientRoll,uint32_t View,char ClientMovementMode);


// Function  Engine.Character.ServerMoveOld
// Offset::0x63554D0;
void FCharacter::ServerMoveOld(float OldTimeStamp,FVector_NetQuantize10 OldAccel,char OldMoveFlags);


// Function  Engine.Character.ServerMovePacked
// Offset::0x6357120;
void FCharacter::ServerMovePacked(FCharacterServerMovePackedBits PackedBits);


// Function  Engine.Character.StopAnimMontage
// Offset::0x6353E20;
void FCharacter::StopAnimMontage(FAnimMontage* AnimMontage);


// Function  Engine.Character.StopJumping
// Offset::0x6354090;
void FCharacter::StopJumping();


// Function  Engine.Character.UnCrouch
// Offset::0x6353990;
void FCharacter::UnCrouch(bool bClientSimulation);


// Function  EmbarkCharacter.EmbarkCharacterBase.BlueprintSimulateRootMotion
// Offset::0x3D30810;
void FEmbarkCharacterBase::BlueprintSimulateRootMotion(FCharacterMovementRootWarpContext RootWarpContext,FVector OutNewDeltaMove,FTransform OutRootWarpTransformDeltaMove);


// Function  EmbarkCharacter.EmbarkCharacterBase.BP_FellOutOfWorldEvent
// Offset::0x260F2C0;
void FEmbarkCharacterBase::BP_FellOutOfWorldEvent(FDamageType* DmgType);


// Function  EmbarkCharacter.EmbarkCharacterBase.BP_GetTeam
// Offset::0x260F700;
enum class EEmbarkTeamId FEmbarkCharacterBase::BP_GetTeam();


// Function  EmbarkCharacter.EmbarkCharacterBase.BP_OutsideWorldBoundsEvent
// Offset::0x260F2A0;
void FEmbarkCharacterBase::BP_OutsideWorldBoundsEvent();


// Function  EmbarkCharacter.EmbarkCharacterBase.BP_SetTeam
// Offset::0x260F730;
void FEmbarkCharacterBase::BP_SetTeam(enum class EEmbarkTeamId NewTeam);


// Function  EmbarkCharacter.EmbarkCharacterBase.EmbarkOnPossessed_Internal
// Offset::0x260F160;
void FEmbarkCharacterBase::EmbarkOnPossessed_Internal(FController* InController);


// Function  EmbarkCharacter.EmbarkCharacterBase.EmbarkOnUnPossessed_Internal
// Offset::0x260F080;
void FEmbarkCharacterBase::EmbarkOnUnPossessed_Internal(FController* InController);


// Function  EmbarkCharacter.EmbarkCharacterBase.GetBasedMovementBP
// Offset::0x260F360;
FBasedMovementInfoBP FEmbarkCharacterBase::GetBasedMovementBP();


// Function  EmbarkCharacter.EmbarkCharacterBase.GetPawnViewLocationBP
// Offset::0x260F240;
FVector FEmbarkCharacterBase::GetPawnViewLocationBP();


// Function  EmbarkCharacter.EmbarkCharacterBase.GetReplicationMode
// Offset::0x260F540;
enum class EGameplayEffectReplicationMode FEmbarkCharacterBase::GetReplicationMode();


// Function  EmbarkCharacter.EmbarkCharacterBase.GetShootLocation
// Offset::0x260F580;
FVector FEmbarkCharacterBase::GetShootLocation();


// Function  EmbarkCharacter.EmbarkCharacterBase.IsStandingOn
// Offset::0x260F600;
bool FEmbarkCharacterBase::IsStandingOn(FPrimitiveComponent* Component,FName BoneName);


// Function  EmbarkCharacter.EmbarkCharacterBase.OverrideWith
// Offset::0x3D30810;
void FEmbarkCharacterBase::OverrideWith(FEmbarkCharacterBase* OldCharacter);


// Function  EmbarkCharacter.EmbarkCharacterBase.ReceiveEmbarkOnPossessed
// Offset::0x3D30810;
void FEmbarkCharacterBase::ReceiveEmbarkOnPossessed(FController* InController);


// Function  EmbarkCharacter.EmbarkCharacterBase.ReceiveEmbarkOnUnPossessed
// Offset::0x3D30810;
void FEmbarkCharacterBase::ReceiveEmbarkOnUnPossessed(FController* InController);


// Function  EmbarkCharacter.EmbarkCharacterBase.ReceiveOnRep_Controller
// Offset::0x3D30810;
void FEmbarkCharacterBase::ReceiveOnRep_Controller();


// Function  EmbarkCharacter.EmbarkCharacterBase.ReceiveOnRep_PlayerState
// Offset::0x3D30810;
void FEmbarkCharacterBase::ReceiveOnRep_PlayerState();


// Function  EmbarkCharacter.EmbarkCharacterBase.ReceivePostInitializeComponents
// Offset::0x3D30810;
void FEmbarkCharacterBase::ReceivePostInitializeComponents();


// Function  EmbarkCharacter.EmbarkCharacterBase.ReceiveSetupPlayerInputComponent
// Offset::0x3D30810;
void FEmbarkCharacterBase::ReceiveSetupPlayerInputComponent(FInputComponent* PlayerInputComponent);


// Function  EmbarkCharacter.EmbarkCharacterBase.ReceiveTakeDamage
// Offset::0x3D30810;
float FEmbarkCharacterBase::ReceiveTakeDamage(float DamageAmount,FDamageEvent DamageEvent,FController* EventInstigator,FActor* DamageCauser);


// Function  EmbarkCharacter.EmbarkCharacterBase.SetDefaultNetDormancy
// Offset::0x21D6D10;
void FEmbarkCharacterBase::SetDefaultNetDormancy(enum class ENetDormancy DefaultNetDormancy);


// Function  EmbarkCharacter.EmbarkCharacterBase.SetUseMixedGASReplication
// Offset::0x260F520;
void FEmbarkCharacterBase::SetUseMixedGASReplication();


// Function  EmbarkCharacter.EmbarkCharacterBase.StopStandingOnCurrentMovementBase
// Offset::0x260F5E0;
void FEmbarkCharacterBase::StopStandingOnCurrentMovementBase();


// Function  DiscoveryGameplay.DiscoveryCharacterBase.BlueprintGetCrouchingCapsuleHalfHeight
// Offset::0x3D30810;
float FDiscoveryCharacterBase::BlueprintGetCrouchingCapsuleHalfHeight();


// Function  DiscoveryGameplay.DiscoveryCharacterBase.BlueprintGetDeltaMoveFromMovingFloor
// Offset::0x3D30810;
void FDiscoveryCharacterBase::BlueprintGetDeltaMoveFromMovingFloor(FVector ProposedMoveDelta,float DeltaSeconds,FVector SafeMoveDelta);


// Function  DiscoveryGameplay.DiscoveryCharacterBase.BlueprintGetStandingCapsuleHalfHeight
// Offset::0x3D30810;
float FDiscoveryCharacterBase::BlueprintGetStandingCapsuleHalfHeight();


// Function  DiscoveryGameplay.DiscoveryCharacterBase.BlueprintRecalculateBaseEyeHeight
// Offset::0x3D30810;
void FDiscoveryCharacterBase::BlueprintRecalculateBaseEyeHeight();


// Function  DiscoveryGameplay.DiscoveryCharacterBase.BlueprintSimulatePhysCustom
// Offset::0x3D30810;
bool FDiscoveryCharacterBase::BlueprintSimulatePhysCustom(FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  DiscoveryGameplay.DiscoveryCharacterBase.BlueprintSimulatePhysFalling
// Offset::0x3D30810;
void FDiscoveryCharacterBase::BlueprintSimulatePhysFalling(FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  DiscoveryGameplay.DiscoveryCharacterBase.BlueprintSimulatePhysFlying
// Offset::0x3D30810;
void FDiscoveryCharacterBase::BlueprintSimulatePhysFlying(FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  DiscoveryGameplay.DiscoveryCharacterBase.BlueprintSimulatePhysWalking
// Offset::0x3D30810;
void FDiscoveryCharacterBase::BlueprintSimulatePhysWalking(FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  Engine.NavMovementComponent.IsCrouching
// Offset::0x649D240;
bool FNavMovementComponent::IsCrouching();


// Function  Engine.NavMovementComponent.IsFalling
// Offset::0x649D210;
bool FNavMovementComponent::IsFalling();


// Function  Engine.NavMovementComponent.IsFlying
// Offset::0x649D1B0;
bool FNavMovementComponent::IsFlying();


// Function  Engine.NavMovementComponent.IsMovingOnGround
// Offset::0x635F930;
bool FNavMovementComponent::IsMovingOnGround();


// Function  Engine.NavMovementComponent.IsSwimming
// Offset::0x649D1E0;
bool FNavMovementComponent::IsSwimming();


// Function  Engine.NavMovementComponent.StopActiveMovement
// Offset::0x649D2E0;
void FNavMovementComponent::StopActiveMovement();


// Function  Engine.NavMovementComponent.StopMovementKeepPathing
// Offset::0x649D270;
void FNavMovementComponent::StopMovementKeepPathing();


// Function  Engine.PawnMovementComponent.AddInputVector
// Offset::0x64B46C0;
void FPawnMovementComponent::AddInputVector(FVector WorldVector,bool bForce);


// Function  Engine.PawnMovementComponent.ConsumeInputVector
// Offset::0x64B45A0;
FVector FPawnMovementComponent::ConsumeInputVector();


// Function  Engine.PawnMovementComponent.GetLastInputVector
// Offset::0x64B4600;
FVector FPawnMovementComponent::GetLastInputVector();


// Function  Engine.PawnMovementComponent.GetPawnOwner
// Offset::0x64B4540;
FPawn* FPawnMovementComponent::GetPawnOwner();


// Function  Engine.PawnMovementComponent.GetPendingInputVector
// Offset::0x64B4660;
FVector FPawnMovementComponent::GetPendingInputVector();


// Function  Engine.PawnMovementComponent.IsMoveInputIgnored
// Offset::0x64B4570;
bool FPawnMovementComponent::IsMoveInputIgnored();


// Function  Engine.CharacterMovementComponent.AddForce
// Offset::0x635F2D0;
void FCharacterMovementComponent::AddForce(FVector Force);


// Function  Engine.CharacterMovementComponent.AddImpulse
// Offset::0x635F380;
void FCharacterMovementComponent::AddImpulse(FVector Impulse,bool bVelocityChange);


// Function  Engine.CharacterMovementComponent.CalcVelocity
// Offset::0x635F6F0;
void FCharacterMovementComponent::CalcVelocity(float DeltaTime,float Friction,bool bFluid,float BrakingDeceleration);


// Function  Engine.CharacterMovementComponent.CapsuleTouched
// Offset::0x635E700;
void FCharacterMovementComponent::CapsuleTouched(FPrimitiveComponent* OverlappedComp,FActor* Other,FPrimitiveComponent* OtherComp,int32_t OtherBodyIndex,bool bFromSweep,FHitResult SweepResult);


// Function  Engine.CharacterMovementComponent.ClearAccumulatedForces
// Offset::0x635F550;
void FCharacterMovementComponent::ClearAccumulatedForces();


// Function  Engine.CharacterMovementComponent.DisableMovement
// Offset::0x635F910;
void FCharacterMovementComponent::DisableMovement();


// Function  Engine.CharacterMovementComponent.GetAnalogInputModifier
// Offset::0x635F570;
float FCharacterMovementComponent::GetAnalogInputModifier();


// Function  Engine.CharacterMovementComponent.GetCharacterOwner
// Offset::0x20968D0;
FCharacter* FCharacterMovementComponent::GetCharacterOwner();


// Function  Engine.CharacterMovementComponent.GetCrouchedHalfHeight
// Offset::0x635F480;
float FCharacterMovementComponent::GetCrouchedHalfHeight();


// Function  Engine.CharacterMovementComponent.GetCurrentAcceleration
// Offset::0x635F5A0;
FVector FCharacterMovementComponent::GetCurrentAcceleration();


// Function  Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
// Offset::0x635F880;
FVector FCharacterMovementComponent::GetImpartedMovementBaseVelocity();


// Function  Engine.CharacterMovementComponent.GetLastUpdateLocation
// Offset::0x635FFA0;
FVector FCharacterMovementComponent::GetLastUpdateLocation();


// Function  Engine.CharacterMovementComponent.GetLastUpdateRotation
// Offset::0x635FF20;
FRotator FCharacterMovementComponent::GetLastUpdateRotation();


// Function  Engine.CharacterMovementComponent.GetLastUpdateVelocity
// Offset::0x635FED0;
FVector FCharacterMovementComponent::GetLastUpdateVelocity();


// Function  Engine.CharacterMovementComponent.GetMaxAcceleration
// Offset::0x635F630;
float FCharacterMovementComponent::GetMaxAcceleration();


// Function  Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
// Offset::0x635F600;
float FCharacterMovementComponent::GetMaxBrakingDeceleration();


// Function  Engine.CharacterMovementComponent.GetMaxJumpHeight
// Offset::0x635F6C0;
float FCharacterMovementComponent::GetMaxJumpHeight();


// Function  Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
// Offset::0x635F690;
float FCharacterMovementComponent::GetMaxJumpHeightWithJumpTime();


// Function  Engine.CharacterMovementComponent.GetMinAnalogSpeed
// Offset::0x635F660;
float FCharacterMovementComponent::GetMinAnalogSpeed();


// Function  Engine.CharacterMovementComponent.GetMovementBase
// Offset::0x635F8E0;
FPrimitiveComponent* FCharacterMovementComponent::GetMovementBase();


// Function  Engine.CharacterMovementComponent.GetPerchRadiusThreshold
// Offset::0x635F2A0;
float FCharacterMovementComponent::GetPerchRadiusThreshold();


// Function  Engine.CharacterMovementComponent.GetValidPerchRadius
// Offset::0x635F270;
float FCharacterMovementComponent::GetValidPerchRadius();


// Function  Engine.CharacterMovementComponent.IsWalkable
// Offset::0x635F0F0;
bool FCharacterMovementComponent::IsWalkable(FHitResult Hit);


// Function  Engine.CharacterMovementComponent.IsWalking
// Offset::0x635F930;
bool FCharacterMovementComponent::IsWalking();


// Function  Engine.CharacterMovementComponent.K2_ComputeFloorDist
// Offset::0x635EA40;
void FCharacterMovementComponent::K2_ComputeFloorDist(FVector CapsuleLocation,float LineDistance,float SweepDistance,float SweepRadius,FFindFloorResult FloorResult);


// Function  Engine.CharacterMovementComponent.K2_FindFloor
// Offset::0x635ED50;
void FCharacterMovementComponent::K2_FindFloor(FVector CapsuleLocation,FFindFloorResult FloorResult);


// Function  Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
// Offset::0x635F0C0;
float FCharacterMovementComponent::K2_GetWalkableFloorAngle();


// Function  Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
// Offset::0x635EFF0;
float FCharacterMovementComponent::K2_GetWalkableFloorZ();


// Function  Engine.CharacterMovementComponent.SetAvoidanceEnabled
// Offset::0x635FA40;
void FCharacterMovementComponent::SetAvoidanceEnabled(bool bEnable);


// Function  Engine.CharacterMovementComponent.SetAvoidanceGroup
// Offset::0x635FE30;
void FCharacterMovementComponent::SetAvoidanceGroup(int32_t GroupFlags);


// Function  Engine.CharacterMovementComponent.SetAvoidanceGroupMask
// Offset::0x635FD80;
void FCharacterMovementComponent::SetAvoidanceGroupMask(FNavAvoidanceMask GroupMask);


// Function  Engine.CharacterMovementComponent.SetCrouchedHalfHeight
// Offset::0x635F4B0;
void FCharacterMovementComponent::SetCrouchedHalfHeight(float NewValue);


// Function  Engine.CharacterMovementComponent.SetGroupsToAvoid
// Offset::0x635FCE0;
void FCharacterMovementComponent::SetGroupsToAvoid(int32_t GroupFlags);


// Function  Engine.CharacterMovementComponent.SetGroupsToAvoidMask
// Offset::0x635FC30;
void FCharacterMovementComponent::SetGroupsToAvoidMask(FNavAvoidanceMask GroupMask);


// Function  Engine.CharacterMovementComponent.SetGroupsToIgnore
// Offset::0x635FB90;
void FCharacterMovementComponent::SetGroupsToIgnore(int32_t GroupFlags);


// Function  Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
// Offset::0x635FAE0;
void FCharacterMovementComponent::SetGroupsToIgnoreMask(FNavAvoidanceMask GroupMask);


// Function  Engine.CharacterMovementComponent.SetMovementMode
// Offset::0x635F960;
void FCharacterMovementComponent::SetMovementMode(enum class EMovementMode NewMovementMode,char NewCustomMode);


// Function  Engine.CharacterMovementComponent.SetWalkableFloorAngle
// Offset::0x635F020;
void FCharacterMovementComponent::SetWalkableFloorAngle(float InWalkableFloorAngle);


// Function  Engine.CharacterMovementComponent.SetWalkableFloorZ
// Offset::0x635EF50;
void FCharacterMovementComponent::SetWalkableFloorZ(float InWalkableFloorZ);


// Function  EmbarkMovement.EmbarkCharacterMovementComponentBase.GetCapsuleHeightOverride
// Offset::0x25CE740;
float FEmbarkCharacterMovementComponentBase::GetCapsuleHeightOverride();


// Function  EmbarkMovement.EmbarkCharacterMovementComponentBase.GetCapsuleRadiusOverride
// Offset::0x25CE790;
float FEmbarkCharacterMovementComponentBase::GetCapsuleRadiusOverride();


// Function  EmbarkMovement.EmbarkCharacterMovementComponentBase.SetOverrideCapsuleSize
// Offset::0x25CE7E0;
void FEmbarkCharacterMovementComponentBase::SetOverrideCapsuleSize(bool bOverrideCapsuleRadius,float NewRadiusOverride,bool bOverrideCapsuleHeight,float NewHeightOverride);


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.ClearRootMotionSources
// Offset::0x25CD7A0;
void FEmbarkCharacterMovementComponent::ClearRootMotionSources();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.GetEmbarkCharacterMovementStateInterpData
// Offset::0x25CCED0;
FEmbarkCharacterMovementStateInterpolatorDataBase* FEmbarkCharacterMovementComponent::GetEmbarkCharacterMovementStateInterpData();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.GetFloorBoneName
// Offset::0x25CD700;
FName FEmbarkCharacterMovementComponent::GetFloorBoneName();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.GetFloorComponent
// Offset::0x25CD6D0;
FPrimitiveComponent* FEmbarkCharacterMovementComponent::GetFloorComponent();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.GetGroundNormal
// Offset::0x25CD760;
FVector FEmbarkCharacterMovementComponent::GetGroundNormal();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.GetMutableReplicatedBaseState
// Offset::0x25CCFA0;
FEmbarkCharacterMovementBaseState FEmbarkCharacterMovementComponent::GetMutableReplicatedBaseState();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.GetReplicatedBaseState
// Offset::0x25CD240;
FEmbarkCharacterMovementBaseState FEmbarkCharacterMovementComponent::GetReplicatedBaseState();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.GetRootMotionInputScale
// Offset::0x25CD680;
FEmbarkRootMotionInputScale FEmbarkCharacterMovementComponent::GetRootMotionInputScale();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.GetRootWarpSpace
// Offset::0x25CD570;
FEmbarkRootWarpSpace FEmbarkCharacterMovementComponent::GetRootWarpSpace();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.HasLocalBaseInfoReplicatedThisFrame
// Offset::0x25CCF00;
bool FEmbarkCharacterMovementComponent::HasLocalBaseInfoReplicatedThisFrame();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.HasTransformReplicatedThisFrame
// Offset::0x25CCF50;
bool FEmbarkCharacterMovementComponent::HasTransformReplicatedThisFrame();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.IsCheatFlying
// Offset::0x25CD7D0;
bool FEmbarkCharacterMovementComponent::IsCheatFlying();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.OnRep_LocalBaseReplicatedInfo
// Offset::0x25CCE90;
void FEmbarkCharacterMovementComponent::OnRep_LocalBaseReplicatedInfo();


// Function  EmbarkMovement.EmbarkCharacterMovementComponent.OnRep_ReplicatedTransform
// Offset::0x25CCEB0;
void FEmbarkCharacterMovementComponent::OnRep_ReplicatedTransform();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementComponent.BlueprintGetMaxSpeed
// Offset::0x44A20;
float FDiscoveryCharacterMovementComponent::BlueprintGetMaxSpeed();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementComponent.BlueprintGetMinAnalogSpeed
// Offset::0x449F0;
float FDiscoveryCharacterMovementComponent::BlueprintGetMinAnalogSpeed();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementComponent.GetFloorPhysMaterial
// Offset::0x449C0;
FPhysicalMaterial* FDiscoveryCharacterMovementComponent::GetFloorPhysMaterial();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementComponent.GetFloorTransform
// Offset::0x44930;
FTransform FDiscoveryCharacterMovementComponent::GetFloorTransform();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementComponent.GetRootMotionState
// Offset::0x44C90;
FPendulumRootMotionState FDiscoveryCharacterMovementComponent::GetRootMotionState();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementComponent.GetVaultSimState
// Offset::0x44BE0;
FPendulumVaultSimState FDiscoveryCharacterMovementComponent::GetVaultSimState();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementComponent.IsJumping
// Offset::0x44E50;
bool FDiscoveryCharacterMovementComponent::IsJumping();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementComponent.IsVaulting
// Offset::0x44E20;
bool FDiscoveryCharacterMovementComponent::IsVaulting();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementComponent.OnRep_ReplicatedMovementBaseState
// Offset::0x44550;
void FDiscoveryCharacterMovementComponent::OnRep_ReplicatedMovementBaseState(FEmbarkCharacterMovementBaseState PrevState);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementComponent.SetNewFloor
// Offset::0x44A50;
void FDiscoveryCharacterMovementComponent::SetNewFloor(FFindFloorResult NewFloor);


// Function  EmbarkMovement.EmbarkCharacterMovementGlobalActorBase.BlueprintGenerateStaticMovementParams
// Offset::0x3D30810;
void FEmbarkCharacterMovementGlobalActorBase::BlueprintGenerateStaticMovementParams(FCharacter* Character,FEmbarkMovementParamsStatic OutStatics);


// Function  EmbarkMovement.EmbarkCharacterMovementGlobalActorBase.BlueprintGetAirControlModifier
// Offset::0x3D30810;
float FEmbarkCharacterMovementGlobalActorBase::BlueprintGetAirControlModifier(FCharacter* Character);


// Function  EmbarkMovement.EmbarkCharacterMovementGlobalActorBase.BlueprintGetCurrentLocalBase_Server
// Offset::0x3D30810;
bool FEmbarkCharacterMovementGlobalActorBase::BlueprintGetCurrentLocalBase_Server(FCharacter* Character,enum class EEmbarkLocalBaseType LocalBaseRequestTypeBitmask,FPrimitiveComponent* OutBase,FName OutBone);


// Function  EmbarkMovement.EmbarkCharacterMovementGlobalActorBase.BlueprintGetGravityScaleModifier
// Offset::0x3D30810;
float FEmbarkCharacterMovementGlobalActorBase::BlueprintGetGravityScaleModifier(FCharacter* Character);


// Function  EmbarkMovement.EmbarkCharacterMovementGlobalActorBase.BlueprintGetMaxSpeed
// Offset::0x25CECF0;
float FEmbarkCharacterMovementGlobalActorBase::BlueprintGetMaxSpeed(FEmbarkMovementParamsStatic Statics,FEmbarkMovementParamsDynamic Dynamics);


// Function  EmbarkMovement.EmbarkCharacterMovementGlobalActorBase.BlueprintGetMaxSpeedModifier
// Offset::0x3D30810;
float FEmbarkCharacterMovementGlobalActorBase::BlueprintGetMaxSpeedModifier(FCharacter* Character);


// Function  EmbarkMovement.EmbarkCharacterMovementGlobalActorBase.BlueprintModifyInputVector
// Offset::0x3D30810;
void FEmbarkCharacterMovementGlobalActorBase::BlueprintModifyInputVector(FCharacter* Character,FVector CurrentInputVector);


// Function  EmbarkMovement.EmbarkCharacterMovementGlobalActorBase.GenerateDynamicMovementParams
// Offset::0x25CFCC0;
FEmbarkMovementParamsDynamic FEmbarkCharacterMovementGlobalActorBase::GenerateDynamicMovementParams(FEmbarkMovementParamsStatic Statics,FEmbarkCharacterMovementBaseState BaseState);


// Function  EmbarkMovement.EmbarkCharacterMovementGlobalActorBase.GenerateStaticMovementParams
// Offset::0x25D07D0;
void FEmbarkCharacterMovementGlobalActorBase::GenerateStaticMovementParams(FEmbarkMovementParamsStatic OutResult,FCharacter* Character,FVector InputVector,FPendulumClaims PendulumClaims,bool bWantsToJump,bool bWantsToCrouch,float OverrideDeltaSeconds);


// Function  EmbarkMovement.EmbarkCharacterMovementGlobalActorBase.UpdateDynamicMovementParams
// Offset::0x25CF4F0;
void FEmbarkCharacterMovementGlobalActorBase::UpdateDynamicMovementParams(FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.ActivateMovement
// Offset::0x47AC0;
void FDiscoveryCharacterMovementGlobalActorBase::ActivateMovement(FCharacter* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.BlueprintReflectDynamicsToAbilitySystem
// Offset::0x3D30810;
void FDiscoveryCharacterMovementGlobalActorBase::BlueprintReflectDynamicsToAbilitySystem(FEmbarkCharacterBase* Character,FEmbarkMovementParamsDynamic Dynamics);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.BlueprintSimulateRootMotion
// Offset::0x3D30810;
void FDiscoveryCharacterMovementGlobalActorBase::BlueprintSimulateRootMotion(FEmbarkDataAsset* RootMotionContainer,FEmbarkMovementParamsStatic Statics,FEmbarkMovementParamsDynamic Dynamics);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.CacheJumpState_Client
// Offset::0x471E0;
void FDiscoveryCharacterMovementGlobalActorBase::CacheJumpState_Client(FCharacter* Character,FVector JumpStartCharacterLocation,float JumpStartTime,float JumpStartStamina);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.CacheSlideJumpState
// Offset::0x470A0;
void FDiscoveryCharacterMovementGlobalActorBase::CacheSlideJumpState(FCharacter* Character,FVector SlideJumpVelocity,float Timestamp);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.DeactivateMovement
// Offset::0x47A20;
void FDiscoveryCharacterMovementGlobalActorBase::DeactivateMovement(FCharacter* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.GetLatestDynamics
// Offset::0x46C00;
bool FDiscoveryCharacterMovementGlobalActorBase::GetLatestDynamics(FCharacter* Character,FEmbarkMovementParamsDynamic OutLatestDynamics);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.GetLatestJumpState
// Offset::0x47370;
bool FDiscoveryCharacterMovementGlobalActorBase::GetLatestJumpState(FCharacter* Character,FEmbarkJumpState JumpState);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.GetMaxSpeed_Server
// Offset::0x46B00;
bool FDiscoveryCharacterMovementGlobalActorBase::GetMaxSpeed_Server(FCharacter* Character,float OutMaxSpeed);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.GetMutablePendulumClaims_AutoBot
// Offset::0x45AE0;
FPendulumClaims FDiscoveryCharacterMovementGlobalActorBase::GetMutablePendulumClaims_AutoBot(FEmbarkCharacterBase* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.GetRegisteredControlledCharacters
// Offset::0x47990;
TArray<FEmbarkCharacterBase*> FDiscoveryCharacterMovementGlobalActorBase::GetRegisteredControlledCharacters();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.GetRegisteredSimulatedProxyCharacters_Client
// Offset::0x47900;
TArray<FEmbarkCharacterBase*> FDiscoveryCharacterMovementGlobalActorBase::GetRegisteredSimulatedProxyCharacters_Client();


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.IsCharacterRegisteredAsControlled
// Offset::0x477F0;
bool FDiscoveryCharacterMovementGlobalActorBase::IsCharacterRegisteredAsControlled(FCharacter* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.Jump
// Offset::0x47670;
void FDiscoveryCharacterMovementGlobalActorBase::Jump(FCharacter* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.JumpImmediately
// Offset::0x47670;
void FDiscoveryCharacterMovementGlobalActorBase::JumpImmediately(FCharacter* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.ReceiveCanMoveWithFloor
// Offset::0x458F0;
bool FDiscoveryCharacterMovementGlobalActorBase::ReceiveCanMoveWithFloor(FCharacter* Character,FFindFloorResult NewFloor);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.ReceiveGetCrouchHeightAdjustment
// Offset::0x3D30810;
bool FDiscoveryCharacterMovementGlobalActorBase::ReceiveGetCrouchHeightAdjustment(FDiscoveryCharacterBase* Character,float CrouchCapsuleHalfHeight,float OutHeightAdjustment);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.ReceiveGetUnCrouchHeightAdjustment
// Offset::0x3D30810;
bool FDiscoveryCharacterMovementGlobalActorBase::ReceiveGetUnCrouchHeightAdjustment(FDiscoveryCharacterBase* Character,float StandingCapsuleHalfHeight,float OutHeightAdjustment);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.ReceivePostControlledCharacterRegistered
// Offset::0x3D30810;
void FDiscoveryCharacterMovementGlobalActorBase::ReceivePostControlledCharacterRegistered(FEmbarkCharacterBase* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.ReceivePostControlledCharacterUnregistered
// Offset::0x3D30810;
void FDiscoveryCharacterMovementGlobalActorBase::ReceivePostControlledCharacterUnregistered(FEmbarkCharacterBase* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.SetCustomTimeSinceGrounded_Server
// Offset::0x47710;
void FDiscoveryCharacterMovementGlobalActorBase::SetCustomTimeSinceGrounded_Server(FCharacter* Character,float TimeSinceGrounded);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.StartCrouching
// Offset::0x47530;
void FDiscoveryCharacterMovementGlobalActorBase::StartCrouching(FCharacter* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.StartCrouchingImmediately
// Offset::0x475D0;
void FDiscoveryCharacterMovementGlobalActorBase::StartCrouchingImmediately(FCharacter* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.StopCrouching
// Offset::0x47490;
void FDiscoveryCharacterMovementGlobalActorBase::StopCrouching(FCharacter* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.StopCrouchingImmediately
// Offset::0x47490;
void FDiscoveryCharacterMovementGlobalActorBase::StopCrouchingImmediately(FCharacter* Character);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.UpdateAbilityStatesFromDynamics_Client
// Offset::0x46660;
void FDiscoveryCharacterMovementGlobalActorBase::UpdateAbilityStatesFromDynamics_Client(FCharacter* Character,FEmbarkMovementParamsDynamic Dynamics);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementGlobalActorBase.UpdateExternalCrouchState
// Offset::0x45E20;
void FDiscoveryCharacterMovementGlobalActorBase::UpdateExternalCrouchState(FEmbarkCharacterBase* Character,FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  DiscoveryGameplay.EmbarkCharacterMovementPrediction.PredictionPostMoveLogic
// Offset::0x4A0C0;
void FEmbarkCharacterMovementPrediction::PredictionPostMoveLogic(FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  DiscoveryGameplay.EmbarkCharacterMovementPrediction.PredictionPreMoveLogic
// Offset::0x4A890;
void FEmbarkCharacterMovementPrediction::PredictionPreMoveLogic(FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  EmbarkMovement.EmbarkCharacterMovementStaticCallerBase.ReceiveGetUnCrouchHeightAdjustment
// Offset::0x3D30810;
float FEmbarkCharacterMovementStaticCallerBase::ReceiveGetUnCrouchHeightAdjustment(FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementStaticCallerBase.BlueprintEndVault
// Offset::0x3D30810;
void FDiscoveryCharacterMovementStaticCallerBase::BlueprintEndVault(FEmbarkMovementParamsStatic Statics,FEmbarkMovementParamsDynamic Dynamics);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementStaticCallerBase.BlueprintProcessPendulumClaims
// Offset::0x3D30810;
void FDiscoveryCharacterMovementStaticCallerBase::BlueprintProcessPendulumClaims(FEmbarkDataAsset* RootMotionContainer,FVector RootMotionSourceLoc,FRotator RootMotionSourceRot,FEmbarkMovementParamsStatic Statics,FEmbarkMovementParamsDynamic Dynamics);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementStaticCallerBase.BlueprintRootMotionHandleToSequence
// Offset::0x3D30810;
void FDiscoveryCharacterMovementStaticCallerBase::BlueprintRootMotionHandleToSequence(FEmbarkDataAsset* RootMotionContainer,FPendulumRootMotionHandle Handle,FPendulumSequencePair SequencePair);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementStaticCallerBase.GetLinearVelocityInFloor
// Offset::0x4B530;
bool FDiscoveryCharacterMovementStaticCallerBase::GetLinearVelocityInFloor(FPrimitiveComponent* FloorComp,FName FloorBone,FVector PlayerLocation,FVector OutVelocity);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementStaticCallerBase.IsComponentValidForMovement
// Offset::0x4B6C0;
bool FDiscoveryCharacterMovementStaticCallerBase::IsComponentValidForMovement(FPrimitiveComponent* FloorComp,FName FloorBone);


// Function  DiscoveryGameplay.DiscoveryCharacterMovementStaticCallerBase.SampleRootMotion
// Offset::0x4B7B0;
void FDiscoveryCharacterMovementStaticCallerBase::SampleRootMotion(FEmbarkDataAsset* RootMotionDefinitions,float CurrentTime,float DeltaTime,float CharacterScale,FPendulumRootMotionState RootMotionState,FPendulumRootMotionSampleResult SampleResult);


// Function  Engine.CheatManager.BugIt
// Offset::0x63628E0;
void FCheatManager::BugIt(FString ScreenShotDescription);


// Function  Engine.CheatManager.BugItGo
// Offset::0x6362990;
void FCheatManager::BugItGo(float X,float Y,float Z,float Pitch,float Yaw,float Roll);


// Function  Engine.CheatManager.BugItStringCreator
// Offset::0x63626D0;
void FCheatManager::BugItStringCreator(FVector ViewLocation,FRotator ViewRotation,FString GoString,FString LocString);


// Function  Engine.CheatManager.ChangeSize
// Offset::0x58D5A80;
void FCheatManager::ChangeSize(float F);


// Function  Engine.CheatManager.CheatScript
// Offset::0x1B91D80;
void FCheatManager::CheatScript(FString ScriptName);


// Function  Engine.CheatManager.DamageTarget
// Offset::0x63632F0;
void FCheatManager::DamageTarget(float DamageAmount);


// Function  Engine.CheatManager.DebugCapsuleSweep
// Offset::0x6362DD0;
void FCheatManager::DebugCapsuleSweep();


// Function  Engine.CheatManager.DebugCapsuleSweepCapture
// Offset::0x26DA870;
void FCheatManager::DebugCapsuleSweepCapture();


// Function  Engine.CheatManager.DebugCapsuleSweepChannel
// Offset::0x6362C40;
void FCheatManager::DebugCapsuleSweepChannel(enum class ECollisionChannel Channel);


// Function  Engine.CheatManager.DebugCapsuleSweepClear
// Offset::0x29DDC20;
void FCheatManager::DebugCapsuleSweepClear();


// Function  Engine.CheatManager.DebugCapsuleSweepComplex
// Offset::0x26E21E0;
void FCheatManager::DebugCapsuleSweepComplex(bool bTraceComplex);


// Function  Engine.CheatManager.DebugCapsuleSweepPawn
// Offset::0x26DA890;
void FCheatManager::DebugCapsuleSweepPawn();


// Function  Engine.CheatManager.DebugCapsuleSweepSize
// Offset::0x6362CE0;
void FCheatManager::DebugCapsuleSweepSize(float HalfHeight,float Radius);


// Function  Engine.CheatManager.DestroyAll
// Offset::0x38302F0;
void FCheatManager::DestroyAll(FActor* aClass);


// Function  Engine.CheatManager.DestroyAllPawnsExceptTarget
// Offset::0x233B9F0;
void FCheatManager::DestroyAllPawnsExceptTarget();


// Function  Engine.CheatManager.DestroyPawns
// Offset::0x6363230;
void FCheatManager::DestroyPawns(FPawn* aClass);


// Function  Engine.CheatManager.DestroyServerStatReplicator
// Offset::0x1B91E70;
void FCheatManager::DestroyServerStatReplicator();


// Function  Engine.CheatManager.DestroyTarget
// Offset::0x63632D0;
void FCheatManager::DestroyTarget();


// Function  Engine.CheatManager.DisableDebugCamera
// Offset::0x6362510;
void FCheatManager::DisableDebugCamera();


// Function  Engine.CheatManager.DumpChatState
// Offset::0x6362BE0;
void FCheatManager::DumpChatState();


// Function  Engine.CheatManager.DumpOnlineSessionState
// Offset::0x26E2310;
void FCheatManager::DumpOnlineSessionState();


// Function  Engine.CheatManager.DumpPartyState
// Offset::0x6362C00;
void FCheatManager::DumpPartyState();


// Function  Engine.CheatManager.DumpVoiceMutingState
// Offset::0x6362BC0;
void FCheatManager::DumpVoiceMutingState();


// Function  Engine.CheatManager.EnableDebugCamera
// Offset::0x1BAA880;
void FCheatManager::EnableDebugCamera();


// Function  Engine.CheatManager.FlushLog
// Offset::0x63626B0;
void FCheatManager::FlushLog();


// Function  Engine.CheatManager.Fly
// Offset::0x17AA8C0;
void FCheatManager::Fly();


// Function  Engine.CheatManager.FreezeFrame
// Offset::0x2704880;
void FCheatManager::FreezeFrame(float Delay);


// Function  Engine.CheatManager.GetPlayerController
// Offset::0x1F7F230;
FPlayerController* FCheatManager::GetPlayerController();


// Function  Engine.CheatManager.Ghost
// Offset::0x1799CB0;
void FCheatManager::Ghost();


// Function  Engine.CheatManager.God
// Offset::0x179F4A0;
void FCheatManager::God();


// Function  Engine.CheatManager.InvertMouse
// Offset::0x1BAAC40;
void FCheatManager::InvertMouse();


// Function  Engine.CheatManager.LogLoc
// Offset::0x6362690;
void FCheatManager::LogLoc();


// Function  Engine.CheatManager.OnlyLoadLevel
// Offset::0x6362F00;
void FCheatManager::OnlyLoadLevel(FName PackageName);


// Function  Engine.CheatManager.OnPlayerEndPlayed
// Offset::0x6362530;
void FCheatManager::OnPlayerEndPlayed(FActor* Player,enum class EEndPlayReason EndPlayReason);


// Function  Engine.CheatManager.PlayersOnly
// Offset::0x2333620;
void FCheatManager::PlayersOnly();


// Function  Engine.CheatManager.ReceiveEndPlay
// Offset::0x3D30810;
void FCheatManager::ReceiveEndPlay();


// Function  Engine.CheatManager.ReceiveInitCheatManager
// Offset::0x3D30810;
void FCheatManager::ReceiveInitCheatManager();


// Function  Engine.CheatManager.ServerToggleAILogging
// Offset::0x6362DF0;
void FCheatManager::ServerToggleAILogging();


// Function  Engine.CheatManager.SetMouseSensitivityToDefault
// Offset::0x6362670;
void FCheatManager::SetMouseSensitivityToDefault();


// Function  Engine.CheatManager.SetWorldOrigin
// Offset::0x1B91E70;
void FCheatManager::SetWorldOrigin();


// Function  Engine.CheatManager.Slomo
// Offset::0x2E321A0;
void FCheatManager::Slomo(float NewTimeDilation);


// Function  Engine.CheatManager.SpawnServerStatReplicator
// Offset::0x1B91E70;
void FCheatManager::SpawnServerStatReplicator();


// Function  Engine.CheatManager.StreamLevelIn
// Offset::0x6362FA0;
void FCheatManager::StreamLevelIn(FName PackageName);


// Function  Engine.CheatManager.StreamLevelOut
// Offset::0x6362E60;
void FCheatManager::StreamLevelOut(FName PackageName);


// Function  Engine.CheatManager.Summon
// Offset::0x26DA2F0;
void FCheatManager::Summon(FString ClassName);


// Function  Engine.CheatManager.Teleport
// Offset::0x179DDF0;
void FCheatManager::Teleport();


// Function  Engine.CheatManager.TestCollisionDistance
// Offset::0x6362C20;
void FCheatManager::TestCollisionDistance();


// Function  Engine.CheatManager.ToggleAILogging
// Offset::0x6362E40;
void FCheatManager::ToggleAILogging();


// Function  Engine.CheatManager.ToggleDebugCamera
// Offset::0x233B350;
void FCheatManager::ToggleDebugCamera();


// Function  Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
// Offset::0x6362650;
void FCheatManager::ToggleServerStatReplicatorClientOverwrite();


// Function  Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
// Offset::0x6362630;
void FCheatManager::ToggleServerStatReplicatorUpdateStatNet();


// Function  Engine.CheatManager.UpdateSafeArea
// Offset::0x6362610;
void FCheatManager::UpdateSafeArea();


// Function  Engine.CheatManager.ViewActor
// Offset::0x63630E0;
void FCheatManager::ViewActor(FName ActorName);


// Function  Engine.CheatManager.ViewClass
// Offset::0x6363040;
void FCheatManager::ViewClass(FActor* DesiredClass);


// Function  Engine.CheatManager.ViewPlayer
// Offset::0x6363180;
void FCheatManager::ViewPlayer(FString S);


// Function  Engine.CheatManager.ViewSelf
// Offset::0x2341800;
void FCheatManager::ViewSelf();


// Function  Engine.CheatManager.Walk
// Offset::0x179DEB0;
void FCheatManager::Walk();


// Function  EmbarkGameplay.EmbarkCheatManager.AddInfImpulse
// Offset::0x1B91E70;
void FEmbarkCheatManager::AddInfImpulse();


// Function  EmbarkGameplay.EmbarkCheatManager.ApplyRuntimeTweakable
// Offset::0x21E7200;
void FEmbarkCheatManager::ApplyRuntimeTweakable(FString ObjectPath,FString PropertyPath,FString PropertyValue,bool bApplyToInstances);


// Function  EmbarkGameplay.EmbarkCheatManager.ClientNotifyOfServerHardwareBreakpoint
// Offset::0x21E69E0;
void FEmbarkCheatManager::ClientNotifyOfServerHardwareBreakpoint(FEmbarkHardwareBreakpointInfo BreakpointInfo);


// Function  EmbarkGameplay.EmbarkCheatManager.ClientSendCodeExecutionResult
// Offset::0x21E6B50;
void FEmbarkCheatManager::ClientSendCodeExecutionResult(FString Result);


// Function  EmbarkGameplay.EmbarkCheatManager.DebugCameraEnded
// Offset::0x3D30810;
void FEmbarkCheatManager::DebugCameraEnded();


// Function  EmbarkGameplay.EmbarkCheatManager.DeleteLocalSaveGames
// Offset::0x1B91E70;
void FEmbarkCheatManager::DeleteLocalSaveGames();


// Function  EmbarkGameplay.EmbarkCheatManager.ExecuteCheat_Server
// Offset::0x3D30810;
void FEmbarkCheatManager::ExecuteCheat_Server(TArray<FString> Args);


// Function  EmbarkGameplay.EmbarkCheatManager.ForceCrash
// Offset::0x21E7600;
void FEmbarkCheatManager::ForceCrash(TArray<FString> Args);


// Function  EmbarkGameplay.EmbarkCheatManager.OnHardwareBreakpointChanged
// Offset::0x21E6A90;
void FEmbarkCheatManager::OnHardwareBreakpointChanged(FEmbarkHardwareBreakpointInfo BreakpointInfo);


// Function  EmbarkGameplay.EmbarkCheatManager.PrintDebug_AbilitySystem
// Offset::0x1B91E70;
void FEmbarkCheatManager::PrintDebug_AbilitySystem();


// Function  EmbarkGameplay.EmbarkCheatManager.RepeatConsoleCommand
// Offset::0x21E74B0;
void FEmbarkCheatManager::RepeatConsoleCommand(FString InConsoleCommand,float InInterval);


// Function  EmbarkGameplay.EmbarkCheatManager.ResetTweakableToDefault
// Offset::0x21E7070;
void FEmbarkCheatManager::ResetTweakableToDefault(FString ObjectPath,FString PropertyPath);


// Function  EmbarkGameplay.EmbarkCheatManager.ServerAddHardwareBreakpoint
// Offset::0x21E6E40;
void FEmbarkCheatManager::ServerAddHardwareBreakpoint(FObject* Obj,FString PropertyName,int32_t TriggersUntilDisable,enum class EEmbarkHardwareBreakpointTypes BreakpointType,enum class EEmbarkHardwareBreakpointConditions TriggerCondition,int64_t TriggerConditionValue);


// Function  EmbarkGameplay.EmbarkCheatManager.ServerClearHardwareBreakpoint
// Offset::0x21E6DA0;
void FEmbarkCheatManager::ServerClearHardwareBreakpoint(int32_t DebugRegisterToClear);


// Function  EmbarkGameplay.EmbarkCheatManager.ServerRunAngelscriptCodeString
// Offset::0x21E6C00;
void FEmbarkCheatManager::ServerRunAngelscriptCodeString(FString CodeString,FObject* OptionalObject);


// Function  EmbarkGameplay.EmbarkCheatManager.ServerSetTriggerVSBreakpoint
// Offset::0x21E6D00;
void FEmbarkCheatManager::ServerSetTriggerVSBreakpoint(bool bEnable);


// Function  EmbarkGameplay.EmbarkCheatManager.StopAllRepeatingConsoleCommands
// Offset::0x1B91E70;
void FEmbarkCheatManager::StopAllRepeatingConsoleCommands();


// Function  EmbarkGameplay.EmbarkCheatManager.StopRepeatConsoleCommand
// Offset::0x1B91D80;
void FEmbarkCheatManager::StopRepeatConsoleCommand(FString ConsoleCommand);


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.FindLevelByName
// Offset::0x4F250;
FLevel* FDiscoveryCheatManagerBase::FindLevelByName(FString InLevelShortPackageName);


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.MulticastSlomo
// Offset::0x4EFD0;
void FDiscoveryCheatManagerBase::MulticastSlomo(float NewTimeDilation);


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerChangeSize
// Offset::0x4F190;
void FDiscoveryCheatManagerBase::ServerChangeSize(float F);


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerDamageTarget
// Offset::0x4EF30;
void FDiscoveryCheatManagerBase::ServerDamageTarget(float DamageAmount);


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerDestroyAll
// Offset::0x4EE70;
void FDiscoveryCheatManagerBase::ServerDestroyAll(FActor* aClass);


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerDestroyAllPawnsExceptTarget
// Offset::0x4EE50;
void FDiscoveryCheatManagerBase::ServerDestroyAllPawnsExceptTarget();


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerDestroyPawns
// Offset::0x4EDB0;
void FDiscoveryCheatManagerBase::ServerDestroyPawns(FPawn* aClass);


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerDestroyTarget
// Offset::0x4EF10;
void FDiscoveryCheatManagerBase::ServerDestroyTarget();


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerFly
// Offset::0x4F170;
void FDiscoveryCheatManagerBase::ServerFly();


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerGhost
// Offset::0x4F130;
void FDiscoveryCheatManagerBase::ServerGhost();


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerGod
// Offset::0x4F110;
void FDiscoveryCheatManagerBase::ServerGod();


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerSlomo
// Offset::0x4F070;
void FDiscoveryCheatManagerBase::ServerSlomo(float NewTimeDilation);


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerSummon
// Offset::0x4ED00;
void FDiscoveryCheatManagerBase::ServerSummon(FString ClassName);


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerTeleport
// Offset::0x4F230;
void FDiscoveryCheatManagerBase::ServerTeleport();


// Function  DiscoveryGameplay.DiscoveryCheatManagerBase.ServerWalk
// Offset::0x4F150;
void FDiscoveryCheatManagerBase::ServerWalk();


// Function  Engine.StaticMeshComponent.GetLocalBounds
// Offset::0x653FFC0;
void FStaticMeshComponent::GetLocalBounds(FVector Min,FVector Max);


// Function  Engine.StaticMeshComponent.OnRep_StaticMesh
// Offset::0x6540330;
void FStaticMeshComponent::OnRep_StaticMesh(FStaticMesh* OldStaticMesh);


// Function  Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
// Offset::0x6540150;
void FStaticMeshComponent::SetDistanceFieldSelfShadowBias(float NewValue);


// Function  Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing
// Offset::0x65400B0;
void FStaticMeshComponent::SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);


// Function  Engine.StaticMeshComponent.SetForcedLodModel
// Offset::0x65401F0;
void FStaticMeshComponent::SetForcedLodModel(int32_t NewForcedLodModel);


// Function  Engine.StaticMeshComponent.SetReverseCulling
// Offset::0x653FF20;
void FStaticMeshComponent::SetReverseCulling(bool ReverseCulling);


// Function  Engine.StaticMeshComponent.SetStaticMesh
// Offset::0x6540290;
bool FStaticMeshComponent::SetStaticMesh(FStaticMesh* NewMesh);


// Function  DiscoveryGameplay.DiscoveryDematerializedFracturedDestructibleMeshComponent.ClearTrackedComponent
// Offset::0x503D0;
void FDiscoveryDematerializedFracturedDestructibleMeshComponent::ClearTrackedComponent();


// Function  DiscoveryGameplay.DiscoveryDematerializedFracturedDestructibleMeshComponent.HideBone
// Offset::0x50200;
void FDiscoveryDematerializedFracturedDestructibleMeshComponent::HideBone(int32_t BoneIndex);


// Function  DiscoveryGameplay.DiscoveryDematerializedFracturedDestructibleMeshComponent.SetCollision
// Offset::0x500C0;
void FDiscoveryDematerializedFracturedDestructibleMeshComponent::SetCollision(FEmbarkFracturedDestructibleMeshComponent* Target,int32_t BoneIndex,FDiscoveryDematerializeCachedCollisionData SimData);


// Function  DiscoveryGameplay.DiscoveryDematerializedFracturedDestructibleMeshComponent.SetCollisionProfile
// Offset::0x4FF40;
void FDiscoveryDematerializedFracturedDestructibleMeshComponent::SetCollisionProfile(FEmbarkFracturedDestructibleMeshComponent* Target,int32_t BoneIndex,FName CollisionProfile,FDiscoveryDematerializeCachedCollisionData OldSimData);


// Function  DiscoveryGameplay.DiscoveryDematerializedFracturedDestructibleMeshComponent.SetTrackedComponentWithMaterial
// Offset::0x503F0;
void FDiscoveryDematerializedFracturedDestructibleMeshComponent::SetTrackedComponentWithMaterial(FEmbarkFracturedDestructibleMeshComponent* MeshComponent,FMaterialInterface* Material);


// Function  DiscoveryGameplay.DiscoveryDematerializedFracturedDestructibleMeshComponent.ShowBone
// Offset::0x502A0;
void FDiscoveryDematerializedFracturedDestructibleMeshComponent::ShowBone(int32_t BoneIndex,FFracturedEdgeMaterial* EdgeMaterial,bool bHideExistingEdgemeshes);


// Function  DiscoveryGameplay.DiscoveryDematerializeToolReplicatorActorBase.AddDematerializedItemToFastArray_Server
// Offset::0x50D00;
void FDiscoveryDematerializeToolReplicatorActorBase::AddDematerializedItemToFastArray_Server(FPrimitiveComponent* Component,int32_t BoneIndex);


// Function  DiscoveryGameplay.DiscoveryDematerializeToolReplicatorActorBase.OnDematerializeItemAddedToFastArray_Client
// Offset::0x3D30810;
void FDiscoveryDematerializeToolReplicatorActorBase::OnDematerializeItemAddedToFastArray_Client(FPrimitiveComponent* Component,int32_t BoneIndex);


// Function  DiscoveryGameplay.DiscoveryDematerializeToolReplicatorActorBase.OnDematerializeItemRemovedFromFastArray_Client
// Offset::0x3D30810;
void FDiscoveryDematerializeToolReplicatorActorBase::OnDematerializeItemRemovedFromFastArray_Client(FPrimitiveComponent* Component,int32_t BoneIndex);


// Function  DiscoveryGameplay.DiscoveryDematerializeToolReplicatorActorBase.RemoveDematerializedItemFromFastArray_Server
// Offset::0x50C20;
void FDiscoveryDematerializeToolReplicatorActorBase::RemoveDematerializedItemFromFastArray_Server(FPrimitiveComponent* Component,int32_t BoneIndex);


// Function  DiscoveryGameplay.DiscoveryDematerializeToolReplicatorActorBase.RetriggerAllItemsAddedToFastArray_Client
// Offset::0x50C00;
void FDiscoveryDematerializeToolReplicatorActorBase::RetriggerAllItemsAddedToFastArray_Client();


// Function  EmbarkFastReplicator.EmbarkFastReplicator.OnRep_Buckets
// Offset::0x26199F0;
void FEmbarkFastReplicator::OnRep_Buckets();


// Function  EmbarkFastReplicator.EmbarkFastReplicator.RegisterInstance
// Offset::0x2619B20;
bool FEmbarkFastReplicator::RegisterInstance(FEmbarkFastReplicatorActorOrComponent Ref,FEmbarkFastReplicatorRegisterToken Token);


// Function  EmbarkFastReplicator.EmbarkFastReplicator.RegisterInstanceActor
// Offset::0x2619C30;
bool FEmbarkFastReplicator::RegisterInstanceActor(FActor* Actor,FEmbarkFastReplicatorRegisterToken Token);


// Function  EmbarkFastReplicator.EmbarkFastReplicator.RegisterInstanceComponent
// Offset::0x2619D90;
bool FEmbarkFastReplicator::RegisterInstanceComponent(FActorComponent* Component,FEmbarkFastReplicatorRegisterToken Token);


// Function  EmbarkFastReplicator.EmbarkFastReplicator.UnregisterInstance
// Offset::0x2619A10;
bool FEmbarkFastReplicator::UnregisterInstance(FEmbarkFastReplicatorActorOrComponent Ref,FEmbarkFastReplicatorRegisterToken Token);


// Function  EmbarkFastReplicator.EmbarkFastReplicatorCallback.UnregisterCallback_Client
// Offset::0x261A470;
void FEmbarkFastReplicatorCallback::UnregisterCallback_Client(FEmbarkFastReplicatorActorOrComponent Ref);


// Function  DiscoveryGameplay.DiscoveryFastReplicatorBreak.RegisterCallback_Client
// Offset::0x51990;
void FDiscoveryFastReplicatorBreak::RegisterCallback_Client(FEmbarkFastReplicatorActorOrComponent Ref,FDelegate Callback);


// Function  DiscoveryGameplay.DiscoveryReplicatedDamageDataScriptMixinLibrary.IsRecentTime
// Offset::0x51F30;
bool FDiscoveryReplicatedDamageDataScriptMixinLibrary::IsRecentTime(FDiscoveryReplicatedDamageData DamageData,float CurrentTime);


// Function  DiscoveryGameplay.DiscoveryReplicatedDamageDataScriptMixinLibrary.SetDamage
// Offset::0x52460;
void FDiscoveryReplicatedDamageDataScriptMixinLibrary::SetDamage(FDiscoveryReplicatedDamageData DamageData,float InDamage,enum class EDSMDamageType InDamageType);


// Function  DiscoveryGameplay.DiscoveryReplicatedDamageDataScriptMixinLibrary.SetDamageType
// Offset::0x521E0;
void FDiscoveryReplicatedDamageDataScriptMixinLibrary::SetDamageType(FDiscoveryReplicatedDamageData DamageData,enum class EDSMDamageType InDamageType);


// Function  DiscoveryGameplay.DiscoveryReplicatedDamageDataScriptMixinLibrary.SetDamageValue
// Offset::0x52320;
void FDiscoveryReplicatedDamageDataScriptMixinLibrary::SetDamageValue(FDiscoveryReplicatedDamageData DamageData,float InDamage);


// Function  DiscoveryGameplay.DiscoveryReplicatedDamageDataScriptMixinLibrary.SetDirection
// Offset::0x527A0;
void FDiscoveryReplicatedDamageDataScriptMixinLibrary::SetDirection(FDiscoveryReplicatedDamageData DamageData,FVector InDirection);


// Function  DiscoveryGameplay.DiscoveryReplicatedDamageDataScriptMixinLibrary.SetHealth
// Offset::0x52610;
void FDiscoveryReplicatedDamageDataScriptMixinLibrary::SetHealth(FDiscoveryReplicatedDamageData DamageData,float InMaxHealth,float InNewHealth);


// Function  DiscoveryGameplay.DiscoveryReplicatedDamageDataScriptMixinLibrary.SetImpactPoint
// Offset::0x52A40;
void FDiscoveryReplicatedDamageDataScriptMixinLibrary::SetImpactPoint(FDiscoveryReplicatedDamageData DamageData,FVector InImpactPoint);


// Function  DiscoveryGameplay.DiscoveryReplicatedDamageDataScriptMixinLibrary.SetOrigin
// Offset::0x528F0;
void FDiscoveryReplicatedDamageDataScriptMixinLibrary::SetOrigin(FDiscoveryReplicatedDamageData DamageData,FVector InOrigin);


// Function  DiscoveryGameplay.DiscoveryReplicatedDamageDataScriptMixinLibrary.SetTime
// Offset::0x520A0;
void FDiscoveryReplicatedDamageDataScriptMixinLibrary::SetTime(FDiscoveryReplicatedDamageData DamageData,float Time);


// Function  DiscoveryGameplay.DiscoveryFastReplicatorDamage.RegisterCallback_Client
// Offset::0x51990;
void FDiscoveryFastReplicatorDamage::RegisterCallback_Client(FEmbarkFastReplicatorActorOrComponent Ref,FDelegate Callback);


// Function  DiscoveryGameplay.DiscoveryFastReplicatorDamage.UpdateData_Server
// Offset::0x53680;
void FDiscoveryFastReplicatorDamage::UpdateData_Server(FEmbarkFastReplicatorActorOrComponent Ref,FDiscoveryReplicatedDamageData NewDamage);


// Function  DiscoveryGameplay.DiscoveryFastReplicatorGravityGun.RegisterCallback_Client
// Offset::0x51990;
void FDiscoveryFastReplicatorGravityGun::RegisterCallback_Client(FEmbarkFastReplicatorActorOrComponent Ref,FDelegate Callback);


// Function  DiscoveryGameplay.DiscoveryFastReplicatorGravityGun.UpdateCarriedPickupable_Server
// Offset::0x53F90;
void FDiscoveryFastReplicatorGravityGun::UpdateCarriedPickupable_Server(FEmbarkFastReplicatorActorOrComponent Ref,FActorComponent* CarriedPickupable);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.ApplyDamageToDestructible
// Offset::0x54870;
void FDiscoveryGameplayUtils::ApplyDamageToDestructible(TArray<FBoneDamage> DamagedBones,FActorComponent* TargetDestructible);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.CanOnlyBeSpectator
// Offset::0x54BD0;
bool FDiscoveryGameplayUtils::CanOnlyBeSpectator(FObject* WorldContextObject,FPlayerState* PlayerState);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.GetBoneNameFromBodyIndex
// Offset::0x54A40;
FName FDiscoveryGameplayUtils::GetBoneNameFromBodyIndex(FPrimitiveComponent* InPrimitiveComponent,int32_t InIndex);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.GetCutoutScalabilityOption
// Offset::0x54650;
int32_t FDiscoveryGameplayUtils::GetCutoutScalabilityOption();


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.GetNumberOfNonSpectators
// Offset::0x54B30;
int32_t FDiscoveryGameplayUtils::GetNumberOfNonSpectators(FObject* WorldContextObject);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.GetTimeSinceReceiveNetworkDataFromController
// Offset::0x549A0;
double FDiscoveryGameplayUtils::GetTimeSinceReceiveNetworkDataFromController(FPlayerController* InController);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.IsReplayRunning
// Offset::0x54F10;
bool FDiscoveryGameplayUtils::IsReplayRunning(FWorld* _World);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.IsReplayRunningAndDone
// Offset::0x54D40;
bool FDiscoveryGameplayUtils::IsReplayRunningAndDone(FWorld* _World);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.LoadStreamLevelDebug
// Offset::0x54680;
void FDiscoveryGameplayUtils::LoadStreamLevelDebug(FObject* WorldContextObject,FName LevelName,bool bMakeVisibleAfterLoad,bool bShouldBlockOnLoad,FLatentActionInfo LatentInfo);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.StartRecordingReplay
// Offset::0x54DE0;
void FDiscoveryGameplayUtils::StartRecordingReplay(FWorld* _World,FString ReplayName);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.StopReplay
// Offset::0x54CB0;
void FDiscoveryGameplayUtils::StopReplay(FWorld* _World);


// Function  DiscoveryGameplay.DiscoveryGameplayUtils.UnloadStreamLevelDebug
// Offset::0x544C0;
void FDiscoveryGameplayUtils::UnloadStreamLevelDebug(FObject* WorldContextObject,FName LevelName,FLatentActionInfo LatentInfo,bool bShouldBlockOnUnload);


// Function  Engine.GameViewportClient.SetConsoleTarget
// Offset::0x63B6C30;
void FGameViewportClient::SetConsoleTarget(int32_t PlayerIndex);


// Function  Engine.GameViewportClient.ShowTitleSafeArea
// Offset::0x1A7E910;
void FGameViewportClient::ShowTitleSafeArea();


// Function  Engine.GameViewportClient.SSSwapControllers
// Offset::0x20E8030;
void FGameViewportClient::SSSwapControllers();


// Function  EmbarkGlobalActorInterface.EmbarkGlobalActorFactorySubsystemInterface.GetGlobalActor
// Offset::0x2613160;
FEmbarkGlobalActor* FEmbarkGlobalActorFactorySubsystemInterface::GetGlobalActor(FEmbarkGlobalActor* GlobalActorClass);


// Function  EmbarkGlobalActor.EmbarkGlobalActorFactorySubsystem.ReceiveOnInitialize
// Offset::0x3D30810;
void FEmbarkGlobalActorFactorySubsystem::ReceiveOnInitialize();


// Function  EmbarkGlobalActor.EmbarkGlobalActorFactorySubsystem.ReceivePostInitialize
// Offset::0x3D30810;
void FEmbarkGlobalActorFactorySubsystem::ReceivePostInitialize();


// Function  EmbarkGlobalActor.EmbarkGlobalActorFactorySubsystem.ReceiveShouldCreateSubsystem
// Offset::0x24C8570;
bool FEmbarkGlobalActorFactorySubsystem::ReceiveShouldCreateSubsystem(FObject* Outer);


// Function  EmbarkGlobalActor.EmbarkGameplayGlobalActorFactorySubsystemBase.GetTransformFastReplicator
// Offset::0x24C81A0;
FEmbarkFastReplicatorTransform* FEmbarkGameplayGlobalActorFactorySubsystemBase::GetTransformFastReplicator();


// Function  DiscoveryGameplay.DiscoveryGlobalActorFactorySubsystemBase.GetBreakFastReplicator
// Offset::0x652F0;
FDiscoveryFastReplicatorBreak* FDiscoveryGlobalActorFactorySubsystemBase::GetBreakFastReplicator();


// Function  DiscoveryGameplay.DiscoveryGlobalActorFactorySubsystemBase.GetDamageFastReplicator
// Offset::0x65320;
FDiscoveryFastReplicatorDamage* FDiscoveryGlobalActorFactorySubsystemBase::GetDamageFastReplicator();


// Function  DiscoveryGameplay.DiscoveryGlobalActorFactorySubsystemBase.GetEmbarkAnimStateUpdaterSystem
// Offset::0x65290;
FEmbarkAnimStateUpdaterSystem* FDiscoveryGlobalActorFactorySubsystemBase::GetEmbarkAnimStateUpdaterSystem();


// Function  DiscoveryGameplay.DiscoveryGlobalActorFactorySubsystemBase.GetGravityGunFastReplicator
// Offset::0x652C0;
FDiscoveryFastReplicatorGravityGun* FDiscoveryGlobalActorFactorySubsystemBase::GetGravityGunFastReplicator();


// Function  DiscoveryGameplay.DiscoveryGooSettings.GetSettings
// Offset::0x65930;
FGooSpawnConfiguration* FDiscoveryGooSettings::GetSettings();


// Function  DiscoveryGameplay.DiscoveryGooHelperSubsystem.CalculateCorrection
// Offset::0x663A0;
bool FDiscoveryGooHelperSubsystem::CalculateCorrection(FVector DesiredLocation,FVector CorrectionVector);


// Function  DiscoveryGameplay.DiscoveryGooHelperSubsystem.CalculateOverlaps
// Offset::0x66280;
bool FDiscoveryGooHelperSubsystem::CalculateOverlaps(FVector Location);


// Function  DiscoveryGameplay.DiscoveryGooHelperSubsystem.DetectCriticalWedge
// Offset::0x66110;
bool FDiscoveryGooHelperSubsystem::DetectCriticalWedge();


// Function  DiscoveryGameplay.DiscoveryGooHelperSubsystem.FindOverlappingGoo
// Offset::0x65EB0;
TArray<FActor*> FDiscoveryGooHelperSubsystem::FindOverlappingGoo(FVector Center,FVector Extent,FQuat Orientation);


// Function  DiscoveryGameplay.DiscoveryGooHelperSubsystem.GetAttachedGoo
// Offset::0x65D50;
bool FDiscoveryGooHelperSubsystem::GetAttachedGoo(FActor* BaseActor,TArray<FActor*> OutAttachedGooActors,bool bRecursive);


// Function  DiscoveryGameplay.DiscoveryGooHelperSubsystem.GetLastPenetrationData
// Offset::0x66080;
TArray<FGooPenetrationData> FDiscoveryGooHelperSubsystem::GetLastPenetrationData();


// Function  DiscoveryGameplay.DiscoveryGooHelperSubsystem.GetStrongestPenetration
// Offset::0x66140;
bool FDiscoveryGooHelperSubsystem::GetStrongestPenetration(FVector DesiredLocation,FGooPenetrationData CorrectionVector);


// Function  DiscoveryGameplay.DiscoveryGooHelperSubsystem.OnSettingsLoaded
// Offset::0x664A0;
void FDiscoveryGooHelperSubsystem::OnSettingsLoaded();


// Function  DiscoveryGameplay.DiscoveryPlayerControllerBase.IsInstantReplaySupported
// Offset::0x670A0;
bool FDiscoveryPlayerControllerBase::IsInstantReplaySupported();


// Function  DiscoveryGameplay.DiscoveryPlayerControllerBase.PlayInstantReplay
// Offset::0x670F0;
void FDiscoveryPlayerControllerBase::PlayInstantReplay(FPawn* PawnToFocus,float TimeToRewind,float StartDelay);


// Function  DiscoveryGameplay.DiscoveryPlayerControllerBase.StopInstantReplay
// Offset::0x670D0;
void FDiscoveryPlayerControllerBase::StopInstantReplay();


// Function  Engine.PlayerState.BP_GetUniqueId
// Offset::0x64DD640;
FUniqueNetIdRepl FPlayerState::BP_GetUniqueId();


// Function  Engine.PlayerState.GetPawn
// Offset::0x64DD8A0;
FPawn* FPlayerState::GetPawn();


// Function  Engine.PlayerState.GetPingInMilliseconds
// Offset::0x64DD7C0;
float FPlayerState::GetPingInMilliseconds();


// Function  Engine.PlayerState.GetPlayerController
// Offset::0x64DD870;
FPlayerController* FPlayerState::GetPlayerController();


// Function  Engine.PlayerState.GetPlayerName
// Offset::0x64DD7F0;
FString FPlayerState::GetPlayerName();


// Function  Engine.PlayerState.IsOnlyASpectator
// Offset::0x64DD790;
bool FPlayerState::IsOnlyASpectator();


// Function  Engine.PlayerState.OnPawnPrivateDestroyed
// Offset::0x64DD8D0;
void FPlayerState::OnPawnPrivateDestroyed(FActor* InActor);


// Function  Engine.PlayerState.OnRep_bIsInactive
// Offset::0x1A802F0;
void FPlayerState::OnRep_bIsInactive();


// Function  Engine.PlayerState.OnRep_PlayerId
// Offset::0x1A80310;
void FPlayerState::OnRep_PlayerId();


// Function  Engine.PlayerState.OnRep_PlayerName
// Offset::0x1A802D0;
void FPlayerState::OnRep_PlayerName();


// Function  Engine.PlayerState.OnRep_Score
// Offset::0x21D6F30;
void FPlayerState::OnRep_Score();


// Function  Engine.PlayerState.OnRep_UniqueId
// Offset::0x1BB4100;
void FPlayerState::OnRep_UniqueId();


// Function  Engine.PlayerState.ReceiveCopyProperties
// Offset::0x3D30810;
void FPlayerState::ReceiveCopyProperties(FPlayerState* NewPlayerState);


// Function  Engine.PlayerState.ReceiveOverrideWith
// Offset::0x3D30810;
void FPlayerState::ReceiveOverrideWith(FPlayerState* OldPlayerState);


// Function  EmbarkGameplay.EmbarkPlayerStateBase.GetDebugPlayerName
// Offset::0x21FAB20;
FString FEmbarkPlayerStateBase::GetDebugPlayerName();


// Function  EmbarkGameplay.EmbarkPlayerStateBase.GetExactPing_Server
// Offset::0x21FAD20;
float FEmbarkPlayerStateBase::GetExactPing_Server();


// Function  EmbarkGameplay.EmbarkPlayerStateBase.GetReplicatedPing
// Offset::0x21FACD0;
float FEmbarkPlayerStateBase::GetReplicatedPing();


// Function  EmbarkGameplay.EmbarkPlayerStateBase.HandleOnDeactivate
// Offset::0x3D30810;
void FEmbarkPlayerStateBase::HandleOnDeactivate();


// Function  EmbarkGameplay.EmbarkPlayerStateBase.HandleOnReactivate
// Offset::0x3D30810;
void FEmbarkPlayerStateBase::HandleOnReactivate();


// Function  EmbarkGameplay.EmbarkPlayerStateBase.OnRep_PartyInfo
// Offset::0x1B91E70;
void FEmbarkPlayerStateBase::OnRep_PartyInfo();


// Function  EmbarkGameplay.EmbarkPlayerStateBase.OnRep_Squad
// Offset::0x21FAB00;
void FEmbarkPlayerStateBase::OnRep_Squad();


// Function  EmbarkGameplay.EmbarkPlayerStateBase.SetUniqueId
// Offset::0x21FABF0;
void FEmbarkPlayerStateBase::SetUniqueId(FUniqueNetIdRepl NetId);


// Function  DiscoveryGameplay.DiscoveryPlayerStateBase.GetUniqueIdHash
// Offset::0x675C0;
int32_t FDiscoveryPlayerStateBase::GetUniqueIdHash();


// Function  OnlineSubsystemAngelscript.EmbarkOnlineServiceBase.GetContext
// Offset::0x26FF490;
FEmbarkApiContext* FEmbarkOnlineServiceBase::GetContext();


// Function  OnlineSubsystemAngelscript.EmbarkOnlineServiceBase.Init
// Offset::0x1A7E910;
void FEmbarkOnlineServiceBase::Init();


// Function  OnlineSubsystemAngelscript.EmbarkOnlineServiceBase.Shutdown
// Offset::0x20E8030;
void FEmbarkOnlineServiceBase::Shutdown();


// Function  DiscoveryOnline.IEmbarkOnlineRoundStatModel.GetRoundStats
// Offset::0x17AA790;
TArray<FApiGatewayDiscoveryRoundStats> FIEmbarkOnlineRoundStatModel::GetRoundStats();


// Function  DiscoveryOnline.IEmbarkOnlineRoundStatModel.GetRoundStatSummary
// Offset::0x17AA430;
FApiGatewayDiscoveryRoundStatSummary FIEmbarkOnlineRoundStatModel::GetRoundStatSummary(enum class EServiceRoundStatSummaryType Type);


// Function  DiscoveryOnline.IEmbarkOnlineRoundStatModel.RequestRoundStat
// Offset::0x17AA8C0;
void FIEmbarkOnlineRoundStatModel::RequestRoundStat();


// Function  DiscoveryOnline.IEmbarkOnlineRoundStatModel.RequestRoundStatSummary
// Offset::0x17A1E00;
void FIEmbarkOnlineRoundStatModel::RequestRoundStatSummary();


// Function  DiscoveryOnline.IEmbarkOnlineSurveySettingsModel.GetSurveySettings
// Offset::0x17AE8A0;
FApiGatewaySharedGetSurveySettingsResponse FIEmbarkOnlineSurveySettingsModel::GetSurveySettings();


// Function  DiscoveryOnline.IEmbarkOnlineSurveySettingsModel.RequestSurveySettings
// Offset::0x17AE990;
void FIEmbarkOnlineSurveySettingsModel::RequestSurveySettings(FString Locale);


// Function  DiscoveryOnline.IEmbarkOnlineTournamentsModel.AbandonTournament
// Offset::0x17AF430;
void FIEmbarkOnlineTournamentsModel::AbandonTournament(FString TournamentId);


// Function  DiscoveryOnline.IEmbarkOnlineTournamentsModel.GetTournamentSession
// Offset::0x17AA8C0;
void FIEmbarkOnlineTournamentsModel::GetTournamentSession();


// Function  DiscoveryOnline.IEmbarkOnlineTournamentsModel.IsJoiningTournament
// Offset::0x17AF4E0;
bool FIEmbarkOnlineTournamentsModel::IsJoiningTournament();


// Function  DiscoveryOnline.IEmbarkOnlineTournamentsModel.JoinTournamentMatch
// Offset::0x1799CB0;
void FIEmbarkOnlineTournamentsModel::JoinTournamentMatch();


// Function  DiscoveryOnline.IEmbarkOnlineTournamentsModel.MonitorTournament
// Offset::0x17AF620;
void FIEmbarkOnlineTournamentsModel::MonitorTournament(FString TournamentId);


// Function  DiscoveryOnline.IEmbarkOnlineTournamentsModel.TravelToTierMatch
// Offset::0x17AF510;
bool FIEmbarkOnlineTournamentsModel::TravelToTierMatch(FApiGatewayDiscoveryGameServer TournamentGameServer);


// Function  DiscoveryOnline.DefaultTournamentsModel.ExecuteJoinTournamentRequestOnGuid
// Offset::0x17920D0;
void FDefaultTournamentsModel::ExecuteJoinTournamentRequestOnGuid(FGuid InDesiredGuid);


// Function  DiscoveryOnline.DefaultTournamentsModel.JoinGameserverMatch
// Offset::0x1791F80;
void FDefaultTournamentsModel::JoinGameserverMatch(FString InGacId,FGuid InGuid);


// Function  DiscoveryOnline.DefaultTournamentsModel.OnPreloadMap
// Offset::0x1791ED0;
void FDefaultTournamentsModel::OnPreloadMap(FString MapName);


// Function  DiscoveryOnline.DefaultTournamentsModel.TriggerRetryTournamentJoinRequest
// Offset::0x1792170;
void FDefaultTournamentsModel::TriggerRetryTournamentJoinRequest(FGuid InRelevantGuid);


// Function  DiscoveryOnline.InventoryServiceDiscoveryContestantPackItem.IsEmpty
// Offset::0x17938E0;
bool FInventoryServiceDiscoveryContestantPackItem::IsEmpty();


// Function  DiscoveryOnline.InventoryServiceQuestDescriptionModel.DumpToLog
// Offset::0x1794240;
void FInventoryServiceQuestDescriptionModel::DumpToLog();


// Function  DiscoveryOnline.InventoryServiceQuestDescriptionModel.GetAllQuestSlotIds
// Offset::0x1794510;
TArray<int64_t> FInventoryServiceQuestDescriptionModel::GetAllQuestSlotIds();


// Function  DiscoveryOnline.InventoryServiceQuestDescriptionModel.GetCircuitsOfType
// Offset::0x1794260;
TArray<FCircuit> FInventoryServiceQuestDescriptionModel::GetCircuitsOfType(enum class ECircuitType InType,bool bIncludeExpired);


// Function  DiscoveryOnline.DiscoveryOnlineClientAdmin.AbandonMatch
// Offset::0x1794AD0;
void FDiscoveryOnlineClientAdmin::AbandonMatch(FDelegate Delegate);


// Function  DiscoveryOnline.DiscoveryOnlineClientAdmin.ClearBan
// Offset::0x1794AD0;
void FDiscoveryOnlineClientAdmin::ClearBan(FDelegate Delegate);


// Function  DiscoveryOnline.DiscoveryOnlineClientAdmin.ClearReconnect
// Offset::0x1794AD0;
void FDiscoveryOnlineClientAdmin::ClearReconnect(FDelegate Delegate);


// Function  DiscoveryOnline.DiscoveryOnlineClientAdmin.GetDevInstanceKey
// Offset::0x1794B90;
FString FDiscoveryOnlineClientAdmin::GetDevInstanceKey();


// Function  DiscoveryOnline.DiscoveryOnlineClientAdmin.GiveCurrency
// Offset::0x1794960;
void FDiscoveryOnlineClientAdmin::GiveCurrency(int64_t Amount,FDelegate Delegate,enum class EApiGatewayDiscoveryAdminCurrencyType CurrencyType);


// Function  DiscoveryOnline.DiscoveryOnlineClientAdmin.HasAccess
// Offset::0x1794AD0;
void FDiscoveryOnlineClientAdmin::HasAccess(FDelegate Delegate);


// Function  DiscoveryOnline.DiscoveryOnlineClientAdmin.ResetInventory
// Offset::0x1794AD0;
void FDiscoveryOnlineClientAdmin::ResetInventory(FDelegate Delegate);


// Function  DiscoveryOnline.DiscoveryOnlineClientAdmin.ResetProgression
// Offset::0x1794AD0;
void FDiscoveryOnlineClientAdmin::ResetProgression(FDelegate Delegate);


// Function  DiscoveryOnline.DiscoveryOnlineClientAdmin.ResetRoundStats
// Offset::0x1794AD0;
void FDiscoveryOnlineClientAdmin::ResetRoundStats(FDelegate Delegate);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.Deinitialize
// Offset::0x2341800;
void FIEmbarkOnlineClientServices::Deinitialize();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.Get
// Offset::0x26D21B0;
FIEmbarkOnlineClientServices* FIEmbarkOnlineClientServices::Get(FObject* InObj);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetAchievementsModel
// Offset::0x179D390;
FIEmbarkOnlineAchievementsModel* FIEmbarkOnlineClientServices::GetAchievementsModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetAnnouncementsModel
// Offset::0x179B0B0;
FIEmbarkOnlineAnnouncementsModel* FIEmbarkOnlineClientServices::GetAnnouncementsModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetBattlePassModel
// Offset::0x26D2400;
FIEmbarkOnlineBattlePassModel* FIEmbarkOnlineClientServices::GetBattlePassModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetBuildModel
// Offset::0x26D22B0;
FIEmbarkOnlineBuildModel* FIEmbarkOnlineClientServices::GetBuildModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetContext
// Offset::0x26D2430;
FEmbarkApiContext* FIEmbarkOnlineClientServices::GetContext();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetFriendsModel
// Offset::0x26D23D0;
FIEmbarkOnlineFriendsModel* FIEmbarkOnlineClientServices::GetFriendsModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetGameSettingsModel
// Offset::0x26D2250;
FIEmbarkOnlineGameSettingsModel* FIEmbarkOnlineClientServices::GetGameSettingsModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetIdentityModel
// Offset::0x26D23A0;
FIEmbarkOnlineIdentityModel* FIEmbarkOnlineClientServices::GetIdentityModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetInventoryModel
// Offset::0x26D2370;
FIEmbarkOnlineInventoryModel* FIEmbarkOnlineClientServices::GetInventoryModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetManifestModel
// Offset::0x26D2340;
FIEmbarkOnlineManifestModel* FIEmbarkOnlineClientServices::GetManifestModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetMatchesModel
// Offset::0x179F060;
FIEmbarkOnlineMatchSessionInterface* FIEmbarkOnlineClientServices::GetMatchesModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetMatchmakingModel
// Offset::0x26D2310;
FIEmbarkOnlineMatchmakingModel* FIEmbarkOnlineClientServices::GetMatchmakingModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetPersistentPlayerKeysModel
// Offset::0x26D2280;
FIEmbarkOnlinePersistentPlayerKeysModel* FIEmbarkOnlineClientServices::GetPersistentPlayerKeysModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetRewardModel
// Offset::0x17A1E20;
FIEmbarkOnlineRewardModel* FIEmbarkOnlineClientServices::GetRewardModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetStoreModel
// Offset::0x26D22E0;
FIEmbarkOnlineStoreModel* FIEmbarkOnlineClientServices::GetStoreModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.GetVoiceChatModel
// Offset::0x26D0B40;
FIEmbarkOnlineVoiceChatModel* FIEmbarkOnlineClientServices::GetVoiceChatModel();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.Initialize
// Offset::0x26D2460;
FIEmbarkOnlineClientServices* FIEmbarkOnlineClientServices::Initialize(FLocalPlayer* InLocalPlayer);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.IsInTestMode
// Offset::0x243E320;
bool FIEmbarkOnlineClientServices::IsInTestMode();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServices.ShowExternalUI
// Offset::0x20E8030;
void FIEmbarkOnlineClientServices::ShowExternalUI();


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetContestantPackModel
// Offset::0x1795690;
FIDiscoveryOnlineContestantPackModel* FIDiscoveryOnlineClientServices::GetContestantPackModel();


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetDiscoveryInventoryModel
// Offset::0x1795720;
FIDiscoveryOnlineInventoryModel* FIDiscoveryOnlineClientServices::GetDiscoveryInventoryModel();


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetDiscoveryOnlineClientServices
// Offset::0x17954D0;
FIDiscoveryOnlineClientServices* FIDiscoveryOnlineClientServices::GetDiscoveryOnlineClientServices(FObject* InObj);


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetLeaderboardsModel
// Offset::0x17955A0;
FIDiscoveryOnlineLeaderboardsModel* FIDiscoveryOnlineClientServices::GetLeaderboardsModel();


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetLeagueModel
// Offset::0x1795600;
FIDiscoveryOnlineLeagueModel* FIDiscoveryOnlineClientServices::GetLeagueModel();


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetPrivateLobbyModel
// Offset::0x1795570;
FIDiscoveryOnlinePrivateLobbyModel* FIDiscoveryOnlineClientServices::GetPrivateLobbyModel();


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetRankModel
// Offset::0x1795630;
FIDiscoveryOnlineRankModel* FIDiscoveryOnlineClientServices::GetRankModel();


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetRoundStatModel
// Offset::0x17956F0;
FIEmbarkOnlineRoundStatModel* FIDiscoveryOnlineClientServices::GetRoundStatModel();


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetScenarioModel
// Offset::0x17955D0;
FIDiscoveryOnlineScenarioModel* FIDiscoveryOnlineClientServices::GetScenarioModel();


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetSurveySettingsModel
// Offset::0x1795660;
FIEmbarkOnlineSurveySettingsModel* FIDiscoveryOnlineClientServices::GetSurveySettingsModel();


// Function  DiscoveryOnline.IDiscoveryOnlineClientServices.GetTournamentsModel
// Offset::0x17956C0;
FIEmbarkOnlineTournamentsModel* FIDiscoveryOnlineClientServices::GetTournamentsModel();


// Function  DiscoveryOnline.IDiscoveryOnlineContestantPackModel.GetContestantPacks
// Offset::0x17997E0;
TArray<FApiGatewayDiscoveryPlayerPersistenceContestantPack> FIDiscoveryOnlineContestantPackModel::GetContestantPacks();


// Function  DiscoveryOnline.IDiscoveryOnlineContestantPackModel.RequestAddContestantPack
// Offset::0x1799BB0;
void FIDiscoveryOnlineContestantPackModel::RequestAddContestantPack(FApiGatewayDiscoveryCreateContestantPackRequest req);


// Function  DiscoveryOnline.IDiscoveryOnlineContestantPackModel.RequestBatchUpdateContestantPacks
// Offset::0x17998B0;
void FIDiscoveryOnlineContestantPackModel::RequestBatchUpdateContestantPacks(TArray<FApiGatewayDiscoveryPlayerPersistenceContestantPack> packs);


// Function  DiscoveryOnline.IDiscoveryOnlineContestantPackModel.RequestContestantPacks
// Offset::0x1799CB0;
void FIDiscoveryOnlineContestantPackModel::RequestContestantPacks();


// Function  DiscoveryOnline.IDiscoveryOnlineContestantPackModel.RequestRemoveContestantPack
// Offset::0x1799AB0;
void FIDiscoveryOnlineContestantPackModel::RequestRemoveContestantPack(FString InstanceId,FString Etag);


// Function  DiscoveryOnline.IDiscoveryOnlineContestantPackModel.RequestUpdateContestantPack
// Offset::0x1799990;
void FIDiscoveryOnlineContestantPackModel::RequestUpdateContestantPack(FApiGatewayDiscoveryPlayerPersistenceContestantPack Pack);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineInventoryModel.ClearCurrentTournamentInventories
// Offset::0x179DDF0;
void FIEmbarkOnlineInventoryModel::ClearCurrentTournamentInventories();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineInventoryModel.GetInventory
// Offset::0x26D2310;
FInventoryServiceInventory* FIEmbarkOnlineInventoryModel::GetInventory();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineInventoryModel.GetPartyMemberInventory
// Offset::0x26E9D20;
FInventoryServiceInventory* FIEmbarkOnlineInventoryModel::GetPartyMemberInventory(FUniqueNetIdRepl PartyMemberNetId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineInventoryModel.GetPlayerTournamentInventory
// Offset::0x26E9C10;
FInventoryServiceInventory* FIEmbarkOnlineInventoryModel::GetPlayerTournamentInventory(FUniqueNetIdRepl PartyMemberNetId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineInventoryModel.SyncActiveTournamentInventories
// Offset::0x179D370;
void FIEmbarkOnlineInventoryModel::SyncActiveTournamentInventories();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineInventoryModel.SyncInventory
// Offset::0x17AA8C0;
void FIEmbarkOnlineInventoryModel::SyncInventory();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineInventoryModel.SyncPartyInventories
// Offset::0x179F4A0;
void FIEmbarkOnlineInventoryModel::SyncPartyInventories();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineInventoryModel.SyncQuestDescription
// Offset::0x17A1E00;
void FIEmbarkOnlineInventoryModel::SyncQuestDescription();


// Function  DiscoveryOnline.IDiscoveryOnlineInventoryModel.AddContestantPack
// Offset::0x179AED0;
void FIDiscoveryOnlineInventoryModel::AddContestantPack(FApiGatewayDiscoveryCreateContestantPackRequest req);


// Function  DiscoveryOnline.IDiscoveryOnlineInventoryModel.BatchUpdateContestantPacks
// Offset::0x179AFD0;
void FIDiscoveryOnlineInventoryModel::BatchUpdateContestantPacks(TArray<FApiGatewayDiscoveryPlayerPersistenceContestantPack> ContestantPacks);


// Function  DiscoveryOnline.IDiscoveryOnlineInventoryModel.GetCreditExpirations
// Offset::0x179B1D0;
TArray<FApiGatewayDiscoveryCreditExpiration> FIDiscoveryOnlineInventoryModel::GetCreditExpirations();


// Function  DiscoveryOnline.IDiscoveryOnlineInventoryModel.GetQuestDescription
// Offset::0x179B0B0;
FInventoryServiceQuestDescriptionModel* FIDiscoveryOnlineInventoryModel::GetQuestDescription();


// Function  DiscoveryOnline.IDiscoveryOnlineInventoryModel.GetQuestTrackingData
// Offset::0x179B0E0;
FDiscoveryQuestTrackingData FIDiscoveryOnlineInventoryModel::GetQuestTrackingData();


// Function  DiscoveryOnline.IDiscoveryOnlineInventoryModel.MutateInventoryItem
// Offset::0x179B2C0;
bool FIDiscoveryOnlineInventoryModel::MutateInventoryItem(FInventoryServiceItemBase* Item);


// Function  DiscoveryOnline.IDiscoveryOnlineInventoryModel.RemoveContestantPack
// Offset::0x179ADD0;
void FIDiscoveryOnlineInventoryModel::RemoveContestantPack(FString InstanceId,FString Etag);


// Function  DiscoveryOnline.IDiscoveryOnlineInventoryModel.RerollQuests
// Offset::0x179ACD0;
bool FIDiscoveryOnlineInventoryModel::RerollQuests(TArray<FString> QuestInstanceIds);


// Function  DiscoveryOnline.IDiscoveryOnlineInventoryModel.SetQuestTrackingState
// Offset::0x179AB90;
void FIDiscoveryOnlineInventoryModel::SetQuestTrackingState(bool bNewState,TArray<FString> QuestInstanceIds);


// Function  DiscoveryOnline.DiscoveryOnlineInventoryModel.OnGetQuestTrackingData
// Offset::0x179A320;
void FDiscoveryOnlineInventoryModel::OnGetQuestTrackingData();


// Function  DiscoveryOnline.DiscoveryOnlineInventoryModel.OnSetPlayerPersistenceKey
// Offset::0x179A360;
void FDiscoveryOnlineInventoryModel::OnSetPlayerPersistenceKey(bool bSucceeded,FGameplayTag Key,FString Value);


// Function  DiscoveryOnline.DiscoveryOnlineInventoryModel.RefreshQuestTrackingData
// Offset::0x179A340;
void FDiscoveryOnlineInventoryModel::RefreshQuestTrackingData();


// Function  DiscoveryOnline.IDiscoveryOnlineLeaderboardsModel.GetLeaderboard
// Offset::0x179D390;
FDiscoveryLeaderboard* FIDiscoveryOnlineLeaderboardsModel::GetLeaderboard();


// Function  DiscoveryOnline.IDiscoveryOnlineLeaderboardsModel.SyncLeaderboard
// Offset::0x179D370;
void FIDiscoveryOnlineLeaderboardsModel::SyncLeaderboard();


// Function  DiscoveryOnline.IDiscoveryOnlineLeagueModel.FetchPartyRanks
// Offset::0x179DDF0;
void FIDiscoveryOnlineLeagueModel::FetchPartyRanks();


// Function  DiscoveryOnline.IDiscoveryOnlineLeagueModel.FetchPlayerRank
// Offset::0x179DEB0;
void FIDiscoveryOnlineLeagueModel::FetchPlayerRank();


// Function  DiscoveryOnline.IDiscoveryOnlineLeagueModel.GetLeagueRank
// Offset::0x179DE40;
FApiGatewayDiscoveryGetLeagueRankResponse FIDiscoveryOnlineLeagueModel::GetLeagueRank();


// Function  DiscoveryOnline.IDiscoveryOnlineLeagueModel.GetPartyMemberLeagueRank
// Offset::0x179DCE0;
int32_t FIDiscoveryOnlineLeagueModel::GetPartyMemberLeagueRank(FUniqueNetIdRepl NetId);


// Function  DiscoveryOnline.IDiscoveryOnlineLeagueModel.HasCompletedRankFetch
// Offset::0x179DE10;
bool FIDiscoveryOnlineLeagueModel::HasCompletedRankFetch();


// Function  DiscoveryOnline.IDiscoveryOnlinePrivateLobbyModel.CanChangePlayerSquad
// Offset::0x179DE10;
bool FIDiscoveryOnlinePrivateLobbyModel::CanChangePlayerSquad();


// Function  DiscoveryOnline.IDiscoveryOnlinePrivateLobbyModel.CanKickPlayer
// Offset::0x179F2E0;
bool FIDiscoveryOnlinePrivateLobbyModel::CanKickPlayer(FUniqueNetIdRepl EmbarkUserId);


// Function  DiscoveryOnline.IDiscoveryOnlinePrivateLobbyModel.ChangePlayerSquad
// Offset::0x179F090;
void FIDiscoveryOnlinePrivateLobbyModel::ChangePlayerSquad(FUniqueNetIdRepl EmbarkUserId,int32_t ToSquadIndex);


// Function  DiscoveryOnline.IDiscoveryOnlinePrivateLobbyModel.CreatePrivateLobby
// Offset::0x179F590;
void FIDiscoveryOnlinePrivateLobbyModel::CreatePrivateLobby(FString GameMode,FString MapName);


// Function  DiscoveryOnline.IDiscoveryOnlinePrivateLobbyModel.GetCurrentLobby
// Offset::0x179F060;
FDiscoveryPrivateLobby* FIDiscoveryOnlinePrivateLobbyModel::GetCurrentLobby();


// Function  DiscoveryOnline.IDiscoveryOnlinePrivateLobbyModel.JoinPrivateLobby
// Offset::0x179F4E0;
void FIDiscoveryOnlinePrivateLobbyModel::JoinPrivateLobby(FString LobbyId);


// Function  DiscoveryOnline.IDiscoveryOnlinePrivateLobbyModel.KickPlayer
// Offset::0x179F1E0;
void FIDiscoveryOnlinePrivateLobbyModel::KickPlayer(FUniqueNetIdRepl EmbarkUserId);


// Function  DiscoveryOnline.IDiscoveryOnlinePrivateLobbyModel.LeavePrivateLobby
// Offset::0x179F4C0;
void FIDiscoveryOnlinePrivateLobbyModel::LeavePrivateLobby();


// Function  DiscoveryOnline.IDiscoveryOnlinePrivateLobbyModel.StartPrivateLobby
// Offset::0x179F4A0;
void FIDiscoveryOnlinePrivateLobbyModel::StartPrivateLobby();


// Function  DiscoveryOnline.IDiscoveryOnlinePrivateLobbyModel.UpdatePrivateLobby
// Offset::0x179F3F0;
void FIDiscoveryOnlinePrivateLobbyModel::UpdatePrivateLobby(FString MapName);


// Function  DiscoveryOnline.IDiscoveryOnlineRankModel.ActivateItemRank
// Offset::0x17A1C00;
void FIDiscoveryOnlineRankModel::ActivateItemRank(FString ItemId,FString Etag);


// Function  DiscoveryOnline.IDiscoveryOnlineRankModel.GetPlayerRankInfo
// Offset::0x17A1E20;
FDiscoveryPlayerRankInfo* FIDiscoveryOnlineRankModel::GetPlayerRankInfo();


// Function  DiscoveryOnline.IDiscoveryOnlineRankModel.SyncPlayerRanks
// Offset::0x17A1E00;
void FIDiscoveryOnlineRankModel::SyncPlayerRanks();


// Function  DiscoveryOnline.IDiscoveryOnlineRankModel.UpgradeItem
// Offset::0x17A1D00;
void FIDiscoveryOnlineRankModel::UpgradeItem(FString ItemId,int32_t NextLevel);


// Function  DiscoveryOnline.IDiscoveryOnlineScenarioModel.GetScenarioList
// Offset::0x179F060;
FDiscoveryScenarioList* FIDiscoveryOnlineScenarioModel::GetScenarioList();


// Function  DiscoveryOnline.IDiscoveryOnlineScenarioModel.SyncScenarioList
// Offset::0x179DDF0;
void FIDiscoveryOnlineScenarioModel::SyncScenarioList();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.ApplyManifest
// Offset::0x26FB390;
bool FIEmbarkOnlineServerServices::ApplyManifest(FString ManifestContent);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.Deinitialize
// Offset::0x233BA10;
void FIEmbarkOnlineServerServices::Deinitialize();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.Get
// Offset::0x26FA7B0;
FIEmbarkOnlineServerServices* FIEmbarkOnlineServerServices::Get(FObject* WorldContextObject);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.GetContext
// Offset::0x26D23D0;
FEmbarkApiContext* FIEmbarkOnlineServerServices::GetContext();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.GetManifest
// Offset::0x26D23A0;
FServiceManifest* FIEmbarkOnlineServerServices::GetManifest();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.GetRegisteredSquads
// Offset::0x26FAFB0;
bool FIEmbarkOnlineServerServices::GetRegisteredSquads(TMap<FString,FOnlineSquadInfo> OutSquads);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.GetSquadVoipChannel
// Offset::0x26FAAB0;
bool FIEmbarkOnlineServerServices::GetSquadVoipChannel(FUniqueNetIdRepl NetId,FVoiceChannelInfo OutVoiceChannelInfo);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.GetTweakablesAsync
// Offset::0x26FB2E0;
bool FIEmbarkOnlineServerServices::GetTweakablesAsync(FString ArtifactId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.IncreaseMatchSize
// Offset::0x26FA850;
void FIEmbarkOnlineServerServices::IncreaseMatchSize(FString MatchId,int64_t AddedCapacity);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.Initialize
// Offset::0x179B0B0;
FIEmbarkOnlineServerServices* FIEmbarkOnlineServerServices::Initialize();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.IsInTestMode
// Offset::0x243E320;
bool FIEmbarkOnlineServerServices::IsInTestMode();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.KickPlayerFromSquadVoipChannel
// Offset::0x26FAC60;
void FIEmbarkOnlineServerServices::KickPlayerFromSquadVoipChannel(FUniqueNetIdRepl NetId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.QuerySquadVoipChannelsByPlayerId
// Offset::0x26FAD60;
void FIEmbarkOnlineServerServices::QuerySquadVoipChannelsByPlayerId(FString SquadId,FUniqueNetIdRepl NetId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.QuerySquadVoipChannelsBySquadIds
// Offset::0x26FAEC0;
void FIEmbarkOnlineServerServices::QuerySquadVoipChannelsBySquadIds(TArray<FString> SquadIds);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.QuerySquadVoipChannelsForRegisteredSquads
// Offset::0x179DEB0;
void FIEmbarkOnlineServerServices::QuerySquadVoipChannelsForRegisteredSquads();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.RegisterPlayerToSquad
// Offset::0x26FB0D0;
bool FIEmbarkOnlineServerServices::RegisterPlayerToSquad(FString SquadId,FUniqueNetIdRepl NetId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.RegisterSquadsFromAnnotation
// Offset::0x26FB230;
bool FIEmbarkOnlineServerServices::RegisterSquadsFromAnnotation(FString JsonBlob);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServices.ReportPlayerDisconnected
// Offset::0x26FA950;
void FIEmbarkOnlineServerServices::ReportPlayerDisconnected(FString MatchId,FUniqueNetIdRepl PlayerId);


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.GetActivatedItemRank
// Offset::0x17A6110;
FString FIDiscoveryOnlineServerServices::GetActivatedItemRank(FUniqueNetIdRepl PlayerId);


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.GetActivatedItemRanks
// Offset::0x17A6250;
bool FIDiscoveryOnlineServerServices::GetActivatedItemRanks(TArray<FUniqueNetIdRepl> UniqueNetIdRepls);


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.GetAllInventories
// Offset::0x17A63F0;
TArray<FInventoryServiceInventory*> FIDiscoveryOnlineServerServices::GetAllInventories();


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.GetInventory
// Offset::0x17A6470;
FInventoryServiceInventory* FIDiscoveryOnlineServerServices::GetInventory(FUniqueNetIdRepl PlayerId);


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.GetQuestDescription
// Offset::0x1795660;
FInventoryServiceQuestDescriptionModel* FIDiscoveryOnlineServerServices::GetQuestDescription();


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.HasActivatedItemRanks
// Offset::0x17A60E0;
bool FIDiscoveryOnlineServerServices::HasActivatedItemRanks();


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.HasInventories
// Offset::0x17A63C0;
bool FIDiscoveryOnlineServerServices::HasInventories();


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.HasQuestDescription
// Offset::0x17A6370;
bool FIDiscoveryOnlineServerServices::HasQuestDescription();


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.ReportPlayerAbandoned
// Offset::0x17A5AB0;
void FIDiscoveryOnlineServerServices::ReportPlayerAbandoned(FUniqueNetIdRepl PlayerId,FString TournamentId,int64_t TimeOfAbandon,bool bImposeSanction,FString GameServer);


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.ReportTournamentMatchProgress
// Offset::0x17A5D20;
bool FIDiscoveryOnlineServerServices::ReportTournamentMatchProgress(FString TournamentId,FString MatchId,int32_t ExpectedEndTime);


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.ReportTournamentMatchResult
// Offset::0x17A5E80;
bool FIDiscoveryOnlineServerServices::ReportTournamentMatchResult(FString TournamentId,FString MatchId,TArray<int32_t> WinningTeamIds,TMap<FString,FString> TravelData);


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.SendMatchHeartbeat
// Offset::0x17A59A0;
bool FIDiscoveryOnlineServerServices::SendMatchHeartbeat(FString TournamentId,FString MatchId);


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.SubmitMatchReport
// Offset::0x17A5640;
bool FIDiscoveryOnlineServerServices::SubmitMatchReport(FString MatchId,FString ScenarioId,TArray<FOnlineMatchReportSquadEntry> ParticipatedSquads,TMap<FString,int32_t> SquadScores);


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.SyncInventories
// Offset::0x17A6580;
bool FIDiscoveryOnlineServerServices::SyncInventories(TArray<FUniqueNetIdRepl> UniqueNetIdRepls);


// Function  DiscoveryOnline.IDiscoveryOnlineServerServices.SyncQuestDescription
// Offset::0x17A63A0;
void FIDiscoveryOnlineServerServices::SyncQuestDescription();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.ClaimGifts
// Offset::0x233B9F0;
void FIEmbarkOnlineStoreModel::ClaimGifts();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.ClearGiftItemsCache
// Offset::0x1799CB0;
void FIEmbarkOnlineStoreModel::ClearGiftItemsCache();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.ClearPurchasedItemsCache
// Offset::0x1B91E90;
void FIEmbarkOnlineStoreModel::ClearPurchasedItemsCache();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.EnterStore
// Offset::0x179DEB0;
void FIEmbarkOnlineStoreModel::EnterStore();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.GetGiftItemsCache
// Offset::0x26FFDD0;
TArray<FStoreReconciledProduct*> FIEmbarkOnlineStoreModel::GetGiftItemsCache();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.GetPurchasedItemsCache
// Offset::0x26FFE50;
TArray<FStoreReconciledProduct*> FIEmbarkOnlineStoreModel::GetPurchasedItemsCache();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.GetStoreRecommendations
// Offset::0x17955A0;
FStoreRecommendations* FIEmbarkOnlineStoreModel::GetStoreRecommendations();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.GetThirdPartyStoreTelemetryName
// Offset::0x26FFD50;
FString FIEmbarkOnlineStoreModel::GetThirdPartyStoreTelemetryName();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.HasGiftItemsCache
// Offset::0x26E1690;
bool FIEmbarkOnlineStoreModel::HasGiftItemsCache();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.HasPurchasedItemsCache
// Offset::0x1AA60D0;
bool FIEmbarkOnlineStoreModel::HasPurchasedItemsCache();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.HasStoreRecommendations
// Offset::0x1BAAF80;
bool FIEmbarkOnlineStoreModel::HasStoreRecommendations();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.IsInStore
// Offset::0x179DE10;
bool FIEmbarkOnlineStoreModel::IsInStore();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.LeaveStore
// Offset::0x17AA8C0;
void FIEmbarkOnlineStoreModel::LeaveStore();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.PurchaseDownloadableContent
// Offset::0x26FFFD0;
void FIEmbarkOnlineStoreModel::PurchaseDownloadableContent(FString InTransactionId,FString InThirdPartyOfferId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.PurchaseStoreOffer
// Offset::0x27001D0;
void FIEmbarkOnlineStoreModel::PurchaseStoreOffer(FString InTransactionId,int64_t InOfferId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.PurchaseThirdPartyStoreOffer
// Offset::0x27000D0;
void FIEmbarkOnlineStoreModel::PurchaseThirdPartyStoreOffer(FString InTransactionId,FString InThirdPartyOfferId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.RedeemOutstandingThirdPartyPurchases
// Offset::0x26FFED0;
void FIEmbarkOnlineStoreModel::RedeemOutstandingThirdPartyPurchases(FString InTransactionId,bool bForceQueryReceipts);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.ShowThirdPartyStoreProduct
// Offset::0x17AE990;
void FIEmbarkOnlineStoreModel::ShowThirdPartyStoreProduct(FString ThirdPartyOfferId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineStoreModel.SyncStoreRecommendations
// Offset::0x27002D0;
void FIEmbarkOnlineStoreModel::SyncStoreRecommendations();


// Function  DiscoveryOnline.DiscoveryPlayerRankInfo.GetRankInfoByBucketId
// Offset::0x17A9A30;
FDiscoveryRankInfo* FDiscoveryPlayerRankInfo::GetRankInfoByBucketId(FString BucketId);


// Function  DiscoveryOnline.DiscoveryPlayerRankInfo.HasRankInfoByBucketId
// Offset::0x17A9AE0;
bool FDiscoveryPlayerRankInfo::HasRankInfoByBucketId(FString BucketId);


// Function  DiscoveryOnline.DiscoveryPlayerRankInfo.UpdateDerivedProperties
// Offset::0x17A9B90;
bool FDiscoveryPlayerRankInfo::UpdateDerivedProperties();


// Function  DiscoveryOnline.InventoryConversion.FillInInventoryModel
// Offset::0x17B0C10;
bool FInventoryConversion::FillInInventoryModel(FInventoryServiceQuestDescriptionModel* ModelToFillIn,FApiGatewayDiscoveryGetQuestDescriptionResponse InContext);


// Function  DiscoveryOnline.InventoryConversion.RerollQuestsFromGateway
// Offset::0x17B0B10;
bool FInventoryConversion::RerollQuestsFromGateway(FInventoryServiceInventory* Inventory,FApiGatewayDiscoveryRerollQuestsResponse Response);


// Function  AngelscriptCode.GameplayLibrary.AsyncLoadGameFromSlot
// Offset::0x1A74680;
void FGameplayLibrary::AsyncLoadGameFromSlot(FString SlotName,int32_t UserIndex,FDelegate Delegate);


// Function  AngelscriptCode.GameplayLibrary.AsyncSaveGameToSlot
// Offset::0x1A748A0;
void FGameplayLibrary::AsyncSaveGameToSlot(FSaveGame* SaveGameObject,FString SlotName,int32_t UserIndex,FDelegate Delegate);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.AddLeafTag
// Offset::0x1A766B0;
void FGameplayTagContainerMixinLibrary::AddLeafTag(FGameplayTagContainer GameplayTagContainer,FGameplayTag TagToAdd);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.AddTag
// Offset::0x1A76910;
void FGameplayTagContainerMixinLibrary::AddTag(FGameplayTagContainer GameplayTagContainer,FGameplayTag TagToAdd);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.AddTagFast
// Offset::0x1A767E0;
void FGameplayTagContainerMixinLibrary::AddTagFast(FGameplayTagContainer GameplayTagContainer,FGameplayTag TagToAdd);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.Filter
// Offset::0x1A75360;
FGameplayTagContainer FGameplayTagContainerMixinLibrary::Filter(FGameplayTagContainer GameplayTagContainer,FGameplayTagContainer OtherContainer);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.FilterExact
// Offset::0x1A751C0;
FGameplayTagContainer FGameplayTagContainerMixinLibrary::FilterExact(FGameplayTagContainer GameplayTagContainer,FGameplayTagContainer OtherContainer);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.First
// Offset::0x1A74E30;
FGameplayTag FGameplayTagContainerMixinLibrary::First(FGameplayTagContainer GameplayTagContainer);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.GetGameplayTagParents
// Offset::0x1A75500;
FGameplayTagContainer FGameplayTagContainerMixinLibrary::GetGameplayTagParents(FGameplayTagContainer GameplayTagContainer);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.HasAll
// Offset::0x1A75AC0;
bool FGameplayTagContainerMixinLibrary::HasAll(FGameplayTagContainer GameplayTagContainer,FGameplayTagContainer ContainerToCheck);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.HasAllExact
// Offset::0x1A758A0;
bool FGameplayTagContainerMixinLibrary::HasAllExact(FGameplayTagContainer GameplayTagContainer,FGameplayTagContainer ContainerToCheck);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.HasAny
// Offset::0x1A75EC0;
bool FGameplayTagContainerMixinLibrary::HasAny(FGameplayTagContainer GameplayTagContainer,FGameplayTagContainer ContainerToCheck);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.HasAnyExact
// Offset::0x1A75CB0;
bool FGameplayTagContainerMixinLibrary::HasAnyExact(FGameplayTagContainer GameplayTagContainer,FGameplayTagContainer ContainerToCheck);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.HasTag
// Offset::0x1A76230;
bool FGameplayTagContainerMixinLibrary::HasTag(FGameplayTagContainer GameplayTagContainer,FGameplayTag TagToCheck);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.HasTagExact
// Offset::0x1A760A0;
bool FGameplayTagContainerMixinLibrary::HasTagExact(FGameplayTagContainer GameplayTagContainer,FGameplayTag TagToCheck);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.IsEmpty
// Offset::0x1A75620;
bool FGameplayTagContainerMixinLibrary::IsEmpty(FGameplayTagContainer GameplayTagContainer);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.IsValid
// Offset::0x1A75700;
bool FGameplayTagContainerMixinLibrary::IsValid(FGameplayTagContainer GameplayTagContainer);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.Last
// Offset::0x1A74F30;
FGameplayTag FGameplayTagContainerMixinLibrary::Last(FGameplayTagContainer GameplayTagContainer);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.MatchesQuery
// Offset::0x1A75030;
bool FGameplayTagContainerMixinLibrary::MatchesQuery(FGameplayTagContainer GameplayTagContainer,FGameplayTagQuery Query);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.Num
// Offset::0x1A757D0;
int32_t FGameplayTagContainerMixinLibrary::Num(FGameplayTagContainer GameplayTagContainer);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.RemoveTag
// Offset::0x1A76570;
bool FGameplayTagContainerMixinLibrary::RemoveTag(FGameplayTagContainer GameplayTagContainer,FGameplayTag TagToRemove);


// Function  AngelscriptCode.GameplayTagContainerMixinLibrary.RemoveTags
// Offset::0x1A763F0;
void FGameplayTagContainerMixinLibrary::RemoveTags(FGameplayTagContainer GameplayTagContainer,FGameplayTagContainer TagsToRemove);


// Function  AngelscriptCode.GameplayTagMixinLibrary.GetGameplayTagParents
// Offset::0x1A77670;
FGameplayTagContainer FGameplayTagMixinLibrary::GetGameplayTagParents(FGameplayTag GameplayTag);


// Function  AngelscriptCode.GameplayTagMixinLibrary.GetSingleTagContainer
// Offset::0x1A77830;
FGameplayTagContainer FGameplayTagMixinLibrary::GetSingleTagContainer(FGameplayTag GameplayTag);


// Function  AngelscriptCode.GameplayTagMixinLibrary.IsValid
// Offset::0x1A77950;
bool FGameplayTagMixinLibrary::IsValid(FGameplayTag GameplayTag);


// Function  AngelscriptCode.GameplayTagMixinLibrary.MatchesAny
// Offset::0x1A77BB0;
bool FGameplayTagMixinLibrary::MatchesAny(FGameplayTag GameplayTag,FGameplayTagContainer ContainerToCheck);


// Function  AngelscriptCode.GameplayTagMixinLibrary.MatchesAnyExact
// Offset::0x1A77A10;
bool FGameplayTagMixinLibrary::MatchesAnyExact(FGameplayTag GameplayTag,FGameplayTagContainer ContainerToCheck);


// Function  AngelscriptCode.GameplayTagMixinLibrary.MatchesTag
// Offset::0x1A77F60;
bool FGameplayTagMixinLibrary::MatchesTag(FGameplayTag GameplayTag,FGameplayTag TagToCheck);


// Function  AngelscriptCode.GameplayTagMixinLibrary.MatchesTagDepth
// Offset::0x1A77CF0;
int32_t FGameplayTagMixinLibrary::MatchesTagDepth(FGameplayTag GameplayTag,FGameplayTag TagToCheck);


// Function  AngelscriptCode.GameplayTagMixinLibrary.MatchesTagExact
// Offset::0x1A77E00;
bool FGameplayTagMixinLibrary::MatchesTagExact(FGameplayTag GameplayTag,FGameplayTag TagToCheck);


// Function  AngelscriptCode.GameplayTagMixinLibrary.RequestDirectParent
// Offset::0x1A77760;
FGameplayTag FGameplayTagMixinLibrary::RequestDirectParent(FGameplayTag GameplayTag);


// Function  AngelscriptCode.GameplayTagQueryMixinLibrary.GetDescription
// Offset::0x1A78700;
FString FGameplayTagQueryMixinLibrary::GetDescription(FGameplayTagQuery GameplayTagQuery);


// Function  AngelscriptCode.GameplayTagQueryMixinLibrary.IsEmpty
// Offset::0x1A78880;
bool FGameplayTagQueryMixinLibrary::IsEmpty(FGameplayTagQuery GameplayTagQuery);


// Function  AngelscriptCode.GameplayTagQueryMixinLibrary.Matches
// Offset::0x1A78980;
bool FGameplayTagQueryMixinLibrary::Matches(FGameplayTagQuery GameplayTagQuery,FGameplayTagContainer Tags);


// Function  AngelscriptCode.InputComponentScriptMixinLibrary.BindAction
// Offset::0x1A7A660;
int32_t FInputComponentScriptMixinLibrary::BindAction(FInputComponent* Component,FName ActionName,enum class EInputEvent KeyEvent,FDelegate Delegate,bool bConsumeInput);


// Function  AngelscriptCode.InputComponentScriptMixinLibrary.BindAxis
// Offset::0x1A79720;
void FInputComponentScriptMixinLibrary::BindAxis(FInputComponent* Component,FName AxisName,FDelegate Delegate,bool bConsumeInput);


// Function  AngelscriptCode.InputComponentScriptMixinLibrary.BindAxisKey
// Offset::0x1A79300;
void FInputComponentScriptMixinLibrary::BindAxisKey(FInputComponent* Component,FName AxisKey,FDelegate Delegate,bool bConsumeInput);


// Function  AngelscriptCode.InputComponentScriptMixinLibrary.BindChord
// Offset::0x1A798D0;
void FInputComponentScriptMixinLibrary::BindChord(FInputComponent* Component,FInputChord Chord,enum class EInputEvent KeyEvent,FDelegate Delegate);


// Function  AngelscriptCode.InputComponentScriptMixinLibrary.BindKey
// Offset::0x1A79E30;
void FInputComponentScriptMixinLibrary::BindKey(FInputComponent* Component,FKey Key,enum class EInputEvent KeyEvent,FDelegate Delegate,bool bConsumeInput);


// Function  AngelscriptCode.InputComponentScriptMixinLibrary.BindVectorAxis
// Offset::0x1A78E80;
void FInputComponentScriptMixinLibrary::BindVectorAxis(FInputComponent* Component,FKey AxisKey,FDelegate Delegate);


// Function  AngelscriptCode.InputComponentScriptMixinLibrary.RemoveAction
// Offset::0x1A7A510;
void FInputComponentScriptMixinLibrary::RemoveAction(FInputComponent* Component,FName ActionName,enum class EInputEvent KeyEvent);


// Function  AngelscriptCode.InputComponentScriptMixinLibrary.RemoveActionBindingForHandle
// Offset::0x1A7A420;
void FInputComponentScriptMixinLibrary::RemoveActionBindingForHandle(FInputComponent* Component,int32_t Handle);


// Function  AngelscriptCode.PlayerControllerInputScriptMixinLibrary.GetPlayerInput
// Offset::0x1A7B230;
FPlayerInput* FPlayerControllerInputScriptMixinLibrary::GetPlayerInput(FPlayerController* PlayerController);


// Function  AngelscriptCode.PlayerControllerInputScriptMixinLibrary.PopInputComponent
// Offset::0x1A7B2E0;
void FPlayerControllerInputScriptMixinLibrary::PopInputComponent(FPlayerController* PlayerController,FInputComponent* Component);


// Function  AngelscriptCode.PlayerControllerInputScriptMixinLibrary.PushInputComponent
// Offset::0x1A7B3D0;
void FPlayerControllerInputScriptMixinLibrary::PushInputComponent(FPlayerController* PlayerController,FInputComponent* Component);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.AddActionMapping
// Offset::0x1A7C730;
void FPlayerInputScriptMixinLibrary::AddActionMapping(FPlayerInput* PlayerInput,FInputActionKeyMapping KeyMapping);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.AddAxisMapping
// Offset::0x1A7C3E0;
void FPlayerInputScriptMixinLibrary::AddAxisMapping(FPlayerInput* PlayerInput,FInputAxisKeyMapping KeyMapping);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.ForceRebuildingKeyMaps
// Offset::0x1A7C140;
void FPlayerInputScriptMixinLibrary::ForceRebuildingKeyMaps(FPlayerInput* PlayerInput,bool bRestoreDefaults);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.GetEngineDefinedActionMappings
// Offset::0x1A7BD60;
TArray<FInputActionKeyMapping> FPlayerInputScriptMixinLibrary::GetEngineDefinedActionMappings(FPlayerInput* PlayerInput,FName ActionName);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.GetEngineDefinedAxisMappings
// Offset::0x1A7BB80;
TArray<FInputAxisKeyMapping> FPlayerInputScriptMixinLibrary::GetEngineDefinedAxisMappings(FPlayerInput* PlayerInput,FName AxisName);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.GetKeysForAction
// Offset::0x1A7C040;
TArray<FInputActionKeyMapping> FPlayerInputScriptMixinLibrary::GetKeysForAction(FPlayerInput* PlayerInput,FName ActionName);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.GetKeysForAxis
// Offset::0x1A7BF40;
TArray<FInputAxisKeyMapping> FPlayerInputScriptMixinLibrary::GetKeysForAxis(FPlayerInput* PlayerInput,FName AxisName);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.GetMouseSensitivityX
// Offset::0x1A7B8F0;
float FPlayerInputScriptMixinLibrary::GetMouseSensitivityX(FPlayerInput* PlayerInput);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.GetMouseSensitivityY
// Offset::0x1A7B840;
float FPlayerInputScriptMixinLibrary::GetMouseSensitivityY(FPlayerInput* PlayerInput);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.InvertAxis
// Offset::0x1A7BA90;
void FPlayerInputScriptMixinLibrary::InvertAxis(FPlayerInput* PlayerInput,FName AxisName);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.RemoveActionMapping
// Offset::0x1A7C590;
void FPlayerInputScriptMixinLibrary::RemoveActionMapping(FPlayerInput* PlayerInput,FInputActionKeyMapping KeyMapping);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.RemoveAxisMapping
// Offset::0x1A7C230;
void FPlayerInputScriptMixinLibrary::RemoveAxisMapping(FPlayerInput* PlayerInput,FInputAxisKeyMapping KeyMapping);


// Function  AngelscriptCode.PlayerInputScriptMixinLibrary.SetMouseSensitivity
// Offset::0x1A7B9A0;
void FPlayerInputScriptMixinLibrary::SetMouseSensitivity(FPlayerInput* PlayerInput,float Sensitivity);


// Function  AngelscriptCode.TestTerminatorComponent.ServerTerminatorReplicated
// Offset::0x1A7E2F0;
void FTestTerminatorComponent::ServerTerminatorReplicated();


// Function  AngelscriptCode.LatentAutomationCommand.After
// Offset::0x1A7E910;
void FLatentAutomationCommand::After();


// Function  AngelscriptCode.LatentAutomationCommand.AfterOnClient
// Offset::0x1A7E8E0;
bool FLatentAutomationCommand::AfterOnClient();


// Function  AngelscriptCode.LatentAutomationCommand.Before
// Offset::0x17AA8C0;
void FLatentAutomationCommand::Before();


// Function  AngelscriptCode.LatentAutomationCommand.BeforeOnClient
// Offset::0x179DE10;
bool FLatentAutomationCommand::BeforeOnClient();


// Function  AngelscriptCode.LatentAutomationCommand.Describe
// Offset::0x3D30810;
FString FLatentAutomationCommand::Describe();


// Function  AngelscriptCode.LatentAutomationCommand.DescribeOnClient
// Offset::0x3D30810;
FString FLatentAutomationCommand::DescribeOnClient();


// Function  AngelscriptCode.LatentAutomationCommand.HasAuthority
// Offset::0x1A7E8B0;
bool FLatentAutomationCommand::HasAuthority();


// Function  AngelscriptCode.LatentAutomationCommand.Update
// Offset::0x17AF4E0;
bool FLatentAutomationCommand::Update();


// Function  AngelscriptCode.LatentAutomationCommand.UpdateOnClient
// Offset::0x1A7E930;
bool FLatentAutomationCommand::UpdateOnClient();


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.AssertFalse
// Offset::0x1A80C40;
void FLatentAutomationCommandClientExecutor::AssertFalse(bool bExpression,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.AssertNotNull
// Offset::0x1A80A60;
void FLatentAutomationCommandClientExecutor::AssertNotNull(FObject* Object,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.AssertNotSame
// Offset::0x1A80E40;
void FLatentAutomationCommandClientExecutor::AssertNotSame(FObject* Expected,FObject* Actual,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.AssertNull
// Offset::0x1A80B50;
void FLatentAutomationCommandClientExecutor::AssertNull(FObject* Object,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.AssertSame
// Offset::0x1A80F80;
void FLatentAutomationCommandClientExecutor::AssertSame(FObject* Expected,FObject* Actual,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.AssertTrue
// Offset::0x1A80D40;
void FLatentAutomationCommandClientExecutor::AssertTrue(bool bExpression,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.Fail
// Offset::0x1A810C0;
void FLatentAutomationCommandClientExecutor::Fail(FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerAssertFalse
// Offset::0x1A80530;
void FLatentAutomationCommandClientExecutor::ServerAssertFalse(bool bExpression,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerAssertNotNull
// Offset::0x1A80330;
void FLatentAutomationCommandClientExecutor::ServerAssertNotNull(FObject* Object,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerAssertNotSame
// Offset::0x1A80730;
void FLatentAutomationCommandClientExecutor::ServerAssertNotSame(FObject* Expected,FObject* Actual,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerAssertNull
// Offset::0x1A80430;
void FLatentAutomationCommandClientExecutor::ServerAssertNull(FObject* Object,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerAssertSame
// Offset::0x1A80870;
void FLatentAutomationCommandClientExecutor::ServerAssertSame(FObject* Expected,FObject* Actual,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerAssertTrue
// Offset::0x1A80630;
void FLatentAutomationCommandClientExecutor::ServerAssertTrue(bool bExpression,FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerFail
// Offset::0x1A809B0;
void FLatentAutomationCommandClientExecutor::ServerFail(FString Message);


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerLatentCommandClientChecked
// Offset::0x1A802F0;
void FLatentAutomationCommandClientExecutor::ServerLatentCommandClientChecked();


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerLatentCommandClientDone
// Offset::0x1A802D0;
void FLatentAutomationCommandClientExecutor::ServerLatentCommandClientDone();


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerLatentCommandClientReady
// Offset::0x1A80310;
void FLatentAutomationCommandClientExecutor::ServerLatentCommandClientReady();


// Function  AngelscriptCode.LatentAutomationCommandClientExecutor.ServerLatentCommandDescribeOnClient
// Offset::0x1A80220;
void FLatentAutomationCommandClientExecutor::ServerLatentCommandDescribeOnClient(FString NewDescription);


// Function  AngelscriptCode.RuntimeFloatCurveMixinLibrary.AddDefaultKey
// Offset::0x1A83750;
void FRuntimeFloatCurveMixinLibrary::AddDefaultKey(FRuntimeFloatCurve Target,float InTime,float InValue);


// Function  AngelscriptCode.RuntimeFloatCurveMixinLibrary.Equals
// Offset::0x1A83970;
bool FRuntimeFloatCurveMixinLibrary::Equals(FRuntimeFloatCurve Target,FRuntimeFloatCurve Other);


// Function  AngelscriptCode.RuntimeFloatCurveMixinLibrary.GetFloatValue
// Offset::0x1A84370;
float FRuntimeFloatCurveMixinLibrary::GetFloatValue(FRuntimeFloatCurve Target,float InTime,float DefaultValue);


// Function  AngelscriptCode.RuntimeFloatCurveMixinLibrary.GetNumKeys
// Offset::0x1A83B50;
int32_t FRuntimeFloatCurveMixinLibrary::GetNumKeys(FRuntimeFloatCurve Target);


// Function  AngelscriptCode.RuntimeFloatCurveMixinLibrary.GetTimeRange
// Offset::0x1A841A0;
void FRuntimeFloatCurveMixinLibrary::GetTimeRange(FRuntimeFloatCurve Target,float MinTime,float MaxTime);


// Function  AngelscriptCode.RuntimeFloatCurveMixinLibrary.GetTimeRange_Double
// Offset::0x1A83E10;
void FRuntimeFloatCurveMixinLibrary::GetTimeRange_Double(FRuntimeFloatCurve Target,double MinTime,double MaxTime);


// Function  AngelscriptCode.RuntimeFloatCurveMixinLibrary.GetValueRange
// Offset::0x1A83FD0;
void FRuntimeFloatCurveMixinLibrary::GetValueRange(FRuntimeFloatCurve Target,float MinValue,float MaxValue);


// Function  AngelscriptCode.RuntimeFloatCurveMixinLibrary.GetValueRange_Double
// Offset::0x1A83C50;
void FRuntimeFloatCurveMixinLibrary::GetValueRange_Double(FRuntimeFloatCurve Target,double MinValue,double MaxValue);


// Function  AngelscriptCode.ScriptEngineSubsystem.BP_Deinitialize
// Offset::0x3D30810;
void FScriptEngineSubsystem::BP_Deinitialize();


// Function  AngelscriptCode.ScriptEngineSubsystem.BP_Initialize
// Offset::0x3D30810;
void FScriptEngineSubsystem::BP_Initialize();


// Function  AngelscriptCode.ScriptEngineSubsystem.BP_ShouldCreateSubsystem
// Offset::0x1A84B70;
bool FScriptEngineSubsystem::BP_ShouldCreateSubsystem(FObject* Outer);


// Function  AngelscriptCode.ScriptEngineSubsystem.BP_Tick
// Offset::0x3D30810;
void FScriptEngineSubsystem::BP_Tick(float DeltaTime);


// Function  AngelscriptCode.ScriptGameInstanceSubsystem.BP_Deinitialize
// Offset::0x3D30810;
void FScriptGameInstanceSubsystem::BP_Deinitialize();


// Function  AngelscriptCode.ScriptGameInstanceSubsystem.BP_GetGameInstance
// Offset::0x1A85800;
FGameInstance* FScriptGameInstanceSubsystem::BP_GetGameInstance();


// Function  AngelscriptCode.ScriptGameInstanceSubsystem.BP_Initialize
// Offset::0x3D30810;
void FScriptGameInstanceSubsystem::BP_Initialize();


// Function  AngelscriptCode.ScriptGameInstanceSubsystem.BP_ShouldCreateSubsystem
// Offset::0x1A84B70;
bool FScriptGameInstanceSubsystem::BP_ShouldCreateSubsystem(FObject* Outer);


// Function  AngelscriptCode.ScriptLocalPlayerSubsystem.BP_Deinitialize
// Offset::0x3D30810;
void FScriptLocalPlayerSubsystem::BP_Deinitialize();


// Function  AngelscriptCode.ScriptLocalPlayerSubsystem.BP_GetLocalPlayer
// Offset::0x1A86250;
FLocalPlayer* FScriptLocalPlayerSubsystem::BP_GetLocalPlayer();


// Function  AngelscriptCode.ScriptLocalPlayerSubsystem.BP_Initialize
// Offset::0x3D30810;
void FScriptLocalPlayerSubsystem::BP_Initialize();


// Function  AngelscriptCode.ScriptLocalPlayerSubsystem.BP_ShouldCreateSubsystem
// Offset::0x1A84B70;
bool FScriptLocalPlayerSubsystem::BP_ShouldCreateSubsystem(FObject* Outer);


// Function  AngelscriptCode.ScriptWorldSubsystem.BP_Deinitialize
// Offset::0x3D30810;
void FScriptWorldSubsystem::BP_Deinitialize();


// Function  AngelscriptCode.ScriptWorldSubsystem.BP_Initialize
// Offset::0x3D30810;
void FScriptWorldSubsystem::BP_Initialize();


// Function  AngelscriptCode.ScriptWorldSubsystem.BP_OnWorldBeginPlay
// Offset::0x3D30810;
void FScriptWorldSubsystem::BP_OnWorldBeginPlay();


// Function  AngelscriptCode.ScriptWorldSubsystem.BP_OnWorldComponentsUpdated
// Offset::0x3D30810;
void FScriptWorldSubsystem::BP_OnWorldComponentsUpdated();


// Function  AngelscriptCode.ScriptWorldSubsystem.BP_PostInitialize
// Offset::0x3D30810;
void FScriptWorldSubsystem::BP_PostInitialize();


// Function  AngelscriptCode.ScriptWorldSubsystem.BP_ShouldCreateSubsystem
// Offset::0x1A84B70;
bool FScriptWorldSubsystem::BP_ShouldCreateSubsystem(FObject* Outer);


// Function  AngelscriptCode.ScriptWorldSubsystem.BP_Tick
// Offset::0x3D30810;
void FScriptWorldSubsystem::BP_Tick(float DeltaTime);


// Function  AngelscriptCode.ScriptWorldSubsystem.BP_UpdateStreamingState
// Offset::0x3D30810;
void FScriptWorldSubsystem::BP_UpdateStreamingState();


// Function  AngelscriptCode.SubsystemLibrary.GetEngineSubsystem
// Offset::0x1A88740;
FEngineSubsystem* FSubsystemLibrary::GetEngineSubsystem(FEngineSubsystem* Class);


// Function  AngelscriptCode.SubsystemLibrary.GetGameInstanceSubsystem
// Offset::0x1A88650;
FGameInstanceSubsystem* FSubsystemLibrary::GetGameInstanceSubsystem(FObject* WorldContextObject,FGameInstanceSubsystem* Class);


// Function  AngelscriptCode.SubsystemLibrary.GetLocalPlayerSubsystem
// Offset::0x1A88560;
FLocalPlayerSubsystem* FSubsystemLibrary::GetLocalPlayerSubsystem(FObject* WorldContextObject,FLocalPlayerSubsystem* Class);


// Function  AngelscriptCode.SubsystemLibrary.GetLocalPlayerSubsystemFromLocalPlayer
// Offset::0x1A88240;
FLocalPlayerSubsystem* FSubsystemLibrary::GetLocalPlayerSubsystemFromLocalPlayer(FObject* WorldContextObject,FLocalPlayer* LocalPlayer,FLocalPlayerSubsystem* Class);


// Function  AngelscriptCode.SubsystemLibrary.GetLocalPlayerSubsystemFromPlayerController
// Offset::0x1A88380;
FLocalPlayerSubsystem* FSubsystemLibrary::GetLocalPlayerSubsystemFromPlayerController(FPlayerController* PlayerController,FLocalPlayerSubsystem* Class);


// Function  AngelscriptCode.SubsystemLibrary.GetWorldSubsystem
// Offset::0x1A88470;
FWorldSubsystem* FSubsystemLibrary::GetWorldSubsystem(FObject* WorldContextObject,FWorldSubsystem* Class);


// Function  AngelscriptCode.TimelineComponentMixinLibrary.AddEvent
// Offset::0x1A89390;
void FTimelineComponentMixinLibrary::AddEvent(FTimelineComponent* Component,float Time,FDelegate EventFunc);


// Function  AngelscriptCode.TimelineComponentMixinLibrary.AddInterpFloat
// Offset::0x1A88F30;
void FTimelineComponentMixinLibrary::AddInterpFloat(FTimelineComponent* Component,FCurveFloat* FloatCurve,FDelegate InterpFunc,FName PropertyName,FName TrackName);


// Function  AngelscriptCode.TimelineComponentMixinLibrary.AddInterpLinearColor
// Offset::0x1A88D00;
void FTimelineComponentMixinLibrary::AddInterpLinearColor(FTimelineComponent* Component,FCurveLinearColor* LinearColorCurve,FDelegate InterpFunc,FName PropertyName,FName TrackName);


// Function  AngelscriptCode.TimelineComponentMixinLibrary.AddInterpVector
// Offset::0x1A89160;
void FTimelineComponentMixinLibrary::AddInterpVector(FTimelineComponent* Component,FCurveVector* VectorCurve,FDelegate InterpFunc,FName PropertyName,FName TrackName);


// Function  AngelscriptCode.TimelineComponentMixinLibrary.SetTimelineFinishedFunc
// Offset::0x1A89510;
void FTimelineComponentMixinLibrary::SetTimelineFinishedFunc(FTimelineComponent* Component,FDelegate NewTimelineFinishedFunc);


// Function  AngelscriptCode.AssetManagerMixinLibrary.GetPrimaryAssetData
// Offset::0x1A8A640;
bool FAssetManagerMixinLibrary::GetPrimaryAssetData(FAssetManager* AssetManager,FPrimaryAssetId PrimaryAssetId,FAssetData AssetData);


// Function  AngelscriptCode.AssetManagerMixinLibrary.GetPrimaryAssetDataList
// Offset::0x1A8A480;
bool FAssetManagerMixinLibrary::GetPrimaryAssetDataList(FAssetManager* AssetManager,FPrimaryAssetType PrimaryAssetType,TArray<FAssetData> AssetDataList);


// Function  AngelscriptCode.AssetManagerMixinLibrary.GetPrimaryAssetIdForObject
// Offset::0x1A8A270;
FPrimaryAssetId FAssetManagerMixinLibrary::GetPrimaryAssetIdForObject(FAssetManager* AssetManager,FObject* Object);


// Function  AngelscriptCode.AssetManagerMixinLibrary.GetPrimaryAssetIdList
// Offset::0x1A8A110;
bool FAssetManagerMixinLibrary::GetPrimaryAssetIdList(FAssetManager* AssetManager,FPrimaryAssetType PrimaryAssetType,TArray<FPrimaryAssetId> PrimaryAssetIdList);


// Function  AngelscriptCode.AssetManagerMixinLibrary.GetPrimaryAssetObject
// Offset::0x1A8A380;
FObject* FAssetManagerMixinLibrary::GetPrimaryAssetObject(FAssetManager* AssetManager,FPrimaryAssetId PrimaryAssetId);


// Function  AngelscriptCode.AssetManagerMixinLibrary.GetPrimaryAssetRules
// Offset::0x1A89AD0;
FPrimaryAssetRules FAssetManagerMixinLibrary::GetPrimaryAssetRules(FAssetManager* AssetManager,FPrimaryAssetId PrimaryAssetId);


// Function  AngelscriptCode.AssetManagerMixinLibrary.GetPrimaryAssetTypeInfo
// Offset::0x1A89D60;
bool FAssetManagerMixinLibrary::GetPrimaryAssetTypeInfo(FAssetManager* AssetManager,FPrimaryAssetType PrimaryAssetType,FPrimaryAssetTypeInfo AssetTypeInfo);


// Function  AngelscriptCode.AssetManagerMixinLibrary.GetPrimaryAssetTypeInfoList
// Offset::0x1A89C30;
void FAssetManagerMixinLibrary::GetPrimaryAssetTypeInfoList(FAssetManager* AssetManager,TArray<FPrimaryAssetTypeInfo> AssetTypeInfoList);


// Function  AngelscriptCode.ObjectInWorld.DestroyObject
// Offset::0x1A8F460;
void FObjectInWorld::DestroyObject();


// Function  AngelscriptCode.ObjectInWorld.SetWorld
// Offset::0x1A8FAA0;
void FObjectInWorld::SetWorld(FWorld* InWorld);


// Function  AngelscriptCode.ObjectInWorld.SetWorldContext
// Offset::0x1A8FA00;
void FObjectInWorld::SetWorldContext(FObject* WorldContext);


// Function  AngelscriptCode.ObjectTickable.BP_Tick
// Offset::0x3D30810;
void FObjectTickable::BP_Tick(float DeltaTime);


// Function  AngelscriptCode.ObjectTickable.DestroyObject
// Offset::0x1A8FEF0;
void FObjectTickable::DestroyObject();


// Function  AngelscriptCode.ObjectTickable.SetWorld
// Offset::0x1A90550;
void FObjectTickable::SetWorld(FWorld* InWorld);


// Function  AngelscriptCode.ObjectTickable.SetWorldContext
// Offset::0x1A904B0;
void FObjectTickable::SetWorldContext(FObject* WorldContext);


// Function  AngelscriptCode.WidgetBlueprintStatics.CreateWidget
// Offset::0x1A90BF0;
FUserWidget* FWidgetBlueprintStatics::CreateWidget(FObject* WorldContextObject,FUserWidget* WidgetType,FPlayerController* OwningPlayer);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.AddGameplayCueWithEffectContext
// Offset::0x1A9D9A0;
void FAbilitySystemComponentMixinLibrary::AddGameplayCueWithEffectContext(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTag GameplayCueTag,FGameplayEffectContextHandle EffectContext);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.AddGameplayCueWithParameters
// Offset::0x1A9D700;
void FAbilitySystemComponentMixinLibrary::AddGameplayCueWithParameters(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTag GameplayCueTag,FGameplayCueParameters GameplayCueParameters);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.AddLooseGameplayTag
// Offset::0x1A9D190;
void FAbilitySystemComponentMixinLibrary::AddLooseGameplayTag(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTag GameplayTag,int32_t Count);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.AddLooseGameplayTags
// Offset::0x1A9CFC0;
void FAbilitySystemComponentMixinLibrary::AddLooseGameplayTags(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTagContainer GameplayTags,int32_t Count);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.AreAbilityTagsBlocked
// Offset::0x1A9C9D0;
bool FAbilitySystemComponentMixinLibrary::AreAbilityTagsBlocked(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTagContainer Tags);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.ExecuteGameplayCueWithEffectContext
// Offset::0x1A9DEB0;
void FAbilitySystemComponentMixinLibrary::ExecuteGameplayCueWithEffectContext(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTag GameplayCueTag,FGameplayEffectContextHandle EffectContext);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.ExecuteGameplayCueWithParameters
// Offset::0x1A9DC40;
void FAbilitySystemComponentMixinLibrary::ExecuteGameplayCueWithParameters(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTag GameplayCueTag,FGameplayCueParameters GameplayCueParameters);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.GetActiveGameplayEffect
// Offset::0x1A9C850;
FActiveGameplayEffect FAbilitySystemComponentMixinLibrary::GetActiveGameplayEffect(FAbilitySystemComponent* AbilitySystemComponent,FActiveGameplayEffectHandle Handle);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.GetOwnedGameplayTags
// Offset::0x1A9CB10;
void FAbilitySystemComponentMixinLibrary::GetOwnedGameplayTags(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTagContainer TagContainer);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.InitDefaultGameplayCueParameters
// Offset::0x1A9D310;
void FAbilitySystemComponentMixinLibrary::InitDefaultGameplayCueParameters(FAbilitySystemComponent* AbilitySystemComponent,FGameplayCueParameters Parameters);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.RemoveAllGameplayCues
// Offset::0x1A9D540;
void FAbilitySystemComponentMixinLibrary::RemoveAllGameplayCues(FAbilitySystemComponent* AbilitySystemComponent);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.RemoveGameplayCue
// Offset::0x1A9D5E0;
void FAbilitySystemComponentMixinLibrary::RemoveGameplayCue(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTag GameplayCueTag);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.RemoveLooseGameplayTag
// Offset::0x1A9CE40;
void FAbilitySystemComponentMixinLibrary::RemoveLooseGameplayTag(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTag GameplayTag,int32_t Count);


// Function  AngelscriptGAS.AbilitySystemComponentMixinLibrary.RemoveLooseGameplayTags
// Offset::0x1A9CC50;
void FAbilitySystemComponentMixinLibrary::RemoveLooseGameplayTags(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTagContainer GameplayTags,int32_t Count);


// Function  AngelscriptGAS.ActiveGameplayEffecteMixinLibrary.GetSpec
// Offset::0x1A9EA80;
FGameplayEffectSpec FActiveGameplayEffecteMixinLibrary::GetSpec(FActiveGameplayEffect ActiveGameplayEffect);


// Function  AngelscriptGAS.AngelscriptAttributeChangedDataMixinLibrary.GetEffectSpec
// Offset::0x1A9F3A0;
FGameplayEffectSpec FAngelscriptAttributeChangedDataMixinLibrary::GetEffectSpec(FAngelscriptAttributeChangedData Data,bool bIsValid);


// Function  AngelscriptGAS.AngelscriptAttributeChangedDataMixinLibrary.GetGameplayAttribute
// Offset::0x1A9F7D0;
FGameplayAttribute FAngelscriptAttributeChangedDataMixinLibrary::GetGameplayAttribute(FAngelscriptAttributeChangedData Data);


// Function  AngelscriptGAS.AngelscriptAttributeChangedDataMixinLibrary.GetGameplayModifierEvaluatedData
// Offset::0x1A9F0B0;
FGameplayModifierEvaluatedData FAngelscriptAttributeChangedDataMixinLibrary::GetGameplayModifierEvaluatedData(FAngelscriptAttributeChangedData Data,bool bIsValid);


// Function  AngelscriptGAS.AngelscriptAttributeChangedDataMixinLibrary.GetNewValue
// Offset::0x1A9F6F0;
float FAngelscriptAttributeChangedDataMixinLibrary::GetNewValue(FAngelscriptAttributeChangedData Data);


// Function  AngelscriptGAS.AngelscriptAttributeChangedDataMixinLibrary.GetOldValue
// Offset::0x1A9F600;
float FAngelscriptAttributeChangedDataMixinLibrary::GetOldValue(FAngelscriptAttributeChangedData Data);


// Function  AngelscriptGAS.AngelscriptAttributeChangedDataMixinLibrary.GetTargetAbilitySystemComponent
// Offset::0x1A9EFA0;
FAbilitySystemComponent* FAngelscriptAttributeChangedDataMixinLibrary::GetTargetAbilitySystemComponent(FAngelscriptAttributeChangedData Data);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.ActivateAbilitiesUsingTags
// Offset::0x1AA0D10;
bool FAngelscriptAbilitySystemComponent::ActivateAbilitiesUsingTags(FGameplayTagContainer GameplayTagContainer,bool bAllowRemoteActivation);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.BindInput
// Offset::0x1AA05E0;
void FAngelscriptAbilitySystemComponent::BindInput(FInputComponent* InputComponent,FAngelscriptInputBindData BindData);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.BlueprintRegisterAndCallGameplayTagEvent
// Offset::0x1AA0240;
FDelegateHandleWrapper FAngelscriptAbilitySystemComponent::BlueprintRegisterAndCallGameplayTagEvent(FDelegate Delegate,FGameplayTag Tag,enum class EGameplayTagEventType EventType);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.BlueprintRegisterGameplayTagEvent
// Offset::0x1AA00E0;
FDelegateHandleWrapper FAngelscriptAbilitySystemComponent::BlueprintRegisterGameplayTagEvent(FDelegate Delegate,FGameplayTag Tag,enum class EGameplayTagEventType EventType);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.BlueprintUnRegisterGameplayTagEvent
// Offset::0x1A9FFB0;
bool FAngelscriptAbilitySystemComponent::BlueprintUnRegisterGameplayTagEvent(FDelegateHandleWrapper Handle,FGameplayTag Tag,enum class EGameplayTagEventType EventType);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.BP_GiveAbilityAndActivateOnceWithSourceObject
// Offset::0x1AA1690;
FGameplayAbilitySpecHandle FAngelscriptAbilitySystemComponent::BP_GiveAbilityAndActivateOnceWithSourceObject(FGameplayAbility* InAbilityClass,int32_t Level,int32_t OptionalInputID,FObject* OptionalSourceObject);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.BP_GiveAbilityWithSourceObject
// Offset::0x1AA1820;
FGameplayAbilitySpecHandle FAngelscriptAbilitySystemComponent::BP_GiveAbilityWithSourceObject(FGameplayAbility* InAbilityClass,int32_t Level,int32_t OptionalInputID,FObject* OptionalSourceObject);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.BP_InitAbilityActorInfo
// Offset::0x1AA2750;
void FAngelscriptAbilitySystemComponent::BP_InitAbilityActorInfo(FActor* InOwnerActor,FActor* InAvatarActor);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.BP_SetRemoveAbilityOnEnd
// Offset::0x1AA15F0;
void FAngelscriptAbilitySystemComponent::BP_SetRemoveAbilityOnEnd(FGameplayAbilitySpecHandle AbilitySpecHandle);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.CanActivateAbilityByClass
// Offset::0x1AA0AF0;
bool FAngelscriptAbilitySystemComponent::CanActivateAbilityByClass(FGameplayAbility* InAbilityToActivate);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.CanActivateAbilitySpec
// Offset::0x1AA0A50;
bool FAngelscriptAbilitySystemComponent::CanActivateAbilitySpec(FGameplayAbilitySpecHandle AbilitySpecHandle);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.CanActivateAnyAbilityWithTag
// Offset::0x1AA0B90;
bool FAngelscriptAbilitySystemComponent::CanActivateAnyAbilityWithTag(FGameplayTag GameplayTag);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.CanActivateAnyAbilityWithTags
// Offset::0x1AA0C40;
bool FAngelscriptAbilitySystemComponent::CanActivateAnyAbilityWithTags(FGameplayTagContainer GameplayTagContainer);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.CancelAbilitiesByTags
// Offset::0x1AA12B0;
void FAngelscriptAbilitySystemComponent::CancelAbilitiesByTags(FGameplayTagContainer WithTags,FGameplayTagContainer WithoutTags,FGameplayAbility* Ignore);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.CancelAbility
// Offset::0x1AA1450;
void FAngelscriptAbilitySystemComponent::CancelAbility(FGameplayAbility* InAbilityClass);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.CancelAbilityByHandle
// Offset::0x1AA1200;
void FAngelscriptAbilitySystemComponent::CancelAbilityByHandle(FGameplayAbilitySpecHandle AbilityHandle);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetAbilitiesWithTags
// Offset::0x1AA0F80;
void FAngelscriptAbilitySystemComponent::GetAbilitiesWithTags(FGameplayTagContainer GameplayTagContainer,TArray<FGameplayAbility*> Abilities);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetAbilitySpecSourceObject
// Offset::0x1AA08D0;
FObject* FAngelscriptAbilitySystemComponent::GetAbilitySpecSourceObject(FGameplayAbilitySpecHandle AbilitySpecHandle);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetActiveAbilitiesWithTags
// Offset::0x1AA0E40;
void FAngelscriptAbilitySystemComponent::GetActiveAbilitiesWithTags(FGameplayTagContainer GameplayTagContainer,TArray<FGameplayAbility*> ActiveAbilities);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetAndRegisterAttributeChangedCallback
// Offset::0x1AA2A50;
void FAngelscriptAbilitySystemComponent::GetAndRegisterAttributeChangedCallback(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,FObject* CallbackObject,FName CallbackFunctionName_FAngelscriptAttributeChangedData,float OutCurrentValue);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetAndRegisterCallbackForAttribute
// Offset::0x1AA2830;
void FAngelscriptAbilitySystemComponent::GetAndRegisterCallbackForAttribute(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,float OutCurrentValue);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetAttributeBaseValue
// Offset::0x1AA2020;
float FAngelscriptAbilitySystemComponent::GetAttributeBaseValue(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,float DefaultValue);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetAttributeBaseValueChecked
// Offset::0x1AA22A0;
float FAngelscriptAbilitySystemComponent::GetAttributeBaseValueChecked(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetAttributeCurrentValue
// Offset::0x1AA2160;
float FAngelscriptAbilitySystemComponent::GetAttributeCurrentValue(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,float DefaultValue);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetAttributeCurrentValueChecked
// Offset::0x1AA2390;
float FAngelscriptAbilitySystemComponent::GetAttributeCurrentValueChecked(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetAvatar
// Offset::0x1AA2F60;
FActor* FAngelscriptAbilitySystemComponent::GetAvatar();


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetCooldownTimeRemaining
// Offset::0x1AA06F0;
float FAngelscriptAbilitySystemComponent::GetCooldownTimeRemaining(FGameplayAbility* InAbilityClass);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.GetPlayerController
// Offset::0x1AA2F30;
FPlayerController* FAngelscriptAbilitySystemComponent::GetPlayerController();


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.HasAbility
// Offset::0x1AA0830;
bool FAngelscriptAbilitySystemComponent::HasAbility(FGameplayAbility* InAbilityClass);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.HasAbilitySpec
// Offset::0x1AA0790;
bool FAngelscriptAbilitySystemComponent::HasAbilitySpec(FGameplayAbilitySpecHandle AbilitySpecHandle);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.HasAllGameplayTags
// Offset::0x1AA0470;
bool FAngelscriptAbilitySystemComponent::HasAllGameplayTags(FGameplayTagContainer TagContainer);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.HasAnyGameplayTags
// Offset::0x1AA03A0;
bool FAngelscriptAbilitySystemComponent::HasAnyGameplayTags(FGameplayTagContainer TagContainer);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.HasGameplayTag
// Offset::0x1AA0540;
bool FAngelscriptAbilitySystemComponent::HasGameplayTag(FGameplayTag TagToCheck);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.IsAbilityActive
// Offset::0x1AA1160;
bool FAngelscriptAbilitySystemComponent::IsAbilityActive(FGameplayAbility* InAbilityClass);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.IsAbilitySpecActive
// Offset::0x1AA10C0;
bool FAngelscriptAbilitySystemComponent::IsAbilitySpecActive(FGameplayAbilitySpecHandle AbilitySpecHandle);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.ModAttributeUnsafe
// Offset::0x1AA25B0;
void FAngelscriptAbilitySystemComponent::ModAttributeUnsafe(FGameplayAttribute GameplayAttribute,enum class EGameplayModOp ModifierOp,float ModifierMagnitude);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.OnAttributeSetRegistered
// Offset::0x1AA2DB0;
void FAngelscriptAbilitySystemComponent::OnAttributeSetRegistered(FObject* InObject,FName InFunctionName);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.RegisterAttributeChangedCallback
// Offset::0x1AA2C30;
void FAngelscriptAbilitySystemComponent::RegisterAttributeChangedCallback(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,FObject* CallbackObject,FName CallbackFunctionName_FAngelscriptAttributeChangedData);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.RegisterAttributeSet
// Offset::0x1AA2E90;
FAngelscriptAttributeSet* FAngelscriptAbilitySystemComponent::RegisterAttributeSet(FAngelscriptAttributeSet* AttributeSetClass);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.RegisterCallbackForAttribute
// Offset::0x1AA2970;
void FAngelscriptAbilitySystemComponent::RegisterCallbackForAttribute(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.SetAbilitySpecSourceObject
// Offset::0x1AA0970;
void FAngelscriptAbilitySystemComponent::SetAbilitySpecSourceObject(FGameplayAbilitySpecHandle AbilitySpecHandle,FObject* NewSourceObject);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.SetAttributeBaseValue
// Offset::0x1AA2480;
void FAngelscriptAbilitySystemComponent::SetAttributeBaseValue(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,float NewBaseValue);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.TryActivateAbilitySpec
// Offset::0x1AA14F0;
bool FAngelscriptAbilitySystemComponent::TryActivateAbilitySpec(FGameplayAbilitySpecHandle Handle,bool bAllowRemoteActivation);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.TryGetAttributeBaseValue
// Offset::0x1AA1C60;
bool FAngelscriptAbilitySystemComponent::TryGetAttributeBaseValue(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,float OutBaseValue);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.TryGetAttributeCurrentValue
// Offset::0x1AA1DA0;
bool FAngelscriptAbilitySystemComponent::TryGetAttributeCurrentValue(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,float OutCurrentValue);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.TryGetFilteredAttributeValue
// Offset::0x1AA19B0;
bool FAngelscriptAbilitySystemComponent::TryGetFilteredAttributeValue(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,FGameplayTagRequirements SourceTags,FGameplayTagContainer TargetTags,float OutValue);


// Function  AngelscriptGAS.AngelscriptAbilitySystemComponent.TrySetAttributeBaseValue
// Offset::0x1AA1EE0;
bool FAngelscriptAbilitySystemComponent::TrySetAttributeBaseValue(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,float NewBaseValue);


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_Activate
// Offset::0x3D30810;
void FAngelscriptAbilityTask::BP_Activate();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_ClearWaitingOnAvatar
// Offset::0x1AA5D40;
void FAngelscriptAbilityTask::BP_ClearWaitingOnAvatar();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_ClearWaitingOnRemotePlayerData
// Offset::0x1AA5D80;
void FAngelscriptAbilityTask::BP_ClearWaitingOnRemotePlayerData();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_GetAbility
// Offset::0x1AA5E80;
FGameplayAbility* FAngelscriptAbilityTask::BP_GetAbility(bool bInOwnerFinished);


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_GetAbilitySpecHandle
// Offset::0x1AA5F20;
FGameplayAbilitySpecHandle FAngelscriptAbilityTask::BP_GetAbilitySpecHandle(bool bInOwnerFinished);


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_GetAbilitySystemComponent
// Offset::0x1AA5FD0;
FAbilitySystemComponent* FAngelscriptAbilityTask::BP_GetAbilitySystemComponent();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_InitSimulatedTask
// Offset::0x3D30810;
void FAngelscriptAbilityTask::BP_InitSimulatedTask(FGameplayTasksComponent* InGameplayTasksComponent);


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_IsForRemoteClient
// Offset::0x1AA5E20;
bool FAngelscriptAbilityTask::BP_IsForRemoteClient();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_IsLocallyControlled
// Offset::0x1AA5DF0;
bool FAngelscriptAbilityTask::BP_IsLocallyControlled();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_IsPredictingClient
// Offset::0x1AA5E50;
bool FAngelscriptAbilityTask::BP_IsPredictingClient();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_IsWaitingOnAvatar
// Offset::0x1AA60A0;
bool FAngelscriptAbilityTask::BP_IsWaitingOnAvatar();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_IsWaitingOnRemotePlayerdata
// Offset::0x1AA60D0;
bool FAngelscriptAbilityTask::BP_IsWaitingOnRemotePlayerdata();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_OnDestroy
// Offset::0x3D30810;
void FAngelscriptAbilityTask::BP_OnDestroy(bool bInOwnerFinished);


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_SetAbilitySystemComponent
// Offset::0x1AA6000;
void FAngelscriptAbilityTask::BP_SetAbilitySystemComponent(FAbilitySystemComponent* InAbilitySystemComponent);


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_SetWaitingOnAvatar
// Offset::0x1AA5D60;
void FAngelscriptAbilityTask::BP_SetWaitingOnAvatar();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_SetWaitingOnRemotePlayerData
// Offset::0x1AA5DA0;
void FAngelscriptAbilityTask::BP_SetWaitingOnRemotePlayerData();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_ShouldBroadcastAbilityTaskDelegates
// Offset::0x1AA5DC0;
bool FAngelscriptAbilityTask::BP_ShouldBroadcastAbilityTaskDelegates();


// Function  AngelscriptGAS.AngelscriptAbilityTask.BP_TickTask
// Offset::0x3D30810;
void FAngelscriptAbilityTask::BP_TickTask(float DeltaTimeSecs);


// Function  AngelscriptGAS.AngelscriptAbilityTask.CreateAbilityTask
// Offset::0x1AA5C10;
FAngelscriptAbilityTask* FAngelscriptAbilityTask::CreateAbilityTask(FAngelscriptAbilityTask* TaskType,FGameplayAbility* ThisAbility,FName NewInstanceName);


// Function  AngelscriptGAS.AngelscriptAbilityTask.CreateAbilityTaskAndRunIt
// Offset::0x1AA5AE0;
FAngelscriptAbilityTask* FAngelscriptAbilityTask::CreateAbilityTaskAndRunIt(FAngelscriptAbilityTask* TaskType,FGameplayAbility* ThisAbility,FName NewInstanceName);


// Function  AngelscriptGAS.AngelscriptAbilityTask.GetIsPausable
// Offset::0x1AA62A0;
bool FAngelscriptAbilityTask::GetIsPausable();


// Function  AngelscriptGAS.AngelscriptAbilityTask.GetIsSimulatedTask
// Offset::0x1AA61D0;
bool FAngelscriptAbilityTask::GetIsSimulatedTask();


// Function  AngelscriptGAS.AngelscriptAbilityTask.GetIsSimulating
// Offset::0x1AA6100;
bool FAngelscriptAbilityTask::GetIsSimulating();


// Function  AngelscriptGAS.AngelscriptAbilityTask.GetIsTickingTask
// Offset::0x1AA6370;
bool FAngelscriptAbilityTask::GetIsTickingTask();


// Function  AngelscriptGAS.AngelscriptAbilityTask.SetIsPausable
// Offset::0x1AA6200;
void FAngelscriptAbilityTask::SetIsPausable(bool bNewState);


// Function  AngelscriptGAS.AngelscriptAbilityTask.SetIsSimulatedTask
// Offset::0x1AA6130;
void FAngelscriptAbilityTask::SetIsSimulatedTask(bool bNewState);


// Function  AngelscriptGAS.AngelscriptAbilityTask.SetIsTickingTask
// Offset::0x1AA62D0;
void FAngelscriptAbilityTask::SetIsTickingTask(bool bNewState);


// Function  AngelscriptGAS.AngelscriptAbilityTaskLibrary.PlayMontageAndWait
// Offset::0x1AA8680;
FAbilityTask_PlayMontageAndWait* FAngelscriptAbilityTaskLibrary::PlayMontageAndWait(FGameplayAbility* OwningAbility,FName TaskInstanceName,FAnimMontage* MontageToPlay,float Rate,FName StartSection,bool bStopWhenAbilityEnds,float AnimRootMotionTranslationScale,float InTimeToStartAnimMontageAt);


// Function  AngelscriptGAS.AngelscriptAbilityTaskLibrary.WaitDelay
// Offset::0x1AA83B0;
FAbilityTask_WaitDelay* FAngelscriptAbilityTaskLibrary::WaitDelay(FGameplayAbility* OwningAbility,float Time);


// Function  AngelscriptGAS.AngelscriptAbilityTaskLibrary.WaitGameplayEvent
// Offset::0x1AA84A0;
FAbilityTask_WaitGameplayEvent* FAngelscriptAbilityTaskLibrary::WaitGameplayEvent(FGameplayAbility* OwningAbility,FGameplayTag EventTag,FActor* OptionalExternalTarget,bool OnlyTriggerOnce,bool OnlyMatchExact);


// Function  AngelscriptGAS.AngelscriptAbilityTaskLibrary.WaitGameplayTagAdd
// Offset::0x1AA8220;
FAbilityTask_WaitGameplayTagAdded* FAngelscriptAbilityTaskLibrary::WaitGameplayTagAdd(FGameplayAbility* OwningAbility,FGameplayTag Tag,FActor* InOptionalExternalTarget,bool OnlyTriggerOnce);


// Function  AngelscriptGAS.AngelscriptAbilityTaskLibrary.WaitGameplayTagRemove
// Offset::0x1AA8090;
FAbilityTask_WaitGameplayTagRemoved* FAngelscriptAbilityTaskLibrary::WaitGameplayTagRemove(FGameplayAbility* OwningAbility,FGameplayTag Tag,FActor* InOptionalExternalTarget,bool OnlyTriggerOnce);


// Function  AngelscriptGAS.AngelscriptAbilityTaskLibrary.WaitMovementModeChange
// Offset::0x1AA7EB0;
FAbilityTask_WaitMovementModeChange* FAngelscriptAbilityTaskLibrary::WaitMovementModeChange(FGameplayAbility* OwningAbility,enum class EMovementMode NewMode);


// Function  AngelscriptGAS.AngelscriptAbilityTaskLibrary.WaitNetSync
// Offset::0x1AA7FA0;
FAbilityTask_NetworkSyncPoint* FAngelscriptAbilityTaskLibrary::WaitNetSync(FGameplayAbility* OwningAbility,enum class EAbilityTaskNetSyncType SyncType);


// Function  AngelscriptGAS.AngelscriptAttributeSet.BP_GetActorInfo
// Offset::0x1AA96B0;
FGameplayAbilityActorInfo FAngelscriptAttributeSet::BP_GetActorInfo();


// Function  AngelscriptGAS.AngelscriptAttributeSet.BP_GetOwningAbilitySystemComponent
// Offset::0x1AA9700;
FAngelscriptAbilitySystemComponent* FAngelscriptAttributeSet::BP_GetOwningAbilitySystemComponent();


// Function  AngelscriptGAS.AngelscriptAttributeSet.BP_GetOwningActor
// Offset::0x1AA9730;
FActor* FAngelscriptAttributeSet::BP_GetOwningActor();


// Function  AngelscriptGAS.AngelscriptAttributeSet.BP_InitFromMetaDataTable
// Offset::0x1AA9940;
bool FAngelscriptAttributeSet::BP_InitFromMetaDataTable(FDataTable* DataTable);


// Function  AngelscriptGAS.AngelscriptAttributeSet.BP_PostGameplayEffectExecute
// Offset::0x3D30810;
void FAngelscriptAttributeSet::BP_PostGameplayEffectExecute(FGameplayEffectSpec EffectSpec,FGameplayModifierEvaluatedData EvaluatedData,FAngelscriptAbilitySystemComponent* AbilitySystemComponent);


// Function  AngelscriptGAS.AngelscriptAttributeSet.BP_PreAttributeBaseChange
// Offset::0x3D30810;
void FAngelscriptAttributeSet::BP_PreAttributeBaseChange(FGameplayAttribute Attribute,float NewValue);


// Function  AngelscriptGAS.AngelscriptAttributeSet.BP_PreAttributeChange
// Offset::0x3D30810;
void FAngelscriptAttributeSet::BP_PreAttributeChange(FGameplayAttribute Attribute,float NewValue);


// Function  AngelscriptGAS.AngelscriptAttributeSet.BP_PreGameplayEffectExecute
// Offset::0x1AA9760;
bool FAngelscriptAttributeSet::BP_PreGameplayEffectExecute(FGameplayEffectSpec EffectSpec,FGameplayModifierEvaluatedData EvaluatedData,FAngelscriptAbilitySystemComponent* AbilitySystemComponent);


// Function  AngelscriptGAS.AngelscriptAttributeSet.CompareGameplayAttributes
// Offset::0x1AA8FA0;
bool FAngelscriptAttributeSet::CompareGameplayAttributes(FGameplayAttribute First,FGameplayAttribute Second);


// Function  AngelscriptGAS.AngelscriptAttributeSet.GetGameplayAttribute
// Offset::0x1AA92B0;
FGameplayAttribute FAngelscriptAttributeSet::GetGameplayAttribute(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName);


// Function  AngelscriptGAS.AngelscriptAttributeSet.OnRep_Attribute
// Offset::0x1AA99E0;
void FAngelscriptAttributeSet::OnRep_Attribute(FAngelscriptGameplayAttributeData OldAttributeData);


// Function  AngelscriptGAS.AngelscriptAttributeSet.TryGetAttributeBaseValue
// Offset::0x1AA93C0;
bool FAngelscriptAttributeSet::TryGetAttributeBaseValue(FName AttributeName,float OutBaseValue);


// Function  AngelscriptGAS.AngelscriptAttributeSet.TryGetAttributeCurrentValue
// Offset::0x1AA94C0;
bool FAngelscriptAttributeSet::TryGetAttributeCurrentValue(FName AttributeName,float OutCurrentValue);


// Function  AngelscriptGAS.AngelscriptAttributeSet.TryGetGameplayAttribute
// Offset::0x1AA9130;
bool FAngelscriptAttributeSet::TryGetGameplayAttribute(FAngelscriptAttributeSet* AttributeSetClass,FName AttributeName,FGameplayAttribute OutGameplayAttribute);


// Function  AngelscriptGAS.AngelscriptAttributeSet.TrySetAttributeBaseValue
// Offset::0x1AA95C0;
bool FAngelscriptAttributeSet::TrySetAttributeBaseValue(FName AttributeName,float NewBaseValue);


// Function  AngelscriptGAS.AngelscriptGameplayAttributeDataMixinLibrary.GetBaseValue
// Offset::0x1AAB1F0;
float FAngelscriptGameplayAttributeDataMixinLibrary::GetBaseValue(FAngelscriptGameplayAttributeData Data);


// Function  AngelscriptGAS.AngelscriptGameplayAttributeDataMixinLibrary.GetCurrentValue
// Offset::0x1AAB120;
float FAngelscriptGameplayAttributeDataMixinLibrary::GetCurrentValue(FAngelscriptGameplayAttributeData Data);


// Function  AngelscriptGAS.AngelscriptGameplayAttributeDataMixinLibrary.Initialize
// Offset::0x1AAB4E0;
void FAngelscriptGameplayAttributeDataMixinLibrary::Initialize(FAngelscriptGameplayAttributeData Data,float InitialData);


// Function  AngelscriptGAS.AngelscriptGameplayAttributeDataMixinLibrary.SetBaseValue
// Offset::0x1AAB2C0;
void FAngelscriptGameplayAttributeDataMixinLibrary::SetBaseValue(FAngelscriptGameplayAttributeData Data,float NewValue);


// Function  AngelscriptGAS.AngelscriptGameplayAttributeDataMixinLibrary.SetCurrentValue
// Offset::0x1AAB3D0;
void FAngelscriptGameplayAttributeDataMixinLibrary::SetCurrentValue(FAngelscriptGameplayAttributeData Data,float NewValue);


// Function  AngelscriptGAS.AngelscriptGameplayCueUtils.AddLocalGameplayCue
// Offset::0x1AAC2A0;
void FAngelscriptGameplayCueUtils::AddLocalGameplayCue(FActor* TargetActor,FGameplayTag GameplayCueTag,FGameplayCueParameters Parameters);


// Function  AngelscriptGAS.AngelscriptGameplayCueUtils.ExecuteLocalGameplayCue
// Offset::0x1AABC40;
void FAngelscriptGameplayCueUtils::ExecuteLocalGameplayCue(FActor* TargetActor,FGameplayTag GameplayCueTag,FGameplayCueParameters Parameters);


// Function  AngelscriptGAS.AngelscriptGameplayCueUtils.FindInstancedCueActor
// Offset::0x1AABAB0;
FGameplayCueNotify_Actor* FAngelscriptGameplayCueUtils::FindInstancedCueActor(FActor* TargetActor,FGameplayTag Tag,FActor* InstigatorActor,FObject* SourceObj);


// Function  AngelscriptGAS.AngelscriptGameplayCueUtils.RemoveLocalGameplayCue
// Offset::0x1AABF70;
void FAngelscriptGameplayCueUtils::RemoveLocalGameplayCue(FActor* TargetActor,FGameplayTag GameplayCueTag,FGameplayCueParameters Parameters);


// Function  AngelscriptGAS.GameplayEffectExecutionParametersMixinLibrary.GetAppliedSourceTagFilter
// Offset::0x1AAD410;
FGameplayTagContainer FGameplayEffectExecutionParametersMixinLibrary::GetAppliedSourceTagFilter(FGameplayEffectExecutionParameters Data);


// Function  AngelscriptGAS.GameplayEffectExecutionParametersMixinLibrary.GetAppliedTargetTagFilter
// Offset::0x1AAD2E0;
FGameplayTagContainer FGameplayEffectExecutionParametersMixinLibrary::GetAppliedTargetTagFilter(FGameplayEffectExecutionParameters Data);


// Function  AngelscriptGAS.GameplayEffectExecutionParametersMixinLibrary.GetIgnoreHandles
// Offset::0x1AAD540;
TArray<FActiveGameplayEffectHandle> FGameplayEffectExecutionParametersMixinLibrary::GetIgnoreHandles(FGameplayEffectExecutionParameters Data);


// Function  AngelscriptGAS.GameplayEffectExecutionParametersMixinLibrary.GetIncludePredictiveMods
// Offset::0x1AAD1B0;
bool FGameplayEffectExecutionParametersMixinLibrary::GetIncludePredictiveMods(FGameplayEffectExecutionParameters Data);


// Function  AngelscriptGAS.GameplayEffectExecutionParametersMixinLibrary.SetCapturedSourceTagsFromSpec
// Offset::0x1AACE30;
void FGameplayEffectExecutionParametersMixinLibrary::SetCapturedSourceTagsFromSpec(FGameplayEffectExecutionParameters Data,FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectExecutionParametersMixinLibrary.SetIncludePredictiveMods
// Offset::0x1AAD030;
void FGameplayEffectExecutionParametersMixinLibrary::SetIncludePredictiveMods(FGameplayEffectExecutionParameters Data,bool bShouldIncludePredictiveMods);


// Function  AngelscriptGAS.GameplayEffectExecutionParametersMixinLibrary.SetSourceTags
// Offset::0x1AACC90;
void FGameplayEffectExecutionParametersMixinLibrary::SetSourceTags(FGameplayEffectExecutionParameters Data,FGameplayTagContainer SourceTags);


// Function  AngelscriptGAS.GameplayEffectExecutionParametersMixinLibrary.SetTargetTags
// Offset::0x1AACAE0;
void FGameplayEffectExecutionParametersMixinLibrary::SetTargetTags(FGameplayEffectExecutionParameters Data,FGameplayTagContainer TargetTags);


// Function  AngelscriptGAS.AngelscriptGameplayEffectUtils.CaptureGameplayAttribute
// Offset::0x1AAE3D0;
FGameplayEffectAttributeCaptureDefinition FAngelscriptGameplayEffectUtils::CaptureGameplayAttribute(FStruct* AttributeSetType,FName AttributeName,enum class EGameplayEffectAttributeCaptureSource InSource,bool bIsSnapshot);


// Function  AngelscriptGAS.AngelscriptGameplayEffectUtils.MakeGameplayEffectExecutionScopedModifierInfo
// Offset::0x1AADCD0;
FGameplayEffectExecutionScopedModifierInfo FAngelscriptGameplayEffectUtils::MakeGameplayEffectExecutionScopedModifierInfo(FGameplayEffectAttributeCaptureDefinition InCaptureDef);


// Function  AngelscriptGAS.AngelscriptGameplayEffectUtils.MakeGameplayModifierEvaluationData
// Offset::0x1AAE180;
FGameplayModifierEvaluatedData FAngelscriptGameplayEffectUtils::MakeGameplayModifierEvaluationData(FGameplayAttribute InAttribute,enum class EGameplayModOp InModOp,float InMagnitude);


// Function  GameplayAbilities.GameplayAbility.BP_ApplyGameplayEffectToOwner
// Offset::0x1BAA740;
FActiveGameplayEffectHandle FGameplayAbility::BP_ApplyGameplayEffectToOwner(FGameplayEffect* GameplayEffectClass,int32_t GameplayEffectLevel,int32_t Stacks);


// Function  GameplayAbilities.GameplayAbility.BP_ApplyGameplayEffectToTarget
// Offset::0x1BAA290;
TArray<FActiveGameplayEffectHandle> FGameplayAbility::BP_ApplyGameplayEffectToTarget(FGameplayAbilityTargetDataHandle TargetData,FGameplayEffect* GameplayEffectClass,int32_t GameplayEffectLevel,int32_t Stacks);


// Function  GameplayAbilities.GameplayAbility.BP_RemoveGameplayEffectFromOwnerWithAssetTags
// Offset::0x1BA9E20;
void FGameplayAbility::BP_RemoveGameplayEffectFromOwnerWithAssetTags(FGameplayTagContainer WithAssetTags,int32_t StacksToRemove);


// Function  GameplayAbilities.GameplayAbility.BP_RemoveGameplayEffectFromOwnerWithGrantedTags
// Offset::0x1BA9CF0;
void FGameplayAbility::BP_RemoveGameplayEffectFromOwnerWithGrantedTags(FGameplayTagContainer WithGrantedTags,int32_t StacksToRemove);


// Function  GameplayAbilities.GameplayAbility.BP_RemoveGameplayEffectFromOwnerWithHandle
// Offset::0x1BA9C00;
void FGameplayAbility::BP_RemoveGameplayEffectFromOwnerWithHandle(FActiveGameplayEffectHandle Handle,int32_t StacksToRemove);


// Function  GameplayAbilities.GameplayAbility.CancelTaskByInstanceName
// Offset::0x1BA91B0;
void FGameplayAbility::CancelTaskByInstanceName(FName InstanceName);


// Function  GameplayAbilities.GameplayAbility.ConfirmTaskByInstanceName
// Offset::0x1BA92F0;
void FGameplayAbility::ConfirmTaskByInstanceName(FName InstanceName,bool bEndTask);


// Function  GameplayAbilities.GameplayAbility.EndAbilityState
// Offset::0x1BA9110;
void FGameplayAbility::EndAbilityState(FName OptionalStateNameToEnd);


// Function  GameplayAbilities.GameplayAbility.EndTaskByInstanceName
// Offset::0x1BA9250;
void FGameplayAbility::EndTaskByInstanceName(FName InstanceName);


// Function  GameplayAbilities.GameplayAbility.GetAbilityLevel
// Offset::0x1BAAEF0;
int32_t FGameplayAbility::GetAbilityLevel();


// Function  GameplayAbilities.GameplayAbility.GetAbilityLevel_BP
// Offset::0x1BAADD0;
int32_t FGameplayAbility::GetAbilityLevel_BP(FGameplayAbilitySpecHandle Handle,FGameplayAbilityActorInfo ActorInfo);


// Function  GameplayAbilities.GameplayAbility.GetAbilitySystemComponentFromActorInfo
// Offset::0x1BAB8B0;
FAbilitySystemComponent* FGameplayAbility::GetAbilitySystemComponentFromActorInfo();


// Function  GameplayAbilities.GameplayAbility.GetActorInfo
// Offset::0x1BAB970;
FGameplayAbilityActorInfo FGameplayAbility::GetActorInfo();


// Function  GameplayAbilities.GameplayAbility.GetAvatarActorFromActorInfo
// Offset::0x1BAB910;
FActor* FGameplayAbility::GetAvatarActorFromActorInfo();


// Function  GameplayAbilities.GameplayAbility.GetContextFromOwner
// Offset::0x1BAB500;
FGameplayEffectContextHandle FGameplayAbility::GetContextFromOwner(FGameplayAbilityTargetDataHandle OptionalTargetData);


// Function  GameplayAbilities.GameplayAbility.GetCooldownTimeRemaining
// Offset::0x1BAB2F0;
float FGameplayAbility::GetCooldownTimeRemaining();


// Function  GameplayAbilities.GameplayAbility.GetCurrentMontage
// Offset::0x1BAAF20;
FAnimMontage* FGameplayAbility::GetCurrentMontage();


// Function  GameplayAbilities.GameplayAbility.GetCurrentSourceObject
// Offset::0x1BAADA0;
FObject* FGameplayAbility::GetCurrentSourceObject();


// Function  GameplayAbilities.GameplayAbility.GetGrantedByEffectContext
// Offset::0x1BAB7E0;
FGameplayEffectContextHandle FGameplayAbility::GetGrantedByEffectContext();


// Function  GameplayAbilities.GameplayAbility.GetOwningActorFromActorInfo
// Offset::0x1BAB940;
FActor* FGameplayAbility::GetOwningActorFromActorInfo();


// Function  GameplayAbilities.GameplayAbility.GetOwningComponentFromActorInfo
// Offset::0x1BAB8E0;
FSkeletalMeshComponent* FGameplayAbility::GetOwningComponentFromActorInfo();


// Function  GameplayAbilities.GameplayAbility.GetSourceObject_BP
// Offset::0x1BAAC80;
FObject* FGameplayAbility::GetSourceObject_BP(FGameplayAbilitySpecHandle Handle,FGameplayAbilityActorInfo ActorInfo);


// Function  GameplayAbilities.GameplayAbility.InvalidateClientPredictionKey
// Offset::0x1BAAC60;
void FGameplayAbility::InvalidateClientPredictionKey();


// Function  GameplayAbilities.GameplayAbility.IsLocallyControlled
// Offset::0x1BAB350;
bool FGameplayAbility::IsLocallyControlled();


// Function  GameplayAbilities.GameplayAbility.K2_ActivateAbility
// Offset::0x3D30810;
void FGameplayAbility::K2_ActivateAbility();


// Function  GameplayAbilities.GameplayAbility.K2_ActivateAbilityFromEvent
// Offset::0x3D30810;
void FGameplayAbility::K2_ActivateAbilityFromEvent(FGameplayEventData EventData);


// Function  GameplayAbilities.GameplayAbility.K2_AddGameplayCue
// Offset::0x1BA96F0;
void FGameplayAbility::K2_AddGameplayCue(FGameplayTag GameplayCueTag,FGameplayEffectContextHandle Context,bool bRemoveOnAbilityEnd);


// Function  GameplayAbilities.GameplayAbility.K2_AddGameplayCueWithParams
// Offset::0x1BA9480;
void FGameplayAbility::K2_AddGameplayCueWithParams(FGameplayTag GameplayCueTag,FGameplayCueParameters GameplayCueParameter,bool bRemoveOnAbilityEnd);


// Function  GameplayAbilities.GameplayAbility.K2_ApplyGameplayEffectSpecToOwner
// Offset::0x1BAA650;
FActiveGameplayEffectHandle FGameplayAbility::K2_ApplyGameplayEffectSpecToOwner(FGameplayEffectSpecHandle EffectSpecHandle);


// Function  GameplayAbilities.GameplayAbility.K2_ApplyGameplayEffectSpecToTarget
// Offset::0x1BA9F50;
TArray<FActiveGameplayEffectHandle> FGameplayAbility::K2_ApplyGameplayEffectSpecToTarget(FGameplayEffectSpecHandle EffectSpecHandle,FGameplayAbilityTargetDataHandle TargetData);


// Function  GameplayAbilities.GameplayAbility.K2_CanActivateAbility
// Offset::0x3D30810;
bool FGameplayAbility::K2_CanActivateAbility(FGameplayAbilityActorInfo ActorInfo,FGameplayAbilitySpecHandle Handle,FGameplayTagContainer RelevantTags);


// Function  GameplayAbilities.GameplayAbility.K2_CancelAbility
// Offset::0x1BAB230;
void FGameplayAbility::K2_CancelAbility();


// Function  GameplayAbilities.GameplayAbility.K2_CheckAbilityCooldown
// Offset::0x1BAAF80;
bool FGameplayAbility::K2_CheckAbilityCooldown();


// Function  GameplayAbilities.GameplayAbility.K2_CheckAbilityCost
// Offset::0x1BAAF50;
bool FGameplayAbility::K2_CheckAbilityCost();


// Function  GameplayAbilities.GameplayAbility.K2_CommitAbility
// Offset::0x1BAB160;
bool FGameplayAbility::K2_CommitAbility();


// Function  GameplayAbilities.GameplayAbility.K2_CommitAbilityCooldown
// Offset::0x1BAB060;
bool FGameplayAbility::K2_CommitAbilityCooldown(bool BroadcastCommitEvent,bool ForceCooldown);


// Function  GameplayAbilities.GameplayAbility.K2_CommitAbilityCost
// Offset::0x1BAAFB0;
bool FGameplayAbility::K2_CommitAbilityCost(bool BroadcastCommitEvent);


// Function  GameplayAbilities.GameplayAbility.K2_CommitExecute
// Offset::0x3D30810;
void FGameplayAbility::K2_CommitExecute();


// Function  GameplayAbilities.GameplayAbility.K2_EndAbility
// Offset::0x1BAA8A0;
void FGameplayAbility::K2_EndAbility();


// Function  GameplayAbilities.GameplayAbility.K2_EndAbilityLocally
// Offset::0x1BAA880;
void FGameplayAbility::K2_EndAbilityLocally();


// Function  GameplayAbilities.GameplayAbility.K2_ExecuteGameplayCue
// Offset::0x1BA9AB0;
void FGameplayAbility::K2_ExecuteGameplayCue(FGameplayTag GameplayCueTag,FGameplayEffectContextHandle Context);


// Function  GameplayAbilities.GameplayAbility.K2_ExecuteGameplayCueWithParams
// Offset::0x1BA9890;
void FGameplayAbility::K2_ExecuteGameplayCueWithParams(FGameplayTag GameplayCueTag,FGameplayCueParameters GameplayCueParameters);


// Function  GameplayAbilities.GameplayAbility.K2_HasAuthority
// Offset::0x1BAB320;
bool FGameplayAbility::K2_HasAuthority();


// Function  GameplayAbilities.GameplayAbility.K2_OnEndAbility
// Offset::0x3D30810;
void FGameplayAbility::K2_OnEndAbility(bool bWasCancelled);


// Function  GameplayAbilities.GameplayAbility.K2_RemoveGameplayCue
// Offset::0x1BA93E0;
void FGameplayAbility::K2_RemoveGameplayCue(FGameplayTag GameplayCueTag);


// Function  GameplayAbilities.GameplayAbility.K2_ShouldAbilityRespondToEvent
// Offset::0x3D30810;
bool FGameplayAbility::K2_ShouldAbilityRespondToEvent(FGameplayAbilityActorInfo ActorInfo,FGameplayEventData Payload);


// Function  GameplayAbilities.GameplayAbility.MakeOutgoingGameplayEffectSpec
// Offset::0x1BAB380;
FGameplayEffectSpecHandle FGameplayAbility::MakeOutgoingGameplayEffectSpec(FGameplayEffect* GameplayEffectClass,float Level);


// Function  GameplayAbilities.GameplayAbility.MakeTargetLocationInfoFromOwnerActor
// Offset::0x1BA8E20;
FGameplayAbilityTargetingLocationInfo FGameplayAbility::MakeTargetLocationInfoFromOwnerActor();


// Function  GameplayAbilities.GameplayAbility.MakeTargetLocationInfoFromOwnerSkeletalMeshComponent
// Offset::0x1BA8D00;
FGameplayAbilityTargetingLocationInfo FGameplayAbility::MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(FName SocketName);


// Function  GameplayAbilities.GameplayAbility.MontageJumpToSection
// Offset::0x1BA9070;
void FGameplayAbility::MontageJumpToSection(FName SectionName);


// Function  GameplayAbilities.GameplayAbility.MontageSetNextSectionName
// Offset::0x1BA8F90;
void FGameplayAbility::MontageSetNextSectionName(FName FromSectionName,FName ToSectionName);


// Function  GameplayAbilities.GameplayAbility.MontageStop
// Offset::0x1BA8EF0;
void FGameplayAbility::MontageStop(float OverrideBlendOutTime);


// Function  GameplayAbilities.GameplayAbility.RemoveGrantedByEffect
// Offset::0x1BAAC40;
void FGameplayAbility::RemoveGrantedByEffect();


// Function  GameplayAbilities.GameplayAbility.SendGameplayEvent
// Offset::0x1BAA8C0;
void FGameplayAbility::SendGameplayEvent(FGameplayTag EventTag,FGameplayEventData Payload);


// Function  GameplayAbilities.GameplayAbility.SetCanBeCanceled
// Offset::0x1BAB190;
void FGameplayAbility::SetCanBeCanceled(bool bCanBeCanceled);


// Function  GameplayAbilities.GameplayAbility.SetShouldBlockOtherAbilities
// Offset::0x1BAB250;
void FGameplayAbility::SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);


// Function  AngelscriptGAS.AngelscriptGASAbility.K2_AddGameplayCue_Actor
// Offset::0x1AB0790;
void FAngelscriptGASAbility::K2_AddGameplayCue_Actor(FGameplayCueNotify_Actor* GameplayCue,FGameplayEffectContextHandle Context,bool bRemoveOnAbilityEnd);


// Function  AngelscriptGAS.AngelscriptGASAbility.K2_AddGameplayCue_Static
// Offset::0x1AAFF70;
void FAngelscriptGASAbility::K2_AddGameplayCue_Static(FGameplayCueNotify_Static* GameplayCue,FGameplayEffectContextHandle Context,bool bRemoveOnAbilityEnd);


// Function  AngelscriptGAS.AngelscriptGASAbility.K2_AddGameplayCueWithParams_Actor
// Offset::0x1AB0520;
void FAngelscriptGASAbility::K2_AddGameplayCueWithParams_Actor(FGameplayCueNotify_Actor* GameplayCue,FGameplayCueParameters GameplayCueParameter,bool bRemoveOnAbilityEnd);


// Function  AngelscriptGAS.AngelscriptGASAbility.K2_AddGameplayCueWithParams_Static
// Offset::0x1AAFD00;
void FAngelscriptGASAbility::K2_AddGameplayCueWithParams_Static(FGameplayCueNotify_Static* GameplayCue,FGameplayCueParameters GameplayCueParameter,bool bRemoveOnAbilityEnd);


// Function  AngelscriptGAS.AngelscriptGASAbility.K2_ExecuteGameplayCue_Actor
// Offset::0x1AB0B50;
void FAngelscriptGASAbility::K2_ExecuteGameplayCue_Actor(FGameplayCueNotify_Actor* GameplayCue,FGameplayEffectContextHandle Context);


// Function  AngelscriptGAS.AngelscriptGASAbility.K2_ExecuteGameplayCue_Static
// Offset::0x1AB0330;
void FAngelscriptGASAbility::K2_ExecuteGameplayCue_Static(FGameplayCueNotify_Static* GameplayCue,FGameplayEffectContextHandle Context);


// Function  AngelscriptGAS.AngelscriptGASAbility.K2_ExecuteGameplayCueWithParams_Actor
// Offset::0x1AB0930;
void FAngelscriptGASAbility::K2_ExecuteGameplayCueWithParams_Actor(FGameplayCueNotify_Actor* GameplayCue,FGameplayCueParameters GameplayCueParameters);


// Function  AngelscriptGAS.AngelscriptGASAbility.K2_ExecuteGameplayCueWithParams_Static
// Offset::0x1AB0110;
void FAngelscriptGASAbility::K2_ExecuteGameplayCueWithParams_Static(FGameplayCueNotify_Static* GameplayCue,FGameplayCueParameters GameplayCueParameters);


// Function  AngelscriptGAS.AngelscriptGASAbility.K2_RemoveGameplayCue_Actor
// Offset::0x1AB0480;
void FAngelscriptGASAbility::K2_RemoveGameplayCue_Actor(FGameplayCueNotify_Actor* GameplayCue);


// Function  AngelscriptGAS.AngelscriptGASAbility.K2_RemoveGameplayCue_Static
// Offset::0x1AAFC60;
void FAngelscriptGASAbility::K2_RemoveGameplayCue_Static(FGameplayCueNotify_Static* GameplayCue);


// Function  AngelscriptGAS.AngelscriptGASCharacter.SetupCharacterInput
// Offset::0x3D30810;
void FAngelscriptGASCharacter::SetupCharacterInput(FInputComponent* PlayerInputComponent);


// Function  AngelscriptGAS.AngelscriptGASPawn.SetupPawnInput
// Offset::0x3D30810;
void FAngelscriptGASPawn::SetupPawnInput(FInputComponent* PlayerInputComponent);


// Function  AngelscriptGAS.GameplayAbilityActorInfoMixinLibrary.GetAbilitySystemComponent
// Offset::0x1AB2220;
FAbilitySystemComponent* FGameplayAbilityActorInfoMixinLibrary::GetAbilitySystemComponent(FGameplayAbilityActorInfo Info);


// Function  AngelscriptGAS.GameplayAbilityActorInfoMixinLibrary.GetAnimInstance
// Offset::0x1AB1F70;
FAnimInstance* FGameplayAbilityActorInfoMixinLibrary::GetAnimInstance(FGameplayAbilityActorInfo Info);


// Function  AngelscriptGAS.GameplayAbilityActorInfoMixinLibrary.GetAvatarActor
// Offset::0x1AB2460;
FActor* FGameplayAbilityActorInfoMixinLibrary::GetAvatarActor(FGameplayAbilityActorInfo Info);


// Function  AngelscriptGAS.GameplayAbilityActorInfoMixinLibrary.GetMovementComponent
// Offset::0x1AB1E50;
FMovementComponent* FGameplayAbilityActorInfoMixinLibrary::GetMovementComponent(FGameplayAbilityActorInfo Info);


// Function  AngelscriptGAS.GameplayAbilityActorInfoMixinLibrary.GetOwnerActor
// Offset::0x1AB2580;
FActor* FGameplayAbilityActorInfoMixinLibrary::GetOwnerActor(FGameplayAbilityActorInfo Info);


// Function  AngelscriptGAS.GameplayAbilityActorInfoMixinLibrary.GetPlayerController
// Offset::0x1AB2340;
FPlayerController* FGameplayAbilityActorInfoMixinLibrary::GetPlayerController(FGameplayAbilityActorInfo Info);


// Function  AngelscriptGAS.GameplayAbilityActorInfoMixinLibrary.GetSkeletalMeshComponent
// Offset::0x1AB2100;
FSkeletalMeshComponent* FGameplayAbilityActorInfoMixinLibrary::GetSkeletalMeshComponent(FGameplayAbilityActorInfo Info);


// Function  AngelscriptGAS.GameplayAbilityActorInfoMixinLibrary.IsLocallyControlled
// Offset::0x1AB1D70;
bool FGameplayAbilityActorInfoMixinLibrary::IsLocallyControlled(FGameplayAbilityActorInfo Info);


// Function  AngelscriptGAS.GameplayAbilityActorInfoMixinLibrary.IsLocallyControlledPlayer
// Offset::0x1AB1C90;
bool FGameplayAbilityActorInfoMixinLibrary::IsLocallyControlledPlayer(FGameplayAbilityActorInfo Info);


// Function  AngelscriptGAS.GameplayAbilityActorInfoMixinLibrary.IsNetAuthority
// Offset::0x1AB1BB0;
bool FGameplayAbilityActorInfoMixinLibrary::IsNetAuthority(FGameplayAbilityActorInfo Info);


// Function  AngelscriptGAS.GameplayAbilityMixinLibrary.GetSourceObject
// Offset::0x1AB2DC0;
FObject* FGameplayAbilityMixinLibrary::GetSourceObject(FGameplayAbility* Ability,FGameplayAbilitySpecHandle Handle,FGameplayAbilityActorInfo ActorInfo);


// Function  AngelscriptGAS.GameplayCueParametersMixinLibrary.GetEffectCauser
// Offset::0x1AB33A0;
FActor* FGameplayCueParametersMixinLibrary::GetEffectCauser(FGameplayCueParameters GameplayCueParams);


// Function  AngelscriptGAS.GameplayCueParametersMixinLibrary.GetInstigator
// Offset::0x1AB3570;
FActor* FGameplayCueParametersMixinLibrary::GetInstigator(FGameplayCueParameters GameplayCueParams);


// Function  AngelscriptGAS.GameplayCueParametersMixinLibrary.GetTargetAttachComponent
// Offset::0x1AB31C0;
FSceneComponent* FGameplayCueParametersMixinLibrary::GetTargetAttachComponent(FGameplayCueParameters GameplayCueParams);


// Function  AngelscriptGAS.GameplayCueParametersMixinLibrary.SetEffectCauser
// Offset::0x1AB3E00;
void FGameplayCueParametersMixinLibrary::SetEffectCauser(FGameplayCueParameters GameplayCueParams,FActor* EffectCauser);


// Function  AngelscriptGAS.GameplayCueParametersMixinLibrary.SetInstigator
// Offset::0x1AB4040;
void FGameplayCueParametersMixinLibrary::SetInstigator(FGameplayCueParameters GameplayCueParams,FActor* Instigator);


// Function  AngelscriptGAS.GameplayCueParametersMixinLibrary.SetPhysicalMaterial
// Offset::0x1AB3980;
void FGameplayCueParametersMixinLibrary::SetPhysicalMaterial(FGameplayCueParameters GameplayCueParams,FPhysicalMaterial* PhysicalMaterial);


// Function  AngelscriptGAS.GameplayCueParametersMixinLibrary.SetSourceObject
// Offset::0x1AB3BC0;
void FGameplayCueParametersMixinLibrary::SetSourceObject(FGameplayCueParameters GameplayCueParams,FObject* SourceObject);


// Function  AngelscriptGAS.GameplayCueParametersMixinLibrary.SetTargetAttachComponent
// Offset::0x1AB3740;
void FGameplayCueParametersMixinLibrary::SetTargetAttachComponent(FGameplayCueParameters GameplayCueParams,FSceneComponent* TargetAttachComponent);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.AddActors
// Offset::0x1AB5B50;
void FGameplayEffectContextHandleMixinLibrary::AddActors(FGameplayEffectContextHandle Handle,TArray<FActor*> InActors,bool bReset);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.AddHitResult
// Offset::0x1AB5F70;
void FGameplayEffectContextHandleMixinLibrary::AddHitResult(FGameplayEffectContextHandle Handle,FHitResult InHitResult,bool bReset);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.AddInstigator
// Offset::0x1AB6610;
void FGameplayEffectContextHandleMixinLibrary::AddInstigator(FGameplayEffectContextHandle Handle,FActor* InInstigator,FActor* InEffectCauser);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.AddOrigin
// Offset::0x1AB5DE0;
void FGameplayEffectContextHandleMixinLibrary::AddOrigin(FGameplayEffectContextHandle Handle,FVector InOrigin);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.AddSourceObject
// Offset::0x1AB6210;
void FGameplayEffectContextHandleMixinLibrary::AddSourceObject(FGameplayEffectContextHandle Handle,FObject* NewSourceObject);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.Clear
// Offset::0x1AB67B0;
void FGameplayEffectContextHandleMixinLibrary::Clear(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.GetAbilityLevel
// Offset::0x1AB5400;
int32_t FGameplayEffectContextHandleMixinLibrary::GetAbilityLevel(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.GetActors
// Offset::0x1AB5920;
TArray<FActor*> FGameplayEffectContextHandleMixinLibrary::GetActors(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.GetEffectCauser
// Offset::0x1AB52E0;
FActor* FGameplayEffectContextHandleMixinLibrary::GetEffectCauser(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.GetHitResult
// Offset::0x1AB4890;
bool FGameplayEffectContextHandleMixinLibrary::GetHitResult(FGameplayEffectContextHandle Handle,FHitResult OutHitResult);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.GetInstigator
// Offset::0x1AB5500;
FActor* FGameplayEffectContextHandleMixinLibrary::GetInstigator(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.GetOrigin
// Offset::0x1AB4C40;
FVector FGameplayEffectContextHandleMixinLibrary::GetOrigin(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.GetOriginalInstigator
// Offset::0x1AB51D0;
FActor* FGameplayEffectContextHandleMixinLibrary::GetOriginalInstigator(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.GetOriginalInstigatorAbilitySystemComponent
// Offset::0x1AB50C0;
FAbilitySystemComponent* FGameplayEffectContextHandleMixinLibrary::GetOriginalInstigatorAbilitySystemComponent(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.GetOwnedGameplayTags
// Offset::0x1AB5710;
void FGameplayEffectContextHandleMixinLibrary::GetOwnedGameplayTags(FGameplayEffectContextHandle Handle,FGameplayTagContainer ActorTagContainer,FGameplayTagContainer SpecTagContainer);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.GetSourceObject
// Offset::0x1AB4FB0;
FObject* FGameplayEffectContextHandleMixinLibrary::GetSourceObject(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.HasOrigin
// Offset::0x1AB4B20;
bool FGameplayEffectContextHandleMixinLibrary::HasOrigin(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.IsLocallyControlled
// Offset::0x1AB4EA0;
bool FGameplayEffectContextHandleMixinLibrary::IsLocallyControlled(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.IsLocallyControlledPlayer
// Offset::0x1AB4D90;
bool FGameplayEffectContextHandleMixinLibrary::IsLocallyControlledPlayer(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.IsValid
// Offset::0x1AB5620;
bool FGameplayEffectContextHandleMixinLibrary::IsValid(FGameplayEffectContextHandle Handle);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.SetAbility
// Offset::0x1AB64C0;
void FGameplayEffectContextHandleMixinLibrary::SetAbility(FGameplayEffectContextHandle Handle,FGameplayAbility* InGameplayAbility);


// Function  AngelscriptGAS.GameplayEffectContextHandleMixinLibrary.SetEffectCauser
// Offset::0x1AB6360;
void FGameplayEffectContextHandleMixinLibrary::SetEffectCauser(FGameplayEffectContextHandle Handle,FActor* NewEffectCauser);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionOutputMixinLibrary.AddOutputModifier
// Offset::0x1AB7940;
void FGameplayEffectCustomExecutionOutputMixinLibrary::AddOutputModifier(FGameplayEffectCustomExecutionOutput CustomExecutionOutput,FGameplayModifierEvaluatedData InOutputMod);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionOutputMixinLibrary.AreGameplayCuesHandledManually
// Offset::0x1AB7E10;
bool FGameplayEffectCustomExecutionOutputMixinLibrary::AreGameplayCuesHandledManually(FGameplayEffectCustomExecutionOutput CustomExecutionOutput);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionOutputMixinLibrary.GetOutputModifiers
// Offset::0x1AB7830;
TArray<FGameplayModifierEvaluatedData> FGameplayEffectCustomExecutionOutputMixinLibrary::GetOutputModifiers(FGameplayEffectCustomExecutionOutput CustomExecutionOutput);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionOutputMixinLibrary.GetOutputModifiersRef
// Offset::0x1AB7670;
TArray<FGameplayModifierEvaluatedData> FGameplayEffectCustomExecutionOutputMixinLibrary::GetOutputModifiersRef(FGameplayEffectCustomExecutionOutput CustomExecutionOutput);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionOutputMixinLibrary.IsStackCountHandledManually
// Offset::0x1AB7F20;
bool FGameplayEffectCustomExecutionOutputMixinLibrary::IsStackCountHandledManually(FGameplayEffectCustomExecutionOutput CustomExecutionOutput);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionOutputMixinLibrary.MarkConditionalGameplayEffectsToTrigger
// Offset::0x1AB7D10;
void FGameplayEffectCustomExecutionOutputMixinLibrary::MarkConditionalGameplayEffectsToTrigger(FGameplayEffectCustomExecutionOutput CustomExecutionOutput);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionOutputMixinLibrary.MarkGameplayCuesHandledManually
// Offset::0x1AB7C10;
void FGameplayEffectCustomExecutionOutputMixinLibrary::MarkGameplayCuesHandledManually(FGameplayEffectCustomExecutionOutput CustomExecutionOutput);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionOutputMixinLibrary.MarkStackCountHandledManually
// Offset::0x1AB8030;
void FGameplayEffectCustomExecutionOutputMixinLibrary::MarkStackCountHandledManually(FGameplayEffectCustomExecutionOutput CustomExecutionOutput);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionOutputMixinLibrary.ShouldTriggerConditionalGameplayEffects
// Offset::0x1AB7B00;
bool FGameplayEffectCustomExecutionOutputMixinLibrary::ShouldTriggerConditionalGameplayEffects(FGameplayEffectCustomExecutionOutput CustomExecutionOutput);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.AttemptCalculateCapturedAttributeBaseValue
// Offset::0x1AB8CF0;
bool FGameplayEffectCustomExecutionParametersMixinLibrary::AttemptCalculateCapturedAttributeBaseValue(FGameplayEffectCustomExecutionParameters CustomExecutionParameters,FGameplayEffectAttributeCaptureDefinition InCaptureDef,float OutBaseValue);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.AttemptCalculateCapturedAttributeBonusMagnitude
// Offset::0x1AB8A30;
bool FGameplayEffectCustomExecutionParametersMixinLibrary::AttemptCalculateCapturedAttributeBonusMagnitude(FGameplayEffectCustomExecutionParameters CustomExecutionParameters,FGameplayEffectAttributeCaptureDefinition InCaptureDef,FGameplayEffectExecutionParameters InParams,float OutBonusMagnitude);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.AttemptCalculateCapturedAttributeMagnitude
// Offset::0x1AB91C0;
bool FGameplayEffectCustomExecutionParametersMixinLibrary::AttemptCalculateCapturedAttributeMagnitude(FGameplayEffectCustomExecutionParameters CustomExecutionParameters,FGameplayEffectAttributeCaptureDefinition InCaptureDef,FGameplayEffectExecutionParameters InParams,float OutMagnitude);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.AttemptCalculateCapturedAttributeMagnitudeWithBase
// Offset::0x1AB8EB0;
bool FGameplayEffectCustomExecutionParametersMixinLibrary::AttemptCalculateCapturedAttributeMagnitudeWithBase(FGameplayEffectCustomExecutionParameters CustomExecutionParameters,FGameplayEffectAttributeCaptureDefinition InCaptureDef,FGameplayEffectExecutionParameters InParams,float InBaseValue,float OutMagnitude);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.AttemptCalculateTransientAggregatorMagnitude
// Offset::0x1AB87C0;
void FGameplayEffectCustomExecutionParametersMixinLibrary::AttemptCalculateTransientAggregatorMagnitude(FGameplayEffectCustomExecutionParameters ExecutionParameters,FGameplayTag InAggregatorIdentifier,FGameplayEffectExecutionParameters InParams,float OutMagnitude);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.GetIgnoreHandles
// Offset::0x1AB9570;
TArray<FActiveGameplayEffectHandle> FGameplayEffectCustomExecutionParametersMixinLibrary::GetIgnoreHandles(FGameplayEffectCustomExecutionParameters CustomExecutionParameters);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.GetOwningSpec
// Offset::0x1AB9900;
FGameplayEffectSpec FGameplayEffectCustomExecutionParametersMixinLibrary::GetOwningSpec(FGameplayEffectCustomExecutionParameters CustomExecutionParameters);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.GetOwningSpecForPreExecuteMod
// Offset::0x1AB9900;
FGameplayEffectSpec FGameplayEffectCustomExecutionParametersMixinLibrary::GetOwningSpecForPreExecuteMod(FGameplayEffectCustomExecutionParameters CustomExecutionParameters);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.GetPassedInTags
// Offset::0x1AB9690;
FGameplayTagContainer FGameplayEffectCustomExecutionParametersMixinLibrary::GetPassedInTags(FGameplayEffectCustomExecutionParameters CustomExecutionParameters);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.GetPredictionKey
// Offset::0x1AB9480;
FPredictionKey FGameplayEffectCustomExecutionParametersMixinLibrary::GetPredictionKey(FGameplayEffectCustomExecutionParameters CustomExecutionParameters);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.GetSourceAbilitySystemComponent
// Offset::0x1AB9760;
FAbilitySystemComponent* FGameplayEffectCustomExecutionParametersMixinLibrary::GetSourceAbilitySystemComponent(FGameplayEffectCustomExecutionParameters CustomExecutionParameters);


// Function  AngelscriptGAS.GameplayEffectCustomExecutionParametersMixinLibrary.GetTargetAbilitySystemComponent
// Offset::0x1AB9830;
FAbilitySystemComponent* FGameplayEffectCustomExecutionParametersMixinLibrary::GetTargetAbilitySystemComponent(FGameplayEffectCustomExecutionParameters CustomExecutionParameters);


// Function  AngelscriptGAS.GameplayEffectExecutionScopedModifierInfoMixinLibrary.GetAggregatorType
// Offset::0x1ABAB10;
enum class EGameplayEffectScopedModifierAggregatorType FGameplayEffectExecutionScopedModifierInfoMixinLibrary::GetAggregatorType(FGameplayEffectExecutionScopedModifierInfo Handle);


// Function  AngelscriptGAS.GameplayEffectExecutionScopedModifierInfoMixinLibrary.GetCapturedAttribute
// Offset::0x1ABB050;
FGameplayEffectAttributeCaptureDefinition FGameplayEffectExecutionScopedModifierInfoMixinLibrary::GetCapturedAttribute(FGameplayEffectExecutionScopedModifierInfo Handle);


// Function  AngelscriptGAS.GameplayEffectExecutionScopedModifierInfoMixinLibrary.GetTransientAggregatorIdentifier
// Offset::0x1ABADB0;
FGameplayTag FGameplayEffectExecutionScopedModifierInfoMixinLibrary::GetTransientAggregatorIdentifier(FGameplayEffectExecutionScopedModifierInfo Handle);


// Function  AngelscriptGAS.GameplayEffectSpecHandleMixinLibrary.AddDynamicAssetTag
// Offset::0x1ABB850;
void FGameplayEffectSpecHandleMixinLibrary::AddDynamicAssetTag(FGameplayEffectSpecHandle Handle,FGameplayTag TagToAdd);


// Function  AngelscriptGAS.GameplayEffectSpecHandleMixinLibrary.AddDynamicAssetTags
// Offset::0x1ABB690;
void FGameplayEffectSpecHandleMixinLibrary::AddDynamicAssetTags(FGameplayEffectSpecHandle Handle,FGameplayTagContainer TagsToAdd);


// Function  AngelscriptGAS.GameplayEffectSpecHandleMixinLibrary.GetSpec
// Offset::0x1ABB9B0;
FGameplayEffectSpec FGameplayEffectSpecHandleMixinLibrary::GetSpec(FGameplayEffectSpecHandle Handle);


// Function  AngelscriptGAS.GameplayEffectSpecHandleMixinLibrary.IsValid
// Offset::0x1ABBA90;
bool FGameplayEffectSpecHandleMixinLibrary::IsValid(FGameplayEffectSpecHandle Handle);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.ApplyExecutorModifiersForDefinition
// Offset::0x1ABC000;
void FGameplayEffectSpecMixinLibrary::ApplyExecutorModifiersForDefinition(FGameplayEffectSpec Spec,FObject* CalculationClass,FGameplayEffectAttributeCaptureDefinition InCaptureDef,float ValueToModify);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.CalculateModifiedDuration
// Offset::0x1ABE210;
float FGameplayEffectSpecMixinLibrary::CalculateModifiedDuration(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.CalculateModifierMagnitudes
// Offset::0x1ABE5C0;
void FGameplayEffectSpecMixinLibrary::CalculateModifierMagnitudes(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.CaptureAttributeDataFromTarget
// Offset::0x1ABE680;
void FGameplayEffectSpecMixinLibrary::CaptureAttributeDataFromTarget(FGameplayEffectSpec Spec,FAbilitySystemComponent* TargetAbilitySystemComponent);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetAllAssetTags
// Offset::0x1ABD6C0;
FGameplayTagContainer FGameplayEffectSpecMixinLibrary::GetAllAssetTags(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetAllGrantedTags
// Offset::0x1ABD7F0;
FGameplayTagContainer FGameplayEffectSpecMixinLibrary::GetAllGrantedTags(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetCapturedSourceTags
// Offset::0x1ABD060;
FAngelscriptTagContainerAggregator FGameplayEffectSpecMixinLibrary::GetCapturedSourceTags(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetCapturedTargetTags
// Offset::0x1ABCE00;
FAngelscriptTagContainerAggregator FGameplayEffectSpecMixinLibrary::GetCapturedTargetTags(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetChanceToApplyToTarget
// Offset::0x1ABDE20;
float FGameplayEffectSpecMixinLibrary::GetChanceToApplyToTarget(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetCompletedSourceAttributeCapture
// Offset::0x1ABCA00;
int32_t FGameplayEffectSpecMixinLibrary::GetCompletedSourceAttributeCapture(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetCompletedTargetAttributeCapture
// Offset::0x1ABC930;
int32_t FGameplayEffectSpecMixinLibrary::GetCompletedTargetAttributeCapture(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetContext
// Offset::0x1ABDCC0;
FGameplayEffectContextHandle FGameplayEffectSpecMixinLibrary::GetContext(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetDefinitionEffectCDO
// Offset::0x1ABC3B0;
FGameplayEffect* FGameplayEffectSpecMixinLibrary::GetDefinitionEffectCDO(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetDuration
// Offset::0x1ABDFC0;
float FGameplayEffectSpecMixinLibrary::GetDuration(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetDurationLocked
// Offset::0x1ABC860;
int32_t FGameplayEffectSpecMixinLibrary::GetDurationLocked(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetDynamicAssetTags
// Offset::0x1ABCBA0;
FGameplayTagContainer FGameplayEffectSpecMixinLibrary::GetDynamicAssetTags(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetDynamicGrantedTags
// Offset::0x1ABCCD0;
FGameplayTagContainer FGameplayEffectSpecMixinLibrary::GetDynamicGrantedTags(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetGrantedAbilitySpecs
// Offset::0x1ABC470;
TArray<FGameplayAbilitySpecDef> FGameplayEffectSpecMixinLibrary::GetGrantedAbilitySpecs(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetLevel
// Offset::0x1ABD5F0;
float FGameplayEffectSpecMixinLibrary::GetLevel(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetModifiedAttributeMagnitude
// Offset::0x1ABE090;
float FGameplayEffectSpecMixinLibrary::GetModifiedAttributeMagnitude(FGameplayEffectSpec Spec,FGameplayAttribute Attribute);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetModifierMagnitude
// Offset::0x1ABD2B0;
float FGameplayEffectSpecMixinLibrary::GetModifierMagnitude(FGameplayEffectSpec Spec,int32_t ModifierIdx,bool bFactorInStackCount);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetPeriod
// Offset::0x1ABDEF0;
float FGameplayEffectSpecMixinLibrary::GetPeriod(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetSetByCallerMagnitude
// Offset::0x1ABD920;
float FGameplayEffectSpecMixinLibrary::GetSetByCallerMagnitude(FGameplayEffectSpec Spec,FGameplayTag DataTag,float DefaultIfNotFound);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.GetStackCount
// Offset::0x1ABCAD0;
int32_t FGameplayEffectSpecMixinLibrary::GetStackCount(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.HasSetByCallerMagnitudeTag
// Offset::0x1ABDA90;
bool FGameplayEffectSpecMixinLibrary::HasSetByCallerMagnitudeTag(FGameplayEffectSpec Spec,FGameplayTag DataTag);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.PrintAll
// Offset::0x1ABD540;
void FGameplayEffectSpecMixinLibrary::PrintAll(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.RecaptureAttributeDataForClone
// Offset::0x1ABE460;
void FGameplayEffectSpecMixinLibrary::RecaptureAttributeDataForClone(FGameplayEffectSpec Spec,FAbilitySystemComponent* OriginalASC,FAbilitySystemComponent* NewASC);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.RecaptureSourceActorTags
// Offset::0x1ABE3A0;
void FGameplayEffectSpecMixinLibrary::RecaptureSourceActorTags(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.SetByCallerMagnitude
// Offset::0x1ABE8A0;
void FGameplayEffectSpecMixinLibrary::SetByCallerMagnitude(FGameplayEffectSpec Spec,FGameplayTag DataTag,float Magnitude);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.SetContext
// Offset::0x1ABEA00;
void FGameplayEffectSpecMixinLibrary::SetContext(FGameplayEffectSpec Spec,FGameplayEffectContextHandle NewEffectContextHandle);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.SetLevel
// Offset::0x1ABE790;
void FGameplayEffectSpecMixinLibrary::SetLevel(FGameplayEffectSpec Spec,float InLevel);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.SetupAttributeCaptureDefinitions
// Offset::0x1ABE2E0;
void FGameplayEffectSpecMixinLibrary::SetupAttributeCaptureDefinitions(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayEffectSpecMixinLibrary.ToSimpleString
// Offset::0x1ABD420;
FString FGameplayEffectSpecMixinLibrary::ToSimpleString(FGameplayEffectSpec Spec);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.GetAttribute
// Offset::0x1AC0C00;
FGameplayAttribute FGameplayModifierEvaluatedDataMixinLibrary::GetAttribute(FGameplayModifierEvaluatedData Data);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.GetHandle
// Offset::0x1AC0480;
FActiveGameplayEffectHandle FGameplayModifierEvaluatedDataMixinLibrary::GetHandle(FGameplayModifierEvaluatedData Data);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.GetIsValid
// Offset::0x1AC0220;
bool FGameplayModifierEvaluatedDataMixinLibrary::GetIsValid(FGameplayModifierEvaluatedData Data);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.GetMagnitude
// Offset::0x1AC06F0;
float FGameplayModifierEvaluatedDataMixinLibrary::GetMagnitude(FGameplayModifierEvaluatedData Data);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.GetModifierOp
// Offset::0x1AC0940;
enum class EGameplayModOp FGameplayModifierEvaluatedDataMixinLibrary::GetModifierOp(FGameplayModifierEvaluatedData Data);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.SetAttribute
// Offset::0x1AC0A50;
void FGameplayModifierEvaluatedDataMixinLibrary::SetAttribute(FGameplayModifierEvaluatedData Data,FGameplayAttribute NewValue);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.SetHandle
// Offset::0x1AC0330;
void FGameplayModifierEvaluatedDataMixinLibrary::SetHandle(FGameplayModifierEvaluatedData Data,FActiveGameplayEffectHandle NewValue);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.SetIsValid
// Offset::0x1AC00C0;
void FGameplayModifierEvaluatedDataMixinLibrary::SetIsValid(FGameplayModifierEvaluatedData Data,bool NewValue);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.SetMagnitude
// Offset::0x1AC0590;
void FGameplayModifierEvaluatedDataMixinLibrary::SetMagnitude(FGameplayModifierEvaluatedData Data,float NewValue);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.SetModifierOp
// Offset::0x1AC07F0;
void FGameplayModifierEvaluatedDataMixinLibrary::SetModifierOp(FGameplayModifierEvaluatedData Data,enum class EGameplayModOp NewValue);


// Function  AngelscriptGAS.GameplayModifierEvaluatedDataMixinLibrary.ToSimpleString
// Offset::0x1ABFF60;
FString FGameplayModifierEvaluatedDataMixinLibrary::ToSimpleString(FGameplayModifierEvaluatedData Data);


// Function  AngelscriptGAS.GameplayTaskMixinLibrary.ReadyForActivation
// Offset::0x1AC14B0;
void FGameplayTaskMixinLibrary::ReadyForActivation(FGameplayTask* Task);


// Function  AngelscriptGAS.InheritedTagContainerMixinLibrary.AddTag
// Offset::0x1AC1950;
void FInheritedTagContainerMixinLibrary::AddTag(FInheritedTagContainer Container,FGameplayTag TagToAdd);


// Function  AngelscriptGAS.InheritedTagContainerMixinLibrary.RemoveTag
// Offset::0x1AC17C0;
void FInheritedTagContainerMixinLibrary::RemoveTag(FInheritedTagContainer Container,FGameplayTag TagToRemove);


// Function  GameplayAbilities.AbilityAsync_WaitGameplayTagAdded.WaitGameplayTagAddToActor
// Offset::0x1B6AD30;
FAbilityAsync_WaitGameplayTagAdded* FAbilityAsync_WaitGameplayTagAdded::WaitGameplayTagAddToActor(FActor* TargetActor,FGameplayTag Tag,bool OnlyTriggerOnce);


// Function  GameplayAbilities.AbilityAsync_WaitGameplayTagRemoved.WaitGameplayTagRemoveFromActor
// Offset::0x1B6B130;
FAbilityAsync_WaitGameplayTagRemoved* FAbilityAsync_WaitGameplayTagRemoved::WaitGameplayTagRemoveFromActor(FActor* TargetActor,FGameplayTag Tag,bool OnlyTriggerOnce);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AbilityTargetDataFromActor
// Offset::0x1B749E0;
FGameplayAbilityTargetDataHandle FAbilitySystemBlueprintLibrary::AbilityTargetDataFromActor(FActor* Actor);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AbilityTargetDataFromActorArray
// Offset::0x1B747D0;
FGameplayAbilityTargetDataHandle FAbilitySystemBlueprintLibrary::AbilityTargetDataFromActorArray(TArray<FActor*> ActorArray,bool OneTargetPerHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AbilityTargetDataFromHitResult
// Offset::0x1B74CA0;
FGameplayAbilityTargetDataHandle FAbilitySystemBlueprintLibrary::AbilityTargetDataFromHitResult(FHitResult HitResult);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AbilityTargetDataFromLocations
// Offset::0x1B74F40;
FGameplayAbilityTargetDataHandle FAbilitySystemBlueprintLibrary::AbilityTargetDataFromLocations(FGameplayAbilityTargetingLocationInfo SourceLocation,FGameplayAbilityTargetingLocationInfo TargetLocation);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AddAssetTag
// Offset::0x1B6D160;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::AddAssetTag(FGameplayEffectSpecHandle SpecHandle,FGameplayTag NewGameplayTag);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AddAssetTags
// Offset::0x1B6CF50;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::AddAssetTags(FGameplayEffectSpecHandle SpecHandle,FGameplayTagContainer NewGameplayTags);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AddGrantedTag
// Offset::0x1B6D530;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::AddGrantedTag(FGameplayEffectSpecHandle SpecHandle,FGameplayTag NewGameplayTag);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AddGrantedTags
// Offset::0x1B6D320;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::AddGrantedTags(FGameplayEffectSpecHandle SpecHandle,FGameplayTagContainer NewGameplayTags);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AddLinkedGameplayEffect
// Offset::0x1B6CB90;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::AddLinkedGameplayEffect(FGameplayEffectSpecHandle SpecHandle,FGameplayEffect* LinkedGameplayEffect);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AddLinkedGameplayEffectSpec
// Offset::0x1B6CD50;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::AddLinkedGameplayEffectSpec(FGameplayEffectSpecHandle SpecHandle,FGameplayEffectSpecHandle LinkedGameplayEffectSpec);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AddLooseGameplayTags
// Offset::0x1B6C3D0;
bool FAbilitySystemBlueprintLibrary::AddLooseGameplayTags(FActor* Actor,FGameplayTagContainer GameplayTags,bool bShouldReplicate);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AppendTargetDataHandle
// Offset::0x1B75240;
FGameplayAbilityTargetDataHandle FAbilitySystemBlueprintLibrary::AppendTargetDataHandle(FGameplayAbilityTargetDataHandle TargetHandle,FGameplayAbilityTargetDataHandle HandleToAdd);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AssignSetByCallerMagnitude
// Offset::0x1B6DAB0;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::AssignSetByCallerMagnitude(FGameplayEffectSpecHandle SpecHandle,FName DataName,float Magnitude);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.AssignTagSetByCallerMagnitude
// Offset::0x1B6D8B0;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::AssignTagSetByCallerMagnitude(FGameplayEffectSpecHandle SpecHandle,FGameplayTag DataTag,float Magnitude);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.BreakGameplayCueParameters
// Offset::0x1B6DCB0;
void FAbilitySystemBlueprintLibrary::BreakGameplayCueParameters(FGameplayCueParameters Parameters,float NormalizedMagnitude,float RawMagnitude,FGameplayEffectContextHandle EffectContext,FGameplayTag MatchedTagName,FGameplayTag OriginalTag,FGameplayTagContainer AggregatedSourceTags,FGameplayTagContainer AggregatedTargetTags,FVector Location,FVector Normal,FActor* Instigator,FActor* EffectCauser,FObject* SourceObject,FPhysicalMaterial* PhysicalMaterial,int32_t GameplayEffectLevel,int32_t AbilityLevel,FSceneComponent* TargetAttachComponent,bool bReplicateLocationWhenUsingMinimalRepProxy);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.CloneSpecHandle
// Offset::0x1B73F20;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::CloneSpecHandle(FActor* InNewInstigator,FActor* InEffectCauser,FGameplayEffectSpecHandle GameplayEffectSpecHandle_Clone);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.DoesGameplayCueMeetTagRequirements
// Offset::0x1B6F0D0;
bool FAbilitySystemBlueprintLibrary::DoesGameplayCueMeetTagRequirements(FGameplayCueParameters Parameters,FGameplayTagRequirements SourceTagReqs,FGameplayTagRequirements TargetTagReqs);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.DoesTargetDataContainActor
// Offset::0x1B73A50;
bool FAbilitySystemBlueprintLibrary::DoesTargetDataContainActor(FGameplayAbilityTargetDataHandle TargetData,int32_t Index,FActor* Actor);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextAddHitResult
// Offset::0x1B72640;
void FAbilitySystemBlueprintLibrary::EffectContextAddHitResult(FGameplayEffectContextHandle EffectContext,FHitResult HitResult,bool bReset);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetEffectCauser
// Offset::0x1B720D0;
FActor* FAbilitySystemBlueprintLibrary::EffectContextGetEffectCauser(FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetHitResult
// Offset::0x1B72A20;
FHitResult FAbilitySystemBlueprintLibrary::EffectContextGetHitResult(FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetInstigatorActor
// Offset::0x1B722D0;
FActor* FAbilitySystemBlueprintLibrary::EffectContextGetInstigatorActor(FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetOrigin
// Offset::0x1B72530;
FVector FAbilitySystemBlueprintLibrary::EffectContextGetOrigin(FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetOriginalInstigatorActor
// Offset::0x1B721D0;
FActor* FAbilitySystemBlueprintLibrary::EffectContextGetOriginalInstigatorActor(FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextGetSourceObject
// Offset::0x1B71FD0;
FObject* FAbilitySystemBlueprintLibrary::EffectContextGetSourceObject(FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextHasHitResult
// Offset::0x1B72920;
bool FAbilitySystemBlueprintLibrary::EffectContextHasHitResult(FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextIsInstigatorLocallyControlled
// Offset::0x1B72B50;
bool FAbilitySystemBlueprintLibrary::EffectContextIsInstigatorLocallyControlled(FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextIsValid
// Offset::0x1B72C50;
bool FAbilitySystemBlueprintLibrary::EffectContextIsValid(FGameplayEffectContextHandle EffectContext);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EffectContextSetOrigin
// Offset::0x1B723D0;
void FAbilitySystemBlueprintLibrary::EffectContextSetOrigin(FGameplayEffectContextHandle EffectContext,FVector Origin);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EqualEqual_ActiveGameplayEffectHandle
// Offset::0x1B6B9F0;
bool FAbilitySystemBlueprintLibrary::EqualEqual_ActiveGameplayEffectHandle(FActiveGameplayEffectHandle A,FActiveGameplayEffectHandle B);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EqualEqual_GameplayAbilitySpecHandle
// Offset::0x1B6B5E0;
bool FAbilitySystemBlueprintLibrary::EqualEqual_GameplayAbilitySpecHandle(FGameplayAbilitySpecHandle A,FGameplayAbilitySpecHandle B);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EqualEqual_GameplayAttributeGameplayAttribute
// Offset::0x1B75860;
bool FAbilitySystemBlueprintLibrary::EqualEqual_GameplayAttributeGameplayAttribute(FGameplayAttribute AttributeA,FGameplayAttribute AttributeB);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EvaluateAttributeValueWithTags
// Offset::0x1B75D60;
float FAbilitySystemBlueprintLibrary::EvaluateAttributeValueWithTags(FAbilitySystemComponent* AbilitySystem,FGameplayAttribute Attribute,FGameplayTagContainer SourceTags,FGameplayTagContainer TargetTags,bool bSuccess);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.EvaluateAttributeValueWithTagsAndBase
// Offset::0x1B75A20;
float FAbilitySystemBlueprintLibrary::EvaluateAttributeValueWithTagsAndBase(FAbilitySystemComponent* AbilitySystem,FGameplayAttribute Attribute,FGameplayTagContainer SourceTags,FGameplayTagContainer TargetTags,float BaseValue,bool bSuccess);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.FilterTargetData
// Offset::0x1B744E0;
FGameplayAbilityTargetDataHandle FAbilitySystemBlueprintLibrary::FilterTargetData(FGameplayAbilityTargetDataHandle TargetDataHandle,FGameplayTargetDataFilterHandle ActorFilterClass);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.ForwardGameplayCueToTarget
// Offset::0x1B70800;
void FAbilitySystemBlueprintLibrary::ForwardGameplayCueToTarget(TScriptInterface<IGameplayCueInterface> TargetCueInterface,enum class EGameplayCueEvent EventType,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetAbilitySystemComponent
// Offset::0x1B76BB0;
FAbilitySystemComponent* FAbilitySystemBlueprintLibrary::GetAbilitySystemComponent(FActor* Actor);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectDebugString
// Offset::0x1B6BBE0;
FString FAbilitySystemBlueprintLibrary::GetActiveGameplayEffectDebugString(FActiveGameplayEffectHandle ActiveHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectExpectedEndTime
// Offset::0x1B6BE40;
float FAbilitySystemBlueprintLibrary::GetActiveGameplayEffectExpectedEndTime(FActiveGameplayEffectHandle ActiveHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectRemainingDuration
// Offset::0x1B6BCB0;
float FAbilitySystemBlueprintLibrary::GetActiveGameplayEffectRemainingDuration(FObject* WorldContextObject,FActiveGameplayEffectHandle ActiveHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectStackCount
// Offset::0x1B6C020;
int32_t FAbilitySystemBlueprintLibrary::GetActiveGameplayEffectStackCount(FActiveGameplayEffectHandle ActiveHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectStackLimitCount
// Offset::0x1B6BF80;
int32_t FAbilitySystemBlueprintLibrary::GetActiveGameplayEffectStackLimitCount(FActiveGameplayEffectHandle ActiveHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectStartTime
// Offset::0x1B6BEE0;
float FAbilitySystemBlueprintLibrary::GetActiveGameplayEffectStartTime(FActiveGameplayEffectHandle ActiveHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetActiveGameplayEffectTotalDuration
// Offset::0x1B6BDA0;
float FAbilitySystemBlueprintLibrary::GetActiveGameplayEffectTotalDuration(FActiveGameplayEffectHandle ActiveHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetActorByIndex
// Offset::0x1B71280;
FActor* FAbilitySystemBlueprintLibrary::GetActorByIndex(FGameplayCueParameters Parameters,int32_t Index);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetActorCount
// Offset::0x1B71610;
int32_t FAbilitySystemBlueprintLibrary::GetActorCount(FGameplayCueParameters Parameters);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetActorsFromTargetData
// Offset::0x1B73D70;
TArray<FActor*> FAbilitySystemBlueprintLibrary::GetActorsFromTargetData(FGameplayAbilityTargetDataHandle TargetData,int32_t Index);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetAllActorsFromTargetData
// Offset::0x1B73C10;
TArray<FActor*> FAbilitySystemBlueprintLibrary::GetAllActorsFromTargetData(FGameplayAbilityTargetDataHandle TargetData);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetAllLinkedGameplayEffectSpecHandles
// Offset::0x1B6C540;
TArray<FGameplayEffectSpecHandle> FAbilitySystemBlueprintLibrary::GetAllLinkedGameplayEffectSpecHandles(FGameplayEffectSpecHandle SpecHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetDataCountFromTargetData
// Offset::0x1B74B80;
int32_t FAbilitySystemBlueprintLibrary::GetDataCountFromTargetData(FGameplayAbilityTargetDataHandle TargetData);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetEffectContext
// Offset::0x1B6C700;
FGameplayEffectContextHandle FAbilitySystemBlueprintLibrary::GetEffectContext(FGameplayEffectSpecHandle SpecHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetFloatAttribute
// Offset::0x1B76550;
float FAbilitySystemBlueprintLibrary::GetFloatAttribute(FActor* Actor,FGameplayAttribute Attribute,bool bSuccessfullyFoundAttribute);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetFloatAttributeBase
// Offset::0x1B761F0;
float FAbilitySystemBlueprintLibrary::GetFloatAttributeBase(FActor* Actor,FGameplayAttribute Attribute,bool bSuccessfullyFoundAttribute);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetFloatAttributeBaseFromAbilitySystemComponent
// Offset::0x1B76040;
float FAbilitySystemBlueprintLibrary::GetFloatAttributeBaseFromAbilitySystemComponent(FAbilitySystemComponent* AbilitySystemComponent,FGameplayAttribute Attribute,bool bSuccessfullyFoundAttribute);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetFloatAttributeFromAbilitySystemComponent
// Offset::0x1B763A0;
float FAbilitySystemBlueprintLibrary::GetFloatAttributeFromAbilitySystemComponent(FAbilitySystemComponent* AbilitySystem,FGameplayAttribute Attribute,bool bSuccessfullyFoundAttribute);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetGameplayAbilityFromSpecHandle
// Offset::0x1B6B6E0;
FGameplayAbility* FAbilitySystemBlueprintLibrary::GetGameplayAbilityFromSpecHandle(FAbilitySystemComponent* AbilitySystem,FGameplayAbilitySpecHandle AbilitySpecHandle,bool bIsInstance);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetGameplayCueDirection
// Offset::0x1B6F5B0;
bool FAbilitySystemBlueprintLibrary::GetGameplayCueDirection(FActor* TargetActor,FGameplayCueParameters Parameters,FVector Direction);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetGameplayCueEndLocationAndNormal
// Offset::0x1B6F9A0;
bool FAbilitySystemBlueprintLibrary::GetGameplayCueEndLocationAndNormal(FActor* TargetActor,FGameplayCueParameters Parameters,FVector Location,FVector Normal);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetGameplayEffectFromActiveEffectHandle
// Offset::0x1B6B830;
FGameplayEffect* FAbilitySystemBlueprintLibrary::GetGameplayEffectFromActiveEffectHandle(FActiveGameplayEffectHandle ActiveHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetGameplayEffectUIData
// Offset::0x1B6BB00;
FGameplayEffectUIData* FAbilitySystemBlueprintLibrary::GetGameplayEffectUIData(FGameplayEffect* EffectClass,FGameplayEffectUIData* DataType);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetHitResult
// Offset::0x1B70F30;
FHitResult FAbilitySystemBlueprintLibrary::GetHitResult(FGameplayCueParameters Parameters);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetHitResultFromTargetData
// Offset::0x1B735A0;
FHitResult FAbilitySystemBlueprintLibrary::GetHitResultFromTargetData(FGameplayAbilityTargetDataHandle HitResult,int32_t Index);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetInstigatorActor
// Offset::0x1B704C0;
FActor* FAbilitySystemBlueprintLibrary::GetInstigatorActor(FGameplayCueParameters Parameters);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetInstigatorTransform
// Offset::0x1B70140;
FTransform FAbilitySystemBlueprintLibrary::GetInstigatorTransform(FGameplayCueParameters Parameters);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetModifiedAttributeMagnitude
// Offset::0x1B6C0C0;
float FAbilitySystemBlueprintLibrary::GetModifiedAttributeMagnitude(FGameplayEffectSpecHandle SpecHandle,FGameplayAttribute Attribute);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetOrigin
// Offset::0x1B6FDF0;
FVector FAbilitySystemBlueprintLibrary::GetOrigin(FGameplayCueParameters Parameters);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetTargetDataEndPoint
// Offset::0x1B72F40;
FVector FAbilitySystemBlueprintLibrary::GetTargetDataEndPoint(FGameplayAbilityTargetDataHandle TargetData,int32_t Index);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetTargetDataEndPointTransform
// Offset::0x1B72D50;
FTransform FAbilitySystemBlueprintLibrary::GetTargetDataEndPointTransform(FGameplayAbilityTargetDataHandle TargetData,int32_t Index);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.GetTargetDataOrigin
// Offset::0x1B73240;
FTransform FAbilitySystemBlueprintLibrary::GetTargetDataOrigin(FGameplayAbilityTargetDataHandle TargetData,int32_t Index);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.HasHitResult
// Offset::0x1B70BF0;
bool FAbilitySystemBlueprintLibrary::HasHitResult(FGameplayCueParameters Parameters);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.IsInstigatorLocallyControlled
// Offset::0x1B71C90;
bool FAbilitySystemBlueprintLibrary::IsInstigatorLocallyControlled(FGameplayCueParameters Parameters);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.IsInstigatorLocallyControlledPlayer
// Offset::0x1B71950;
bool FAbilitySystemBlueprintLibrary::IsInstigatorLocallyControlledPlayer(FGameplayCueParameters Parameters);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.IsValid
// Offset::0x1B76700;
bool FAbilitySystemBlueprintLibrary::IsValid(FGameplayAttribute Attribute);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.MakeFilterHandle
// Offset::0x1B74330;
FGameplayTargetDataFilterHandle FAbilitySystemBlueprintLibrary::MakeFilterHandle(FGameplayTargetDataFilter Filter,FActor* FilterActor);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.MakeGameplayCueParameters
// Offset::0x1B6E6D0;
FGameplayCueParameters FAbilitySystemBlueprintLibrary::MakeGameplayCueParameters(float NormalizedMagnitude,float RawMagnitude,FGameplayEffectContextHandle EffectContext,FGameplayTag MatchedTagName,FGameplayTag OriginalTag,FGameplayTagContainer AggregatedSourceTags,FGameplayTagContainer AggregatedTargetTags,FVector Location,FVector Normal,FActor* Instigator,FActor* EffectCauser,FObject* SourceObject,FPhysicalMaterial* PhysicalMaterial,int32_t GameplayEffectLevel,int32_t AbilityLevel,FSceneComponent* TargetAttachComponent,bool bReplicateLocationWhenUsingMinimalRepProxy);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.MakeSpecHandle
// Offset::0x1B74120;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::MakeSpecHandle(FGameplayEffect* InGameplayEffect,FActor* InInstigator,FActor* InEffectCauser,float InLevel);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.NotEqual_ActiveGameplayEffectHandle
// Offset::0x1B6B8E0;
bool FAbilitySystemBlueprintLibrary::NotEqual_ActiveGameplayEffectHandle(FActiveGameplayEffectHandle A,FActiveGameplayEffectHandle B);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.NotEqual_GameplayAbilitySpecHandle
// Offset::0x1B6B4E0;
bool FAbilitySystemBlueprintLibrary::NotEqual_GameplayAbilitySpecHandle(FGameplayAbilitySpecHandle A,FGameplayAbilitySpecHandle B);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.NotEqual_GameplayAttributeGameplayAttribute
// Offset::0x1B756A0;
bool FAbilitySystemBlueprintLibrary::NotEqual_GameplayAttributeGameplayAttribute(FGameplayAttribute AttributeA,FGameplayAttribute AttributeB);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.RemoveLooseGameplayTags
// Offset::0x1B6C260;
bool FAbilitySystemBlueprintLibrary::RemoveLooseGameplayTags(FActor* Actor,FGameplayTagContainer GameplayTags,bool bShouldReplicate);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.SendGameplayEventToActor
// Offset::0x1B767F0;
void FAbilitySystemBlueprintLibrary::SendGameplayEventToActor(FActor* Actor,FGameplayTag EventTag,FGameplayEventData Payload);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.SetDuration
// Offset::0x1B6D6F0;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::SetDuration(FGameplayEffectSpecHandle SpecHandle,float Duration);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.SetStackCount
// Offset::0x1B6C9D0;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::SetStackCount(FGameplayEffectSpecHandle SpecHandle,int32_t StackCount);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.SetStackCountToMax
// Offset::0x1B6C860;
FGameplayEffectSpecHandle FAbilitySystemBlueprintLibrary::SetStackCountToMax(FGameplayEffectSpecHandle SpecHandle);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.TargetDataHasActor
// Offset::0x1B738E0;
bool FAbilitySystemBlueprintLibrary::TargetDataHasActor(FGameplayAbilityTargetDataHandle TargetData,int32_t Index);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.TargetDataHasEndPoint
// Offset::0x1B730D0;
bool FAbilitySystemBlueprintLibrary::TargetDataHasEndPoint(FGameplayAbilityTargetDataHandle TargetData,int32_t Index);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.TargetDataHasHitResult
// Offset::0x1B73770;
bool FAbilitySystemBlueprintLibrary::TargetDataHasHitResult(FGameplayAbilityTargetDataHandle HitResult,int32_t Index);


// Function  GameplayAbilities.AbilitySystemBlueprintLibrary.TargetDataHasOrigin
// Offset::0x1B73430;
bool FAbilitySystemBlueprintLibrary::TargetDataHasOrigin(FGameplayAbilityTargetDataHandle TargetData,int32_t Index);


// Function  Engine.HUD.AddDebugText
// Offset::0x63BAE00;
void FHUD::AddDebugText(FString DebugText,FActor* SrcActor,float Duration,FVector Offset,FVector DesiredOffset,FColor TextColor,bool bSkipOverwriteCheck,bool bAbsoluteLocation,bool bKeepAttachedToActor,FFont* InFont,float FontScale,bool bDrawShadow);


// Function  Engine.HUD.AddHitBox
// Offset::0x63B8990;
void FHUD::AddHitBox(FVector2D Position,FVector2D Size,FName InName,bool bConsumesInput,int32_t Priority);


// Function  Engine.HUD.Deproject
// Offset::0x63B8DE0;
void FHUD::Deproject(float ScreenX,float ScreenY,FVector WorldPosition,FVector WorldDirection);


// Function  Engine.HUD.DrawLine
// Offset::0x63BA610;
void FHUD::DrawLine(float StartScreenX,float StartScreenY,float EndScreenX,float EndScreenY,FLinearColor LineColor,float LineThickness);


// Function  Engine.HUD.DrawMaterial
// Offset::0x63B9700;
void FHUD::DrawMaterial(FMaterialInterface* Material,float ScreenX,float ScreenY,float ScreenW,float ScreenH,float MaterialU,float MaterialV,float MaterialUWidth,float MaterialVHeight,float Scale,bool bScalePosition,float Rotation,FVector2D RotPivot);


// Function  Engine.HUD.DrawMaterialSimple
// Offset::0x63B9480;
void FHUD::DrawMaterialSimple(FMaterialInterface* Material,float ScreenX,float ScreenY,float ScreenW,float ScreenH,float Scale,bool bScalePosition);


// Function  Engine.HUD.DrawMaterialTriangle
// Offset::0x63B9080;
void FHUD::DrawMaterialTriangle(FMaterialInterface* Material,FVector2D V0_Pos,FVector2D V1_Pos,FVector2D V2_Pos,FVector2D V0_UV,FVector2D V1_UV,FVector2D V2_UV,FLinearColor V0_Color,FLinearColor V1_Color,FLinearColor V2_Color);


// Function  Engine.HUD.DrawRect
// Offset::0x63BA430;
void FHUD::DrawRect(FLinearColor RectColor,float ScreenX,float ScreenY,float ScreenW,float ScreenH);


// Function  Engine.HUD.DrawText
// Offset::0x63BA840;
void FHUD::DrawText(FString Text,FLinearColor TextColor,float ScreenX,float ScreenY,FFont* Font,float Scale,bool bScalePosition);


// Function  Engine.HUD.DrawTexture
// Offset::0x63B9E20;
void FHUD::DrawTexture(FTexture* Texture,float ScreenX,float ScreenY,float ScreenW,float ScreenH,float TextureU,float TextureV,float TextureUWidth,float TextureVHeight,FLinearColor TintColor,enum class EBlendMode BlendMode,float Scale,bool bScalePosition,float Rotation,FVector2D RotPivot);


// Function  Engine.HUD.DrawTextureSimple
// Offset::0x63B9C50;
void FHUD::DrawTextureSimple(FTexture* Texture,float ScreenX,float ScreenY,float Scale,bool bScalePosition);


// Function  Engine.HUD.GetActorsInSelectionRectangle
// Offset::0x63B8B70;
void FHUD::GetActorsInSelectionRectangle(FActor* ClassFilter,FVector2D FirstPoint,FVector2D SecondPoint,TArray<FActor*> OutActors,bool bIncludeNonCollidingComponents,bool bActorMustBeFullyEnclosed);


// Function  Engine.HUD.GetOwningPawn
// Offset::0x63B8960;
FPawn* FHUD::GetOwningPawn();


// Function  Engine.HUD.GetOwningPlayerController
// Offset::0x37B5190;
FPlayerController* FHUD::GetOwningPlayerController();


// Function  Engine.HUD.GetTextSize
// Offset::0x63BAAE0;
void FHUD::GetTextSize(FString Text,float OutWidth,float OutHeight,FFont* Font,float Scale);


// Function  Engine.HUD.NextDebugTarget
// Offset::0x29C4350;
void FHUD::NextDebugTarget();


// Function  Engine.HUD.PreviousDebugTarget
// Offset::0x1B80D10;
void FHUD::PreviousDebugTarget();


// Function  Engine.HUD.Project
// Offset::0x63B8F70;
FVector FHUD::Project(FVector Location,bool bClampToZeroPlane);


// Function  Engine.HUD.ReceiveDrawHUD
// Offset::0x3D30810;
void FHUD::ReceiveDrawHUD(int32_t SizeX,int32_t SizeY);


// Function  Engine.HUD.ReceiveHitBoxBeginCursorOver
// Offset::0x3D30810;
void FHUD::ReceiveHitBoxBeginCursorOver(FName BoxName);


// Function  Engine.HUD.ReceiveHitBoxClick
// Offset::0x3D30810;
void FHUD::ReceiveHitBoxClick(FName BoxName);


// Function  Engine.HUD.ReceiveHitBoxEndCursorOver
// Offset::0x3D30810;
void FHUD::ReceiveHitBoxEndCursorOver(FName BoxName);


// Function  Engine.HUD.ReceiveHitBoxRelease
// Offset::0x3D30810;
void FHUD::ReceiveHitBoxRelease(FName BoxName);


// Function  Engine.HUD.RemoveAllDebugStrings
// Offset::0x63BADE0;
void FHUD::RemoveAllDebugStrings();


// Function  Engine.HUD.RemoveDebugText
// Offset::0x63BACF0;
void FHUD::RemoveDebugText(FActor* SrcActor,bool bLeaveDurationText);


// Function  Engine.HUD.ShowDebug
// Offset::0x63BB420;
void FHUD::ShowDebug(FName DebugType);


// Function  Engine.HUD.ShowDebugForReticleTargetToggle
// Offset::0x63BB2E0;
void FHUD::ShowDebugForReticleTargetToggle(FActor* DesiredClass);


// Function  Engine.HUD.ShowDebugToggleSubCategory
// Offset::0x63BB380;
void FHUD::ShowDebugToggleSubCategory(FName Category);


// Function  Engine.HUD.ShowHUD
// Offset::0x21D6F30;
void FHUD::ShowHUD();


// Function  GameplayAbilities.AbilitySystemGlobals.ListPlayerAbilities
// Offset::0x1B91E70;
void FAbilitySystemGlobals::ListPlayerAbilities();


// Function  GameplayAbilities.AbilitySystemGlobals.ServerActivatePlayerAbility
// Offset::0x1B91D80;
void FAbilitySystemGlobals::ServerActivatePlayerAbility(FString AbilityNameMatch);


// Function  GameplayAbilities.AbilitySystemGlobals.ServerCancelPlayerAbility
// Offset::0x1B91D80;
void FAbilitySystemGlobals::ServerCancelPlayerAbility(FString AbilityNameMatch);


// Function  GameplayAbilities.AbilitySystemGlobals.ServerEndPlayerAbility
// Offset::0x1B91D80;
void FAbilitySystemGlobals::ServerEndPlayerAbility(FString AbilityNameMatch);


// Function  GameplayAbilities.AbilitySystemGlobals.ToggleIgnoreAbilitySystemCooldowns
// Offset::0x179F4C0;
void FAbilitySystemGlobals::ToggleIgnoreAbilitySystemCooldowns();


// Function  GameplayAbilities.AbilitySystemGlobals.ToggleIgnoreAbilitySystemCosts
// Offset::0x1B91E90;
void FAbilitySystemGlobals::ToggleIgnoreAbilitySystemCosts();


// Function  Engine.DefaultPawn.LookUpAtRate
// Offset::0x637DE50;
void FDefaultPawn::LookUpAtRate(float Rate);


// Function  Engine.DefaultPawn.MoveForward
// Offset::0x637E0D0;
void FDefaultPawn::MoveForward(float Val);


// Function  Engine.DefaultPawn.MoveRight
// Offset::0x637E030;
void FDefaultPawn::MoveRight(float Val);


// Function  Engine.DefaultPawn.MoveUp_World
// Offset::0x637DF90;
void FDefaultPawn::MoveUp_World(float Val);


// Function  Engine.DefaultPawn.TurnAtRate
// Offset::0x637DEF0;
void FDefaultPawn::TurnAtRate(float Rate);


// Function  GameplayAbilities.AbilityTask_ApplyRootMotionConstantForce.ApplyRootMotionConstantForce
// Offset::0x1B93140;
FAbilityTask_ApplyRootMotionConstantForce* FAbilityTask_ApplyRootMotionConstantForce::ApplyRootMotionConstantForce(FGameplayAbility* OwningAbility,FName TaskInstanceName,FVector WorldDirection,float Strength,float Duration,bool bIsAdditive,FCurveFloat* StrengthOverTime,enum class ERootMotionFinishVelocityMode VelocityOnFinishMode,FVector SetVelocityOnFinish,float ClampVelocityOnFinish,bool bEnableGravity);


// Function  GameplayAbilities.AbilityTask_ApplyRootMotionJumpForce.ApplyRootMotionJumpForce
// Offset::0x1B93CA0;
FAbilityTask_ApplyRootMotionJumpForce* FAbilityTask_ApplyRootMotionJumpForce::ApplyRootMotionJumpForce(FGameplayAbility* OwningAbility,FName TaskInstanceName,FRotator Rotation,float Distance,float Height,float Duration,float MinimumLandedTriggerTime,bool bFinishOnLanded,enum class ERootMotionFinishVelocityMode VelocityOnFinishMode,FVector SetVelocityOnFinish,float ClampVelocityOnFinish,FCurveVector* PathOffsetCurve,FCurveFloat* TimeMappingCurve);


// Function  GameplayAbilities.AbilityTask_ApplyRootMotionJumpForce.Finish
// Offset::0x1B94330;
void FAbilityTask_ApplyRootMotionJumpForce::Finish();


// Function  GameplayAbilities.AbilityTask_ApplyRootMotionJumpForce.OnLandedCallback
// Offset::0x1B941C0;
void FAbilityTask_ApplyRootMotionJumpForce::OnLandedCallback(FHitResult Hit);


// Function  GameplayAbilities.AbilityTask_ApplyRootMotionMoveToActorForce.ApplyRootMotionMoveToActorForce
// Offset::0x1B957D0;
FAbilityTask_ApplyRootMotionMoveToActorForce* FAbilityTask_ApplyRootMotionMoveToActorForce::ApplyRootMotionMoveToActorForce(FGameplayAbility* OwningAbility,FName TaskInstanceName,FActor* TargetActor,FVector TargetLocationOffset,enum class ERootMotionMoveToActorTargetOffsetType OffsetAlignment,float Duration,FCurveFloat* TargetLerpSpeedHorizontal,FCurveFloat* TargetLerpSpeedVertical,bool bSetNewMovementMode,enum class EMovementMode MovementMode,bool bRestrictSpeedToExpected,FCurveVector* PathOffsetCurve,FCurveFloat* TimeMappingCurve,enum class ERootMotionFinishVelocityMode VelocityOnFinishMode,FVector SetVelocityOnFinish,float ClampVelocityOnFinish,bool bDisableDestinationReachedInterrupt);


// Function  GameplayAbilities.AbilityTask_ApplyRootMotionMoveToActorForce.ApplyRootMotionMoveToTargetDataActorForce
// Offset::0x1B94DF0;
FAbilityTask_ApplyRootMotionMoveToActorForce* FAbilityTask_ApplyRootMotionMoveToActorForce::ApplyRootMotionMoveToTargetDataActorForce(FGameplayAbility* OwningAbility,FName TaskInstanceName,FGameplayAbilityTargetDataHandle TargetDataHandle,int32_t TargetDataIndex,int32_t TargetActorIndex,FVector TargetLocationOffset,enum class ERootMotionMoveToActorTargetOffsetType OffsetAlignment,float Duration,FCurveFloat* TargetLerpSpeedHorizontal,FCurveFloat* TargetLerpSpeedVertical,bool bSetNewMovementMode,enum class EMovementMode MovementMode,bool bRestrictSpeedToExpected,FCurveVector* PathOffsetCurve,FCurveFloat* TimeMappingCurve,enum class ERootMotionFinishVelocityMode VelocityOnFinishMode,FVector SetVelocityOnFinish,float ClampVelocityOnFinish,bool bDisableDestinationReachedInterrupt);


// Function  GameplayAbilities.AbilityTask_ApplyRootMotionMoveToActorForce.OnRep_TargetLocation
// Offset::0x1B94CF0;
void FAbilityTask_ApplyRootMotionMoveToActorForce::OnRep_TargetLocation();


// Function  GameplayAbilities.AbilityTask_ApplyRootMotionMoveToActorForce.OnTargetActorSwapped
// Offset::0x1B94D10;
void FAbilityTask_ApplyRootMotionMoveToActorForce::OnTargetActorSwapped(FActor* OriginalTarget,FActor* NewTarget);


// Function  GameplayAbilities.AbilityTask_ApplyRootMotionMoveToForce.ApplyRootMotionMoveToForce
// Offset::0x1B96C40;
FAbilityTask_ApplyRootMotionMoveToForce* FAbilityTask_ApplyRootMotionMoveToForce::ApplyRootMotionMoveToForce(FGameplayAbility* OwningAbility,FName TaskInstanceName,FVector TargetLocation,float Duration,bool bSetNewMovementMode,enum class EMovementMode MovementMode,bool bRestrictSpeedToExpected,FCurveVector* PathOffsetCurve,enum class ERootMotionFinishVelocityMode VelocityOnFinishMode,FVector SetVelocityOnFinish,float ClampVelocityOnFinish);


// Function  GameplayAbilities.AbilityTask_ApplyRootMotionRadialForce.ApplyRootMotionRadialForce
// Offset::0x1B97860;
FAbilityTask_ApplyRootMotionRadialForce* FAbilityTask_ApplyRootMotionRadialForce::ApplyRootMotionRadialForce(FGameplayAbility* OwningAbility,FName TaskInstanceName,FVector Location,FActor* LocationActor,float Strength,float Duration,float Radius,bool bIsPush,bool bIsAdditive,bool bNoZForce,FCurveFloat* StrengthDistanceFalloff,FCurveFloat* StrengthOverTime,bool bUseFixedWorldDirection,FRotator FixedWorldDirection,enum class ERootMotionFinishVelocityMode VelocityOnFinishMode,FVector SetVelocityOnFinish,float ClampVelocityOnFinish);


// Function  GameplayAbilities.AbilityTask_MoveToLocation.MoveToLocation
// Offset::0x1B99E70;
FAbilityTask_MoveToLocation* FAbilityTask_MoveToLocation::MoveToLocation(FGameplayAbility* OwningAbility,FName TaskInstanceName,FVector Location,float Duration,FCurveFloat* OptionalInterpolationCurve,FCurveVector* OptionalVectorInterpolationCurve);


// Function  GameplayAbilities.AbilityTask_NetworkSyncPoint.OnSignalCallback
// Offset::0x1B9A770;
void FAbilityTask_NetworkSyncPoint::OnSignalCallback();


// Function  GameplayAbilities.AbilityTask_NetworkSyncPoint.WaitNetSync
// Offset::0x1AA7FA0;
FAbilityTask_NetworkSyncPoint* FAbilityTask_NetworkSyncPoint::WaitNetSync(FGameplayAbility* OwningAbility,enum class EAbilityTaskNetSyncType SyncType);


// Function  GameplayAbilities.AbilityTask_PlayMontageAndWait.CreatePlayMontageAndWaitProxy
// Offset::0x1AA8680;
FAbilityTask_PlayMontageAndWait* FAbilityTask_PlayMontageAndWait::CreatePlayMontageAndWaitProxy(FGameplayAbility* OwningAbility,FName TaskInstanceName,FAnimMontage* MontageToPlay,float Rate,FName StartSection,bool bStopWhenAbilityEnds,float AnimRootMotionTranslationScale,float StartTimeSeconds);


// Function  GameplayAbilities.AbilityTask_PlayMontageAndWait.OnMontageBlendingOut
// Offset::0x1B9ABE0;
void FAbilityTask_PlayMontageAndWait::OnMontageBlendingOut(FAnimMontage* Montage,bool bInterrupted);


// Function  GameplayAbilities.AbilityTask_PlayMontageAndWait.OnMontageEnded
// Offset::0x1B9AAD0;
void FAbilityTask_PlayMontageAndWait::OnMontageEnded(FAnimMontage* Montage,bool bInterrupted);


// Function  GameplayAbilities.AbilityTask_PlayMontageAndWait.OnMontageInterrupted
// Offset::0x1B9ABC0;
void FAbilityTask_PlayMontageAndWait::OnMontageInterrupted();


// Function  GameplayAbilities.AbilityTask_Repeat.RepeatAction
// Offset::0x1B9B110;
FAbilityTask_Repeat* FAbilityTask_Repeat::RepeatAction(FGameplayAbility* OwningAbility,float TimeBetweenActions,int32_t TotalActionCount);


// Function  GameplayAbilities.AbilityTask_SpawnActor.BeginSpawningActor
// Offset::0x1B9B7F0;
bool FAbilityTask_SpawnActor::BeginSpawningActor(FGameplayAbility* OwningAbility,FGameplayAbilityTargetDataHandle TargetData,FActor* Class,FActor* SpawnedActor);


// Function  GameplayAbilities.AbilityTask_SpawnActor.FinishSpawningActor
// Offset::0x1B9B500;
void FAbilityTask_SpawnActor::FinishSpawningActor(FGameplayAbility* OwningAbility,FGameplayAbilityTargetDataHandle TargetData,FActor* SpawnedActor);


// Function  GameplayAbilities.AbilityTask_SpawnActor.SpawnActor
// Offset::0x1B9BB60;
FAbilityTask_SpawnActor* FAbilityTask_SpawnActor::SpawnActor(FGameplayAbility* OwningAbility,FGameplayAbilityTargetDataHandle TargetData,FActor* Class);


// Function  GameplayAbilities.AbilityTask_StartAbilityState.StartAbilityState
// Offset::0x1B9C210;
FAbilityTask_StartAbilityState* FAbilityTask_StartAbilityState::StartAbilityState(FGameplayAbility* OwningAbility,FName StateName,bool bEndCurrentState);


// Function  GameplayAbilities.AbilityTask_VisualizeTargeting.BeginSpawningActor
// Offset::0x1B9C6E0;
bool FAbilityTask_VisualizeTargeting::BeginSpawningActor(FGameplayAbility* OwningAbility,FGameplayAbilityTargetActor* Class,FGameplayAbilityTargetActor* SpawnedActor);


// Function  GameplayAbilities.AbilityTask_VisualizeTargeting.FinishSpawningActor
// Offset::0x1B9C600;
void FAbilityTask_VisualizeTargeting::FinishSpawningActor(FGameplayAbility* OwningAbility,FGameplayAbilityTargetActor* SpawnedActor);


// Function  GameplayAbilities.AbilityTask_VisualizeTargeting.VisualizeTargeting
// Offset::0x1B9C9B0;
FAbilityTask_VisualizeTargeting* FAbilityTask_VisualizeTargeting::VisualizeTargeting(FGameplayAbility* OwningAbility,FGameplayAbilityTargetActor* Class,FName TaskInstanceName,float Duration);


// Function  GameplayAbilities.AbilityTask_VisualizeTargeting.VisualizeTargetingUsingActor
// Offset::0x1B9C830;
FAbilityTask_VisualizeTargeting* FAbilityTask_VisualizeTargeting::VisualizeTargetingUsingActor(FGameplayAbility* OwningAbility,FGameplayAbilityTargetActor* TargetActor,FName TaskInstanceName,float Duration);


// Function  GameplayAbilities.AbilityTask_WaitAbilityActivate.OnAbilityActivate
// Offset::0x1B9D5B0;
void FAbilityTask_WaitAbilityActivate::OnAbilityActivate(FGameplayAbility* ActivatedAbility);


// Function  GameplayAbilities.AbilityTask_WaitAbilityActivate.WaitForAbilityActivate
// Offset::0x1B9D3E0;
FAbilityTask_WaitAbilityActivate* FAbilityTask_WaitAbilityActivate::WaitForAbilityActivate(FGameplayAbility* OwningAbility,FGameplayTag WithTag,FGameplayTag WithoutTag,bool IncludeTriggeredAbilities,bool TriggerOnce);


// Function  GameplayAbilities.AbilityTask_WaitAbilityActivate.WaitForAbilityActivate_Query
// Offset::0x1B9CF80;
FAbilityTask_WaitAbilityActivate* FAbilityTask_WaitAbilityActivate::WaitForAbilityActivate_Query(FGameplayAbility* OwningAbility,FGameplayTagQuery Query,bool IncludeTriggeredAbilities,bool TriggerOnce);


// Function  GameplayAbilities.AbilityTask_WaitAbilityActivate.WaitForAbilityActivateWithTagRequirements
// Offset::0x1B9D180;
FAbilityTask_WaitAbilityActivate* FAbilityTask_WaitAbilityActivate::WaitForAbilityActivateWithTagRequirements(FGameplayAbility* OwningAbility,FGameplayTagRequirements TagRequirements,bool IncludeTriggeredAbilities,bool TriggerOnce);


// Function  GameplayAbilities.AbilityTask_WaitAbilityCommit.OnAbilityCommit
// Offset::0x1B9DDD0;
void FAbilityTask_WaitAbilityCommit::OnAbilityCommit(FGameplayAbility* ActivatedAbility);


// Function  GameplayAbilities.AbilityTask_WaitAbilityCommit.WaitForAbilityCommit
// Offset::0x1B9DC50;
FAbilityTask_WaitAbilityCommit* FAbilityTask_WaitAbilityCommit::WaitForAbilityCommit(FGameplayAbility* OwningAbility,FGameplayTag WithTag,FGameplayTag WithoutTage,bool TriggerOnce);


// Function  GameplayAbilities.AbilityTask_WaitAbilityCommit.WaitForAbilityCommit_Query
// Offset::0x1B9DAA0;
FAbilityTask_WaitAbilityCommit* FAbilityTask_WaitAbilityCommit::WaitForAbilityCommit_Query(FGameplayAbility* OwningAbility,FGameplayTagQuery Query,bool TriggerOnce);


// Function  GameplayAbilities.AbilityTask_WaitAttributeChange.WaitForAttributeChange
// Offset::0x1B9E640;
FAbilityTask_WaitAttributeChange* FAbilityTask_WaitAttributeChange::WaitForAttributeChange(FGameplayAbility* OwningAbility,FGameplayAttribute Attribute,FGameplayTag WithSrcTag,FGameplayTag WithoutSrcTag,bool TriggerOnce,FActor* OptionalExternalOwner);


// Function  GameplayAbilities.AbilityTask_WaitAttributeChange.WaitForAttributeChangeWithComparison
// Offset::0x1B9E2A0;
FAbilityTask_WaitAttributeChange* FAbilityTask_WaitAttributeChange::WaitForAttributeChangeWithComparison(FGameplayAbility* OwningAbility,FGameplayAttribute InAttribute,FGameplayTag InWithTag,FGameplayTag InWithoutTag,enum class EWaitAttributeChangeComparison InComparisonType,float InComparisonValue,bool TriggerOnce,FActor* OptionalExternalOwner);


// Function  GameplayAbilities.AbilityTask_WaitAttributeChangeRatioThreshold.WaitForAttributeChangeRatioThreshold
// Offset::0x1B9EC50;
FAbilityTask_WaitAttributeChangeRatioThreshold* FAbilityTask_WaitAttributeChangeRatioThreshold::WaitForAttributeChangeRatioThreshold(FGameplayAbility* OwningAbility,FGameplayAttribute AttributeNumerator,FGameplayAttribute AttributeDenominator,enum class EWaitAttributeChangeComparison ComparisonType,float ComparisonValue,bool bTriggerOnce,FActor* OptionalExternalOwner);


// Function  GameplayAbilities.AbilityTask_WaitAttributeChangeThreshold.WaitForAttributeChangeThreshold
// Offset::0x1B9F2B0;
FAbilityTask_WaitAttributeChangeThreshold* FAbilityTask_WaitAttributeChangeThreshold::WaitForAttributeChangeThreshold(FGameplayAbility* OwningAbility,FGameplayAttribute Attribute,enum class EWaitAttributeChangeComparison ComparisonType,float ComparisonValue,bool bTriggerOnce,FActor* OptionalExternalOwner);


// Function  GameplayAbilities.AbilityTask_WaitCancel.OnCancelCallback
// Offset::0x1B9F8F0;
void FAbilityTask_WaitCancel::OnCancelCallback();


// Function  GameplayAbilities.AbilityTask_WaitCancel.OnLocalCancelCallback
// Offset::0x1B9F8D0;
void FAbilityTask_WaitCancel::OnLocalCancelCallback();


// Function  GameplayAbilities.AbilityTask_WaitCancel.WaitCancel
// Offset::0x1B9F830;
FAbilityTask_WaitCancel* FAbilityTask_WaitCancel::WaitCancel(FGameplayAbility* OwningAbility);


// Function  GameplayAbilities.AbilityTask_WaitConfirm.OnConfirmCallback
// Offset::0x1B9FD40;
void FAbilityTask_WaitConfirm::OnConfirmCallback(FGameplayAbility* InAbility);


// Function  GameplayAbilities.AbilityTask_WaitConfirm.WaitConfirm
// Offset::0x1B9FCA0;
FAbilityTask_WaitConfirm* FAbilityTask_WaitConfirm::WaitConfirm(FGameplayAbility* OwningAbility);


// Function  GameplayAbilities.AbilityTask_WaitConfirmCancel.OnCancelCallback
// Offset::0x1BA13B0;
void FAbilityTask_WaitConfirmCancel::OnCancelCallback();


// Function  GameplayAbilities.AbilityTask_WaitConfirmCancel.OnConfirmCallback
// Offset::0x1BA13D0;
void FAbilityTask_WaitConfirmCancel::OnConfirmCallback();


// Function  GameplayAbilities.AbilityTask_WaitConfirmCancel.OnLocalCancelCallback
// Offset::0x1BA1370;
void FAbilityTask_WaitConfirmCancel::OnLocalCancelCallback();


// Function  GameplayAbilities.AbilityTask_WaitConfirmCancel.OnLocalConfirmCallback
// Offset::0x1BA1390;
void FAbilityTask_WaitConfirmCancel::OnLocalConfirmCallback();


// Function  GameplayAbilities.AbilityTask_WaitConfirmCancel.WaitConfirmCancel
// Offset::0x1BA12D0;
FAbilityTask_WaitConfirmCancel* FAbilityTask_WaitConfirmCancel::WaitConfirmCancel(FGameplayAbility* OwningAbility);


// Function  GameplayAbilities.AbilityTask_WaitDelay.WaitDelay
// Offset::0x1AA83B0;
FAbilityTask_WaitDelay* FAbilityTask_WaitDelay::WaitDelay(FGameplayAbility* OwningAbility,float Time);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEffectApplied.OnApplyGameplayEffectCallback
// Offset::0x1BA1B40;
void FAbilityTask_WaitGameplayEffectApplied::OnApplyGameplayEffectCallback(FAbilitySystemComponent* Target,FGameplayEffectSpec SpecApplied,FActiveGameplayEffectHandle ActiveHandle);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEffectApplied_Self.WaitGameplayEffectAppliedToSelf
// Offset::0x1BA2340;
FAbilityTask_WaitGameplayEffectApplied_Self* FAbilityTask_WaitGameplayEffectApplied_Self::WaitGameplayEffectAppliedToSelf(FGameplayAbility* OwningAbility,FGameplayTargetDataFilterHandle SourceFilter,FGameplayTagRequirements SourceTagRequirements,FGameplayTagRequirements TargetTagRequirements,bool TriggerOnce,FActor* OptionalExternalOwner,bool ListenForPeriodicEffect);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEffectApplied_Self.WaitGameplayEffectAppliedToSelf_Query
// Offset::0x1BA1F60;
FAbilityTask_WaitGameplayEffectApplied_Self* FAbilityTask_WaitGameplayEffectApplied_Self::WaitGameplayEffectAppliedToSelf_Query(FGameplayAbility* OwningAbility,FGameplayTargetDataFilterHandle SourceFilter,FGameplayTagQuery SourceTagQuery,FGameplayTagQuery TargetTagQuery,bool TriggerOnce,FActor* OptionalExternalOwner,bool ListenForPeriodicEffect);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEffectApplied_Target.WaitGameplayEffectAppliedToTarget
// Offset::0x1BA2F10;
FAbilityTask_WaitGameplayEffectApplied_Target* FAbilityTask_WaitGameplayEffectApplied_Target::WaitGameplayEffectAppliedToTarget(FGameplayAbility* OwningAbility,FGameplayTargetDataFilterHandle TargetFilter,FGameplayTagRequirements SourceTagRequirements,FGameplayTagRequirements TargetTagRequirements,bool TriggerOnce,FActor* OptionalExternalOwner,bool ListenForPeriodicEffects);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEffectApplied_Target.WaitGameplayEffectAppliedToTarget_Query
// Offset::0x1BA2B30;
FAbilityTask_WaitGameplayEffectApplied_Target* FAbilityTask_WaitGameplayEffectApplied_Target::WaitGameplayEffectAppliedToTarget_Query(FGameplayAbility* OwningAbility,FGameplayTargetDataFilterHandle SourceFilter,FGameplayTagQuery SourceTagQuery,FGameplayTagQuery TargetTagQuery,bool TriggerOnce,FActor* OptionalExternalOwner,bool ListenForPeriodicEffect);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEffectBlockedImmunity.WaitGameplayEffectBlockedByImmunity
// Offset::0x1BA36F0;
FAbilityTask_WaitGameplayEffectBlockedImmunity* FAbilityTask_WaitGameplayEffectBlockedImmunity::WaitGameplayEffectBlockedByImmunity(FGameplayAbility* OwningAbility,FGameplayTagRequirements SourceTagRequirements,FGameplayTagRequirements TargetTagRequirements,FActor* OptionalExternalTarget,bool OnlyTriggerOnce);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEffectRemoved.OnGameplayEffectRemoved
// Offset::0x1BA3E40;
void FAbilityTask_WaitGameplayEffectRemoved::OnGameplayEffectRemoved(FGameplayEffectRemovalInfo InGameplayEffectRemovalInfo);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEffectRemoved.WaitForGameplayEffectRemoved
// Offset::0x1BA3D50;
FAbilityTask_WaitGameplayEffectRemoved* FAbilityTask_WaitGameplayEffectRemoved::WaitForGameplayEffectRemoved(FGameplayAbility* OwningAbility,FActiveGameplayEffectHandle Handle);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEffectStackChange.OnGameplayEffectStackChange
// Offset::0x1BA4360;
void FAbilityTask_WaitGameplayEffectStackChange::OnGameplayEffectStackChange(FActiveGameplayEffectHandle Handle,int32_t NewCount,int32_t OldCount);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEffectStackChange.WaitForGameplayEffectStackChange
// Offset::0x1BA4270;
FAbilityTask_WaitGameplayEffectStackChange* FAbilityTask_WaitGameplayEffectStackChange::WaitForGameplayEffectStackChange(FGameplayAbility* OwningAbility,FActiveGameplayEffectHandle Handle);


// Function  GameplayAbilities.AbilityTask_WaitGameplayEvent.WaitGameplayEvent
// Offset::0x1AA84A0;
FAbilityTask_WaitGameplayEvent* FAbilityTask_WaitGameplayEvent::WaitGameplayEvent(FGameplayAbility* OwningAbility,FGameplayTag EventTag,FActor* OptionalExternalTarget,bool OnlyTriggerOnce,bool OnlyMatchExact);


// Function  GameplayAbilities.AbilityTask_WaitGameplayTag.GameplayTagCallback
// Offset::0x1BA5090;
void FAbilityTask_WaitGameplayTag::GameplayTagCallback(FGameplayTag Tag,int32_t NewCount);


// Function  GameplayAbilities.AbilityTask_WaitGameplayTagAdded.WaitGameplayTagAdd
// Offset::0x1AA8220;
FAbilityTask_WaitGameplayTagAdded* FAbilityTask_WaitGameplayTagAdded::WaitGameplayTagAdd(FGameplayAbility* OwningAbility,FGameplayTag Tag,FActor* InOptionalExternalTarget,bool OnlyTriggerOnce);


// Function  GameplayAbilities.AbilityTask_WaitGameplayTagRemoved.WaitGameplayTagRemove
// Offset::0x1AA8090;
FAbilityTask_WaitGameplayTagRemoved* FAbilityTask_WaitGameplayTagRemoved::WaitGameplayTagRemove(FGameplayAbility* OwningAbility,FGameplayTag Tag,FActor* InOptionalExternalTarget,bool OnlyTriggerOnce);


// Function  GameplayAbilities.AbilityTask_WaitInputPress.OnPressCallback
// Offset::0x1BA5450;
void FAbilityTask_WaitInputPress::OnPressCallback();


// Function  GameplayAbilities.AbilityTask_WaitInputPress.WaitInputPress
// Offset::0x1BA5360;
FAbilityTask_WaitInputPress* FAbilityTask_WaitInputPress::WaitInputPress(FGameplayAbility* OwningAbility,bool bTestAlreadyPressed);


// Function  GameplayAbilities.AbilityTask_WaitInputRelease.OnReleaseCallback
// Offset::0x1BA58A0;
void FAbilityTask_WaitInputRelease::OnReleaseCallback();


// Function  GameplayAbilities.AbilityTask_WaitInputRelease.WaitInputRelease
// Offset::0x1BA57B0;
FAbilityTask_WaitInputRelease* FAbilityTask_WaitInputRelease::WaitInputRelease(FGameplayAbility* OwningAbility,bool bTestAlreadyReleased);


// Function  GameplayAbilities.AbilityTask_WaitMovementModeChange.CreateWaitMovementModeChange
// Offset::0x1AA7EB0;
FAbilityTask_WaitMovementModeChange* FAbilityTask_WaitMovementModeChange::CreateWaitMovementModeChange(FGameplayAbility* OwningAbility,enum class EMovementMode NewMode);


// Function  GameplayAbilities.AbilityTask_WaitMovementModeChange.OnMovementModeChange
// Offset::0x1BA5C00;
void FAbilityTask_WaitMovementModeChange::OnMovementModeChange(FCharacter* Character,enum class EMovementMode PrevMovementMode,char PreviousCustomMode);


// Function  GameplayAbilities.AbilityTask_WaitOverlap.OnHitCallback
// Offset::0x1BA6110;
void FAbilityTask_WaitOverlap::OnHitCallback(FPrimitiveComponent* HitComp,FActor* OtherActor,FPrimitiveComponent* OtherComp,FVector NormalImpulse,FHitResult Hit);


// Function  GameplayAbilities.AbilityTask_WaitOverlap.WaitForOverlap
// Offset::0x1BA6070;
FAbilityTask_WaitOverlap* FAbilityTask_WaitOverlap::WaitForOverlap(FGameplayAbility* OwningAbility);


// Function  GameplayAbilities.AbilityTask_WaitTargetData.BeginSpawningActor
// Offset::0x1BA6820;
bool FAbilityTask_WaitTargetData::BeginSpawningActor(FGameplayAbility* OwningAbility,FGameplayAbilityTargetActor* Class,FGameplayAbilityTargetActor* SpawnedActor);


// Function  GameplayAbilities.AbilityTask_WaitTargetData.FinishSpawningActor
// Offset::0x1BA6740;
void FAbilityTask_WaitTargetData::FinishSpawningActor(FGameplayAbility* OwningAbility,FGameplayAbilityTargetActor* SpawnedActor);


// Function  GameplayAbilities.AbilityTask_WaitTargetData.OnTargetDataCancelledCallback
// Offset::0x1BA6C70;
void FAbilityTask_WaitTargetData::OnTargetDataCancelledCallback(FGameplayAbilityTargetDataHandle Data);


// Function  GameplayAbilities.AbilityTask_WaitTargetData.OnTargetDataReadyCallback
// Offset::0x1BA6DA0;
void FAbilityTask_WaitTargetData::OnTargetDataReadyCallback(FGameplayAbilityTargetDataHandle Data);


// Function  GameplayAbilities.AbilityTask_WaitTargetData.OnTargetDataReplicatedCallback
// Offset::0x1BA6EF0;
void FAbilityTask_WaitTargetData::OnTargetDataReplicatedCallback(FGameplayAbilityTargetDataHandle Data,FGameplayTag ActivationTag);


// Function  GameplayAbilities.AbilityTask_WaitTargetData.OnTargetDataReplicatedCancelledCallback
// Offset::0x1BA6ED0;
void FAbilityTask_WaitTargetData::OnTargetDataReplicatedCancelledCallback();


// Function  GameplayAbilities.AbilityTask_WaitTargetData.WaitTargetData
// Offset::0x1BA6AF0;
FAbilityTask_WaitTargetData* FAbilityTask_WaitTargetData::WaitTargetData(FGameplayAbility* OwningAbility,FName TaskInstanceName,enum class EGameplayTargetingConfirmation ConfirmationType,FGameplayAbilityTargetActor* Class);


// Function  GameplayAbilities.AbilityTask_WaitTargetData.WaitTargetDataUsingActor
// Offset::0x1BA6970;
FAbilityTask_WaitTargetData* FAbilityTask_WaitTargetData::WaitTargetDataUsingActor(FGameplayAbility* OwningAbility,FName TaskInstanceName,enum class EGameplayTargetingConfirmation ConfirmationType,FGameplayAbilityTargetActor* TargetActor);


// Function  GameplayAbilities.AbilityTask_WaitVelocityChange.CreateWaitVelocityChange
// Offset::0x1BA8310;
FAbilityTask_WaitVelocityChange* FAbilityTask_WaitVelocityChange::CreateWaitVelocityChange(FGameplayAbility* OwningAbility,FVector Direction,float MinimumMagnitude);


// Function  Engine.AnimNotify.GetDefaultTriggerWeightThreshold
// Offset::0x631A670;
float FAnimNotify::GetDefaultTriggerWeightThreshold();


// Function  Engine.AnimNotify.GetNotifyName
// Offset::0x234D2E0;
FString FAnimNotify::GetNotifyName();


// Function  Engine.AnimNotify.Received_Notify
// Offset::0x3D30810;
bool FAnimNotify::Received_Notify(FSkeletalMeshComponent* MeshComp,FAnimSequenceBase* Animation,FAnimNotifyEventReference EventReference);


// Function  Engine.AnimNotifyState.GetDefaultTriggerWeightThreshold
// Offset::0x631A670;
float FAnimNotifyState::GetDefaultTriggerWeightThreshold();


// Function  Engine.AnimNotifyState.GetNotifyName
// Offset::0x234D2E0;
FString FAnimNotifyState::GetNotifyName();


// Function  Engine.AnimNotifyState.Received_NotifyBegin
// Offset::0x3D30810;
bool FAnimNotifyState::Received_NotifyBegin(FSkeletalMeshComponent* MeshComp,FAnimSequenceBase* Animation,float TotalDuration,FAnimNotifyEventReference EventReference);


// Function  Engine.AnimNotifyState.Received_NotifyEnd
// Offset::0x3D30810;
bool FAnimNotifyState::Received_NotifyEnd(FSkeletalMeshComponent* MeshComp,FAnimSequenceBase* Animation,FAnimNotifyEventReference EventReference);


// Function  Engine.AnimNotifyState.Received_NotifyTick
// Offset::0x3D30810;
bool FAnimNotifyState::Received_NotifyTick(FSkeletalMeshComponent* MeshComp,FAnimSequenceBase* Animation,float FrameDeltaTime,FAnimNotifyEventReference EventReference);


// Function  GameplayAbilities.GameplayAbilityTargetActor.CancelTargeting
// Offset::0x1BB4100;
void FGameplayAbilityTargetActor::CancelTargeting();


// Function  GameplayAbilities.GameplayAbilityTargetActor.ConfirmTargeting
// Offset::0x1A80310;
void FGameplayAbilityTargetActor::ConfirmTargeting();


// Function  GameplayAbilities.GameplayAbilityWorldReticle.FaceTowardSource
// Offset::0x1BB5D10;
void FGameplayAbilityWorldReticle::FaceTowardSource(bool bFaceIn2D);


// Function  GameplayAbilities.GameplayAbilityWorldReticle.OnParametersInitialized
// Offset::0x3D30810;
void FGameplayAbilityWorldReticle::OnParametersInitialized();


// Function  GameplayAbilities.GameplayAbilityWorldReticle.OnTargetingAnActor
// Offset::0x3D30810;
void FGameplayAbilityWorldReticle::OnTargetingAnActor(bool bNewValue);


// Function  GameplayAbilities.GameplayAbilityWorldReticle.OnValidTargetChanged
// Offset::0x3D30810;
void FGameplayAbilityWorldReticle::OnValidTargetChanged(bool bNewValue);


// Function  GameplayAbilities.GameplayAbilityWorldReticle.SetReticleMaterialParamFloat
// Offset::0x3D30810;
void FGameplayAbilityWorldReticle::SetReticleMaterialParamFloat(FName ParamName,float Value);


// Function  GameplayAbilities.GameplayAbilityWorldReticle.SetReticleMaterialParamVector
// Offset::0x3D30810;
void FGameplayAbilityWorldReticle::SetReticleMaterialParamVector(FName ParamName,FVector Value);


// Function  GameplayAbilities.GameplayCueFunctionLibrary.AddGameplayCueOnActor
// Offset::0x1BB6C10;
void FGameplayCueFunctionLibrary::AddGameplayCueOnActor(FActor* Target,FGameplayTag GameplayCueTag,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueFunctionLibrary.ExecuteGameplayCueOnActor
// Offset::0x1BB6E70;
void FGameplayCueFunctionLibrary::ExecuteGameplayCueOnActor(FActor* Target,FGameplayTag GameplayCueTag,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueFunctionLibrary.MakeGameplayCueParametersFromHitResult
// Offset::0x1BB70D0;
FGameplayCueParameters FGameplayCueFunctionLibrary::MakeGameplayCueParametersFromHitResult(FHitResult HitResult);


// Function  GameplayAbilities.GameplayCueFunctionLibrary.RemoveGameplayCueOnActor
// Offset::0x1BB69B0;
void FGameplayCueFunctionLibrary::RemoveGameplayCueOnActor(FActor* Target,FGameplayTag GameplayCueTag,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueInterface.BlueprintCustomHandler
// Offset::0x3D30810;
void FGameplayCueInterface::BlueprintCustomHandler(enum class EGameplayCueEvent EventType,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueInterface.ForwardGameplayCueToParent
// Offset::0x1BB9690;
void FGameplayCueInterface::ForwardGameplayCueToParent();


// Function  GameplayAbilities.GameplayCueNotify_Actor.K2_EndGameplayCue
// Offset::0x1BBB1D0;
void FGameplayCueNotify_Actor::K2_EndGameplayCue();


// Function  GameplayAbilities.GameplayCueNotify_Actor.K2_HandleGameplayCue
// Offset::0x3D30810;
void FGameplayCueNotify_Actor::K2_HandleGameplayCue(FActor* MyTarget,enum class EGameplayCueEvent EventType,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueNotify_Actor.OnActive
// Offset::0x1BBAD90;
bool FGameplayCueNotify_Actor::OnActive(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueNotify_Actor.OnExecute
// Offset::0x1BBAFB0;
bool FGameplayCueNotify_Actor::OnExecute(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueNotify_Actor.OnOwnerDestroyed
// Offset::0x1BBB1F0;
void FGameplayCueNotify_Actor::OnOwnerDestroyed(FActor* DestroyedActor);


// Function  GameplayAbilities.GameplayCueNotify_Actor.OnRemove
// Offset::0x1BBA950;
bool FGameplayCueNotify_Actor::OnRemove(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueNotify_Actor.WhileActive
// Offset::0x1BBAB70;
bool FGameplayCueNotify_Actor::WhileActive(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueNotify_Static.K2_HandleGameplayCue
// Offset::0x3D30810;
void FGameplayCueNotify_Static::K2_HandleGameplayCue(FActor* MyTarget,enum class EGameplayCueEvent EventType,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueNotify_Static.OnActive
// Offset::0x1BC2A00;
bool FGameplayCueNotify_Static::OnActive(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueNotify_Static.OnExecute
// Offset::0x1BC2C20;
bool FGameplayCueNotify_Static::OnExecute(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueNotify_Static.OnRemove
// Offset::0x1BC25C0;
bool FGameplayCueNotify_Static::OnRemove(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueNotify_Static.WhileActive
// Offset::0x1BC27E0;
bool FGameplayCueNotify_Static::WhileActive(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GameplayAbilities.GameplayCueNotify_Burst.OnBurst
// Offset::0x3D30810;
void FGameplayCueNotify_Burst::OnBurst(FActor* Target,FGameplayCueParameters Parameters,FGameplayCueNotify_SpawnResult SpawnResults);


// Function  GameplayAbilities.GameplayCueNotify_BurstLatent.OnBurst
// Offset::0x3D30810;
void FGameplayCueNotify_BurstLatent::OnBurst(FActor* Target,FGameplayCueParameters Parameters,FGameplayCueNotify_SpawnResult SpawnResults);


// Function  GameplayAbilities.GameplayCueNotify_Looping.OnApplication
// Offset::0x3D30810;
void FGameplayCueNotify_Looping::OnApplication(FActor* Target,FGameplayCueParameters Parameters,FGameplayCueNotify_SpawnResult SpawnResults);


// Function  GameplayAbilities.GameplayCueNotify_Looping.OnLoopingStart
// Offset::0x3D30810;
void FGameplayCueNotify_Looping::OnLoopingStart(FActor* Target,FGameplayCueParameters Parameters,FGameplayCueNotify_SpawnResult SpawnResults);


// Function  GameplayAbilities.GameplayCueNotify_Looping.OnRecurring
// Offset::0x3D30810;
void FGameplayCueNotify_Looping::OnRecurring(FActor* Target,FGameplayCueParameters Parameters,FGameplayCueNotify_SpawnResult SpawnResults);


// Function  GameplayAbilities.GameplayCueNotify_Looping.OnRemoval
// Offset::0x3D30810;
void FGameplayCueNotify_Looping::OnRemoval(FActor* Target,FGameplayCueParameters Parameters,FGameplayCueNotify_SpawnResult SpawnResults);


// Function  GameplayAbilities.GameplayEffectCustomApplicationRequirement.CanApplyGameplayEffect
// Offset::0x1BC9700;
bool FGameplayEffectCustomApplicationRequirement::CanApplyGameplayEffect(FGameplayEffect* GameplayEffect,FGameplayEffectSpec Spec,FAbilitySystemComponent* ASC);


// Function  GameplayAbilities.GameplayEffectExecutionCalculation.Execute
// Offset::0x1BC9EE0;
void FGameplayEffectExecutionCalculation::Execute(FGameplayEffectCustomExecutionParameters ExecutionParams,FGameplayEffectCustomExecutionOutput OutExecutionOutput);


// Function  GameplayAbilities.GameplayModMagnitudeCalculation.CalculateBaseMagnitude
// Offset::0x1BCBDB0;
float FGameplayModMagnitudeCalculation::CalculateBaseMagnitude(FGameplayEffectSpec Spec);


// Function  GameplayAbilities.GameplayModMagnitudeCalculation.GetSetByCallerMagnitudeByName
// Offset::0x1BCB8A0;
float FGameplayModMagnitudeCalculation::GetSetByCallerMagnitudeByName(FGameplayEffectSpec EffectSpec,FName MagnitudeName);


// Function  GameplayAbilities.GameplayModMagnitudeCalculation.GetSetByCallerMagnitudeByTag
// Offset::0x1BCB9D0;
float FGameplayModMagnitudeCalculation::GetSetByCallerMagnitudeByTag(FGameplayEffectSpec EffectSpec,FGameplayTag Tag);


// Function  GameplayAbilities.GameplayModMagnitudeCalculation.GetSourceActorTags
// Offset::0x1BCB6D0;
FGameplayTagContainer FGameplayModMagnitudeCalculation::GetSourceActorTags(FGameplayEffectSpec EffectSpec);


// Function  GameplayAbilities.GameplayModMagnitudeCalculation.GetSourceAggregatedTags
// Offset::0x1BCB7A0;
FGameplayTagContainer FGameplayModMagnitudeCalculation::GetSourceAggregatedTags(FGameplayEffectSpec EffectSpec);


// Function  GameplayAbilities.GameplayModMagnitudeCalculation.GetSourceSpecTags
// Offset::0x1BCB600;
FGameplayTagContainer FGameplayModMagnitudeCalculation::GetSourceSpecTags(FGameplayEffectSpec EffectSpec);


// Function  GameplayAbilities.GameplayModMagnitudeCalculation.GetTargetActorTags
// Offset::0x1BCB430;
FGameplayTagContainer FGameplayModMagnitudeCalculation::GetTargetActorTags(FGameplayEffectSpec EffectSpec);


// Function  GameplayAbilities.GameplayModMagnitudeCalculation.GetTargetAggregatedTags
// Offset::0x1BCB500;
FGameplayTagContainer FGameplayModMagnitudeCalculation::GetTargetAggregatedTags(FGameplayEffectSpec EffectSpec);


// Function  GameplayAbilities.GameplayModMagnitudeCalculation.GetTargetSpecTags
// Offset::0x1BCB360;
FGameplayTagContainer FGameplayModMagnitudeCalculation::GetTargetSpecTags(FGameplayEffectSpec EffectSpec);


// Function  GameplayAbilities.GameplayModMagnitudeCalculation.K2_GetCapturedAttributeMagnitude
// Offset::0x1BCBB00;
float FGameplayModMagnitudeCalculation::K2_GetCapturedAttributeMagnitude(FGameplayEffectSpec EffectSpec,FGameplayAttribute Attribute,FGameplayTagContainer SourceTags,FGameplayTagContainer TargetTags);


// Function  GameplayAbilities.GameplayTagReponseTable.TagResponseEvent
// Offset::0x1BCCB20;
void FGameplayTagReponseTable::TagResponseEvent(FGameplayTag Tag,int32_t NewCount,FAbilitySystemComponent* ASC,int32_t idx);


// Function  MovieScene.MovieSceneSection.GetBlendType
// Offset::0x53FEB90;
FOptionalMovieSceneBlendType FMovieSceneSection::GetBlendType();


// Function  MovieScene.MovieSceneSection.GetCompletionMode
// Offset::0x53FEC60;
enum class EMovieSceneCompletionMode FMovieSceneSection::GetCompletionMode();


// Function  MovieScene.MovieSceneSection.GetOverlapPriority
// Offset::0x222A900;
int32_t FMovieSceneSection::GetOverlapPriority();


// Function  MovieScene.MovieSceneSection.GetPostRollFrames
// Offset::0x53FE580;
int32_t FMovieSceneSection::GetPostRollFrames();


// Function  MovieScene.MovieSceneSection.GetPreRollFrames
// Offset::0x53FE680;
int32_t FMovieSceneSection::GetPreRollFrames();


// Function  MovieScene.MovieSceneSection.GetRowIndex
// Offset::0x222A930;
int32_t FMovieSceneSection::GetRowIndex();


// Function  MovieScene.MovieSceneSection.IsActive
// Offset::0x53FE880;
bool FMovieSceneSection::IsActive();


// Function  MovieScene.MovieSceneSection.IsLocked
// Offset::0x53FE780;
bool FMovieSceneSection::IsLocked();


// Function  MovieScene.MovieSceneSection.SetBlendType
// Offset::0x53FEAF0;
void FMovieSceneSection::SetBlendType(enum class EMovieSceneBlendType InBlendType);


// Function  MovieScene.MovieSceneSection.SetCompletionMode
// Offset::0x53FEBC0;
void FMovieSceneSection::SetCompletionMode(enum class EMovieSceneCompletionMode InCompletionMode);


// Function  MovieScene.MovieSceneSection.SetIsActive
// Offset::0x53FE8B0;
void FMovieSceneSection::SetIsActive(bool bInIsActive);


// Function  MovieScene.MovieSceneSection.SetIsLocked
// Offset::0x53FE7B0;
void FMovieSceneSection::SetIsLocked(bool bInIsLocked);


// Function  MovieScene.MovieSceneSection.SetOverlapPriority
// Offset::0x53FE9B0;
void FMovieSceneSection::SetOverlapPriority(int32_t NewPriority);


// Function  MovieScene.MovieSceneSection.SetPostRollFrames
// Offset::0x53FE5B0;
void FMovieSceneSection::SetPostRollFrames(int32_t InPostRollFrames);


// Function  MovieScene.MovieSceneSection.SetPreRollFrames
// Offset::0x53FE6B0;
void FMovieSceneSection::SetPreRollFrames(int32_t InPreRollFrames);


// Function  MovieScene.MovieSceneSection.SetRowIndex
// Offset::0x53FEA50;
void FMovieSceneSection::SetRowIndex(int32_t NewRowIndex);


// Function  GameplayAbilities.MovieSceneGameplayCueTrack.SetSequencerTrackHandler
// Offset::0x1BCF5A0;
void FMovieSceneGameplayCueTrack::SetSequencerTrackHandler(FDelegate InGameplayCueTrackHandler);


// Function  Niagara.NiagaraActor.OnNiagaraSystemFinished
// Offset::0x1F5C2B0;
void FNiagaraActor::OnNiagaraSystemFinished(FNiagaraComponent* FinishedComponent);


// Function  Niagara.NiagaraActor.SetDestroyOnSystemFinish
// Offset::0x1F5C350;
void FNiagaraActor::SetDestroyOnSystemFinish(bool bShouldDestroyOnSystemFinish);


// Function  Engine.FXSystemComponent.GetFXSystemAsset
// Offset::0x64AD720;
FFXSystemAsset* FFXSystemComponent::GetFXSystemAsset();


// Function  Engine.FXSystemComponent.ReleaseToPool
// Offset::0x64AD3A0;
void FFXSystemComponent::ReleaseToPool();


// Function  Engine.FXSystemComponent.SetActorParameter
// Offset::0x64AD750;
void FFXSystemComponent::SetActorParameter(FName ParameterName,FActor* Param);


// Function  Engine.FXSystemComponent.SetAutoAttachmentParameters
// Offset::0x64AD460;
void FFXSystemComponent::SetAutoAttachmentParameters(FSceneComponent* Parent,FName SocketName,enum class EAttachmentRule LocationRule,enum class EAttachmentRule RotationRule,enum class EAttachmentRule ScaleRule);


// Function  Engine.FXSystemComponent.SetBoolParameter
// Offset::0x64ADC00;
void FFXSystemComponent::SetBoolParameter(FName ParameterName,bool Param);


// Function  Engine.FXSystemComponent.SetColorParameter
// Offset::0x64AD840;
void FFXSystemComponent::SetColorParameter(FName ParameterName,FLinearColor Param);


// Function  Engine.FXSystemComponent.SetEmitterEnable
// Offset::0x64AD630;
void FFXSystemComponent::SetEmitterEnable(FName EmitterName,bool bNewEnableState);


// Function  Engine.FXSystemComponent.SetFloatParameter
// Offset::0x64ADA20;
void FFXSystemComponent::SetFloatParameter(FName ParameterName,float Param);


// Function  Engine.FXSystemComponent.SetIntParameter
// Offset::0x64ADB10;
void FFXSystemComponent::SetIntParameter(FName ParameterName,int32_t Param);


// Function  Engine.FXSystemComponent.SetUseAutoManageAttachment
// Offset::0x64AD3C0;
void FFXSystemComponent::SetUseAutoManageAttachment(bool bAutoManage);


// Function  Engine.FXSystemComponent.SetVectorParameter
// Offset::0x64AD930;
void FFXSystemComponent::SetVectorParameter(FName ParameterName,FVector Param);


// Function  Niagara.NiagaraComponent.AdvanceSimulation
// Offset::0x1F60EA0;
void FNiagaraComponent::AdvanceSimulation(int32_t TickCount,float TickDeltaSeconds);


// Function  Niagara.NiagaraComponent.AdvanceSimulationByTime
// Offset::0x1F60DC0;
void FNiagaraComponent::AdvanceSimulationByTime(float SimulateTime,float TickDeltaSeconds);


// Function  Niagara.NiagaraComponent.ClearEmitterFixedBounds
// Offset::0x1F62D20;
void FNiagaraComponent::ClearEmitterFixedBounds(FName EmitterName);


// Function  Niagara.NiagaraComponent.ClearSystemFixedBounds
// Offset::0x1F62FB0;
void FNiagaraComponent::ClearSystemFixedBounds();


// Function  Niagara.NiagaraComponent.GetAgeUpdateMode
// Offset::0x1F63780;
enum class ENiagaraAgeUpdateMode FNiagaraComponent::GetAgeUpdateMode();


// Function  Niagara.NiagaraComponent.GetAllowScalability
// Offset::0x1F60990;
bool FNiagaraComponent::GetAllowScalability();


// Function  Niagara.NiagaraComponent.GetAsset
// Offset::0x1F639F0;
FNiagaraSystem* FNiagaraComponent::GetAsset();


// Function  Niagara.NiagaraComponent.GetCustomTimeDilation
// Offset::0x1F637B0;
float FNiagaraComponent::GetCustomTimeDilation();


// Function  Niagara.NiagaraComponent.GetDataInterface
// Offset::0x1F60C40;
FNiagaraDataInterface* FNiagaraComponent::GetDataInterface(FString Name);


// Function  Niagara.NiagaraComponent.GetDesiredAge
// Offset::0x1F636C0;
float FNiagaraComponent::GetDesiredAge();


// Function  Niagara.NiagaraComponent.GetEmitterFixedBounds
// Offset::0x1F62DC0;
FBox FNiagaraComponent::GetEmitterFixedBounds(FName EmitterName);


// Function  Niagara.NiagaraComponent.GetForceLocalPlayerEffect
// Offset::0x1F608C0;
bool FNiagaraComponent::GetForceLocalPlayerEffect();


// Function  Niagara.NiagaraComponent.GetForceSolo
// Offset::0x1F63920;
bool FNiagaraComponent::GetForceSolo();


// Function  Niagara.NiagaraComponent.GetLockDesiredAgeDeltaTimeToSeekDelta
// Offset::0x1F633E0;
bool FNiagaraComponent::GetLockDesiredAgeDeltaTimeToSeekDelta();


// Function  Niagara.NiagaraComponent.GetMaxSimTime
// Offset::0x1F63310;
float FNiagaraComponent::GetMaxSimTime();


// Function  Niagara.NiagaraComponent.GetNiagaraParticlePositions_DebugOnly
// Offset::0x1F612E0;
TArray<FVector> FNiagaraComponent::GetNiagaraParticlePositions_DebugOnly(FString InEmitterName);


// Function  Niagara.NiagaraComponent.GetNiagaraParticleValues_DebugOnly
// Offset::0x1F611A0;
TArray<float> FNiagaraComponent::GetNiagaraParticleValues_DebugOnly(FString InEmitterName,FString InValueName);


// Function  Niagara.NiagaraComponent.GetNiagaraParticleValueVec3_DebugOnly
// Offset::0x1F61060;
TArray<FVector> FNiagaraComponent::GetNiagaraParticleValueVec3_DebugOnly(FString InEmitterName,FString InValueName);


// Function  Niagara.NiagaraComponent.GetPreviewLODDistance
// Offset::0x1F60A80;
float FNiagaraComponent::GetPreviewLODDistance();


// Function  Niagara.NiagaraComponent.GetPreviewLODDistanceEnabled
// Offset::0x1F60AD0;
bool FNiagaraComponent::GetPreviewLODDistanceEnabled();


// Function  Niagara.NiagaraComponent.GetRandomSeedOffset
// Offset::0x1F62C50;
int32_t FNiagaraComponent::GetRandomSeedOffset();


// Function  Niagara.NiagaraComponent.GetSeekDelta
// Offset::0x1F634B0;
float FNiagaraComponent::GetSeekDelta();


// Function  Niagara.NiagaraComponent.GetSystemFixedBounds
// Offset::0x1F62FD0;
FBox FNiagaraComponent::GetSystemFixedBounds();


// Function  Niagara.NiagaraComponent.GetTickBehavior
// Offset::0x1F63110;
enum class ENiagaraTickBehavior FNiagaraComponent::GetTickBehavior();


// Function  Niagara.NiagaraComponent.InitForPerformanceBaseline
// Offset::0x1F60A60;
void FNiagaraComponent::InitForPerformanceBaseline();


// Function  Niagara.NiagaraComponent.IsPaused
// Offset::0x1F60CF0;
bool FNiagaraComponent::IsPaused();


// Function  Niagara.NiagaraComponent.ReinitializeSystem
// Offset::0x1F61020;
void FNiagaraComponent::ReinitializeSystem();


// Function  Niagara.NiagaraComponent.ResetSystem
// Offset::0x1F61040;
void FNiagaraComponent::ResetSystem();


// Function  Niagara.NiagaraComponent.SeekToDesiredAge
// Offset::0x1F63580;
void FNiagaraComponent::SeekToDesiredAge(float InDesiredAge);


// Function  Niagara.NiagaraComponent.SetAgeUpdateMode
// Offset::0x1F636F0;
void FNiagaraComponent::SetAgeUpdateMode(enum class ENiagaraAgeUpdateMode InAgeUpdateMode);


// Function  Niagara.NiagaraComponent.SetAllowScalability
// Offset::0x1F609C0;
void FNiagaraComponent::SetAllowScalability(bool bAllow);


// Function  Niagara.NiagaraComponent.SetAsset
// Offset::0x1F63A10;
void FNiagaraComponent::SetAsset(FNiagaraSystem* InAsset,bool bResetExistingOverrideParameters);


// Function  Niagara.NiagaraComponent.SetAutoDestroy
// Offset::0x1F631D0;
void FNiagaraComponent::SetAutoDestroy(bool bInAutoDestroy);


// Function  Niagara.NiagaraComponent.SetCanRenderWhileSeeking
// Offset::0x1F634E0;
void FNiagaraComponent::SetCanRenderWhileSeeking(bool bInCanRenderWhileSeeking);


// Function  Niagara.NiagaraComponent.SetCustomTimeDilation
// Offset::0x1F637E0;
void FNiagaraComponent::SetCustomTimeDilation(float Dilation);


// Function  Niagara.NiagaraComponent.SetDesiredAge
// Offset::0x1F63620;
void FNiagaraComponent::SetDesiredAge(float InDesiredAge);


// Function  Niagara.NiagaraComponent.SetEmitterFixedBounds
// Offset::0x1F62E90;
void FNiagaraComponent::SetEmitterFixedBounds(FName EmitterName,FBox LocalBounds);


// Function  Niagara.NiagaraComponent.SetForceLocalPlayerEffect
// Offset::0x1F608F0;
void FNiagaraComponent::SetForceLocalPlayerEffect(bool bIsPlayerEffect);


// Function  Niagara.NiagaraComponent.SetForceSolo
// Offset::0x1F63950;
void FNiagaraComponent::SetForceSolo(bool bInForceSolo);


// Function  Niagara.NiagaraComponent.SetGpuComputeDebug
// Offset::0x1F63880;
void FNiagaraComponent::SetGpuComputeDebug(bool bEnableDebug);


// Function  Niagara.NiagaraComponent.SetLockDesiredAgeDeltaTimeToSeekDelta
// Offset::0x1F63340;
void FNiagaraComponent::SetLockDesiredAgeDeltaTimeToSeekDelta(bool bLock);


// Function  Niagara.NiagaraComponent.SetMaxSimTime
// Offset::0x1F63270;
void FNiagaraComponent::SetMaxSimTime(float InMaxTime);


// Function  Niagara.NiagaraComponent.SetNiagaraVariableActor
// Offset::0x1F61A00;
void FNiagaraComponent::SetNiagaraVariableActor(FString InVariableName,FActor* Actor);


// Function  Niagara.NiagaraComponent.SetNiagaraVariableBool
// Offset::0x1F61BE0;
void FNiagaraComponent::SetNiagaraVariableBool(FString InVariableName,bool InValue);


// Function  Niagara.NiagaraComponent.SetNiagaraVariableFloat
// Offset::0x1F61F90;
void FNiagaraComponent::SetNiagaraVariableFloat(FString InVariableName,float InValue);


// Function  Niagara.NiagaraComponent.SetNiagaraVariableInt
// Offset::0x1F61DC0;
void FNiagaraComponent::SetNiagaraVariableInt(FString InVariableName,int32_t InValue);


// Function  Niagara.NiagaraComponent.SetNiagaraVariableLinearColor
// Offset::0x1F62B50;
void FNiagaraComponent::SetNiagaraVariableLinearColor(FString InVariableName,FLinearColor InValue);


// Function  Niagara.NiagaraComponent.SetNiagaraVariableObject
// Offset::0x1F61830;
void FNiagaraComponent::SetNiagaraVariableObject(FString InVariableName,FObject* Object);


// Function  Niagara.NiagaraComponent.SetNiagaraVariablePosition
// Offset::0x1F62350;
void FNiagaraComponent::SetNiagaraVariablePosition(FString InVariableName,FVector InValue);


// Function  Niagara.NiagaraComponent.SetNiagaraVariableQuat
// Offset::0x1F62730;
void FNiagaraComponent::SetNiagaraVariableQuat(FString InVariableName,FQuat InValue);


// Function  Niagara.NiagaraComponent.SetNiagaraVariableVec2
// Offset::0x1F62170;
void FNiagaraComponent::SetNiagaraVariableVec2(FString InVariableName,FVector2D InValue);


// Function  Niagara.NiagaraComponent.SetNiagaraVariableVec3
// Offset::0x1F62540;
void FNiagaraComponent::SetNiagaraVariableVec3(FString InVariableName,FVector InValue);


// Function  Niagara.NiagaraComponent.SetNiagaraVariableVec4
// Offset::0x1F62940;
void FNiagaraComponent::SetNiagaraVariableVec4(FString InVariableName,FVector4 InValue);


// Function  Niagara.NiagaraComponent.SetPaused
// Offset::0x1F60D20;
void FNiagaraComponent::SetPaused(bool bInPaused);


// Function  Niagara.NiagaraComponent.SetPreviewLODDistance
// Offset::0x1F60B00;
void FNiagaraComponent::SetPreviewLODDistance(bool bEnablePreviewLODDistance,float PreviewLODDistance,float PreviewMaxDistance);


// Function  Niagara.NiagaraComponent.SetRandomSeedOffset
// Offset::0x1F62C80;
void FNiagaraComponent::SetRandomSeedOffset(int32_t NewRandomSeedOffset);


// Function  Niagara.NiagaraComponent.SetRenderingEnabled
// Offset::0x1F60F80;
void FNiagaraComponent::SetRenderingEnabled(bool bInRenderingEnabled);


// Function  Niagara.NiagaraComponent.SetSeekDelta
// Offset::0x1F63410;
void FNiagaraComponent::SetSeekDelta(float InSeekDelta);


// Function  Niagara.NiagaraComponent.SetSystemFixedBounds
// Offset::0x1F63040;
void FNiagaraComponent::SetSystemFixedBounds(FBox LocalBounds);


// Function  Niagara.NiagaraComponent.SetTickBehavior
// Offset::0x1F63140;
void FNiagaraComponent::SetTickBehavior(enum class ENiagaraTickBehavior NewTickBehavior);


// Function  Niagara.NiagaraComponent.SetVariableActor
// Offset::0x1F61920;
void FNiagaraComponent::SetVariableActor(FName InVariableName,FActor* Actor);


// Function  Niagara.NiagaraComponent.SetVariableBool
// Offset::0x1F61AF0;
void FNiagaraComponent::SetVariableBool(FName InVariableName,bool InValue);


// Function  Niagara.NiagaraComponent.SetVariableFloat
// Offset::0x1F61EB0;
void FNiagaraComponent::SetVariableFloat(FName InVariableName,float InValue);


// Function  Niagara.NiagaraComponent.SetVariableInt
// Offset::0x1F61CE0;
void FNiagaraComponent::SetVariableInt(FName InVariableName,int32_t InValue);


// Function  Niagara.NiagaraComponent.SetVariableLinearColor
// Offset::0x1F62A60;
void FNiagaraComponent::SetVariableLinearColor(FName InVariableName,FLinearColor InValue);


// Function  Niagara.NiagaraComponent.SetVariableMaterial
// Offset::0x1F61670;
void FNiagaraComponent::SetVariableMaterial(FName InVariableName,FMaterialInterface* Object);


// Function  Niagara.NiagaraComponent.SetVariableObject
// Offset::0x1F61750;
void FNiagaraComponent::SetVariableObject(FName InVariableName,FObject* Object);


// Function  Niagara.NiagaraComponent.SetVariablePosition
// Offset::0x1F62260;
void FNiagaraComponent::SetVariablePosition(FName InVariableName,FVector InValue);


// Function  Niagara.NiagaraComponent.SetVariableQuat
// Offset::0x1F62640;
void FNiagaraComponent::SetVariableQuat(FName InVariableName,FQuat InValue);


// Function  Niagara.NiagaraComponent.SetVariableStaticMesh
// Offset::0x1F61590;
void FNiagaraComponent::SetVariableStaticMesh(FName InVariableName,FStaticMesh* InValue);


// Function  Niagara.NiagaraComponent.SetVariableTexture
// Offset::0x1F614B0;
void FNiagaraComponent::SetVariableTexture(FName InVariableName,FTexture* Texture);


// Function  Niagara.NiagaraComponent.SetVariableTextureRenderTarget
// Offset::0x1F613D0;
void FNiagaraComponent::SetVariableTextureRenderTarget(FName InVariableName,FTextureRenderTarget* TextureRenderTarget);


// Function  Niagara.NiagaraComponent.SetVariableVec2
// Offset::0x1F62080;
void FNiagaraComponent::SetVariableVec2(FName InVariableName,FVector2D InValue);


// Function  Niagara.NiagaraComponent.SetVariableVec3
// Offset::0x1F62450;
void FNiagaraComponent::SetVariableVec3(FName InVariableName,FVector InValue);


// Function  Niagara.NiagaraComponent.SetVariableVec4
// Offset::0x1F62830;
void FNiagaraComponent::SetVariableVec4(FName InVariableName,FVector4 InValue);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayBool
// Offset::0x1F6A160;
TArray<bool> FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayBool(FNiagaraComponent* NiagaraSystem,FName OverrideName);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayBoolValue
// Offset::0x1F68600;
bool FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayBoolValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayColor
// Offset::0x1F6A4C0;
TArray<FLinearColor> FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayColor(FNiagaraComponent* NiagaraSystem,FName OverrideName);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayColorValue
// Offset::0x1F689A0;
FLinearColor FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayColorValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayFloat
// Offset::0x1F6AA60;
TArray<float> FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayFloat(FNiagaraComponent* NiagaraSystem,FName OverrideName);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayFloatValue
// Offset::0x1F68FE0;
float FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayFloatValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayInt32
// Offset::0x1F6A280;
TArray<int32_t> FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayInt32(FNiagaraComponent* NiagaraSystem,FName OverrideName);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayInt32Value
// Offset::0x1F68730;
int32_t FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayInt32Value(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayPosition
// Offset::0x1F6A700;
TArray<FVector> FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayPosition(FNiagaraComponent* NiagaraSystem,FName OverrideName);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayPositionValue
// Offset::0x1F68C20;
FVector FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayPositionValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayQuat
// Offset::0x1F6A3A0;
TArray<FQuat> FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayQuat(FNiagaraComponent* NiagaraSystem,FName OverrideName);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayQuatValue
// Offset::0x1F68860;
FQuat FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayQuatValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayVector
// Offset::0x1F6A820;
TArray<FVector> FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayVector(FNiagaraComponent* NiagaraSystem,FName OverrideName);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayVector2D
// Offset::0x1F6A940;
TArray<FVector2D> FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayVector2D(FNiagaraComponent* NiagaraSystem,FName OverrideName);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayVector2DValue
// Offset::0x1F68EA0;
FVector2D FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayVector2DValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayVector4
// Offset::0x1F6A5E0;
TArray<FVector4> FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayVector4(FNiagaraComponent* NiagaraSystem,FName OverrideName);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayVector4Value
// Offset::0x1F68AE0;
FVector4 FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayVector4Value(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.GetNiagaraArrayVectorValue
// Offset::0x1F68D60;
FVector FNiagaraDataInterfaceArrayFunctionLibrary::GetNiagaraArrayVectorValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayBool
// Offset::0x1F6AB80;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayBool(FNiagaraComponent* NiagaraSystem,FName OverrideName,TArray<bool> ArrayData);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayBoolValue
// Offset::0x1F69110;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayBoolValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index,bool Value,bool bSizeToFit);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayColor
// Offset::0x1F6AF40;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayColor(FNiagaraComponent* NiagaraSystem,FName OverrideName,TArray<FLinearColor> ArrayData);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayColorValue
// Offset::0x1F69670;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayColorValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index,FLinearColor Value,bool bSizeToFit);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayFloat
// Offset::0x1F6B580;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayFloat(FNiagaraComponent* NiagaraSystem,FName OverrideName,TArray<float> ArrayData);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayFloatValue
// Offset::0x1F69FA0;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayFloatValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index,float Value,bool bSizeToFit);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayInt32
// Offset::0x1F6ACC0;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayInt32(FNiagaraComponent* NiagaraSystem,FName OverrideName,TArray<int32_t> ArrayData);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayInt32Value
// Offset::0x1F692E0;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayInt32Value(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index,int32_t Value,bool bSizeToFit);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayPosition
// Offset::0x1F6B1C0;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayPosition(FNiagaraComponent* NiagaraSystem,FName OverrideName,TArray<FVector> ArrayData);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayPositionValue
// Offset::0x1F69A30;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayPositionValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index,FVector Value,bool bSizeToFit);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayQuat
// Offset::0x1F6AE00;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayQuat(FNiagaraComponent* NiagaraSystem,FName OverrideName,TArray<FQuat> ArrayData);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayQuatValue
// Offset::0x1F694A0;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayQuatValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index,FQuat Value,bool bSizeToFit);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayVector
// Offset::0x1F6B300;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayVector(FNiagaraComponent* NiagaraSystem,FName OverrideName,TArray<FVector> ArrayData);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayVector2D
// Offset::0x1F6B440;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayVector2D(FNiagaraComponent* NiagaraSystem,FName OverrideName,TArray<FVector2D> ArrayData);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayVector2DValue
// Offset::0x1F69DD0;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayVector2DValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index,FVector2D Value,bool bSizeToFit);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayVector4
// Offset::0x1F6B080;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayVector4(FNiagaraComponent* NiagaraSystem,FName OverrideName,TArray<FVector4> ArrayData);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayVector4Value
// Offset::0x1F69840;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayVector4Value(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index,FVector4 Value,bool bSizeToFit);


// Function  Niagara.NiagaraDataInterfaceArrayFunctionLibrary.SetNiagaraArrayVectorValue
// Offset::0x1F69C00;
void FNiagaraDataInterfaceArrayFunctionLibrary::SetNiagaraArrayVectorValue(FNiagaraComponent* NiagaraSystem,FName OverrideName,int32_t Index,FVector Value,bool bSizeToFit);


// Function  Niagara.NiagaraParticleCallbackHandler.ReceiveParticleData
// Offset::0x1F6EC80;
void FNiagaraParticleCallbackHandler::ReceiveParticleData(TArray<FBasicParticleData> Data,FNiagaraSystem* NiagaraSystem,FVector SimulationPositionOffset);


// Function  Niagara.NiagaraDataInterfaceGrid2DCollection.FillRawTexture2D
// Offset::0x1F6F8F0;
bool FNiagaraDataInterfaceGrid2DCollection::FillRawTexture2D(FNiagaraComponent* Component,FTextureRenderTarget2D* Dest,int32_t TilesX,int32_t TilesY);


// Function  Niagara.NiagaraDataInterfaceGrid2DCollection.FillTexture2D
// Offset::0x1F6FAA0;
bool FNiagaraDataInterfaceGrid2DCollection::FillTexture2D(FNiagaraComponent* Component,FTextureRenderTarget2D* Dest,int32_t AttributeIndex);


// Function  Niagara.NiagaraDataInterfaceGrid2DCollection.GetRawTextureSize
// Offset::0x1F6F7A0;
void FNiagaraDataInterfaceGrid2DCollection::GetRawTextureSize(FNiagaraComponent* Component,int32_t SizeX,int32_t SizeY);


// Function  Niagara.NiagaraDataInterfaceGrid2DCollection.GetTextureSize
// Offset::0x1F6F650;
void FNiagaraDataInterfaceGrid2DCollection::GetTextureSize(FNiagaraComponent* Component,int32_t SizeX,int32_t SizeY);


// Function  Niagara.NiagaraDataInterfaceGrid3DCollection.FillRawVolumeTexture
// Offset::0x1F704A0;
bool FNiagaraDataInterfaceGrid3DCollection::FillRawVolumeTexture(FNiagaraComponent* Component,FVolumeTexture* Dest,int32_t TilesX,int32_t TilesY,int32_t TileZ);


// Function  Niagara.NiagaraDataInterfaceGrid3DCollection.FillVolumeTexture
// Offset::0x1F6FAA0;
bool FNiagaraDataInterfaceGrid3DCollection::FillVolumeTexture(FNiagaraComponent* Component,FVolumeTexture* Dest,int32_t AttributeIndex);


// Function  Niagara.NiagaraDataInterfaceGrid3DCollection.GetRawTextureSize
// Offset::0x1F702F0;
void FNiagaraDataInterfaceGrid3DCollection::GetRawTextureSize(FNiagaraComponent* Component,int32_t SizeX,int32_t SizeY,int32_t SizeZ);


// Function  Niagara.NiagaraDataInterfaceGrid3DCollection.GetTextureSize
// Offset::0x1F70140;
void FNiagaraDataInterfaceGrid3DCollection::GetTextureSize(FNiagaraComponent* Component,int32_t SizeX,int32_t SizeY,int32_t SizeZ);


// Function  Niagara.NiagaraDataInterfaceUObjectPropertyReader.SetUObjectReaderPropertyRemap
// Offset::0x1F72F90;
void FNiagaraDataInterfaceUObjectPropertyReader::SetUObjectReaderPropertyRemap(FNiagaraComponent* NiagaraComponent,FName UserParameterName,FName GraphName,FName RemapName);


// Function  Niagara.NiagaraFunctionLibrary.AcquireNiagaraGPURayTracedCollisionGroup
// Offset::0x1F78C20;
int32_t FNiagaraFunctionLibrary::AcquireNiagaraGPURayTracedCollisionGroup(FObject* WorldContextObject);


// Function  Niagara.NiagaraFunctionLibrary.GetNiagaraParameterCollection
// Offset::0x1F78F20;
FNiagaraParameterCollectionInstance* FNiagaraFunctionLibrary::GetNiagaraParameterCollection(FObject* WorldContextObject,FNiagaraParameterCollection* Collection);


// Function  Niagara.NiagaraFunctionLibrary.OverrideSystemUserVariableSkeletalMeshComponent
// Offset::0x1F793D0;
void FNiagaraFunctionLibrary::OverrideSystemUserVariableSkeletalMeshComponent(FNiagaraComponent* NiagaraSystem,FString OverrideName,FSkeletalMeshComponent* SkeletalMeshComponent);


// Function  Niagara.NiagaraFunctionLibrary.OverrideSystemUserVariableStaticMesh
// Offset::0x1F79510;
void FNiagaraFunctionLibrary::OverrideSystemUserVariableStaticMesh(FNiagaraComponent* NiagaraSystem,FString OverrideName,FStaticMesh* StaticMesh);


// Function  Niagara.NiagaraFunctionLibrary.OverrideSystemUserVariableStaticMeshComponent
// Offset::0x1F79650;
void FNiagaraFunctionLibrary::OverrideSystemUserVariableStaticMeshComponent(FNiagaraComponent* NiagaraSystem,FString OverrideName,FStaticMeshComponent* StaticMeshComponent);


// Function  Niagara.NiagaraFunctionLibrary.ReleaseNiagaraGPURayTracedCollisionGroup
// Offset::0x1F78B40;
void FNiagaraFunctionLibrary::ReleaseNiagaraGPURayTracedCollisionGroup(FObject* WorldContextObject,int32_t CollisionGroup);


// Function  Niagara.NiagaraFunctionLibrary.SetActorNiagaraGPURayTracedCollisionGroup
// Offset::0x1F78CC0;
void FNiagaraFunctionLibrary::SetActorNiagaraGPURayTracedCollisionGroup(FObject* WorldContextObject,FActor* Actor,int32_t CollisionGroup);


// Function  Niagara.NiagaraFunctionLibrary.SetComponentNiagaraGPURayTracedCollisionGroup
// Offset::0x1F78DF0;
void FNiagaraFunctionLibrary::SetComponentNiagaraGPURayTracedCollisionGroup(FObject* WorldContextObject,FPrimitiveComponent* Primitive,int32_t CollisionGroup);


// Function  Niagara.NiagaraFunctionLibrary.SetSkeletalMeshDataInterfaceSamplingRegions
// Offset::0x1F79280;
void FNiagaraFunctionLibrary::SetSkeletalMeshDataInterfaceSamplingRegions(FNiagaraComponent* NiagaraSystem,FString OverrideName,TArray<FName> SamplingRegions);


// Function  Niagara.NiagaraFunctionLibrary.SetTexture2DArrayObject
// Offset::0x1F79000;
void FNiagaraFunctionLibrary::SetTexture2DArrayObject(FNiagaraComponent* NiagaraSystem,FString OverrideName,FTexture2DArray* Texture);


// Function  Niagara.NiagaraFunctionLibrary.SetTextureObject
// Offset::0x1F79140;
void FNiagaraFunctionLibrary::SetTextureObject(FNiagaraComponent* NiagaraSystem,FString OverrideName,FTexture* Texture);


// Function  Niagara.NiagaraFunctionLibrary.SetVolumeTextureObject
// Offset::0x1F79000;
void FNiagaraFunctionLibrary::SetVolumeTextureObject(FNiagaraComponent* NiagaraSystem,FString OverrideName,FVolumeTexture* Texture);


// Function  Niagara.NiagaraFunctionLibrary.SpawnSystemAtLocation
// Offset::0x1F79B90;
FNiagaraComponent* FNiagaraFunctionLibrary::SpawnSystemAtLocation(FObject* WorldContextObject,FNiagaraSystem* SystemTemplate,FVector Location,FRotator Rotation,FVector Scale,bool bAutoDestroy,bool bAutoActivate,enum class ENCPoolMethod PoolingMethod,bool bPreCullCheck);


// Function  Niagara.NiagaraFunctionLibrary.SpawnSystemAtLocationWithParams
// Offset::0x1F7A070;
FNiagaraComponent* FNiagaraFunctionLibrary::SpawnSystemAtLocationWithParams(FFXSystemSpawnParameters SpawnParams);


// Function  Niagara.NiagaraFunctionLibrary.SpawnSystemAttached
// Offset::0x1F79790;
FNiagaraComponent* FNiagaraFunctionLibrary::SpawnSystemAttached(FNiagaraSystem* SystemTemplate,FSceneComponent* AttachToComponent,FName AttachPointName,FVector Location,FRotator Rotation,enum class EAttachLocation LocationType,bool bAutoDestroy,bool bAutoActivate,enum class ENCPoolMethod PoolingMethod,bool bPreCullCheck);


// Function  Niagara.NiagaraFunctionLibrary.SpawnSystemAttachedWithParams
// Offset::0x1F79F50;
FNiagaraComponent* FNiagaraFunctionLibrary::SpawnSystemAttachedWithParams(FFXSystemSpawnParameters SpawnParams);


// Function  Niagara.NiagaraParameterCollectionInstance.GetBoolParameter
// Offset::0x1F7E140;
bool FNiagaraParameterCollectionInstance::GetBoolParameter(FString InVariableName);


// Function  Niagara.NiagaraParameterCollectionInstance.GetColorParameter
// Offset::0x1F7DC20;
FLinearColor FNiagaraParameterCollectionInstance::GetColorParameter(FString InVariableName);


// Function  Niagara.NiagaraParameterCollectionInstance.GetFloatParameter
// Offset::0x1F7E090;
float FNiagaraParameterCollectionInstance::GetFloatParameter(FString InVariableName);


// Function  Niagara.NiagaraParameterCollectionInstance.GetIntParameter
// Offset::0x1F7DFE0;
int32_t FNiagaraParameterCollectionInstance::GetIntParameter(FString InVariableName);


// Function  Niagara.NiagaraParameterCollectionInstance.GetQuatParameter
// Offset::0x1F7DCE0;
FQuat FNiagaraParameterCollectionInstance::GetQuatParameter(FString InVariableName);


// Function  Niagara.NiagaraParameterCollectionInstance.GetVector2DParameter
// Offset::0x1F7DF20;
FVector2D FNiagaraParameterCollectionInstance::GetVector2DParameter(FString InVariableName);


// Function  Niagara.NiagaraParameterCollectionInstance.GetVector4Parameter
// Offset::0x1F7DDA0;
FVector4 FNiagaraParameterCollectionInstance::GetVector4Parameter(FString InVariableName);


// Function  Niagara.NiagaraParameterCollectionInstance.GetVectorParameter
// Offset::0x1F7DE60;
FVector FNiagaraParameterCollectionInstance::GetVectorParameter(FString InVariableName);


// Function  Niagara.NiagaraParameterCollectionInstance.SetBoolParameter
// Offset::0x1F7DB20;
void FNiagaraParameterCollectionInstance::SetBoolParameter(FString InVariableName,bool InValue);


// Function  Niagara.NiagaraParameterCollectionInstance.SetColorParameter
// Offset::0x1F7D540;
void FNiagaraParameterCollectionInstance::SetColorParameter(FString InVariableName,FLinearColor InValue);


// Function  Niagara.NiagaraParameterCollectionInstance.SetFloatParameter
// Offset::0x1F7DA30;
void FNiagaraParameterCollectionInstance::SetFloatParameter(FString InVariableName,float InValue);


// Function  Niagara.NiagaraParameterCollectionInstance.SetIntParameter
// Offset::0x1F7D940;
void FNiagaraParameterCollectionInstance::SetIntParameter(FString InVariableName,int32_t InValue);


// Function  Niagara.NiagaraParameterCollectionInstance.SetQuatParameter
// Offset::0x1F7D440;
void FNiagaraParameterCollectionInstance::SetQuatParameter(FString InVariableName,FQuat InValue);


// Function  Niagara.NiagaraParameterCollectionInstance.SetVector2DParameter
// Offset::0x1F7D850;
void FNiagaraParameterCollectionInstance::SetVector2DParameter(FString InVariableName,FVector2D InValue);


// Function  Niagara.NiagaraParameterCollectionInstance.SetVector4Parameter
// Offset::0x1F7D630;
void FNiagaraParameterCollectionInstance::SetVector4Parameter(FString InVariableName,FVector4 InValue);


// Function  Niagara.NiagaraParameterCollectionInstance.SetVectorParameter
// Offset::0x1F7D750;
void FNiagaraParameterCollectionInstance::SetVectorParameter(FString InVariableName,FVector InValue);


// Function  Niagara.NiagaraBaselineController.GetSystem
// Offset::0x1F7F230;
FNiagaraSystem* FNiagaraBaselineController::GetSystem();


// Function  Niagara.NiagaraBaselineController.OnBeginTest
// Offset::0x179DDF0;
void FNiagaraBaselineController::OnBeginTest();


// Function  Niagara.NiagaraBaselineController.OnEndTest
// Offset::0x1F7F300;
void FNiagaraBaselineController::OnEndTest(FNiagaraPerfBaselineStats Stats);


// Function  Niagara.NiagaraBaselineController.OnOwnerTick
// Offset::0x1F7F260;
void FNiagaraBaselineController::OnOwnerTick(float DeltaTime);


// Function  Niagara.NiagaraBaselineController.OnTickTest
// Offset::0x1A7E930;
bool FNiagaraBaselineController::OnTickTest();


// Function  Niagara.NiagaraPreviewBase.SetLabelText
// Offset::0x3D30810;
void FNiagaraPreviewBase::SetLabelText(FText InXAxisText,FText InYAxisText);


// Function  Niagara.NiagaraPreviewBase.SetSystem
// Offset::0x3D30810;
void FNiagaraPreviewBase::SetSystem(FNiagaraSystem* InSystem);


// Function  Niagara.NiagaraPreviewAxis.ApplyToPreview
// Offset::0x1F81870;
void FNiagaraPreviewAxis::ApplyToPreview(FNiagaraComponent* PreviewComponent,int32_t PreviewIndex,bool bIsXAxis,FString OutLabelText);


// Function  Niagara.NiagaraPreviewAxis.Num
// Offset::0x1F81A20;
int32_t FNiagaraPreviewAxis::Num();


// Function  Niagara.NiagaraPreviewGrid.ActivatePreviews
// Offset::0x1F82B90;
void FNiagaraPreviewGrid::ActivatePreviews(bool bReset);


// Function  Niagara.NiagaraPreviewGrid.DeactivatePreviews
// Offset::0x1F82B70;
void FNiagaraPreviewGrid::DeactivatePreviews();


// Function  Niagara.NiagaraPreviewGrid.GetPreviews
// Offset::0x1F82A20;
void FNiagaraPreviewGrid::GetPreviews(TArray<FNiagaraComponent*> OutPreviews);


// Function  Niagara.NiagaraPreviewGrid.SetPaused
// Offset::0x1F82AD0;
void FNiagaraPreviewGrid::SetPaused(bool bPaused);


// Function  Niagara.NiagaraScript.RaiseOnGPUCompilationComplete
// Offset::0x1B91E70;
void FNiagaraScript::RaiseOnGPUCompilationComplete();


// Function  NiagaraAnimNotifies.AnimNotifyState_TimedNiagaraEffect.GetSpawnedEffect
// Offset::0x1FB2810;
FFXSystemComponent* FAnimNotifyState_TimedNiagaraEffect::GetSpawnedEffect(FMeshComponent* MeshComp);


// Function  NiagaraAnimNotifies.AnimNotifyState_TimedNiagaraEffectAdvanced.GetNotifyProgress
// Offset::0x1FB2BE0;
float FAnimNotifyState_TimedNiagaraEffectAdvanced::GetNotifyProgress(FMeshComponent* MeshComp);


// Function  NiagaraAnimNotifies.AnimNotify_PlayNiagaraEffect.GetSpawnedEffect
// Offset::0x1FB2F20;
FFXSystemComponent* FAnimNotify_PlayNiagaraEffect::GetSpawnedEffect();


// Function  DataRegistry.DataRegistrySubsystem.AcquireItemBP
// Offset::0x1FF3E60;
bool FDataRegistrySubsystem::AcquireItemBP(FDataRegistryId ItemId,FDelegate AcquireCallback);


// Function  DataRegistry.DataRegistrySubsystem.Conv_DataRegistryIdToString
// Offset::0x1FF37C0;
FString FDataRegistrySubsystem::Conv_DataRegistryIdToString(FDataRegistryId DataRegistryId);


// Function  DataRegistry.DataRegistrySubsystem.Conv_DataRegistryTypeToString
// Offset::0x1FF3B00;
FString FDataRegistrySubsystem::Conv_DataRegistryTypeToString(FDataRegistryType DataRegistryType);


// Function  DataRegistry.DataRegistrySubsystem.EqualEqual_DataRegistryId
// Offset::0x1FF36C0;
bool FDataRegistrySubsystem::EqualEqual_DataRegistryId(FDataRegistryId A,FDataRegistryId B);


// Function  DataRegistry.DataRegistrySubsystem.EqualEqual_DataRegistryType
// Offset::0x1FF3A20;
bool FDataRegistrySubsystem::EqualEqual_DataRegistryType(FDataRegistryType A,FDataRegistryType B);


// Function  DataRegistry.DataRegistrySubsystem.EvaluateDataRegistryCurve
// Offset::0x1FF3C70;
void FDataRegistrySubsystem::EvaluateDataRegistryCurve(FDataRegistryId ItemId,float InputValue,float DefaultValue,enum class EDataRegistrySubsystemGetItemResult OutResult,float OutValue);


// Function  DataRegistry.DataRegistrySubsystem.FindCachedItemBP
// Offset::0x1FEAE40;
void FDataRegistrySubsystem::FindCachedItemBP(FDataRegistryId ItemId,enum class EDataRegistrySubsystemGetItemResult OutResult,FTableRowBase OutItem);


// Function  DataRegistry.DataRegistrySubsystem.GetCachedItemBP
// Offset::0x1FEA9F0;
bool FDataRegistrySubsystem::GetCachedItemBP(FDataRegistryId ItemId,FTableRowBase OutItem);


// Function  DataRegistry.DataRegistrySubsystem.GetCachedItemFromLookupBP
// Offset::0x1FEB2B0;
bool FDataRegistrySubsystem::GetCachedItemFromLookupBP(FDataRegistryId ItemId,FDataRegistryLookup ResolvedLookup,FTableRowBase OutItem);


// Function  DataRegistry.DataRegistrySubsystem.IsValidDataRegistryId
// Offset::0x1FF38A0;
bool FDataRegistrySubsystem::IsValidDataRegistryId(FDataRegistryId DataRegistryId);


// Function  DataRegistry.DataRegistrySubsystem.IsValidDataRegistryType
// Offset::0x1FF3BD0;
bool FDataRegistrySubsystem::IsValidDataRegistryType(FDataRegistryType DataRegistryType);


// Function  DataRegistry.DataRegistrySubsystem.NotEqual_DataRegistryId
// Offset::0x1FF35C0;
bool FDataRegistrySubsystem::NotEqual_DataRegistryId(FDataRegistryId A,FDataRegistryId B);


// Function  DataRegistry.DataRegistrySubsystem.NotEqual_DataRegistryType
// Offset::0x1FF3940;
bool FDataRegistrySubsystem::NotEqual_DataRegistryType(FDataRegistryType A,FDataRegistryType B);


// Function  BinkMediaPlayer.BinkFunctionLibrary.Bink_DrawOverlays
// Offset::0x2006CB0;
void FBinkFunctionLibrary::Bink_DrawOverlays();


// Function  BinkMediaPlayer.BinkFunctionLibrary.BinkLoadingMovie_GetDuration
// Offset::0x2006C60;
FTimespan FBinkFunctionLibrary::BinkLoadingMovie_GetDuration();


// Function  BinkMediaPlayer.BinkFunctionLibrary.BinkLoadingMovie_GetTime
// Offset::0x2006C10;
FTimespan FBinkFunctionLibrary::BinkLoadingMovie_GetTime();


// Function  BinkMediaPlayer.BinkMediaPlayer.CanPause
// Offset::0x2007A50;
bool FBinkMediaPlayer::CanPause();


// Function  BinkMediaPlayer.BinkMediaPlayer.CanPlay
// Offset::0x2007C20;
bool FBinkMediaPlayer::CanPlay();


// Function  BinkMediaPlayer.BinkMediaPlayer.CloseUrl
// Offset::0x2007950;
void FBinkMediaPlayer::CloseUrl();


// Function  BinkMediaPlayer.BinkMediaPlayer.Draw
// Offset::0x2007290;
void FBinkMediaPlayer::Draw(FTexture* Texture,bool tonemap,int32_t out_nits,float Alpha,bool srgb_decode,bool hdr);


// Function  BinkMediaPlayer.BinkMediaPlayer.GetDuration
// Offset::0x2007BD0;
FTimespan FBinkMediaPlayer::GetDuration();


// Function  BinkMediaPlayer.BinkMediaPlayer.GetRate
// Offset::0x2007BA0;
float FBinkMediaPlayer::GetRate();


// Function  BinkMediaPlayer.BinkMediaPlayer.GetTime
// Offset::0x2007B50;
FTimespan FBinkMediaPlayer::GetTime();


// Function  BinkMediaPlayer.BinkMediaPlayer.GetUrl
// Offset::0x2007AE0;
FString FBinkMediaPlayer::GetUrl();


// Function  BinkMediaPlayer.BinkMediaPlayer.IsInitialized
// Offset::0x20074C0;
bool FBinkMediaPlayer::IsInitialized();


// Function  BinkMediaPlayer.BinkMediaPlayer.IsLooping
// Offset::0x2007AB0;
bool FBinkMediaPlayer::IsLooping();


// Function  BinkMediaPlayer.BinkMediaPlayer.IsPaused
// Offset::0x2007A80;
bool FBinkMediaPlayer::IsPaused();


// Function  BinkMediaPlayer.BinkMediaPlayer.IsPlaying
// Offset::0x2007A50;
bool FBinkMediaPlayer::IsPlaying();


// Function  BinkMediaPlayer.BinkMediaPlayer.IsStopped
// Offset::0x2007A20;
bool FBinkMediaPlayer::IsStopped();


// Function  BinkMediaPlayer.BinkMediaPlayer.OpenUrl
// Offset::0x2007970;
bool FBinkMediaPlayer::OpenUrl(FString NewUrl);


// Function  BinkMediaPlayer.BinkMediaPlayer.Pause
// Offset::0x2007920;
bool FBinkMediaPlayer::Pause();


// Function  BinkMediaPlayer.BinkMediaPlayer.Play
// Offset::0x20078F0;
bool FBinkMediaPlayer::Play();


// Function  BinkMediaPlayer.BinkMediaPlayer.Rewind
// Offset::0x20078C0;
bool FBinkMediaPlayer::Rewind();


// Function  BinkMediaPlayer.BinkMediaPlayer.Seek
// Offset::0x2007810;
bool FBinkMediaPlayer::Seek(FTimespan InTime);


// Function  BinkMediaPlayer.BinkMediaPlayer.SetLooping
// Offset::0x2007770;
bool FBinkMediaPlayer::SetLooping(bool InLooping);


// Function  BinkMediaPlayer.BinkMediaPlayer.SetRate
// Offset::0x20076D0;
bool FBinkMediaPlayer::SetRate(float Rate);


// Function  BinkMediaPlayer.BinkMediaPlayer.SetVolume
// Offset::0x2007630;
void FBinkMediaPlayer::SetVolume(float Rate);


// Function  BinkMediaPlayer.BinkMediaPlayer.Stop
// Offset::0x2007600;
void FBinkMediaPlayer::Stop();


// Function  BinkMediaPlayer.BinkMediaPlayer.SupportsRate
// Offset::0x2007510;
bool FBinkMediaPlayer::SupportsRate(float Rate,bool Unthinned);


// Function  BinkMediaPlayer.BinkMediaPlayer.SupportsScrubbing
// Offset::0x20074E0;
bool FBinkMediaPlayer::SupportsScrubbing();


// Function  BinkMediaPlayer.BinkMediaPlayer.SupportsSeeking
// Offset::0x20074E0;
bool FBinkMediaPlayer::SupportsSeeking();


// Function  Engine.StreamableRenderAsset.SetForceMipLevelsToBeResident
// Offset::0x6544540;
void FStreamableRenderAsset::SetForceMipLevelsToBeResident(float Seconds,int32_t CinematicLODGroupMask);


// Function  BinkMediaPlayer.BinkMediaTexture.Clear
// Offset::0x2008B20;
void FBinkMediaTexture::Clear();


// Function  BinkMediaPlayer.BinkMediaTexture.SetMediaPlayer
// Offset::0x2008B40;
void FBinkMediaTexture::SetMediaPlayer(FBinkMediaPlayer* InMediaPlayer);


// Function  CableComponent.CableComponent.GetAttachedActor
// Offset::0x200F4F0;
FActor* FCableComponent::GetAttachedActor();


// Function  CableComponent.CableComponent.GetAttachedComponent
// Offset::0x200F4C0;
FSceneComponent* FCableComponent::GetAttachedComponent();


// Function  CableComponent.CableComponent.GetCableParticleLocations
// Offset::0x200F410;
void FCableComponent::GetCableParticleLocations(TArray<FVector> Locations);


// Function  CableComponent.CableComponent.SetAttachEndTo
// Offset::0x200F520;
void FCableComponent::SetAttachEndTo(FActor* Actor,FName ComponentProperty,FName SocketName);


// Function  CableComponent.CableComponent.SetAttachEndToComponent
// Offset::0x200F650;
void FCableComponent::SetAttachEndToComponent(FSceneComponent* Component,FName SocketName);


// Function  UMG.Slider.GetNormalizedValue
// Offset::0x5722AD0;
float FSlider::GetNormalizedValue();


// Function  UMG.Slider.GetValue
// Offset::0x5722B00;
float FSlider::GetValue();


// Function  UMG.Slider.SetIndentHandle
// Offset::0x5722850;
void FSlider::SetIndentHandle(bool InValue);


// Function  UMG.Slider.SetLocked
// Offset::0x57227B0;
void FSlider::SetLocked(bool InValue);


// Function  UMG.Slider.SetMaxValue
// Offset::0x57228F0;
void FSlider::SetMaxValue(float InValue);


// Function  UMG.Slider.SetMinValue
// Offset::0x5722990;
void FSlider::SetMinValue(float InValue);


// Function  UMG.Slider.SetSliderBarColor
// Offset::0x5722670;
void FSlider::SetSliderBarColor(FLinearColor InValue);


// Function  UMG.Slider.SetSliderHandleColor
// Offset::0x57225D0;
void FSlider::SetSliderHandleColor(FLinearColor InValue);


// Function  UMG.Slider.SetStepSize
// Offset::0x5722710;
void FSlider::SetStepSize(float InValue);


// Function  UMG.Slider.SetValue
// Offset::0x5722A30;
void FSlider::SetValue(float InValue);


// Function  CommonUI.CommonActivatableWidget.ActivateWidget
// Offset::0x2089930;
void FCommonActivatableWidget::ActivateWidget();


// Function  CommonUI.CommonActivatableWidget.BindVisibilityToActivation
// Offset::0x2089740;
void FCommonActivatableWidget::BindVisibilityToActivation(FCommonActivatableWidget* ActivatableWidget);


// Function  CommonUI.CommonActivatableWidget.BP_GetDesiredFocusTarget
// Offset::0x3D30810;
FWidget* FCommonActivatableWidget::BP_GetDesiredFocusTarget();


// Function  CommonUI.CommonActivatableWidget.BP_OnActivated
// Offset::0x3D30810;
void FCommonActivatableWidget::BP_OnActivated();


// Function  CommonUI.CommonActivatableWidget.BP_OnDeactivated
// Offset::0x3D30810;
void FCommonActivatableWidget::BP_OnDeactivated();


// Function  CommonUI.CommonActivatableWidget.BP_OnHandleBackAction
// Offset::0x3D30810;
bool FCommonActivatableWidget::BP_OnHandleBackAction();


// Function  CommonUI.CommonActivatableWidget.DeactivateWidget
// Offset::0x2089910;
void FCommonActivatableWidget::DeactivateWidget();


// Function  CommonUI.CommonActivatableWidget.GetDesiredFocusTarget
// Offset::0x2089710;
FWidget* FCommonActivatableWidget::GetDesiredFocusTarget();


// Function  CommonUI.CommonActivatableWidget.IsActivated
// Offset::0x2089950;
bool FCommonActivatableWidget::IsActivated();


// Function  CommonUI.CommonActivatableWidget.SetBindVisibilities
// Offset::0x20897E0;
void FCommonActivatableWidget::SetBindVisibilities(enum class ESlateVisibility OnActivatedVisibility,enum class ESlateVisibility OnDeactivatedVisibility,bool bInAllActive);


// Function  CommonUI.CommonActivatableWidgetContainerBase.BP_AddWidget
// Offset::0x208AB00;
FCommonActivatableWidget* FCommonActivatableWidgetContainerBase::BP_AddWidget(FCommonActivatableWidget* ActivatableWidgetClass);


// Function  CommonUI.CommonActivatableWidgetContainerBase.BP_AddWidgetWithCallback
// Offset::0x208A9C0;
FCommonActivatableWidget* FCommonActivatableWidgetContainerBase::BP_AddWidgetWithCallback(FCommonActivatableWidget* ActivatableWidgetClass,FObject* Opt_CallbackObject,FName Opt_CallbackFunctionName);


// Function  CommonUI.CommonActivatableWidgetContainerBase.ClearWidgets
// Offset::0x208AD30;
void FCommonActivatableWidgetContainerBase::ClearWidgets();


// Function  CommonUI.CommonActivatableWidgetContainerBase.GetActiveWidget
// Offset::0x208AD50;
FCommonActivatableWidget* FCommonActivatableWidgetContainerBase::GetActiveWidget();


// Function  CommonUI.CommonActivatableWidgetContainerBase.GetTransitionDuration
// Offset::0x208AC60;
float FCommonActivatableWidgetContainerBase::GetTransitionDuration();


// Function  CommonUI.CommonActivatableWidgetContainerBase.RemoveWidget
// Offset::0x208A920;
void FCommonActivatableWidgetContainerBase::RemoveWidget(FCommonActivatableWidget* WidgetToRemove);


// Function  CommonUI.CommonActivatableWidgetContainerBase.SetSkipTransitionIn
// Offset::0x208ABA0;
void FCommonActivatableWidgetContainerBase::SetSkipTransitionIn(bool bInSkipTransitionIn);


// Function  CommonUI.CommonActivatableWidgetContainerBase.SetTransitionDuration
// Offset::0x208AC90;
void FCommonActivatableWidgetContainerBase::SetTransitionDuration(float Duration);


// Function  UMG.WidgetSwitcher.GetActiveWidget
// Offset::0x574ECE0;
FWidget* FWidgetSwitcher::GetActiveWidget();


// Function  UMG.WidgetSwitcher.GetActiveWidgetIndex
// Offset::0x574ED10;
int32_t FWidgetSwitcher::GetActiveWidgetIndex();


// Function  UMG.WidgetSwitcher.GetNumWidgets
// Offset::0x574ED40;
int32_t FWidgetSwitcher::GetNumWidgets();


// Function  UMG.WidgetSwitcher.GetWidgetAtIndex
// Offset::0x20A2B40;
FWidget* FWidgetSwitcher::GetWidgetAtIndex(int32_t Index);


// Function  UMG.WidgetSwitcher.SetActiveWidget
// Offset::0x20A2BE0;
void FWidgetSwitcher::SetActiveWidget(FWidget* Widget);


// Function  UMG.WidgetSwitcher.SetActiveWidgetIndex
// Offset::0x20A2C80;
void FWidgetSwitcher::SetActiveWidgetIndex(int32_t Index);


// Function  CommonUI.CommonAnimatedSwitcher.ActivateNextWidget
// Offset::0x208B970;
void FCommonAnimatedSwitcher::ActivateNextWidget(bool bCanWrap);


// Function  CommonUI.CommonAnimatedSwitcher.ActivatePreviousWidget
// Offset::0x208B8D0;
void FCommonAnimatedSwitcher::ActivatePreviousWidget(bool bCanWrap);


// Function  CommonUI.CommonAnimatedSwitcher.HasWidgets
// Offset::0x208B8A0;
bool FCommonAnimatedSwitcher::HasWidgets();


// Function  CommonUI.CommonAnimatedSwitcher.IsCurrentlySwitching
// Offset::0x208B7D0;
bool FCommonAnimatedSwitcher::IsCurrentlySwitching();


// Function  CommonUI.CommonAnimatedSwitcher.SetDisableTransitionAnimation
// Offset::0x208B800;
void FCommonAnimatedSwitcher::SetDisableTransitionAnimation(bool bDisableAnimation);


// Function  CommonUI.CommonBorderStyle.GetBackgroundBrush
// Offset::0x208BDD0;
void FCommonBorderStyle::GetBackgroundBrush(FSlateBrush Brush);


// Function  CommonUI.CommonBorder.SetStyle
// Offset::0x208C140;
void FCommonBorder::SetStyle(FCommonBorderStyle* InStyle);


// Function  UMG.DynamicEntryBoxBase.GetAllEntries
// Offset::0x5708830;
TArray<FUserWidget*> FDynamicEntryBoxBase::GetAllEntries();


// Function  UMG.DynamicEntryBoxBase.GetNumEntries
// Offset::0x5708800;
int32_t FDynamicEntryBoxBase::GetNumEntries();


// Function  UMG.DynamicEntryBoxBase.SetEntrySpacing
// Offset::0x5708760;
void FDynamicEntryBoxBase::SetEntrySpacing(FVector2D InEntrySpacing);


// Function  UMG.DynamicEntryBoxBase.SetRadialSettings
// Offset::0x57086A0;
void FDynamicEntryBoxBase::SetRadialSettings(FRadialBoxSettings InSettings);


// Function  CommonUI.CommonBoundActionBar.SetDisplayOwningPlayerActionsOnly
// Offset::0x208C480;
void FCommonBoundActionBar::SetDisplayOwningPlayerActionsOnly(bool bShouldOnlyDisplayOwningPlayerActions);


// Function  CommonUI.CommonButtonBase.BP_OnClicked
// Offset::0x3D30810;
void FCommonButtonBase::BP_OnClicked();


// Function  CommonUI.CommonButtonBase.BP_OnDeselected
// Offset::0x3D30810;
void FCommonButtonBase::BP_OnDeselected();


// Function  CommonUI.CommonButtonBase.BP_OnDisabled
// Offset::0x3D30810;
void FCommonButtonBase::BP_OnDisabled();


// Function  CommonUI.CommonButtonBase.BP_OnDoubleClicked
// Offset::0x3D30810;
void FCommonButtonBase::BP_OnDoubleClicked();


// Function  CommonUI.CommonButtonBase.BP_OnEnabled
// Offset::0x3D30810;
void FCommonButtonBase::BP_OnEnabled();


// Function  CommonUI.CommonButtonBase.BP_OnHovered
// Offset::0x3D30810;
void FCommonButtonBase::BP_OnHovered();


// Function  CommonUI.CommonButtonBase.BP_OnSelected
// Offset::0x3D30810;
void FCommonButtonBase::BP_OnSelected();


// Function  CommonUI.CommonButtonBase.BP_OnUnhovered
// Offset::0x3D30810;
void FCommonButtonBase::BP_OnUnhovered();


// Function  CommonUI.CommonButtonBase.ClearSelection
// Offset::0x208F020;
void FCommonButtonBase::ClearSelection();


// Function  CommonUI.CommonButtonBase.DisableButtonWithReason
// Offset::0x208F690;
void FCommonButtonBase::DisableButtonWithReason(FText DisabledReason);


// Function  CommonUI.CommonButtonBase.GetCurrentButtonPadding
// Offset::0x208EDD0;
void FCommonButtonBase::GetCurrentButtonPadding(FMargin OutButtonPadding);


// Function  CommonUI.CommonButtonBase.GetCurrentCustomPadding
// Offset::0x208ED20;
void FCommonButtonBase::GetCurrentCustomPadding(FMargin OutCustomPadding);


// Function  CommonUI.CommonButtonBase.GetCurrentTextStyle
// Offset::0x208ECF0;
FCommonTextStyle* FCommonButtonBase::GetCurrentTextStyle();


// Function  CommonUI.CommonButtonBase.GetCurrentTextStyleClass
// Offset::0x208ECA0;
FCommonTextStyle* FCommonButtonBase::GetCurrentTextStyleClass();


// Function  CommonUI.CommonButtonBase.GetInputAction
// Offset::0x208E9B0;
bool FCommonButtonBase::GetInputAction(FDataTableRowHandle InputActionRow);


// Function  CommonUI.CommonButtonBase.GetIsFocusable
// Offset::0x208E8E0;
bool FCommonButtonBase::GetIsFocusable();


// Function  CommonUI.CommonButtonBase.GetSelected
// Offset::0x208F040;
bool FCommonButtonBase::GetSelected();


// Function  CommonUI.CommonButtonBase.GetShouldSelectUponReceivingFocus
// Offset::0x208EF50;
bool FCommonButtonBase::GetShouldSelectUponReceivingFocus();


// Function  CommonUI.CommonButtonBase.GetSingleMaterialStyleMID
// Offset::0x208E8B0;
FMaterialInstanceDynamic* FCommonButtonBase::GetSingleMaterialStyleMID();


// Function  CommonUI.CommonButtonBase.GetStyle
// Offset::0x208EE80;
FCommonButtonStyle* FCommonButtonBase::GetStyle();


// Function  CommonUI.CommonButtonBase.HandleButtonClicked
// Offset::0x208E4B0;
void FCommonButtonBase::HandleButtonClicked();


// Function  CommonUI.CommonButtonBase.HandleButtonPressed
// Offset::0x208E470;
void FCommonButtonBase::HandleButtonPressed();


// Function  CommonUI.CommonButtonBase.HandleButtonReleased
// Offset::0x208E450;
void FCommonButtonBase::HandleButtonReleased();


// Function  CommonUI.CommonButtonBase.HandleFocusReceived
// Offset::0x208E490;
void FCommonButtonBase::HandleFocusReceived();


// Function  CommonUI.CommonButtonBase.HandleTriggeringActionCommited
// Offset::0x208E4D0;
void FCommonButtonBase::HandleTriggeringActionCommited(bool bPassThrough);


// Function  CommonUI.CommonButtonBase.IsInteractionEnabled
// Offset::0x208F5C0;
bool FCommonButtonBase::IsInteractionEnabled();


// Function  CommonUI.CommonButtonBase.IsPressed
// Offset::0x208F590;
bool FCommonButtonBase::IsPressed();


// Function  CommonUI.CommonButtonBase.NativeOnActionComplete
// Offset::0x208E230;
void FCommonButtonBase::NativeOnActionComplete();


// Function  CommonUI.CommonButtonBase.NativeOnActionProgress
// Offset::0x208E250;
void FCommonButtonBase::NativeOnActionProgress(float HeldPercent);


// Function  CommonUI.CommonButtonBase.OnActionComplete
// Offset::0x3D30810;
void FCommonButtonBase::OnActionComplete();


// Function  CommonUI.CommonButtonBase.OnActionProgress
// Offset::0x3D30810;
void FCommonButtonBase::OnActionProgress(float HeldPercent);


// Function  CommonUI.CommonButtonBase.OnCurrentTextStyleChanged
// Offset::0x3D30810;
void FCommonButtonBase::OnCurrentTextStyleChanged();


// Function  CommonUI.CommonButtonBase.OnInputMethodChanged
// Offset::0x208E580;
void FCommonButtonBase::OnInputMethodChanged(enum class ECommonInputType CurrentInputType);


// Function  CommonUI.CommonButtonBase.OnTriggeredInputActionChanged
// Offset::0x3D30810;
void FCommonButtonBase::OnTriggeredInputActionChanged(FDataTableRowHandle NewTriggeredAction);


// Function  CommonUI.CommonButtonBase.SetClickMethod
// Offset::0x208F500;
void FCommonButtonBase::SetClickMethod(enum class EButtonClickMethod InClickMethod);


// Function  CommonUI.CommonButtonBase.SetHoveredSoundOverride
// Offset::0x208E620;
void FCommonButtonBase::SetHoveredSoundOverride(FSoundBase* Sound);


// Function  CommonUI.CommonButtonBase.SetInputActionProgressMaterial
// Offset::0x208E760;
void FCommonButtonBase::SetInputActionProgressMaterial(FSlateBrush InProgressMaterialBrush,FName InProgressMaterialParam);


// Function  CommonUI.CommonButtonBase.SetIsFocusable
// Offset::0x208E910;
void FCommonButtonBase::SetIsFocusable(bool bInIsFocusable);


// Function  CommonUI.CommonButtonBase.SetIsInteractableWhenSelected
// Offset::0x208F2A0;
void FCommonButtonBase::SetIsInteractableWhenSelected(bool bInInteractableWhenSelected);


// Function  CommonUI.CommonButtonBase.SetIsInteractionEnabled
// Offset::0x208F5F0;
void FCommonButtonBase::SetIsInteractionEnabled(bool bInIsInteractionEnabled);


// Function  CommonUI.CommonButtonBase.SetIsSelectable
// Offset::0x208F340;
void FCommonButtonBase::SetIsSelectable(bool bInIsSelectable);


// Function  CommonUI.CommonButtonBase.SetIsSelected
// Offset::0x208F070;
void FCommonButtonBase::SetIsSelected(bool InSelected,bool bGiveClickFeedback);


// Function  CommonUI.CommonButtonBase.SetIsToggleable
// Offset::0x208F200;
void FCommonButtonBase::SetIsToggleable(bool bInIsToggleable);


// Function  CommonUI.CommonButtonBase.SetMinDimensions
// Offset::0x208EBC0;
void FCommonButtonBase::SetMinDimensions(int32_t InMinWidth,int32_t InMinHeight);


// Function  CommonUI.CommonButtonBase.SetPressedSoundOverride
// Offset::0x208E6C0;
void FCommonButtonBase::SetPressedSoundOverride(FSoundBase* Sound);


// Function  CommonUI.CommonButtonBase.SetPressMethod
// Offset::0x208F3E0;
void FCommonButtonBase::SetPressMethod(enum class EButtonPressMethod InPressMethod);


// Function  CommonUI.CommonButtonBase.SetSelectedInternal
// Offset::0x208E2F0;
void FCommonButtonBase::SetSelectedInternal(bool bInSelected,bool bAllowSound,bool bBroadcast);


// Function  CommonUI.CommonButtonBase.SetShouldSelectUponReceivingFocus
// Offset::0x208EF80;
void FCommonButtonBase::SetShouldSelectUponReceivingFocus(bool bInShouldSelectUponReceivingFocus);


// Function  CommonUI.CommonButtonBase.SetShouldUseFallbackDefaultInputAction
// Offset::0x208F160;
void FCommonButtonBase::SetShouldUseFallbackDefaultInputAction(bool bInShouldUseFallbackDefaultInputAction);


// Function  CommonUI.CommonButtonBase.SetStyle
// Offset::0x208EEB0;
void FCommonButtonBase::SetStyle(FCommonButtonStyle* InStyle);


// Function  CommonUI.CommonButtonBase.SetTouchMethod
// Offset::0x208F470;
void FCommonButtonBase::SetTouchMethod(enum class EButtonTouchMethod InTouchMethod);


// Function  CommonUI.CommonButtonBase.SetTriggeredInputAction
// Offset::0x208EB10;
void FCommonButtonBase::SetTriggeredInputAction(FDataTableRowHandle InputActionRow);


// Function  CommonUI.CommonButtonBase.SetTriggeringInputAction
// Offset::0x208EA60;
void FCommonButtonBase::SetTriggeringInputAction(FDataTableRowHandle InputActionRow);


// Function  CommonUI.CommonButtonBase.StopDoubleClickPropagation
// Offset::0x208E430;
void FCommonButtonBase::StopDoubleClickPropagation();


// Function  CommonUI.CommonBoundActionButton.OnUpdateInputAction
// Offset::0x3D30810;
void FCommonBoundActionButton::OnUpdateInputAction(FText ActionName);


// Function  CommonUI.CommonButtonStyle.GetButtonPadding
// Offset::0x208CEF0;
void FCommonButtonStyle::GetButtonPadding(FMargin OutButtonPadding);


// Function  CommonUI.CommonButtonStyle.GetCustomPadding
// Offset::0x208CE40;
void FCommonButtonStyle::GetCustomPadding(FMargin OutCustomPadding);


// Function  CommonUI.CommonButtonStyle.GetDisabledBrush
// Offset::0x208CFA0;
void FCommonButtonStyle::GetDisabledBrush(FSlateBrush Brush);


// Function  CommonUI.CommonButtonStyle.GetDisabledTextStyle
// Offset::0x208CD50;
FCommonTextStyle* FCommonButtonStyle::GetDisabledTextStyle();


// Function  CommonUI.CommonButtonStyle.GetMaterialBrush
// Offset::0x208D630;
void FCommonButtonStyle::GetMaterialBrush(FSlateBrush Brush);


// Function  CommonUI.CommonButtonStyle.GetNormalBaseBrush
// Offset::0x208D540;
void FCommonButtonStyle::GetNormalBaseBrush(FSlateBrush Brush);


// Function  CommonUI.CommonButtonStyle.GetNormalHoveredBrush
// Offset::0x208D450;
void FCommonButtonStyle::GetNormalHoveredBrush(FSlateBrush Brush);


// Function  CommonUI.CommonButtonStyle.GetNormalHoveredTextStyle
// Offset::0x208CDE0;
FCommonTextStyle* FCommonButtonStyle::GetNormalHoveredTextStyle();


// Function  CommonUI.CommonButtonStyle.GetNormalPressedBrush
// Offset::0x208D360;
void FCommonButtonStyle::GetNormalPressedBrush(FSlateBrush Brush);


// Function  CommonUI.CommonButtonStyle.GetNormalTextStyle
// Offset::0x208CE10;
FCommonTextStyle* FCommonButtonStyle::GetNormalTextStyle();


// Function  CommonUI.CommonButtonStyle.GetSelectedBaseBrush
// Offset::0x208D270;
void FCommonButtonStyle::GetSelectedBaseBrush(FSlateBrush Brush);


// Function  CommonUI.CommonButtonStyle.GetSelectedHoveredBrush
// Offset::0x208D180;
void FCommonButtonStyle::GetSelectedHoveredBrush(FSlateBrush Brush);


// Function  CommonUI.CommonButtonStyle.GetSelectedHoveredTextStyle
// Offset::0x208CD80;
FCommonTextStyle* FCommonButtonStyle::GetSelectedHoveredTextStyle();


// Function  CommonUI.CommonButtonStyle.GetSelectedPressedBrush
// Offset::0x208D090;
void FCommonButtonStyle::GetSelectedPressedBrush(FSlateBrush Brush);


// Function  CommonUI.CommonButtonStyle.GetSelectedTextStyle
// Offset::0x208CDB0;
FCommonTextStyle* FCommonButtonStyle::GetSelectedTextStyle();


// Function  UMG.Button.IsPressed
// Offset::0x5700B00;
bool FButton::IsPressed();


// Function  UMG.Button.SetBackgroundColor
// Offset::0x5700B30;
void FButton::SetBackgroundColor(FLinearColor InBackgroundColor);


// Function  UMG.Button.SetClickMethod
// Offset::0x5700A70;
void FButton::SetClickMethod(enum class EButtonClickMethod InClickMethod);


// Function  UMG.Button.SetColorAndOpacity
// Offset::0x5700BD0;
void FButton::SetColorAndOpacity(FLinearColor InColorAndOpacity);


// Function  UMG.Button.SetPressMethod
// Offset::0x5700950;
void FButton::SetPressMethod(enum class EButtonPressMethod InPressMethod);


// Function  UMG.Button.SetStyle
// Offset::0x5700C70;
void FButton::SetStyle(FButtonStyle InStyle);


// Function  UMG.Button.SetTouchMethod
// Offset::0x57009E0;
void FButton::SetTouchMethod(enum class EButtonTouchMethod InTouchMethod);


// Function  CommonUI.CommonWidgetGroupBase.AddWidget
// Offset::0x20A3990;
void FCommonWidgetGroupBase::AddWidget(FWidget* InWidget);


// Function  CommonUI.CommonWidgetGroupBase.RemoveAll
// Offset::0x20A38D0;
void FCommonWidgetGroupBase::RemoveAll();


// Function  CommonUI.CommonWidgetGroupBase.RemoveWidget
// Offset::0x20A38F0;
void FCommonWidgetGroupBase::RemoveWidget(FWidget* InWidget);


// Function  CommonUI.CommonButtonGroupBase.DeselectAll
// Offset::0x20945E0;
void FCommonButtonGroupBase::DeselectAll();


// Function  CommonUI.CommonButtonGroupBase.FindButtonIndex
// Offset::0x2094300;
int32_t FCommonButtonGroupBase::FindButtonIndex(FCommonButtonBase* ButtonToFind);


// Function  CommonUI.CommonButtonGroupBase.GetButtonBaseAtIndex
// Offset::0x2094260;
FCommonButtonBase* FCommonButtonGroupBase::GetButtonBaseAtIndex(int32_t Index);


// Function  CommonUI.CommonButtonGroupBase.GetButtonCount
// Offset::0x20941D0;
int32_t FCommonButtonGroupBase::GetButtonCount();


// Function  CommonUI.CommonButtonGroupBase.GetHoveredButtonIndex
// Offset::0x20943A0;
int32_t FCommonButtonGroupBase::GetHoveredButtonIndex();


// Function  CommonUI.CommonButtonGroupBase.GetSelectedButtonBase
// Offset::0x2094230;
FCommonButtonBase* FCommonButtonGroupBase::GetSelectedButtonBase();


// Function  CommonUI.CommonButtonGroupBase.GetSelectedButtonIndex
// Offset::0x20943D0;
int32_t FCommonButtonGroupBase::GetSelectedButtonIndex();


// Function  CommonUI.CommonButtonGroupBase.HasAnyButtons
// Offset::0x2094200;
bool FCommonButtonGroupBase::HasAnyButtons();


// Function  CommonUI.CommonButtonGroupBase.OnButtonBaseHovered
// Offset::0x2093F00;
void FCommonButtonGroupBase::OnButtonBaseHovered(FCommonButtonBase* BaseButton);


// Function  CommonUI.CommonButtonGroupBase.OnButtonBaseUnhovered
// Offset::0x2093E60;
void FCommonButtonGroupBase::OnButtonBaseUnhovered(FCommonButtonBase* BaseButton);


// Function  CommonUI.CommonButtonGroupBase.OnHandleButtonBaseClicked
// Offset::0x2094040;
void FCommonButtonGroupBase::OnHandleButtonBaseClicked(FCommonButtonBase* BaseButton);


// Function  CommonUI.CommonButtonGroupBase.OnHandleButtonBaseDoubleClicked
// Offset::0x2093FA0;
void FCommonButtonGroupBase::OnHandleButtonBaseDoubleClicked(FCommonButtonBase* BaseButton);


// Function  CommonUI.CommonButtonGroupBase.OnSelectionStateChangedBase
// Offset::0x20940E0;
void FCommonButtonGroupBase::OnSelectionStateChangedBase(FCommonButtonBase* BaseButton,bool bIsSelected);


// Function  CommonUI.CommonButtonGroupBase.SelectButtonAtIndex
// Offset::0x2094400;
void FCommonButtonGroupBase::SelectButtonAtIndex(int32_t ButtonIndex);


// Function  CommonUI.CommonButtonGroupBase.SelectNextButton
// Offset::0x2094540;
void FCommonButtonGroupBase::SelectNextButton(bool bAllowWrap);


// Function  CommonUI.CommonButtonGroupBase.SelectPreviousButton
// Offset::0x20944A0;
void FCommonButtonGroupBase::SelectPreviousButton(bool bAllowWrap);


// Function  CommonUI.CommonButtonGroupBase.SetSelectionRequired
// Offset::0x2094600;
void FCommonButtonGroupBase::SetSelectionRequired(bool bRequireSelection);


// Function  CommonUI.CommonDateTimeTextBlock.GetDateTime
// Offset::0x2095290;
FDateTime FCommonDateTimeTextBlock::GetDateTime();


// Function  CommonUI.CommonDateTimeTextBlock.SetCountDownCompletionText
// Offset::0x20952E0;
void FCommonDateTimeTextBlock::SetCountDownCompletionText(FText InCompletionText);


// Function  CommonUI.CommonDateTimeTextBlock.SetDateTimeValue
// Offset::0x2095470;
void FCommonDateTimeTextBlock::SetDateTimeValue(FDateTime InDateTime,bool bShowAsCountdown,float InRefreshDelay);


// Function  CommonUI.CommonDateTimeTextBlock.SetTimespanValue
// Offset::0x20953D0;
void FCommonDateTimeTextBlock::SetTimespanValue(FTimespan InTimespan);


// Function  UMG.ScrollBox.EndInertialScrolling
// Offset::0x571C9B0;
void FScrollBox::EndInertialScrolling();


// Function  UMG.ScrollBox.GetScrollOffset
// Offset::0x571C8E0;
float FScrollBox::GetScrollOffset();


// Function  UMG.ScrollBox.GetScrollOffsetOfEnd
// Offset::0x571C8B0;
float FScrollBox::GetScrollOffsetOfEnd();


// Function  UMG.ScrollBox.GetViewOffsetFraction
// Offset::0x571C880;
float FScrollBox::GetViewOffsetFraction();


// Function  UMG.ScrollBox.ScrollToEnd
// Offset::0x571C840;
void FScrollBox::ScrollToEnd();


// Function  UMG.ScrollBox.ScrollToStart
// Offset::0x571C860;
void FScrollBox::ScrollToStart();


// Function  UMG.ScrollBox.ScrollWidgetIntoView
// Offset::0x571C6B0;
void FScrollBox::ScrollWidgetIntoView(FWidget* WidgetToFind,bool AnimateScroll,enum class EDescendantScrollDestination ScrollDestination,float Padding);


// Function  UMG.ScrollBox.SetAllowOverscroll
// Offset::0x571CC30;
void FScrollBox::SetAllowOverscroll(bool NewAllowOverscroll);


// Function  UMG.ScrollBox.SetAlwaysShowScrollbar
// Offset::0x571CCD0;
void FScrollBox::SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);


// Function  UMG.ScrollBox.SetAnimateWheelScrolling
// Offset::0x571CB90;
void FScrollBox::SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);


// Function  UMG.ScrollBox.SetConsumeMouseWheel
// Offset::0x571CFE0;
void FScrollBox::SetConsumeMouseWheel(enum class EConsumeMouseWheel NewConsumeMouseWheel);


// Function  UMG.ScrollBox.SetNavigationDestination
// Offset::0x571C9D0;
void FScrollBox::SetNavigationDestination(enum class EDescendantScrollDestination NewNavigationDestination);


// Function  UMG.ScrollBox.SetOrientation
// Offset::0x571CF50;
void FScrollBox::SetOrientation(enum class EOrientation NewOrientation);


// Function  UMG.ScrollBox.SetScrollbarPadding
// Offset::0x571CD70;
void FScrollBox::SetScrollbarPadding(FMargin NewScrollbarPadding);


// Function  UMG.ScrollBox.SetScrollbarThickness
// Offset::0x571CE20;
void FScrollBox::SetScrollbarThickness(FVector2D NewScrollbarThickness);


// Function  UMG.ScrollBox.SetScrollBarVisibility
// Offset::0x571CEC0;
void FScrollBox::SetScrollBarVisibility(enum class ESlateVisibility NewScrollBarVisibility);


// Function  UMG.ScrollBox.SetScrollOffset
// Offset::0x571C910;
void FScrollBox::SetScrollOffset(float NewScrollOffset);


// Function  UMG.ScrollBox.SetScrollWhenFocusChanges
// Offset::0x571CA60;
void FScrollBox::SetScrollWhenFocusChanges(enum class EScrollWhenFocusChanges NewScrollWhenFocusChanges);


// Function  UMG.ScrollBox.SetWheelScrollMultiplier
// Offset::0x571CAF0;
void FScrollBox::SetWheelScrollMultiplier(float NewWheelScrollMultiplier);


// Function  UMG.Image.GetDynamicMaterial
// Offset::0x570D420;
FMaterialInstanceDynamic* FImage::GetDynamicMaterial();


// Function  UMG.Image.SetBrush
// Offset::0x570DAE0;
void FImage::SetBrush(FSlateBrush InBrush);


// Function  UMG.Image.SetBrushFromAsset
// Offset::0x570DA40;
void FImage::SetBrushFromAsset(FSlateBrushAsset* Asset);


// Function  UMG.Image.SetBrushFromAtlasInterface
// Offset::0x570D860;
void FImage::SetBrushFromAtlasInterface(TScriptInterface<ISlateTextureAtlasInterface> AtlasRegion,bool bMatchSize);


// Function  UMG.Image.SetBrushFromMaterial
// Offset::0x20A2BE0;
void FImage::SetBrushFromMaterial(FMaterialInterface* Material);


// Function  UMG.Image.SetBrushFromSoftMaterial
// Offset::0x570D450;
void FImage::SetBrushFromSoftMaterial(TSoftObjectPtr<FMaterialInterface> SoftMaterial);


// Function  UMG.Image.SetBrushFromSoftTexture
// Offset::0x570D5B0;
void FImage::SetBrushFromSoftTexture(TSoftObjectPtr<FTexture2D> SoftTexture,bool bMatchSize);


// Function  UMG.Image.SetBrushFromTexture
// Offset::0x570D950;
void FImage::SetBrushFromTexture(FTexture2D* Texture,bool bMatchSize);


// Function  UMG.Image.SetBrushFromTextureDynamic
// Offset::0x570D770;
void FImage::SetBrushFromTextureDynamic(FTexture2DDynamic* Texture,bool bMatchSize);


// Function  UMG.Image.SetBrushResourceObject
// Offset::0x570DBE0;
void FImage::SetBrushResourceObject(FObject* ResourceObject);


// Function  UMG.Image.SetBrushTintColor
// Offset::0x570DC80;
void FImage::SetBrushTintColor(FSlateColor TintColor);


// Function  UMG.Image.SetColorAndOpacity
// Offset::0x570DE70;
void FImage::SetColorAndOpacity(FLinearColor InColorAndOpacity);


// Function  UMG.Image.SetDesiredSizeOverride
// Offset::0x570DD30;
void FImage::SetDesiredSizeOverride(FVector2D DesiredSize);


// Function  UMG.Image.SetOpacity
// Offset::0x570DDD0;
void FImage::SetOpacity(float InOpacity);


// Function  CommonUI.CommonLazyImage.IsLoading
// Offset::0x2096050;
bool FCommonLazyImage::IsLoading();


// Function  CommonUI.CommonLazyImage.SetBrushFromLazyDisplayAsset
// Offset::0x2096080;
void FCommonLazyImage::SetBrushFromLazyDisplayAsset(TSoftObjectPtr<FObject> LazyObject,bool bMatchTextureSize);


// Function  CommonUI.CommonLazyImage.SetBrushFromLazyMaterial
// Offset::0x20961B0;
void FCommonLazyImage::SetBrushFromLazyMaterial(TSoftObjectPtr<FMaterialInterface> LazyMaterial);


// Function  CommonUI.CommonLazyImage.SetBrushFromLazyTexture
// Offset::0x2096290;
void FCommonLazyImage::SetBrushFromLazyTexture(TSoftObjectPtr<FTexture2D> LazyTexture,bool bMatchSize);


// Function  CommonUI.CommonLazyImage.SetMaterialTextureParamName
// Offset::0x2095FB0;
void FCommonLazyImage::SetMaterialTextureParamName(FName TextureParamName);


// Function  CommonUI.CommonLazyWidget.GetContent
// Offset::0x20968D0;
FUserWidget* FCommonLazyWidget::GetContent();


// Function  CommonUI.CommonLazyWidget.IsLoading
// Offset::0x20968A0;
bool FCommonLazyWidget::IsLoading();


// Function  CommonUI.CommonLazyWidget.SetLazyContent
// Offset::0x2096900;
void FCommonLazyWidget::SetLazyContent(TSoftClassPtr<UObject> SoftWidget);


// Function  UMG.ListViewBase.GetDisplayedEntryWidgets
// Offset::0x5713730;
TArray<FUserWidget*> FListViewBase::GetDisplayedEntryWidgets();


// Function  UMG.ListViewBase.GetScrollOffset
// Offset::0x5713700;
float FListViewBase::GetScrollOffset();


// Function  UMG.ListViewBase.RegenerateAllEntries
// Offset::0x57136E0;
void FListViewBase::RegenerateAllEntries();


// Function  UMG.ListViewBase.RequestRefresh
// Offset::0x57134B0;
void FListViewBase::RequestRefresh();


// Function  UMG.ListViewBase.ScrollToBottom
// Offset::0x57136A0;
void FListViewBase::ScrollToBottom();


// Function  UMG.ListViewBase.ScrollToTop
// Offset::0x57136C0;
void FListViewBase::ScrollToTop();


// Function  UMG.ListViewBase.SetScrollBarVisibility
// Offset::0x57134D0;
void FListViewBase::SetScrollBarVisibility(enum class ESlateVisibility InVisibility);


// Function  UMG.ListViewBase.SetScrollOffset
// Offset::0x5713600;
void FListViewBase::SetScrollOffset(float InScrollOffset);


// Function  UMG.ListViewBase.SetWheelScrollMultiplier
// Offset::0x5713560;
void FListViewBase::SetWheelScrollMultiplier(float NewWheelScrollMultiplier);


// Function  UMG.ListView.AddItem
// Offset::0x5711AA0;
void FListView::AddItem(FObject* Item);


// Function  UMG.ListView.BP_CancelScrollIntoView
// Offset::0x5710F70;
void FListView::BP_CancelScrollIntoView();


// Function  UMG.ListView.BP_ClearSelection
// Offset::0x5711260;
void FListView::BP_ClearSelection();


// Function  UMG.ListView.BP_GetNumItemsSelected
// Offset::0x5711230;
int32_t FListView::BP_GetNumItemsSelected();


// Function  UMG.ListView.BP_GetSelectedItem
// Offset::0x5710E90;
FObject* FListView::BP_GetSelectedItem();


// Function  UMG.ListView.BP_GetSelectedItems
// Offset::0x5711170;
bool FListView::BP_GetSelectedItems(TArray<FObject*> Items);


// Function  UMG.ListView.BP_IsItemVisible
// Offset::0x57110D0;
bool FListView::BP_IsItemVisible(FObject* Item);


// Function  UMG.ListView.BP_NavigateToItem
// Offset::0x5711030;
void FListView::BP_NavigateToItem(FObject* Item);


// Function  UMG.ListView.BP_ScrollItemIntoView
// Offset::0x5710F90;
void FListView::BP_ScrollItemIntoView(FObject* Item);


// Function  UMG.ListView.BP_SetItemSelection
// Offset::0x5711280;
void FListView::BP_SetItemSelection(FObject* Item,bool bSelected);


// Function  UMG.ListView.BP_SetListItems
// Offset::0x5710EC0;
void FListView::BP_SetListItems(TArray<FObject*> InListItems);


// Function  UMG.ListView.BP_SetSelectedItem
// Offset::0x5711370;
void FListView::BP_SetSelectedItem(FObject* Item);


// Function  UMG.ListView.ClearListItems
// Offset::0x5711870;
void FListView::ClearListItems();


// Function  UMG.ListView.GetIndexForItem
// Offset::0x5711890;
int32_t FListView::GetIndexForItem(FObject* Item);


// Function  UMG.ListView.GetItemAt
// Offset::0x5711960;
FObject* FListView::GetItemAt(int32_t Index);


// Function  UMG.ListView.GetListItems
// Offset::0x5711B40;
TArray<FObject*> FListView::GetListItems();


// Function  UMG.ListView.GetNumItems
// Offset::0x5711930;
int32_t FListView::GetNumItems();


// Function  UMG.ListView.IsRefreshPending
// Offset::0x57117B0;
bool FListView::IsRefreshPending();


// Function  UMG.ListView.NavigateToIndex
// Offset::0x57115D0;
void FListView::NavigateToIndex(int32_t Index);


// Function  UMG.ListView.OnListItemEndPlayed
// Offset::0x57114F0;
void FListView::OnListItemEndPlayed(FActor* Item,enum class EEndPlayReason EndPlayReason);


// Function  UMG.ListView.OnListItemOuterEndPlayed
// Offset::0x5711410;
void FListView::OnListItemOuterEndPlayed(FActor* ItemOuter,enum class EEndPlayReason EndPlayReason);


// Function  UMG.ListView.RemoveItem
// Offset::0x5711A00;
void FListView::RemoveItem(FObject* Item);


// Function  UMG.ListView.ScrollIndexIntoView
// Offset::0x5711710;
void FListView::ScrollIndexIntoView(int32_t Index);


// Function  UMG.ListView.SetSelectedIndex
// Offset::0x5711670;
void FListView::SetSelectedIndex(int32_t Index);


// Function  UMG.ListView.SetSelectionMode
// Offset::0x57117E0;
void FListView::SetSelectionMode(enum class ESelectionMode SelectionMode);


// Function  CommonUI.CommonListView.SetEntrySpacing
// Offset::0x2096DF0;
void FCommonListView::SetEntrySpacing(float InEntrySpacing);


// Function  CommonUI.LoadGuardSlot.SetHorizontalAlignment
// Offset::0x20971C0;
void FLoadGuardSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  CommonUI.LoadGuardSlot.SetPadding
// Offset::0x2097250;
void FLoadGuardSlot::SetPadding(FMargin InPadding);


// Function  CommonUI.LoadGuardSlot.SetVerticalAlignment
// Offset::0x2097130;
void FLoadGuardSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  CommonUI.CommonPoolableWidgetInterface.OnAcquireFromPool
// Offset::0x2098800;
void FCommonPoolableWidgetInterface::OnAcquireFromPool();


// Function  CommonUI.CommonPoolableWidgetInterface.OnReleaseToPool
// Offset::0x20987E0;
void FCommonPoolableWidgetInterface::OnReleaseToPool();


// Function  UMG.RichTextBlock.ClearAllDefaultStyleOverrides
// Offset::0x5719E60;
void FRichTextBlock::ClearAllDefaultStyleOverrides();


// Function  UMG.RichTextBlock.GetDecoratorByClass
// Offset::0x5719B80;
FRichTextBlockDecorator* FRichTextBlock::GetDecoratorByClass(FRichTextBlockDecorator* DecoratorClass);


// Function  UMG.RichTextBlock.GetDefaultDynamicMaterial
// Offset::0x5719E30;
FMaterialInstanceDynamic* FRichTextBlock::GetDefaultDynamicMaterial();


// Function  UMG.RichTextBlock.GetText
// Offset::0x5719DA0;
FText FRichTextBlock::GetText();


// Function  UMG.RichTextBlock.RefreshTextLayout
// Offset::0x5719B60;
void FRichTextBlock::RefreshTextLayout();


// Function  UMG.RichTextBlock.SetAutoWrapText
// Offset::0x571A060;
void FRichTextBlock::SetAutoWrapText(bool InAutoTextWrap);


// Function  UMG.RichTextBlock.SetDefaultColorAndOpacity
// Offset::0x571A500;
void FRichTextBlock::SetDefaultColorAndOpacity(FSlateColor InColorAndOpacity);


// Function  UMG.RichTextBlock.SetDefaultFont
// Offset::0x571A290;
void FRichTextBlock::SetDefaultFont(FSlateFontInfo InFontInfo);


// Function  UMG.RichTextBlock.SetDefaultShadowColorAndOpacity
// Offset::0x571A460;
void FRichTextBlock::SetDefaultShadowColorAndOpacity(FLinearColor InShadowColorAndOpacity);


// Function  UMG.RichTextBlock.SetDefaultShadowOffset
// Offset::0x571A3C0;
void FRichTextBlock::SetDefaultShadowOffset(FVector2D InShadowOffset);


// Function  UMG.RichTextBlock.SetDefaultStrikeBrush
// Offset::0x571A1A0;
void FRichTextBlock::SetDefaultStrikeBrush(FSlateBrush InStrikeBrush);


// Function  UMG.RichTextBlock.SetDefaultTextStyle
// Offset::0x5719E80;
void FRichTextBlock::SetDefaultTextStyle(FTextBlockStyle InDefaultTextStyle);


// Function  UMG.RichTextBlock.SetMinDesiredWidth
// Offset::0x571A100;
void FRichTextBlock::SetMinDesiredWidth(float InMinDesiredWidth);


// Function  UMG.RichTextBlock.SetText
// Offset::0x5719CC0;
void FRichTextBlock::SetText(FText InText);


// Function  UMG.RichTextBlock.SetTextOverflowPolicy
// Offset::0x5719F40;
void FRichTextBlock::SetTextOverflowPolicy(enum class ETextOverflowPolicy InOverflowPolicy);


// Function  UMG.RichTextBlock.SetTextStyleSet
// Offset::0x5719C20;
void FRichTextBlock::SetTextStyleSet(FDataTable* NewTextStyleSet);


// Function  UMG.RichTextBlock.SetTextTransformPolicy
// Offset::0x5719FD0;
void FRichTextBlock::SetTextTransformPolicy(enum class ETextTransformPolicy InTransformPolicy);


// Function  CommonUI.CommonRotator.BP_OnOptionSelected
// Offset::0x3D30810;
void FCommonRotator::BP_OnOptionSelected(int32_t Index);


// Function  CommonUI.CommonRotator.BP_OnOptionsPopulated
// Offset::0x3D30810;
void FCommonRotator::BP_OnOptionsPopulated(int32_t Count);


// Function  CommonUI.CommonRotator.GetSelectedIndex
// Offset::0x2098D90;
int32_t FCommonRotator::GetSelectedIndex();


// Function  CommonUI.CommonRotator.GetSelectedText
// Offset::0x2098E60;
FText FCommonRotator::GetSelectedText();


// Function  CommonUI.CommonRotator.PopulateTextLabels
// Offset::0x2098EF0;
void FCommonRotator::PopulateTextLabels(TArray<FText> Labels);


// Function  CommonUI.CommonRotator.SetSelectedItem
// Offset::0x2098DC0;
void FCommonRotator::SetSelectedItem(int32_t InValue);


// Function  CommonUI.CommonRotator.ShiftTextLeft
// Offset::0x2098D70;
void FCommonRotator::ShiftTextLeft();


// Function  CommonUI.CommonRotator.ShiftTextRight
// Offset::0x2098D50;
void FCommonRotator::ShiftTextRight();


// Function  CommonUI.CommonTextStyle.GetColor
// Offset::0x209D760;
void FCommonTextStyle::GetColor(FLinearColor OutColor);


// Function  CommonUI.CommonTextStyle.GetFont
// Offset::0x209D800;
void FCommonTextStyle::GetFont(FSlateFontInfo OutFont);


// Function  CommonUI.CommonTextStyle.GetLineHeightPercentage
// Offset::0x209D680;
float FCommonTextStyle::GetLineHeightPercentage();


// Function  CommonUI.CommonTextStyle.GetMargin
// Offset::0x209D6B0;
void FCommonTextStyle::GetMargin(FMargin OutMargin);


// Function  CommonUI.CommonTextStyle.GetShadowColor
// Offset::0x209D540;
void FCommonTextStyle::GetShadowColor(FLinearColor OutColor);


// Function  CommonUI.CommonTextStyle.GetShadowOffset
// Offset::0x209D5E0;
void FCommonTextStyle::GetShadowOffset(FVector2D OutShadowOffset);


// Function  CommonUI.CommonTextStyle.GetStrikeBrush
// Offset::0x209D450;
void FCommonTextStyle::GetStrikeBrush(FSlateBrush OutStrikeBrush);


// Function  UMG.TileView.GetEntryHeight
// Offset::0x5727A20;
float FTileView::GetEntryHeight();


// Function  UMG.TileView.GetEntryWidth
// Offset::0x57279F0;
float FTileView::GetEntryWidth();


// Function  UMG.TileView.SetEntryHeight
// Offset::0x5727AF0;
void FTileView::SetEntryHeight(float NewHeight);


// Function  UMG.TileView.SetEntryWidth
// Offset::0x5727A50;
void FTileView::SetEntryWidth(float NewWidth);


// Function  UMG.TreeView.CollapseAll
// Offset::0x5728000;
void FTreeView::CollapseAll();


// Function  UMG.TreeView.ExpandAll
// Offset::0x5728020;
void FTreeView::ExpandAll();


// Function  UMG.TreeView.SetItemExpansion
// Offset::0x5728040;
void FTreeView::SetItemExpansion(FObject* Item,bool bExpandItem);


// Function  CommonUI.CommonUILibrary.FindParentWidgetOfType
// Offset::0x209ED60;
FWidget* FCommonUILibrary::FindParentWidgetOfType(FWidget* StartingWidget,FWidget* Type);


// Function  CommonUI.CommonUISubsystemBase.GetInputActionButtonIcon
// Offset::0x209F330;
FSlateBrush FCommonUISubsystemBase::GetInputActionButtonIcon(FDataTableRowHandle InputActionRowHandle,enum class ECommonInputType InputType,FName GamepadName);


// Function  UMG.Overlay.AddChildToOverlay
// Offset::0x5716D70;
FOverlaySlot* FOverlay::AddChildToOverlay(FWidget* Content);


// Function  CommonUI.CommonVisibilitySwitcher.ActivateVisibleSlot
// Offset::0x20A1A80;
void FCommonVisibilitySwitcher::ActivateVisibleSlot();


// Function  CommonUI.CommonVisibilitySwitcher.DeactivateVisibleSlot
// Offset::0x20A1A60;
void FCommonVisibilitySwitcher::DeactivateVisibleSlot();


// Function  CommonUI.CommonVisibilitySwitcher.DecrementActiveWidgetIndex
// Offset::0x20A1AA0;
void FCommonVisibilitySwitcher::DecrementActiveWidgetIndex(bool bAllowWrapping);


// Function  CommonUI.CommonVisibilitySwitcher.GetActiveWidget
// Offset::0x20A1C80;
FWidget* FCommonVisibilitySwitcher::GetActiveWidget();


// Function  CommonUI.CommonVisibilitySwitcher.GetActiveWidgetIndex
// Offset::0x20A1CB0;
int32_t FCommonVisibilitySwitcher::GetActiveWidgetIndex();


// Function  CommonUI.CommonVisibilitySwitcher.IncrementActiveWidgetIndex
// Offset::0x20A1B40;
void FCommonVisibilitySwitcher::IncrementActiveWidgetIndex(bool bAllowWrapping);


// Function  CommonUI.CommonVisibilitySwitcher.SetActiveWidget
// Offset::0x20A1BE0;
void FCommonVisibilitySwitcher::SetActiveWidget(FWidget* Widget);


// Function  CommonUI.CommonVisibilitySwitcher.SetActiveWidgetIndex
// Offset::0x20A1CE0;
void FCommonVisibilitySwitcher::SetActiveWidgetIndex(int32_t Index);


// Function  UMG.OverlaySlot.SetHorizontalAlignment
// Offset::0x5717210;
void FOverlaySlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.OverlaySlot.SetPadding
// Offset::0x570D010;
void FOverlaySlot::SetPadding(FMargin InPadding);


// Function  UMG.OverlaySlot.SetVerticalAlignment
// Offset::0x5717180;
void FOverlaySlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  CommonUI.UCommonVisibilityWidgetBase.GetRegisteredPlatforms
// Offset::0x20A2530;
TArray<FName> FUCommonVisibilityWidgetBase::GetRegisteredPlatforms();


// Function  UMG.SizeBox.ClearHeightOverride
// Offset::0x571F070;
void FSizeBox::ClearHeightOverride();


// Function  UMG.SizeBox.ClearMaxAspectRatio
// Offset::0x571EBF0;
void FSizeBox::ClearMaxAspectRatio();


// Function  UMG.SizeBox.ClearMaxDesiredHeight
// Offset::0x571ED70;
void FSizeBox::ClearMaxDesiredHeight();


// Function  UMG.SizeBox.ClearMaxDesiredWidth
// Offset::0x571EE30;
void FSizeBox::ClearMaxDesiredWidth();


// Function  UMG.SizeBox.ClearMinAspectRatio
// Offset::0x571EC10;
void FSizeBox::ClearMinAspectRatio();


// Function  UMG.SizeBox.ClearMinDesiredHeight
// Offset::0x571EEF0;
void FSizeBox::ClearMinDesiredHeight();


// Function  UMG.SizeBox.ClearMinDesiredWidth
// Offset::0x571EFB0;
void FSizeBox::ClearMinDesiredWidth();


// Function  UMG.SizeBox.ClearWidthOverride
// Offset::0x571F130;
void FSizeBox::ClearWidthOverride();


// Function  UMG.SizeBox.SetHeightOverride
// Offset::0x571F090;
void FSizeBox::SetHeightOverride(float InHeightOverride);


// Function  UMG.SizeBox.SetMaxAspectRatio
// Offset::0x571EC30;
void FSizeBox::SetMaxAspectRatio(float InMaxAspectRatio);


// Function  UMG.SizeBox.SetMaxDesiredHeight
// Offset::0x571ED90;
void FSizeBox::SetMaxDesiredHeight(float InMaxDesiredHeight);


// Function  UMG.SizeBox.SetMaxDesiredWidth
// Offset::0x571EE50;
void FSizeBox::SetMaxDesiredWidth(float InMaxDesiredWidth);


// Function  UMG.SizeBox.SetMinAspectRatio
// Offset::0x571ECD0;
void FSizeBox::SetMinAspectRatio(float InMinAspectRatio);


// Function  UMG.SizeBox.SetMinDesiredHeight
// Offset::0x571EF10;
void FSizeBox::SetMinDesiredHeight(float InMinDesiredHeight);


// Function  UMG.SizeBox.SetMinDesiredWidth
// Offset::0x571EFD0;
void FSizeBox::SetMinDesiredWidth(float InMinDesiredWidth);


// Function  UMG.SizeBox.SetWidthOverride
// Offset::0x571F150;
void FSizeBox::SetWidthOverride(float InWidthOverride);


// Function  CommonUI.CommonWidgetCarousel.BeginAutoScrolling
// Offset::0x20A2AA0;
void FCommonWidgetCarousel::BeginAutoScrolling(float ScrollInterval);


// Function  CommonUI.CommonWidgetCarousel.EndAutoScrolling
// Offset::0x20A2A80;
void FCommonWidgetCarousel::EndAutoScrolling();


// Function  CommonUI.CommonWidgetCarousel.GetActiveWidgetIndex
// Offset::0x20A2D20;
int32_t FCommonWidgetCarousel::GetActiveWidgetIndex();


// Function  CommonUI.CommonWidgetCarousel.GetWidgetAtIndex
// Offset::0x20A2B40;
FWidget* FCommonWidgetCarousel::GetWidgetAtIndex(int32_t Index);


// Function  CommonUI.CommonWidgetCarousel.NextPage
// Offset::0x20A2A60;
void FCommonWidgetCarousel::NextPage();


// Function  CommonUI.CommonWidgetCarousel.PreviousPage
// Offset::0x20A2A40;
void FCommonWidgetCarousel::PreviousPage();


// Function  CommonUI.CommonWidgetCarousel.SetActiveWidget
// Offset::0x20A2BE0;
void FCommonWidgetCarousel::SetActiveWidget(FWidget* Widget);


// Function  CommonUI.CommonWidgetCarousel.SetActiveWidgetIndex
// Offset::0x20A2C80;
void FCommonWidgetCarousel::SetActiveWidgetIndex(int32_t Index);


// Function  CommonUI.CommonWidgetCarouselNavBar.HandleButtonClicked
// Offset::0x20A32E0;
void FCommonWidgetCarouselNavBar::HandleButtonClicked(FCommonButtonBase* AssociatedButton,int32_t ButtonIndex);


// Function  CommonUI.CommonWidgetCarouselNavBar.HandlePageChanged
// Offset::0x20A33C0;
void FCommonWidgetCarouselNavBar::HandlePageChanged(FCommonWidgetCarousel* CommonCarousel,int32_t PageIndex);


// Function  CommonUI.CommonWidgetCarouselNavBar.SetLinkedCarousel
// Offset::0x20A34A0;
void FCommonWidgetCarouselNavBar::SetLinkedCarousel(FCommonWidgetCarousel* CommonCarousel);


// Function  CommonInput.CommonInputBaseControllerData.GetRegisteredGamepads
// Offset::0x20AAD60;
TArray<FName> FCommonInputBaseControllerData::GetRegisteredGamepads();


// Function  CommonInput.CommonInputSubsystem.GetCurrentGamepadName
// Offset::0x20AB800;
FName FCommonInputSubsystem::GetCurrentGamepadName();


// Function  CommonInput.CommonInputSubsystem.GetCurrentInputType
// Offset::0x20AB910;
enum class ECommonInputType FCommonInputSubsystem::GetCurrentInputType();


// Function  CommonInput.CommonInputSubsystem.GetDefaultInputType
// Offset::0x20AB8E0;
enum class ECommonInputType FCommonInputSubsystem::GetDefaultInputType();


// Function  CommonInput.CommonInputSubsystem.IsInputMethodActive
// Offset::0x20AB940;
bool FCommonInputSubsystem::IsInputMethodActive(enum class ECommonInputType InputMethod);


// Function  CommonInput.CommonInputSubsystem.IsUsingPointerInput
// Offset::0x20AB730;
bool FCommonInputSubsystem::IsUsingPointerInput();


// Function  CommonInput.CommonInputSubsystem.SetCurrentInputType
// Offset::0x20AB850;
void FCommonInputSubsystem::SetCurrentInputType(enum class ECommonInputType NewInputType);


// Function  CommonInput.CommonInputSubsystem.SetGamepadInputType
// Offset::0x20AB760;
void FCommonInputSubsystem::SetGamepadInputType(FName InGamepadInputType);


// Function  CommonInput.CommonInputSubsystem.ShouldShowInputKeys
// Offset::0x20AB700;
bool FCommonInputSubsystem::ShouldShowInputKeys();


// Function  CommonInput.CommonInputSubsystem.TryGetGamepadTexture
// Offset::0x20AB3C0;
TSoftObjectPtr<FTexture2D> FCommonInputSubsystem::TryGetGamepadTexture(FName GamepadName);


// Function  CommonInput.CommonInputSubsystem.TryGetInputBrush
// Offset::0x20AB4D0;
bool FCommonInputSubsystem::TryGetInputBrush(FSlateBrush OutBrush,FKey Key,enum class ECommonInputType InputType,FName GamepadName);


// Function  ComponentAssembler.ComponentAssemblerComponentBase.AssembleComponents
// Offset::0x20B01B0;
void FComponentAssemblerComponentBase::AssembleComponents();


// Function  ComponentAssembler.ComponentAssemblerComponentBase.DisassembleComponents
// Offset::0x20B0190;
void FComponentAssemblerComponentBase::DisassembleComponents();


// Function  ComponentAssembler.ComponentAssemblerComponentBase.GetAssemblyPropertyName
// Offset::0x20B0110;
FName FComponentAssemblerComponentBase::GetAssemblyPropertyName();


// Function  ComponentAssembler.ComponentAssemblerComponentBase.GetAssemblyType
// Offset::0x20B0160;
FObject* FComponentAssemblerComponentBase::GetAssemblyType();


// Function  EmbarkAI.BTDecorator_UtilityBlueprintBase.CalculateUtility
// Offset::0x3D30810;
float FBTDecorator_UtilityBlueprintBase::CalculateUtility(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  EmbarkAI.BTDecorator_UtilityBlueprintBase.OnActivation
// Offset::0x3D30810;
void FBTDecorator_UtilityBlueprintBase::OnActivation(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  EmbarkAI.ConstructableAIControllerBase.AddPartPerceptionComponent
// Offset::0x20D6B80;
void FConstructableAIControllerBase::AddPartPerceptionComponent(FSceneComponent* OwningComponent,TArray<FAISenseConfig*> SenseConfigs,int32_t OwningPartID);


// Function  EmbarkAI.ConstructableAIControllerBase.CalcFocusLocation
// Offset::0x20D6810;
FVector FConstructableAIControllerBase::CalcFocusLocation();


// Function  EmbarkAI.ConstructableAIControllerBase.CalcFocusLocation_Internal
// Offset::0x20D6810;
FVector FConstructableAIControllerBase::CalcFocusLocation_Internal();


// Function  EmbarkAI.ConstructableAIControllerBase.CalcFocusRotator
// Offset::0x20D6790;
FRotator FConstructableAIControllerBase::CalcFocusRotator();


// Function  EmbarkAI.ConstructableAIControllerBase.CalcFocusRotator_Internal
// Offset::0x20D6790;
FRotator FConstructableAIControllerBase::CalcFocusRotator_Internal();


// Function  EmbarkAI.ConstructableAIControllerBase.ClearDynamicSubTree
// Offset::0x20D6940;
void FConstructableAIControllerBase::ClearDynamicSubTree(FGameplayTag Tag);


// Function  EmbarkAI.ConstructableAIControllerBase.ClearFocus
// Offset::0x20D6480;
void FConstructableAIControllerBase::ClearFocus(enum class EAIFocusMode FocusMode);


// Function  EmbarkAI.ConstructableAIControllerBase.ClearFocus_Internal
// Offset::0x20D6480;
void FConstructableAIControllerBase::ClearFocus_Internal(enum class EAIFocusMode FocusMode);


// Function  EmbarkAI.ConstructableAIControllerBase.GetCurrentFocus
// Offset::0x20D63C0;
FFocusTarget FConstructableAIControllerBase::GetCurrentFocus();


// Function  EmbarkAI.ConstructableAIControllerBase.GetCurrentFocus_Internal
// Offset::0x20D63C0;
FFocusTarget FConstructableAIControllerBase::GetCurrentFocus_Internal();


// Function  EmbarkAI.ConstructableAIControllerBase.HasDynamicTreeTag
// Offset::0x20D6890;
bool FConstructableAIControllerBase::HasDynamicTreeTag(FGameplayTag Tag);


// Function  EmbarkAI.ConstructableAIControllerBase.HasValidFocus
// Offset::0x20D6440;
bool FConstructableAIControllerBase::HasValidFocus();


// Function  EmbarkAI.ConstructableAIControllerBase.HasValidFocus_Internal
// Offset::0x20D6440;
bool FConstructableAIControllerBase::HasValidFocus_Internal();


// Function  EmbarkAI.ConstructableAIControllerBase.IsRequestValid
// Offset::0x20D62D0;
bool FConstructableAIControllerBase::IsRequestValid(FFocusRequest Request);


// Function  EmbarkAI.ConstructableAIControllerBase.IsRequestValid_Internal
// Offset::0x20D62D0;
bool FConstructableAIControllerBase::IsRequestValid_Internal(FFocusRequest Request);


// Function  EmbarkAI.ConstructableAIControllerBase.RemovePartPerceptionComponent
// Offset::0x20D6AE0;
void FConstructableAIControllerBase::RemovePartPerceptionComponent(int32_t OwningPartID);


// Function  EmbarkAI.ConstructableAIControllerBase.RequestFocus
// Offset::0x20D6630;
void FConstructableAIControllerBase::RequestFocus(FFocusRequest Request);


// Function  EmbarkAI.ConstructableAIControllerBase.RequestFocus_Internal
// Offset::0x20D6520;
void FConstructableAIControllerBase::RequestFocus_Internal(FFocusRequest Request);


// Function  EmbarkAI.ConstructableAIControllerBase.SetDynamicSubTree
// Offset::0x20D69F0;
void FConstructableAIControllerBase::SetDynamicSubTree(FGameplayTag Tag,FBehaviorTree* BehaviorTree);


// Function  EmbarkConstructable.ConstructableServiceComponentBase.EditSimBaseStatePtr
// Offset::0x22C1D60;
FSimConstructableBaseClass* FConstructableServiceComponentBase::EditSimBaseStatePtr();


// Function  EmbarkConstructable.ConstructableServiceComponentBase.GetSimBaseStatePtr
// Offset::0x22C1D40;
FSimConstructableBaseClass* FConstructableServiceComponentBase::GetSimBaseStatePtr();


// Function  EmbarkConstructable.ConstructableServiceComponentBase.OnFullyConstructed
// Offset::0x3D30810;
void FConstructableServiceComponentBase::OnFullyConstructed();


// Function  EmbarkConstructable.ConstructableServiceComponentBase.OnPumpDataToStyle
// Offset::0x22C1D90;
bool FConstructableServiceComponentBase::OnPumpDataToStyle(float DeltaTimeSecs);


// Function  EmbarkConstructable.ConstructableServiceComponentBase.SimClassType
// Offset::0x22C1D10;
FObject* FConstructableServiceComponentBase::SimClassType();


// Function  EmbarkAI.ConstructablePerceptionServiceComponent.OnPartDestroyed
// Offset::0x20D7E20;
void FConstructablePerceptionServiceComponent::OnPartDestroyed(FConstructableHealthServiceComponent* HealthServiceComponent,FPrimitiveComponent* OwnerStyle,FConstructableDamageData LatestData);


// Function  EmbarkAI.AIPerceiver.GetAIPerceivedActors
// Offset::0x20D8320;
void FAIPerceiver::GetAIPerceivedActors(FAIPerceiveResult Result,FActorPerceptionBlueprintInfo PerceptionInfoTemp,TArray<FActor*> PerceivedActors,FActorPerceptionBlueprintInfo EmptyPerceptionInfo,FAIPerceptionComponent* PerceptionComponent);


// Function  EmbarkAI.AITargetComponent.AddTargetAdjustment
// Offset::0x20D9AD0;
void FAITargetComponent::AddTargetAdjustment(FName AdjustmentName,FTemporaryAITargetingModification TargetAdjustment);


// Function  EmbarkAI.AITargetComponent.GetAccuracyFactor
// Offset::0x20D98F0;
float FAITargetComponent::GetAccuracyFactor();


// Function  EmbarkAI.AITargetComponent.GetAimDirectionOffset
// Offset::0x20D9560;
FVector FAITargetComponent::GetAimDirectionOffset(FVector AimDirection,FAITargetingParams TargetingParams,FAIAimParams AimParams,float DeltaSeconds);


// Function  EmbarkAI.AITargetComponent.RemoveTargetAdjustment
// Offset::0x20D9920;
void FAITargetComponent::RemoveTargetAdjustment(FName AdjustmentName);


// Function  EmbarkAI.AITargetComponent.UpdateAITargeting
// Offset::0x20D97B0;
void FAITargetComponent::UpdateAITargeting(FAITargetingParams TargetingParams,float DeltaSeconds);


// Function  EmbarkAI.AIFocusingInterface.ClearFocus
// Offset::0x20DA500;
void FAIFocusingInterface::ClearFocus(enum class EAIFocusMode FocusMode);


// Function  EmbarkAI.AIFocusingInterface.GetCurrentFocus
// Offset::0x20DA3D0;
FFocusTarget FAIFocusingInterface::GetCurrentFocus();


// Function  EmbarkAI.AIFocusingInterface.HasValidFocus
// Offset::0x20DA420;
bool FAIFocusingInterface::HasValidFocus();


// Function  EmbarkAI.AIFocusingInterface.IsRequestValid
// Offset::0x20DA1E0;
bool FAIFocusingInterface::IsRequestValid(FFocusRequest Request);


// Function  EmbarkAI.AIFocusingInterface.RequestFocus
// Offset::0x20DA5C0;
void FAIFocusingInterface::RequestFocus(FFocusRequest FocusRequest);


// Function  EmbarkAI.AIFocusingInterface.SelectFocus
// Offset::0x3D30810;
void FAIFocusingInterface::SelectFocus(float DeltaSeconds,FAIController* AIAgent);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.AlertnessExpiresAt
// Offset::0x20DB9C0;
float FAIAgentStimuliInfoLibrary::AlertnessExpiresAt(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.CombatExpiresAt
// Offset::0x20DBBD0;
float FAIAgentStimuliInfoLibrary::CombatExpiresAt(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetBypass
// Offset::0x20DD250;
FAIStimulusInfo FAIAgentStimuliInfoLibrary::GetBypass(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetDamage
// Offset::0x20DCE50;
FAIStimulusInfo FAIAgentStimuliInfoLibrary::GetDamage(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetHearing
// Offset::0x20DCA50;
FAIStimulusInfo FAIAgentStimuliInfoLibrary::GetHearing(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetHighestAlertness
// Offset::0x20DC350;
float FAIAgentStimuliInfoLibrary::GetHighestAlertness(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetLastKnownTag
// Offset::0x20DBE60;
FGameplayTag FAIAgentStimuliInfoLibrary::GetLastKnownTag(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetLastSensedTime
// Offset::0x20DC0E0;
float FAIAgentStimuliInfoLibrary::GetLastSensedTime(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetNetwork
// Offset::0x20DC870;
FAIStimulusInfo FAIAgentStimuliInfoLibrary::GetNetwork(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetSensedStimulus
// Offset::0x20DB550;
FAIStimulusInfo FAIAgentStimuliInfoLibrary::GetSensedStimulus(FAIAgentStimuliInfo I,FAIStimulus Stimulus);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetSight
// Offset::0x20DD050;
FAIStimulusInfo FAIAgentStimuliInfoLibrary::GetSight(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetStimulusBySense
// Offset::0x20DB230;
FAIStimulusInfo FAIAgentStimuliInfoLibrary::GetStimulusBySense(FAIAgentStimuliInfo I,enum class EStimulusSense Sense);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetStimulusBySenseNonConst
// Offset::0x20DB230;
FAIStimulusInfo FAIAgentStimuliInfoLibrary::GetStimulusBySenseNonConst(FAIAgentStimuliInfo I,enum class EStimulusSense Sense);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetStimulusInfosAscendingPriority
// Offset::0x20DC5C0;
TArray<FAIStimulusInfo> FAIAgentStimuliInfoLibrary::GetStimulusInfosAscendingPriority(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AIAgentStimuliInfoLibrary.GetTouch
// Offset::0x20DCC50;
FAIStimulusInfo FAIAgentStimuliInfoLibrary::GetTouch(FAIAgentStimuliInfo I);


// Function  EmbarkAI.AITargetingInterface.SelectFriendlyTargets
// Offset::0x3D30810;
void FAITargetingInterface::SelectFriendlyTargets(float DeltaSeconds,FAIController* AIAgent,TArray<FAITargetComponent*> OutSelectedFriendlyTargets);


// Function  EmbarkAI.AITargetingInterface.SelectNeutralTargets
// Offset::0x3D30810;
void FAITargetingInterface::SelectNeutralTargets(float DeltaSeconds,FAIController* AIAgent,TArray<FAITargetComponent*> OutSelectedNeutralTargets);


// Function  EmbarkAI.AITargetingInterface.SelectTargets
// Offset::0x3D30810;
void FAITargetingInterface::SelectTargets(float DeltaSeconds,FAIController* AIAgent,TArray<FAITargetComponent*> OutSelectedTargets);


// Function  EmbarkAI.AIKnowledgeBaseNativeFunctionLibrary.UpdateAgentPerception
// Offset::0x20DE5D0;
void FAIKnowledgeBaseNativeFunctionLibrary::UpdateAgentPerception(FObject* WorldContextObject,float DeltaSeconds,TMap<FAIController*,FAgentInfo> AgentInfoMap,TMap<FAITargetComponent*,FTargetInfo> TargetInfoMap,TArray<FAITargetComponent*> PerceptionBypassTargets,FAIPerceiver* Perceiver,TArray<FAIKnowledgebaseNativeEvent> OutEvents);


// Function  EmbarkAI.AIKnowledgeBaseNativeFunctionLibrary.UpdateAgentTargetInfos
// Offset::0x20DEA20;
void FAIKnowledgeBaseNativeFunctionLibrary::UpdateAgentTargetInfos(FObject* WorldContextObject,float DeltaSeconds,TMap<FAIController*,FAgentInfo> AgentInfoMap,TMap<FAITargetComponent*,FTargetInfo> TargetInfoMap,TArray<FAIKnowledgebaseNativeEvent> OutEvents);


// Function  EmbarkAI.AgentInfoFunctionLibrary.AddRecentDamageTaken
// Offset::0x20DF510;
void FAgentInfoFunctionLibrary::AddRecentDamageTaken(FObject* WorldContextObject,FAgentInfo AgentInfo,int32_t PartID,float NormalizedDamage);


// Function  EmbarkAI.AgentInfoFunctionLibrary.CalcFocusLocation
// Offset::0x20E02A0;
FVector FAgentInfoFunctionLibrary::CalcFocusLocation(FAgentInfo AgentInfo,FFocusTarget FocusTarget);


// Function  EmbarkAI.AgentInfoFunctionLibrary.CalcFocusRotator
// Offset::0x20E0050;
FRotator FAgentInfoFunctionLibrary::CalcFocusRotator(FAgentInfo AgentInfo,FFocusTarget FocusTarget);


// Function  EmbarkAI.AgentInfoFunctionLibrary.FindActiveAgentBehaviorOrder
// Offset::0x20DFDB0;
FAgentBehaviorOrder* FAgentInfoFunctionLibrary::FindActiveAgentBehaviorOrder(FAgentInfo AgentInfo);


// Function  EmbarkAI.AgentInfoFunctionLibrary.FindFirstPendingAgentBehaviorOrder
// Offset::0x20DFF90;
FAgentBehaviorOrder* FAgentInfoFunctionLibrary::FindFirstPendingAgentBehaviorOrder(FAgentInfo AgentInfo);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GatherAllActiveOrders
// Offset::0x20DFC90;
void FAgentInfoFunctionLibrary::GatherAllActiveOrders(FAgentInfo AgentInfo,TArray<FAgentOrder*> OrdersOut);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GatherAllActiveOrdersOfType
// Offset::0x20DFB20;
void FAgentInfoFunctionLibrary::GatherAllActiveOrdersOfType(FAgentInfo AgentInfo,TArray<FAgentOrder*> OrdersOut,FObject* Type);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GatherPendingAgentOrders
// Offset::0x20DFE70;
void FAgentInfoFunctionLibrary::GatherPendingAgentOrders(FAgentInfo AgentInfo,TArray<FAgentOrder*> OrdersOut);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetAgentTargetInfo
// Offset::0x20E0CC0;
FAgentTargetInfo FAgentInfoFunctionLibrary::GetAgentTargetInfo(FAgentInfo Info,FAITargetComponent* TargetComponent);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetAgentTargetInfoSafe
// Offset::0x20E09E0;
bool FAgentInfoFunctionLibrary::GetAgentTargetInfoSafe(FAgentTargetInfo OutAgentTargetInfo,FAgentInfo Info,FAITargetComponent* TargetComponent);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetAIAgentsWithinRange
// Offset::0x20E0E90;
bool FAgentInfoFunctionLibrary::GetAIAgentsWithinRange(FObject* WorldContextObject,FVector Origin,float MaxRange,TArray<FAIController*> OutAgents);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetAllNeutralTargets
// Offset::0x20E1560;
TArray<FAITargetComponent*> FAgentInfoFunctionLibrary::GetAllNeutralTargets(FAgentInfo Info);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetAllSortedFriendlyTargets
// Offset::0x20E1430;
TArray<FAITargetComponent*> FAgentInfoFunctionLibrary::GetAllSortedFriendlyTargets(FAgentInfo Info);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetAllSortedRelevantTargets
// Offset::0x20E1890;
TArray<FAITargetComponent*> FAgentInfoFunctionLibrary::GetAllSortedRelevantTargets(FAgentInfo Info);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetKnownTargetsBySense
// Offset::0x20E0610;
TArray<FAITargetComponent*> FAgentInfoFunctionLibrary::GetKnownTargetsBySense(FObject* WorldContextObject,FAgentInfo Info,enum class EStimulusSense Sense,bool bOnlyCurrentlyPerceived);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetMostRelevantFriendlyTarget
// Offset::0x20E1790;
FAITargetComponent* FAgentInfoFunctionLibrary::GetMostRelevantFriendlyTarget(FAgentInfo Info);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetMostRelevantNeutralTarget
// Offset::0x20E1690;
FAITargetComponent* FAgentInfoFunctionLibrary::GetMostRelevantNeutralTarget(FAgentInfo Info);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetMostRelevantTarget
// Offset::0x20E19C0;
FAITargetComponent* FAgentInfoFunctionLibrary::GetMostRelevantTarget(FAgentInfo Info);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetRecentDamageTaken
// Offset::0x20DF360;
float FAgentInfoFunctionLibrary::GetRecentDamageTaken(FObject* WorldContextObject,FAgentInfo AgentInfo,int32_t Seconds,int32_t PartID);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetSelectedTargetsWithinRange
// Offset::0x20E11A0;
bool FAgentInfoFunctionLibrary::GetSelectedTargetsWithinRange(FAgentInfo Info,float MaxRange,TArray<FAITargetComponent*> OutTargets);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetSmartObjectQuerySettings
// Offset::0x20DFA10;
FAISmartObjectQuerySettings FAgentInfoFunctionLibrary::GetSmartObjectQuerySettings(FAgentInfo AgentInfo);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetSmartObjectUserQuery
// Offset::0x20DF6B0;
FGameplayTagQuery FAgentInfoFunctionLibrary::GetSmartObjectUserQuery(FAISmartObjectQuerySettings Settings,FAgentInfo AgentInfo);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetSmartObjectUserQueryFromAgentInfoSettings
// Offset::0x20DF860;
FGameplayTagQuery FAgentInfoFunctionLibrary::GetSmartObjectUserQueryFromAgentInfoSettings(FAgentInfo AgentInfo);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetTimeSince
// Offset::0x20E0520;
float FAgentInfoFunctionLibrary::GetTimeSince(FObject* WorldContextObject,float LastTime);


// Function  EmbarkAI.AgentInfoFunctionLibrary.GetUnsensedFriendlyTargetsWithinRange
// Offset::0x20E1030;
bool FAgentInfoFunctionLibrary::GetUnsensedFriendlyTargetsWithinRange(FAgentInfo Info,float MaxRange,TArray<FAITargetComponent*> OutTargets);


// Function  EmbarkAI.AgentInfoFunctionLibrary.HasGrantedBehavior
// Offset::0x20E1310;
bool FAgentInfoFunctionLibrary::HasGrantedBehavior(FAgentInfo Info,FGameplayTag Tag);


// Function  EmbarkAI.AgentInfoFunctionLibrary.HasTarget
// Offset::0x20E1AC0;
bool FAgentInfoFunctionLibrary::HasTarget(FAgentInfo Info);


// Function  EmbarkAI.AgentInfoFunctionLibrary.IsLastTimeWithin
// Offset::0x20E03F0;
bool FAgentInfoFunctionLibrary::IsLastTimeWithin(FObject* WorldContextObject,float LastTime,float TimeWithin);


// Function  EmbarkAI.AgentInfoFunctionLibrary.IsTargetPerceivedBySense
// Offset::0x20E07F0;
bool FAgentInfoFunctionLibrary::IsTargetPerceivedBySense(FObject* WorldContextObject,FAgentInfo Info,FAITargetComponent* TargetComponent,enum class EStimulusSense Sense,float TimeSincePerceived);


// Function  EmbarkAI.AgentInfoFunctionLibrary.UpdateTargetPerception
// Offset::0x20DF080;
void FAgentInfoFunctionLibrary::UpdateTargetPerception(FObject* WorldContextObject,FAgentInfo AgentInfo,FAITargetComponent* TargetComponent,FAIStimulus Stimulus);


// Function  EmbarkAI.AgentOrderContextFunctionLibrary.MakeContext
// Offset::0x20E6BD0;
FAgentOrderContextBase* FAgentOrderContextFunctionLibrary::MakeContext(FAIController* AIController,FObject* ObjectData);


// Function  EmbarkAI.AgentOrderContextFunctionLibrary.MakeContextAndSetStructData
// Offset::0x20E6CB0;
FAgentOrderContextBase* FAgentOrderContextFunctionLibrary::MakeContextAndSetStructData(FAIController* AIController,FEmbarkGenericStruct StructData,FObject* ObjectData);


// Function  EmbarkAI.AgentOrderContextBase.GetContextLocation
// Offset::0x20E7200;
FVector FAgentOrderContextBase::GetContextLocation();


// Function  EmbarkAI.AgentOrderContextBase.IsValid
// Offset::0x1A7E8E0;
bool FAgentOrderContextBase::IsValid();


// Function  EmbarkAI.AgentOrderContextHelperFunctionLibrary.CreateAgentOrderActorContext
// Offset::0x20E7930;
FAgentOrderActorContext* FAgentOrderContextHelperFunctionLibrary::CreateAgentOrderActorContext(FAIController* AIAgent,FActor* Actor);


// Function  EmbarkAI.AgentOrderContextHelperFunctionLibrary.CreateAgentOrderLocationContext
// Offset::0x20E7A10;
FAgentOrderLocationContext* FAgentOrderContextHelperFunctionLibrary::CreateAgentOrderLocationContext(FAIController* AIAgent,FVector Location);


// Function  EmbarkAI.AgentOrderContextHelperFunctionLibrary.CreateAgentOrderObjectContext
// Offset::0x20E7850;
FAgentOrderObjectContext* FAgentOrderContextHelperFunctionLibrary::CreateAgentOrderObjectContext(FAIController* AIAgent,FObject* Object);


// Function  EmbarkAI.AgentOrder.GetOrderDurationLeft
// Offset::0x20E7F50;
float FAgentOrder::GetOrderDurationLeft();


// Function  EmbarkAI.AgentOrder.GetOrderHandle
// Offset::0x20E7E80;
int32_t FAgentOrder::GetOrderHandle();


// Function  EmbarkAI.AgentOrder.GetOrderTimeoutLeft
// Offset::0x20E7F80;
float FAgentOrder::GetOrderTimeoutLeft();


// Function  EmbarkAI.AgentOrder.HasOrderDurationEnded
// Offset::0x20E7FB0;
bool FAgentOrder::HasOrderDurationEnded();


// Function  EmbarkAI.AgentOrder.HasOrderTimedout
// Offset::0x20E7FE0;
bool FAgentOrder::HasOrderTimedout();


// Function  EmbarkAI.AgentOrder.IsValid
// Offset::0x20E8010;
bool FAgentOrder::IsValid();


// Function  EmbarkAI.AgentOrder.IsValid_Internal
// Offset::0x20E8010;
bool FAgentOrder::IsValid_Internal();


// Function  EmbarkAI.AgentOrder.OnOrderIssued
// Offset::0x1A7E910;
void FAgentOrder::OnOrderIssued();


// Function  EmbarkAI.AgentOrder.OnOrderIssued_Internal
// Offset::0x20E8050;
void FAgentOrder::OnOrderIssued_Internal();


// Function  EmbarkAI.AgentOrder.OnOrderIssuedBP
// Offset::0x3D30810;
void FAgentOrder::OnOrderIssuedBP(FAgentOrderContextBase* InCurrentContext);


// Function  EmbarkAI.AgentOrder.OnOrderStarted
// Offset::0x20E8030;
void FAgentOrder::OnOrderStarted();


// Function  EmbarkAI.AgentOrder.OnOrderStartedBP
// Offset::0x3D30810;
void FAgentOrder::OnOrderStartedBP(FAgentOrderContextBase* InCurrentContext);


// Function  EmbarkAI.AgentOrder.SetOrderHandle
// Offset::0x20E7EB0;
void FAgentOrder::SetOrderHandle(int32_t ID);


// Function  Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
// Offset::0x63333B0;
FVector FAvoidanceManager::GetAvoidanceVelocityForComponent(FMovementComponent* MovementComp);


// Function  Engine.AvoidanceManager.GetNewAvoidanceUID
// Offset::0x6333550;
int32_t FAvoidanceManager::GetNewAvoidanceUID();


// Function  Engine.AvoidanceManager.GetObjectCount
// Offset::0x6333580;
int32_t FAvoidanceManager::GetObjectCount();


// Function  Engine.AvoidanceManager.RegisterMovementComponent
// Offset::0x6333460;
bool FAvoidanceManager::RegisterMovementComponent(FMovementComponent* MovementComp,float AvoidanceWeight);


// Function  EmbarkAI.EmbarkAIAvoidanceManager.GetAvoidanceManager
// Offset::0x20E9370;
FEmbarkAIAvoidanceManager* FEmbarkAIAvoidanceManager::GetAvoidanceManager(FWorld* World);


// Function  EmbarkAI.EmbarkAIAvoidanceManager.RegisterAvoidanceObject
// Offset::0x20E90F0;
int32_t FEmbarkAIAvoidanceManager::RegisterAvoidanceObject(FVector Location,float Radius,float TimeToLive,float Weight,int32_t GroupMask,int32_t GroupsToAvoid,int32_t GroupsToIgnore);


// Function  EmbarkAI.EmbarkAIAvoidanceManagerMixinLibrary.RemoveAvoidanceObject
// Offset::0x20E9750;
void FEmbarkAIAvoidanceManagerMixinLibrary::RemoveAvoidanceObject(FEmbarkAIAvoidanceManager* Manager,int32_t AvoidanceUID);


// Function  AIModule.BrainComponent.IsPaused
// Offset::0x6980EB0;
bool FBrainComponent::IsPaused();


// Function  AIModule.BrainComponent.IsRunning
// Offset::0x6980EE0;
bool FBrainComponent::IsRunning();


// Function  AIModule.BrainComponent.RestartLogic
// Offset::0x6980FC0;
void FBrainComponent::RestartLogic();


// Function  AIModule.BrainComponent.StartLogic
// Offset::0x25DD550;
void FBrainComponent::StartLogic();


// Function  AIModule.BrainComponent.StopLogic
// Offset::0x6980F10;
void FBrainComponent::StopLogic(FString Reason);


// Function  AIModule.BehaviorTreeComponent.AddCooldownTagDuration
// Offset::0x697D1D0;
void FBehaviorTreeComponent::AddCooldownTagDuration(FGameplayTag CooldownTag,float CooldownDuration,bool bAddToExistingDuration);


// Function  AIModule.BehaviorTreeComponent.GetTagCooldownEndTime
// Offset::0x697D300;
float FBehaviorTreeComponent::GetTagCooldownEndTime(FGameplayTag CooldownTag);


// Function  AIModule.BehaviorTreeComponent.SetDynamicSubTree
// Offset::0x697D0E0;
void FBehaviorTreeComponent::SetDynamicSubTree(FGameplayTag InjectTag,FBehaviorTree* BehaviorAsset);


// Function  EmbarkAI.EmbarkEnvQueryResultWrapper.Clear
// Offset::0x20EBB10;
void FEmbarkEnvQueryResultWrapper::Clear();


// Function  EmbarkAI.EmbarkEnvQueryResultWrapper.GetQueryResult
// Offset::0x20EB770;
FEnvQueryResult FEmbarkEnvQueryResultWrapper::GetQueryResult();


// Function  EmbarkAI.EmbarkEnvQueryResultWrapper.HasResult
// Offset::0x20EBAE0;
bool FEmbarkEnvQueryResultWrapper::HasResult();


// Function  EmbarkAI.EmbarkEnvQueryResultWrapper.IsAborted
// Offset::0x20EBA40;
bool FEmbarkEnvQueryResultWrapper::IsAborted();


// Function  EmbarkAI.EmbarkEnvQueryResultWrapper.IsFinished
// Offset::0x20EBA90;
bool FEmbarkEnvQueryResultWrapper::IsFinished();


// Function  EmbarkAI.EmbarkEnvQueryResultWrapper.IsSuccessful
// Offset::0x20EB9F0;
bool FEmbarkEnvQueryResultWrapper::IsSuccessful();


// Function  EmbarkAI.EnvQueryResultMixinLibrary.GetItemsAsLocations
// Offset::0x20EC0D0;
void FEnvQueryResultMixinLibrary::GetItemsAsLocations(FEnvQueryResult Result,TArray<FVector> OutLocations);


// Function  EmbarkAI.EnvQueryManagerMixinLibrary.RunQuery
// Offset::0x20ED0B0;
int32_t FEnvQueryManagerMixinLibrary::RunQuery(FEnvQueryManager* Manager,FEnvQuery* Query,FObject* RequestOwner,enum class EEnvQueryRunMode RunMode,FEmbarkEnvQueryResultWrapper* NotifyWrapper);


// Function  EmbarkAI.EnvQueryManagerMixinLibrary.RunQueryWithParams
// Offset::0x20EC540;
int32_t FEnvQueryManagerMixinLibrary::RunQueryWithParams(FEnvQueryManager* Manager,FEnvQuery* Query,FObject* RequestOwner,enum class EEnvQueryRunMode RunMode,FEmbarkEnvQueryParams Params,FEmbarkEnvQueryResultWrapper* NotifyWrapper);


// Function  EmbarkAI.EmbarkAIFlowSubsystem.Blocked
// Offset::0x20EE260;
bool FEmbarkAIFlowSubsystem::Blocked(int32_t CellX,int32_t CellY);


// Function  EmbarkAI.EmbarkAIFlowSubsystem.CalculateGroupMovement
// Offset::0x20EDDE0;
FVector FEmbarkAIFlowSubsystem::CalculateGroupMovement(FVector Centroid,FVector TargetLocation,FVector HomeLocation,double Radius);


// Function  EmbarkAI.EmbarkAIFlowSubsystem.CellValue
// Offset::0x20ED930;
double FEmbarkAIFlowSubsystem::CellValue(FVector WorldLocation);


// Function  EmbarkAI.EmbarkAIFlowSubsystem.ClosestUnblockedLocation
// Offset::0x20EDD20;
FVector FEmbarkAIFlowSubsystem::ClosestUnblockedLocation(FVector WorldLocation);


// Function  EmbarkAI.EmbarkAIFlowSubsystem.FindHeight
// Offset::0x20EDFF0;
double FEmbarkAIFlowSubsystem::FindHeight(FVector Location);


// Function  EmbarkAI.EmbarkAIFlowSubsystem.GetAgentLocations
// Offset::0x3D30810;
TArray<FVector> FEmbarkAIFlowSubsystem::GetAgentLocations();


// Function  EmbarkAI.EmbarkAIFlowSubsystem.GetTime
// Offset::0x20EE140;
int32_t FEmbarkAIFlowSubsystem::GetTime(int32_t CellX,int32_t CellY);


// Function  EmbarkAI.EmbarkAIFlowSubsystem.GradientDescent
// Offset::0x20ED9E0;
FVector FEmbarkAIFlowSubsystem::GradientDescent(FVector WorldLocation,int32_t Steps);


// Function  EmbarkAI.EmbarkAIFlowSubsystem.LineValue
// Offset::0x20EDAF0;
double FEmbarkAIFlowSubsystem::LineValue(FVector Start,FVector Direction,double SearchDistance,int32_t SkipBlockedMargin,FVector OutCollision);


// Function  EmbarkAI.EmbarkAIFlowSubsystem.OnTick
// Offset::0x3D30810;
void FEmbarkAIFlowSubsystem::OnTick(float DeltaTime);


// Function  EmbarkAI.EmbarkAIFlowSubsystem.OnTryInitialize
// Offset::0x3D30810;
bool FEmbarkAIFlowSubsystem::OnTryInitialize();


// Function  EmbarkAI.EmbarkAIFlowSubsystem.UpdateGroups
// Offset::0x20ED7E0;
void FEmbarkAIFlowSubsystem::UpdateGroups(TArray<FPawn*> Agents,double DeltaUpdateTime);


// Function  AIModule.PathFollowingComponent.GetPathActionType
// Offset::0x6998170;
enum class EPathFollowingAction FPathFollowingComponent::GetPathActionType();


// Function  AIModule.PathFollowingComponent.GetPathDestination
// Offset::0x6998110;
FVector FPathFollowingComponent::GetPathDestination();


// Function  AIModule.PathFollowingComponent.OnActorBump
// Offset::0x69981A0;
void FPathFollowingComponent::OnActorBump(FActor* SelfActor,FActor* OtherActor,FVector NormalImpulse,FHitResult Hit);


// Function  AIModule.PathFollowingComponent.OnNavDataRegistered
// Offset::0x6998070;
void FPathFollowingComponent::OnNavDataRegistered(FNavigationData* NavData);


// Function  EmbarkAI.EmbarkAIGroundPathFollowingComponent.SetIgnoreZReachThreshold
// Offset::0x20F1420;
void FEmbarkAIGroundPathFollowingComponent::SetIgnoreZReachThreshold(bool bIgnore);


// Function  EmbarkAI.EmbarkAIGroundPathFollowingComponent.SetOverrideHasReachedCurrentTargetFunction
// Offset::0x20F1380;
void FEmbarkAIGroundPathFollowingComponent::SetOverrideHasReachedCurrentTargetFunction(bool bOverride);


// Function  EmbarkAI.GroupRoleInfoMixinLibrary.IsValid
// Offset::0x20F1D70;
bool FGroupRoleInfoMixinLibrary::IsValid(FGroupRoleInfo Info);


// Function  EmbarkAI.AgentGroupInfoMixinLibrary.SearchForHomeLocation
// Offset::0x20F2150;
FVector FAgentGroupInfoMixinLibrary::SearchForHomeLocation(FAgentGroupInfo Info,FVector SearchPoint);


// Function  EmbarkAI.AIAlertnessFunctionLibrary.ToFName
// Offset::0x20F25D0;
FName FAIAlertnessFunctionLibrary::ToFName(enum class EAIAlertness inAIAlertness);


// Function  EmbarkAI.AIAlertnessSourceFunctionLibrary.ToFName
// Offset::0x20F28F0;
FName FAIAlertnessSourceFunctionLibrary::ToFName(enum class EAIAlertnessSource inAIAlertnessSource);


// Function  EmbarkAI.EmbarkAIKnowledgeBaseInterfaceFunctionLibrary.GetAIKnowledgeBaseInterface
// Offset::0x20F2EA0;
FAIKnowledgeBaseInterface* FEmbarkAIKnowledgeBaseInterfaceFunctionLibrary::GetAIKnowledgeBaseInterface(FObject* WorldContextObject);


// Function  EmbarkAI.EmbarkAIKnowledgeBaseInterfaceFunctionLibrary.GetAIKnowledgeBaseInterfaceFromGameMode
// Offset::0x20F2F40;
FAIKnowledgeBaseInterface* FEmbarkAIKnowledgeBaseInterfaceFunctionLibrary::GetAIKnowledgeBaseInterfaceFromGameMode(FGameModeBase* GameMode);


// Function  EmbarkAI.AIKnowledgeBaseInterface.AgentInfoExist
// Offset::0x20F4250;
bool FAIKnowledgeBaseInterface::AgentInfoExist(FAIController* AIController);


// Function  EmbarkAI.AIKnowledgeBaseInterface.CanSeeTarget
// Offset::0x20F3390;
bool FAIKnowledgeBaseInterface::CanSeeTarget(FObject* WorldContextObject,FAgentInfo Info,FAITargetComponent* TargetComponent,float TimeSinceSeen);


// Function  EmbarkAI.AIKnowledgeBaseInterface.GetAgentGroupInfo
// Offset::0x20F3550;
FAgentGroupInfo FAIKnowledgeBaseInterface::GetAgentGroupInfo(int32_t GroupId);


// Function  EmbarkAI.AIKnowledgeBaseInterface.GetAgentInfo
// Offset::0x20F41A0;
FAgentInfo FAIKnowledgeBaseInterface::GetAgentInfo(FAIController* AIController);


// Function  EmbarkAI.AIKnowledgeBaseInterface.GetAgentInfoNonConst
// Offset::0x20F3BA0;
FAgentInfo FAIKnowledgeBaseInterface::GetAgentInfoNonConst(FAIController* AIController);


// Function  EmbarkAI.AIKnowledgeBaseInterface.GetAgentInfoNonRef
// Offset::0x20F3C50;
FAgentInfo FAIKnowledgeBaseInterface::GetAgentInfoNonRef(FAIController* AIController);


// Function  EmbarkAI.AIKnowledgeBaseInterface.GetAgentInfos
// Offset::0x20F3B70;
TMap<FAIController*,FAgentInfo> FAIKnowledgeBaseInterface::GetAgentInfos();


// Function  EmbarkAI.AIKnowledgeBaseInterface.GetTargetInfo
// Offset::0x20F3970;
FTargetInfo FAIKnowledgeBaseInterface::GetTargetInfo(FAITargetComponent* Comp);


// Function  EmbarkAI.AIKnowledgeBaseInterface.GetTargetInfos
// Offset::0x20F3940;
TMap<FAITargetComponent*,FTargetInfo> FAIKnowledgeBaseInterface::GetTargetInfos();


// Function  EmbarkAI.AIKnowledgeBaseInterface.HasAgentGroupInfo
// Offset::0x20F38A0;
bool FAIKnowledgeBaseInterface::HasAgentGroupInfo(int32_t GroupId);


// Function  EmbarkAI.AIKnowledgeBaseInterface.OnDamageTaken
// Offset::0x20F3A20;
void FAIKnowledgeBaseInterface::OnDamageTaken(FConstructableHealthServiceComponent* HealthService,FConstructableDamageData DamageData);


// Function  EmbarkAI.AIKnowledgeBaseInterface.RegisterAIAgent
// Offset::0x3D30810;
void FAIKnowledgeBaseInterface::RegisterAIAgent(FAIController* Agent,FDataAsset* Template);


// Function  EmbarkAI.AIKnowledgeBaseInterface.RegisterAITarget
// Offset::0x3D30810;
void FAIKnowledgeBaseInterface::RegisterAITarget(FActorComponent* Target);


// Function  EmbarkAI.AIKnowledgeBaseInterface.UnregisterAIAgent
// Offset::0x3D30810;
void FAIKnowledgeBaseInterface::UnregisterAIAgent(FAIController* Agent);


// Function  EmbarkAI.AIKnowledgeBaseInterface.UnregisterAITarget
// Offset::0x3D30810;
void FAIKnowledgeBaseInterface::UnregisterAITarget(FActorComponent* Target);


// Function  EmbarkAI.EmbarkAINavigationComponentBase.FindPath
// Offset::0x20F51E0;
enum class EPathFollowingRequestResult FEmbarkAINavigationComponentBase::FindPath(FEmbarkAIPathRequest PathRequest,TArray<FVector> OutOptimizedPath);


// Function  EmbarkAI.EmbarkAINavigationComponentBase.GetImmediateMoveDestination
// Offset::0x3D30810;
FVector FEmbarkAINavigationComponentBase::GetImmediateMoveDestination();


// Function  EmbarkAI.EmbarkAINavigationComponentBase.GetMoveDestination
// Offset::0x3D30810;
FVector FEmbarkAINavigationComponentBase::GetMoveDestination();


// Function  EmbarkAI.EmbarkAINavigationComponentBase.StopMovement
// Offset::0x3D30810;
void FEmbarkAINavigationComponentBase::StopMovement();


// Function  AIModule.AIPerceptionSystem.GetSenseClassForStimulus
// Offset::0x6976620;
FAISense* FAIPerceptionSystem::GetSenseClassForStimulus(FObject* WorldContextObject,FAIStimulus Stimulus);


// Function  AIModule.AIPerceptionSystem.OnPerceptionStimuliSourceEndPlay
// Offset::0x6976540;
void FAIPerceptionSystem::OnPerceptionStimuliSourceEndPlay(FActor* Actor,enum class EEndPlayReason EndPlayReason);


// Function  AIModule.AIPerceptionSystem.RegisterPerceptionStimuliSource
// Offset::0x6976840;
bool FAIPerceptionSystem::RegisterPerceptionStimuliSource(FObject* WorldContextObject,FAISense* Sense,FActor* Target);


// Function  AIModule.AIPerceptionSystem.ReportEvent
// Offset::0x6976A50;
void FAIPerceptionSystem::ReportEvent(FAISenseEvent* PerceptionEvent);


// Function  AIModule.AIPerceptionSystem.ReportPerceptionEvent
// Offset::0x6976970;
void FAIPerceptionSystem::ReportPerceptionEvent(FObject* WorldContextObject,FAISenseEvent* PerceptionEvent);


// Function  EmbarkAI.EmbarkAICombatPositionQueryBase.GetQueryResult
// Offset::0x20F5930;
enum class EAICombatPositionQueryState FEmbarkAICombatPositionQueryBase::GetQueryResult(FCombatPositionQueryResults OutPositionInfo);


// Function  EmbarkAI.EmbarkAICombatPositionQueryBase.GetQueryResult_Internal
// Offset::0x20F5930;
enum class EAICombatPositionQueryState FEmbarkAICombatPositionQueryBase::GetQueryResult_Internal(FCombatPositionQueryResults OutPositionInfo);


// Function  EmbarkAI.EmbarkAICombatPositionQueryBase.ReadyToRunContiniousQuery
// Offset::0x20F5C00;
bool FEmbarkAICombatPositionQueryBase::ReadyToRunContiniousQuery();


// Function  EmbarkAI.EmbarkAICombatPositionQueryBase.RunQuery
// Offset::0x20F5B20;
enum class EAICombatPositionQueryState FEmbarkAICombatPositionQueryBase::RunQuery(FCombatPositionQueryInfo QueryInfo);


// Function  EmbarkAI.EmbarkAICombatPositionQueryBase.RunQuery_Internal
// Offset::0x20F5A40;
enum class EAICombatPositionQueryState FEmbarkAICombatPositionQueryBase::RunQuery_Internal(FCombatPositionQueryInfo QueryInfo);


// Function  EmbarkAI.EmbarkAICombatPositionQueryBase.UpdateQuery
// Offset::0x20F5A20;
void FEmbarkAICombatPositionQueryBase::UpdateQuery();


// Function  EmbarkAI.EmbarkAICombatPositionQueryBase.UpdateQuery_Internal
// Offset::0x20F5A20;
void FEmbarkAICombatPositionQueryBase::UpdateQuery_Internal();


// Function  EmbarkAI.EmbarkAISense_Hearing.ReportSoundEvent
// Offset::0x20F8A00;
void FEmbarkAISense_Hearing::ReportSoundEvent(FObject* WorldContextObject,FVector NoiseLocation,float Range,FActor* Instigator,FName Tag);


// Function  EmbarkAI.EmbarkAISense_Network.ReportNetworkEvent
// Offset::0x20F91D0;
void FEmbarkAISense_Network::ReportNetworkEvent(FObject* WorldContextObject,FActor* Instigator,FActor* TargetActor,FVector LastSeenLocation,float MaxRange,FName Tag);


// Function  EmbarkAI.EmbarkAISense_Touch.ReportTouchEvent
// Offset::0x20F9BA0;
void FEmbarkAISense_Touch::ReportTouchEvent(FObject* WorldContextObject,FActor* TouchReceiver,FActor* OtherActor,FVector EventLocation);


// Function  EmbarkAI.EmbarkEnvQueryTest_BlueprintBase.ReceiveGetDescriptionDetails
// Offset::0x3D30810;
void FEmbarkEnvQueryTest_BlueprintBase::ReceiveGetDescriptionDetails(FText Out);


// Function  EmbarkAI.EmbarkEnvQueryTest_BlueprintBase.ReceiveGetDescriptionTitle
// Offset::0x3D30810;
void FEmbarkEnvQueryTest_BlueprintBase::ReceiveGetDescriptionTitle(FText Out);


// Function  EmbarkAI.EmbarkEnvQueryTest_BlueprintBase.ReceiveRunTest_Item
// Offset::0x3D30810;
void FEmbarkEnvQueryTest_BlueprintBase::ReceiveRunTest_Item(FQueryInstanceItemInput ItemInput,FQueryInstanceItemOutput ItemOutput);


// Function  EmbarkAI.EmbarkSmartObjectComponent.ReceiveCanBeClaimed
// Offset::0x3D30810;
bool FEmbarkSmartObjectComponent::ReceiveCanBeClaimed(FActor* Querier,int32_t Slot);


// Function  EmbarkAI.EmbarkSmartObjectComponent.ReceiveClaim
// Offset::0x3D30810;
void FEmbarkSmartObjectComponent::ReceiveClaim(FActor* Querier,int32_t Slot);


// Function  EmbarkAI.EmbarkSmartObjectComponent.ReceiveRelease
// Offset::0x3D30810;
void FEmbarkSmartObjectComponent::ReceiveRelease(FActor* Querier,int32_t Slot);


// Function  EmbarkAI.EmbarkSmartObjectComponent.ReceiveSelectSlot
// Offset::0x3D30810;
int32_t FEmbarkSmartObjectComponent::ReceiveSelectSlot(FActor* Querier,TArray<int32_t> AvailableSlots);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.Claim
// Offset::0x20FC390;
bool FEmbarkSmartObjectSubsystem::Claim(FEmbarkSmartObjectClaimHandle Handle);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.DebugDraw
// Offset::0x20FBE40;
void FEmbarkSmartObjectSubsystem::DebugDraw();


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.FindAllSmartObjects
// Offset::0x20FC550;
bool FEmbarkSmartObjectSubsystem::FindAllSmartObjects(FEmbarkSmartObjectRequest Request,TArray<FEmbarkSmartObjectClaimHandle> OutResults);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.FindClosestSmartObject
// Offset::0x20FC6F0;
FEmbarkSmartObjectClaimHandle FEmbarkSmartObjectSubsystem::FindClosestSmartObject(FEmbarkSmartObjectRequest Request);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.FindSmartObject
// Offset::0x20FCA00;
FEmbarkSmartObjectClaimHandle FEmbarkSmartObjectSubsystem::FindSmartObject(FEmbarkSmartObjectRequest Request);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.FindSmartObjectWithPredicate
// Offset::0x20FC840;
FEmbarkSmartObjectClaimHandle FEmbarkSmartObjectSubsystem::FindSmartObjectWithPredicate(FEmbarkSmartObjectRequest Request,FDelegate Predicate);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.GetBehaviorOrder
// Offset::0x20FBFD0;
FAgentOrder* FEmbarkSmartObjectSubsystem::GetBehaviorOrder(FEmbarkSmartObjectClaimHandle Handle);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.GetClaim
// Offset::0x20FC230;
FEmbarkSmartObjectClaimHandle FEmbarkSmartObjectSubsystem::GetClaim(FActor* Owner);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.GetCurrent
// Offset::0x20FCC10;
FEmbarkSmartObjectSubsystem* FEmbarkSmartObjectSubsystem::GetCurrent(FWorld* World);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.GetSlotIndex
// Offset::0x20FBE60;
int32_t FEmbarkSmartObjectSubsystem::GetSlotIndex(FEmbarkSmartObjectClaimHandle Handle);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.GetSlotLocation
// Offset::0x20FC160;
FVector FEmbarkSmartObjectSubsystem::GetSlotLocation(FEmbarkSmartObjectClaimHandle Handle);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.GetSlotRotation
// Offset::0x20FC090;
FQuat FEmbarkSmartObjectSubsystem::GetSlotRotation(FEmbarkSmartObjectClaimHandle Handle);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.GetSmartObject
// Offset::0x20FBF10;
FEmbarkSmartObjectComponent* FEmbarkSmartObjectSubsystem::GetSmartObject(FEmbarkSmartObjectClaimHandle Handle);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.GetSmartObjectRawPtrsInRange
// Offset::0x20FC440;
bool FEmbarkSmartObjectSubsystem::GetSmartObjectRawPtrsInRange(FBox QueryBox,TArray<FEmbarkSmartObjectComponent*> OutResults);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.InitializeOctree
// Offset::0x20FCB70;
void FEmbarkSmartObjectSubsystem::InitializeOctree(FBox Bounds);


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.IsInitialized
// Offset::0x20FCB50;
bool FEmbarkSmartObjectSubsystem::IsInitialized();


// Function  EmbarkAI.EmbarkSmartObjectSubsystem.Release
// Offset::0x20FC2E0;
bool FEmbarkSmartObjectSubsystem::Release(FEmbarkSmartObjectClaimHandle Handle);


// Function  EmbarkAI.EmbarkSmartObjectClaimHandleMixinLibrary.IsValid
// Offset::0x20FF2C0;
bool FEmbarkSmartObjectClaimHandleMixinLibrary::IsValid(FEmbarkSmartObjectClaimHandle Handle);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.BindToOnQueueSubtitles
// Offset::0x211E990;
void FEmbarkAudioFunctionLibrary::BindToOnQueueSubtitles(FAudioComponent* AudioComponent,FObject* Object,FName FunctionName);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.ClearSoundMix
// Offset::0x211ED40;
void FEmbarkAudioFunctionLibrary::ClearSoundMix(FWorld* World,FSoundMix* SoundMix);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.GetActorDistanceToNearestListener
// Offset::0x211F0F0;
float FEmbarkAudioFunctionLibrary::GetActorDistanceToNearestListener(FActor* InActor);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.GetAudioDeviceIDs
// Offset::0x211D580;
void FEmbarkAudioFunctionLibrary::GetAudioDeviceIDs(TArray<uint32_t> OutAudioDeviceIDs);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.GetAudioVolume
// Offset::0x211D460;
FAudioVolume* FEmbarkAudioFunctionLibrary::GetAudioVolume(FWorld* World,FVector Location);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.GetDistanceToNearestListener
// Offset::0x211F1E0;
float FEmbarkAudioFunctionLibrary::GetDistanceToNearestListener(FWorld* World,FVector Location);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.GetFirstListenerPosition
// Offset::0x211F040;
FVector FEmbarkAudioFunctionLibrary::GetFirstListenerPosition(FWorld* World);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.GetFirstListenerTransform
// Offset::0x211EF50;
FTransform FEmbarkAudioFunctionLibrary::GetFirstListenerTransform(FWorld* World);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.GetMappedRangeClampedCurve
// Offset::0x211EAC0;
float FEmbarkAudioFunctionLibrary::GetMappedRangeClampedCurve(FVector2D InRange,FVector2D OutRange,float Value,enum class EMapRangeCurve Curve,bool bInvertCurve);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.GetMaxChannelsForAudioDvice
// Offset::0x211D630;
int32_t FEmbarkAudioFunctionLibrary::GetMaxChannelsForAudioDvice(uint32_t ID);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.GetMaxDistance
// Offset::0x211D390;
float FEmbarkAudioFunctionLibrary::GetMaxDistance(FSoundBase* Sound);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.IsWorldAudioMuted
// Offset::0x211EE20;
bool FEmbarkAudioFunctionLibrary::IsWorldAudioMuted(FWorld* World);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.ListenForAudioDeviceCreated
// Offset::0x211E8A0;
void FEmbarkAudioFunctionLibrary::ListenForAudioDeviceCreated(FObject* InObject,FName InFunctionName);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.ListenForAudioDeviceDestroyed
// Offset::0x211E700;
void FEmbarkAudioFunctionLibrary::ListenForAudioDeviceDestroyed(FObject* InObject,FName InFunctionName);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.PopSoundMixModifierForAudioDevice
// Offset::0x211DE50;
void FEmbarkAudioFunctionLibrary::PopSoundMixModifierForAudioDevice(uint32_t ID,FSoundMix* InSoundMixModifier);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.PushSoundMixModifierForAudioDevice
// Offset::0x211DF30;
void FEmbarkAudioFunctionLibrary::PushSoundMixModifierForAudioDevice(uint32_t ID,FSoundMix* InSoundMixModifier);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.SetAudioSpatializationChannels
// Offset::0x211EEC0;
void FEmbarkAudioFunctionLibrary::SetAudioSpatializationChannels(int32_t InChannelCount);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.SetSoundMixClassOverrideForAudioDevice
// Offset::0x211E010;
void FEmbarkAudioFunctionLibrary::SetSoundMixClassOverrideForAudioDevice(uint32_t ID,FSoundMix* InSoundMixModifier,FSoundClass* InSoundClass,float Volume,float Pitch,float FadeInTime,bool bApplyToChildren);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.SetSubmixOutputVolumeForAudioDevice
// Offset::0x211D9F0;
void FEmbarkAudioFunctionLibrary::SetSubmixOutputVolumeForAudioDevice(uint32_t ID,FSoundSubmix* InSoundSubmix,float InOutputVolume);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.SetUnfocusedVolumeMultiplier
// Offset::0x211ECA0;
void FEmbarkAudioFunctionLibrary::SetUnfocusedVolumeMultiplier(float InVolumeMultiplier);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.StopListeningForAudioDeviceCreated
// Offset::0x211E7F0;
void FEmbarkAudioFunctionLibrary::StopListeningForAudioDeviceCreated(FObject* InObject);


// Function  EmbarkAudio.EmbarkAudioFunctionLibrary.StopListeningForAudioDeviceDestroyed
// Offset::0x211E650;
void FEmbarkAudioFunctionLibrary::StopListeningForAudioDeviceDestroyed(FObject* InObject);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddBool
// Offset::0x2121A80;
void FFEmbarkAudioParametersMixinLibrary::AddBool(FEmbarkAudioParameters Parameters,FName InName,bool bInValue);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddBoolArray
// Offset::0x2120A70;
void FFEmbarkAudioParametersMixinLibrary::AddBoolArray(FEmbarkAudioParameters Parameters,FName InName,TArray<bool> InValue);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddFloat
// Offset::0x21217A0;
void FFEmbarkAudioParametersMixinLibrary::AddFloat(FEmbarkAudioParameters Parameters,FName InName,float InValue);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddFloatArray
// Offset::0x2120440;
void FFEmbarkAudioParametersMixinLibrary::AddFloatArray(FEmbarkAudioParameters Parameters,FName InName,TArray<float> InValue);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddInt
// Offset::0x2121910;
void FFEmbarkAudioParametersMixinLibrary::AddInt(FEmbarkAudioParameters Parameters,FName InName,int32_t InValue);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddIntArray
// Offset::0x21205D0;
void FFEmbarkAudioParametersMixinLibrary::AddIntArray(FEmbarkAudioParameters Parameters,FName InName,TArray<int32_t> InValue);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddObject
// Offset::0x2120F10;
void FFEmbarkAudioParametersMixinLibrary::AddObject(FEmbarkAudioParameters Parameters,FName InName,FObject* InValue);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddObjectArray
// Offset::0x21200E0;
void FFEmbarkAudioParametersMixinLibrary::AddObjectArray(FEmbarkAudioParameters Parameters,FName InName,TArray<FObject*> InValue);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddString
// Offset::0x2121310;
void FFEmbarkAudioParametersMixinLibrary::AddString(FEmbarkAudioParameters Parameters,FName InName,FString InValue);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddStringArray
// Offset::0x2120270;
void FFEmbarkAudioParametersMixinLibrary::AddStringArray(FEmbarkAudioParameters Parameters,FName InName,TArray<FString> InValue);


// Function  EmbarkAudio.FEmbarkAudioParametersMixinLibrary.AddTrigger
// Offset::0x2121C00;
void FFEmbarkAudioParametersMixinLibrary::AddTrigger(FEmbarkAudioParameters Parameters,FName InName);


// Function  EmbarkAudio.EmbarkAudioComponentMixinLibrary.SetBoolArrayParameter
// Offset::0x2122D70;
void FEmbarkAudioComponentMixinLibrary::SetBoolArrayParameter(FAudioComponent* AudioComponent,FName InName,TArray<bool> InValue);


// Function  EmbarkAudio.EmbarkAudioComponentMixinLibrary.SetFloatArrayParameter
// Offset::0x2122A90;
void FEmbarkAudioComponentMixinLibrary::SetFloatArrayParameter(FAudioComponent* AudioComponent,FName InName,TArray<float> InValue);


// Function  EmbarkAudio.EmbarkAudioComponentMixinLibrary.SetIntArrayParameter
// Offset::0x2122C00;
void FEmbarkAudioComponentMixinLibrary::SetIntArrayParameter(FAudioComponent* AudioComponent,FName InName,TArray<int32_t> InValue);


// Function  EmbarkAudio.EmbarkAudioComponentMixinLibrary.SetObjectArrayParameter
// Offset::0x2122770;
void FEmbarkAudioComponentMixinLibrary::SetObjectArrayParameter(FAudioComponent* AudioComponent,FName InName,TArray<FObject*> InValue);


// Function  EmbarkAudio.EmbarkAudioComponentMixinLibrary.SetObjectParameter
// Offset::0x2122EE0;
void FEmbarkAudioComponentMixinLibrary::SetObjectParameter(FAudioComponent* AudioComponent,FName InName,FObject* InValue);


// Function  EmbarkAudio.EmbarkAudioComponentMixinLibrary.SetParameters
// Offset::0x21232A0;
void FEmbarkAudioComponentMixinLibrary::SetParameters(FAudioComponent* AudioComponent,FEmbarkAudioParameters InParameters);


// Function  EmbarkAudio.EmbarkAudioComponentMixinLibrary.SetStringArrayParameter
// Offset::0x21228E0;
void FEmbarkAudioComponentMixinLibrary::SetStringArrayParameter(FAudioComponent* AudioComponent,FName InName,TArray<FString> InValue);


// Function  EmbarkAudio.EmbarkAudioComponentMixinLibrary.SetStringParameter
// Offset::0x2123030;
void FEmbarkAudioComponentMixinLibrary::SetStringParameter(FAudioComponent* AudioComponent,FName InName,FString InValue);


// Function  EmbarkAudio.EmbarkAudioComponentMixinLibrary.SetTriggerParameter
// Offset::0x2123190;
void FEmbarkAudioComponentMixinLibrary::SetTriggerParameter(FAudioComponent* AudioComponent,FName InName);


// Function  EmbarkAudio.EmbarkAudioTickableObject.OnTick
// Offset::0x3D30810;
void FEmbarkAudioTickableObject::OnTick(float DeltaSeconds);


// Function  EmbarkAudio.SoundWaveCollection.GetSoundWave
// Offset::0x2123FC0;
FSoundWave* FSoundWaveCollection::GetSoundWave(int32_t RequestedIndex);


// Function  EmbarkAudio.SoundWaveCollection.RegisterCallback
// Offset::0x2123EE0;
void FSoundWaveCollection::RegisterCallback(FObject* Object,FName FuncName);


// Function  AudioMixer.SynthComponent.IsPlaying
// Offset::0x57C1370;
bool FSynthComponent::IsPlaying();


// Function  AudioMixer.SynthComponent.SetLowPassFilterEnabled
// Offset::0x57C1150;
void FSynthComponent::SetLowPassFilterEnabled(bool InLowPassFilterEnabled);


// Function  AudioMixer.SynthComponent.SetLowPassFilterFrequency
// Offset::0x57C10B0;
void FSynthComponent::SetLowPassFilterFrequency(float InLowPassFilterFrequency);


// Function  AudioMixer.SynthComponent.SetOutputToBusOnly
// Offset::0x57C1010;
void FSynthComponent::SetOutputToBusOnly(bool bInOutputToBusOnly);


// Function  AudioMixer.SynthComponent.SetSubmixSend
// Offset::0x57C11F0;
void FSynthComponent::SetSubmixSend(FSoundSubmixBase* Submix,float SendLevel);


// Function  AudioMixer.SynthComponent.SetVolumeMultiplier
// Offset::0x57C12D0;
void FSynthComponent::SetVolumeMultiplier(float VolumeMultiplier);


// Function  AudioMixer.SynthComponent.Start
// Offset::0x57C13C0;
void FSynthComponent::Start();


// Function  AudioMixer.SynthComponent.Stop
// Offset::0x57C13A0;
void FSynthComponent::Stop();


// Function  EmbarkAudio.SoundWeaponSynthComponent.GetDistanceToListener
// Offset::0x2124370;
float FSoundWeaponSynthComponent::GetDistanceToListener();


// Function  EmbarkAudio.SoundWeaponSynthComponent.IncrementShotsFiredExternal
// Offset::0x21243A0;
void FSoundWeaponSynthComponent::IncrementShotsFiredExternal();


// Function  EmbarkAudio.SoundWeaponSynthComponent.IsSilent
// Offset::0x2124970;
bool FSoundWeaponSynthComponent::IsSilent();


// Function  EmbarkAudio.SoundWeaponSynthComponent.PrepareSoundLayers
// Offset::0x2124890;
void FSoundWeaponSynthComponent::PrepareSoundLayers(int32_t NumSoundLayers,FName AssetDebugName);


// Function  EmbarkAudio.SoundWeaponSynthComponent.SetSoundLayerBurstEnvelope
// Offset::0x2124540;
void FSoundWeaponSynthComponent::SetSoundLayerBurstEnvelope(int32_t SoundLayerIndex,float AttackGain,float DecayTime);


// Function  EmbarkAudio.SoundWeaponSynthComponent.SetSoundLayerParameters
// Offset::0x2124670;
void FSoundWeaponSynthComponent::SetSoundLayerParameters(int32_t SoundLayerIndex,enum class EWeaponSynthSoundLayerType LayerType,float Amplitude,float Pitch,int32_t Offset,bool bAlignWithEndOfShot);


// Function  EmbarkAudio.SoundWeaponSynthComponent.SetSoundLayerSounds
// Offset::0x2124460;
void FSoundWeaponSynthComponent::SetSoundLayerSounds(int32_t SoundLayerIndex,FSoundWaveCollection* Sounds);


// Function  EmbarkAudio.SoundWeaponSynthComponent.SetStayActive
// Offset::0x21243C0;
void FSoundWeaponSynthComponent::SetStayActive(bool bSetStayActive);


// Function  EmbarkAudio.SoundWeaponSynthComponent.StartFiring
// Offset::0x21249C0;
void FSoundWeaponSynthComponent::StartFiring();


// Function  EmbarkAudio.SoundWeaponSynthComponent.StopFiring
// Offset::0x21249A0;
void FSoundWeaponSynthComponent::StopFiring();


// Function  EmbarkSynthesis.SourceEffectAdaptiveNoisePreset.SetSettings
// Offset::0x2153250;
void FSourceEffectAdaptiveNoisePreset::SetSettings(FSourceEffectAdaptiveNoiseSettings InSettings);


// Function  EmbarkSynthesis.SourceEffectBounceCombPreset.SetSettings
// Offset::0x2153700;
void FSourceEffectBounceCombPreset::SetSettings(FSourceEffectBounceCombSettings InSettings);


// Function  EmbarkSynthesis.SourceEffectRadioStaticPreset.SetSettings
// Offset::0x2153B40;
void FSourceEffectRadioStaticPreset::SetSettings(FSourceEffectRadioStaticSettings InSettings);


// Function  EmbarkSynthesis.SourceEffectSimpleCompressorPreset.SetSettings
// Offset::0x2153FE0;
void FSourceEffectSimpleCompressorPreset::SetSettings(FSourceEffectSimpleCompressorSettings InSettings);


// Function  EmbarkSynthesis.SourceEffectSoftDistortionPreset.SetSettings
// Offset::0x2154420;
void FSourceEffectSoftDistortionPreset::SetSettings(FSourceEffectSoftDistortionSettings InSettings);


// Function  EmbarkSynthesis.SourceEffectTransientShaperPreset.SetSettings
// Offset::0x2154860;
void FSourceEffectTransientShaperPreset::SetSettings(FSourceEffectTransientShaperSettings InSettings);


// Function  EmbarkSynthesis.SourceEffectTunedResonatorPreset.SetSettings
// Offset::0x2154C90;
void FSourceEffectTunedResonatorPreset::SetSettings(FSourceEffectTunedResonatorSettings InSettings);


// Function  EmbarkSynthesis.SubmixEffectAdaptiveNoisePreset.SetSettings
// Offset::0x2153250;
void FSubmixEffectAdaptiveNoisePreset::SetSettings(FSubmixEffectAdaptiveNoiseSettings InSettings);


// Function  EmbarkSynthesis.SubmixEffectMultitapDelayPreset.GetMaxDelayTime
// Offset::0x2155540;
float FSubmixEffectMultitapDelayPreset::GetMaxDelayTime();


// Function  EmbarkSynthesis.SubmixEffectMultitapDelayPreset.GetMaxTapCount
// Offset::0x2155520;
int32_t FSubmixEffectMultitapDelayPreset::GetMaxTapCount();


// Function  EmbarkSynthesis.SubmixEffectMultitapDelayPreset.SetSettings
// Offset::0x2155570;
void FSubmixEffectMultitapDelayPreset::SetSettings(FSubmixEffectMultitapDelaySettings InSettings);


// Function  EmbarkSynthesis.SubmixEffectSimpleCompressorPreset.SetSettings
// Offset::0x2155AD0;
void FSubmixEffectSimpleCompressorPreset::SetSettings(FSubmixEffectSimpleCompressorSettings InSettings);


// Function  EmbarkSynthesis.SubmixEffectSoftDistortionPreset.SetSettings
// Offset::0x2154420;
void FSubmixEffectSoftDistortionPreset::SetSettings(FSubmixEffectSoftDistortionSettings InSettings);


// Function  EmbarkSynthesis.SubmixEffectTransientShaperPreset.SetSettings
// Offset::0x2154860;
void FSubmixEffectTransientShaperPreset::SetSettings(FSubmixEffectTransientShaperSettings InSettings);


// Function  EmbarkSynthesis.SubmixEffectTunedResonatorPreset.SetSettings
// Offset::0x2154C90;
void FSubmixEffectTunedResonatorPreset::SetSettings(FSubmixEffectTunedResonatorSettings InSettings);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddActor
// Offset::0x2168820;
void FEmbarkDistanceQueryManager::AddActor(FObject* ContextObject,FObject* GroupClass,FActor* Actor,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,FVector Vector);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddActorWithCallback
// Offset::0x2166A10;
void FEmbarkDistanceQueryManager::AddActorWithCallback(FObject* ContextObject,FObject* GroupClass,FActor* Actor,FDelegate Callback,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,FVector Vector);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddCapsuleActor
// Offset::0x2167B20;
void FEmbarkDistanceQueryManager::AddCapsuleActor(FObject* ContextObject,FObject* GroupClass,FActor* Actor,float HalfHeight,FQuat Rotation,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddCapsuleActorWithCallback
// Offset::0x2165B80;
void FEmbarkDistanceQueryManager::AddCapsuleActorWithCallback(FObject* ContextObject,FObject* GroupClass,FActor* Actor,float HalfHeight,FQuat Rotation,FDelegate Callback,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddCapsuleComponent
// Offset::0x2167480;
void FEmbarkDistanceQueryManager::AddCapsuleComponent(FObject* ContextObject,FObject* GroupClass,FSceneComponent* Component,float HalfHeight,FQuat Rotation,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddCapsuleComponentWithCallback
// Offset::0x2165450;
void FEmbarkDistanceQueryManager::AddCapsuleComponentWithCallback(FObject* ContextObject,FObject* GroupClass,FSceneComponent* Component,float HalfHeight,FQuat Rotation,FDelegate Callback,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddCapsuleLocation
// Offset::0x2166DC0;
void FEmbarkDistanceQueryManager::AddCapsuleLocation(FObject* GroupClass,FVector Location,float HalfHeight,FQuat Rotation,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,float TimeToLive);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddCapsuleLocationWithCallback
// Offset::0x2164CF0;
void FEmbarkDistanceQueryManager::AddCapsuleLocationWithCallback(FObject* GroupClass,FVector Location,float HalfHeight,FQuat Rotation,FDelegate Callback,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,float TimeToLive);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddComponent
// Offset::0x21684F0;
void FEmbarkDistanceQueryManager::AddComponent(FObject* ContextObject,FObject* GroupClass,FSceneComponent* Component,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,FVector Vector);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddComponentWithCallback
// Offset::0x2166660;
void FEmbarkDistanceQueryManager::AddComponentWithCallback(FObject* ContextObject,FObject* GroupClass,FSceneComponent* Component,FDelegate Callback,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,FVector Vector);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddLocation
// Offset::0x21681C0;
void FEmbarkDistanceQueryManager::AddLocation(FObject* GroupClass,FVector Location,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,FVector Vector,float TimeToLive);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.AddLocationWithCallback
// Offset::0x21662B0;
void FEmbarkDistanceQueryManager::AddLocationWithCallback(FObject* GroupClass,FVector Location,FDelegate Callback,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,FVector Vector,float TimeToLive);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.Dump
// Offset::0x2162180;
void FEmbarkDistanceQueryManager::Dump();


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.GetDistanceQueryManager
// Offset::0x2169630;
FEmbarkDistanceQueryManager* FEmbarkDistanceQueryManager::GetDistanceQueryManager(FObject* WorldContextObject);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.GetDistanceQueryManagerWithContext
// Offset::0x2169590;
FEmbarkDistanceQueryManager* FEmbarkDistanceQueryManager::GetDistanceQueryManagerWithContext(FObject* WorldContextObject);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.GetQueryKeyActor
// Offset::0x2162460;
FActor* FEmbarkDistanceQueryManager::GetQueryKeyActor(FEmbarkDistanceQueryKey Key);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.GetQueryKeyComponent
// Offset::0x21623C0;
FSceneComponent* FEmbarkDistanceQueryManager::GetQueryKeyComponent(FEmbarkDistanceQueryKey Key);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.GetQueryKeyLocation
// Offset::0x2162310;
FVector FEmbarkDistanceQueryManager::GetQueryKeyLocation(FEmbarkDistanceQueryKey Key);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.GetQueryKeyName
// Offset::0x21621A0;
FString FEmbarkDistanceQueryManager::GetQueryKeyName(FEmbarkDistanceQueryKey Key);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.GetQueryKeySpecifier
// Offset::0x2162270;
int32_t FEmbarkDistanceQueryManager::GetQueryKeySpecifier(FEmbarkDistanceQueryKey Key);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.MakeQueries
// Offset::0x2168FD0;
void FEmbarkDistanceQueryManager::MakeQueries(FObject* SourceGroupClass,TArray<FObject*> TargetGroupClasses,float DistanceToCheck,float Stickiness,bool bEnabled,bool bAtomic,enum class EEmbarkDistanceQueryCallbackFlags CallbackFlags);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.MakeQuery
// Offset::0x2169270;
int32_t FEmbarkDistanceQueryManager::MakeQuery(FObject* SourceGroupClass,FObject* TargetGroupClass,float DistanceToCheck,float Stickiness,bool bEnabled,bool bAtomic,enum class EEmbarkDistanceQueryCallbackFlags CallbackFlags);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.RemoveActor
// Offset::0x2164BC0;
void FEmbarkDistanceQueryManager::RemoveActor(FObject* GroupClass,FActor* Actor,int32_t Specifier);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.RemoveComponent
// Offset::0x2164A90;
void FEmbarkDistanceQueryManager::RemoveComponent(FObject* GroupClass,FSceneComponent* Component,int32_t Specifier);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.RemoveLocation
// Offset::0x2164950;
void FEmbarkDistanceQueryManager::RemoveLocation(FObject* GroupClass,FVector Location,int32_t Specifier);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetActorData
// Offset::0x21646B0;
void FEmbarkDistanceQueryManager::SetActorData(FObject* GroupClass,FActor* Actor,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,FVector Vector);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetCapsuleActorData
// Offset::0x21637F0;
void FEmbarkDistanceQueryManager::SetCapsuleActorData(FObject* GroupClass,FActor* Actor,float HalfHeight,FQuat Rotation,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetCapsuleComponentData
// Offset::0x21631D0;
void FEmbarkDistanceQueryManager::SetCapsuleComponentData(FObject* GroupClass,FSceneComponent* Component,float HalfHeight,FQuat Rotation,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetCapsuleLocationData
// Offset::0x2162BB0;
void FEmbarkDistanceQueryManager::SetCapsuleLocationData(FObject* GroupClass,FVector Location,float HalfHeight,FQuat Rotation,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetCapsuleLocationDataEx
// Offset::0x2162500;
void FEmbarkDistanceQueryManager::SetCapsuleLocationDataEx(FObject* GroupClass,FVector Location,FVector NewLocation,float HalfHeight,FQuat Rotation,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetComponentData
// Offset::0x2164410;
void FEmbarkDistanceQueryManager::SetComponentData(FObject* GroupClass,FSceneComponent* Component,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,FVector Vector);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetLocationData
// Offset::0x2164150;
void FEmbarkDistanceQueryManager::SetLocationData(FObject* GroupClass,FVector Location,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,FVector Vector);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetLocationDataEx
// Offset::0x2163E10;
void FEmbarkDistanceQueryManager::SetLocationDataEx(FObject* GroupClass,FVector Location,FVector NewLocation,float DistanceToCheck,float Stickiness,int32_t Specifier,float Radius,FVector Vector);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetQueryAtomic
// Offset::0x2168C30;
void FEmbarkDistanceQueryManager::SetQueryAtomic(int32_t QueryID,bool bAtomic);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetQueryCallbackFlags
// Offset::0x2168B50;
void FEmbarkDistanceQueryManager::SetQueryCallbackFlags(int32_t QueryID,enum class EEmbarkDistanceQueryCallbackFlags CallbackFlags);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetQueryDistance
// Offset::0x2168EF0;
void FEmbarkDistanceQueryManager::SetQueryDistance(int32_t QueryID,float DistanceToCheck);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetQueryEnabled
// Offset::0x2168D20;
void FEmbarkDistanceQueryManager::SetQueryEnabled(int32_t QueryID,bool bEnabled);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetQueryResultsCapacity
// Offset::0x21694F0;
void FEmbarkDistanceQueryManager::SetQueryResultsCapacity(int32_t Capacity);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.SetQueryStickiness
// Offset::0x2168E10;
void FEmbarkDistanceQueryManager::SetQueryStickiness(int32_t QueryID,float Stickiness);


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.UpdateQueries
// Offset::0x2162160;
void FEmbarkDistanceQueryManager::UpdateQueries();


// Function  EmbarkDistanceQueryManager.EmbarkDistanceQueryManager.UpdateTimers
// Offset::0x21620C0;
void FEmbarkDistanceQueryManager::UpdateTimers(float DeltaTime);


// Function  Engine.DecalComponent.CreateDynamicMaterialInstance
// Offset::0x637D210;
FMaterialInstanceDynamic* FDecalComponent::CreateDynamicMaterialInstance();


// Function  Engine.DecalComponent.GetDecalMaterial
// Offset::0x637D240;
FMaterialInterface* FDecalComponent::GetDecalMaterial();


// Function  Engine.DecalComponent.GetFadeDuration
// Offset::0x637D6C0;
float FDecalComponent::GetFadeDuration();


// Function  Engine.DecalComponent.GetFadeInDuration
// Offset::0x637D660;
float FDecalComponent::GetFadeInDuration();


// Function  Engine.DecalComponent.GetFadeInStartDelay
// Offset::0x637D690;
float FDecalComponent::GetFadeInStartDelay();


// Function  Engine.DecalComponent.GetFadeStartDelay
// Offset::0x637D6F0;
float FDecalComponent::GetFadeStartDelay();


// Function  Engine.DecalComponent.SetDecalMaterial
// Offset::0x637D270;
void FDecalComponent::SetDecalMaterial(FMaterialInterface* NewDecalMaterial);


// Function  Engine.DecalComponent.SetFadeIn
// Offset::0x637D450;
void FDecalComponent::SetFadeIn(float StartDelay,float Duaration);


// Function  Engine.DecalComponent.SetFadeOut
// Offset::0x637D530;
void FDecalComponent::SetFadeOut(float StartDelay,float Duration,bool DestroyOwnerAfterFade);


// Function  Engine.DecalComponent.SetFadeScreenSize
// Offset::0x637D3B0;
void FDecalComponent::SetFadeScreenSize(float NewFadeScreenSize);


// Function  Engine.DecalComponent.SetSortOrder
// Offset::0x637D310;
void FDecalComponent::SetSortOrder(int32_t Value);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddAttachmentParams
// Offset::0x2195CC0;
void FEmbarkFXDirectorStatics::AddAttachmentParams(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FEmbarkFXAttachmentParams AttachmentParams);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddAttachmentParams_GetRef
// Offset::0x2195F20;
FEmbarkFXAttachmentParams FEmbarkFXDirectorStatics::AddAttachmentParams_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FSceneComponent* AttachToComponent);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddAudioParams
// Offset::0x2195350;
void FEmbarkFXDirectorStatics::AddAudioParams(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FEmbarkFXAudioParams AudioParams);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddAudioParams_GetRef
// Offset::0x21955D0;
FEmbarkFXAudioParams FEmbarkFXDirectorStatics::AddAudioParams_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FSoundBase* Sound);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddBool
// Offset::0x2193C60;
void FEmbarkFXDirectorStatics::AddBool(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,bool bValue);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddBoolArray
// Offset::0x2191FC0;
void FEmbarkFXDirectorStatics::AddBoolArray(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,TArray<bool> Array);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddBoolArray_GetRef
// Offset::0x2190790;
TArray<bool> FEmbarkFXDirectorStatics::AddBoolArray_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddCallbackParams
// Offset::0x2194940;
void FEmbarkFXDirectorStatics::AddCallbackParams(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FEmbarkFXCallbackParams CallbackParams);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddCallbackParams_GetRef
// Offset::0x2194B90;
FEmbarkFXCallbackParams FEmbarkFXDirectorStatics::AddCallbackParams_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FObject* Object,FName FunctionName);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddCameraShakeParams
// Offset::0x2194490;
void FEmbarkFXDirectorStatics::AddCameraShakeParams(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FEmbarkFXCameraShakeParams CameraShakeParams);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddCameraShakeParams_GetRef
// Offset::0x21946F0;
FEmbarkFXCameraShakeParams FEmbarkFXDirectorStatics::AddCameraShakeParams_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FCameraShakeBase* CameraShake);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddColor
// Offset::0x2192AB0;
void FEmbarkFXDirectorStatics::AddColor(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,FLinearColor Value);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddColorArray
// Offset::0x2191000;
void FEmbarkFXDirectorStatics::AddColorArray(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,TArray<FLinearColor> Array);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddColorArray_GetRef
// Offset::0x218F470;
TArray<FLinearColor> FEmbarkFXDirectorStatics::AddColorArray_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddCue_GetRef
// Offset::0x2197A50;
FEmbarkFXCue FEmbarkFXDirectorStatics::AddCue_GetRef(FEmbarkFXDirectorContext Context);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddDecalParams
// Offset::0x2194E30;
void FEmbarkFXDirectorStatics::AddDecalParams(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FEmbarkFXDecalParams DecalParams);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddDecalParams_GetRef
// Offset::0x21950E0;
FEmbarkFXDecalParams FEmbarkFXDirectorStatics::AddDecalParams_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FMaterialInterface* Material);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddExternalFXCost
// Offset::0x2198250;
void FEmbarkFXDirectorStatics::AddExternalFXCost(FObject* ContextObject,int32_t Cost);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddFloat
// Offset::0x2193520;
void FEmbarkFXDirectorStatics::AddFloat(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,float Value);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddFloatArray
// Offset::0x2191D20;
void FEmbarkFXDirectorStatics::AddFloatArray(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,TArray<float> Array);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddFloatArray_GetRef
// Offset::0x2190130;
TArray<float> FEmbarkFXDirectorStatics::AddFloatArray_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddForceFeedbackParams
// Offset::0x2193FE0;
void FEmbarkFXDirectorStatics::AddForceFeedbackParams(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FEmbarkFXForceFeedbackParams ForceFeedbackParams);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddForceFeedbackParams_GetRef
// Offset::0x2194240;
FEmbarkFXForceFeedbackParams FEmbarkFXDirectorStatics::AddForceFeedbackParams_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FForceFeedbackEffect* ForceFeedbackEffect);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddInt
// Offset::0x21937A0;
void FEmbarkFXDirectorStatics::AddInt(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,int32_t Value);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddIntArray
// Offset::0x2191A80;
void FEmbarkFXDirectorStatics::AddIntArray(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,TArray<int32_t> Array);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddIntArray_GetRef
// Offset::0x2190460;
TArray<int32_t> FEmbarkFXDirectorStatics::AddIntArray_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddObject
// Offset::0x21924E0;
void FEmbarkFXDirectorStatics::AddObject(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,FObject* Value);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddObjectArray
// Offset::0x2190AC0;
void FEmbarkFXDirectorStatics::AddObjectArray(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,TArray<FObject*> Array);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddObjectArray_GetRef
// Offset::0x218EE10;
TArray<FObject*> FEmbarkFXDirectorStatics::AddObjectArray_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddParticleParams
// Offset::0x2195830;
void FEmbarkFXDirectorStatics::AddParticleParams(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FEmbarkFXParticleParams ParticleParams);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddParticleParams_GetRef
// Offset::0x2195A80;
FEmbarkFXParticleParams FEmbarkFXDirectorStatics::AddParticleParams_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FNiagaraSystem* NiagaraSystem);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddPosition
// Offset::0x2193280;
void FEmbarkFXDirectorStatics::AddPosition(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,FVector Value);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddPositionArray
// Offset::0x21917E0;
void FEmbarkFXDirectorStatics::AddPositionArray(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,TArray<FVector> Array);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddPositionArray_GetRef
// Offset::0x218FE00;
TArray<FVector> FEmbarkFXDirectorStatics::AddPositionArray_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddQuat
// Offset::0x2192D40;
void FEmbarkFXDirectorStatics::AddQuat(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,FQuat Value);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddQuatArray
// Offset::0x21912A0;
void FEmbarkFXDirectorStatics::AddQuatArray(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,TArray<FQuat> Array);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddQuatArray_GetRef
// Offset::0x218F7A0;
TArray<FQuat> FEmbarkFXDirectorStatics::AddQuatArray_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddStaticMeshDataInterface
// Offset::0x2192260;
void FEmbarkFXDirectorStatics::AddStaticMeshDataInterface(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,FStaticMesh* Value);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddTickPrerequisiteActor
// Offset::0x2198170;
void FEmbarkFXDirectorStatics::AddTickPrerequisiteActor(FObject* ContextObject,FActor* PrerequisiteActor);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddTickPrerequisiteComponent
// Offset::0x2197FB0;
void FEmbarkFXDirectorStatics::AddTickPrerequisiteComponent(FObject* ContextObject,FActorComponent* PrerequisiteComponent);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddTransform
// Offset::0x2192760;
void FEmbarkFXDirectorStatics::AddTransform(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,FTransform Value);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddTransformArray
// Offset::0x2190D60;
void FEmbarkFXDirectorStatics::AddTransformArray(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,TArray<FTransform> Array);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddTransformArray_GetRef
// Offset::0x218F140;
TArray<FTransform> FEmbarkFXDirectorStatics::AddTransformArray_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddTrigger
// Offset::0x2193A20;
void FEmbarkFXDirectorStatics::AddTrigger(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddVector
// Offset::0x2192FE0;
void FEmbarkFXDirectorStatics::AddVector(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,FVector Value);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddVectorArray
// Offset::0x2191540;
void FEmbarkFXDirectorStatics::AddVectorArray(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,TArray<FVector> Array);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.AddVectorArray_GetRef
// Offset::0x218FAD0;
TArray<FVector> FEmbarkFXDirectorStatics::AddVectorArray_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.BeginContext
// Offset::0x2197BC0;
void FEmbarkFXDirectorStatics::BeginContext(FObject* ContextObject,FEmbarkFXDirectorContext Context,FName Name);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CheckCueInvariants
// Offset::0x2196DF0;
FString FEmbarkFXDirectorStatics::CheckCueInvariants(FEmbarkFXDirectorContext Context,FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXAtLocation
// Offset::0x219A550;
FEmbarkFXHandle FEmbarkFXDirectorStatics::CueFXAtLocation(FObject* ContextObject,FNiagaraSystem* System,FSoundBase* Sound,FMaterialInterface* DecalMaterial,FVector Location,FRotator Rotation,float VolumeMultiplier,float FadeInSeconds,FVector DecalSize,float DecalLifeTimeSeconds,bool bRandomDecalRotation,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXAttached
// Offset::0x2199F50;
FEmbarkFXHandle FEmbarkFXDirectorStatics::CueFXAttached(FObject* ContextObject,FNiagaraSystem* System,FSoundBase* Sound,FMaterialInterface* DecalMaterial,FSceneComponent* AttachToComponent,FName AttachToName,enum class EAttachLocation AttachLocation,FVector Location,FRotator Rotation,float VolumeMultiplier,float FadeInSeconds,FVector DecalSize,float DecalLifeTimeSeconds,bool bRandomDecalRotation,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXAutoPosition
// Offset::0x2199720;
void FEmbarkFXDirectorStatics::CueFXAutoPosition(FObject* ContextObject,FEmbarkFXHandle Handle,FVector Location,enum class EEmbarkFXAutoPosition AutoPosition,enum class EEmbarkFXAutoPositionFunc AutoPositionFunc,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXBool
// Offset::0x2199500;
void FEmbarkFXDirectorStatics::CueFXBool(FObject* ContextObject,FEmbarkFXHandle Handle,FName Name,bool bValue,enum class EEmbarkFXBinding Binding,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXCallback
// Offset::0x2199D80;
FEmbarkFXHandle FEmbarkFXDirectorStatics::CueFXCallback(FObject* ContextObject,FObject* Object,FName FunctionName,float DelaySeconds,int64_t UserData);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXCallbackAsync
// Offset::0x2199BB0;
FEmbarkFXHandle FEmbarkFXDirectorStatics::CueFXCallbackAsync(FObject* ContextObject,FObject* Object,FName FunctionName,float DelaySeconds,int64_t UserData);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXColor
// Offset::0x2198630;
void FEmbarkFXDirectorStatics::CueFXColor(FObject* ContextObject,FEmbarkFXHandle Handle,FName Name,FLinearColor Value,enum class EEmbarkFXBinding Binding,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXFloat
// Offset::0x2198F20;
void FEmbarkFXDirectorStatics::CueFXFloat(FObject* ContextObject,FEmbarkFXHandle Handle,FName Name,float Value,enum class EEmbarkFXBinding Binding,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXInt
// Offset::0x2199130;
void FEmbarkFXDirectorStatics::CueFXInt(FObject* ContextObject,FEmbarkFXHandle Handle,FName Name,int32_t Value,enum class EEmbarkFXBinding Binding,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXPosition
// Offset::0x2198CE0;
void FEmbarkFXDirectorStatics::CueFXPosition(FObject* ContextObject,FEmbarkFXHandle Handle,FName Name,FVector Value,enum class EEmbarkFXBinding Binding,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXQuat
// Offset::0x2198850;
void FEmbarkFXDirectorStatics::CueFXQuat(FObject* ContextObject,FEmbarkFXHandle Handle,FName Name,FQuat Value,enum class EEmbarkFXBinding Binding,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXTransform
// Offset::0x2198330;
void FEmbarkFXDirectorStatics::CueFXTransform(FObject* ContextObject,FEmbarkFXHandle Handle,FName Name,FTransform Value,enum class EEmbarkFXBinding Binding,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXTrigger
// Offset::0x2199340;
void FEmbarkFXDirectorStatics::CueFXTrigger(FObject* ContextObject,FEmbarkFXHandle Handle,FName Name,enum class EEmbarkFXBinding Binding,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueFXVector
// Offset::0x2198AA0;
void FEmbarkFXDirectorStatics::CueFXVector(FObject* ContextObject,FEmbarkFXHandle Handle,FName Name,FVector Value,enum class EEmbarkFXBinding Binding,bool bSetInstanceTag);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.CueUISound
// Offset::0x219AA30;
FEmbarkFXHandle FEmbarkFXDirectorStatics::CueUISound(FObject* ContextObject,FSoundBase* Sound,float VolumeMultiplier,float FadeInSeconds);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.DetachCue
// Offset::0x2197590;
void FEmbarkFXDirectorStatics::DetachCue(FEmbarkFXDirectorContext Context,FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.DetachFX
// Offset::0x2199AD0;
void FEmbarkFXDirectorStatics::DetachFX(FObject* ContextObject,FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.EndContext
// Offset::0x2197B10;
void FEmbarkFXDirectorStatics::EndContext(FEmbarkFXDirectorContext Context);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.EqualHandles
// Offset::0x1FF3A20;
bool FEmbarkFXDirectorStatics::EqualHandles(FEmbarkFXHandle Handle1,FEmbarkFXHandle Handle2);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.GetComponent
// Offset::0x2196B60;
FActorComponent* FEmbarkFXDirectorStatics::GetComponent(FEmbarkFXDirectorContext Context,FEmbarkFXHandle Handle,FObject* Class);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.InvalidateHandle
// Offset::0x2196CB0;
void FEmbarkFXDirectorStatics::InvalidateHandle(FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.IsAudible
// Offset::0x219AC90;
bool FEmbarkFXDirectorStatics::IsAudible(FObject* ContextObject,FVector Location,float MaxDistance);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.IsCuePendingOrActive
// Offset::0x2196F30;
bool FEmbarkFXDirectorStatics::IsCuePendingOrActive(FEmbarkFXDirectorContext Context,FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.IsEnabled
// Offset::0x219ADD0;
bool FEmbarkFXDirectorStatics::IsEnabled(FObject* WorldContextObject);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.IsValidHandle
// Offset::0x2196D50;
bool FEmbarkFXDirectorStatics::IsValidHandle(FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.NextOrCreateDynamicMaterialInstance
// Offset::0x2197DF0;
FMaterialInstanceDynamic* FEmbarkFXDirectorStatics::NextOrCreateDynamicMaterialInstance(FObject* ContextObject,FMaterialInterface* Material);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.PoolDynamicMaterialInstance
// Offset::0x2197D10;
void FEmbarkFXDirectorStatics::PoolDynamicMaterialInstance(FObject* ContextObject,FMaterialInstanceDynamic* DynamicMaterialInstance);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.ReattachCue
// Offset::0x2197420;
void FEmbarkFXDirectorStatics::ReattachCue(FEmbarkFXDirectorContext Context,FEmbarkFXHandle Handle,FEmbarkFXAttachmentParams AttachmentParams);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.RemoveCue
// Offset::0x2197270;
void FEmbarkFXDirectorStatics::RemoveCue(FEmbarkFXDirectorContext Context,FEmbarkFXHandle Handle,float FadeOutSeconds,bool bImmediate);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.RemoveTickPrerequisiteActor
// Offset::0x2198090;
void FEmbarkFXDirectorStatics::RemoveTickPrerequisiteActor(FObject* ContextObject,FActor* PrerequisiteActor);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.RemoveTickPrerequisiteComponent
// Offset::0x2197ED0;
void FEmbarkFXDirectorStatics::RemoveTickPrerequisiteComponent(FObject* ContextObject,FActorComponent* PrerequisiteComponent);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.SetAllowForceFeedback
// Offset::0x219ABB0;
void FEmbarkFXDirectorStatics::SetAllowForceFeedback(FObject* ContextObject,bool bNewValue);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.SetAutoPosition
// Offset::0x2196610;
void FEmbarkFXDirectorStatics::SetAutoPosition(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,enum class EEmbarkFXAutoPosition AutoPosition,enum class EEmbarkFXAutoPositionFunc AutoPositionFunc);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.SetAutoRemove
// Offset::0x2197030;
void FEmbarkFXDirectorStatics::SetAutoRemove(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,bool bAutoRemove);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.SetAutoSpatialHash
// Offset::0x21963D0;
void FEmbarkFXDirectorStatics::SetAutoSpatialHash(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,float SpatialHashSize);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.SetBinding
// Offset::0x2193EE0;
void FEmbarkFXDirectorStatics::SetBinding(FEmbarkFXDirectorContext Context,enum class EEmbarkFXBinding Binding);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.SetForegroundFlags
// Offset::0x21961A0;
void FEmbarkFXDirectorStatics::SetForegroundFlags(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,enum class EEmbarkFXForegroundFlags Flags);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.SetInstanceTag
// Offset::0x2196890;
void FEmbarkFXDirectorStatics::SetInstanceTag(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FObject* Instantiator,char Specifier,int32_t MinCondition);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.StopFX
// Offset::0x2199940;
void FEmbarkFXDirectorStatics::StopFX(FObject* ContextObject,FEmbarkFXHandle Handle,float FadeOutSeconds,bool bImmediate);


// Function  EmbarkFXDirector.EmbarkFXDirectorStatics.UpdateCue_GetRef
// Offset::0x2197690;
FEmbarkFXCue FEmbarkFXDirectorStatics::UpdateCue_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXDirectorContextMixins.AddCue_GetRef
// Offset::0x2197A50;
FEmbarkFXCue FEmbarkFXDirectorContextMixins::AddCue_GetRef(FEmbarkFXDirectorContext Context);


// Function  EmbarkFXDirector.EmbarkFXDirectorContextMixins.SetBinding
// Offset::0x2193EE0;
void FEmbarkFXDirectorContextMixins::SetBinding(FEmbarkFXDirectorContext Context,enum class EEmbarkFXBinding Binding);


// Function  EmbarkFXDirector.EmbarkFXDirectorContextMixins.UpdateCue_GetRef
// Offset::0x2197690;
FEmbarkFXCue FEmbarkFXDirectorContextMixins::UpdateCue_GetRef(FEmbarkFXDirectorContext Context,FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXHandleMixins.CheckCueInvariants
// Offset::0x2196DF0;
FString FEmbarkFXHandleMixins::CheckCueInvariants(FEmbarkFXDirectorContext Context,FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXHandleMixins.DetachCue
// Offset::0x219E4F0;
void FEmbarkFXHandleMixins::DetachCue(FEmbarkFXHandle Handle,FEmbarkFXDirectorContext Context);


// Function  EmbarkFXDirector.EmbarkFXHandleMixins.InvalidateHandle
// Offset::0x2196CB0;
void FEmbarkFXHandleMixins::InvalidateHandle(FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXHandleMixins.IsCuePendingOrActive
// Offset::0x219E890;
bool FEmbarkFXHandleMixins::IsCuePendingOrActive(FEmbarkFXHandle Handle,FEmbarkFXDirectorContext Context);


// Function  EmbarkFXDirector.EmbarkFXHandleMixins.IsValidHandle
// Offset::0x219E7B0;
bool FEmbarkFXHandleMixins::IsValidHandle(FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXHandleMixins.Pack
// Offset::0x219E700;
int64_t FEmbarkFXHandleMixins::Pack(FEmbarkFXHandle Handle);


// Function  EmbarkFXDirector.EmbarkFXHandleMixins.RemoveCue
// Offset::0x219E330;
void FEmbarkFXHandleMixins::RemoveCue(FEmbarkFXHandle Handle,FEmbarkFXDirectorContext Context,float FadeOutSeconds,bool bImmediate);


// Function  EmbarkFXDirector.EmbarkFXHandleMixins.Unpack
// Offset::0x219E610;
void FEmbarkFXHandleMixins::Unpack(FEmbarkFXHandle Handle,int64_t Value);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddAttachmentParams
// Offset::0x21A57E0;
void FEmbarkFXCueMixins::AddAttachmentParams(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FEmbarkFXAttachmentParams AttachmentParams);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddAttachmentParams_GetRef
// Offset::0x21A5A50;
FEmbarkFXAttachmentParams FEmbarkFXCueMixins::AddAttachmentParams_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FSceneComponent* AttachToComponent);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddAudioParams
// Offset::0x21A4E30;
void FEmbarkFXCueMixins::AddAudioParams(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FEmbarkFXAudioParams AudioParams);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddAudioParams_GetRef
// Offset::0x21A50C0;
FEmbarkFXAudioParams FEmbarkFXCueMixins::AddAudioParams_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FSoundBase* Sound);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddBool
// Offset::0x21A4140;
void FEmbarkFXCueMixins::AddBool(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,bool bValue);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddBoolArray
// Offset::0x21A2290;
void FEmbarkFXCueMixins::AddBoolArray(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,TArray<bool> Array);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddBoolArray_GetRef
// Offset::0x21A09D0;
TArray<bool> FEmbarkFXCueMixins::AddBoolArray_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddCallbackParams
// Offset::0x2194940;
void FEmbarkFXCueMixins::AddCallbackParams(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,FEmbarkFXCallbackParams CallbackParams);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddCallbackParams_GetRef
// Offset::0x21A4640;
FEmbarkFXCallbackParams FEmbarkFXCueMixins::AddCallbackParams_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FObject* Object,FName FunctionName);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddCameraShakeParams_GetRef
// Offset::0x21A43E0;
FEmbarkFXCameraShakeParams FEmbarkFXCueMixins::AddCameraShakeParams_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FCameraShakeBase* CameraShake);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddColor
// Offset::0x21A2E20;
void FEmbarkFXCueMixins::AddColor(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,FLinearColor Value);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddColorArray
// Offset::0x21A1270;
void FEmbarkFXCueMixins::AddColorArray(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,TArray<FLinearColor> Array);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddColorArray_GetRef
// Offset::0x219F650;
TArray<FLinearColor> FEmbarkFXCueMixins::AddColorArray_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddDecalParams
// Offset::0x21A48F0;
void FEmbarkFXCueMixins::AddDecalParams(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FEmbarkFXDecalParams DecalParams);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddDecalParams_GetRef
// Offset::0x21A4BB0;
FEmbarkFXDecalParams FEmbarkFXCueMixins::AddDecalParams_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FMaterialInterface* Material);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddFloat
// Offset::0x21A39D0;
void FEmbarkFXCueMixins::AddFloat(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,float Value);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddFloatArray
// Offset::0x21A1FE0;
void FEmbarkFXCueMixins::AddFloatArray(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,TArray<float> Array);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddFloatArray_GetRef
// Offset::0x21A0350;
TArray<float> FEmbarkFXCueMixins::AddFloatArray_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddInt
// Offset::0x21A3C60;
void FEmbarkFXCueMixins::AddInt(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,int32_t Value);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddIntArray
// Offset::0x21A1D30;
void FEmbarkFXCueMixins::AddIntArray(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,TArray<int32_t> Array);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddIntArray_GetRef
// Offset::0x21A0690;
TArray<int32_t> FEmbarkFXCueMixins::AddIntArray_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddObject
// Offset::0x21A27D0;
void FEmbarkFXCueMixins::AddObject(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,FObject* Value);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddObjectArray
// Offset::0x21A0D10;
void FEmbarkFXCueMixins::AddObjectArray(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,TArray<FObject*> Array);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddObjectArray_GetRef
// Offset::0x219EFD0;
TArray<FObject*> FEmbarkFXCueMixins::AddObjectArray_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddParticleParams
// Offset::0x21A5330;
void FEmbarkFXCueMixins::AddParticleParams(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FEmbarkFXParticleParams ParticleParams);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddParticleParams_GetRef
// Offset::0x21A5590;
FEmbarkFXParticleParams FEmbarkFXCueMixins::AddParticleParams_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FNiagaraSystem* NiagaraSystem);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddPosition
// Offset::0x21A36E0;
void FEmbarkFXCueMixins::AddPosition(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,FVector Value);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddPositionArray
// Offset::0x21A1A80;
void FEmbarkFXCueMixins::AddPositionArray(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,TArray<FVector> Array);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddPositionArray_GetRef
// Offset::0x21A0010;
TArray<FVector> FEmbarkFXCueMixins::AddPositionArray_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddQuat
// Offset::0x21A3100;
void FEmbarkFXCueMixins::AddQuat(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,FQuat Value);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddQuatArray
// Offset::0x21A1520;
void FEmbarkFXCueMixins::AddQuatArray(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,TArray<FQuat> Array);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddQuatArray_GetRef
// Offset::0x219F990;
TArray<FQuat> FEmbarkFXCueMixins::AddQuatArray_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddStaticMeshDataInterface
// Offset::0x21A2540;
void FEmbarkFXCueMixins::AddStaticMeshDataInterface(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,FStaticMesh* Value);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddTransform
// Offset::0x21A2A60;
void FEmbarkFXCueMixins::AddTransform(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,FTransform Value);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddTransformArray
// Offset::0x21A0FC0;
void FEmbarkFXCueMixins::AddTransformArray(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,TArray<FTransform> Array);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddTransformArray_GetRef
// Offset::0x219F310;
TArray<FTransform> FEmbarkFXCueMixins::AddTransformArray_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddTrigger
// Offset::0x21A3EF0;
void FEmbarkFXCueMixins::AddTrigger(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddVector
// Offset::0x21A33F0;
void FEmbarkFXCueMixins::AddVector(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,FVector Value);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddVectorArray
// Offset::0x21A17D0;
void FEmbarkFXCueMixins::AddVectorArray(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,TArray<FVector> Array);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.AddVectorArray_GetRef
// Offset::0x219FCD0;
TArray<FVector> FEmbarkFXCueMixins::AddVectorArray_GetRef(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FName Name,int32_t OutIndex,int32_t Length);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.SetAutoPosition
// Offset::0x21A5F30;
void FEmbarkFXCueMixins::SetAutoPosition(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,enum class EEmbarkFXAutoPosition AutoPosition,enum class EEmbarkFXAutoPositionFunc AutoPositionFunc);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.SetAutoRemove
// Offset::0x21A61C0;
void FEmbarkFXCueMixins::SetAutoRemove(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,bool bAutoRemove);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.SetAutoSpatialHash
// Offset::0x21963D0;
void FEmbarkFXCueMixins::SetAutoSpatialHash(FEmbarkFXDirectorContext Context,FEmbarkFXCue Cue,float SpatialHashSize);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.SetForegroundFlags
// Offset::0x21A5CE0;
void FEmbarkFXCueMixins::SetForegroundFlags(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,enum class EEmbarkFXForegroundFlags Flags);


// Function  EmbarkFXDirector.EmbarkFXCueMixins.SetInstanceTag
// Offset::0x21A6410;
void FEmbarkFXCueMixins::SetInstanceTag(FEmbarkFXCue Cue,FEmbarkFXDirectorContext Context,FObject* Instantiator,char Specifier,int32_t MinCondition);


// Function  EmbarkGameplay.EmbarkFovHelpers.GetCustomFovModelViewProjectionMatrix
// Offset::0x21D5F50;
FMatrix FEmbarkFovHelpers::GetCustomFovModelViewProjectionMatrix(FObject* WorldContextObject,FMatrix TransformMatrix,float HorizontalFOV);


// Function  EmbarkGameplay.EmbarkFovHelpers.GetCustomFovWorldTransform
// Offset::0x21D60F0;
FTransform FEmbarkFovHelpers::GetCustomFovWorldTransform(FObject* WorldContextObject,FTransform Transform,float HorizontalFOV);


// Function  EmbarkGameplay.EmbarkFovHelpers.GetInverseMatrix
// Offset::0x21D6580;
FMatrix FEmbarkFovHelpers::GetInverseMatrix(FMatrix Matrix);


// Function  EmbarkGameplay.EmbarkFovHelpers.GetMatrixFromTransform
// Offset::0x21D6680;
FMatrix FEmbarkFovHelpers::GetMatrixFromTransform(FTransform Transform);


// Function  EmbarkGameplay.EmbarkFovHelpers.GetModelViewProjectionMatrix
// Offset::0x21D62E0;
FMatrix FEmbarkFovHelpers::GetModelViewProjectionMatrix(FObject* WorldContextObject,FTransform Transform);


// Function  EmbarkGameplay.EmbarkFovHelpers.GetViewProjectionMatrix
// Offset::0x21D6480;
FMatrix FEmbarkFovHelpers::GetViewProjectionMatrix(FObject* WorldContextObject);


// Function  EmbarkGameplay.EmbarkActor.BP_FellOutOfWorldEvent
// Offset::0x21D6F50;
void FEmbarkActor::BP_FellOutOfWorldEvent(FDamageType* DmgType);


// Function  EmbarkGameplay.EmbarkActor.BP_GetTeam
// Offset::0x21D70A0;
enum class EEmbarkTeamId FEmbarkActor::BP_GetTeam();


// Function  EmbarkGameplay.EmbarkActor.BP_OutsideWorldBoundsEvent
// Offset::0x21D6F30;
void FEmbarkActor::BP_OutsideWorldBoundsEvent();


// Function  EmbarkGameplay.EmbarkActor.BP_SetTeam
// Offset::0x21D70D0;
void FEmbarkActor::BP_SetTeam(enum class EEmbarkTeamId NewTeam);


// Function  EmbarkGameplay.EmbarkActor.GetASC
// Offset::0x21D7020;
FEmbarkAbilitySystemComponent* FEmbarkActor::GetASC();


// Function  EmbarkGameplay.EmbarkActor.GetOrCreateASC_Server
// Offset::0x21D7050;
FEmbarkAbilitySystemComponent* FEmbarkActor::GetOrCreateASC_Server();


// Function  EmbarkGameplay.EmbarkActor.HasASC
// Offset::0x21D6FF0;
bool FEmbarkActor::HasASC();


// Function  EmbarkGameplay.EmbarkActor.IntializeEmbarkActor
// Offset::0x3D30810;
void FEmbarkActor::IntializeEmbarkActor();


// Function  EmbarkGameplay.EmbarkActor.OnGameplayTagUpdated
// Offset::0x21D6E30;
void FEmbarkActor::OnGameplayTagUpdated(FGameplayTag Tag,bool TagExists);


// Function  EmbarkGameplay.EmbarkActor.OnRep_AbilitySystem
// Offset::0x21D7080;
void FEmbarkActor::OnRep_AbilitySystem();


// Function  EmbarkGameplay.EmbarkActor.ReceiveOnAbilitySystemCreated
// Offset::0x3D30810;
void FEmbarkActor::ReceiveOnAbilitySystemCreated(FEmbarkAbilitySystemComponent* EmbarkASC);


// Function  EmbarkGameplay.EmbarkActor.ReceiveOnAbilitySystemDestroyed
// Offset::0x3D30810;
void FEmbarkActor::ReceiveOnAbilitySystemDestroyed(FEmbarkAbilitySystemComponent* EmbarkASC);


// Function  EmbarkGameplay.EmbarkActor.ReceiveOnGameplayTagUpdated
// Offset::0x3D30810;
void FEmbarkActor::ReceiveOnGameplayTagUpdated(FGameplayTag Tag,bool TagExists);


// Function  EmbarkGameplay.EmbarkActor.ReceiveOnPostPhysics
// Offset::0x3D30810;
void FEmbarkActor::ReceiveOnPostPhysics();


// Function  EmbarkGameplay.EmbarkActor.ReceiveOnPrePhysics
// Offset::0x3D30810;
void FEmbarkActor::ReceiveOnPrePhysics();


// Function  EmbarkGameplay.EmbarkActor.ReceiveOnRepOwner
// Offset::0x3D30810;
void FEmbarkActor::ReceiveOnRepOwner();


// Function  EmbarkGameplay.EmbarkActor.ReceivePostInitializeComponents
// Offset::0x3D30810;
void FEmbarkActor::ReceivePostInitializeComponents();


// Function  EmbarkGameplay.EmbarkActor.ReceivePreInitializeComponents
// Offset::0x3D30810;
void FEmbarkActor::ReceivePreInitializeComponents();


// Function  EmbarkGameplay.EmbarkActor.ReceiveTakeDamage
// Offset::0x3D30810;
float FEmbarkActor::ReceiveTakeDamage(float DamageAmount,FDamageEvent DamageEvent,FController* EventInstigator,FActor* DamageCauser);


// Function  EmbarkGameplay.EmbarkActor.RegisterOnPostPhysicsEvent
// Offset::0x21D6DF0;
void FEmbarkActor::RegisterOnPostPhysicsEvent();


// Function  EmbarkGameplay.EmbarkActor.RegisterOnPrePhysicsEvent
// Offset::0x21D6E10;
void FEmbarkActor::RegisterOnPrePhysicsEvent();


// Function  EmbarkGameplay.EmbarkActor.SetDefaultNetDormancy
// Offset::0x21D6D10;
void FEmbarkActor::SetDefaultNetDormancy(enum class ENetDormancy DefaultNetDormancy);


// Function  EmbarkGameplay.EmbarkActor.UnregisterOnPostPhysicsEvent
// Offset::0x21D6DB0;
void FEmbarkActor::UnregisterOnPostPhysicsEvent();


// Function  EmbarkGameplay.EmbarkActor.UnregisterOnPrePhysicsEvent
// Offset::0x21D6DD0;
void FEmbarkActor::UnregisterOnPrePhysicsEvent();


// Function  EmbarkGameplay.EmbarkActorComponent.ReceiveInitializeComponent
// Offset::0x3D30810;
void FEmbarkActorComponent::ReceiveInitializeComponent();


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.GetCurrentInterpolationTimestamp
// Offset::0x2405E60;
float FStateInterpolatorComponent::GetCurrentInterpolationTimestamp();


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.GetCurrentTotalInterpolationDelay
// Offset::0x2405EC0;
float FStateInterpolatorComponent::GetCurrentTotalInterpolationDelay();


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.GetDefaultStateInstanceId
// Offset::0x2405E00;
FStateInstanceId FStateInterpolatorComponent::GetDefaultStateInstanceId();


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.GetEstimatedLocalInterpolationDelayTarget
// Offset::0x2405E90;
float FStateInterpolatorComponent::GetEstimatedLocalInterpolationDelayTarget();


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.GetLatestSyncTimestamp
// Offset::0x2405E30;
float FStateInterpolatorComponent::GetLatestSyncTimestamp();


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.GetStateInstanceId
// Offset::0x2405D50;
FStateInstanceId FStateInterpolatorComponent::GetStateInstanceId(int32_t Key);


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.GetStateInterpolator
// Offset::0x2405CB0;
FStateInterpolator* FStateInterpolatorComponent::GetStateInterpolator(FStateInterpolator* StateClass);


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.GetStateInterpolatorSubsystem
// Offset::0x2405C80;
FStateInterpolatorSubsystem* FStateInterpolatorComponent::GetStateInterpolatorSubsystem();


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.HasAnyActiveInterpolator
// Offset::0x2405F10;
bool FStateInterpolatorComponent::HasAnyActiveInterpolator();


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.IsInitialized
// Offset::0x2405C50;
bool FStateInterpolatorComponent::IsInitialized();


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.PreUpdateEvent_AddUFunction
// Offset::0x2405B60;
void FStateInterpolatorComponent::PreUpdateEvent_AddUFunction(FObject* Object,FName FunctionName);


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.PreUpdateEvent_RemoveFunction
// Offset::0x2405A70;
void FStateInterpolatorComponent::PreUpdateEvent_RemoveFunction(FObject* Object,FName FunctionName);


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.PreUpdateInputForOwnerEvent_AddUFunction
// Offset::0x2405980;
void FStateInterpolatorComponent::PreUpdateInputForOwnerEvent_AddUFunction(FObject* Object,FName FunctionName);


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.PreUpdateInputForOwnerEvent_RemoveUFunction
// Offset::0x2405890;
void FStateInterpolatorComponent::PreUpdateInputForOwnerEvent_RemoveUFunction(FObject* Object,FName FunctionName);


// Function  EmbarkStateInterpolator.StateInterpolatorComponent.UpdateSettings
// Offset::0x2405EF0;
void FStateInterpolatorComponent::UpdateSettings();


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.InterpolateFromNewTransform
// Offset::0x21DA780;
void FEmbarkActorTransformInterpolatorComponent::InterpolateFromNewTransform(FTransform NewTransform,FVector LinearVelocity,FVector AngularVelocity,bool bEnableInterpolatorIfDisabled,bool bDisablePredictionIfEnabled);


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.InterpolateFromNewTransformWithTransitionPeriod
// Offset::0x21DA440;
void FEmbarkActorTransformInterpolatorComponent::InterpolateFromNewTransformWithTransitionPeriod(FTransform NewTransform,float InPredictedTransformTransitionPeriod,FDelegate InPredictedTransformDelegate,FVector PredictedVelocity,FVector LinearVelocity,FVector AngularVelocity,bool bEnableInterpolatorIfDisabled);


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.IsInterpolatorEnabled
// Offset::0x21DA1E0;
bool FEmbarkActorTransformInterpolatorComponent::IsInterpolatorEnabled();


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.OnRep_RootTransform
// Offset::0x21D9A70;
void FEmbarkActorTransformInterpolatorComponent::OnRep_RootTransform();


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.OnSleep_Server
// Offset::0x21D9B70;
void FEmbarkActorTransformInterpolatorComponent::OnSleep_Server(FPrimitiveComponent* Component,FName bone);


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.OnWake_Server
// Offset::0x21D9A90;
void FEmbarkActorTransformInterpolatorComponent::OnWake_Server(FPrimitiveComponent* Component,FName bone);


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.ResetInterpolationState
// Offset::0x21DA310;
void FEmbarkActorTransformInterpolatorComponent::ResetInterpolationState();


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.SetAngularVelocity_Server
// Offset::0x21D9C50;
void FEmbarkActorTransformInterpolatorComponent::SetAngularVelocity_Server(FVector InAngularVelocity);


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.SetEnableFastReplicationDefault
// Offset::0x21DA0F0;
void FEmbarkActorTransformInterpolatorComponent::SetEnableFastReplicationDefault(bool bInCanSimulatePhysics,bool bInStartsInSleeping);


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.SetInterpolatorEnabled
// Offset::0x21DA330;
void FEmbarkActorTransformInterpolatorComponent::SetInterpolatorEnabled(bool bEnabled,bool bSkipSetTransformRightAway);


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.SetShouldUpdateActorTransform
// Offset::0x21DA270;
void FEmbarkActorTransformInterpolatorComponent::SetShouldUpdateActorTransform(bool bEnabled);


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.StopUsingPredictedTransform
// Offset::0x21DA420;
void FEmbarkActorTransformInterpolatorComponent::StopUsingPredictedTransform();


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.TryGetInterpolatedAngularVelocity
// Offset::0x21D9F10;
bool FEmbarkActorTransformInterpolatorComponent::TryGetInterpolatedAngularVelocity(FVector OutAngularVelocity);


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.TryGetInterpolatedLinearVelocity
// Offset::0x21DA000;
bool FEmbarkActorTransformInterpolatorComponent::TryGetInterpolatedLinearVelocity(FVector OutLinearVelocity);


// Function  EmbarkGameplay.EmbarkActorTransformInterpolatorComponent.TryGetInterpolatedTransform
// Offset::0x21D9D70;
bool FEmbarkActorTransformInterpolatorComponent::TryGetInterpolatedTransform(FTransform OutTransform);


// Function  EmbarkGameplay.WidgetMixinLibrary.SetRenderAngle
// Offset::0x21DB540;
void FWidgetMixinLibrary::SetRenderAngle(FWidget* Widget,float Angle);


// Function  EmbarkGameplay.ActorMixinLibrary.GetInstigator
// Offset::0x21DB940;
FPawn* FActorMixinLibrary::GetInstigator(FActor* Actor);


// Function  EmbarkGameplay.ActorMixinLibrary.GetInstigatorController
// Offset::0x21DB890;
FController* FActorMixinLibrary::GetInstigatorController(FActor* Actor);


// Function  EmbarkGameplay.ActorMixinLibrary.TakeDamage
// Offset::0x21DB9F0;
void FActorMixinLibrary::TakeDamage(FActor* Actor,float DamageAmount,FDamageEvent DamageEvent,FController* EventInstigator,FActor* DamageCauser);


// Function  EmbarkGameplay.PlayerStateMixinLibrary.SetScore
// Offset::0x21DBF80;
void FPlayerStateMixinLibrary::SetScore(FPlayerState* PlayerState,float NewScore);


// Function  EmbarkGameplay.ActorComponentMixinLibrary.RegisterComponent
// Offset::0x21DC3D0;
void FActorComponentMixinLibrary::RegisterComponent(FActorComponent* ComponentToRegister);


// Function  EmbarkGameplay.ActorComponentMixinLibrary.SetCanEverAffectNavigation
// Offset::0x21DC2E0;
void FActorComponentMixinLibrary::SetCanEverAffectNavigation(FActorComponent* ActorComponent,bool bValue);


// Function  EmbarkGameplay.InputComponentMixinLibrary.ClearBindingValues
// Offset::0x21DC840;
void FInputComponentMixinLibrary::ClearBindingValues(FInputComponent* InputComponent);


// Function  EmbarkGameplay.InputComponentMixinLibrary.HasBindings
// Offset::0x21DC790;
bool FInputComponentMixinLibrary::HasBindings(FInputComponent* InputComponent);


// Function  EmbarkGameplay.DataTableMixinLibrary.FindTableCellAsFloat
// Offset::0x21DCBF0;
bool FDataTableMixinLibrary::FindTableCellAsFloat(FDataTable* DataTable,FName RowName,FName ColumnName,float OutResultFloat);


// Function  EmbarkGameplay.DataTableMixinLibrary.FindTableCellAsString
// Offset::0x21DCE50;
bool FDataTableMixinLibrary::FindTableCellAsString(FDataTable* DataTable,FName RowName,FName ColumnName,FString OutResultString);


// Function  EmbarkGameplay.StringMixinLibrary.RemoveAt
// Offset::0x21DD580;
void FStringMixinLibrary::RemoveAt(FString StringToChange,int32_t StartIdx,int32_t Count);


// Function  EmbarkGameplay.SoundWaveMixinLibrary.GetIsMature
// Offset::0x21DDCC0;
bool FSoundWaveMixinLibrary::GetIsMature(FSoundWave* SoundWave);


// Function  EmbarkGameplay.SoundWaveMixinLibrary.SetIsMature
// Offset::0x21DDBB0;
void FSoundWaveMixinLibrary::SetIsMature(FSoundWave* SoundWave,bool bMature);


// Function  EmbarkGameplay.SoundWaveMixinLibrary.SetSubtitlesText
// Offset::0x21DD950;
void FSoundWaveMixinLibrary::SetSubtitlesText(FSoundWave* SoundWave,int32_t Index,FText Text);


// Function  EmbarkGameplay.SubtitleCueMixinLibrary.SetText
// Offset::0x21DE110;
void FSubtitleCueMixinLibrary::SetText(FSubtitleCue SubtitleCue,FText Text);


// Function  EmbarkGameplay.WorldMixinLibrary.GetEnvQueryManager
// Offset::0x21DE660;
FEnvQueryManager* FWorldMixinLibrary::GetEnvQueryManager(FWorld* World);


// Function  EmbarkGameplay.WorldMixinLibrary.GetWorldComposition
// Offset::0x21DE5B0;
FWorldComposition* FWorldMixinLibrary::GetWorldComposition(FWorld* World);


// Function  EmbarkGameplay.PawnMixinLibrary.GetAutoPossessAI
// Offset::0x21DEB00;
enum class EAutoPossessAI FPawnMixinLibrary::GetAutoPossessAI(FPawn* Pawn);


// Function  EmbarkGameplay.PawnMixinLibrary.SetPlayerState
// Offset::0x21DEA10;
void FPawnMixinLibrary::SetPlayerState(FPawn* Pawn,FPlayerState* PlayerState);


// Function  EmbarkGameplay.MaterialParameterCollectionMixinLibrary.SetVectorDefaultValue
// Offset::0x21DEEB0;
void FMaterialParameterCollectionMixinLibrary::SetVectorDefaultValue(FMaterialParameterCollection* MaterialParameterCollection,int32_t Index,FLinearColor DefaultValue);


// Function  EmbarkGameplay.AIControllerMixinLibrary.GetPerceptionComponent
// Offset::0x21DF280;
FAIPerceptionComponent* FAIControllerMixinLibrary::GetPerceptionComponent(FAIController* AIController);


// Function  EmbarkGameplay.ConeConstraintMixinLibrary.SetIsSoftConstraint
// Offset::0x21DF5C0;
void FConeConstraintMixinLibrary::SetIsSoftConstraint(FConeConstraint Constraint,bool bValue);


// Function  EmbarkGameplay.TwistConstraintMixinLibrary.SetIsSoftConstraint
// Offset::0x21DF940;
void FTwistConstraintMixinLibrary::SetIsSoftConstraint(FTwistConstraint Constraint,bool bValue);


// Function  EmbarkGameplay.LinearConstraintMixinLibrary.SetIsSoftConstraint
// Offset::0x21DFCB0;
void FLinearConstraintMixinLibrary::SetIsSoftConstraint(FLinearConstraint Constraint,bool bValue);


// Function  EmbarkGameplay.ConstraintInstanceMixinLibrary.SetScaleLinearLimits
// Offset::0x21E0020;
void FConstraintInstanceMixinLibrary::SetScaleLinearLimits(FConstraintInstance ConstraintInstance,bool bValue);


// Function  EmbarkGameplay.ConstraintProfilePropertiesMixinLibrary.SetParentDominates
// Offset::0x21E0460;
void FConstraintProfilePropertiesMixinLibrary::SetParentDominates(FConstraintProfileProperties ConstraintProfileProperties,bool bValue);


// Function  EmbarkGameplay.BTServiceMixinLibrary.SetIntervalAndRandomDeviation
// Offset::0x21E0810;
void FBTServiceMixinLibrary::SetIntervalAndRandomDeviation(FBTService* BTService,float Interval,float RandomDeviation);


// Function  EmbarkGameplay.AIStimulusMixinLibrary.IsSensedBy
// Offset::0x21E0BC0;
bool FAIStimulusMixinLibrary::IsSensedBy(FAIStimulus AIStimulus,FAISense* SenseClass);


// Function  EmbarkGameplay.AIPerceptionComponentLibrary.GetActorLocation
// Offset::0x21E10A0;
FVector FAIPerceptionComponentLibrary::GetActorLocation(FAIPerceptionComponent* AIPerceptionComponent,FActor* Actor);


// Function  EmbarkGameplay.AnimInstanceScriptMixinLibrary.GetCurveValueDefault
// Offset::0x21E1430;
bool FAnimInstanceScriptMixinLibrary::GetCurveValueDefault(FAnimInstance* AnimInstance,FName CurveName,float OutValue);


// Function  EmbarkGameplay.CharacterMovementComponentScriptMixinLibrary.ResetToDefaultMovementMode
// Offset::0x21E17F0;
void FCharacterMovementComponentScriptMixinLibrary::ResetToDefaultMovementMode(FCharacterMovementComponent* MovementComponent);


// Function  EmbarkGameplay.PrimitiveComponentMixinLibrary.CheckForOverlaps
// Offset::0x21E1B00;
void FPrimitiveComponentMixinLibrary::CheckForOverlaps(FPrimitiveComponent* InPrimitiveComponent);


// Function  EmbarkGameplay.PrimitiveComponentMixinLibrary.GetPrimitiveBodyInstance
// Offset::0x21E1B90;
FBodyInstance FPrimitiveComponentMixinLibrary::GetPrimitiveBodyInstance(FPrimitiveComponent* InPrimitiveComponent,bool bOutSucess,FName InBoneName,bool bGetWelded);


// Function  EmbarkGameplay.BodyInstanceMixinLibrary.GetBodyMass
// Offset::0x21E2310;
float FBodyInstanceMixinLibrary::GetBodyMass(FBodyInstance InBodyInstance);


// Function  EmbarkGameplay.BodyInstanceMixinLibrary.GetBoneName
// Offset::0x21E24B0;
FName FBodyInstanceMixinLibrary::GetBoneName(FBodyInstance InBodyInstance);


// Function  EmbarkGameplay.BodyInstanceMixinLibrary.GetInstanceBodyIndex
// Offset::0x21E25B0;
int32_t FBodyInstanceMixinLibrary::GetInstanceBodyIndex(FBodyInstance InBodyInstance);


// Function  EmbarkGameplay.BodyInstanceMixinLibrary.GetOwnerComponent
// Offset::0x21E23E0;
FPrimitiveComponent* FBodyInstanceMixinLibrary::GetOwnerComponent(FBodyInstance InBodyInstance);


// Function  EmbarkGameplay.BodyInstanceMixinLibrary.GetPhysicsBodyAngularVelocityRad
// Offset::0x21E29B0;
FVector FBodyInstanceMixinLibrary::GetPhysicsBodyAngularVelocityRad(FBodyInstance BodyInstance);


// Function  EmbarkGameplay.BodyInstanceMixinLibrary.GetPhysicsBodyBounds
// Offset::0x21E28B0;
FBox FBodyInstanceMixinLibrary::GetPhysicsBodyBounds(FBodyInstance BodyInstance);


// Function  EmbarkGameplay.BodyInstanceMixinLibrary.GetPhysicsBodyLinearVelocity
// Offset::0x21E2AA0;
FVector FBodyInstanceMixinLibrary::GetPhysicsBodyLinearVelocity(FBodyInstance BodyInstance);


// Function  EmbarkGameplay.BodyInstanceMixinLibrary.GetWeldedParent
// Offset::0x21E2680;
FBodyInstance FBodyInstanceMixinLibrary::GetWeldedParent(FBodyInstance InBodyInstance,bool bOutSucess);


// Function  EmbarkGameplay.BodyInstanceMixinLibrary.IsWelded
// Offset::0x21E27E0;
bool FBodyInstanceMixinLibrary::IsWelded(FBodyInstance InBodyInstance);


// Function  EmbarkGameplay.BodyInstanceMixinLibrary.SetEnableGravity
// Offset::0x21E21F0;
void FBodyInstanceMixinLibrary::SetEnableGravity(FBodyInstance InBodyInstance,bool bGravityEnabled);


// Function  EmbarkGameplay.SimpleConstructionScriptMixinLibrary.GetAllNodes
// Offset::0x21E32D0;
void FSimpleConstructionScriptMixinLibrary::GetAllNodes(FSimpleConstructionScript* Script,TArray<FSCS_Node*> Nodes);


// Function  EmbarkGameplay.ClassScriptMixinLibrary.GetSimpleConstructionScript
// Offset::0x21E3780;
FSimpleConstructionScript* FClassScriptMixinLibrary::GetSimpleConstructionScript(FObject* Class);


// Function  EmbarkGameplay.ClassScriptMixinLibrary.GetSuperStruct
// Offset::0x21E36E0;
FStruct* FClassScriptMixinLibrary::GetSuperStruct(FObject* Class);


// Function  EmbarkGameplay.SCSNodeScriptMixinLibrary.GetActualComponentTemplate
// Offset::0x21E3BF0;
FActorComponent* FSCSNodeScriptMixinLibrary::GetActualComponentTemplate(FSCS_Node* Node,FObject* Class);


// Function  EmbarkGameplay.FBoxScriptMixinLibrary.GetBoxPoints
// Offset::0x21E4050;
TArray<FVector> FFBoxScriptMixinLibrary::GetBoxPoints(FBox Box);


// Function  EmbarkGameplay.QuatScriptMixinLibrary.DotProduct
// Offset::0x21E47D0;
float FQuatScriptMixinLibrary::DotProduct(FQuat A,FQuat B);


// Function  EmbarkGameplay.QuatScriptMixinLibrary.ShortestDelta
// Offset::0x21E4390;
FQuat FQuatScriptMixinLibrary::ShortestDelta(FQuat Source,FQuat Target);


// Function  EmbarkGameplay.CameraComponentMixinLibrary.AddOrUpdateBlendable
// Offset::0x21E4E70;
void FCameraComponentMixinLibrary::AddOrUpdateBlendable(FCameraComponent* CameraComponent,FMaterialInterface* MaterialInterface,float Weight);


// Function  EmbarkGameplay.CameraComponentMixinLibrary.RemoveBlendable
// Offset::0x21E4C40;
void FCameraComponentMixinLibrary::RemoveBlendable(FCameraComponent* CameraComponent,FMaterialInterface* MaterialInterface);


// Function  EmbarkGameplay.EmbarkComponentSelectionMixinLibrary.GetComponent
// Offset::0x21E89B0;
FActorComponent* FEmbarkComponentSelectionMixinLibrary::GetComponent(FEmbarkComponentSelection ComponentSelection,FObject* WorldContextObject,FActor* Owner);


// Function  EmbarkGameplay.EmbarkConvexVolumeMixinLibrary.CreateConvexVolume
// Offset::0x21E9680;
FEmbarkConvexVolume FEmbarkConvexVolumeMixinLibrary::CreateConvexVolume(FTransform Transform,float HalfFOVX,float HalfFOVY,float MinZ,float MaxZ);


// Function  EmbarkGameplay.EmbarkConvexVolumeMixinLibrary.GetConvexVolumePlanes
// Offset::0x21E8E10;
TArray<FPlane> FEmbarkConvexVolumeMixinLibrary::GetConvexVolumePlanes(FEmbarkConvexVolume ConvexVolume);


// Function  EmbarkGameplay.EmbarkConvexVolumeMixinLibrary.IntersectBox
// Offset::0x21E92D0;
bool FEmbarkConvexVolumeMixinLibrary::IntersectBox(FEmbarkConvexVolume ConvexVolume,FVector Origin,FVector Translation,FVector Extent);


// Function  EmbarkGameplay.EmbarkConvexVolumeMixinLibrary.IntersectLineSegment
// Offset::0x21E8F50;
bool FEmbarkConvexVolumeMixinLibrary::IntersectLineSegment(FEmbarkConvexVolume ConvexVolume,FVector Start,FVector End);


// Function  EmbarkGameplay.EmbarkConvexVolumeMixinLibrary.IntersectSphere
// Offset::0x21E9110;
bool FEmbarkConvexVolumeMixinLibrary::IntersectSphere(FEmbarkConvexVolume ConvexVolume,FVector Origin,float Radius);


// Function  EmbarkGameplay.EmbarkConvexVolumeMixinLibrary.UpdateConvexVolume
// Offset::0x21E94E0;
void FEmbarkConvexVolumeMixinLibrary::UpdateConvexVolume(FEmbarkConvexVolume ConvexVolume,FTransform NewTransform);


// Function  EmbarkGameplay.EmbarkEngineSubsystem.OnDeinitialized
// Offset::0x3D30810;
void FEmbarkEngineSubsystem::OnDeinitialized();


// Function  EmbarkGameplay.EmbarkEngineSubsystem.OnInitialized
// Offset::0x3D30810;
void FEmbarkEngineSubsystem::OnInitialized();


// Function  EmbarkGameplay.EmbarkBlackBoardFastReplicatorBucketTransformInterpolator.OnRep_ActorTransformCollection
// Offset::0x21EA8A0;
void FEmbarkBlackBoardFastReplicatorBucketTransformInterpolator::OnRep_ActorTransformCollection();


// Function  EmbarkGameplay.EmbarkGameInstance.BP_ReturnToMainMenu
// Offset::0x21EAFF0;
void FEmbarkGameInstance::BP_ReturnToMainMenu();


// Function  EmbarkGameplay.EmbarkGameInstance.IsGameplayMap
// Offset::0x3D30810;
bool FEmbarkGameInstance::IsGameplayMap();


// Function  EmbarkGameplay.EmbarkGameInstance.IsMainMenu
// Offset::0x3D30810;
bool FEmbarkGameInstance::IsMainMenu();


// Function  EmbarkGameplay.EmbarkGameInstance.SetLocalEncryptionKey
// Offset::0x21EAF40;
void FEmbarkGameInstance::SetLocalEncryptionKey(FString Base64Bytes);


// Function  EmbarkGameplay.EmbarkGameInstance.SetQuilkinRoutingToken
// Offset::0x21EAD90;
void FEmbarkGameInstance::SetQuilkinRoutingToken(FString Base64Bytes);


// Function  EmbarkGameplay.EmbarkGameInstance.SetUserEncryptionKey
// Offset::0x21EAE40;
void FEmbarkGameInstance::SetUserEncryptionKey(FString UserIdString,FString Base64Bytes);


// Function  Engine.GameModeBase.CanSpectate
// Offset::0x63977D0;
bool FGameModeBase::CanSpectate(FPlayerController* Viewer,FPlayerState* ViewTarget);


// Function  Engine.GameModeBase.ChangeName
// Offset::0x6397680;
void FGameModeBase::ChangeName(FController* Controller,FString NewName,bool bNameChange);


// Function  Engine.GameModeBase.ChoosePlayerStart
// Offset::0x63975E0;
FActor* FGameModeBase::ChoosePlayerStart(FController* Player);


// Function  Engine.GameModeBase.FindPlayerStart
// Offset::0x63974E0;
FActor* FGameModeBase::FindPlayerStart(FController* Player,FString IncomingName);


// Function  Engine.GameModeBase.GetDefaultPawnClassForController
// Offset::0x6397B50;
FObject* FGameModeBase::GetDefaultPawnClassForController(FController* InController);


// Function  Engine.GameModeBase.GetNumPlayers
// Offset::0x6397B20;
int32_t FGameModeBase::GetNumPlayers();


// Function  Engine.GameModeBase.GetNumSpectators
// Offset::0x6397AF0;
int32_t FGameModeBase::GetNumSpectators();


// Function  Engine.GameModeBase.HandleStartingNewPlayer
// Offset::0x6397960;
void FGameModeBase::HandleStartingNewPlayer(FPlayerController* NewPlayer);


// Function  Engine.GameModeBase.HasMatchEnded
// Offset::0x6397AC0;
bool FGameModeBase::HasMatchEnded();


// Function  Engine.GameModeBase.HasMatchStarted
// Offset::0x63707C0;
bool FGameModeBase::HasMatchStarted();


// Function  Engine.GameModeBase.InitializeHUDForPlayer
// Offset::0x6387040;
void FGameModeBase::InitializeHUDForPlayer(FPlayerController* NewPlayer);


// Function  Engine.GameModeBase.InitStartSpot
// Offset::0x6396D40;
void FGameModeBase::InitStartSpot(FActor* StartSpot,FController* NewPlayer);


// Function  Engine.GameModeBase.K2_FindPlayerStart
// Offset::0x63973E0;
FActor* FGameModeBase::K2_FindPlayerStart(FController* Player,FString IncomingName);


// Function  Engine.GameModeBase.K2_OnChangeName
// Offset::0x3D30810;
void FGameModeBase::K2_OnChangeName(FController* Other,FString NewName,bool bNameChange);


// Function  Engine.GameModeBase.K2_OnLogout
// Offset::0x3D30810;
void FGameModeBase::K2_OnLogout(FController* ExitingController);


// Function  Engine.GameModeBase.K2_OnRestartPlayer
// Offset::0x3D30810;
void FGameModeBase::K2_OnRestartPlayer(FController* NewPlayer);


// Function  Engine.GameModeBase.K2_OnSwapPlayerControllers
// Offset::0x3D30810;
void FGameModeBase::K2_OnSwapPlayerControllers(FPlayerController* OldPC,FPlayerController* NewPC);


// Function  Engine.GameModeBase.K2_PostLogin
// Offset::0x3D30810;
void FGameModeBase::K2_PostLogin(FPlayerController* NewPlayer);


// Function  Engine.GameModeBase.MustSpectate
// Offset::0x63978C0;
bool FGameModeBase::MustSpectate(FPlayerController* NewPlayerController);


// Function  Engine.GameModeBase.PlayerCanRestart
// Offset::0x6397340;
bool FGameModeBase::PlayerCanRestart(FPlayerController* Player);


// Function  Engine.GameModeBase.ResetLevel
// Offset::0x6397A00;
void FGameModeBase::ResetLevel();


// Function  Engine.GameModeBase.RestartPlayer
// Offset::0x63972A0;
void FGameModeBase::RestartPlayer(FController* NewPlayer);


// Function  Engine.GameModeBase.RestartPlayerAtPlayerStart
// Offset::0x63971B0;
void FGameModeBase::RestartPlayerAtPlayerStart(FController* NewPlayer,FActor* StartSpot);


// Function  Engine.GameModeBase.RestartPlayerAtTransform
// Offset::0x6397070;
void FGameModeBase::RestartPlayerAtTransform(FController* NewPlayer,FTransform SpawnTransform);


// Function  Engine.GameModeBase.ReturnToMainMenuHost
// Offset::0x29C4760;
void FGameModeBase::ReturnToMainMenuHost();


// Function  Engine.GameModeBase.ShouldReset
// Offset::0x6397A20;
bool FGameModeBase::ShouldReset(FActor* ActorToReset);


// Function  Engine.GameModeBase.SpawnDefaultPawnAtTransform
// Offset::0x6396E30;
FPawn* FGameModeBase::SpawnDefaultPawnAtTransform(FController* NewPlayer,FTransform SpawnTransform);


// Function  Engine.GameModeBase.SpawnDefaultPawnFor
// Offset::0x6396F80;
FPawn* FGameModeBase::SpawnDefaultPawnFor(FController* NewPlayer,FActor* StartSpot);


// Function  Engine.GameModeBase.StartPlay
// Offset::0x1B80CF0;
void FGameModeBase::StartPlay();


// Function  Engine.GameMode.AbortMatch
// Offset::0x6395E60;
void FGameMode::AbortMatch();


// Function  Engine.GameMode.EndMatch
// Offset::0x6395EA0;
void FGameMode::EndMatch();


// Function  Engine.GameMode.GetMatchState
// Offset::0x6395F10;
FName FGameMode::GetMatchState();


// Function  Engine.GameMode.IsMatchInProgress
// Offset::0x6395EE0;
bool FGameMode::IsMatchInProgress();


// Function  Engine.GameMode.K2_OnSetMatchState
// Offset::0x3D30810;
void FGameMode::K2_OnSetMatchState(FName NewState);


// Function  Engine.GameMode.ReadyToEndMatch
// Offset::0x6353960;
bool FGameMode::ReadyToEndMatch();


// Function  Engine.GameMode.ReadyToStartMatch
// Offset::0x6395E30;
bool FGameMode::ReadyToStartMatch();


// Function  Engine.GameMode.RestartGame
// Offset::0x6395E80;
void FGameMode::RestartGame();


// Function  Engine.GameMode.Say
// Offset::0x6395D80;
void FGameMode::Say(FString Msg);


// Function  Engine.GameMode.StartMatch
// Offset::0x6395EC0;
void FGameMode::StartMatch();


// Function  EmbarkGameplay.EmbarkGameMode.GetInactivePlayers
// Offset::0x21EB8B0;
void FEmbarkGameMode::GetInactivePlayers(TArray<FPlayerState*> OutPlayerStates);


// Function  EmbarkGameplay.EmbarkGameMode.KickPlayer
// Offset::0x21EB960;
bool FEmbarkGameMode::KickPlayer(FPlayerController* KickedPlayer,char KickType,FText KickReason);


// Function  EmbarkGameplay.EmbarkGameMode.PreLogout
// Offset::0x3D30810;
void FEmbarkGameMode::PreLogout(FController* Exiting);


// Function  EmbarkGameplay.EmbarkGameMode.ReceiveGetSeamlessTravelActorList
// Offset::0x3D30810;
void FEmbarkGameMode::ReceiveGetSeamlessTravelActorList(bool bToTransition,TArray<FActor*> ActorList);


// Function  EmbarkGameplay.EmbarkGameMode.ReceiveHandleLeavingMap
// Offset::0x3D30810;
void FEmbarkGameMode::ReceiveHandleLeavingMap();


// Function  EmbarkGameplay.EmbarkGameMode.ReceiveHandleMatchAborted
// Offset::0x3D30810;
void FEmbarkGameMode::ReceiveHandleMatchAborted();


// Function  EmbarkGameplay.EmbarkGameMode.ReceiveHandleMatchHasEnded
// Offset::0x3D30810;
void FEmbarkGameMode::ReceiveHandleMatchHasEnded();


// Function  EmbarkGameplay.EmbarkGameMode.ReceiveHandleMatchHasStarted
// Offset::0x3D30810;
void FEmbarkGameMode::ReceiveHandleMatchHasStarted();


// Function  EmbarkGameplay.EmbarkGameMode.ReceiveHandleMatchIsWaitingToStart
// Offset::0x3D30810;
void FEmbarkGameMode::ReceiveHandleMatchIsWaitingToStart();


// Function  EmbarkGameplay.EmbarkGameMode.ReceiveInitPlayer
// Offset::0x3D30810;
void FEmbarkGameMode::ReceiveInitPlayer(FController* NewController);


// Function  EmbarkGameplay.EmbarkGameMode.ReceiveInitSeamlessTravelPlayer
// Offset::0x3D30810;
void FEmbarkGameMode::ReceiveInitSeamlessTravelPlayer(FController* NewController);


// Function  EmbarkGameplay.EmbarkGameMode.ReceiveNotifyPendingConnectionLost
// Offset::0x3D30810;
void FEmbarkGameMode::ReceiveNotifyPendingConnectionLost(FUniqueNetIdRepl ConnectionUniqueId);


// Function  EmbarkGameplay.EmbarkGameMode.ReceivePostInitializeComponents
// Offset::0x3D30810;
void FEmbarkGameMode::ReceivePostInitializeComponents();


// Function  EmbarkGameplay.EmbarkGameMode.ReceivePreLogin
// Offset::0x3D30810;
void FEmbarkGameMode::ReceivePreLogin(FString Options,FString Address,FUniqueNetIdRepl UniqueId,FString ErrorMessage);


// Function  EmbarkGameplay.EmbarkGameMode.ReceivePreRestartPlayer
// Offset::0x3D30810;
void FEmbarkGameMode::ReceivePreRestartPlayer(FController* NewController);


// Function  EmbarkGameplay.EmbarkGameMode.ReceiveStartPlay
// Offset::0x3D30810;
void FEmbarkGameMode::ReceiveStartPlay();


// Function  EmbarkEngine.EmbarkGlobalSubsystem.OnDeinitialized
// Offset::0x3D30810;
void FEmbarkGlobalSubsystem::OnDeinitialized();


// Function  EmbarkEngine.EmbarkGlobalSubsystem.OnInitialized
// Offset::0x3D30810;
void FEmbarkGlobalSubsystem::OnInitialized();


// Function  EmbarkGameplay.EmbarkItemSubsystem.OnAssetsChanged
// Offset::0x3D30810;
void FEmbarkItemSubsystem::OnAssetsChanged(FAssetData AssetData);


// Function  EmbarkGameplay.EmbarkItemSubsystem.OnAssetsChangedBulk
// Offset::0x3D30810;
void FEmbarkItemSubsystem::OnAssetsChangedBulk(TArray<FAssetData> AssetData);


// Function  EmbarkGameplay.EmbarkItemSubsystem.OnAssetsReady
// Offset::0x3D30810;
void FEmbarkItemSubsystem::OnAssetsReady();


// Function  EmbarkGameplay.EmbarkLocalPlayerSubsystem.GetDependencies
// Offset::0x21F2320;
void FEmbarkLocalPlayerSubsystem::GetDependencies(TArray<FSubsystem*> Dependencies);


// Function  EmbarkGameplay.EmbarkLocalPlayerSubsystem.OnDeinitialized
// Offset::0x3D30810;
void FEmbarkLocalPlayerSubsystem::OnDeinitialized();


// Function  EmbarkGameplay.EmbarkLocalPlayerSubsystem.OnInitialized
// Offset::0x3D30810;
void FEmbarkLocalPlayerSubsystem::OnInitialized();


// Function  EmbarkGameplay.EmbarkLocalPlayerSubsystem.OnShouldCreateSubsystem
// Offset::0x21F23E0;
bool FEmbarkLocalPlayerSubsystem::OnShouldCreateSubsystem(FObject* Outer);


// Function  EmbarkGameplay.EmbarkNiagaraDebugComponent.DisplayDebugDataFor
// Offset::0x21F3270;
void FEmbarkNiagaraDebugComponent::DisplayDebugDataFor(FNiagaraComponent* Comp);


// Function  EmbarkGameplay.EmbarkOptimizedTickMixinLibrary.AddAsTickPrerequisiteForActor
// Offset::0x21F3D90;
void FEmbarkOptimizedTickMixinLibrary::AddAsTickPrerequisiteForActor(FEmbarkOptimizedTick OptimizedTick,FActor* Actor);


// Function  EmbarkGameplay.EmbarkOptimizedTickMixinLibrary.AddAsTickPrerequisiteForComponent
// Offset::0x21F3C80;
void FEmbarkOptimizedTickMixinLibrary::AddAsTickPrerequisiteForComponent(FEmbarkOptimizedTick OptimizedTick,FActorComponent* Component);


// Function  EmbarkGameplay.EmbarkOptimizedTickMixinLibrary.AddTickPrerequisiteActor
// Offset::0x21F3FB0;
void FEmbarkOptimizedTickMixinLibrary::AddTickPrerequisiteActor(FEmbarkOptimizedTick OptimizedTick,FActor* PrerequisiteActor);


// Function  EmbarkGameplay.EmbarkOptimizedTickMixinLibrary.AddTickPrerequisiteComponent
// Offset::0x21F3EA0;
void FEmbarkOptimizedTickMixinLibrary::AddTickPrerequisiteComponent(FEmbarkOptimizedTick OptimizedTick,FActorComponent* PrerequisiteComponent);


// Function  EmbarkGameplay.EmbarkOptimizedTickMixinLibrary.HasTickOptimizedObject
// Offset::0x21F3800;
bool FEmbarkOptimizedTickMixinLibrary::HasTickOptimizedObject(FEmbarkOptimizedTick OptimizedTick);


// Function  EmbarkGameplay.EmbarkOptimizedTickMixinLibrary.SetTickEnabled
// Offset::0x21F38C0;
void FEmbarkOptimizedTickMixinLibrary::SetTickEnabled(FEmbarkOptimizedTick OptimizedTick,bool bValue);


// Function  EmbarkGameplay.EmbarkOptimizedTickMixinLibrary.SetupOptimizedTick
// Offset::0x21F3AE0;
void FEmbarkOptimizedTickMixinLibrary::SetupOptimizedTick(FEmbarkOptimizedTick OptimizedTick,FObject* WorldContextObject,FObject* TickObject,FName FunctionName);


// Function  EmbarkGameplay.EmbarkOptimizedTickMixinLibrary.TeardownOptimizedTick
// Offset::0x21F39D0;
void FEmbarkOptimizedTickMixinLibrary::TeardownOptimizedTick(FEmbarkOptimizedTick OptimizedTick,FObject* WorldContextObject);


// Function  EmbarkObjectPools.EmbarkObjectPoolSubsystem.FillPool
// Offset::0x2640B10;
void FEmbarkObjectPoolSubsystem::FillPool(int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkObjectPoolSubsystem.FinalizePool
// Offset::0x2640D40;
void FEmbarkObjectPoolSubsystem::FinalizePool();


// Function  EmbarkObjectPools.EmbarkObjectPoolSubsystem.InitializePool
// Offset::0x2640DD0;
void FEmbarkObjectPoolSubsystem::InitializePool(FName Name,FObject* Class,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkObjectPoolSubsystem.NextObject
// Offset::0x26406B0;
FObject* FEmbarkObjectPoolSubsystem::NextObject();


// Function  EmbarkObjectPools.EmbarkObjectPoolSubsystem.NextOrCreateObject
// Offset::0x26405C0;
FObject* FEmbarkObjectPoolSubsystem::NextOrCreateObject();


// Function  EmbarkObjectPools.EmbarkObjectPoolSubsystem.OnDeinitializeSubsystem
// Offset::0x3D30810;
void FEmbarkObjectPoolSubsystem::OnDeinitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkObjectPoolSubsystem.OnInitializeSubsystem
// Offset::0x3D30810;
void FEmbarkObjectPoolSubsystem::OnInitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkObjectPoolSubsystem.PoolObject
// Offset::0x26407D0;
bool FEmbarkObjectPoolSubsystem::PoolObject(FObject* Object);


// Function  EmbarkObjectPools.EmbarkObjectPoolSubsystem.ResetPool
// Offset::0x2640C70;
void FEmbarkObjectPoolSubsystem::ResetPool(int32_t Capacity);


// Function  EmbarkGameplay.ParallelUpdateBaseClass.Deinit
// Offset::0x21F47D0;
void FParallelUpdateBaseClass::Deinit();


// Function  EmbarkGameplay.ParallelUpdateBaseClass.InitActor
// Offset::0x21F47F0;
void FParallelUpdateBaseClass::InitActor(FActor* Actor,enum class ETickingGroup TickGroup,bool InNeedsSyncPre,bool InNeedsPreTickGameThread,bool InNeedsTickAnyThread,bool InNeedsPostTickGameThread,bool InNeedsSyncPost);


// Function  EmbarkGameplay.ParallelUpdateBaseClass.InitComponent
// Offset::0x21F4A80;
void FParallelUpdateBaseClass::InitComponent(FActorComponent* ActorComp,enum class ETickingGroup TickGroup,bool InNeedsSyncPre,bool InNeedsPreTickGameThread,bool InNeedsTickAnyThread,bool InNeedsPostTickGameThread,bool InNeedsSyncPost);


// Function  EmbarkGameplay.EmbarkPawn.BP_GetTeam
// Offset::0x21F5570;
enum class EEmbarkTeamId FEmbarkPawn::BP_GetTeam();


// Function  EmbarkGameplay.EmbarkPawn.BP_SetTeam
// Offset::0x21F55A0;
void FEmbarkPawn::BP_SetTeam(enum class EEmbarkTeamId NewTeam);


// Function  EmbarkGameplay.EmbarkPawn.EditFirstStateOfTypeFromBlackBoard
// Offset::0x21F5390;
FObject* FEmbarkPawn::EditFirstStateOfTypeFromBlackBoard(FObject* Clazz);


// Function  EmbarkGameplay.EmbarkPawn.GetFirstStateOfTypeFromBlackBoard
// Offset::0x21F5430;
FObject* FEmbarkPawn::GetFirstStateOfTypeFromBlackBoard(FObject* Clazz);


// Function  EmbarkGameplay.EmbarkPawn.ReceivePostInitializeComponents
// Offset::0x3D30810;
void FEmbarkPawn::ReceivePostInitializeComponents();


// Function  EmbarkGameplay.EmbarkPawn.ReceiveRestart
// Offset::0x3D30810;
void FEmbarkPawn::ReceiveRestart();


// Function  EmbarkGameplay.EmbarkPawn.ReceiveSetupPlayerInputComponent
// Offset::0x3D30810;
void FEmbarkPawn::ReceiveSetupPlayerInputComponent(FInputComponent* PlayerInputComponent);


// Function  EmbarkGameplay.EmbarkPawn.RegisterClassToBlackBoard
// Offset::0x21F54D0;
FObject* FEmbarkPawn::RegisterClassToBlackBoard(FObject* Clazz);


// Function  EmbarkGameplay.EmbarkPlatformIdComponent.Server_SetPlatformId
// Offset::0x21F6310;
void FEmbarkPlatformIdComponent::Server_SetPlatformId(FUniqueNetIdRepl InPlatformId);


// Function  EmbarkGameplay.EmbarkPlatformIdComponent.TryGetPlatformId
// Offset::0x21F6580;
bool FEmbarkPlatformIdComponent::TryGetPlatformId(FUniqueNetIdRepl OutPlatformId);


// Function  EmbarkGameplay.EmbarkProxyTransformMixinLibrary.GetComponentDisplayName
// Offset::0x21FE4F0;
FName FEmbarkProxyTransformMixinLibrary::GetComponentDisplayName(FEmbarkProxyTransform ProxyTransform);


// Function  EmbarkGameplay.EmbarkProxyTransformMixinLibrary.GetComponentName
// Offset::0x21FE5B0;
FName FEmbarkProxyTransformMixinLibrary::GetComponentName(FEmbarkProxyTransform ProxyTransform);


// Function  EmbarkGameplay.EmbarkProxyTransformMixinLibrary.GetRelativeLocation
// Offset::0x21FE910;
FVector FEmbarkProxyTransformMixinLibrary::GetRelativeLocation(FEmbarkProxyTransform ProxyTransform);


// Function  EmbarkGameplay.EmbarkProxyTransformMixinLibrary.GetRelativeRotation
// Offset::0x21FE840;
FRotator FEmbarkProxyTransformMixinLibrary::GetRelativeRotation(FEmbarkProxyTransform ProxyTransform);


// Function  EmbarkGameplay.EmbarkProxyTransformMixinLibrary.GetRelativeRotationQuat
// Offset::0x21FE770;
FQuat FEmbarkProxyTransformMixinLibrary::GetRelativeRotationQuat(FEmbarkProxyTransform ProxyTransform);


// Function  EmbarkGameplay.EmbarkProxyTransformMixinLibrary.GetRelativeTransform
// Offset::0x21FE670;
FTransform FEmbarkProxyTransformMixinLibrary::GetRelativeTransform(FEmbarkProxyTransform ProxyTransform);


// Function  EmbarkGameplay.EmbarkScreenFadeProxy.ClearScreenFade
// Offset::0x21FEF20;
void FEmbarkScreenFadeProxy::ClearScreenFade(FObject* WorldContextObject);


// Function  EmbarkGameplay.EmbarkScreenFadeProxy.FadeScreenFromAndToColor
// Offset::0x21FF0E0;
FEmbarkScreenFadeProxy* FEmbarkScreenFadeProxy::FadeScreenFromAndToColor(FObject* WorldContextObject,FLinearColor FromColor,FLinearColor ToColor,float Duration);


// Function  EmbarkGameplay.EmbarkScreenFadeProxy.FadeScreenToColor
// Offset::0x21FEFB0;
FEmbarkScreenFadeProxy* FEmbarkScreenFadeProxy::FadeScreenToColor(FObject* WorldContextObject,FLinearColor Color,float Duration);


// Function  EmbarkGameplay.EmbarkNetScriptStruct_Test.Multicast_ScriptStruct
// Offset::0x21FF6A0;
void FEmbarkNetScriptStruct_Test::Multicast_ScriptStruct(FEmbarkScriptStruct ScriptStruct);


// Function  EmbarkGameplay.EmbarkNetScriptStruct_Test.Multicast_TestRPCWithScriptStruct
// Offset::0x21FF750;
void FEmbarkNetScriptStruct_Test::Multicast_TestRPCWithScriptStruct(FEmbarkScriptStruct ScriptStruct);


// Function  EmbarkGameplay.EmbarkStructObject_Test.Init
// Offset::0x21FFB30;
void FEmbarkStructObject_Test::Init();


// Function  EmbarkGameplay.EmbarkStructObject_Test.ProcessStructOut
// Offset::0x21FFB10;
void FEmbarkStructObject_Test::ProcessStructOut();


// Function  EmbarkGameplay.EmbarkStructObject_Test.StructInit
// Offset::0x3D30810;
void FEmbarkStructObject_Test::StructInit(int32_t __ANY_STRUCT_REF);


// Function  EmbarkGameplay.EmbarkStructObject_Test.StructOut
// Offset::0x3D30810;
void FEmbarkStructObject_Test::StructOut(int32_t __ANY_STRUCT_REF);


// Function  Engine.SkinnedMeshComponent.BoneIsChildOf
// Offset::0x6519D80;
bool FSkinnedMeshComponent::BoneIsChildOf(FName BoneName,FName ParentBoneName);


// Function  Engine.SkinnedMeshComponent.ClearSkinWeightOverride
// Offset::0x651A3C0;
void FSkinnedMeshComponent::ClearSkinWeightOverride(int32_t LODIndex);


// Function  Engine.SkinnedMeshComponent.ClearSkinWeightProfile
// Offset::0x651A300;
void FSkinnedMeshComponent::ClearSkinWeightProfile();


// Function  Engine.SkinnedMeshComponent.ClearVertexColorOverride
// Offset::0x651A560;
void FSkinnedMeshComponent::ClearVertexColorOverride(int32_t LODIndex);


// Function  Engine.SkinnedMeshComponent.FindClosestBone_K2
// Offset::0x6519A20;
FName FSkinnedMeshComponent::FindClosestBone_K2(FVector TestLocation,FVector BoneLocation,float IgnoreScale,bool bRequirePhysicsAsset);


// Function  Engine.SkinnedMeshComponent.GetBoneIndex
// Offset::0x651AD50;
int32_t FSkinnedMeshComponent::GetBoneIndex(FName BoneName);


// Function  Engine.SkinnedMeshComponent.GetBoneName
// Offset::0x651ACA0;
FName FSkinnedMeshComponent::GetBoneName(int32_t BoneIndex);


// Function  Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
// Offset::0x651A230;
FName FSkinnedMeshComponent::GetCurrentSkinWeightProfileName();


// Function  Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
// Offset::0x651A860;
FTransform FSkinnedMeshComponent::GetDeltaTransformFromRefPose(FName BoneName,FName BaseName);


// Function  Engine.SkinnedMeshComponent.GetForcedLOD
// Offset::0x651B000;
int32_t FSkinnedMeshComponent::GetForcedLOD();


// Function  Engine.SkinnedMeshComponent.GetNumBones
// Offset::0x651ADF0;
int32_t FSkinnedMeshComponent::GetNumBones();


// Function  Engine.SkinnedMeshComponent.GetNumLODs
// Offset::0x651B170;
int32_t FSkinnedMeshComponent::GetNumLODs();


// Function  Engine.SkinnedMeshComponent.GetParentBone
// Offset::0x651A9B0;
FName FSkinnedMeshComponent::GetParentBone(FName BoneName);


// Function  Engine.SkinnedMeshComponent.GetRefPosePosition
// Offset::0x6519CD0;
FVector FSkinnedMeshComponent::GetRefPosePosition(int32_t BoneIndex);


// Function  Engine.SkinnedMeshComponent.GetRefPoseTransform
// Offset::0x6519BE0;
FTransform FSkinnedMeshComponent::GetRefPoseTransform(int32_t BoneIndex);


// Function  Engine.SkinnedMeshComponent.GetSocketBoneName
// Offset::0x651ABF0;
FName FSkinnedMeshComponent::GetSocketBoneName(FName InSocketName);


// Function  Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
// Offset::0x651A700;
bool FSkinnedMeshComponent::GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName,float OutTwistAngle,float OutSwingAngle);


// Function  Engine.SkinnedMeshComponent.GetVertexOffsetUsage
// Offset::0x651A170;
int32_t FSkinnedMeshComponent::GetVertexOffsetUsage(int32_t LODIndex);


// Function  Engine.SkinnedMeshComponent.HideBoneByName
// Offset::0x6519940;
void FSkinnedMeshComponent::HideBoneByName(FName BoneName,enum class EPhysBodyOp PhysBodyOption);


// Function  Engine.SkinnedMeshComponent.IsBoneHiddenByName
// Offset::0x6519800;
bool FSkinnedMeshComponent::IsBoneHiddenByName(FName BoneName);


// Function  Engine.SkinnedMeshComponent.IsMaterialSectionShown
// Offset::0x65194F0;
bool FSkinnedMeshComponent::IsMaterialSectionShown(int32_t MaterialID,int32_t LODIndex);


// Function  Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
// Offset::0x651A200;
bool FSkinnedMeshComponent::IsUsingSkinWeightProfile();


// Function  Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
// Offset::0x651AE20;
void FSkinnedMeshComponent::SetCapsuleIndirectShadowMinVisibility(float NewValue);


// Function  Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
// Offset::0x651AF60;
void FSkinnedMeshComponent::SetCastCapsuleDirectShadow(bool bNewValue);


// Function  Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
// Offset::0x651AEC0;
void FSkinnedMeshComponent::SetCastCapsuleIndirectShadow(bool bNewValue);


// Function  Engine.SkinnedMeshComponent.SetForcedLOD
// Offset::0x651B030;
void FSkinnedMeshComponent::SetForcedLOD(int32_t InNewForcedLOD);


// Function  Engine.SkinnedMeshComponent.SetMasterPoseComponent
// Offset::0x6519E70;
void FSkinnedMeshComponent::SetMasterPoseComponent(FSkinnedMeshComponent* NewMasterBoneComponent,bool bForceUpdate);


// Function  Engine.SkinnedMeshComponent.SetMeshDeformer
// Offset::0x651AA60;
void FSkinnedMeshComponent::SetMeshDeformer(FMeshDeformer* InMeshDeformer);


// Function  Engine.SkinnedMeshComponent.SetMinLOD
// Offset::0x651B0D0;
void FSkinnedMeshComponent::SetMinLOD(int32_t InNewMinLOD);


// Function  Engine.SkinnedMeshComponent.SetPhysicsAsset
// Offset::0x651B1A0;
void FSkinnedMeshComponent::SetPhysicsAsset(FPhysicsAsset* NewPhysicsAsset,bool bForceReInit);


// Function  Engine.SkinnedMeshComponent.SetPostSkinningOffsets
// Offset::0x6519F60;
void FSkinnedMeshComponent::SetPostSkinningOffsets(int32_t LODIndex,TArray<FVector> Offsets);


// Function  Engine.SkinnedMeshComponent.SetPreSkinningOffsets
// Offset::0x6519F60;
void FSkinnedMeshComponent::SetPreSkinningOffsets(int32_t LODIndex,TArray<FVector> Offsets);


// Function  Engine.SkinnedMeshComponent.SetRenderStatic
// Offset::0x6519450;
void FSkinnedMeshComponent::SetRenderStatic(bool bNewValue);


// Function  Engine.SkinnedMeshComponent.SetSkeletalMesh
// Offset::0x651AB00;
void FSkinnedMeshComponent::SetSkeletalMesh(FSkeletalMesh* NewMesh,bool bReinitPose);


// Function  Engine.SkinnedMeshComponent.SetSkinWeightOverride
// Offset::0x651A460;
void FSkinnedMeshComponent::SetSkinWeightOverride(int32_t LODIndex,TArray<FSkelMeshSkinWeightInfo> SkinWeights);


// Function  Engine.SkinnedMeshComponent.SetSkinWeightProfile
// Offset::0x651A320;
bool FSkinnedMeshComponent::SetSkinWeightProfile(FName InProfileName);


// Function  Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
// Offset::0x651A600;
void FSkinnedMeshComponent::SetVertexColorOverride_LinearColor(int32_t LODIndex,TArray<FLinearColor> VertexColors);


// Function  Engine.SkinnedMeshComponent.SetVertexOffsetUsage
// Offset::0x651A0A0;
void FSkinnedMeshComponent::SetVertexOffsetUsage(int32_t LODIndex,int32_t Usage);


// Function  Engine.SkinnedMeshComponent.ShowAllMaterialSections
// Offset::0x65195E0;
void FSkinnedMeshComponent::ShowAllMaterialSections(int32_t LODIndex);


// Function  Engine.SkinnedMeshComponent.ShowMaterialSection
// Offset::0x6519680;
void FSkinnedMeshComponent::ShowMaterialSection(int32_t MaterialID,int32_t SectionIndex,bool bShow,int32_t LODIndex);


// Function  Engine.SkinnedMeshComponent.UnHideBoneByName
// Offset::0x65198A0;
void FSkinnedMeshComponent::UnHideBoneByName(FName BoneName);


// Function  Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
// Offset::0x651A260;
void FSkinnedMeshComponent::UnloadSkinWeightProfile(FName InProfileName);


// Function  Engine.SkinnedMeshComponent.WasRecentlyRenderedOnScreen
// Offset::0x651B290;
bool FSkinnedMeshComponent::WasRecentlyRenderedOnScreen();


// Function  Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
// Offset::0x650EE90;
void FSkeletalMeshComponent::AccumulateAllBodiesBelowPhysicsBlendWeight(FName InBoneName,float AddPhysicsBlendWeight,bool bSkipCustomPhysicsType);


// Function  Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
// Offset::0x650FB50;
void FSkeletalMeshComponent::AddForceToAllBodiesBelow(FVector Force,FName BoneName,bool bAccelChange,bool bIncludeSelf);


// Function  Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
// Offset::0x650F9B0;
void FSkeletalMeshComponent::AddImpulseToAllBodiesBelow(FVector Impulse,FName BoneName,bool bVelChange,bool bIncludeSelf);


// Function  Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
// Offset::0x6510830;
void FSkeletalMeshComponent::AllowAnimCurveEvaluation(FName NameOfCurve,bool bAllow);


// Function  Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
// Offset::0x6510C80;
void FSkeletalMeshComponent::BindClothToMasterPoseComponent();


// Function  Engine.SkeletalMeshComponent.BreakConstraint
// Offset::0x650E660;
void FSkeletalMeshComponent::BreakConstraint(FVector Impulse,FVector HitLocation,FName InBoneName);


// Function  Engine.SkeletalMeshComponent.ClearMorphTargets
// Offset::0x6511080;
void FSkeletalMeshComponent::ClearMorphTargets();


// Function  Engine.SkeletalMeshComponent.FindConstraintBoneName
// Offset::0x650E7C0;
FName FSkeletalMeshComponent::FindConstraintBoneName(int32_t ConstraintIndex);


// Function  Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
// Offset::0x6510D50;
void FSkeletalMeshComponent::ForceClothNextUpdateTeleport();


// Function  Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
// Offset::0x6510D30;
void FSkeletalMeshComponent::ForceClothNextUpdateTeleportAndReset();


// Function  Engine.SkeletalMeshComponent.GetAllowClothActors
// Offset::0x6510E40;
bool FSkeletalMeshComponent::GetAllowClothActors();


// Function  Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
// Offset::0x6510920;
bool FSkeletalMeshComponent::GetAllowedAnimCurveEvaluate();


// Function  Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
// Offset::0x6510AC0;
bool FSkeletalMeshComponent::GetAllowRigidBodyAnimNode();


// Function  Engine.SkeletalMeshComponent.GetAnimationMode
// Offset::0x6511820;
enum class EAnimationMode FSkeletalMeshComponent::GetAnimationMode();


// Function  Engine.SkeletalMeshComponent.GetAnimClass
// Offset::0x6511F00;
FObject* FSkeletalMeshComponent::GetAnimClass();


// Function  Engine.SkeletalMeshComponent.GetAnimInstance
// Offset::0x6511ED0;
FAnimInstance* FSkeletalMeshComponent::GetAnimInstance();


// Function  Engine.SkeletalMeshComponent.GetBoneLinearVelocity
// Offset::0x650F3D0;
FVector FSkeletalMeshComponent::GetBoneLinearVelocity(FName InBoneName);


// Function  Engine.SkeletalMeshComponent.GetBoneMass
// Offset::0x650FD50;
float FSkeletalMeshComponent::GetBoneMass(FName BoneName,bool bScaleMass);


// Function  Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
// Offset::0x6510560;
FClothingSimulationInteractor* FSkeletalMeshComponent::GetClothingSimulationInteractor();


// Function  Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
// Offset::0x6510E10;
float FSkeletalMeshComponent::GetClothMaxDistanceScale();


// Function  Engine.SkeletalMeshComponent.GetConstraintByName
// Offset::0x650E560;
FConstraintInstanceAccessor FSkeletalMeshComponent::GetConstraintByName(FName ConstraintName,bool bIncludesTerminated);


// Function  Engine.SkeletalMeshComponent.GetConstraints
// Offset::0x650E450;
void FSkeletalMeshComponent::GetConstraints(bool bIncludesTerminated,TArray<FConstraintInstanceAccessor> OutConstraints);


// Function  Engine.SkeletalMeshComponent.GetConstraintsFromBody
// Offset::0x650E250;
void FSkeletalMeshComponent::GetConstraintsFromBody(FName BodyName,bool bParentConstraints,bool bChildConstraints,bool bIncludesTerminated,TArray<FConstraintInstanceAccessor> OutConstraints);


// Function  Engine.SkeletalMeshComponent.GetCurrentJointAngles
// Offset::0x650DF20;
void FSkeletalMeshComponent::GetCurrentJointAngles(FName InBoneName,float Swing1Angle,float TwistAngle,float Swing2Angle);


// Function  Engine.SkeletalMeshComponent.GetDisableAnimCurves
// Offset::0x65109F0;
bool FSkeletalMeshComponent::GetDisableAnimCurves();


// Function  Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
// Offset::0x65131B0;
bool FSkeletalMeshComponent::GetDisablePostProcessBlueprint();


// Function  Engine.SkeletalMeshComponent.GetFloatAttribute
// Offset::0x65127A0;
bool FSkeletalMeshComponent::GetFloatAttribute(FName BoneName,FName AttributeName,float DefaultValue,float OutValue,enum class ECustomBoneAttributeLookup LookupType);


// Function  Engine.SkeletalMeshComponent.GetFloatAttribute_Ref
// Offset::0x6512F50;
bool FSkeletalMeshComponent::GetFloatAttribute_Ref(FName BoneName,FName AttributeName,float OutValue,enum class ECustomBoneAttributeLookup LookupType);


// Function  Engine.SkeletalMeshComponent.GetIntegerAttribute
// Offset::0x6512260;
bool FSkeletalMeshComponent::GetIntegerAttribute(FName BoneName,FName AttributeName,int32_t DefaultValue,int32_t OutValue,enum class ECustomBoneAttributeLookup LookupType);


// Function  Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref
// Offset::0x6512B80;
bool FSkeletalMeshComponent::GetIntegerAttribute_Ref(FName BoneName,FName AttributeName,int32_t OutValue,enum class ECustomBoneAttributeLookup LookupType);


// Function  Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
// Offset::0x6511E00;
FAnimInstance* FSkeletalMeshComponent::GetLinkedAnimGraphInstanceByTag(FName InTag);


// Function  Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
// Offset::0x6511D00;
void FSkeletalMeshComponent::GetLinkedAnimGraphInstancesByTag(FName InTag,TArray<FAnimInstance*> OutLinkedInstances);


// Function  Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
// Offset::0x65119A0;
FAnimInstance* FSkeletalMeshComponent::GetLinkedAnimLayerInstanceByClass(FAnimInstance* InClass);


// Function  Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
// Offset::0x6511A40;
FAnimInstance* FSkeletalMeshComponent::GetLinkedAnimLayerInstanceByGroup(FName InGroup);


// Function  Engine.SkeletalMeshComponent.GetMorphTarget
// Offset::0x6510FE0;
float FSkeletalMeshComponent::GetMorphTarget(FName MorphTargetName);


// Function  Engine.SkeletalMeshComponent.GetPlayRate
// Offset::0x65113B0;
float FSkeletalMeshComponent::GetPlayRate();


// Function  Engine.SkeletalMeshComponent.GetPosition
// Offset::0x6511480;
float FSkeletalMeshComponent::GetPosition();


// Function  Engine.SkeletalMeshComponent.GetPostProcessInstance
// Offset::0x6511EA0;
FAnimInstance* FSkeletalMeshComponent::GetPostProcessInstance();


// Function  Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
// Offset::0x650FCF0;
FVector FSkeletalMeshComponent::GetSkeletalCenterOfMass();


// Function  Engine.SkeletalMeshComponent.GetStringAttribute
// Offset::0x6511FD0;
bool FSkeletalMeshComponent::GetStringAttribute(FName BoneName,FName AttributeName,FString DefaultValue,FString OutValue,enum class ECustomBoneAttributeLookup LookupType);


// Function  Engine.SkeletalMeshComponent.GetStringAttribute_Ref
// Offset::0x65129B0;
bool FSkeletalMeshComponent::GetStringAttribute_Ref(FName BoneName,FName AttributeName,FString OutValue,enum class ECustomBoneAttributeLookup LookupType);


// Function  Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
// Offset::0x6510630;
float FSkeletalMeshComponent::GetTeleportDistanceThreshold();


// Function  Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
// Offset::0x6510630;
float FSkeletalMeshComponent::GetTeleportRotationThreshold();


// Function  Engine.SkeletalMeshComponent.GetTransformAttribute
// Offset::0x6512470;
bool FSkeletalMeshComponent::GetTransformAttribute(FName BoneName,FName AttributeName,FTransform DefaultValue,FTransform OutValue,enum class ECustomBoneAttributeLookup LookupType);


// Function  Engine.SkeletalMeshComponent.GetTransformAttribute_Ref
// Offset::0x6512D40;
bool FSkeletalMeshComponent::GetTransformAttribute_Ref(FName BoneName,FName AttributeName,FTransform OutValue,enum class ECustomBoneAttributeLookup LookupType);


// Function  Engine.SkeletalMeshComponent.HasValidAnimationInstance
// Offset::0x6511970;
bool FSkeletalMeshComponent::HasValidAnimationInstance();


// Function  Engine.SkeletalMeshComponent.IsBodyGravityEnabled
// Offset::0x65101A0;
bool FSkeletalMeshComponent::IsBodyGravityEnabled(FName BoneName);


// Function  Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
// Offset::0x6510CC0;
bool FSkeletalMeshComponent::IsClothingSimulationSuspended();


// Function  Engine.SkeletalMeshComponent.IsPlaying
// Offset::0x65115A0;
bool FSkeletalMeshComponent::IsPlaying();


// Function  Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
// Offset::0x650FE40;
bool FSkeletalMeshComponent::K2_GetClosestPointOnPhysicsAsset(FVector WorldPosition,FVector ClosestWorldPosition,FVector Normal,FName BoneName,float Distance);


// Function  Engine.SkeletalMeshComponent.LinkAnimClassLayers
// Offset::0x6511B80;
void FSkeletalMeshComponent::LinkAnimClassLayers(FAnimInstance* InClass);


// Function  Engine.SkeletalMeshComponent.LinkAnimGraphByTag
// Offset::0x6511C20;
void FSkeletalMeshComponent::LinkAnimGraphByTag(FName InTag,FAnimInstance* InClass);


// Function  Engine.SkeletalMeshComponent.OverrideAnimationData
// Offset::0x65111D0;
void FSkeletalMeshComponent::OverrideAnimationData(FAnimationAsset* InAnimToPlay,bool bIsLooping,bool bIsPlaying,float Position,float PlayRate);


// Function  Engine.SkeletalMeshComponent.Play
// Offset::0x65115F0;
void FSkeletalMeshComponent::Play(bool bLooping);


// Function  Engine.SkeletalMeshComponent.PlayAnimation
// Offset::0x6511730;
void FSkeletalMeshComponent::PlayAnimation(FAnimationAsset* NewAnimToPlay,bool bLooping);


// Function  Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
// Offset::0x650F260;
void FSkeletalMeshComponent::ResetAllBodiesSimulatePhysics();


// Function  Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
// Offset::0x6510810;
void FSkeletalMeshComponent::ResetAllowedAnimCurveEvaluation();


// Function  Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
// Offset::0x65118E0;
void FSkeletalMeshComponent::ResetAnimInstanceDynamics(enum class ETeleportType InTeleportType);


// Function  Engine.SkeletalMeshComponent.ResetClothTeleportMode
// Offset::0x6510CA0;
void FSkeletalMeshComponent::ResetClothTeleportMode();


// Function  Engine.SkeletalMeshComponent.ResumeClothingSimulation
// Offset::0x6510CF0;
void FSkeletalMeshComponent::ResumeClothingSimulation();


// Function  Engine.SkeletalMeshComponent.SetAllBodiesBelowLinearVelocity
// Offset::0x650F490;
void FSkeletalMeshComponent::SetAllBodiesBelowLinearVelocity(FName InBoneName,FVector LinearVelocity,bool bIncludeSelf);


// Function  Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
// Offset::0x650EFD0;
void FSkeletalMeshComponent::SetAllBodiesBelowPhysicsBlendWeight(FName InBoneName,float PhysicsBlendWeight,bool bSkipCustomPhysicsType,bool bIncludeSelf);


// Function  Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsDisabled
// Offset::0x650F5E0;
void FSkeletalMeshComponent::SetAllBodiesBelowPhysicsDisabled(FName InBoneName,bool bDisabled,bool bIncludeSelf);


// Function  Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
// Offset::0x650F280;
void FSkeletalMeshComponent::SetAllBodiesBelowSimulatePhysics(FName InBoneName,bool bNewSimulate,bool bIncludeSelf);


// Function  Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
// Offset::0x650F170;
void FSkeletalMeshComponent::SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight,bool bSkipCustomPhysicsType);


// Function  Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
// Offset::0x650F870;
void FSkeletalMeshComponent::SetAllBodiesSimulatePhysics(bool bNewSimulate);


// Function  Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
// Offset::0x650EA90;
void FSkeletalMeshComponent::SetAllMotorsAngularDriveParams(float InSpring,float InDamping,float InForceLimit,bool bSkipCustomPhysicsType);


// Function  Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
// Offset::0x650ED50;
void FSkeletalMeshComponent::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive,bool bEnableTwistDrive,bool bSkipCustomPhysicsType);


// Function  Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
// Offset::0x650EC10;
void FSkeletalMeshComponent::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive,bool bEnableTwistDrive,bool bSkipCustomPhysicsType);


// Function  Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
// Offset::0x6510950;
void FSkeletalMeshComponent::SetAllowAnimCurveEvaluation(bool bInAllow);


// Function  Engine.SkeletalMeshComponent.SetAllowClothActors
// Offset::0x6510E70;
void FSkeletalMeshComponent::SetAllowClothActors(bool bInAllow);


// Function  Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
// Offset::0x6510700;
void FSkeletalMeshComponent::SetAllowedAnimCurvesEvaluation(TArray<FName> List,bool bAllow);


// Function  Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
// Offset::0x6510AF0;
void FSkeletalMeshComponent::SetAllowRigidBodyAnimNode(bool bInAllow,bool bReinitAnim);


// Function  Engine.SkeletalMeshComponent.SetAngularLimits
// Offset::0x650E0D0;
void FSkeletalMeshComponent::SetAngularLimits(FName InBoneName,float Swing1LimitAngle,float TwistLimitAngle,float Swing2LimitAngle);


// Function  Engine.SkeletalMeshComponent.SetAnimation
// Offset::0x6511690;
void FSkeletalMeshComponent::SetAnimation(FAnimationAsset* NewAnimToPlay);


// Function  Engine.SkeletalMeshComponent.SetAnimationMode
// Offset::0x6511850;
void FSkeletalMeshComponent::SetAnimationMode(enum class EAnimationMode InAnimationMode);


// Function  Engine.SkeletalMeshComponent.SetAnimClass
// Offset::0x6511F30;
void FSkeletalMeshComponent::SetAnimClass(FObject* NewClass);


// Function  Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
// Offset::0x6510470;
void FSkeletalMeshComponent::SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision,FName BoneName);


// Function  Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
// Offset::0x6510D70;
void FSkeletalMeshComponent::SetClothMaxDistanceScale(float Scale);


// Function  Engine.SkeletalMeshComponent.SetConstraintProfile
// Offset::0x650E960;
void FSkeletalMeshComponent::SetConstraintProfile(FName JointName,FName ProfileName,bool bDefaultIfNotFound);


// Function  Engine.SkeletalMeshComponent.SetConstraintProfileForAll
// Offset::0x650E870;
void FSkeletalMeshComponent::SetConstraintProfileForAll(FName ProfileName,bool bDefaultIfNotFound);


// Function  Engine.SkeletalMeshComponent.SetDisableAnimCurves
// Offset::0x6510A20;
void FSkeletalMeshComponent::SetDisableAnimCurves(bool bInDisableAnimCurves);


// Function  Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
// Offset::0x6513110;
void FSkeletalMeshComponent::SetDisablePostProcessBlueprint(bool bInDisablePostProcess);


// Function  Engine.SkeletalMeshComponent.SetEnableBodyGravity
// Offset::0x6510240;
void FSkeletalMeshComponent::SetEnableBodyGravity(bool bEnableGravity,FName BoneName);


// Function  Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
// Offset::0x6510060;
void FSkeletalMeshComponent::SetEnableGravityOnAllBodiesBelow(bool bEnableGravity,FName BoneName,bool bIncludeSelf);


// Function  Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
// Offset::0x650F730;
void FSkeletalMeshComponent::SetEnablePhysicsBlending(bool bNewBlendPhysics);


// Function  Engine.SkeletalMeshComponent.SetMorphTarget
// Offset::0x65110A0;
void FSkeletalMeshComponent::SetMorphTarget(FName MorphTargetName,float Value,bool bRemoveZeroWeight);


// Function  Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
// Offset::0x6510330;
void FSkeletalMeshComponent::SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision,FName BoneName,bool bIncludeSelf);


// Function  Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
// Offset::0x650F7D0;
void FSkeletalMeshComponent::SetPhysicsBlendWeight(float PhysicsBlendWeight);


// Function  Engine.SkeletalMeshComponent.SetPlayRate
// Offset::0x65113E0;
void FSkeletalMeshComponent::SetPlayRate(float Rate);


// Function  Engine.SkeletalMeshComponent.SetPosition
// Offset::0x65114B0;
void FSkeletalMeshComponent::SetPosition(float InPos,bool bFireNotifies);


// Function  Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
// Offset::0x6510590;
void FSkeletalMeshComponent::SetTeleportDistanceThreshold(float Threshold);


// Function  Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
// Offset::0x6510660;
void FSkeletalMeshComponent::SetTeleportRotationThreshold(float Threshold);


// Function  Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
// Offset::0x22AE960;
void FSkeletalMeshComponent::SetUpdateAnimationInEditor(bool NewUpdateState);


// Function  Engine.SkeletalMeshComponent.SetUpdateClothInEditor
// Offset::0x22AE960;
void FSkeletalMeshComponent::SetUpdateClothInEditor(bool NewUpdateState);


// Function  Engine.SkeletalMeshComponent.SnapshotPose
// Offset::0x6510F10;
void FSkeletalMeshComponent::SnapshotPose(FPoseSnapshot Snapshot);


// Function  Engine.SkeletalMeshComponent.Stop
// Offset::0x65115D0;
void FSkeletalMeshComponent::Stop();


// Function  Engine.SkeletalMeshComponent.SuspendClothingSimulation
// Offset::0x6510D10;
void FSkeletalMeshComponent::SuspendClothingSimulation();


// Function  Engine.SkeletalMeshComponent.TermBodiesBelow
// Offset::0x650F910;
void FSkeletalMeshComponent::TermBodiesBelow(FName ParentBoneName);


// Function  Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
// Offset::0x65131E0;
void FSkeletalMeshComponent::ToggleDisablePostProcessBlueprint();


// Function  Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
// Offset::0x6510BE0;
void FSkeletalMeshComponent::UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);


// Function  Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
// Offset::0x6511AE0;
void FSkeletalMeshComponent::UnlinkAnimClassLayers(FAnimInstance* InClass);


// Function  AnimationBudgetAllocator.SkeletalMeshComponentBudgeted.SetAutoRegisterWithBudgetAllocator
// Offset::0x2E914A0;
void FSkeletalMeshComponentBudgeted::SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);


// Function  EmbarkGameplay.EmbarkSkeletalMeshComponent.CreateNewComponent
// Offset::0x2200100;
FEmbarkSkeletalMeshComponent* FEmbarkSkeletalMeshComponent::CreateNewComponent(FActor* Owner,FName UniqueMeshName,bool ShouldAutoRegisterWithBudgetAllocator);


// Function  EmbarkGameplay.EmbarkSkeletalMeshComponent.RefreshClothingRelationships
// Offset::0x22000E0;
void FEmbarkSkeletalMeshComponent::RefreshClothingRelationships();


// Function  EmbarkGameplay.EmbarkSkeletalMeshComponent.RegisterParentUpdate
// Offset::0x22002D0;
void FEmbarkSkeletalMeshComponent::RegisterParentUpdate(FEmbarkSkeletalMeshComponent* Comp);


// Function  EmbarkGameplay.EmbarkSkeletalMeshComponent.SetAnimStateUpdaterComponent
// Offset::0x2200030;
void FEmbarkSkeletalMeshComponent::SetAnimStateUpdaterComponent(FEmbarkAnimStateUpdaterComponent* InAnimStateUpdaterComponent);


// Function  EmbarkGameplay.EmbarkSkeletalMeshComponent.SetClothUnholyScale
// Offset::0x21FFF80;
void FEmbarkSkeletalMeshComponent::SetClothUnholyScale(float InClothUnholyScale);


// Function  EmbarkGameplay.EmbarkSkeletalMeshComponent.SetRenderUpdateEnabled
// Offset::0x2200370;
void FEmbarkSkeletalMeshComponent::SetRenderUpdateEnabled(bool bEnabled);


// Function  EmbarkGameplay.EmbarkSkeletalMeshComponent.SetUseClothUnholyRefToLocals
// Offset::0x21FFED0;
void FEmbarkSkeletalMeshComponent::SetUseClothUnholyRefToLocals(bool bInUseClothUnholyRefToLocals);


// Function  EmbarkGameplay.EmbarkSkeletalMeshComponent.SuspendNewStyleUpdate
// Offset::0x2200230;
void FEmbarkSkeletalMeshComponent::SuspendNewStyleUpdate(bool bSuspend);


// Function  SMSystem.SMInstance.AreInitialStatesSetFromLoad
// Offset::0x2B9AE10;
bool FSMInstance::AreInitialStatesSetFromLoad();


// Function  SMSystem.SMInstance.CanAutoManageTime
// Offset::0x2B99710;
bool FSMInstance::CanAutoManageTime();


// Function  SMSystem.SMInstance.CanEverTick
// Offset::0x2B99B30;
bool FSMInstance::CanEverTick();


// Function  SMSystem.SMInstance.CanTickOnManualUpdate
// Offset::0x2B999C0;
bool FSMInstance::CanTickOnManualUpdate();


// Function  SMSystem.SMInstance.ClearLoadedStates
// Offset::0x2B9ADF0;
void FSMInstance::ClearLoadedStates();


// Function  SMSystem.SMInstance.ClearStateHistory
// Offset::0x2B993E0;
void FSMInstance::ClearStateHistory();


// Function  SMSystem.SMInstance.EvaluateAndFindTransitionChain
// Offset::0x2B9B370;
bool FSMInstance::EvaluateAndFindTransitionChain(FSMTransitionInstance* InFirstTransitionInstance,TArray<FSMTransitionInstance*> OutTransitionChain,FSMStateInstance_Base* OutDestinationState,bool bRequirePreviousStateActive);


// Function  SMSystem.SMInstance.EvaluateAndTakeTransitionChain
// Offset::0x2B9B530;
bool FSMInstance::EvaluateAndTakeTransitionChain(FSMTransitionInstance* InFirstTransitionInstance);


// Function  SMSystem.SMInstance.EvaluateTransitions
// Offset::0x2B9B5D0;
void FSMInstance::EvaluateTransitions();


// Function  SMSystem.SMInstance.GetActiveStateGuid
// Offset::0x2B9AAF0;
FGuid FSMInstance::GetActiveStateGuid();


// Function  SMSystem.SMInstance.GetActiveStateInstance
// Offset::0x2B9A690;
FSMStateInstance_Base* FSMInstance::GetActiveStateInstance(bool bCheckNested);


// Function  SMSystem.SMInstance.GetActiveStateName
// Offset::0x2B9ABC0;
FString FSMInstance::GetActiveStateName();


// Function  SMSystem.SMInstance.GetAllActiveStateGuids
// Offset::0x2B9A730;
void FSMInstance::GetAllActiveStateGuids(TArray<FGuid> ActiveGuids);


// Function  SMSystem.SMInstance.GetAllActiveStateInstances
// Offset::0x2B9A540;
void FSMInstance::GetAllActiveStateInstances(TArray<FSMStateInstance_Base*> ActiveStateInstances);


// Function  SMSystem.SMInstance.GetAllCurrentStateGuids
// Offset::0x2B9A890;
TArray<FGuid> FSMInstance::GetAllCurrentStateGuids();


// Function  SMSystem.SMInstance.GetAllReferencedInstances
// Offset::0x2B9A460;
TArray<FSMInstance*> FSMInstance::GetAllReferencedInstances(bool bIncludeChildren);


// Function  SMSystem.SMInstance.GetAllStateInstances
// Offset::0x2B99330;
void FSMInstance::GetAllStateInstances(TArray<FSMStateInstance_Base*> StateInstances);


// Function  SMSystem.SMInstance.GetAllTransitionInstances
// Offset::0x2B99280;
void FSMInstance::GetAllTransitionInstances(TArray<FSMTransitionInstance*> TransitionInstances);


// Function  SMSystem.SMInstance.GetComponentOwner
// Offset::0x2B9B8B0;
FSMStateMachineComponent* FSMInstance::GetComponentOwner();


// Function  SMSystem.SMInstance.GetContext
// Offset::0x2B9B8E0;
FObject* FSMInstance::GetContext();


// Function  SMSystem.SMInstance.GetGuidRedirectMap
// Offset::0x2B99D40;
TMap<FGuid,FGuid> FSMInstance::GetGuidRedirectMap();


// Function  SMSystem.SMInstance.GetInputComponent
// Offset::0x2B98770;
FInputComponent* FSMInstance::GetInputComponent();


// Function  SMSystem.SMInstance.GetMasterReferenceOwner
// Offset::0x2B99010;
FSMInstance* FSMInstance::GetMasterReferenceOwner();


// Function  SMSystem.SMInstance.GetNestedActiveStateGuid
// Offset::0x2B9AAA0;
FGuid FSMInstance::GetNestedActiveStateGuid();


// Function  SMSystem.SMInstance.GetNestedActiveStateName
// Offset::0x2B9AB40;
FString FSMInstance::GetNestedActiveStateName();


// Function  SMSystem.SMInstance.GetNetworkInterface
// Offset::0x2B99230;
TScriptInterface<ISMStateMachineNetworkedInterface> FSMInstance::GetNetworkInterface();


// Function  SMSystem.SMInstance.GetNodeInstanceByGuid
// Offset::0x2B99E20;
FSMNodeInstance* FSMInstance::GetNodeInstanceByGuid(FGuid Guid);


// Function  SMSystem.SMInstance.GetPrimaryReferenceOwner
// Offset::0x2B99010;
FSMInstance* FSMInstance::GetPrimaryReferenceOwner();


// Function  SMSystem.SMInstance.GetReferencedInstanceByGuid
// Offset::0x2B9A030;
FSMInstance* FSMInstance::GetReferencedInstanceByGuid(FGuid Guid);


// Function  SMSystem.SMInstance.GetReferenceOwner
// Offset::0x2B99050;
FSMInstance* FSMInstance::GetReferenceOwner();


// Function  SMSystem.SMInstance.GetRootStateMachineInstance
// Offset::0x2B99BA0;
FSMStateMachineInstance* FSMInstance::GetRootStateMachineInstance();


// Function  SMSystem.SMInstance.GetRootStateMachineNodeInstance
// Offset::0x2B99BA0;
FSMStateMachineInstance* FSMInstance::GetRootStateMachineNodeInstance();


// Function  SMSystem.SMInstance.GetSingleActiveStateGuid
// Offset::0x2B9A7E0;
FGuid FSMInstance::GetSingleActiveStateGuid(bool bCheckNested);


// Function  SMSystem.SMInstance.GetSingleActiveStateInstance
// Offset::0x2B9A5F0;
FSMStateInstance_Base* FSMInstance::GetSingleActiveStateInstance(bool bCheckNested);


// Function  SMSystem.SMInstance.GetStateHistory
// Offset::0x2B994D0;
TArray<FSMStateHistory> FSMInstance::GetStateHistory();


// Function  SMSystem.SMInstance.GetStateHistoryMaxCount
// Offset::0x2B99400;
int32_t FSMInstance::GetStateHistoryMaxCount();


// Function  SMSystem.SMInstance.GetStateInstanceByGuid
// Offset::0x2B99F80;
FSMStateInstance_Base* FSMInstance::GetStateInstanceByGuid(FGuid Guid);


// Function  SMSystem.SMInstance.GetStateInstanceByQualifiedName
// Offset::0x2B99D70;
FSMStateInstance_Base* FSMInstance::GetStateInstanceByQualifiedName(FString InFullPath);


// Function  SMSystem.SMInstance.GetStateMachineClass
// Offset::0x2B98FE0;
FSMStateMachineInstance* FSMInstance::GetStateMachineClass();


// Function  SMSystem.SMInstance.GetStopOnEndState
// Offset::0x2B99610;
bool FSMInstance::GetStopOnEndState();


// Function  SMSystem.SMInstance.GetTickInterval
// Offset::0x2B996E0;
float FSMInstance::GetTickInterval();


// Function  SMSystem.SMInstance.GetTransitionInstanceByGuid
// Offset::0x2B99ED0;
FSMTransitionInstance* FSMInstance::GetTransitionInstanceByGuid(FGuid Guid);


// Function  SMSystem.SMInstance.HasStarted
// Offset::0x2B99100;
bool FSMInstance::HasStarted();


// Function  SMSystem.SMInstance.Initialize
// Offset::0x2B9B810;
void FSMInstance::Initialize(FObject* Context);


// Function  SMSystem.SMInstance.Internal_EvaluateAndTakeTransitionChainByGuid
// Offset::0x2B98870;
bool FSMInstance::Internal_EvaluateAndTakeTransitionChainByGuid(FGuid PathGuid);


// Function  SMSystem.SMInstance.Internal_EventCleanup
// Offset::0x2B987A0;
void FSMInstance::Internal_EventCleanup(FGuid PathGuid);


// Function  SMSystem.SMInstance.Internal_EventUpdate
// Offset::0x2B98850;
void FSMInstance::Internal_EventUpdate();


// Function  SMSystem.SMInstance.Internal_Update
// Offset::0x2B98920;
void FSMInstance::Internal_Update(float DeltaSeconds);


// Function  SMSystem.SMInstance.IsActive
// Offset::0x2B99B70;
bool FSMInstance::IsActive();


// Function  SMSystem.SMInstance.IsInEndState
// Offset::0x2B995E0;
bool FSMInstance::IsInEndState();


// Function  SMSystem.SMInstance.IsInitialized
// Offset::0x2B990D0;
bool FSMInstance::IsInitialized();


// Function  SMSystem.SMInstance.IsInitializingAsync
// Offset::0x2B990A0;
bool FSMInstance::IsInitializingAsync();


// Function  SMSystem.SMInstance.IsTickable
// Offset::0x2B9B940;
bool FSMInstance::IsTickable();


// Function  SMSystem.SMInstance.IsTickableWhenPaused
// Offset::0x2B9B910;
bool FSMInstance::IsTickableWhenPaused();


// Function  SMSystem.SMInstance.K2_InitializeAsync
// Offset::0x2B9AC40;
void FSMInstance::K2_InitializeAsync(FObject* Context,FLatentActionInfo LatentInfo);


// Function  SMSystem.SMInstance.K2_TryGetNetworkInterface
// Offset::0x2B99130;
void FSMInstance::K2_TryGetNetworkInterface(TScriptInterface<ISMStateMachineNetworkedInterface> Interface,bool bIsValid);


// Function  SMSystem.SMInstance.LoadFromMultipleStates
// Offset::0x2B9AE40;
void FSMInstance::LoadFromMultipleStates(TArray<FGuid> FromGuids,bool bNotify);


// Function  SMSystem.SMInstance.LoadFromState
// Offset::0x2B9AF50;
void FSMInstance::LoadFromState(FGuid FromGuid,bool bAllParents,bool bNotify);


// Function  SMSystem.SMInstance.OnContextPawnRestarted
// Offset::0x2B986D0;
void FSMInstance::OnContextPawnRestarted(FPawn* Pawn);


// Function  SMSystem.SMInstance.OnPreStateMachineInitialized
// Offset::0x17A1E00;
void FSMInstance::OnPreStateMachineInitialized();


// Function  SMSystem.SMInstance.OnStateMachineInitialized
// Offset::0x17AA8C0;
void FSMInstance::OnStateMachineInitialized();


// Function  SMSystem.SMInstance.OnStateMachineInitialStateLoaded
// Offset::0x2B9AD40;
void FSMInstance::OnStateMachineInitialStateLoaded(FGuid StateGuid);


// Function  SMSystem.SMInstance.OnStateMachineShutdown
// Offset::0x179F4C0;
void FSMInstance::OnStateMachineShutdown();


// Function  SMSystem.SMInstance.OnStateMachineStart
// Offset::0x179DEB0;
void FSMInstance::OnStateMachineStart();


// Function  SMSystem.SMInstance.OnStateMachineStateChanged
// Offset::0x2B98BA0;
void FSMInstance::OnStateMachineStateChanged(FSMStateInfo ToState,FSMStateInfo FromState);


// Function  SMSystem.SMInstance.OnStateMachineStateStarted
// Offset::0x2B98A60;
void FSMInstance::OnStateMachineStateStarted(FSMStateInfo State);


// Function  SMSystem.SMInstance.OnStateMachineStop
// Offset::0x179F4A0;
void FSMInstance::OnStateMachineStop();


// Function  SMSystem.SMInstance.OnStateMachineTransitionTaken
// Offset::0x2B98DB0;
void FSMInstance::OnStateMachineTransitionTaken(FSMTransitionInfo Transition);


// Function  SMSystem.SMInstance.OnStateMachineUpdate
// Offset::0x2B98E90;
void FSMInstance::OnStateMachineUpdate(float DeltaSeconds);


// Function  SMSystem.SMInstance.PreloadAllNodeInstances
// Offset::0x2B9B290;
void FSMInstance::PreloadAllNodeInstances();


// Function  SMSystem.SMInstance.REP_OnReplicatedReferencesLoaded
// Offset::0x2B99080;
void FSMInstance::REP_OnReplicatedReferencesLoaded();


// Function  SMSystem.SMInstance.ReplicatedRestart
// Offset::0x2B9B690;
void FSMInstance::ReplicatedRestart();


// Function  SMSystem.SMInstance.ReplicatedStart
// Offset::0x2B9B6D0;
void FSMInstance::ReplicatedStart();


// Function  SMSystem.SMInstance.ReplicatedStop
// Offset::0x2B9B6B0;
void FSMInstance::ReplicatedStop();


// Function  SMSystem.SMInstance.Restart
// Offset::0x2B9B710;
void FSMInstance::Restart();


// Function  SMSystem.SMInstance.RunUpdateAsReference
// Offset::0x2B989C0;
void FSMInstance::RunUpdateAsReference(float DeltaSeconds);


// Function  SMSystem.SMInstance.SetAutoManageTime
// Offset::0x2B99740;
void FSMInstance::SetAutoManageTime(bool Value);


// Function  SMSystem.SMInstance.SetCanEverTick
// Offset::0x2B99A90;
void FSMInstance::SetCanEverTick(bool Value);


// Function  SMSystem.SMInstance.SetCanTickWhenPaused
// Offset::0x2B99920;
void FSMInstance::SetCanTickWhenPaused(bool Value);


// Function  SMSystem.SMInstance.SetContext
// Offset::0x2B99540;
void FSMInstance::SetContext(FObject* Context);


// Function  SMSystem.SMInstance.SetGuidRedirectMap
// Offset::0x2B99BE0;
void FSMInstance::SetGuidRedirectMap(TMap<FGuid,FGuid> InGuidMap);


// Function  SMSystem.SMInstance.SetStateHistoryMaxCount
// Offset::0x2B99430;
void FSMInstance::SetStateHistoryMaxCount(int32_t NewSize);


// Function  SMSystem.SMInstance.SetStateMachineClass
// Offset::0x2B98F30;
void FSMInstance::SetStateMachineClass(FSMStateMachineInstance* NewStateMachineClass);


// Function  SMSystem.SMInstance.SetStopOnEndState
// Offset::0x2B99640;
void FSMInstance::SetStopOnEndState(bool Value);


// Function  SMSystem.SMInstance.SetTickBeforeBeginPlay
// Offset::0x2B99880;
void FSMInstance::SetTickBeforeBeginPlay(bool Value);


// Function  SMSystem.SMInstance.SetTickInterval
// Offset::0x2B997E0;
void FSMInstance::SetTickInterval(float Value);


// Function  SMSystem.SMInstance.SetTickOnManualUpdate
// Offset::0x2B999F0;
void FSMInstance::SetTickOnManualUpdate(bool Value);


// Function  SMSystem.SMInstance.Shutdown
// Offset::0x2B9B6F0;
void FSMInstance::Shutdown();


// Function  SMSystem.SMInstance.Start
// Offset::0x2B9B7F0;
void FSMInstance::Start();


// Function  SMSystem.SMInstance.StartWithNewContext
// Offset::0x2B9B5F0;
void FSMInstance::StartWithNewContext(FObject* Context);


// Function  SMSystem.SMInstance.Stop
// Offset::0x2B9B730;
void FSMInstance::Stop();


// Function  SMSystem.SMInstance.SwitchActiveState
// Offset::0x2B9B1A0;
void FSMInstance::SwitchActiveState(FSMStateInstance_Base* NewStateInstance,bool bDeactivateOtherStates);


// Function  SMSystem.SMInstance.SwitchActiveStateByQualifiedName
// Offset::0x2B9B0A0;
void FSMInstance::SwitchActiveStateByQualifiedName(FString InFullPath,bool bDeactivateOtherStates);


// Function  SMSystem.SMInstance.TakeTransitionChain
// Offset::0x2B9B2B0;
bool FSMInstance::TakeTransitionChain(TArray<FSMTransitionInstance*> InTransitionChain);


// Function  SMSystem.SMInstance.Tick
// Offset::0x2704920;
void FSMInstance::Tick(float DeltaTime);


// Function  SMSystem.SMInstance.TryGetNestedActiveState
// Offset::0x2B9A910;
void FSMInstance::TryGetNestedActiveState(FSMStateInfo FoundState,bool bSuccess);


// Function  SMSystem.SMInstance.TryGetStateInfo
// Offset::0x2B9A270;
void FSMInstance::TryGetStateInfo(FGuid Guid,FSMStateInfo StateInfo,bool bSuccess);


// Function  SMSystem.SMInstance.TryGetTransitionInfo
// Offset::0x2B9A0E0;
void FSMInstance::TryGetTransitionInfo(FGuid Guid,FSMTransitionInfo TransitionInfo,bool bSuccess);


// Function  SMSystem.SMInstance.Update
// Offset::0x2B9B750;
void FSMInstance::Update(float DeltaSeconds);


// Function  EmbarkGameplay.EmbarkSMInstance.GetActiveStateData
// Offset::0x2200CC0;
bool FEmbarkSMInstance::GetActiveStateData(FEmbarkSMActiveStateData ActiveStateData);


// Function  EmbarkGameplay.EmbarkSMInstance.UpdateStateFromStateData
// Offset::0x2200C10;
void FEmbarkSMInstance::UpdateStateFromStateData(FEmbarkSMActiveStateData NewActiveStateData);


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.Internal_OnStateMachineInitializedEvent
// Offset::0x2201BA0;
void FEmbarkSMStateMachineComponent::Internal_OnStateMachineInitializedEvent(FSMInstance* Instance);


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.Internal_OnStateMachineStarted
// Offset::0x2201B00;
void FEmbarkSMStateMachineComponent::Internal_OnStateMachineStarted(FSMInstance* SMInstance);


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.Internal_OnStateMachineStateChanged
// Offset::0x22010D0;
void FEmbarkSMStateMachineComponent::Internal_OnStateMachineStateChanged(FSMInstance* SMInstance,FSMStateInfo ToState,FSMStateInfo FromState);


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.Internal_OnStateMachineStopped
// Offset::0x2201980;
void FEmbarkSMStateMachineComponent::Internal_OnStateMachineStopped(FSMInstance* SMInstance);


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.Internal_OnStateMachineTransitionTaken
// Offset::0x2201770;
void FEmbarkSMStateMachineComponent::Internal_OnStateMachineTransitionTaken(FSMInstance* SMInstance,FSMTransitionInfo Transition);


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.Internal_OnStateMachineUpdated
// Offset::0x2201A20;
void FEmbarkSMStateMachineComponent::Internal_OnStateMachineUpdated(FSMInstance* SMInstance,float DeltaSeconds);


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.OnRep_ActiveStateData
// Offset::0x22010B0;
void FEmbarkSMStateMachineComponent::OnRep_ActiveStateData();


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.Shutdown
// Offset::0x2201C40;
void FEmbarkSMStateMachineComponent::Shutdown();


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.Start
// Offset::0x2201D20;
void FEmbarkSMStateMachineComponent::Start();


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.Stop
// Offset::0x2201C60;
void FEmbarkSMStateMachineComponent::Stop();


// Function  EmbarkGameplay.EmbarkSMStateMachineComponent.Update
// Offset::0x2201C80;
void FEmbarkSMStateMachineComponent::Update(float DeltaSeconds);


// Function  EmbarkGameplay.EmbarkSpectator.ReceivePlayerSetupInputComponent
// Offset::0x3D30810;
void FEmbarkSpectator::ReceivePlayerSetupInputComponent(FInputComponent* PlayerInputComponent);


// Function  Engine.SpringArmComponent.GetTargetRotation
// Offset::0x653C5F0;
FRotator FSpringArmComponent::GetTargetRotation();


// Function  Engine.SpringArmComponent.GetUnfixedCameraPosition
// Offset::0x653C590;
FVector FSpringArmComponent::GetUnfixedCameraPosition();


// Function  Engine.SpringArmComponent.IsCollisionFixApplied
// Offset::0x653C560;
bool FSpringArmComponent::IsCollisionFixApplied();


// Function  EmbarkGameplay.EmbarkSpringArmComponent.GetIgnoreCollisionActors
// Offset::0x2202A30;
void FEmbarkSpringArmComponent::GetIgnoreCollisionActors(TArray<FActor*> OutActors);


// Function  EmbarkGameplay.EmbarkSpringArmComponent.RemoveActorFromIgnoreCollisionActors
// Offset::0x2202990;
void FEmbarkSpringArmComponent::RemoveActorFromIgnoreCollisionActors(FActor* InActor);


// Function  EmbarkGameplay.EmbarkSpringArmComponent.SetIgnoreCollisionActors
// Offset::0x2202AE0;
void FEmbarkSpringArmComponent::SetIgnoreCollisionActors(TArray<FActor*> InActors);


// Function  EmbarkReplicatedSubobjects.ReplicatedSubobject.AddObjectToReplicate
// Offset::0x2212070;
void FReplicatedSubobject::AddObjectToReplicate(FReplicatedSubobject* ObjectToReplicate);


// Function  EmbarkReplicatedSubobjects.ReplicatedSubobject.GetUsesReplicationKeyForReplication
// Offset::0x2212110;
bool FReplicatedSubobject::GetUsesReplicationKeyForReplication();


// Function  EmbarkReplicatedSubobjects.ReplicatedSubobject.PostReplication
// Offset::0x3D30810;
void FReplicatedSubobject::PostReplication();


// Function  EmbarkReplicatedSubobjects.ReplicatedSubobject.ScriptReplicateSubobjects
// Offset::0x3D30810;
void FReplicatedSubobject::ScriptReplicateSubobjects();


// Function  EmbarkReplicatedSubobjects.ReplicatedSubobject.SetActorComponentToPropagateReplicationKeyDirtyTo
// Offset::0x22121D0;
void FReplicatedSubobject::SetActorComponentToPropagateReplicationKeyDirtyTo(FActorComponent* ActorComponent);


// Function  EmbarkReplicatedSubobjects.ReplicatedSubobject.SetOuter
// Offset::0x2211FD0;
void FReplicatedSubobject::SetOuter(FObject* Outer);


// Function  EmbarkReplicatedSubobjects.ReplicatedSubobject.SetReplicatedSubobjectToPropagateReplicationKeyDirtyTo
// Offset::0x2212130;
void FReplicatedSubobject::SetReplicatedSubobjectToPropagateReplicationKeyDirtyTo(FReplicatedSubobject* TargtReplicatedSubobject);


// Function  EmbarkReplicatedSubobjects.ReplicatedSubobject.SetReplicationKeyDirty
// Offset::0x2212310;
void FReplicatedSubobject::SetReplicationKeyDirty();


// Function  EmbarkReplicatedSubobjects.ReplicatedSubobject.SetUsesReplicationKeyForReplication
// Offset::0x2212270;
void FReplicatedSubobject::SetUsesReplicationKeyForReplication(bool bNewUserRepKeyForReplication);


// Function  EmbarkGameplay.EmbarkSquadMember.GetMemberPawn
// Offset::0x2202FF0;
FPawn* FEmbarkSquadMember::GetMemberPawn();


// Function  EmbarkGameplay.EmbarkSquadMember.OnRep_PlayerState
// Offset::0x2202FD0;
void FEmbarkSquadMember::OnRep_PlayerState();


// Function  EmbarkGameplay.EmbarkSquadMember.OnRep_UniqueId
// Offset::0x2202FD0;
void FEmbarkSquadMember::OnRep_UniqueId();


// Function  EmbarkGameplay.EmbarkSquad.AddPartyMember
// Offset::0x22036C0;
void FEmbarkSquad::AddPartyMember(FString PartyId);


// Function  EmbarkGameplay.EmbarkSquad.GetInfoFromPartyId
// Offset::0x2203600;
FPartyInfo FEmbarkSquad::GetInfoFromPartyId(FString PartyId);


// Function  EmbarkGameplay.EmbarkSquad.OnMod_Members
// Offset::0x22035C0;
void FEmbarkSquad::OnMod_Members();


// Function  EmbarkGameplay.EmbarkSquad.OnRep_Members
// Offset::0x22035E0;
void FEmbarkSquad::OnRep_Members();


// Function  EmbarkGameplay.EmbarkSquad.OnRep_ParticipationType
// Offset::0x22035C0;
void FEmbarkSquad::OnRep_ParticipationType();


// Function  EmbarkGameplay.EmbarkSquad.OnRep_SquadId
// Offset::0x22035C0;
void FEmbarkSquad::OnRep_SquadId();


// Function  EmbarkGameplay.EmbarkSquad.OnRep_Title
// Offset::0x22035C0;
void FEmbarkSquad::OnRep_Title();


// Function  EmbarkGameplay.SquadStatics.FlattenSquads
// Offset::0x2203FD0;
TArray<FEmbarkSquadMember*> FSquadStatics::FlattenSquads(TArray<FEmbarkSquad*> Squads,enum class ESquadParticipationType ParticipationTypeFilter);


// Function  EmbarkGameplay.SquadStatics.ParseSquadJson
// Offset::0x2204270;
TArray<FEmbarkSquad*> FSquadStatics::ParseSquadJson(FObject* WorldContextObject,FString Json);


// Function  EmbarkGameplay.SquadStatics.TryParseSquadJson
// Offset::0x2204110;
bool FSquadStatics::TryParseSquadJson(FObject* WorldContextObject,FString Json,TArray<FEmbarkSquad*> OutSquads);


// Function  EmbarkGameplay.EmbarkStateMachineTransition.BP_CanEnter
// Offset::0x1A7E8E0;
bool FEmbarkStateMachineTransition::BP_CanEnter();


// Function  EmbarkGameplay.EmbarkStateMachineTransition.BP_OnStartBeingEvaluated
// Offset::0x3D30810;
void FEmbarkStateMachineTransition::BP_OnStartBeingEvaluated();


// Function  EmbarkGameplay.EmbarkStateMachineTransition.BP_OnTransition
// Offset::0x3D30810;
void FEmbarkStateMachineTransition::BP_OnTransition();


// Function  EmbarkGameplay.EmbarkStateMachineState.BP_CanExit
// Offset::0x1A7E8E0;
bool FEmbarkStateMachineState::BP_CanExit();


// Function  EmbarkGameplay.EmbarkStateMachineState.BP_Enter
// Offset::0x3D30810;
void FEmbarkStateMachineState::BP_Enter();


// Function  EmbarkGameplay.EmbarkStateMachineState.BP_Exit
// Offset::0x3D30810;
void FEmbarkStateMachineState::BP_Exit();


// Function  EmbarkGameplay.EmbarkStateMachineState.BP_Tick
// Offset::0x3D30810;
void FEmbarkStateMachineState::BP_Tick(float DeltaSeconds);


// Function  EmbarkGameplay.EmbarkStateMachineState.ForceTickStateManually
// Offset::0x2205370;
void FEmbarkStateMachineState::ForceTickStateManually(float DeltaSeconds);


// Function  EmbarkGameplay.EmbarkStateMachineState.From
// Offset::0x22054E0;
FEmbarkStateMachineStateInstance FEmbarkStateMachineState::From(FEmbarkStateMachineState* State);


// Function  EmbarkGameplay.EmbarkStateMachineState.GetTimeInState
// Offset::0x2205410;
float FEmbarkStateMachineState::GetTimeInState();


// Function  EmbarkGameplay.EmbarkStateMachineState.SetCanOnlyExitWhenLocalStateMachineIsFinished
// Offset::0x2205630;
void FEmbarkStateMachineState::SetCanOnlyExitWhenLocalStateMachineIsFinished(bool bCanOnlyExitWhenLocalStateMachineIsFinished);


// Function  EmbarkGameplay.EmbarkStateMachineState.Start
// Offset::0x2205440;
void FEmbarkStateMachineState::Start(FEmbarkStateMachineState* State);


// Function  EmbarkGameplay.EmbarkStateMachineMixinLibrary.From
// Offset::0x2206880;
FEmbarkStateMachineStateInstance FEmbarkStateMachineMixinLibrary::From(FEmbarkStateMachine StateMachine,FEmbarkStateMachineState* State);


// Function  EmbarkGameplay.EmbarkStateMachineMixinLibrary.GetActiveState
// Offset::0x22065D0;
FEmbarkStateMachineState* FEmbarkStateMachineMixinLibrary::GetActiveState(FEmbarkStateMachine StateMachine);


// Function  EmbarkGameplay.EmbarkStateMachineMixinLibrary.GetActiveTransitions
// Offset::0x2206430;
TArray<FEmbarkStateMachineTransition*> FEmbarkStateMachineMixinLibrary::GetActiveTransitions(FEmbarkStateMachine StateMachine);


// Function  EmbarkGameplay.EmbarkStateMachineMixinLibrary.HasReachedEndState
// Offset::0x2206730;
bool FEmbarkStateMachineMixinLibrary::HasReachedEndState(FEmbarkStateMachine StateMachine);


// Function  EmbarkGameplay.EmbarkStateMachineMixinLibrary.Start
// Offset::0x2206C80;
void FEmbarkStateMachineMixinLibrary::Start(FEmbarkStateMachine StateMachine,FEmbarkStateMachineState* State);


// Function  EmbarkGameplay.EmbarkStateMachineMixinLibrary.Tick
// Offset::0x2206AE0;
void FEmbarkStateMachineMixinLibrary::Tick(FEmbarkStateMachine StateMachine,float DeltaSeconds);


// Function  EmbarkGameplay.EmbarkStateMachineStateInstanceMixinLibrary.To
// Offset::0x2207790;
FEmbarkStateMachineStateInstance FEmbarkStateMachineStateInstanceMixinLibrary::To(FEmbarkStateMachineStateInstance StateInstance,FEmbarkStateMachineState* State);


// Function  EmbarkGameplay.EmbarkStateMachineStateInstanceMixinLibrary.ToAlways
// Offset::0x2207590;
FEmbarkStateMachineStateInstance FEmbarkStateMachineStateInstanceMixinLibrary::ToAlways(FEmbarkStateMachineStateInstance StateInstance,FEmbarkStateMachineState* State);


// Function  EmbarkGameplay.EmbarkStateMachineStateInstanceMixinLibrary.Via
// Offset::0x2207340;
FEmbarkStateMachineStateInstance FEmbarkStateMachineStateInstanceMixinLibrary::Via(FEmbarkStateMachineStateInstance StateInstance,FEmbarkStateMachineTransition* Transition,int32_t Priority);


// Function  EmbarkGameplay.EmbarkStaticMeshComponent.SetRenderUpdateEnabled
// Offset::0x2200370;
void FEmbarkStaticMeshComponent::SetRenderUpdateEnabled(bool bEnabled);


// Function  EmbarkGameplay.EmbarkWorldSubsystem.OnDeinitialized
// Offset::0x3D30810;
void FEmbarkWorldSubsystem::OnDeinitialized();


// Function  EmbarkGameplay.EmbarkWorldSubsystem.OnInitialized
// Offset::0x3D30810;
void FEmbarkWorldSubsystem::OnInitialized();


// Function  EmbarkGameplay.EmbarkTickableWorldSubsystem.OnDeinitialized
// Offset::0x3D30810;
void FEmbarkTickableWorldSubsystem::OnDeinitialized();


// Function  EmbarkGameplay.EmbarkTickableWorldSubsystem.OnInitialized
// Offset::0x3D30810;
void FEmbarkTickableWorldSubsystem::OnInitialized();


// Function  EmbarkGameplay.EmbarkTickableWorldSubsystem.OnTick
// Offset::0x3D30810;
void FEmbarkTickableWorldSubsystem::OnTick(float DeltaTime);


// Function  EmbarkGameplay.GameStateBaseMixinLibrary.AddPlayerState
// Offset::0x220CE70;
void FGameStateBaseMixinLibrary::AddPlayerState(FGameStateBase* GameStateBase,FPlayerState* PlayerState);


// Function  EmbarkGameplay.GameStateBaseMixinLibrary.RemovePlayerState
// Offset::0x220CD60;
void FGameStateBaseMixinLibrary::RemovePlayerState(FGameStateBase* GameStateBase,FPlayerState* PlayerState);


// Function  EmbarkGameplay.LevelSequenceLibrary.CreateLevelSequencePlayerWithClass
// Offset::0x220D270;
FLevelSequencePlayer* FLevelSequenceLibrary::CreateLevelSequencePlayerWithClass(FObject* WorldContextObject,FLevelSequence* InLevelSequence,FMovieSceneSequencePlaybackSettings Settings,FLevelSequenceActor* LevelSequenceActorType,FLevelSequenceActor* OutActor);


// Function  EmbarkInstigator.InstigatorMixinLibrary.GetCauser
// Offset::0x220E9E0;
FActor* FInstigatorMixinLibrary::GetCauser(FInstigator InInstigator);


// Function  EmbarkInstigator.InstigatorMixinLibrary.GetInstigatingItem
// Offset::0x220EC40;
FActor* FInstigatorMixinLibrary::GetInstigatingItem(FInstigator InInstigator);


// Function  EmbarkInstigator.InstigatorMixinLibrary.GetInstigator
// Offset::0x220EEA0;
FActor* FInstigatorMixinLibrary::GetInstigator(FInstigator InInstigator);


// Function  EmbarkInstigator.InstigatorMixinLibrary.GetInstigatorPlayerState
// Offset::0x220F100;
FPlayerState* FInstigatorMixinLibrary::GetInstigatorPlayerState(FInstigator InInstigator);


// Function  EmbarkInstigator.InstigatorMixinLibrary.SetCauser
// Offset::0x220E890;
void FInstigatorMixinLibrary::SetCauser(FInstigator InInstigator,FActor* InCauser);


// Function  EmbarkInstigator.InstigatorMixinLibrary.SetInstigatingItem
// Offset::0x220EAE0;
void FInstigatorMixinLibrary::SetInstigatingItem(FInstigator InInstigator,FActor* InInstigatingItem);


// Function  EmbarkInstigator.InstigatorMixinLibrary.SetInstigator
// Offset::0x220ED40;
void FInstigatorMixinLibrary::SetInstigator(FInstigator InInstigator,FActor* InInstigatorActor);


// Function  EmbarkInstigator.InstigatorMixinLibrary.SetInstigatorPlayerState
// Offset::0x220EFA0;
void FInstigatorMixinLibrary::SetInstigatorPlayerState(FInstigator InInstigator,FPlayerState* InPlayerState);


// Function  EmbarkReplicatedSubobjects.ActorComponentReplicatedSubobjects.AddObjectToReplicate
// Offset::0x2211430;
void FActorComponentReplicatedSubobjects::AddObjectToReplicate(FReplicatedSubobject* ObjectToReplicate);


// Function  EmbarkReplicatedSubobjects.ActorComponentReplicatedSubobjects.ScriptReplicateSubobjects
// Offset::0x3D30810;
void FActorComponentReplicatedSubobjects::ScriptReplicateSubobjects();


// Function  EmbarkReplicatedSubobjects.ActorReplicatedSubobjects.AddObjectToReplicate
// Offset::0x2211A70;
void FActorReplicatedSubobjects::AddObjectToReplicate(FReplicatedSubobject* ObjectToReplicate);


// Function  EmbarkReplicatedSubobjects.ActorReplicatedSubobjects.ScriptReplicateSubobjects
// Offset::0x3D30810;
void FActorReplicatedSubobjects::ScriptReplicateSubobjects();


// Function  Engine.BoxComponent.GetScaledBoxExtent
// Offset::0x63461D0;
FVector FBoxComponent::GetScaledBoxExtent();


// Function  Engine.BoxComponent.GetUnscaledBoxExtent
// Offset::0x6346180;
FVector FBoxComponent::GetUnscaledBoxExtent();


// Function  Engine.BoxComponent.SetBoxExtent
// Offset::0x6346240;
void FBoxComponent::SetBoxExtent(FVector InBoxExtent,bool bUpdateOverlaps);


// Function  Engine.InstancedStaticMeshComponent.AddInstance
// Offset::0x63CA840;
int32_t FInstancedStaticMeshComponent::AddInstance(FTransform InstanceTransform,bool bWorldSpace);


// Function  Engine.InstancedStaticMeshComponent.AddInstances
// Offset::0x63CA6A0;
TArray<int32_t> FInstancedStaticMeshComponent::AddInstances(TArray<FTransform> InstanceTransforms,bool bShouldReturnIndices,bool bWorldSpace);


// Function  Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
// Offset::0x63CA5A0;
int32_t FInstancedStaticMeshComponent::AddInstanceWorldSpace(FTransform WorldTransform);


// Function  Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
// Offset::0x63C9B70;
bool FInstancedStaticMeshComponent::BatchUpdateInstancesTransform(int32_t StartInstanceIndex,int32_t NumInstances,FTransform NewInstancesTransform,bool bWorldSpace,bool bMarkRenderStateDirty,bool bTeleport);


// Function  Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
// Offset::0x63C9E10;
bool FInstancedStaticMeshComponent::BatchUpdateInstancesTransforms(int32_t StartInstanceIndex,TArray<FTransform> NewInstancesTransforms,bool bWorldSpace,bool bMarkRenderStateDirty,bool bTeleport);


// Function  Engine.InstancedStaticMeshComponent.ClearInstances
// Offset::0x63C99F0;
void FInstancedStaticMeshComponent::ClearInstances();


// Function  Engine.InstancedStaticMeshComponent.GetInstanceCount
// Offset::0x63C99C0;
int32_t FInstancedStaticMeshComponent::GetInstanceCount();


// Function  Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
// Offset::0x63C9580;
TArray<int32_t> FInstancedStaticMeshComponent::GetInstancesOverlappingBox(FBox Box,bool bBoxInWorldSpace);


// Function  Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
// Offset::0x63C96C0;
TArray<int32_t> FInstancedStaticMeshComponent::GetInstancesOverlappingSphere(FVector Center,float Radius,bool bSphereInWorldSpace);


// Function  Engine.InstancedStaticMeshComponent.GetInstanceTransform
// Offset::0x63CA270;
bool FInstancedStaticMeshComponent::GetInstanceTransform(int32_t InstanceIndex,FTransform OutInstanceTransform,bool bWorldSpace);


// Function  Engine.InstancedStaticMeshComponent.IsValidInstance
// Offset::0x63C9920;
bool FInstancedStaticMeshComponent::IsValidInstance(int32_t InstanceIndex);


// Function  Engine.InstancedStaticMeshComponent.RemoveInstance
// Offset::0x63C9AD0;
bool FInstancedStaticMeshComponent::RemoveInstance(int32_t InstanceIndex);


// Function  Engine.InstancedStaticMeshComponent.RemoveInstances
// Offset::0x63C9A10;
bool FInstancedStaticMeshComponent::RemoveInstances(TArray<int32_t> InstancesToRemove);


// Function  Engine.InstancedStaticMeshComponent.SetCullDistances
// Offset::0x63C9840;
void FInstancedStaticMeshComponent::SetCullDistances(int32_t StartCullDistance,int32_t EndCullDistance);


// Function  Engine.InstancedStaticMeshComponent.SetCustomDataValue
// Offset::0x63CA410;
bool FInstancedStaticMeshComponent::SetCustomDataValue(int32_t InstanceIndex,int32_t CustomDataIndex,float CustomDataValue,bool bMarkRenderStateDirty);


// Function  Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
// Offset::0x63CA020;
bool FInstancedStaticMeshComponent::UpdateInstanceTransform(int32_t InstanceIndex,FTransform NewInstanceTransform,bool bWorldSpace,bool bMarkRenderStateDirty,bool bTeleport);


// Function  Engine.PrimaryDataAsset.ReceivePreSave
// Offset::0x3D30810;
void FPrimaryDataAsset::ReceivePreSave();


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.ClearAllLoadedAssetsCache
// Offset::0x221D1C0;
void FEmbarkStreamingDataAsset::ClearAllLoadedAssetsCache(bool bForceGC);


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.ClearLoadedAssetsCache
// Offset::0x221D270;
void FEmbarkStreamingDataAsset::ClearLoadedAssetsCache();


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.DispatchStreamingHint
// Offset::0x221D290;
void FEmbarkStreamingDataAsset::DispatchStreamingHint();


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.OnStreamingDataAssetComplete
// Offset::0x221D840;
void FEmbarkStreamingDataAsset::OnStreamingDataAssetComplete();


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.ReceiveOnStreamingDataAssetComplete
// Offset::0x3D30810;
void FEmbarkStreamingDataAsset::ReceiveOnStreamingDataAssetComplete();


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.ReceiveStreamingHint
// Offset::0x3D30810;
void FEmbarkStreamingDataAsset::ReceiveStreamingHint();


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.ResolveClass
// Offset::0x221D430;
FObject* FEmbarkStreamingDataAsset::ResolveClass(FName DebugPropertyName,FSoftClassPath ClassPath,FObject* ResolvedClass);


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.ResolveObject
// Offset::0x221D2B0;
FObject* FEmbarkStreamingDataAsset::ResolveObject(FName DebugPropertyName,FSoftObjectPath ObjectPath,FObject* ResolvedObject);


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.ResolveSoftClassPath
// Offset::0x221D6E0;
FObject* FEmbarkStreamingDataAsset::ResolveSoftClassPath(FSoftClassPath ClassPath,FName DebugPropertyName);


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.ResolveSoftObjectPath
// Offset::0x221D5B0;
FObject* FEmbarkStreamingDataAsset::ResolveSoftObjectPath(FSoftObjectPath ObjectPath,FName DebugPropertyName);


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.ScheduleStreamingHintsForAllStreamableDataAssets
// Offset::0x221D250;
void FEmbarkStreamingDataAsset::ScheduleStreamingHintsForAllStreamableDataAssets();


// Function  EmbarkStreaming.EmbarkStreamingDataAsset.UseSoftReferenceScanning
// Offset::0x221D810;
bool FEmbarkStreamingDataAsset::UseSoftReferenceScanning();


// Function  EmbarkStreaming.EmbarkStreaming.FlushAsyncLoads
// Offset::0x221F400;
void FEmbarkStreaming::FlushAsyncLoads(enum class EEmbarkStreamingFlushMode FlushMode);


// Function  EmbarkStreaming.EmbarkStreaming.GetAsyncLoadState
// Offset::0x221F310;
void FEmbarkStreaming::GetAsyncLoadState(bool bOutPending,bool bOutSuspended);


// Function  EmbarkStreaming.EmbarkStreaming.LoadAllAsync
// Offset::0x221EC10;
void FEmbarkStreaming::LoadAllAsync(TArray<FSoftObjectPath> TargetsToStream,FObject* Opt_CallbackObject,FName Opt_CallbackFunctionName,FString Opt_DebugName);


// Function  EmbarkStreaming.EmbarkStreaming.LoadAllAsyncEx
// Offset::0x221E470;
void FEmbarkStreaming::LoadAllAsyncEx(TArray<FSoftObjectPath> TargetsToStream,TArray<FSoftClassPath> ClassesToStream,FObject* Opt_CallbackObject,FName Opt_CallbackFunctionName,FString Opt_DebugName);


// Function  EmbarkStreaming.EmbarkStreaming.LoadAssetAsync
// Offset::0x221E9A0;
void FEmbarkStreaming::LoadAssetAsync(FAssetData AssetToStream,FObject* Opt_CallbackObject,FName Opt_CallbackFunctionName,FString Opt_DebugName);


// Function  EmbarkStreaming.EmbarkStreaming.LoadAssetsAsync
// Offset::0x221E740;
void FEmbarkStreaming::LoadAssetsAsync(TArray<FAssetData> AssetsToStream,FObject* Opt_CallbackObject,FName Opt_CallbackFunctionName,FString Opt_DebugName);


// Function  EmbarkStreaming.EmbarkStreaming.LoadAsync
// Offset::0x221EE30;
void FEmbarkStreaming::LoadAsync(FSoftObjectPath TargetToStream,FObject* Opt_CallbackObject,FName Opt_CallbackFunctionName,FString Opt_DebugName);


// Function  EmbarkStreaming.EmbarkStreaming.ResolveClass
// Offset::0x221F1A0;
FObject* FEmbarkStreaming::ResolveClass(FName PropertyName,FSoftClassPath ClassPath,FObject* ResolvedClass);


// Function  EmbarkStreaming.EmbarkStreaming.ResolveObject
// Offset::0x221F030;
FObject* FEmbarkStreaming::ResolveObject(FName PropertyName,FSoftObjectPath ObjectPath,FObject* ResolvedObject);


// Function  EmbarkStreaming.EmbarkStreaming.ResumeAsyncLoads
// Offset::0x221F490;
void FEmbarkStreaming::ResumeAsyncLoads();


// Function  EmbarkStreaming.EmbarkStreaming.SuspendAsyncLoads
// Offset::0x221F4B0;
void FEmbarkStreaming::SuspendAsyncLoads(float Timeout);


// Function  EmbarkTrace.EmbarkTrace.ActorLineTraceSingle
// Offset::0x2228160;
bool FEmbarkTrace::ActorLineTraceSingle(FActor* AgainstActor,FVector Start,FVector End,enum class ECollisionChannel TraceChannel,bool bTraceComplex,FHitResult OutHit);


// Function  EmbarkTrace.EmbarkTrace.AsyncCapsuleTraceSingle
// Offset::0x22273C0;
uint64_t FEmbarkTrace::AsyncCapsuleTraceSingle(FObject* WorldContextObject,FVector Start,FVector End,FRotator Orientation,float Radius,float HalfHeight,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,bool bIgnoreSelf);


// Function  EmbarkTrace.EmbarkTrace.AsyncLineTraceSingle
// Offset::0x2227B60;
uint64_t FEmbarkTrace::AsyncLineTraceSingle(FObject* WorldContextObject,FVector Start,FVector End,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,bool bIgnoreSelf);


// Function  EmbarkTrace.EmbarkTrace.AsyncSphereTraceSingle
// Offset::0x2227800;
uint64_t FEmbarkTrace::AsyncSphereTraceSingle(FObject* WorldContextObject,FVector Start,FVector End,float Radius,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,bool bIgnoreSelf);


// Function  EmbarkTrace.EmbarkTrace.BatchLineTraceSingleByProfile
// Offset::0x2227E60;
uint64_t FEmbarkTrace::BatchLineTraceSingleByProfile(FObject* WorldContextObject,TArray<FEmbarkTraceLineSeg> LineSegs,FName ProfileName,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,bool bIgnoreSelf,TArray<FHitResult> OutHits);


// Function  EmbarkTrace.EmbarkTrace.CapsuleTraceSingle
// Offset::0x22284A0;
bool FEmbarkTrace::CapsuleTraceSingle(FObject* WorldContextObject,FVector Start,FVector End,float Radius,float HalfHeight,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,FHitResult OutHit,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime,FRotator Orientation);


// Function  EmbarkTrace.EmbarkTrace.PrimitiveTraceMultiByProfile
// Offset::0x2228BA0;
bool FEmbarkTrace::PrimitiveTraceMultiByProfile(FObject* WorldContextObject,TArray<FHitResult> OutOverlaps,FVector TraceStart,FVector TraceEnd,FRotator TraceRot,FName ProfileName,TArray<FActor*> ActorsToIgnore,FPrimitiveComponent* PrimitiveComponent,FName BoneName);


// Function  EmbarkTrace.EmbarkTrace.QueryTraceHits
// Offset::0x2227220;
bool FEmbarkTrace::QueryTraceHits(FObject* WorldContextObject,uint64_t InTraceHandle,TArray<FHitResult> OutHits,bool bAppendHits);


// Function  EmbarkTrace.EmbarkRayQueryBuffer.Execute
// Offset::0x2229760;
void FEmbarkRayQueryBuffer::Execute(int32_t FrameDelay);


// Function  EmbarkTrace.EmbarkRayQueryBuffer.HasCompleted
// Offset::0x2229690;
bool FEmbarkRayQueryBuffer::HasCompleted();


// Function  EmbarkTrace.EmbarkRayQueryBuffer.SetNum
// Offset::0x2229800;
void FEmbarkRayQueryBuffer::SetNum(int32_t Size);


// Function  EmbarkTrace.EmbarkRayQueryBuffer.Tick
// Offset::0x22296C0;
void FEmbarkRayQueryBuffer::Tick(float DeltaTime);


// Function  EmbarkTrace.EmbarkGridQueryBuffer.CustomSampleToBuffer
// Offset::0x2229F40;
void FEmbarkGridQueryBuffer::CustomSampleToBuffer(TArray<FVector> SamplePoints);


// Function  EmbarkTrace.EmbarkGridQueryBuffer.ForceInvalidateCache
// Offset::0x2229D30;
void FEmbarkGridQueryBuffer::ForceInvalidateCache();


// Function  EmbarkTrace.EmbarkGridQueryBuffer.GetAverageHeightsAboveGrid
// Offset::0x222A430;
bool FEmbarkGridQueryBuffer::GetAverageHeightsAboveGrid(TArray<FVector> DesiredPoints,TArray<float> QueryRadii,TArray<float> OutHeights,TArray<enum class EQueryResult> Status,bool bAverageNormals,TArray<FVector> OutNormals,bool bVisualize);


// Function  EmbarkTrace.EmbarkGridQueryBuffer.GetCellSize
// Offset::0x222A8D0;
float FEmbarkGridQueryBuffer::GetCellSize();


// Function  EmbarkTrace.EmbarkGridQueryBuffer.GetCurrentLocation
// Offset::0x222A870;
FVector FEmbarkGridQueryBuffer::GetCurrentLocation();


// Function  EmbarkTrace.EmbarkGridQueryBuffer.GetCurrentOrientation
// Offset::0x222A840;
float FEmbarkGridQueryBuffer::GetCurrentOrientation();


// Function  EmbarkTrace.EmbarkGridQueryBuffer.GetCurrentSamplingLocations
// Offset::0x2229D50;
void FEmbarkGridQueryBuffer::GetCurrentSamplingLocations(FVector Origin,FVector StepSide,FVector StepRow);


// Function  EmbarkTrace.EmbarkGridQueryBuffer.GetResults
// Offset::0x222A790;
TArray<FRayHitSimple> FEmbarkGridQueryBuffer::GetResults();


// Function  EmbarkTrace.EmbarkGridQueryBuffer.GetSampleCellSize
// Offset::0x222A8A0;
float FEmbarkGridQueryBuffer::GetSampleCellSize();


// Function  EmbarkTrace.EmbarkGridQueryBuffer.GetSamplePointsX
// Offset::0x222A930;
int32_t FEmbarkGridQueryBuffer::GetSamplePointsX();


// Function  EmbarkTrace.EmbarkGridQueryBuffer.GetSamplePointsY
// Offset::0x222A900;
int32_t FEmbarkGridQueryBuffer::GetSamplePointsY();


// Function  EmbarkTrace.EmbarkGridQueryBuffer.ProjectToSampledGrid
// Offset::0x222A370;
FIntPoint FEmbarkGridQueryBuffer::ProjectToSampledGrid(FVector Location);


// Function  EmbarkTrace.EmbarkGridQueryBuffer.SampleToBuffer
// Offset::0x2229FF0;
void FEmbarkGridQueryBuffer::SampleToBuffer();


// Function  EmbarkTrace.EmbarkGridQueryBuffer.SetSize
// Offset::0x222A150;
void FEmbarkGridQueryBuffer::SetSize(int32_t SamplePointsX,int32_t SamplePointsY,float InternalResolutionRatio,float Width,float RayLength,float CacheScale);


// Function  EmbarkTrace.EmbarkGridQueryBuffer.Tick
// Offset::0x2229EA0;
void FEmbarkGridQueryBuffer::Tick(float DeltaTime);


// Function  EmbarkTrace.EmbarkGridQueryBuffer.Update
// Offset::0x222A010;
void FEmbarkGridQueryBuffer::Update(FVector Location,float Orientation,FVector LinearVelocity);


// Function  EmbarkTweakables.EmbarkTweakablesSubsystem.GetTweakableDefault
// Offset::0x2230AC0;
bool FEmbarkTweakablesSubsystem::GetTweakableDefault(FOnlineTweakable Tweakable,FString OutDefaultValue);


// Function  EmbarkTweakables.EmbarkTweakablesSubsystem.IsInitialized
// Offset::0x2230E20;
bool FEmbarkTweakablesSubsystem::IsInitialized();


// Function  EmbarkTweakables.EmbarkTweakablesSubsystem.IsTweakableDefaulted
// Offset::0x22309D0;
bool FEmbarkTweakablesSubsystem::IsTweakableDefaulted(FOnlineTweakable Tweakable);


// Function  EmbarkTweakables.EmbarkTweakablesSubsystem.RegisterOnlineTweakables_Client
// Offset::0x2230C20;
void FEmbarkTweakablesSubsystem::RegisterOnlineTweakables_Client(FOnlineTweakablesContainer InOnlineTweakablesContainer);


// Function  EmbarkTweakables.EmbarkTweakablesSubsystem.RegisterOnlineTweakables_Server
// Offset::0x2230D20;
void FEmbarkTweakablesSubsystem::RegisterOnlineTweakables_Server(FOnlineTweakablesContainer InOnlineTweakablesContainer);


// Function  Engine.PlayerCameraManager.AddCameraLensEffect
// Offset::0x64C09E0;
FEmitterCameraLensEffectBase* FPlayerCameraManager::AddCameraLensEffect(FEmitterCameraLensEffectBase* LensEffectEmitterClass);


// Function  Engine.PlayerCameraManager.AddGenericCameraLensEffect
// Offset::0x64C0B50;
TScriptInterface<ICameraLensEffectInterface> FPlayerCameraManager::AddGenericCameraLensEffect(FActor* LensEffectEmitterClass);


// Function  Engine.PlayerCameraManager.AddNewCameraModifier
// Offset::0x64C0E30;
FCameraModifier* FPlayerCameraManager::AddNewCameraModifier(FCameraModifier* ModifierClass);


// Function  Engine.PlayerCameraManager.BlueprintUpdateCamera
// Offset::0x3D30810;
bool FPlayerCameraManager::BlueprintUpdateCamera(FActor* CameraTarget,FVector NewCameraLocation,FRotator NewCameraRotation,float NewCameraFOV);


// Function  Engine.PlayerCameraManager.ClearCameraLensEffects
// Offset::0x64C0A80;
void FPlayerCameraManager::ClearCameraLensEffects();


// Function  Engine.PlayerCameraManager.FindCameraModifierByClass
// Offset::0x64C0D90;
FCameraModifier* FPlayerCameraManager::FindCameraModifierByClass(FCameraModifier* ModifierClass);


// Function  Engine.PlayerCameraManager.GetCameraLocation
// Offset::0x64C0C00;
FVector FPlayerCameraManager::GetCameraLocation();


// Function  Engine.PlayerCameraManager.GetCameraRotation
// Offset::0x64C0C60;
FRotator FPlayerCameraManager::GetCameraRotation();


// Function  Engine.PlayerCameraManager.GetFOVAngle
// Offset::0x64C0CC0;
float FPlayerCameraManager::GetFOVAngle();


// Function  Engine.PlayerCameraManager.GetOwningPlayerController
// Offset::0x64C0ED0;
FPlayerController* FPlayerCameraManager::GetOwningPlayerController();


// Function  Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
// Offset::0x1A802D0;
void FPlayerCameraManager::OnPhotographyMultiPartCaptureEnd();


// Function  Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
// Offset::0x1A802F0;
void FPlayerCameraManager::OnPhotographyMultiPartCaptureStart();


// Function  Engine.PlayerCameraManager.OnPhotographySessionEnd
// Offset::0x1A80310;
void FPlayerCameraManager::OnPhotographySessionEnd();


// Function  Engine.PlayerCameraManager.OnPhotographySessionStart
// Offset::0x1BB4100;
void FPlayerCameraManager::OnPhotographySessionStart();


// Function  Engine.PlayerCameraManager.PhotographyCameraModify
// Offset::0x64C0F00;
void FPlayerCameraManager::PhotographyCameraModify(FVector NewCameraLocation,FVector PreviousCameraLocation,FVector OriginalCameraLocation,FVector ResultCameraLocation);


// Function  Engine.PlayerCameraManager.PlayCameraAnim
// Offset::0x64BF990;
FCameraAnimInst* FPlayerCameraManager::PlayCameraAnim(FCameraAnim* Anim,float Rate,float Scale,float BlendInTime,float BlendOutTime,bool bLoop,bool bRandomStartTime,float Duration,enum class ECameraShakePlaySpace PlaySpace,FRotator UserPlaySpaceRot);


// Function  Engine.PlayerCameraManager.RemoveCameraLensEffect
// Offset::0x64C0940;
void FPlayerCameraManager::RemoveCameraLensEffect(FEmitterCameraLensEffectBase* Emitter);


// Function  Engine.PlayerCameraManager.RemoveCameraModifier
// Offset::0x64C0CF0;
bool FPlayerCameraManager::RemoveCameraModifier(FCameraModifier* ModifierToRemove);


// Function  Engine.PlayerCameraManager.RemoveGenericCameraLensEffect
// Offset::0x64C0AA0;
void FPlayerCameraManager::RemoveGenericCameraLensEffect(TScriptInterface<ICameraLensEffectInterface> Emitter);


// Function  Engine.PlayerCameraManager.SetGameCameraCutThisFrame
// Offset::0x64BF6F0;
void FPlayerCameraManager::SetGameCameraCutThisFrame();


// Function  Engine.PlayerCameraManager.SetManualCameraFade
// Offset::0x64BFD90;
void FPlayerCameraManager::SetManualCameraFade(float InFadeAmount,FLinearColor Color,bool bInFadeAudio);


// Function  Engine.PlayerCameraManager.StartCameraFade
// Offset::0x64BFED0;
void FPlayerCameraManager::StartCameraFade(float FromAlpha,float ToAlpha,float Duration,FLinearColor Color,bool bShouldFadeAudio,bool bHoldWhenFinished);


// Function  Engine.PlayerCameraManager.StartCameraShake
// Offset::0x64C07A0;
FCameraShakeBase* FPlayerCameraManager::StartCameraShake(FCameraShakeBase* ShakeClass,float Scale,enum class ECameraShakePlaySpace PlaySpace,FRotator UserPlaySpaceRot);


// Function  Engine.PlayerCameraManager.StartCameraShakeFromSource
// Offset::0x64C05B0;
FCameraShakeBase* FPlayerCameraManager::StartCameraShakeFromSource(FCameraShakeBase* ShakeClass,FCameraShakeSourceComponent* SourceComponent,float Scale,enum class ECameraShakePlaySpace PlaySpace,FRotator UserPlaySpaceRot);


// Function  Engine.PlayerCameraManager.StopAllCameraAnims
// Offset::0x64BF710;
void FPlayerCameraManager::StopAllCameraAnims(bool bImmediate);


// Function  Engine.PlayerCameraManager.StopAllCameraShakes
// Offset::0x64C0330;
void FPlayerCameraManager::StopAllCameraShakes(bool bImmediately);


// Function  Engine.PlayerCameraManager.StopAllCameraShakesFromSource
// Offset::0x64C0100;
void FPlayerCameraManager::StopAllCameraShakesFromSource(FCameraShakeSourceComponent* SourceComponent,bool bImmediately);


// Function  Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
// Offset::0x64BF8A0;
void FPlayerCameraManager::StopAllInstancesOfCameraAnim(FCameraAnim* Anim,bool bImmediate);


// Function  Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
// Offset::0x64C03D0;
void FPlayerCameraManager::StopAllInstancesOfCameraShake(FCameraShakeBase* Shake,bool bImmediately);


// Function  Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
// Offset::0x64C01F0;
void FPlayerCameraManager::StopAllInstancesOfCameraShakeFromSource(FCameraShakeBase* Shake,FCameraShakeSourceComponent* SourceComponent,bool bImmediately);


// Function  Engine.PlayerCameraManager.StopCameraAnimInst
// Offset::0x64BF7B0;
void FPlayerCameraManager::StopCameraAnimInst(FCameraAnimInst* AnimInst,bool bImmediate);


// Function  Engine.PlayerCameraManager.StopCameraFade
// Offset::0x6353C80;
void FPlayerCameraManager::StopCameraFade();


// Function  Engine.PlayerCameraManager.StopCameraShake
// Offset::0x64C04C0;
void FPlayerCameraManager::StopCameraShake(FCameraShakeBase* ShakeInstance,bool bImmediately);


// Function  Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates
// Offset::0x64BF6D0;
void FPlayerCameraManager::SwapPendingViewTargetWhenUsingClientSideCameraUpdates();


// Function  EmbarkConstructable.FComponentOrStyleLibrary.AdvancedAPI_GetComponent
// Offset::0x2295ED0;
FSceneComponent* FFComponentOrStyleLibrary::AdvancedAPI_GetComponent(FComponentOrStyle ComponentOrStyle);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.AdvancedAPI_GetPartReference
// Offset::0x2295DC0;
FSceneComponent* FFComponentOrStyleLibrary::AdvancedAPI_GetPartReference(FComponentOrStyle ComponentOrStyle,int32_t OutPartId);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.GetActor
// Offset::0x2296690;
FActor* FFComponentOrStyleLibrary::GetActor(FComponentOrStyle ComponentOrStyle);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.GetBounds
// Offset::0x22961A0;
bool FFComponentOrStyleLibrary::GetBounds(FComponentOrStyle ComponentOrStyle,FBox Bounds);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.GetCenterBounds
// Offset::0x22960E0;
FVector FFComponentOrStyleLibrary::GetCenterBounds(FComponentOrStyle ComponentOrStyle);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.GetClosestPointOnCollision
// Offset::0x2296540;
bool FFComponentOrStyleLibrary::GetClosestPointOnCollision(FComponentOrStyle ComponentOrStyle,FVector Point,FVector OutPointOnBody);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.GetOwner
// Offset::0x2296690;
FActor* FFComponentOrStyleLibrary::GetOwner(FComponentOrStyle ComponentOrStyle);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.GetTransform
// Offset::0x22963A0;
bool FFComponentOrStyleLibrary::GetTransform(FComponentOrStyle ComponentOrStyle,FTransform OutTransform,bool bWorldTransform);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.GetWorldTransform
// Offset::0x22962A0;
FTransform FFComponentOrStyleLibrary::GetWorldTransform(FComponentOrStyle ComponentOrStyle);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.IsPartAndAlive
// Offset::0x2295F80;
bool FFComponentOrStyleLibrary::IsPartAndAlive(FComponentOrStyle ComponentOrStyle);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.IsPartAndDestroyed
// Offset::0x2296030;
bool FFComponentOrStyleLibrary::IsPartAndDestroyed(FComponentOrStyle ComponentOrStyle);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.IsPartReference
// Offset::0x2296740;
bool FFComponentOrStyleLibrary::IsPartReference(FComponentOrStyle ComponentOrStyle);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.IsValid
// Offset::0x22967F0;
bool FFComponentOrStyleLibrary::IsValid(FComponentOrStyle ComponentOrStyle);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.MakeFromHitResult
// Offset::0x22969A0;
FComponentOrStyle FFComponentOrStyleLibrary::MakeFromHitResult(FHitResult HitResult);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.MakeFromPart
// Offset::0x2296B30;
FComponentOrStyle FFComponentOrStyleLibrary::MakeFromPart(FConstructableBase* PartOwner,int32_t PartID);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.MakeFromPhysicsBodyIndex
// Offset::0x22968A0;
FComponentOrStyle FFComponentOrStyleLibrary::MakeFromPhysicsBodyIndex(FPrimitiveComponent* Component,int32_t BodyIndex);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.MakeFromPrimitiveComponent
// Offset::0x2296C30;
FComponentOrStyle FFComponentOrStyleLibrary::MakeFromPrimitiveComponent(FPrimitiveComponent* Component);


// Function  EmbarkConstructable.FComponentOrStyleLibrary.MakeFromSceneComponent
// Offset::0x2296C30;
FComponentOrStyle FFComponentOrStyleLibrary::MakeFromSceneComponent(FSceneComponent* Component);


// Function  EmbarkConstructable.ComponentOrStyleTargetHandleMixinLibrary.AddComponentOrStyleTarget
// Offset::0x2297D00;
void FComponentOrStyleTargetHandleMixinLibrary::AddComponentOrStyleTarget(FGameplayAbilityTargetDataHandle Handle,FComponentOrStyle Target);


// Function  EmbarkConstructable.ComponentOrStyleTargetHandleMixinLibrary.GetAllValidComponentOrStyleTargets
// Offset::0x2297BA0;
TArray<FComponentOrStyle> FComponentOrStyleTargetHandleMixinLibrary::GetAllValidComponentOrStyleTargets(FGameplayAbilityTargetDataHandle Handle);


// Function  EmbarkConstructable.ComponentOrStyleTargetHandleMixinLibrary.GetComponentOrStyleTarget
// Offset::0x22978D0;
FComponentOrStyle FComponentOrStyleTargetHandleMixinLibrary::GetComponentOrStyleTarget(FGameplayAbilityTargetDataHandle Handle,int32_t Index);


// Function  EmbarkConstructable.ComponentOrStyleTargetHandleMixinLibrary.GetFirstValidComponentOrStyleTarget
// Offset::0x2297A60;
FComponentOrStyle FComponentOrStyleTargetHandleMixinLibrary::GetFirstValidComponentOrStyleTarget(FGameplayAbilityTargetDataHandle Handle);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.ApplyGameplayEffectSpecDirectToTarget
// Offset::0x24AA230;
FActiveGameplayEffectHandle FEmbarkAbilitySystemComponent::ApplyGameplayEffectSpecDirectToTarget(FGameplayEffectSpec Spec,FAbilitySystemComponent* Target);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.CancelAllActiveAbilities
// Offset::0x24AB200;
void FEmbarkAbilitySystemComponent::CancelAllActiveAbilities(FGameplayAbility* Ignore);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.ClearMovementCancelAbilitiesWithTagsBuffer
// Offset::0x24AA1D0;
void FEmbarkAbilitySystemComponent::ClearMovementCancelAbilitiesWithTagsBuffer();


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.EndEmbarkAbilitiesByTags
// Offset::0x24AA4E0;
void FEmbarkAbilitySystemComponent::EndEmbarkAbilitiesByTags(FGameplayTagContainer WithTags,FGameplayTagContainer WithoutTags);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.EndEmbarkAbilityByHandle
// Offset::0x24AA440;
void FEmbarkAbilitySystemComponent::EndEmbarkAbilityByHandle(FGameplayAbilitySpecHandle Handle);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.GetMovementCancelAbilitiesWithTagsBuffer
// Offset::0x24AA200;
FGameplayTagContainer FEmbarkAbilitySystemComponent::GetMovementCancelAbilitiesWithTagsBuffer();


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.RegisterGameplayTagEventExact
// Offset::0x24AB050;
FDelegateHandleHolder FEmbarkAbilitySystemComponent::RegisterGameplayTagEventExact(FGameplayTag Tag,FObject* Object,FName FunctionName,enum class EGameplayTagEventType EventType);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.RegisterGameplayTagEventWithParentRange
// Offset::0x24AAE00;
TArray<FDelegateHandleHolder> FEmbarkAbilitySystemComponent::RegisterGameplayTagEventWithParentRange(FGameplayTag StartTag,FGameplayTag EndTag,FObject* Object,FName FunctionName,enum class EGameplayTagEventType EventType);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.TriggerAbilityFromGameplayEvent
// Offset::0x24AA630;
bool FEmbarkAbilitySystemComponent::TriggerAbilityFromGameplayEvent(FGameplayAbilitySpecHandle Handle,FGameplayTag EventTag,FGameplayEventData Payload);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.TryActivateAllAbilitiesByClass
// Offset::0x24AA350;
bool FEmbarkAbilitySystemComponent::TryActivateAllAbilitiesByClass(FGameplayAbility* InAbilityToActivate,bool bAllowRemoteActivation);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.UnregisterGameplayTagEventExact
// Offset::0x24AACC0;
void FEmbarkAbilitySystemComponent::UnregisterGameplayTagEventExact(FGameplayTag Tag,FDelegateHandleHolder DelegateHolder,enum class EGameplayTagEventType EventType);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.UnregisterGameplayTagEventsExactAll
// Offset::0x24AAB80;
void FEmbarkAbilitySystemComponent::UnregisterGameplayTagEventsExactAll(FGameplayTag Tag,FObject* Object,enum class EGameplayTagEventType EventType);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.UnregisterGameplayTagEventWithParentRange
// Offset::0x24AA9B0;
void FEmbarkAbilitySystemComponent::UnregisterGameplayTagEventWithParentRange(FGameplayTag StartTag,FGameplayTag EndTag,TArray<FDelegateHandleHolder> DelegateHolders,enum class EGameplayTagEventType EventType);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemComponent.UnregisterGameplayTagEventWithParentRangeAll
// Offset::0x24AA810;
void FEmbarkAbilitySystemComponent::UnregisterGameplayTagEventWithParentRangeAll(FGameplayTag StartTag,FGameplayTag EndTag,FObject* Object,enum class EGameplayTagEventType EventType);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.AddPartTag
// Offset::0x2299580;
void FConstructableAbilitySystemComponent::AddPartTag(int32_t PartID,FGameplayTag TagToAdd);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.AddPartTags
// Offset::0x2299470;
void FConstructableAbilitySystemComponent::AddPartTags(int32_t PartID,FGameplayTagContainer TagsToAdd);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.AllocateAttributesForPart_Server
// Offset::0x229A4E0;
void FConstructableAbilitySystemComponent::AllocateAttributesForPart_Server(FEmbarkAttributeSet* AttributeSetClass,int32_t PartID);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.CalcUtility
// Offset::0x2298790;
float FConstructableAbilitySystemComponent::CalcUtility(FGameplayAbilitySpecHandle AbilitySpecHandle);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.GetAndRegisterPartAttributeChangedCallback_Server
// Offset::0x22998C0;
void FConstructableAbilitySystemComponent::GetAndRegisterPartAttributeChangedCallback_Server(FEmbarkAttributeSet* AttributeSetClass,FName AttributeName,int32_t PartID,FObject* CallbackObject,FName CallbackFunctionName_FOnAttributeChangeData,float OutCurrentValue);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.GetOwnerConstructable
// Offset::0x2298760;
FConstructableBase* FConstructableAbilitySystemComponent::GetOwnerConstructable();


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.GetPartAbilityData
// Offset::0x2298830;
bool FConstructableAbilitySystemComponent::GetPartAbilityData(FGameplayAbilitySpecHandle PartAbilitySpecHandle,FConstructablePartAbilityData OutData);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.GetPartTagCount
// Offset::0x2298E30;
int32_t FConstructableAbilitySystemComponent::GetPartTagCount(int32_t PartID,FGameplayTag TagToQuery);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.GiveAbilityToPart_Server
// Offset::0x22989F0;
bool FConstructableAbilitySystemComponent::GiveAbilityToPart_Server(int32_t PartID,TSet<int32_t> AssociatedParts,FGameplayAbility* InAbilityClass,FGameplayAbilitySpecHandle OutHandle,int32_t Level,FObject* OptionalSourceObject);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.PartAttributeToBaseData
// Offset::0x2299670;
bool FConstructableAbilitySystemComponent::PartAttributeToBaseData(FGameplayAttribute PartGameplayAttribute,FConstructablePartAttributeBaseData OutBaseData);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.PartAttributeToPartID
// Offset::0x22997D0;
int32_t FConstructableAbilitySystemComponent::PartAttributeToPartID(FGameplayAttribute PartGameplayAttribute);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.PartHasAllTags
// Offset::0x2299150;
bool FConstructableAbilitySystemComponent::PartHasAllTags(int32_t PartID,FGameplayTagContainer RequiredTags);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.PartHasAnyTags
// Offset::0x2299030;
bool FConstructableAbilitySystemComponent::PartHasAnyTags(int32_t PartID,FGameplayTagContainer RequiredTags);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.PartHasTag
// Offset::0x2298F30;
bool FConstructableAbilitySystemComponent::PartHasTag(int32_t PartID,FGameplayTag RequiredTag);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.QueryPartTags
// Offset::0x2298D10;
bool FConstructableAbilitySystemComponent::QueryPartTags(int32_t PartID,FConstructablePartTagData OutPartTagData);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.RegisterPartAttributeChangedCallback_Server
// Offset::0x2299AF0;
void FConstructableAbilitySystemComponent::RegisterPartAttributeChangedCallback_Server(FEmbarkAttributeSet* AttributeSetClass,FName AttributeName,int32_t PartID,FObject* CallbackObject,FName CallbackFunctionName_FOnAttributeChangeData);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.RegisterPartAttributeChangedCallbackForAllParts_Server
// Offset::0x2299CC0;
void FConstructableAbilitySystemComponent::RegisterPartAttributeChangedCallbackForAllParts_Server(FEmbarkAttributeSet* AttributeSetClass,FName AttributeName,FObject* CallbackObject,FName CallbackFunctionName_FOnAttributeChangeData);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.RemovePartTag
// Offset::0x2299380;
void FConstructableAbilitySystemComponent::RemovePartTag(int32_t PartID,FGameplayTag TagToRemove);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.RemovePartTags
// Offset::0x2299270;
void FConstructableAbilitySystemComponent::RemovePartTags(int32_t PartID,FGameplayTagContainer TagsToRemove);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.TryGetPartAttribute_Server
// Offset::0x229A2F0;
bool FConstructableAbilitySystemComponent::TryGetPartAttribute_Server(FEmbarkAttributeSet* AttributeSetClass,FName AttributeName,int32_t PartID,FGameplayAttribute OutGameplayAttribute);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.TryGetPartAttributeBaseValue_Server
// Offset::0x2299FD0;
bool FConstructableAbilitySystemComponent::TryGetPartAttributeBaseValue_Server(FEmbarkAttributeSet* AttributeSetClass,FName AttributeName,int32_t PartID,float OutBaseValue);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.TryGetPartAttributeCurrentValue_Server
// Offset::0x2299E40;
bool FConstructableAbilitySystemComponent::TryGetPartAttributeCurrentValue_Server(FEmbarkAttributeSet* AttributeSetClass,FName AttributeName,int32_t PartID,float OutCurrentValue);


// Function  EmbarkConstructable.ConstructableAbilitySystemComponent.TrySetPartAttributeBaseValue_Server
// Offset::0x229A160;
bool FConstructableAbilitySystemComponent::TrySetPartAttributeBaseValue_Server(FEmbarkAttributeSet* AttributeSetClass,FName AttributeName,int32_t PartID,float NewValue);


// Function  EmbarkConstructable.GameplayAbilityTargetDataHandleMixinLibrary.AddActorTargetData
// Offset::0x229C700;
void FGameplayAbilityTargetDataHandleMixinLibrary::AddActorTargetData(FGameplayAbilityTargetDataHandle Handle,FActor* TargetedActor,float TargetedActorAffectedDegreeUNorm);


// Function  EmbarkConstructable.GameplayAbilityTargetDataHandleMixinLibrary.AddConstructableTargetData
// Offset::0x229C8C0;
void FGameplayAbilityTargetDataHandleMixinLibrary::AddConstructableTargetData(FGameplayAbilityTargetDataHandle Handle,FActor* TargetedActor,TArray<FConstructablePartDamageModelData> TargetedParts,int32_t PrimaryTargetPartId);


// Function  EmbarkConstructable.GameplayAbilityTargetDataHandleMixinLibrary.AddReplicatedSubobjectTarget
// Offset::0x229B9D0;
void FGameplayAbilityTargetDataHandleMixinLibrary::AddReplicatedSubobjectTarget(FGameplayAbilityTargetDataHandle Handle,FReplicatedSubobject* TargetedObject);


// Function  EmbarkConstructable.GameplayAbilityTargetDataHandleMixinLibrary.ApplyEffectToTargets
// Offset::0x229C320;
void FGameplayAbilityTargetDataHandleMixinLibrary::ApplyEffectToTargets(FGameplayAbilityTargetDataHandle Handle,FGameplayEffectSpec Spec,TArray<FActiveGameplayEffectHandle> OutAppliedHandles,bool bApplyAffectedUNormAsEffectLevel);


// Function  EmbarkConstructable.GameplayAbilityTargetDataHandleMixinLibrary.ApplyGameplayEffectSpec
// Offset::0x229BCA0;
void FGameplayAbilityTargetDataHandleMixinLibrary::ApplyGameplayEffectSpec(FGameplayAbilityTargetDataHandle Handle,int32_t Index,FGameplayEffectSpec Spec);


// Function  EmbarkConstructable.GameplayAbilityTargetDataHandleMixinLibrary.GetFirstReplicatedSubobject
// Offset::0x229B8A0;
FReplicatedSubobject* FGameplayAbilityTargetDataHandleMixinLibrary::GetFirstReplicatedSubobject(FGameplayAbilityTargetDataHandle Handle);


// Function  EmbarkConstructable.GameplayAbilityTargetDataHandleMixinLibrary.GetNum
// Offset::0x229C200;
int32_t FGameplayAbilityTargetDataHandleMixinLibrary::GetNum(FGameplayAbilityTargetDataHandle Handle);


// Function  EmbarkConstructable.GameplayAbilityTargetDataHandleMixinLibrary.GetTargetActor
// Offset::0x229BFA0;
FActor* FGameplayAbilityTargetDataHandleMixinLibrary::GetTargetActor(FGameplayAbilityTargetDataHandle Handle,int32_t Index);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.AddAffectedPart
// Offset::0x229EA90;
void FGameplayEffectContextMixinLibrary::AddAffectedPart(FGameplayEffectContextHandle Handle,FConstructablePartDamageModelData AffectedPart);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.AddAffectedParts
// Offset::0x229E940;
void FGameplayEffectContextMixinLibrary::AddAffectedParts(FGameplayEffectContextHandle Handle,TArray<FConstructablePartDamageModelData> AffectedParts);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetActorAffectedDegreeUNorm
// Offset::0x229D850;
float FGameplayEffectContextMixinLibrary::GetActorAffectedDegreeUNorm(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetActorRawTakenDamage
// Offset::0x229DA70;
float FGameplayEffectContextMixinLibrary::GetActorRawTakenDamage(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetAffectActorAttributes
// Offset::0x229ED10;
bool FGameplayEffectContextMixinLibrary::GetAffectActorAttributes(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetAffectedPart
// Offset::0x229DF40;
FConstructablePartDamageModelData FGameplayEffectContextMixinLibrary::GetAffectedPart(FGameplayEffectContextHandle Handle,int32_t PartIndex);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetAffectedPartIDs
// Offset::0x229E580;
TArray<int32_t> FGameplayEffectContextMixinLibrary::GetAffectedPartIDs(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetAffectedParts
// Offset::0x229E6A0;
void FGameplayEffectContextMixinLibrary::GetAffectedParts(FGameplayEffectContextHandle Handle,TArray<FConstructablePartDamageModelData> AffectedParts);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetAffectedPartsNum
// Offset::0x229E080;
int32_t FGameplayEffectContextMixinLibrary::GetAffectedPartsNum(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetAttackingPartInfo
// Offset::0x229DC90;
FConstructablePartAttackerData FGameplayEffectContextMixinLibrary::GetAttackingPartInfo(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetDamageType
// Offset::0x229D640;
char FGameplayEffectContextMixinLibrary::GetDamageType(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetEventID
// Offset::0x229D430;
int32_t FGameplayEffectContextMixinLibrary::GetEventID(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetOriginatorObject
// Offset::0x229D220;
FObject* FGameplayEffectContextMixinLibrary::GetOriginatorObject(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetPrimaryTargetPartId
// Offset::0x229E160;
int32_t FGameplayEffectContextMixinLibrary::GetPrimaryTargetPartId(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.GetRawDamage
// Offset::0x229DA70;
float FGameplayEffectContextMixinLibrary::GetRawDamage(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.IsReplicatingAffectedPartIDs
// Offset::0x229E4A0;
bool FGameplayEffectContextMixinLibrary::IsReplicatingAffectedPartIDs(FGameplayEffectContextHandle Handle);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetActorAffectedDegreeUNorm
// Offset::0x229D940;
void FGameplayEffectContextMixinLibrary::SetActorAffectedDegreeUNorm(FGameplayEffectContextHandle Handle,float ActorAffectedDegreeUNorm);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetActorRawTakenDamage
// Offset::0x229DB60;
void FGameplayEffectContextMixinLibrary::SetActorRawTakenDamage(FGameplayEffectContextHandle Handle,float RawDamage);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetAffectActorAttributes
// Offset::0x229EBE0;
void FGameplayEffectContextMixinLibrary::SetAffectActorAttributes(FGameplayEffectContextHandle Handle,bool bShouldAffectActorAttributes);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetAffectedParts
// Offset::0x229E7F0;
void FGameplayEffectContextMixinLibrary::SetAffectedParts(FGameplayEffectContextHandle Handle,TArray<FConstructablePartDamageModelData> AffectedParts);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetAttackingPartInfo
// Offset::0x229DDB0;
void FGameplayEffectContextMixinLibrary::SetAttackingPartInfo(FGameplayEffectContextHandle Handle,FConstructablePartAttackerData AttackingPartInfo);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetDamageType
// Offset::0x229D720;
void FGameplayEffectContextMixinLibrary::SetDamageType(FGameplayEffectContextHandle Handle,char DamageType);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetEventID
// Offset::0x229D510;
void FGameplayEffectContextMixinLibrary::SetEventID(FGameplayEffectContextHandle Handle,int32_t InEventID);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetOriginatorObject
// Offset::0x229D300;
void FGameplayEffectContextMixinLibrary::SetOriginatorObject(FGameplayEffectContextHandle Handle,FObject* Originator);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetPrimaryTargetPartId
// Offset::0x229E240;
void FGameplayEffectContextMixinLibrary::SetPrimaryTargetPartId(FGameplayEffectContextHandle Handle,int32_t PrimaryAffectedPart);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetRawDamage
// Offset::0x229DB60;
void FGameplayEffectContextMixinLibrary::SetRawDamage(FGameplayEffectContextHandle Handle,float RawDamage);


// Function  EmbarkConstructable.GameplayEffectContextMixinLibrary.SetReplicateAffectedPartIDs
// Offset::0x229E370;
void FGameplayEffectContextMixinLibrary::SetReplicateAffectedPartIDs(FGameplayEffectContextHandle Handle,bool bReplicate);


// Function  EmbarkConstructable.GrantedTagsMixinLibrary.AddGrantedTag
// Offset::0x229FDE0;
void FGrantedTagsMixinLibrary::AddGrantedTag(FGameplayEffectSpecHandle SpecHandle,FGameplayTag InTagToAdd);


// Function  EmbarkConstructable.GrantedTagsMixinLibrary.AddGrantedTags
// Offset::0x229FF10;
void FGrantedTagsMixinLibrary::AddGrantedTags(FGameplayEffectSpecHandle SpecHandle,FGameplayTagContainer InGameplayTagsToAdd);


// Function  EmbarkConstructable.ConstructableBase.CompleteConstruction
// Offset::0x22A35F0;
void FConstructableBase::CompleteConstruction();


// Function  EmbarkConstructable.ConstructableBase.CreateConstructablePart_Server
// Offset::0x22A1A20;
bool FConstructableBase::CreateConstructablePart_Server(FPrimitiveComponent* StyleComponentClass,FConstructablePartIDRange OutPartIDRange);


// Function  EmbarkConstructable.ConstructableBase.DestroyPart_Server
// Offset::0x22A3420;
void FConstructableBase::DestroyPart_Server(int32_t PartID,int32_t EventID,enum class EConstructableHealthChangeReason DestructionMethod);


// Function  EmbarkConstructable.ConstructableBase.GetAllPartIDs
// Offset::0x22A1F10;
void FConstructableBase::GetAllPartIDs(TArray<int32_t> OutAllPartIDs);


// Function  EmbarkConstructable.ConstructableBase.GetAllParts
// Offset::0x22A3210;
void FConstructableBase::GetAllParts(TArray<FConstructablePart> OutAllParts);


// Function  EmbarkConstructable.ConstructableBase.GetAllStyleComponents
// Offset::0x22A1FC0;
TArray<FPrimitiveComponent*> FConstructableBase::GetAllStyleComponents();


// Function  EmbarkConstructable.ConstructableBase.GetConstructableASC
// Offset::0x22A27B0;
FConstructableAbilitySystemComponent* FConstructableBase::GetConstructableASC();


// Function  EmbarkConstructable.ConstructableBase.GetFirstPartSocketGroup
// Offset::0x22A2240;
bool FConstructableBase::GetFirstPartSocketGroup(int32_t PartID,FName SocketGroupName,FConstructableStyleSocket OutSocket,enum class ERelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructableBase.GetFirstPartSocketGroupTransform
// Offset::0x22A2040;
bool FConstructableBase::GetFirstPartSocketGroupTransform(int32_t PartID,FName SocketGroupName,FTransform OutSocketTransform,enum class ERelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructableBase.GetLastPartID
// Offset::0x22A2870;
int32_t FConstructableBase::GetLastPartID();


// Function  EmbarkConstructable.ConstructableBase.GetPartFromID
// Offset::0x22A32C0;
FConstructablePart FConstructableBase::GetPartFromID(int32_t PartID);


// Function  EmbarkConstructable.ConstructableBase.GetPartSocketGroup
// Offset::0x22A2430;
bool FConstructableBase::GetPartSocketGroup(int32_t PartID,FName SocketGroupName,TArray<FConstructableStyleSocket> OutSocketList,enum class ERelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructableBase.GetPartSocketGroupTransforms
// Offset::0x22A25F0;
bool FConstructableBase::GetPartSocketGroupTransforms(int32_t PartID,FName SocketGroupName,TArray<FTransform> OutTransforms,enum class ERelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructableBase.GetPartTags
// Offset::0x22A1B20;
bool FConstructableBase::GetPartTags(int32_t PartID,FGameplayTagContainer OutGameplayTags);


// Function  EmbarkConstructable.ConstructableBase.GetRootPart
// Offset::0x22A27E0;
FConstructablePart FConstructableBase::GetRootPart();


// Function  EmbarkConstructable.ConstructableBase.GetRootPartID
// Offset::0x22A2840;
int32_t FConstructableBase::GetRootPartID();


// Function  EmbarkConstructable.ConstructableBase.GetSocketDataFromRepIndex
// Offset::0x22A1C70;
bool FConstructableBase::GetSocketDataFromRepIndex(int32_t SocketIndex,int32_t OutPartId,FName OutSocketName);


// Function  EmbarkConstructable.ConstructableBase.GetSocketRepIndex
// Offset::0x22A1DC0;
bool FConstructableBase::GetSocketRepIndex(int32_t PartID,FName SocketName,int32_t OutSocketIndex);


// Function  EmbarkConstructable.ConstructableBase.GetStyleComponentFromPartID
// Offset::0x22A3380;
FPrimitiveComponent* FConstructableBase::GetStyleComponentFromPartID(int32_t PartID);


// Function  EmbarkConstructable.ConstructableBase.InitializePartQueryData_Test
// Offset::0x22A19F0;
void FConstructableBase::InitializePartQueryData_Test();


// Function  EmbarkConstructable.ConstructableBase.IsConstructableDestroyed
// Offset::0x22A1C40;
bool FConstructableBase::IsConstructableDestroyed();


// Function  EmbarkConstructable.ConstructableBase.IsPartDestroyed
// Offset::0x22A28A0;
bool FConstructableBase::IsPartDestroyed(int32_t PartID);


// Function  EmbarkConstructable.ConstructableBase.IsValidPartID
// Offset::0x22A2940;
bool FConstructableBase::IsValidPartID(int32_t PartID);


// Function  EmbarkConstructable.ConstructableBase.OnActorFinalized
// Offset::0x3D30810;
void FConstructableBase::OnActorFinalized();


// Function  EmbarkConstructable.ConstructableBase.PumpServiceDataToStyles_Client
// Offset::0x22A3550;
void FConstructableBase::PumpServiceDataToStyles_Client(float DeltaTimeSecs);


// Function  EmbarkConstructable.ConstructableBase.QueryPartIDs
// Offset::0x22A2D40;
void FConstructableBase::QueryPartIDs(FGameplayTagQuery PartQuery,TSet<int32_t> OutPartIDs,bool bAllowDestroyedParts);


// Function  EmbarkConstructable.ConstructableBase.QueryPartIDsNoLookup
// Offset::0x22A2FD0;
void FConstructableBase::QueryPartIDsNoLookup(FGameplayTagQuery PartQuery,TSet<int32_t> OutPartIDs);


// Function  EmbarkConstructable.ConstructableBase.QueryParts
// Offset::0x22A29E0;
void FConstructableBase::QueryParts(FGameplayTagQuery PartQuery,TArray<FConstructablePart> OutParts,bool bAllowDestroyedParts);


// Function  EmbarkConstructable.ConstructableBase.QueryPartsNoLookup
// Offset::0x22A2B90;
void FConstructableBase::QueryPartsNoLookup(FGameplayTagQuery PartQuery,TArray<FConstructablePart> OutParts,bool bAllowDestroyedParts);


// Function  EmbarkConstructable.ConstructableCapabilityServiceBase.AddCapabilityEventRepData
// Offset::0x22A4DA0;
void FConstructableCapabilityServiceBase::AddCapabilityEventRepData(FConstructableCapabilityEvent CapabilityEvent);


// Function  EmbarkConstructable.ConstructableCapabilityServiceBase.AddCSMRepData
// Offset::0x22A4E60;
void FConstructableCapabilityServiceBase::AddCSMRepData(FConstructableSMNetworkData SMData);


// Function  EmbarkConstructable.ConstructableCapabilityServiceBase.NetMulticast_EventData
// Offset::0x22A4F70;
void FConstructableCapabilityServiceBase::NetMulticast_EventData(TArray<FConstructableCapabilityEvent> Data);


// Function  EmbarkConstructable.ConstructableCapabilityServiceBase.NetMulticast_StateMachine
// Offset::0x22A5020;
void FConstructableCapabilityServiceBase::NetMulticast_StateMachine(TArray<FConstructableSMNetworkData> Data);


// Function  EmbarkConstructable.ConstructableCapabilityServiceBase.OnCapabilityEvent_Client
// Offset::0x3D30810;
void FConstructableCapabilityServiceBase::OnCapabilityEvent_Client(FConstructableCapabilityBase* Capability,FConstructableCapabilityEvent EventData);


// Function  EmbarkConstructable.ConstructableDynamicAttributes.GetAllAttributeNames
// Offset::0x22A5E70;
void FConstructableDynamicAttributes::GetAllAttributeNames(TSet<FName> OutAllAttributeNames);


// Function  EmbarkConstructable.ConstructableDynamicAttributes.GetMaxPrefixVersionName
// Offset::0x22A5DD0;
FName FConstructableDynamicAttributes::GetMaxPrefixVersionName(FName Name);


// Function  EmbarkConstructable.ConstructableDynamicAttributes.GetPartAttributeSetMetaData
// Offset::0x22A6160;
bool FConstructableDynamicAttributes::GetPartAttributeSetMetaData(FObject* BaseClass,FConstructablePartAttributeSetMetaData OutMetaData);


// Function  EmbarkConstructable.ConstructableDynamicAttributes.GetSetClassesForAttributeName
// Offset::0x22A5FC0;
bool FConstructableDynamicAttributes::GetSetClassesForAttributeName(FName AttributeTypeName,TArray<FObject*> OutAttributeSetClasses);


// Function  EmbarkConstructable.ConstructableDynamicAttributes.IsValidAttributeName
// Offset::0x22A60C0;
bool FConstructableDynamicAttributes::IsValidAttributeName(FName AttributeTypeName);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_AddGameplayCue_Actor
// Offset::0x1AB0790;
void FEmbarkGameplayAbility::K2_AddGameplayCue_Actor(FGameplayCueNotify_Actor* GameplayCue,FGameplayEffectContextHandle Context,bool bRemoveOnAbilityEnd);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_AddGameplayCue_Static
// Offset::0x1AAFF70;
void FEmbarkGameplayAbility::K2_AddGameplayCue_Static(FGameplayCueNotify_Static* GameplayCue,FGameplayEffectContextHandle Context,bool bRemoveOnAbilityEnd);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_AddGameplayCueWithParams_Actor
// Offset::0x1AB0520;
void FEmbarkGameplayAbility::K2_AddGameplayCueWithParams_Actor(FGameplayCueNotify_Actor* GameplayCue,FGameplayCueParameters GameplayCueParameter,bool bRemoveOnAbilityEnd);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_AddGameplayCueWithParams_Static
// Offset::0x1AAFD00;
void FEmbarkGameplayAbility::K2_AddGameplayCueWithParams_Static(FGameplayCueNotify_Static* GameplayCue,FGameplayCueParameters GameplayCueParameter,bool bRemoveOnAbilityEnd);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_CanBeCanceled
// Offset::0x3D30810;
bool FEmbarkGameplayAbility::K2_CanBeCanceled();


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_ExecuteGameplayCue_Actor
// Offset::0x1AB0B50;
void FEmbarkGameplayAbility::K2_ExecuteGameplayCue_Actor(FGameplayCueNotify_Actor* GameplayCue,FGameplayEffectContextHandle Context);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_ExecuteGameplayCue_Static
// Offset::0x1AB0330;
void FEmbarkGameplayAbility::K2_ExecuteGameplayCue_Static(FGameplayCueNotify_Static* GameplayCue,FGameplayEffectContextHandle Context);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_ExecuteGameplayCueWithParams_Actor
// Offset::0x1AB0930;
void FEmbarkGameplayAbility::K2_ExecuteGameplayCueWithParams_Actor(FGameplayCueNotify_Actor* GameplayCue,FGameplayCueParameters GameplayCueParameters);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_ExecuteGameplayCueWithParams_Static
// Offset::0x1AB0110;
void FEmbarkGameplayAbility::K2_ExecuteGameplayCueWithParams_Static(FGameplayCueNotify_Static* GameplayCue,FGameplayCueParameters GameplayCueParameters);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_GetCurrentAbilitySpecHandle
// Offset::0x24B10D0;
FGameplayAbilitySpecHandle FEmbarkGameplayAbility::K2_GetCurrentAbilitySpecHandle();


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_OnGiveAbility
// Offset::0x3D30810;
void FEmbarkGameplayAbility::K2_OnGiveAbility(FGameplayAbilityActorInfo InActorInfo,FGameplayAbilitySpec InSpec);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_OnRemoveAbility
// Offset::0x3D30810;
void FEmbarkGameplayAbility::K2_OnRemoveAbility(FGameplayAbilityActorInfo InActorInfo,FGameplayAbilitySpec InSpec);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_RemoveGameplayCue_Actor
// Offset::0x1AB0480;
void FEmbarkGameplayAbility::K2_RemoveGameplayCue_Actor(FGameplayCueNotify_Actor* GameplayCue);


// Function  EmbarkAbilitySystem.EmbarkGameplayAbility.K2_RemoveGameplayCue_Static
// Offset::0x1AAFC60;
void FEmbarkGameplayAbility::K2_RemoveGameplayCue_Static(FGameplayCueNotify_Static* GameplayCue);


// Function  EmbarkConstructable.ConstructableGameplayAbility.ActivateConstructableAbility
// Offset::0x3D30810;
void FConstructableGameplayAbility::ActivateConstructableAbility(FGameplayAbilitySpecHandle Handle,FGameplayAbilityActorInfo ScopedActorInfo);


// Function  EmbarkConstructable.ConstructableGameplayAbility.CalculateUtility
// Offset::0x3D30810;
float FConstructableGameplayAbility::CalculateUtility(FGameplayAbilitySpecHandle Handle,FGameplayAbilityActorInfo ScopedActorInfo);


// Function  EmbarkConstructable.ConstructableGameplayAbility.CanActivateConstructableAbility
// Offset::0x22A6720;
bool FConstructableGameplayAbility::CanActivateConstructableAbility(FGameplayAbilitySpecHandle Handle,FGameplayAbilityActorInfo ScopedActorInfo);


// Function  EmbarkConstructable.ConstructableGameplayCueNotify_Actor.Handle_OnConstructableDestroyed
// Offset::0x22A72D0;
void FConstructableGameplayCueNotify_Actor::Handle_OnConstructableDestroyed(FConstructableBase* Constructable,FActor* DamageInstigator);


// Function  EmbarkConstructable.ConstructableGameplayCueNotify_Actor.OnConstructableDestroyed
// Offset::0x22A73B0;
bool FConstructableGameplayCueNotify_Actor::OnConstructableDestroyed(FConstructableBase* Constructable,FActor* DamageInstigator);


// Function  EmbarkConstructable.ConstructableDamageDataMixinLibrary.GetDamageInstigatorPawn
// Offset::0x22A7DB0;
FPawn* FConstructableDamageDataMixinLibrary::GetDamageInstigatorPawn(FConstructableDamageData DamageData);


// Function  EmbarkConstructable.ConstructableDamageDataMixinLibrary.SetDamageInstigatorPawn
// Offset::0x22A7C50;
void FConstructableDamageDataMixinLibrary::SetDamageInstigatorPawn(FConstructableDamageData DamageData,FPawn* DamageInstigatorPawn);


// Function  ActorBlackBoard.SimBaseClass.GetSlotIndex
// Offset::0x2609650;
char FSimBaseClass::GetSlotIndex();


// Function  EmbarkConstructable.SimConstructableBaseClass.DeinitFromReplication
// Offset::0x22C1890;
void FSimConstructableBaseClass::DeinitFromReplication();


// Function  EmbarkConstructable.SimConstructableBaseClass.FindAndSetServiceForActor
// Offset::0x22C1790;
void FSimConstructableBaseClass::FindAndSetServiceForActor(FActor* Actor,FObject* ServiceClass);


// Function  EmbarkConstructable.SimConstructableBaseClass.GetService
// Offset::0x22C1870;
FConstructableServiceComponentBase* FSimConstructableBaseClass::GetService();


// Function  EmbarkConstructable.ConstructableDamageDataArraySimState.InitForActor
// Offset::0x22A81E0;
void FConstructableDamageDataArraySimState::InitForActor(FActor* Actor);


// Function  EmbarkConstructable.ConstructableDamageDataArraySimState.OnRep_Items
// Offset::0x22A81C0;
void FConstructableDamageDataArraySimState::OnRep_Items();


// Function  EmbarkConstructable.ConstructableHealthServiceComponent.HandlePartDamaged
// Offset::0x3D30810;
void FConstructableHealthServiceComponent::HandlePartDamaged(FPrimitiveComponent* OwnerStyleComponent,FConstructableDamageData DamageData);


// Function  EmbarkConstructable.ConstructableHealthServiceComponent.PollInterpolatedHealthData
// Offset::0x22A8A80;
bool FConstructableHealthServiceComponent::PollInterpolatedHealthData(int32_t PartID,FConstructableDamageData OutInterpolatedHealthData);


// Function  EmbarkConstructable.ConstructableHealthServiceComponent.PollLatestHealthData
// Offset::0x22A8930;
bool FConstructableHealthServiceComponent::PollLatestHealthData(int32_t PartID,FConstructableDamageData OutLatestHealthData);


// Function  EmbarkConstructable.ConstructableHealthServiceComponent.ReplicatePartDamageData_Server
// Offset::0x22A8BD0;
void FConstructableHealthServiceComponent::ReplicatePartDamageData_Server(FConstructableDamageData DamageData);


// Function  EmbarkConstructable.ConstructableHoverMovementUtils.CalculateThrusterLocalForces
// Offset::0x22AE000;
void FConstructableHoverMovementUtils::CalculateThrusterLocalForces(FThrusterSimParams ThrusterSimParams,TArray<FThrusterDefinition> InOutThrusters);


// Function  EmbarkMovement.EmbarkPawnMovementComponent.GetAvoidanceVelocity
// Offset::0x25D9400;
FVector FEmbarkPawnMovementComponent::GetAvoidanceVelocity();


// Function  EmbarkMovement.EmbarkPawnMovementComponent.SetAvoidanceEnabled
// Offset::0x25D9460;
void FEmbarkPawnMovementComponent::SetAvoidanceEnabled(bool bEnable);


// Function  EmbarkConstructable.ConstructableMovementComponentBase.AddMovementSuppressor
// Offset::0x22AE8C0;
void FConstructableMovementComponentBase::AddMovementSuppressor(FName InName);


// Function  EmbarkConstructable.ConstructableMovementComponentBase.AddPhysicsSuppressor
// Offset::0x22AEAA0;
void FConstructableMovementComponentBase::AddPhysicsSuppressor(FName InName);


// Function  EmbarkConstructable.ConstructableMovementComponentBase.AnalyzeOrientation
// Offset::0x22AE5F0;
void FConstructableMovementComponentBase::AnalyzeOrientation();


// Function  EmbarkConstructable.ConstructableMovementComponentBase.EnableDefaultBlackboardReplication
// Offset::0x22AE5D0;
void FConstructableMovementComponentBase::EnableDefaultBlackboardReplication();


// Function  EmbarkConstructable.ConstructableMovementComponentBase.GetAngularVelocity_Client
// Offset::0x22AED40;
FVector FConstructableMovementComponentBase::GetAngularVelocity_Client();


// Function  EmbarkConstructable.ConstructableMovementComponentBase.GetCurrentLocalRotationOffset
// Offset::0x22AEB40;
FRotator FConstructableMovementComponentBase::GetCurrentLocalRotationOffset();


// Function  EmbarkConstructable.ConstructableMovementComponentBase.GetDesiredVelocity
// Offset::0x22AEB90;
float FConstructableMovementComponentBase::GetDesiredVelocity();


// Function  EmbarkConstructable.ConstructableMovementComponentBase.OnPhysicsSuppressionChangeState
// Offset::0x22AE960;
void FConstructableMovementComponentBase::OnPhysicsSuppressionChangeState(bool bNewSupressionState);


// Function  EmbarkConstructable.ConstructableMovementComponentBase.OnRep_RootTransform
// Offset::0x22AECF0;
void FConstructableMovementComponentBase::OnRep_RootTransform();


// Function  EmbarkConstructable.ConstructableMovementComponentBase.RemoveMovementSuppressor
// Offset::0x22AE820;
void FConstructableMovementComponentBase::RemoveMovementSuppressor(FName InName);


// Function  EmbarkConstructable.ConstructableMovementComponentBase.RemovePhysicsSuppressor
// Offset::0x22AEA00;
void FConstructableMovementComponentBase::RemovePhysicsSuppressor(FName InName);


// Function  EmbarkConstructable.ConstructableMovementComponentBase.SetEnableStructDeltaCompression
// Offset::0x22AED10;
void FConstructableMovementComponentBase::SetEnableStructDeltaCompression();


// Function  EmbarkConstructable.ConstructableMovementComponentBase.UpdateBaseMovementStateFromNetState_Client
// Offset::0x22AEC50;
void FConstructableMovementComponentBase::UpdateBaseMovementStateFromNetState_Client(FConstructableMovementNetState* NetState);


// Function  EmbarkConstructable.ConstructableMovementComponentBase.UpdateNetStateFromBaseMovementState_Server
// Offset::0x22AEBB0;
void FConstructableMovementComponentBase::UpdateNetStateFromBaseMovementState_Server(FConstructableMovementNetState* NetState);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.AddPartForceAtLocation
// Offset::0x22B0E50;
void FConstructablePartMixinLibrary::AddPartForceAtLocation(FConstructablePart ConstructablePart,FVector Location,FVector Force);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.AddPartImpulseAtLocation
// Offset::0x22B0CF0;
void FConstructablePartMixinLibrary::AddPartImpulseAtLocation(FConstructablePart ConstructablePart,FVector Location,FVector Impulse);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.AddPartTags
// Offset::0x22B3DC0;
void FConstructablePartMixinLibrary::AddPartTags(FConstructablePart ConstructablePart,FGameplayTagContainer PartTags);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.AddSocketData
// Offset::0x22B1B40;
void FConstructablePartMixinLibrary::AddSocketData(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.AttachActor
// Offset::0x22B1830;
void FConstructablePartMixinLibrary::AttachActor(FConstructablePart ConstructablePart,FActor* ActorToAttach,enum class EAttachmentRule AttachmentRule);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.DestroyPart
// Offset::0x22B4140;
void FConstructablePartMixinLibrary::DestroyPart(FConstructablePart ConstructablePart,int32_t EventID,enum class EConstructableHealthChangeReason DestructionMethod);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetAttachSocketName
// Offset::0x22B45A0;
FName FConstructablePartMixinLibrary::GetAttachSocketName(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetFirstPartSocketGroup
// Offset::0x22B2020;
bool FConstructablePartMixinLibrary::GetFirstPartSocketGroup(FConstructablePart ConstructablePart,FName SocketGroupName,FConstructableStyleSocket OutSocket,enum class ERelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetFirstPartSocketGroupTransform
// Offset::0x22B2240;
bool FConstructablePartMixinLibrary::GetFirstPartSocketGroupTransform(FConstructablePart ConstructablePart,FName SocketGroupName,FTransform OutTransform,enum class ERelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetNormalizedSocketGroupTransform
// Offset::0x22B1E40;
bool FConstructablePartMixinLibrary::GetNormalizedSocketGroupTransform(FConstructablePart ConstructablePart,FName SocketGroupName,FTransform OutTransform);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartAngularVelocityInDegrees
// Offset::0x22B0BE0;
bool FConstructablePartMixinLibrary::GetPartAngularVelocityInDegrees(FConstructablePart ConstructablePart,FVector OutAngularVelocityDegrees);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartBodyInstance
// Offset::0x22B0170;
FBodyInstance FConstructablePartMixinLibrary::GetPartBodyInstance(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartBounds
// Offset::0x22B09B0;
bool FConstructablePartMixinLibrary::GetPartBounds(FConstructablePart ConstructablePart,FBox OutBounds);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartChildren
// Offset::0x22B4290;
bool FConstructablePartMixinLibrary::GetPartChildren(FConstructablePart ConstructablePart,TArray<FConstructablePart> OutPartChildren,bool bIsRecursive,bool bAlsoGetDestroyedParts);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartCollisionProfileName
// Offset::0x22B0560;
FName FConstructablePartMixinLibrary::GetPartCollisionProfileName(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartIDFromHitResult
// Offset::0x22B1630;
int32_t FConstructablePartMixinLibrary::GetPartIDFromHitResult(FConstructablePart ConstructablePart,FHitResult HitResult);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartIDFromPhysicsBodyIndex
// Offset::0x22B0850;
bool FConstructablePartMixinLibrary::GetPartIDFromPhysicsBodyIndex(FConstructablePart ConstructablePart,int32_t PhysicsBodyIndex,int32_t OutPartId);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartIDRange
// Offset::0x22B4740;
FConstructablePartIDRange FConstructablePartMixinLibrary::GetPartIDRange(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartIDsMatchingTagQuery
// Offset::0x22B39D0;
void FConstructablePartMixinLibrary::GetPartIDsMatchingTagQuery(FConstructablePart ConstructablePart,FGameplayTagQuery Query,TSet<int32_t> OutPartIDs);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartInitialRelativeRotation
// Offset::0x22B2B30;
bool FConstructablePartMixinLibrary::GetPartInitialRelativeRotation(FConstructablePart ConstructablePart,FRotator OutInitialRelativeRotation);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartInitialRelativeTransform
// Offset::0x22B29C0;
bool FConstructablePartMixinLibrary::GetPartInitialRelativeTransform(FConstructablePart ConstructablePart,FTransform OutInitialRelativeTransform);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartLinearVelocity
// Offset::0x22B1230;
bool FConstructablePartMixinLibrary::GetPartLinearVelocity(FConstructablePart ConstructablePart,FVector OutLinearVelocity);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartLinearVelocityAtLocation
// Offset::0x22B10C0;
bool FConstructablePartMixinLibrary::GetPartLinearVelocityAtLocation(FConstructablePart ConstructablePart,FVector Location,FVector OutLinearVelocity);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartMass
// Offset::0x22B1340;
bool FConstructablePartMixinLibrary::GetPartMass(FConstructablePart ConstructablePart,float OutMass);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartName
// Offset::0x22B4670;
FName FConstructablePartMixinLibrary::GetPartName(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartParent
// Offset::0x22B4460;
bool FConstructablePartMixinLibrary::GetPartParent(FConstructablePart ConstructablePart,FConstructablePartParentInfo OutParentInfo);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartSimulatePhysics
// Offset::0x22B0390;
bool FConstructablePartMixinLibrary::GetPartSimulatePhysics(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartsIntersectingSphere
// Offset::0x22B1460;
void FConstructablePartMixinLibrary::GetPartsIntersectingSphere(FConstructablePart ConstructablePart,FVector SphereOrigin,float SphereRadius,TArray<int32_t> OutPartIDs);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartSocketGroup
// Offset::0x22B2470;
bool FConstructablePartMixinLibrary::GetPartSocketGroup(FConstructablePart ConstructablePart,FName SocketGroupName,TArray<FConstructableStyleSocket> OutSocketList,enum class ERelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartSocketGroupNames
// Offset::0x22B2650;
bool FConstructablePartMixinLibrary::GetPartSocketGroupNames(FConstructablePart ConstructablePart,FName SocketGroupName,TArray<FName> OutSocketGroupNameList);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartSocketGroupTransforms
// Offset::0x22B27E0;
bool FConstructablePartMixinLibrary::GetPartSocketGroupTransforms(FConstructablePart ConstructablePart,FName SocketGroupName,TArray<FTransform> OutTransformList,enum class ERelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartSocketID
// Offset::0x22B1CC0;
bool FConstructablePartMixinLibrary::GetPartSocketID(FConstructablePart ConstructablePart,FName SocketName,int32_t OutSocketID);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartSocketTransform
// Offset::0x22B2C40;
bool FConstructablePartMixinLibrary::GetPartSocketTransform(FConstructablePart ConstructablePart,FName SocketName,FTransform OutTransform,enum class ERelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartTags
// Offset::0x22B3C80;
bool FConstructablePartMixinLibrary::GetPartTags(FConstructablePart ConstructablePart,FGameplayTagContainer OutGameplayTags);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetPartTransform
// Offset::0x22B3800;
bool FConstructablePartMixinLibrary::GetPartTransform(FConstructablePart ConstructablePart,bool bWantWorldTransform,FTransform OutTransform);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetRelativeLocation
// Offset::0x22B3280;
FVector FConstructablePartMixinLibrary::GetRelativeLocation(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetRelativeRotation
// Offset::0x22B31B0;
FRotator FConstructablePartMixinLibrary::GetRelativeRotation(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetRelativeRotationQuat
// Offset::0x22B30E0;
FQuat FConstructablePartMixinLibrary::GetRelativeRotationQuat(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetRelativeTransform
// Offset::0x22B35C0;
FTransform FConstructablePartMixinLibrary::GetRelativeTransform(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetRootPartID
// Offset::0x22AFE70;
int32_t FConstructablePartMixinLibrary::GetRootPartID(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetSlotTransform
// Offset::0x22B2E70;
bool FConstructablePartMixinLibrary::GetSlotTransform(FConstructablePart ConstructablePart,FGameplayTagContainer GameplayTagContainer,bool bWantWorldTransform,FTransform OutTransform);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetStyleComponent
// Offset::0x22B3F00;
FPrimitiveComponent* FConstructablePartMixinLibrary::GetStyleComponent(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetWorldLocation
// Offset::0x22B34F0;
FVector FConstructablePartMixinLibrary::GetWorldLocation(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetWorldRotation
// Offset::0x22B3420;
FRotator FConstructablePartMixinLibrary::GetWorldRotation(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetWorldRotationQuat
// Offset::0x22B3350;
FQuat FConstructablePartMixinLibrary::GetWorldRotationQuat(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.GetWorldTransform
// Offset::0x22B36E0;
FTransform FConstructablePartMixinLibrary::GetWorldTransform(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.IsPartDestroyed
// Offset::0x22B3FC0;
bool FConstructablePartMixinLibrary::IsPartDestroyed(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.IsPointInsidePart
// Offset::0x22B0740;
bool FConstructablePartMixinLibrary::IsPointInsidePart(FConstructablePart ConstructablePart,FVector Point);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.IsProxy
// Offset::0x22AFF30;
bool FConstructablePartMixinLibrary::IsProxy(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.IsSkeletalMesh
// Offset::0x22AFFF0;
bool FConstructablePartMixinLibrary::IsSkeletalMesh(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.IsStaticMesh
// Offset::0x22B00B0;
bool FConstructablePartMixinLibrary::IsStaticMesh(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.IsValid
// Offset::0x22B4800;
bool FConstructablePartMixinLibrary::IsValid(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.IsValidPartIDForStyle
// Offset::0x22B4080;
bool FConstructablePartMixinLibrary::IsValidPartIDForStyle(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.RefreshSocketGroups
// Offset::0x22B1C00;
void FConstructablePartMixinLibrary::RefreshSocketGroups(FConstructablePart ConstructablePart);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.SetDampingProperties
// Offset::0x22B0240;
void FConstructablePartMixinLibrary::SetDampingProperties(FConstructablePart ConstructablePart,float LinearDamping,float AngularDamping);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.SetPartAngularVelocityInDegrees
// Offset::0x22B0AD0;
void FConstructablePartMixinLibrary::SetPartAngularVelocityInDegrees(FConstructablePart ConstructablePart,FVector AngularVelocityDegrees);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.SetPartCollisionProfileName
// Offset::0x22B0630;
void FConstructablePartMixinLibrary::SetPartCollisionProfileName(FConstructablePart ConstructablePart,FName InCollisionProfileName);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.SetPartLinearVelocity
// Offset::0x22B0FB0;
void FConstructablePartMixinLibrary::SetPartLinearVelocity(FConstructablePart ConstructablePart,FVector LinearVelocity);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.SetPartShouldAlwaysGenerateOverlaps
// Offset::0x22AFD60;
void FConstructablePartMixinLibrary::SetPartShouldAlwaysGenerateOverlaps(FConstructablePart ConstructablePart,bool bShouldAlwaysGenerateOverlaps);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.SetPartSimulatePhysics
// Offset::0x22B0450;
void FConstructablePartMixinLibrary::SetPartSimulatePhysics(FConstructablePart ConstructablePart,bool bSimulatePhysics);


// Function  EmbarkConstructable.ConstructablePartMixinLibrary.SetPartTransform
// Offset::0x22B1980;
void FConstructablePartMixinLibrary::SetPartTransform(FConstructablePart ConstructablePart,bool bSetWorldTransform,FTransform NewTransform);


// Function  EmbarkConstructable.ConstructablePartListMixinLibrary.ContainsPartID
// Offset::0x22BE0F0;
bool FConstructablePartListMixinLibrary::ContainsPartID(FConstructablePartList ConstructablePartList,int32_t PartID);


// Function  EmbarkConstructable.ConstructablePartListMixinLibrary.GetFirstPartID
// Offset::0x22BE250;
int32_t FConstructablePartListMixinLibrary::GetFirstPartID(FConstructablePartList ConstructablePartList);


// Function  EmbarkConstructable.ConstructablePartListMixinLibrary.GetPartIDs
// Offset::0x22BE350;
TArray<int32_t> FConstructablePartListMixinLibrary::GetPartIDs(FConstructablePartList ConstructablePartList);


// Function  EmbarkConstructable.ConstructablePartListMixinLibrary.GetPartList
// Offset::0x22BDF60;
TArray<FConstructablePart> FConstructablePartListMixinLibrary::GetPartList(FConstructablePartList ConstructablePartList,FActor* Actor);


// Function  EmbarkConstructable.ConstructablePartListMixinLibrary.IsEmpty
// Offset::0x22BDD80;
bool FConstructablePartListMixinLibrary::IsEmpty(FConstructablePartList ConstructablePartList);


// Function  EmbarkConstructable.ConstructablePartSelectionMixinLibrary.GetConstructablePart
// Offset::0x22BE9D0;
FConstructablePart FConstructablePartSelectionMixinLibrary::GetConstructablePart(FConstructablePartSelection PartSelection,FActor* Actor);


// Function  EmbarkConstructable.ConstructablePartSelectionMixinLibrary.IsValidPartID
// Offset::0x22BEAF0;
bool FConstructablePartSelectionMixinLibrary::IsValidPartID(FConstructablePartSelection PartSelection);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.AttachComponentToPart
// Offset::0x22C01F0;
void FConstructablePartTransformMixinLibrary::AttachComponentToPart(FConstructablePartTransform ConstructablePartTransform,FSceneComponent* OtherComponent);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetComponent
// Offset::0x22BFF20;
FSceneComponent* FConstructablePartTransformMixinLibrary::GetComponent(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetPartID
// Offset::0x22C0010;
int32_t FConstructablePartTransformMixinLibrary::GetPartID(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetPartName
// Offset::0x22BEF70;
FName FConstructablePartTransformMixinLibrary::GetPartName(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetRelativeLocation
// Offset::0x22BF900;
FVector FConstructablePartTransformMixinLibrary::GetRelativeLocation(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetRelativeLocationByParam
// Offset::0x22BF480;
FVector FConstructablePartTransformMixinLibrary::GetRelativeLocationByParam(FConstructablePartTransform ConstructablePartTransform,enum class EConstructablePartRelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetRelativeRotation
// Offset::0x22BF800;
FRotator FConstructablePartTransformMixinLibrary::GetRelativeRotation(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetRelativeRotationByParam
// Offset::0x22BF330;
FRotator FConstructablePartTransformMixinLibrary::GetRelativeRotationByParam(FConstructablePartTransform ConstructablePartTransform,enum class EConstructablePartRelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetRelativeRotationQuat
// Offset::0x22BF700;
FQuat FConstructablePartTransformMixinLibrary::GetRelativeRotationQuat(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetRelativeRotationQuatByParam
// Offset::0x22BF1E0;
FQuat FConstructablePartTransformMixinLibrary::GetRelativeRotationQuatByParam(FConstructablePartTransform ConstructablePartTransform,enum class EConstructablePartRelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetRelativeTransform
// Offset::0x22BF5D0;
FTransform FConstructablePartTransformMixinLibrary::GetRelativeTransform(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetRelativeTransformByParam
// Offset::0x22BF060;
FTransform FConstructablePartTransformMixinLibrary::GetRelativeTransformByParam(FConstructablePartTransform ConstructablePartTransform,enum class EConstructablePartRelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetSocketName
// Offset::0x22BFE30;
FName FConstructablePartTransformMixinLibrary::GetSocketName(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetWorldLocation
// Offset::0x22BFD30;
FVector FConstructablePartTransformMixinLibrary::GetWorldLocation(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetWorldRotation
// Offset::0x22BFC30;
FRotator FConstructablePartTransformMixinLibrary::GetWorldRotation(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetWorldRotationQuat
// Offset::0x22BFB30;
FQuat FConstructablePartTransformMixinLibrary::GetWorldRotationQuat(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.GetWorldTransform
// Offset::0x22BFA00;
FTransform FConstructablePartTransformMixinLibrary::GetWorldTransform(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartTransformMixinLibrary.IsValid
// Offset::0x22C0100;
bool FConstructablePartTransformMixinLibrary::IsValid(FConstructablePartTransform ConstructablePartTransform);


// Function  EmbarkConstructable.ConstructablePartSelectionContainerMixinLibrary.GetAsPartTransform
// Offset::0x22C1040;
FConstructablePartTransform FConstructablePartSelectionContainerMixinLibrary::GetAsPartTransform(FConstructablePartTransformSelection PartSelectionContainer);


// Function  EmbarkConstructable.ConstructablePartSelectionContainerMixinLibrary.GetPart
// Offset::0x22C0F00;
FConstructablePart FConstructablePartSelectionContainerMixinLibrary::GetPart(FConstructablePartTransformSelection PartSelectionContainer);


// Function  EmbarkConstructable.ConstructablePartSelectionContainerMixinLibrary.Setup
// Offset::0x22C1250;
void FConstructablePartSelectionContainerMixinLibrary::Setup(FConstructablePartTransformSelection PartSelectionContainer,FActor* Actor);


// Function  EmbarkEngine.SimulatedSkinnedMeshComponent.FindConstraintBoneName
// Offset::0x22FECF0;
FName FSimulatedSkinnedMeshComponent::FindConstraintBoneName(int32_t ConstraintIndex);


// Function  EmbarkEngine.SimulatedSkinnedMeshComponent.GetBoneTransform
// Offset::0x22FE700;
FTransform FSimulatedSkinnedMeshComponent::GetBoneTransform(FName BoneName);


// Function  EmbarkEngine.SimulatedSkinnedMeshComponent.K2_GetClosestPointOnPhysicsAsset
// Offset::0x22FEDA0;
bool FSimulatedSkinnedMeshComponent::K2_GetClosestPointOnPhysicsAsset(FVector WorldPosition,FVector ClosestWorldPosition,FVector Normal,FName BoneName,float Distance);


// Function  EmbarkEngine.SimulatedSkinnedMeshComponent.OnPhysicsBodyAwake
// Offset::0x22FE620;
void FSimulatedSkinnedMeshComponent::OnPhysicsBodyAwake(FPrimitiveComponent* WakingComponent,FName BoneName);


// Function  EmbarkEngine.SimulatedSkinnedMeshComponent.OnPhysicsBodySleep
// Offset::0x22FE540;
void FSimulatedSkinnedMeshComponent::OnPhysicsBodySleep(FPrimitiveComponent* SleepingComponent,FName BoneName);


// Function  EmbarkEngine.SimulatedSkinnedMeshComponent.SetAllBodiesBelowSimulatePhysics
// Offset::0x22FE9D0;
void FSimulatedSkinnedMeshComponent::SetAllBodiesBelowSimulatePhysics(FName InBoneName,bool bNewSimulate,bool bIncludeSelf);


// Function  EmbarkEngine.SimulatedSkinnedMeshComponent.SetBodySimulatePhysics
// Offset::0x22FEB20;
void FSimulatedSkinnedMeshComponent::SetBodySimulatePhysics(FName BoneName,bool bInSimulate);


// Function  EmbarkEngine.SimulatedSkinnedMeshComponent.SetBodyTransform
// Offset::0x22FE7F0;
void FSimulatedSkinnedMeshComponent::SetBodyTransform(FName BoneName,FTransform Transform);


// Function  EmbarkEngine.SimulatedSkinnedMeshComponent.SetBoneCollisionProfileName
// Offset::0x22FEC10;
void FSimulatedSkinnedMeshComponent::SetBoneCollisionProfileName(FName BoneName,FName InCollisionProfileName);


// Function  EmbarkEngine.SimulatedSkinnedMeshComponent.TermBodiesBelow
// Offset::0x22FE930;
void FSimulatedSkinnedMeshComponent::TermBodiesBelow(FName ParentBoneName);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.AddPartImpulseAtLocation
// Offset::0x22C2F20;
void FConstructableSkeletalMeshStyleComponent::AddPartImpulseAtLocation(int32_t PartID,FVector Location,FVector Impulse);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.BoneIndexToPartID
// Offset::0x22C5E90;
int32_t FConstructableSkeletalMeshStyleComponent::BoneIndexToPartID(int32_t BoneIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.BoneNameToPartID
// Offset::0x22C5FE0;
int32_t FConstructableSkeletalMeshStyleComponent::BoneNameToPartID(FName BoneName);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.BoneNameToPhysicsBodyIndex
// Offset::0x22C5AA0;
int32_t FConstructableSkeletalMeshStyleComponent::BoneNameToPhysicsBodyIndex(FName BoneName);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.BreakPhysicsConstraint
// Offset::0x22C3640;
void FConstructableSkeletalMeshStyleComponent::BreakPhysicsConstraint(int32_t PhysicsConstraintIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.CopyPoseFromSkeletalComponent
// Offset::0x22C4E70;
void FConstructableSkeletalMeshStyleComponent::CopyPoseFromSkeletalComponent(FSkinnedMeshComponent* InComponentToCopy);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetActivePhysicsAsset
// Offset::0x22C5A70;
FPhysicsAsset* FConstructableSkeletalMeshStyleComponent::GetActivePhysicsAsset();


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetBodyCollisionProfileName
// Offset::0x22C4990;
FName FConstructableSkeletalMeshStyleComponent::GetBodyCollisionProfileName(int32_t BodyInstanceIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetBodyInstanceFromIndex
// Offset::0x22C4DC0;
FBodyInstance FConstructableSkeletalMeshStyleComponent::GetBodyInstanceFromIndex(int32_t BodyInstanceIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetBodyTransformFromIndex
// Offset::0x22C4C80;
bool FConstructableSkeletalMeshStyleComponent::GetBodyTransformFromIndex(int32_t BodyInstanceIndex,FTransform OutTransform);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetBoneSpaceRefPose
// Offset::0x22C5890;
FTransform FConstructableSkeletalMeshStyleComponent::GetBoneSpaceRefPose(FName BoneName);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetBoneTransformByName
// Offset::0x22C4FB0;
FTransform FConstructableSkeletalMeshStyleComponent::GetBoneTransformByName(FName BoneName,enum class EBoneSpaces BoneSpace);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetChildPhysicsBodyIndexFromConstraint
// Offset::0x22C3420;
int32_t FConstructableSkeletalMeshStyleComponent::GetChildPhysicsBodyIndexFromConstraint(int32_t ConstraintIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetComponentSpaceRefPose
// Offset::0x22C57A0;
FTransform FConstructableSkeletalMeshStyleComponent::GetComponentSpaceRefPose(FName BoneName);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetConstraintDrive
// Offset::0x22C4420;
bool FConstructableSkeletalMeshStyleComponent::GetConstraintDrive(int32_t PhysicsConstraintIndex,enum class EAngularDriveMode OutDriveMode);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetConstraintForce
// Offset::0x22C32E0;
bool FConstructableSkeletalMeshStyleComponent::GetConstraintForce(int32_t PhysicsConstraintIndex,FVector OutLinearForce,FVector OutAngularForce);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetConstraintFrame
// Offset::0x22C4280;
bool FConstructableSkeletalMeshStyleComponent::GetConstraintFrame(int32_t PhysicsConstraintIndex,enum class EConstraintFrame Frame,FTransform OutTransform);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetNumBodyInstances
// Offset::0x22C4B50;
int32_t FConstructableSkeletalMeshStyleComponent::GetNumBodyInstances();


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetNumConstraintInstances
// Offset::0x22C3560;
int32_t FConstructableSkeletalMeshStyleComponent::GetNumConstraintInstances();


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetParentPhysicsBodyIndexFromConstraint
// Offset::0x22C34C0;
int32_t FConstructableSkeletalMeshStyleComponent::GetParentPhysicsBodyIndexFromConstraint(int32_t PhysicsConstraintIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetPartBounds
// Offset::0x22C3070;
bool FConstructableSkeletalMeshStyleComponent::GetPartBounds(int32_t PartID,FBox OutBounds);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetPartIDRange
// Offset::0x22C3280;
FConstructablePartIDRange FConstructableSkeletalMeshStyleComponent::GetPartIDRange();


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetPartLocalTransform
// Offset::0x22C5640;
bool FConstructableSkeletalMeshStyleComponent::GetPartLocalTransform(int32_t PartID,FTransform OutTransform);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetPartMass
// Offset::0x22C3170;
bool FConstructableSkeletalMeshStyleComponent::GetPartMass(int32_t PartID,float OutMass);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetPartWorldTransform
// Offset::0x22C53C0;
bool FConstructableSkeletalMeshStyleComponent::GetPartWorldTransform(int32_t PartID,FTransform OutTransform);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetPhysicsConstraintLimits
// Offset::0x22C4040;
bool FConstructableSkeletalMeshStyleComponent::GetPhysicsConstraintLimits(int32_t PhysicsConstraintIndex,FAngularConstraintData OutLimits);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetPhysicsConstraintName
// Offset::0x22C3590;
FName FConstructableSkeletalMeshStyleComponent::GetPhysicsConstraintName(int32_t PhysicsConstraintIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetPhysicsConstraintsForBody
// Offset::0x22C4B80;
void FConstructableSkeletalMeshStyleComponent::GetPhysicsConstraintsForBody(int32_t PhysicsBodyIndex,TArray<int32_t> OutConstraintIndices);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetPhysicsConstraintTwistSwing1Swing2
// Offset::0x22C3CB0;
FVector FConstructableSkeletalMeshStyleComponent::GetPhysicsConstraintTwistSwing1Swing2(int32_t PhysicsConstraintIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetPhysicsLinearConstraint
// Offset::0x22C3F40;
bool FConstructableSkeletalMeshStyleComponent::GetPhysicsLinearConstraint(int32_t PhysicsConstraintIndex,FLinearConstraintData OutConstraint);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetRootBodyIndex
// Offset::0x22C4B20;
int32_t FConstructableSkeletalMeshStyleComponent::GetRootBodyIndex();


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.GetSkeletalBodySetups
// Offset::0x22C5B40;
bool FConstructableSkeletalMeshStyleComponent::GetSkeletalBodySetups(TArray<FSkeletalBodySetup*> OutSkeletalBodySetups);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.InitializeLinearConstraint
// Offset::0x22C4510;
void FConstructableSkeletalMeshStyleComponent::InitializeLinearConstraint(FLinearDriveParams Parameters);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.InitializeSLERPConstraint
// Offset::0x22C46A0;
void FConstructableSkeletalMeshStyleComponent::InitializeSLERPConstraint(FSLERPDriveParams Parameters);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.InitializeTSSConstraint
// Offset::0x22C45D0;
void FConstructableSkeletalMeshStyleComponent::InitializeTSSConstraint(FTSSDriveParams Parameters);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.OnFullyConstructed
// Offset::0x3D30810;
void FConstructableSkeletalMeshStyleComponent::OnFullyConstructed();


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.OnPartDestroyed
// Offset::0x3D30810;
void FConstructableSkeletalMeshStyleComponent::OnPartDestroyed(FConstructableDamageData DestructionData);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.OnPartHealthChanged
// Offset::0x3D30810;
void FConstructableSkeletalMeshStyleComponent::OnPartHealthChanged(FConstructableDamageData LatestHealthData);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.PartIDToBoneIndex
// Offset::0x22C5DF0;
int32_t FConstructableSkeletalMeshStyleComponent::PartIDToBoneIndex(int32_t PartID);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.PartIDToBoneName
// Offset::0x22C5F30;
FName FConstructableSkeletalMeshStyleComponent::PartIDToBoneName(int32_t PartID);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.PartIDToPhysicsBodyIndex
// Offset::0x22C5CB0;
int32_t FConstructableSkeletalMeshStyleComponent::PartIDToPhysicsBodyIndex(int32_t PartID);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.PhysicsBodyIndexToBoneName
// Offset::0x22C5C00;
FName FConstructableSkeletalMeshStyleComponent::PhysicsBodyIndexToBoneName(int32_t PhysicsBodyIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.PhysicsBodyIndexToPartID
// Offset::0x22C5D50;
int32_t FConstructableSkeletalMeshStyleComponent::PhysicsBodyIndexToPartID(int32_t PhysicsBodyIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.RefreshPartsAllowedToOverlap
// Offset::0x22C4260;
void FConstructableSkeletalMeshStyleComponent::RefreshPartsAllowedToOverlap();


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.ResetBoneTransformByName
// Offset::0x22C4F10;
void FConstructableSkeletalMeshStyleComponent::ResetBoneTransformByName(FName BoneName);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SeparateDrivenConstraints
// Offset::0x22C32C0;
void FConstructableSkeletalMeshStyleComponent::SeparateDrivenConstraints();


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetBodyCollisionProfileName
// Offset::0x22C4A40;
void FConstructableSkeletalMeshStyleComponent::SetBodyCollisionProfileName(int32_t BodyInstanceIndex,FName InCollisionProfileName);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetBodySolverIterations
// Offset::0x22C4810;
void FConstructableSkeletalMeshStyleComponent::SetBodySolverIterations(int32_t Position,int32_t Velocity);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetBoneTransformByName
// Offset::0x22C50F0;
void FConstructableSkeletalMeshStyleComponent::SetBoneTransformByName(FName BoneName,FTransform InTransform,enum class EBoneSpaces BoneSpace);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetConstraintAngularDriveParams
// Offset::0x22C3B30;
void FConstructableSkeletalMeshStyleComponent::SetConstraintAngularDriveParams(int32_t PhysicsConstraintIndex,float PositionStrength,float VelocityStrength,float AccelerationStrength);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetConstraintAngularOrientationTarget
// Offset::0x22C3D60;
void FConstructableSkeletalMeshStyleComponent::SetConstraintAngularOrientationTarget(int32_t PhysicsConstraintIndex,FRotator NewOrientationTarget);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetConstraintAngularVelocityTarget
// Offset::0x22C38C0;
void FConstructableSkeletalMeshStyleComponent::SetConstraintAngularVelocityTarget(int32_t PhysicsConstraintIndex,FVector NewVelocityTarget);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetConstraintLinearDriveParams
// Offset::0x22C39B0;
void FConstructableSkeletalMeshStyleComponent::SetConstraintLinearDriveParams(int32_t PhysicsConstraintIndex,float Spring,float Damper,float MaxForce);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetConstraintLinearPositionTarget
// Offset::0x22C36E0;
void FConstructableSkeletalMeshStyleComponent::SetConstraintLinearPositionTarget(int32_t PhysicsConstraintIndex,FVector NewPositionTarget);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetConstraintLinearVelocityTarget
// Offset::0x22C37D0;
void FConstructableSkeletalMeshStyleComponent::SetConstraintLinearVelocityTarget(int32_t PhysicsConstraintIndex,FVector NewVelocityTarget);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetDampingProperties
// Offset::0x22C2CF0;
void FConstructableSkeletalMeshStyleComponent::SetDampingProperties(int32_t PartID,float LinearDamping,float AngularDamping);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetPartCollisionProfileName
// Offset::0x22C2E30;
void FConstructableSkeletalMeshStyleComponent::SetPartCollisionProfileName(int32_t ParID,FName InCollisionProfileName);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetPartInComponentSpace
// Offset::0x22C5980;
void FConstructableSkeletalMeshStyleComponent::SetPartInComponentSpace(int32_t PartID,bool bIsComponentSpace);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetPartLocalTransform
// Offset::0x22C5500;
void FConstructableSkeletalMeshStyleComponent::SetPartLocalTransform(int32_t PartID,FTransform NewTransform);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetPartSimulatePhysics
// Offset::0x22C2C00;
void FConstructableSkeletalMeshStyleComponent::SetPartSimulatePhysics(int32_t PartID,bool bSimulatePhysics);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetPartWorldTransform
// Offset::0x22C5280;
void FConstructableSkeletalMeshStyleComponent::SetPartWorldTransform(int32_t PartID,FTransform NewTransform);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetPhysicsConstraintLimits
// Offset::0x22C4150;
bool FConstructableSkeletalMeshStyleComponent::SetPhysicsConstraintLimits(int32_t PhysicsConstraintIndex,FAngularConstraintData NewLimits);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.SetPhysicsLinearConstraintLimit
// Offset::0x22C3E50;
bool FConstructableSkeletalMeshStyleComponent::SetPhysicsLinearConstraintLimit(int32_t PhysicsConstraintIndex,float NewLimit);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.TermBody
// Offset::0x22C48F0;
void FConstructableSkeletalMeshStyleComponent::TermBody(int32_t BodyInstanceIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.UnWeldBody
// Offset::0x22C4770;
void FConstructableSkeletalMeshStyleComponent::UnWeldBody(int32_t BodyInstanceIndex);


// Function  EmbarkConstructable.ConstructableSkeletalMeshStyleComponent.WeldAllKinematics
// Offset::0x22C5780;
void FConstructableSkeletalMeshStyleComponent::WeldAllKinematics();


// Function  EmbarkConstructable.ConstructableSkeletalReplicationServiceComponent.SetReplicationType
// Offset::0x22CAB10;
bool FConstructableSkeletalReplicationServiceComponent::SetReplicationType(int32_t PartID,enum class EConstructableReplicationType Type);


// Function  EmbarkConstructable.ConstructableSpawnSizeComponentBase.GetAutoAcquiredExtent
// Offset::0x3D30810;
FBox FConstructableSpawnSizeComponentBase::GetAutoAcquiredExtent();


// Function  EmbarkConstructable.ConstructableSpawnSizeComponentBase.GetCollisionRadius
// Offset::0x22CAF60;
float FConstructableSpawnSizeComponentBase::GetCollisionRadius();


// Function  EmbarkConstructable.ConstructableStaticMeshStyleComponent.GetPartBounds
// Offset::0x22CB570;
bool FConstructableStaticMeshStyleComponent::GetPartBounds(int32_t PartID,FBox OutBounds);


// Function  EmbarkConstructable.ConstructableStaticMeshStyleComponent.GetPartIDRange
// Offset::0x22CB670;
FConstructablePartIDRange FConstructableStaticMeshStyleComponent::GetPartIDRange();


// Function  EmbarkConstructable.ConstructableStaticMeshStyleComponent.OnFullyConstructed
// Offset::0x3D30810;
void FConstructableStaticMeshStyleComponent::OnFullyConstructed();


// Function  EmbarkConstructable.ConstructableStaticMeshStyleComponent.OnPartDestroyed
// Offset::0x3D30810;
void FConstructableStaticMeshStyleComponent::OnPartDestroyed(FConstructableDamageData DestructionData);


// Function  EmbarkConstructable.ConstructableStaticMeshStyleComponent.OnPartHealthChanged
// Offset::0x3D30810;
void FConstructableStaticMeshStyleComponent::OnPartHealthChanged(FConstructableDamageData LatestHealthData);


// Function  EmbarkConstructable.ConstructableStyleAssemblyBase.GetAllStyles
// Offset::0x22CC300;
void FConstructableStyleAssemblyBase::GetAllStyles(FConstructableStyleAssemblyBase* AssemblyToGetFrom,TArray<FPrimitiveComponent*> OutAllStyles);


// Function  EmbarkConstructable.ConstructableStyleAssemblyBase.GetStyleComponentFromPartID
// Offset::0x22CC260;
FPrimitiveComponent* FConstructableStyleAssemblyBase::GetStyleComponentFromPartID(int32_t PartID);


// Function  EmbarkConstructable.ConstructableStyleDriverComponent.BP_OnFullyConstructed
// Offset::0x3D30810;
void FConstructableStyleDriverComponent::BP_OnFullyConstructed();


// Function  EmbarkConstructable.ConstructableStyleDriverComponent.GetConstructable
// Offset::0x22CCAA0;
FConstructableBase* FConstructableStyleDriverComponent::GetConstructable();


// Function  EmbarkConstructable.ConstructableStyleDriverComponent.Handle_ConstructableDestroyed
// Offset::0x22CC9C0;
void FConstructableStyleDriverComponent::Handle_ConstructableDestroyed(FConstructableBase* InConstructable,FActor* InDamageInstigator);


// Function  EmbarkConstructable.ConstructableStyleDriverComponent.OnConstructableDestroyed
// Offset::0x3D30810;
void FConstructableStyleDriverComponent::OnConstructableDestroyed(FActor* DamageInstigator);


// Function  EmbarkConstructable.ConstructableStylePartListMixinLibrary.ContainsPartID
// Offset::0x22CD400;
bool FConstructableStylePartListMixinLibrary::ContainsPartID(FConstructableStylePartList ConstructableStylePartList,int32_t PartID);


// Function  EmbarkConstructable.ConstructableStylePartListMixinLibrary.GetPartByID
// Offset::0x22CD9E0;
FConstructablePart FConstructableStylePartListMixinLibrary::GetPartByID(FConstructableStylePartList ConstructableStylePartList,FObject* WorldContextObject,int32_t PartID,FActor* Owner);


// Function  EmbarkConstructable.ConstructableStylePartListMixinLibrary.GetPartIDs
// Offset::0x22CD880;
TArray<int32_t> FConstructableStylePartListMixinLibrary::GetPartIDs(FConstructableStylePartList ConstructableStylePartList);


// Function  EmbarkConstructable.ConstructableStylePartListMixinLibrary.GetParts
// Offset::0x22CD570;
TArray<FConstructablePart> FConstructableStylePartListMixinLibrary::GetParts(FConstructableStylePartList ConstructableStylePartList,FActor* Owner);


// Function  EmbarkConstructable.ConstructableStylePartListMixinLibrary.GetPartTransformByID
// Offset::0x22CDC10;
FConstructablePartTransform FConstructableStylePartListMixinLibrary::GetPartTransformByID(FConstructableStylePartList ConstructableStylePartList,FObject* WorldContextObject,int32_t PartID);


// Function  EmbarkConstructable.ConstructableStylePartListMixinLibrary.GetPartTransforms
// Offset::0x22CD720;
TArray<FConstructablePartTransform> FConstructableStylePartListMixinLibrary::GetPartTransforms(FConstructableStylePartList ConstructableStylePartList);


// Function  EmbarkConstructable.ConstructableStylePartListMixinLibrary.Setup
// Offset::0x22CDEC0;
void FConstructableStylePartListMixinLibrary::Setup(FConstructableStylePartList ConstructableStylePartList,FActor* Actor);


// Function  EmbarkConstructable.ConstructableStyleProxyMixinLibrary.GetRelativeLocation
// Offset::0x22CEAD0;
FVector FConstructableStyleProxyMixinLibrary::GetRelativeLocation(FConstructableStyleProxy StyleProxy,enum class EConstructablePartRelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructableStyleProxyMixinLibrary.GetRelativeRotation
// Offset::0x22CE9B0;
FRotator FConstructableStyleProxyMixinLibrary::GetRelativeRotation(FConstructableStyleProxy StyleProxy,enum class EConstructablePartRelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructableStyleProxyMixinLibrary.GetRelativeRotationQuat
// Offset::0x22CE890;
FQuat FConstructableStyleProxyMixinLibrary::GetRelativeRotationQuat(FConstructableStyleProxy StyleProxy,enum class EConstructablePartRelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructableStyleProxyMixinLibrary.GetRelativeTransform
// Offset::0x22CE740;
FTransform FConstructableStyleProxyMixinLibrary::GetRelativeTransform(FConstructableStyleProxy StyleProxy,enum class EConstructablePartRelativeTransformSpace TransformSpace);


// Function  EmbarkConstructable.ConstructableStyleProxyMixinLibrary.GetWorldLocation
// Offset::0x22CEE90;
FVector FConstructableStyleProxyMixinLibrary::GetWorldLocation(FConstructableStyleProxy StyleProxy);


// Function  EmbarkConstructable.ConstructableStyleProxyMixinLibrary.GetWorldRotation
// Offset::0x22CEDC0;
FRotator FConstructableStyleProxyMixinLibrary::GetWorldRotation(FConstructableStyleProxy StyleProxy);


// Function  EmbarkConstructable.ConstructableStyleProxyMixinLibrary.GetWorldRotationQuat
// Offset::0x22CECF0;
FQuat FConstructableStyleProxyMixinLibrary::GetWorldRotationQuat(FConstructableStyleProxy StyleProxy);


// Function  EmbarkConstructable.ConstructableStyleProxyMixinLibrary.GetWorldTransform
// Offset::0x22CEBF0;
FTransform FConstructableStyleProxyMixinLibrary::GetWorldTransform(FConstructableStyleProxy StyleProxy);


// Function  EmbarkConstructable.ConstructableStyleProxyMixinLibrary.Setup
// Offset::0x22CF060;
void FConstructableStyleProxyMixinLibrary::Setup(FConstructableStyleProxy StyleProxy,FConstructableBase* Constructable);


// Function  EmbarkConstructable.ConstructableStyleProxyMixinLibrary.SetupWithAssembly
// Offset::0x22CEF60;
void FConstructableStyleProxyMixinLibrary::SetupWithAssembly(FConstructableStyleProxy StyleProxy,FConstructableStyleAssemblyBase* Assembly);


// Function  EmbarkConstructable.ConstructableStyleShapeComponent.OnPartHealthChanged
// Offset::0x3D30810;
void FConstructableStyleShapeComponent::OnPartHealthChanged(FConstructableDamageData LatestHealthData);


// Function  EmbarkConstructable.ConstructablePartTargetingDataMixinLibrary.GetTargetObject
// Offset::0x22D41E0;
FObject* FConstructablePartTargetingDataMixinLibrary::GetTargetObject(FConstructablePartTargetingData TargetingData);


// Function  EmbarkConstructable.ConstructablePartTargetingDataMixinLibrary.SetTargetObject
// Offset::0x22D4030;
void FConstructablePartTargetingDataMixinLibrary::SetTargetObject(FConstructablePartTargetingData TargetingData,FObject* TargetObject);


// Function  EmbarkConstructable.ConstructablePartTargetingEventDataMixinLibrary.GetTargetObject
// Offset::0x22D4840;
FObject* FConstructablePartTargetingEventDataMixinLibrary::GetTargetObject(FConstructablePartTargetingEventData EventData);


// Function  EmbarkConstructable.ConstructablePartTargetingEventDataMixinLibrary.SetTargetObject
// Offset::0x22D4640;
void FConstructablePartTargetingEventDataMixinLibrary::SetTargetObject(FConstructablePartTargetingEventData EventData,FObject* TargetObject);


// Function  EmbarkConstructable.ConstructablePartTargetingDataArraySimState.InitForActor
// Offset::0x22D4DB0;
void FConstructablePartTargetingDataArraySimState::InitForActor(FActor* Actor);


// Function  EmbarkConstructable.ConstructablePartTargetingDataArraySimState.OnRep_Items
// Offset::0x22D4D90;
void FConstructablePartTargetingDataArraySimState::OnRep_Items();


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.GetMutablePartConfig
// Offset::0x22D5760;
FConstructablePartTargetingConfig FConstructableTargetingServiceComponent::GetMutablePartConfig(int32_t PartID);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.GetPartsRotated_Server
// Offset::0x22D5830;
TSet<int32_t> FConstructableTargetingServiceComponent::GetPartsRotated_Server();


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartChaseTarget
// Offset::0x22D5A90;
void FConstructableTargetingServiceComponent::MakePartChaseTarget(int32_t AffectedPartID,FVector StartLocation,FSceneComponent* ComponentToTrack,FVector LocationToTrack,FTargetingServiceParams Params,float MaxSpeed,float OffsetZ,bool bChaseLocation);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartStopTracking_Server
// Offset::0x22D6E50;
void FConstructableTargetingServiceComponent::MakePartStopTracking_Server(int32_t AffectedPartID,FTargetingServiceParams Params);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartStopTracking_Server_NoParams
// Offset::0x22D6DB0;
void FConstructableTargetingServiceComponent::MakePartStopTracking_Server_NoParams(int32_t AffectedPartID);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartTrackActor_Server
// Offset::0x22D6370;
void FConstructableTargetingServiceComponent::MakePartTrackActor_Server(int32_t AffectedPartID,FActor* ActorToTrack,FTargetingServiceParams Params);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartTrackActor_Server_NoParams
// Offset::0x22D6290;
void FConstructableTargetingServiceComponent::MakePartTrackActor_Server_NoParams(int32_t AffectedPartID,FActor* ActorToTrack);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartTrackComponent_Server
// Offset::0x22D6150;
void FConstructableTargetingServiceComponent::MakePartTrackComponent_Server(int32_t AffectedPartID,FSceneComponent* ComponentToTrack,FTargetingServiceParams Params);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartTrackComponent_Server_NoParams
// Offset::0x22D6070;
void FConstructableTargetingServiceComponent::MakePartTrackComponent_Server_NoParams(int32_t AffectedPartID,FSceneComponent* ComponentToTrack);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartTrackConstructablePart_Server
// Offset::0x22D5EE0;
void FConstructableTargetingServiceComponent::MakePartTrackConstructablePart_Server(int32_t AffectedPartID,FConstructableBase* ConstructableToTrack,int32_t PartIDToTrack,FTargetingServiceParams Params);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartTrackConstructablePart_Server_NoParams
// Offset::0x22D5DB0;
void FConstructableTargetingServiceComponent::MakePartTrackConstructablePart_Server_NoParams(int32_t AffectedPartID,FConstructableBase* ConstructableToTrack,int32_t PartIDToTrack);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartTrackWorldLocation_Server
// Offset::0x22D65A0;
void FConstructableTargetingServiceComponent::MakePartTrackWorldLocation_Server(int32_t AffectedPartID,FVector TargetLocation,FTargetingServiceParams Params);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartTrackWorldLocation_Server_NoParams
// Offset::0x22D64B0;
void FConstructableTargetingServiceComponent::MakePartTrackWorldLocation_Server_NoParams(int32_t AffectedPartID,FVector TargetLocation);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartTrackWorldOrientation_Server
// Offset::0x22D67E0;
void FConstructableTargetingServiceComponent::MakePartTrackWorldOrientation_Server(int32_t AffectedPartID,FRotator TargetOrientation,FTargetingServiceParams Params);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.MakePartTrackWorldOrientation_Server_NoParams
// Offset::0x22D66F0;
void FConstructableTargetingServiceComponent::MakePartTrackWorldOrientation_Server_NoParams(int32_t AffectedPartID,FRotator TargetOrientation);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.PollInterpolatedTrackingData
// Offset::0x22D5860;
bool FConstructableTargetingServiceComponent::PollInterpolatedTrackingData(int32_t AffectedPartID,FConstructablePartTargetingEventData OutData);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.ResetRotatedParts_Server
// Offset::0x22D5A70;
void FConstructableTargetingServiceComponent::ResetRotatedParts_Server();


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.TargetPartRelativeRotation_Server
// Offset::0x22D6C60;
void FConstructableTargetingServiceComponent::TargetPartRelativeRotation_Server(int32_t AffectedPartID,FRotator RelativeRotation,FTargetingServiceParams Params);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.TargetPartRelativeRotation_Server_NoParams
// Offset::0x22D6A20;
void FConstructableTargetingServiceComponent::TargetPartRelativeRotation_Server_NoParams(int32_t AffectedPartID,FRotator RelativeRotation);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.TargetPartRelativeRotation_Server_NoParams_Quat
// Offset::0x22D6930;
void FConstructableTargetingServiceComponent::TargetPartRelativeRotation_Server_NoParams_Quat(int32_t AffectedPartID,FQuat RelativeRotation);


// Function  EmbarkConstructable.ConstructableTargetingServiceComponent.TargetPartRelativeRotation_Server_Quat
// Offset::0x22D6B10;
void FConstructableTargetingServiceComponent::TargetPartRelativeRotation_Server_Quat(int32_t AffectedPartID,FQuat RelativeRotation,FTargetingServiceParams Params);


// Function  EmbarkConstructable.ConstructableTrainingComponent.ConstructShapes
// Offset::0x22D7DA0;
void FConstructableTrainingComponent::ConstructShapes();


// Function  EmbarkConstructable.ConstructableUtilsStatics.AddSocketData
// Offset::0x22D8820;
void FConstructableUtilsStatics::AddSocketData(FSceneComponent* MaybeStyle);


// Function  EmbarkConstructable.ConstructableUtilsStatics.GetNextAttackEventID
// Offset::0x22D91F0;
int32_t FConstructableUtilsStatics::GetNextAttackEventID();


// Function  EmbarkConstructable.ConstructableUtilsStatics.GetPartIDFromHitResult
// Offset::0x22D8FE0;
int32_t FConstructableUtilsStatics::GetPartIDFromHitResult(FHitResult HitResult);


// Function  EmbarkConstructable.ConstructableUtilsStatics.GetPartIDRange
// Offset::0x22D8780;
FConstructablePartIDRange FConstructableUtilsStatics::GetPartIDRange(FPrimitiveComponent* MaybeStyleComponent);


// Function  EmbarkConstructable.ConstructableUtilsStatics.GetPartIDsMatchingTagQuery
// Offset::0x22D8B40;
bool FConstructableUtilsStatics::GetPartIDsMatchingTagQuery(FPrimitiveComponent* MaybeStyleComponent,FGameplayTagQuery TagQuery,TSet<int32_t> OutPartIDs);


// Function  EmbarkConstructable.ConstructableUtilsStatics.GetPartsIntersectingSphere
// Offset::0x22D8E40;
void FConstructableUtilsStatics::GetPartsIntersectingSphere(FPrimitiveComponent* MaybeStyleComponent,FVector SphereOrigin,float SphereRadius,TArray<int32_t> OutPartIDs);


// Function  EmbarkConstructable.ConstructableUtilsStatics.GetStyleComponentFromPartID
// Offset::0x22D8A40;
FPrimitiveComponent* FConstructableUtilsStatics::GetStyleComponentFromPartID(TArray<FPrimitiveComponent*> Styles,int32_t PartID);


// Function  EmbarkConstructable.ConstructableUtilsStatics.IsPartDestroyed
// Offset::0x22D8960;
bool FConstructableUtilsStatics::IsPartDestroyed(FPrimitiveComponent* MaybeStyle,int32_t PartID);


// Function  EmbarkConstructable.ConstructableUtilsStatics.IsPartIDValid
// Offset::0x22D9150;
bool FConstructableUtilsStatics::IsPartIDValid(int32_t PartID);


// Function  EmbarkConstructable.ConstructableUtilsStatics.IsStyleComponent
// Offset::0x22D8DA0;
bool FConstructableUtilsStatics::IsStyleComponent(FActorComponent* MaybeStyleComponent);


// Function  EmbarkConstructable.ConstructableUtilsStatics.SortStyleComponentsByName
// Offset::0x22D88B0;
void FConstructableUtilsStatics::SortStyleComponentsByName(TArray<FSceneComponent*> OutStyleComponent);


// Function  EmbarkConstructable.ConstructableUtils.GetNextAttackEventID
// Offset::0x22D99D0;
int32_t FConstructableUtils::GetNextAttackEventID();


// Function  EmbarkConstructable.ConstructableStyleComponentMixinLibrary.IsStyleComponent
// Offset::0x22D8DA0;
bool FConstructableStyleComponentMixinLibrary::IsStyleComponent(FActorComponent* Style);


// Function  EmbarkConstructable.ConstructableStylePartIDRangeMixinLibrary.GetLastID
// Offset::0x22D9EE0;
int32_t FConstructableStylePartIDRangeMixinLibrary::GetLastID(FConstructablePartIDRange PartIDRange);


// Function  EmbarkConstructable.ConstructableStylePartIDRangeMixinLibrary.IsPartIDInRange
// Offset::0x22D9F90;
bool FConstructableStylePartIDRangeMixinLibrary::IsPartIDInRange(FConstructablePartIDRange PartIDRange,int32_t PartID);


// Function  EmbarkConstructable.ConstructableStylePartIDRangeMixinLibrary.IsValid
// Offset::0x22DA080;
bool FConstructableStylePartIDRangeMixinLibrary::IsValid(FConstructablePartIDRange PartIDRange);


// Function  EmbarkConstructable.ConstructablePartParentInfoMixinLibrary.IsValid
// Offset::0x22DA4B0;
bool FConstructablePartParentInfoMixinLibrary::IsValid(FConstructablePartParentInfo PartParentInfo);


// Function  EmbarkConstructable.EmbarkAbilityTask_ClientSendInteractionTargetData.ClientSendInteractionTargetData
// Offset::0x22DFAA0;
FEmbarkAbilityTask_ClientSendInteractionTargetData* FEmbarkAbilityTask_ClientSendInteractionTargetData::ClientSendInteractionTargetData(FGameplayAbility* OwningAbility,FName TaskInstanceName,FActor* Target,int32_t InteractionIndex,FVector InteractionSourcePoint,bool bHandleInteraction,FComponentOrStyle PrimitiveInteractedWith);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.GetThrusterScalar
// Offset::0x22E0BD0;
float FReplicatedPartForceMovementComponent::GetThrusterScalar(int32_t PartID);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.OnPartDestroyed
// Offset::0x22E0430;
void FReplicatedPartForceMovementComponent::OnPartDestroyed(FConstructableHealthServiceComponent* HealthServiceComponent,FPrimitiveComponent* OwnerStyleComponent,FConstructableDamageData LatestData);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.OnPartDestroyed_Impl
// Offset::0x3D30810;
void FReplicatedPartForceMovementComponent::OnPartDestroyed_Impl(FConstructableHealthServiceComponent* HealthServiceComponent,FPrimitiveComponent* OwnerStyleComponent,FConstructableDamageData LatestData);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.OnPostFullyConstructed
// Offset::0x22E0670;
void FReplicatedPartForceMovementComponent::OnPostFullyConstructed(FConstructableBase* InConstructable);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.OnPostFullyConstructed_Internal
// Offset::0x22E0670;
void FReplicatedPartForceMovementComponent::OnPostFullyConstructed_Internal(FConstructableBase* InConstructable);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.OnRep_ThrusterForceRep
// Offset::0x22E05D0;
void FReplicatedPartForceMovementComponent::OnRep_ThrusterForceRep();


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.OnThrustPartsLoaded
// Offset::0x20F5A20;
void FReplicatedPartForceMovementComponent::OnThrustPartsLoaded();


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.PackTo2bits_Test
// Offset::0x22E09C0;
uint16_t FReplicatedPartForceMovementComponent::PackTo2bits_Test(TArray<char> TruncatedIn);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.SaveScalar
// Offset::0x22E07C0;
bool FReplicatedPartForceMovementComponent::SaveScalar(int32_t Index,float ScalarValue);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.UnpackToNScalars_Test
// Offset::0x22E0A90;
TArray<float> FReplicatedPartForceMovementComponent::UnpackToNScalars_Test(uint16_t InputVal,int32_t NumScalars);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.UpdateNetStateFromPartForceMovementState_Server
// Offset::0x22E02F0;
void FReplicatedPartForceMovementComponent::UpdateNetStateFromPartForceMovementState_Server(FReplicatePartForceMovementNetState* NetState);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.UpdatePartForceMovementStateFromNetState_Client
// Offset::0x22E0390;
void FReplicatedPartForceMovementComponent::UpdatePartForceMovementStateFromNetState_Client(FReplicatePartForceMovementNetState* NetState);


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.UpdateThrusterForceRep
// Offset::0x22E0720;
void FReplicatedPartForceMovementComponent::UpdateThrusterForceRep();


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.ZeroScalarsAndRep
// Offset::0x22E0790;
bool FReplicatedPartForceMovementComponent::ZeroScalarsAndRep();


// Function  EmbarkConstructable.ReplicatedPartForceMovementComponent.ZeroTruncatedScalars
// Offset::0x22E08B0;
void FReplicatedPartForceMovementComponent::ZeroTruncatedScalars();


// Function  EmbarkEngine.ActorWithEditorTick.EditorTick
// Offset::0x3D30810;
void FActorWithEditorTick::EditorTick(float DeltaSeconds);


// Function  Engine.CurveBase.GetTimeRange
// Offset::0x6372F70;
void FCurveBase::GetTimeRange(float MinTime,float MaxTime);


// Function  Engine.CurveBase.GetValueRange
// Offset::0x6372E70;
void FCurveBase::GetValueRange(float MinValue,float MaxValue);


// Function  EmbarkEngine.CurveTranslateRotate.GetTrackValue
// Offset::0x22F87F0;
void FCurveTranslateRotate::GetTrackValue(float InTime,FVector OutTranslation,FVector OutRotation);


// Function  EmbarkEngine.CurveTranslateRotate.UpdateOrAddKey
// Offset::0x22F8620;
void FCurveTranslateRotate::UpdateOrAddKey(enum class ECurveTRTrack Track,float Time,float Value,bool bUnwindRotation,float KeyTimeTolerance);


// Function  EmbarkEngine.CurveTranslateRotate.UpdateOrAddKeys
// Offset::0x22F8490;
void FCurveTranslateRotate::UpdateOrAddKeys(float Time,FTransform Transform,bool bUnwindRotation);


// Function  EmbarkEngine.EmbarkDataAsset.ReceivePreSave
// Offset::0x3D30810;
void FEmbarkDataAsset::ReceivePreSave();


// Function  EmbarkEngine.EmbarkEngineBlueprintLibrary.GetNumPrecompilingPSOsRemaining
// Offset::0x22F90B0;
int32_t FEmbarkEngineBlueprintLibrary::GetNumPrecompilingPSOsRemaining();


// Function  EmbarkEngine.EmbarkEngineBlueprintLibrary.SetPSOPrecompilationBatchMode
// Offset::0x22F90E0;
void FEmbarkEngineBlueprintLibrary::SetPSOPrecompilationBatchMode(enum class EPSOPrecompilationBatchMode InMode);


// Function  EmbarkEngine.LevelInstanceSubsystemMixinLibrary.GetLevelInstanceLevel
// Offset::0x22F9CD0;
FLevel* FLevelInstanceSubsystemMixinLibrary::GetLevelInstanceLevel(FLevelInstanceSubsystem* LevelInstanceSubsystem,FLevelInstance* LevelInstanceActor);


// Function  EmbarkEngine.EmbarkMeshGeneratorComponent.ConstructStaticMeshComponent
// Offset::0x22FA040;
FStaticMeshComponent* FEmbarkMeshGeneratorComponent::ConstructStaticMeshComponent(FStaticMesh* StaticMesh,FMeshComponent* ParentComponent,FName SocketName);


// Function  EmbarkEngine.EmbarkSDFVolumeTextureLibrary.ClearSDFVolumeTexture
// Offset::0x22FA980;
void FEmbarkSDFVolumeTextureLibrary::ClearSDFVolumeTexture(FObject* WorldContextObject,FEmbarkSDFVolumeTexture* Texture,float MaxDistance);


// Function  EmbarkEngine.EmbarkSDFVolumeTextureLibrary.CreateSDFVolumeTexture
// Offset::0x22FAB40;
FEmbarkSDFVolumeTexture* FEmbarkSDFVolumeTextureLibrary::CreateSDFVolumeTexture(FObject* WorldContextObject,FIntVector Size,FBox Bounds);


// Function  EmbarkEngine.EmbarkSDFVolumeTextureLibrary.ReleaseSDFVolumeTexture
// Offset::0x22FAAB0;
void FEmbarkSDFVolumeTextureLibrary::ReleaseSDFVolumeTexture(FEmbarkSDFVolumeTexture* Texture);


// Function  EmbarkEngine.EmbarkSDFVolumeTextureLibrary.WriteBoxToVolumeTexture
// Offset::0x22FA630;
void FEmbarkSDFVolumeTextureLibrary::WriteBoxToVolumeTexture(FObject* WorldContextObject,FEmbarkSDFVolumeTexture* Texture,FVector Origin,double Extent,double Intensity);


// Function  EmbarkEngine.EmbarkSDFVolumeTextureLibrary.WriteSDFSphereToVolumeTexture
// Offset::0x22FA800;
void FEmbarkSDFVolumeTextureLibrary::WriteSDFSphereToVolumeTexture(FObject* WorldContextObject,FEmbarkSDFVolumeTexture* Texture,FVector Origin,double Radius);


// Function  EmbarkEngine.EmbarkSentrySubsystem.OnFeatureFlagsChangedEvent
// Offset::0x22FB110;
void FEmbarkSentrySubsystem::OnFeatureFlagsChangedEvent();


// Function  EmbarkEngine.EmbarkSentrySubsystem.OnPostLoadMapWithWorld
// Offset::0x22FB130;
void FEmbarkSentrySubsystem::OnPostLoadMapWithWorld(FWorld* World);


// Function  EmbarkEngine.EmbarkSentrySubsystem.SetupSentrySettings
// Offset::0x22FB1D0;
void FEmbarkSentrySubsystem::SetupSentrySettings(FSentrySettings* Settings);


// Function  EmbarkEngine.WorldCompositionMixinLibrary.DoesTileExists
// Offset::0x22FBC10;
bool FWorldCompositionMixinLibrary::DoesTileExists(FWorldComposition* WorldComposition,FName PackageName);


// Function  EmbarkEngine.WorldCompositionMixinLibrary.GetAbsolutePosition
// Offset::0x22FBB40;
FIntVector FWorldCompositionMixinLibrary::GetAbsolutePosition(FWorldComposition* WorldComposition,FName PackageName);


// Function  EmbarkEngine.WorldCompositionMixinLibrary.GetDistanceStreamingEnabled
// Offset::0x22FB920;
bool FWorldCompositionMixinLibrary::GetDistanceStreamingEnabled(FWorldComposition* WorldComposition,FName PackageName);


// Function  EmbarkEngine.WorldCompositionMixinLibrary.GetLayerName
// Offset::0x22FBA00;
FString FWorldCompositionMixinLibrary::GetLayerName(FWorldComposition* WorldComposition,FName PackageName);


// Function  EmbarkEngine.WorldCompositionMixinLibrary.GetParentTilePackageName
// Offset::0x22FBA00;
FString FWorldCompositionMixinLibrary::GetParentTilePackageName(FWorldComposition* WorldComposition,FName PackageName);


// Function  EmbarkEngine.WorldCompositionMixinLibrary.GetPosition
// Offset::0x22FBB40;
FIntVector FWorldCompositionMixinLibrary::GetPosition(FWorldComposition* WorldComposition,FName PackageName);


// Function  EmbarkEngine.WorldCompositionMixinLibrary.GetStreamingDistance
// Offset::0x22FB840;
int32_t FWorldCompositionMixinLibrary::GetStreamingDistance(FWorldComposition* WorldComposition,FName PackageName);


// Function  Engine.WorldSettings.OnRep_WorldGravityZ
// Offset::0x21D6F30;
void FWorldSettings::OnRep_WorldGravityZ();


// Function  EmbarkEngine.EmbarkHttpRequestContainer.GetElapsedTime
// Offset::0x22FC4D0;
float FEmbarkHttpRequestContainer::GetElapsedTime();


// Function  EmbarkEngine.EmbarkHttpRequestContainer.GetHeader
// Offset::0x22FC6B0;
FString FEmbarkHttpRequestContainer::GetHeader(FString HeaderName);


// Function  EmbarkEngine.EmbarkHttpRequestContainer.GetHeaders
// Offset::0x22FC7A0;
TArray<FString> FEmbarkHttpRequestContainer::GetHeaders();


// Function  EmbarkEngine.EmbarkHttpRequestContainer.GetUrl
// Offset::0x22FC940;
FString FEmbarkHttpRequestContainer::GetUrl();


// Function  EmbarkEngine.EmbarkHttpRequestContainer.GetVerb
// Offset::0x22FCA70;
FString FEmbarkHttpRequestContainer::GetVerb();


// Function  EmbarkEngine.EmbarkHttpRequestContainer.ProcessRequest
// Offset::0x22FCAF0;
void FEmbarkHttpRequestContainer::ProcessRequest();


// Function  EmbarkEngine.EmbarkHttpRequestContainer.SetHeader
// Offset::0x22FC5B0;
void FEmbarkHttpRequestContainer::SetHeader(FString HeaderName,FString HeaderValue);


// Function  EmbarkEngine.EmbarkHttpRequestContainer.SetPayload
// Offset::0x22FC500;
void FEmbarkHttpRequestContainer::SetPayload(FString Payload);


// Function  EmbarkEngine.EmbarkHttpRequestContainer.SetURL
// Offset::0x22FC890;
void FEmbarkHttpRequestContainer::SetURL(FString NewUrl);


// Function  EmbarkEngine.EmbarkHttpRequestContainer.SetVerb
// Offset::0x22FC9C0;
void FEmbarkHttpRequestContainer::SetVerb(FString NewVerb);


// Function  EmbarkEngine.HttpFunctionLibrary.CreateHttpRequest
// Offset::0x22FD410;
FEmbarkHttpRequestContainer* FHttpFunctionLibrary::CreateHttpRequest(FString AuthorizationToken,FString Verb,FString URL,TArray<FEmbarkHttpParameter> Parameters);


// Function  EmbarkEngine.HttpFunctionLibrary.CreateSimpleHttpRequest
// Offset::0x22FD260;
FEmbarkHttpRequestContainer* FHttpFunctionLibrary::CreateSimpleHttpRequest(FString Verb,FString URL,TArray<FEmbarkHttpParameter> Parameters);


// Function  EmbarkEngine.HttpFunctionLibrary.MakeHttpParameter
// Offset::0x22FD610;
FEmbarkHttpParameter FHttpFunctionLibrary::MakeHttpParameter(FString InParameterKey,FString InParameterValue);


// Function  EmbarkUI.AngularProgressBarBase.OnSynchronizeProperties
// Offset::0x2332A10;
void FAngularProgressBarBase::OnSynchronizeProperties();


// Function  EmbarkUI.EmbarkButtonBaseOld.OnConstruct
// Offset::0x2333620;
void FEmbarkButtonBaseOld::OnConstruct();


// Function  EmbarkUI.EmbarkButtonBaseOld.OnKeyDown
// Offset::0x2333060;
FEventReply FEmbarkButtonBaseOld::OnKeyDown(FGeometry MyGeometry,FKeyEvent InKeyEvent);


// Function  EmbarkUI.EmbarkButtonBaseOld.OnKeyUp
// Offset::0x2332EC0;
FEventReply FEmbarkButtonBaseOld::OnKeyUp(FGeometry MyGeometry,FKeyEvent InKeyEvent);


// Function  EmbarkUI.EmbarkButtonBaseOld.SetPressedSound
// Offset::0x2333200;
void FEmbarkButtonBaseOld::SetPressedSound(FSlateSound InPressedSound);


// Function  EmbarkUI.EmbarkButtonBaseOld.SimulateClick
// Offset::0x1B91E70;
void FEmbarkButtonBaseOld::SimulateClick();


// Function  EmbarkUI.EmbarkButtonBaseOld.SimulateMouseButtonDown
// Offset::0x23332D0;
void FEmbarkButtonBaseOld::SimulateMouseButtonDown();


// Function  EmbarkUI.EmbarkButtonBaseOld.SimulateMouseButtonUp
// Offset::0x23332B0;
void FEmbarkButtonBaseOld::SimulateMouseButtonUp();


// Function  EmbarkUI.EmbarkButtonBaseOld.SimulateMouseEnter
// Offset::0x2333450;
void FEmbarkButtonBaseOld::SimulateMouseEnter(FGeometry MyGeometry,FPointerEvent MouseEvent);


// Function  EmbarkUI.EmbarkButtonBaseOld.SimulateMouseLeave
// Offset::0x23332F0;
void FEmbarkButtonBaseOld::SimulateMouseLeave(FPointerEvent MouseEvent);


// Function  EmbarkUI.EmbarkButtonBase.BuildSoundStyles
// Offset::0x3D30810;
void FEmbarkButtonBase::BuildSoundStyles(FEmbarkButtonSoundStyleBase* InStyle);


// Function  EmbarkUI.EmbarkButtonBase.BuildStyles
// Offset::0x3D30810;
void FEmbarkButtonBase::BuildStyles(FEmbarkButtonStyleBase* InStyle);


// Function  EmbarkUI.EmbarkButtonBase.GetButtonState
// Offset::0x23342D0;
enum class EEmbarkButtonState FEmbarkButtonBase::GetButtonState();


// Function  EmbarkUI.EmbarkButtonBase.GetCurrentButtonStyle
// Offset::0x2334150;
FButtonStyle FEmbarkButtonBase::GetCurrentButtonStyle();


// Function  EmbarkUI.EmbarkButtonBase.GetDisabledButtonStyle
// Offset::0x23341C0;
FButtonStyle FEmbarkButtonBase::GetDisabledButtonStyle();


// Function  EmbarkUI.EmbarkButtonBase.GetIsButtonEnabled
// Offset::0x2334320;
bool FEmbarkButtonBase::GetIsButtonEnabled();


// Function  EmbarkUI.EmbarkButtonBase.GetIsFocusable
// Offset::0x208E8E0;
bool FEmbarkButtonBase::GetIsFocusable();


// Function  EmbarkUI.EmbarkButtonBase.HandleButtonClicked
// Offset::0x23342B0;
void FEmbarkButtonBase::HandleButtonClicked();


// Function  EmbarkUI.EmbarkButtonBase.HandleButtonHovered
// Offset::0x2334290;
void FEmbarkButtonBase::HandleButtonHovered();


// Function  EmbarkUI.EmbarkButtonBase.HandleButtonPressed
// Offset::0x2334250;
void FEmbarkButtonBase::HandleButtonPressed();


// Function  EmbarkUI.EmbarkButtonBase.HandleButtonReleased
// Offset::0x2334230;
void FEmbarkButtonBase::HandleButtonReleased();


// Function  EmbarkUI.EmbarkButtonBase.HandleButtonUnhovered
// Offset::0x2334270;
void FEmbarkButtonBase::HandleButtonUnhovered();


// Function  EmbarkUI.EmbarkButtonBase.IsInteractionEnabled
// Offset::0x23343F0;
bool FEmbarkButtonBase::IsInteractionEnabled();


// Function  EmbarkUI.EmbarkButtonBase.IsPressed
// Offset::0x23345D0;
bool FEmbarkButtonBase::IsPressed();


// Function  EmbarkUI.EmbarkButtonBase.OnButtonStateChanged
// Offset::0x3D30810;
void FEmbarkButtonBase::OnButtonStateChanged(enum class EEmbarkButtonState InButtonState);


// Function  EmbarkUI.EmbarkButtonBase.OnClicked
// Offset::0x3D30810;
void FEmbarkButtonBase::OnClicked();


// Function  EmbarkUI.EmbarkButtonBase.OnDoubleClicked
// Offset::0x3D30810;
void FEmbarkButtonBase::OnDoubleClicked();


// Function  EmbarkUI.EmbarkButtonBase.OnEnabledStateChanged
// Offset::0x3D30810;
void FEmbarkButtonBase::OnEnabledStateChanged(bool bInIsEnabled);


// Function  EmbarkUI.EmbarkButtonBase.OnHovered
// Offset::0x3D30810;
void FEmbarkButtonBase::OnHovered();


// Function  EmbarkUI.EmbarkButtonBase.OnPressed
// Offset::0x3D30810;
void FEmbarkButtonBase::OnPressed();


// Function  EmbarkUI.EmbarkButtonBase.OnReleased
// Offset::0x3D30810;
void FEmbarkButtonBase::OnReleased();


// Function  EmbarkUI.EmbarkButtonBase.OnUnhovered
// Offset::0x3D30810;
void FEmbarkButtonBase::OnUnhovered();


// Function  EmbarkUI.EmbarkButtonBase.SetClickMethod
// Offset::0x2334540;
void FEmbarkButtonBase::SetClickMethod(enum class EButtonClickMethod InClickMethod);


// Function  EmbarkUI.EmbarkButtonBase.SetIsFocusable
// Offset::0x2334350;
void FEmbarkButtonBase::SetIsFocusable(bool bInIsFocusable);


// Function  EmbarkUI.EmbarkButtonBase.SetPressMethod
// Offset::0x2334420;
void FEmbarkButtonBase::SetPressMethod(enum class EButtonPressMethod InPressMethod);


// Function  EmbarkUI.EmbarkButtonBase.SetTouchMethod
// Offset::0x23344B0;
void FEmbarkButtonBase::SetTouchMethod(enum class EButtonTouchMethod InTouchMethod);


// Function  EmbarkUI.EmbarkButtonBase.TempGetNormalButtonStyle
// Offset::0x2333F60;
FButtonStyle FEmbarkButtonBase::TempGetNormalButtonStyle();


// Function  EmbarkUI.EmbarkButtonBase.UpdateCurrentButtonStyle
// Offset::0x2334300;
void FEmbarkButtonBase::UpdateCurrentButtonStyle();


// Function  EmbarkUI.EmbarkButtonSoundStyleBase.GetButtonSoundStyle
// Offset::0x2337000;
FEmbarkButtonSoundStyleBase* FEmbarkButtonSoundStyleBase::GetButtonSoundStyle(FEmbarkButtonSoundStyleBase* InButtonSoundStyle);


// Function  EmbarkUI.EmbarkButtonStyleBase.GetButtonStyle
// Offset::0x2337710;
FEmbarkButtonStyleBase* FEmbarkButtonStyleBase::GetButtonStyle(FEmbarkButtonStyleBase* InButtonStyle);


// Function  EmbarkUI.EmbarkButtonStyleBase.GetDisabledBrush
// Offset::0x23372D0;
FSlateBrush FEmbarkButtonStyleBase::GetDisabledBrush();


// Function  EmbarkUI.EmbarkButtonStyleBase.GetNormalBaseBrush
// Offset::0x2337600;
FSlateBrush FEmbarkButtonStyleBase::GetNormalBaseBrush();


// Function  EmbarkUI.EmbarkButtonStyleBase.GetNormalHighlightBrush
// Offset::0x23374F0;
FSlateBrush FEmbarkButtonStyleBase::GetNormalHighlightBrush();


// Function  EmbarkUI.EmbarkButtonStyleBase.GetNormalPressedBrush
// Offset::0x23373E0;
FSlateBrush FEmbarkButtonStyleBase::GetNormalPressedBrush();


// Function  EmbarkUI.EmbarkCommonActionWidget.SetInputActionColor
// Offset::0x23386A0;
void FEmbarkCommonActionWidget::SetInputActionColor(FLinearColor Color,FLinearColor TextColor);


// Function  EmbarkUI.EmbarkCommonActivatableWidgetBase.HandleBackAction
// Offset::0x2338B70;
void FEmbarkCommonActivatableWidgetBase::HandleBackAction();


// Function  EmbarkUI.EmbarkCommonActivatableWidgetBase.RequestFocus
// Offset::0x2338B90;
void FEmbarkCommonActivatableWidgetBase::RequestFocus();


// Function  EmbarkUI.EmbarkCommonActivatableWidgetStack.GetAllWidgets
// Offset::0x2338FA0;
TArray<FCommonActivatableWidget*> FEmbarkCommonActivatableWidgetStack::GetAllWidgets();


// Function  EmbarkUI.EmbarkCommonButtonBase.AddInputActionBinding
// Offset::0x2339670;
void FEmbarkCommonButtonBase::AddInputActionBinding(FDataTableRowHandle InLegacyActionTableRow,FDelegate Callback,bool bInDisplayInActionBar);


// Function  EmbarkUI.EmbarkCommonButtonBase.OnEmbarkButtonPressed
// Offset::0x3D30810;
void FEmbarkCommonButtonBase::OnEmbarkButtonPressed();


// Function  EmbarkUI.EmbarkCommonButtonBase.OnEmbarkButtonReleased
// Offset::0x3D30810;
void FEmbarkCommonButtonBase::OnEmbarkButtonReleased();


// Function  EmbarkUI.EmbarkCommonButtonBase.RemoveInputActionBinding
// Offset::0x23395C0;
void FEmbarkCommonButtonBase::RemoveInputActionBinding(FDataTableRowHandle InLegacyActionTableRow);


// Function  EmbarkUI.EmbarkCommonButtonBase.SimulateClick
// Offset::0x1B91E70;
void FEmbarkCommonButtonBase::SimulateClick();


// Function  EmbarkUI.EmbarkCommonGameViewportClient.AddExcludedKey
// Offset::0x233A0B0;
void FEmbarkCommonGameViewportClient::AddExcludedKey(FKey Key);


// Function  EmbarkUI.EmbarkCommonGameViewportClient.ResetExcludedKeys
// Offset::0x233A090;
void FEmbarkCommonGameViewportClient::ResetExcludedKeys();


// Function  EmbarkUI.EmbarkCommonGameViewportClientBlueprintLibrary.GetViewportClient
// Offset::0x233A560;
FEmbarkCommonGameViewportClient* FEmbarkCommonGameViewportClientBlueprintLibrary::GetViewportClient();


// Function  EmbarkUI.EmbarkCommonTabListWidgetBase.GetActiveTabContent
// Offset::0x233A9A0;
FCommonUserWidget* FEmbarkCommonTabListWidgetBase::GetActiveTabContent();


// Function  EmbarkUI.EmbarkCommonTabListWidgetBase.GetRegisteredStaticTab
// Offset::0x233AAE0;
bool FEmbarkCommonTabListWidgetBase::GetRegisteredStaticTab(FName TabNameID,FEmbarkTabDescriptor OutTabInfo);


// Function  EmbarkUI.EmbarkCommonTabListWidgetBase.HandleTabContentCreation
// Offset::0x233A8B0;
void FEmbarkCommonTabListWidgetBase::HandleTabContentCreation(FName TabNameID,FCommonUserWidget* TabWidget);


// Function  EmbarkUI.EmbarkCommonTabListWidgetBase.RegisterDynamicTab
// Offset::0x233A9D0;
bool FEmbarkCommonTabListWidgetBase::RegisterDynamicTab(FEmbarkTabDescriptor TabDescriptor);


// Function  EmbarkUI.EmbarkCommonTabListWidgetBase.SetupTabs
// Offset::0x233AC40;
void FEmbarkCommonTabListWidgetBase::SetupTabs();


// Function  EmbarkUI.EmbarkImageBase.OnConstruct
// Offset::0x233B350;
void FEmbarkImageBase::OnConstruct();


// Function  EmbarkUI.EmbarkInputBindingCallbackWrapper.ExecuteASCallback
// Offset::0x233B800;
void FEmbarkInputBindingCallbackWrapper::ExecuteASCallback();


// Function  EmbarkUI.EmbarkInputKeySelectorBase.OnConstruct
// Offset::0x233BA10;
void FEmbarkInputKeySelectorBase::OnConstruct();


// Function  EmbarkUI.EmbarkInputKeySelectorBase.OnSynchronizeProperties
// Offset::0x233B9F0;
void FEmbarkInputKeySelectorBase::OnSynchronizeProperties();


// Function  EmbarkUI.EmbarkListView.SetEntrySpacing
// Offset::0x2096DF0;
void FEmbarkListView::SetEntrySpacing(float InEntrySpacing);


// Function  EmbarkUI.EmbarkLoadingScreenSubsystem.BeginLoadingScreen
// Offset::0x17AE990;
void FEmbarkLoadingScreenSubsystem::BeginLoadingScreen(FString InMapName);


// Function  EmbarkUI.EmbarkLoadingScreenSubsystem.EndLoadingScreen
// Offset::0x233C950;
void FEmbarkLoadingScreenSubsystem::EndLoadingScreen(FWorld* InLoadedWorld);


// Function  EmbarkUI.EmbarkLoadingScreenSubsystem.HideWidgetLoadingScreen
// Offset::0x233C7E0;
void FEmbarkLoadingScreenSubsystem::HideWidgetLoadingScreen();


// Function  EmbarkUI.EmbarkLoadingScreenSubsystem.OnPostLoadWorldLoadCallback
// Offset::0x233C400;
void FEmbarkLoadingScreenSubsystem::OnPostLoadWorldLoadCallback(FWorld* InWorld);


// Function  EmbarkUI.EmbarkLoadingScreenSubsystem.OnPreloadContentUrlCallback
// Offset::0x233C4A0;
void FEmbarkLoadingScreenSubsystem::OnPreloadContentUrlCallback(FURL InUrl);


// Function  EmbarkUI.EmbarkLoadingScreenSubsystem.SetAutoStopLoadingScreen
// Offset::0x233C740;
void FEmbarkLoadingScreenSubsystem::SetAutoStopLoadingScreen(bool bInAutoStop);


// Function  EmbarkUI.EmbarkLoadingScreenSubsystem.SetCanInterruptLoadingScreen
// Offset::0x233C6A0;
void FEmbarkLoadingScreenSubsystem::SetCanInterruptLoadingScreen(bool bInCanInterrupt);


// Function  EmbarkUI.EmbarkLoadingScreenSubsystem.SetNextLoadingScreen
// Offset::0x233C5F0;
void FEmbarkLoadingScreenSubsystem::SetNextLoadingScreen(FName Tag);


// Function  EmbarkUI.EmbarkLoadingScreenSubsystem.ShowLoadingScreen
// Offset::0x233C8A0;
void FEmbarkLoadingScreenSubsystem::ShowLoadingScreen(FString InMapName);


// Function  EmbarkUI.EmbarkLoadingScreenSubsystem.ShowWidgetLoadingScreen
// Offset::0x233C800;
void FEmbarkLoadingScreenSubsystem::ShowWidgetLoadingScreen(FUserWidget* Widget);


// Function  EmbarkUI.EmbarkMaterialBox.GetEffectMaterial
// Offset::0x233F390;
FMaterialInstanceDynamic* FEmbarkMaterialBox::GetEffectMaterial(char Index);


// Function  EmbarkUI.EmbarkMaterialBox.SetEffectMaterial
// Offset::0x233F2B0;
void FEmbarkMaterialBox::SetEffectMaterial(FMaterialInterface* EffectMaterial,char Index);


// Function  EmbarkUI.EmbarkMaterialBox.SetRenderToTexture
// Offset::0x233F170;
void FEmbarkMaterialBox::SetRenderToTexture(bool bInRenderToTexture);


// Function  EmbarkUI.EmbarkMaterialBox.SetTextureParameter
// Offset::0x233F210;
void FEmbarkMaterialBox::SetTextureParameter(FName TextureParameter);


// Function  EmbarkUI.EmbarkUserWidget.BP_GetDesiredFocusTarget
// Offset::0x3D30810;
FWidget* FEmbarkUserWidget::BP_GetDesiredFocusTarget();


// Function  EmbarkUI.EmbarkUserWidget.GetCurrentFocus
// Offset::0x3D30810;
FWidget* FEmbarkUserWidget::GetCurrentFocus();


// Function  EmbarkUI.EmbarkUserWidget.RenameInputComponent
// Offset::0x2344A30;
void FEmbarkUserWidget::RenameInputComponent(FString NewName);


// Function  EmbarkUI.EmbarkModalWidget.MakeInputActionBlocking
// Offset::0x233F850;
void FEmbarkModalWidget::MakeInputActionBlocking();


// Function  EmbarkUI.EmbarkModalWidget.NavigateDown
// Offset::0x233F9B0;
FWidget* FEmbarkModalWidget::NavigateDown(enum class EUINavigation InNavigation);


// Function  EmbarkUI.EmbarkModalWidget.NavigateLeft
// Offset::0x233F870;
FWidget* FEmbarkModalWidget::NavigateLeft(enum class EUINavigation InNavigation);


// Function  EmbarkUI.EmbarkModalWidget.NavigateRight
// Offset::0x233F910;
FWidget* FEmbarkModalWidget::NavigateRight(enum class EUINavigation InNavigation);


// Function  EmbarkUI.EmbarkModalWidget.NavigateUp
// Offset::0x233FA50;
FWidget* FEmbarkModalWidget::NavigateUp(enum class EUINavigation InNavigation);


// Function  EmbarkUI.EmbarkOverlayingContainer.IsOverlaying
// Offset::0x23400F0;
bool FEmbarkOverlayingContainer::IsOverlaying();


// Function  EmbarkUI.EmbarkOverlayingContainer.SetOverlayingState
// Offset::0x2340120;
void FEmbarkOverlayingContainer::SetOverlayingState(bool bInIsHovered);


// Function  EmbarkUI.EmbarkRichTextBlockColorDecorator.GetColorForId
// Offset::0x3D30810;
FLinearColor FEmbarkRichTextBlockColorDecorator::GetColorForId(FString ColorKey);


// Function  EmbarkUI.EmbarkRichTextBlockIconImageDecorator.CheckForText
// Offset::0x3D30810;
bool FEmbarkRichTextBlockIconImageDecorator::CheckForText(FName Tag,FText ResultText);


// Function  EmbarkUI.EmbarkRichTextBlockIconImageDecorator.GetInputActionIcon
// Offset::0x3D30810;
FTexture2D* FEmbarkRichTextBlockIconImageDecorator::GetInputActionIcon(FName Tag);


// Function  EmbarkUI.EmbarkSavingIndicatorSubsystem.BeginSave
// Offset::0x179DDF0;
void FEmbarkSavingIndicatorSubsystem::BeginSave();


// Function  EmbarkUI.EmbarkSavingIndicatorSubsystem.EndSave
// Offset::0x17A1E00;
void FEmbarkSavingIndicatorSubsystem::EndSave();


// Function  EmbarkUI.EmbarkScrollBoxBase.OnConstruct
// Offset::0x2341800;
void FEmbarkScrollBoxBase::OnConstruct();


// Function  EmbarkUI.EmbarkScrollBoxBase.OnSynchronizeProperties
// Offset::0x2333620;
void FEmbarkScrollBoxBase::OnSynchronizeProperties();


// Function  EmbarkUI.EmbarkScrollBoxBase.SetAllowRightClickDragScrolling
// Offset::0x2341820;
void FEmbarkScrollBoxBase::SetAllowRightClickDragScrolling(bool bInAllowRightClickDragScrolling);


// Function  EmbarkUI.EmbarkScrollBoxBase.UpdateFullScrollbarStyle
// Offset::0x2341560;
void FEmbarkScrollBoxBase::UpdateFullScrollbarStyle(FScrollBarStyle TrackBrush);


// Function  EmbarkUI.EmbarkScrollBoxBase.UpdateScrollbarStyle
// Offset::0x2341620;
void FEmbarkScrollBoxBase::UpdateScrollbarStyle(FSlateBrush ForegroundBrush,FSlateBrush BackgroundBrush,int32_t Thickness);


// Function  EmbarkUI.EmbarkScrollBoxBase.UpdateStyle
// Offset::0x2341290;
void FEmbarkScrollBoxBase::UpdateStyle(FSlateBrush BottomShadowBrush,FSlateBrush LeftShadowBrush,FSlateBrush RightShadowBrush,FSlateBrush TopShadowBrush);


// Function  EmbarkUI.EmbarkSubtitleWidget.OnSetSubtitleText
// Offset::0x23421F0;
void FEmbarkSubtitleWidget::OnSetSubtitleText(FText InSubtitleText);


// Function  EmbarkUI.EmbarkSubtitleWidget.OnSetSubtitleTextChanged
// Offset::0x3D30810;
void FEmbarkSubtitleWidget::OnSetSubtitleTextChanged(FText InSubtitleText);


// Function  EmbarkUI.EmbarkText3DActor.GetText
// Offset::0x23428A0;
FText FEmbarkText3DActor::GetText();


// Function  EmbarkUI.EmbarkText3DActor.OnTextGenerated
// Offset::0x2342880;
void FEmbarkText3DActor::OnTextGenerated();


// Function  EmbarkUI.EmbarkText3DActor.SetText
// Offset::0x2342920;
void FEmbarkText3DActor::SetText(FText Text);


// Function  EmbarkUI.EmbarkTextBlockBase.GetNativeColor
// Offset::0x2342E30;
FSlateColor FEmbarkTextBlockBase::GetNativeColor();


// Function  EmbarkUI.EmbarkTextBlockBase.OnConstruct
// Offset::0x2341800;
void FEmbarkTextBlockBase::OnConstruct();


// Function  EmbarkUI.EmbarkTextBlockBase.OnSynchronizeProperties
// Offset::0x2333620;
void FEmbarkTextBlockBase::OnSynchronizeProperties();


// Function  EmbarkUI.EmbarkTextBlockBase.ResetCompleteScrollState
// Offset::0x2342F50;
void FEmbarkTextBlockBase::ResetCompleteScrollState();


// Function  EmbarkUI.EmbarkTextBlockBase.SetColorAndOpacityDelegate
// Offset::0x2342E90;
void FEmbarkTextBlockBase::SetColorAndOpacityDelegate(FDelegate InDelegate);


// Function  EmbarkUI.EmbarkTextBlockBase.SetColorBinding
// Offset::0x2342F70;
void FEmbarkTextBlockBase::SetColorBinding();


// Function  EmbarkUI.EmbarkTextBlockBase.SetLineHeight
// Offset::0x2342F90;
void FEmbarkTextBlockBase::SetLineHeight(float InLineHeightPercentage);


// Function  EmbarkUI.EmbarkUIRenderUtils.MeasureText
// Offset::0x2343D30;
FVector2D FEmbarkUIRenderUtils::MeasureText(FText Text,FSlateFontInfo Font);


// Function  EmbarkUI.EmbarkUIRenderUtils.RenderWidgetToRenderTarget
// Offset::0x2343C00;
void FEmbarkUIRenderUtils::RenderWidgetToRenderTarget(FUserWidget* Widget,FTextureRenderTarget2D* RenderTarget,float DeltaTime);


// Function  EmbarkUI.EmbarkUIRenderUtils.ResizeRenderTarget
// Offset::0x2343AD0;
void FEmbarkUIRenderUtils::ResizeRenderTarget(FTextureRenderTarget2D* RenderTarget,int32_t Width,int32_t Height);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.ClearContext
// Offset::0x2349790;
void FIEmbarkViewDataSubsystem::ClearContext(enum class EUIDataContext Context);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.CreateViewData
// Offset::0x2349A40;
FEmbarkViewData* FIEmbarkViewDataSubsystem::CreateViewData(enum class EUIDataContext Context,int32_t ID,FEmbarkViewData* ViewDataClass);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.GetViewData
// Offset::0x2349900;
bool FIEmbarkViewDataSubsystem::GetViewData(enum class EUIDataContext Context,int32_t ID,FEmbarkViewData* OutViewData);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.GetViewDataFloatProperty
// Offset::0x2348DC0;
bool FIEmbarkViewDataSubsystem::GetViewDataFloatProperty(enum class EUIDataContext Context,int32_t ID,FName PropertyName,float OutValue);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.GetViewDataIntProperty
// Offset::0x2348F60;
bool FIEmbarkViewDataSubsystem::GetViewDataIntProperty(enum class EUIDataContext Context,int32_t ID,FName PropertyName,int32_t OutValue);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.GetViewDataStringProperty
// Offset::0x2348A30;
bool FIEmbarkViewDataSubsystem::GetViewDataStringProperty(enum class EUIDataContext Context,int32_t ID,FName PropertyName,FString OutValue);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.GetViewDataTextProperty
// Offset::0x2348BE0;
bool FIEmbarkViewDataSubsystem::GetViewDataTextProperty(enum class EUIDataContext Context,int32_t ID,FName PropertyName,FText OutValue);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.RemoveViewData
// Offset::0x2349820;
void FIEmbarkViewDataSubsystem::RemoveViewData(enum class EUIDataContext Context,int32_t ID);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.SetViewDataFloatProperty
// Offset::0x2349470;
void FIEmbarkViewDataSubsystem::SetViewDataFloatProperty(enum class EUIDataContext Context,int32_t ID,FName PropertyName,float Value);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.SetViewDataIntProperty
// Offset::0x2349600;
void FIEmbarkViewDataSubsystem::SetViewDataIntProperty(enum class EUIDataContext Context,int32_t ID,FName PropertyName,int32_t Value);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.SetViewDataStringProperty
// Offset::0x2349100;
void FIEmbarkViewDataSubsystem::SetViewDataStringProperty(enum class EUIDataContext Context,int32_t ID,FName PropertyName,FString Value);


// Function  EmbarkUI.IEmbarkViewDataSubsystem.SetViewDataTextProperty
// Offset::0x23492A0;
void FIEmbarkViewDataSubsystem::SetViewDataTextProperty(enum class EUIDataContext Context,int32_t ID,FName PropertyName,FText Value);


// Function  UMG.Viewport.GetViewLocation
// Offset::0x573B0D0;
FVector FViewport::GetViewLocation();


// Function  UMG.Viewport.GetViewportWorld
// Offset::0x573B130;
FWorld* FViewport::GetViewportWorld();


// Function  UMG.Viewport.GetViewRotation
// Offset::0x573AFD0;
FRotator FViewport::GetViewRotation();


// Function  UMG.Viewport.SetViewLocation
// Offset::0x573B030;
void FViewport::SetViewLocation(FVector Location);


// Function  UMG.Viewport.SetViewRotation
// Offset::0x573AF30;
void FViewport::SetViewRotation(FRotator Rotation);


// Function  UMG.Viewport.Spawn
// Offset::0x573AE90;
FActor* FViewport::Spawn(FActor* ActorClass);


// Function  WebBrowserWidget.WebBrowser.ExecuteJavascript
// Offset::0x2EBB580;
void FWebBrowser::ExecuteJavascript(FString ScriptText);


// Function  WebBrowserWidget.WebBrowser.GetTitleText
// Offset::0x2EBB4F0;
FText FWebBrowser::GetTitleText();


// Function  WebBrowserWidget.WebBrowser.GetUrl
// Offset::0x2EBB470;
FString FWebBrowser::GetUrl();


// Function  WebBrowserWidget.WebBrowser.LoadString
// Offset::0x2EBB630;
void FWebBrowser::LoadString(FString Contents,FString DummyURL);


// Function  WebBrowserWidget.WebBrowser.LoadURL
// Offset::0x2EBB7C0;
void FWebBrowser::LoadURL(FString NewUrl);


// Function  EmbarkUI.EmbarkWidgetBlueprintLibrary.GetGPUUtilizationPercent
// Offset::0x234A730;
float FEmbarkWidgetBlueprintLibrary::GetGPUUtilizationPercent();


// Function  EmbarkUI.EmbarkWidgetBlueprintLibrary.GetPerformanceOverlayStats
// Offset::0x234A760;
FPerformanceOverlayStats FEmbarkWidgetBlueprintLibrary::GetPerformanceOverlayStats();


// Function  EmbarkUI.EmbarkWidgetBlueprintLibrary.SetInputMode_GameOnly_WithoutForceFocus
// Offset::0x234A7C0;
void FEmbarkWidgetBlueprintLibrary::SetInputMode_GameOnly_WithoutForceFocus(FPlayerController* PlayerController);


// Function  UMG.WidgetComponent.GetCurrentDrawSize
// Offset::0x5748130;
FVector2D FWidgetComponent::GetCurrentDrawSize();


// Function  UMG.WidgetComponent.GetCylinderArcAngle
// Offset::0x5747940;
float FWidgetComponent::GetCylinderArcAngle();


// Function  UMG.WidgetComponent.GetDrawAtDesiredSize
// Offset::0x5747C60;
bool FWidgetComponent::GetDrawAtDesiredSize();


// Function  UMG.WidgetComponent.GetDrawSize
// Offset::0x5748180;
FVector2D FWidgetComponent::GetDrawSize();


// Function  UMG.WidgetComponent.GetGeometryMode
// Offset::0x57479F0;
enum class EWidgetGeometryMode FWidgetComponent::GetGeometryMode();


// Function  UMG.WidgetComponent.GetManuallyRedraw
// Offset::0x50486D0;
bool FWidgetComponent::GetManuallyRedraw();


// Function  UMG.WidgetComponent.GetMaterialInstance
// Offset::0x5748410;
FMaterialInstanceDynamic* FWidgetComponent::GetMaterialInstance();


// Function  UMG.WidgetComponent.GetOwnerPlayer
// Offset::0x57481D0;
FLocalPlayer* FWidgetComponent::GetOwnerPlayer();


// Function  UMG.WidgetComponent.GetPivot
// Offset::0x5747D30;
FVector2D FWidgetComponent::GetPivot();


// Function  UMG.WidgetComponent.GetRedrawTime
// Offset::0x5747B90;
float FWidgetComponent::GetRedrawTime();


// Function  UMG.WidgetComponent.GetRenderTarget
// Offset::0x5748440;
FTextureRenderTarget2D* FWidgetComponent::GetRenderTarget();


// Function  UMG.WidgetComponent.GetTickWhenOffscreen
// Offset::0x5747F50;
bool FWidgetComponent::GetTickWhenOffscreen();


// Function  UMG.WidgetComponent.GetTwoSided
// Offset::0x5748020;
bool FWidgetComponent::GetTwoSided();


// Function  UMG.WidgetComponent.GetUserWidgetObject
// Offset::0x5748470;
FUserWidget* FWidgetComponent::GetUserWidgetObject();


// Function  UMG.WidgetComponent.GetWidget
// Offset::0x57483E0;
FUserWidget* FWidgetComponent::GetWidget();


// Function  UMG.WidgetComponent.GetWidgetSpace
// Offset::0x5747AB0;
enum class EWidgetSpace FWidgetComponent::GetWidgetSpace();


// Function  UMG.WidgetComponent.GetWindowFocusable
// Offset::0x5747860;
bool FWidgetComponent::GetWindowFocusable();


// Function  UMG.WidgetComponent.GetWindowVisiblility
// Offset::0x5747790;
enum class EWindowVisibility FWidgetComponent::GetWindowVisiblility();


// Function  UMG.WidgetComponent.IsWidgetVisible
// Offset::0x5747640;
bool FWidgetComponent::IsWidgetVisible();


// Function  UMG.WidgetComponent.RequestRedraw
// Offset::0x5748070;
void FWidgetComponent::RequestRedraw();


// Function  UMG.WidgetComponent.RequestRenderUpdate
// Offset::0x5748050;
void FWidgetComponent::RequestRenderUpdate();


// Function  UMG.WidgetComponent.SetBackgroundColor
// Offset::0x5747E00;
void FWidgetComponent::SetBackgroundColor(FLinearColor NewBackgroundColor);


// Function  UMG.WidgetComponent.SetCylinderArcAngle
// Offset::0x5747890;
void FWidgetComponent::SetCylinderArcAngle(float InCylinderArcAngle);


// Function  UMG.WidgetComponent.SetDrawAtDesiredSize
// Offset::0x5747BC0;
void FWidgetComponent::SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);


// Function  UMG.WidgetComponent.SetDrawSize
// Offset::0x5748090;
void FWidgetComponent::SetDrawSize(FVector2D Size);


// Function  UMG.WidgetComponent.SetGeometryMode
// Offset::0x5747960;
void FWidgetComponent::SetGeometryMode(enum class EWidgetGeometryMode InGeometryMode);


// Function  UMG.WidgetComponent.SetManuallyRedraw
// Offset::0x5748200;
void FWidgetComponent::SetManuallyRedraw(bool bUseManualRedraw);


// Function  UMG.WidgetComponent.SetOwnerPlayer
// Offset::0x57482A0;
void FWidgetComponent::SetOwnerPlayer(FLocalPlayer* LocalPlayer);


// Function  UMG.WidgetComponent.SetPivot
// Offset::0x5747C80;
void FWidgetComponent::SetPivot(FVector2D InPivot);


// Function  UMG.WidgetComponent.SetRedrawTime
// Offset::0x5747AE0;
void FWidgetComponent::SetRedrawTime(float InRedrawTime);


// Function  UMG.WidgetComponent.SetTickMode
// Offset::0x5747670;
void FWidgetComponent::SetTickMode(enum class ETickMode InTickMode);


// Function  UMG.WidgetComponent.SetTickWhenOffscreen
// Offset::0x5747EA0;
void FWidgetComponent::SetTickWhenOffscreen(bool bWantTickWhenOffscreen);


// Function  UMG.WidgetComponent.SetTintColorAndOpacity
// Offset::0x5747D60;
void FWidgetComponent::SetTintColorAndOpacity(FLinearColor NewTintColorAndOpacity);


// Function  UMG.WidgetComponent.SetTwoSided
// Offset::0x5747F80;
void FWidgetComponent::SetTwoSided(bool bWantTwoSided);


// Function  UMG.WidgetComponent.SetWidget
// Offset::0x5748340;
void FWidgetComponent::SetWidget(FUserWidget* Widget);


// Function  UMG.WidgetComponent.SetWidgetSpace
// Offset::0x5747A10;
void FWidgetComponent::SetWidgetSpace(enum class EWidgetSpace NewSpace);


// Function  UMG.WidgetComponent.SetWindowFocusable
// Offset::0x57477C0;
void FWidgetComponent::SetWindowFocusable(bool bInWindowFocusable);


// Function  UMG.WidgetComponent.SetWindowVisibility
// Offset::0x5747700;
void FWidgetComponent::SetWindowVisibility(enum class EWindowVisibility InVisibility);


// Function  EmbarkUI.QRCodeGeneratorLibrary.GenerateQRCode
// Offset::0x234AD20;
FTexture2D* FQRCodeGeneratorLibrary::GenerateQRCode(FString TextToEncode,bool bTransparent);


// Function  EmbarkUI.RenderOnTopContentContainer.SetActive
// Offset::0x234B090;
void FRenderOnTopContentContainer::SetActive(bool bActive);


// Function  EmbarkUI.UIAnimationState.IsAnimationOngoing
// Offset::0x234B580;
bool FUIAnimationState::IsAnimationOngoing();


// Function  EmbarkUI.UIAnimationState.ShouldApplyAnimation
// Offset::0x20074E0;
bool FUIAnimationState::ShouldApplyAnimation();


// Function  EmbarkUI.UIAnimationParticipantContainer.AnimationComplete
// Offset::0x3D30810;
void FUIAnimationParticipantContainer::AnimationComplete();


// Function  EmbarkUI.UIAnimationParticipantContainer.AnimationStart
// Offset::0x3D30810;
void FUIAnimationParticipantContainer::AnimationStart();


// Function  EmbarkUI.UIAnimationParticipantContainer.GlobalAnimationComplete
// Offset::0x3D30810;
void FUIAnimationParticipantContainer::GlobalAnimationComplete();


// Function  EmbarkUI.UIAnimationParticipantContainer.GlobalAnimationStart
// Offset::0x3D30810;
void FUIAnimationParticipantContainer::GlobalAnimationStart();


// Function  EmbarkUI.UIAnimationParticipantContainer.PreTickAnimation
// Offset::0x3D30810;
void FUIAnimationParticipantContainer::PreTickAnimation(bool bIsAnimating,float AnimationProgress);


// Function  EmbarkUI.UIAnimationParticipantContainer.TickAnimation
// Offset::0x3D30810;
void FUIAnimationParticipantContainer::TickAnimation(FUIAnimationTickParameter Parameter);


// Function  EmbarkUI.UIAnimationDriverContainer.IsAnimating
// Offset::0x234C870;
bool FUIAnimationDriverContainer::IsAnimating();


// Function  EmbarkUI.UIAnimationDriverContainer.PopulateStateDistance
// Offset::0x234C8A0;
void FUIAnimationDriverContainer::PopulateStateDistance(TArray<FUIAnimationState*> States,FGeometry ContainerGeometry);


// Function  EmbarkUI.UIAnimationDriverContainer.StartAnimation
// Offset::0x234C9E0;
void FUIAnimationDriverContainer::StartAnimation();


// Function  EmbarkUI.UIAnimationDriverContainer.StopAnimation
// Offset::0x234C9C0;
void FUIAnimationDriverContainer::StopAnimation();


// Function  EmbarkUI.UIMetaDataItem.GetDebugDisplayName
// Offset::0x234D2E0;
FString FUIMetaDataItem::GetDebugDisplayName();


// Function  EmbarkUI.UIMetaDataItem.GetKey
// Offset::0x234D360;
int64_t FUIMetaDataItem::GetKey();


// Function  EmbarkUI.IUIMetaDataRepository.GetItemByKey
// Offset::0x234DA50;
FUIMetaDataItem* FIUIMetaDataRepository::GetItemByKey(FObject* ItemClass,int64_t Key);


// Function  EmbarkUI.IUIMetaDataRepository.Initialize
// Offset::0x1A7E910;
void FIUIMetaDataRepository::Initialize();


// Function  EmbarkUI.IUIMetaDataRepository.IsInitialized
// Offset::0x1A7E930;
bool FIUIMetaDataRepository::IsInitialized();


// Function  EmbarkUI.IUIMetaDataRepository.Uninitialize
// Offset::0x20E8030;
void FIUIMetaDataRepository::Uninitialize();


// Function  EmbarkUI.UISimpleAnimationContainer.PlayExitAnimation
// Offset::0x234E4D0;
void FUISimpleAnimationContainer::PlayExitAnimation();


// Function  EmbarkUI.UISimpleAnimationContainer.RestartAnimation
// Offset::0x234E4F0;
void FUISimpleAnimationContainer::RestartAnimation();


// Function  EmbarkUI.WatermarkBaseWidget.SetPath
// Offset::0x234E8C0;
void FWatermarkBaseWidget::SetPath(FString InPath);


// Function  EmbarkAnimationRuntime.AnimNotify_EmbarkPlaySound.PlaySound
// Offset::0x2372BF0;
void FAnimNotify_EmbarkPlaySound::PlaySound(FSkeletalMeshComponent* MeshComp,FAnimSequenceBase* Animation);


// Function  Engine.AnimationAsset.GetPlayLength
// Offset::0x2E323B0;
float FAnimationAsset::GetPlayLength();


// Function  Engine.AnimInstance.BlueprintBeginPlay
// Offset::0x3D30810;
void FAnimInstance::BlueprintBeginPlay();


// Function  Engine.AnimInstance.BlueprintInitializeAnimation
// Offset::0x3D30810;
void FAnimInstance::BlueprintInitializeAnimation();


// Function  Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized
// Offset::0x3D30810;
void FAnimInstance::BlueprintLinkedAnimationLayersInitialized();


// Function  Engine.AnimInstance.BlueprintPostEvaluateAnimation
// Offset::0x3D30810;
void FAnimInstance::BlueprintPostEvaluateAnimation();


// Function  Engine.AnimInstance.BlueprintThreadSafeUpdateAnimation
// Offset::0x3D30810;
void FAnimInstance::BlueprintThreadSafeUpdateAnimation(float DeltaTime);


// Function  Engine.AnimInstance.BlueprintUpdateAnimation
// Offset::0x3D30810;
void FAnimInstance::BlueprintUpdateAnimation(float DeltaTimeX);


// Function  Engine.AnimInstance.CalculateDirection
// Offset::0x630B1E0;
float FAnimInstance::CalculateDirection(FVector Velocity,FRotator BaseRotation);


// Function  Engine.AnimInstance.ClearMorphTargets
// Offset::0x630B2E0;
void FAnimInstance::ClearMorphTargets();


// Function  Engine.AnimInstance.GetActiveCurveNames
// Offset::0x630B540;
void FAnimInstance::GetActiveCurveNames(enum class EAnimCurveType CurveType,TArray<FName> OutNames);


// Function  Engine.AnimInstance.GetAllCurveNames
// Offset::0x630B490;
void FAnimInstance::GetAllCurveNames(TArray<FName> OutNames);


// Function  Engine.AnimInstance.GetCurrentActiveMontage
// Offset::0x630D810;
FAnimMontage* FAnimInstance::GetCurrentActiveMontage();


// Function  Engine.AnimInstance.GetCurrentStateName
// Offset::0x630B3E0;
FName FAnimInstance::GetCurrentStateName(int32_t MachineIndex);


// Function  Engine.AnimInstance.GetCurveValue
// Offset::0x630B640;
float FAnimInstance::GetCurveValue(FName CurveName);


// Function  Engine.AnimInstance.GetDeltaSeconds
// Offset::0x630ABC0;
float FAnimInstance::GetDeltaSeconds();


// Function  Engine.AnimInstance.GetInstanceAssetPlayerLength
// Offset::0x630CFA0;
float FAnimInstance::GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex);


// Function  Engine.AnimInstance.GetInstanceAssetPlayerTime
// Offset::0x630CF00;
float FAnimInstance::GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex);


// Function  Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
// Offset::0x630CE60;
float FAnimInstance::GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex);


// Function  Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
// Offset::0x630CDC0;
float FAnimInstance::GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex);


// Function  Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
// Offset::0x630CD20;
float FAnimInstance::GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex);


// Function  Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
// Offset::0x630CAF0;
float FAnimInstance::GetInstanceCurrentStateElapsedTime(int32_t MachineIndex);


// Function  Engine.AnimInstance.GetInstanceMachineWeight
// Offset::0x630CC80;
float FAnimInstance::GetInstanceMachineWeight(int32_t MachineIndex);


// Function  Engine.AnimInstance.GetInstanceStateWeight
// Offset::0x630CB90;
float FAnimInstance::GetInstanceStateWeight(int32_t MachineIndex,int32_t StateIndex);


// Function  Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
// Offset::0x630CA00;
float FAnimInstance::GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex,int32_t TransitionIndex);


// Function  Engine.AnimInstance.GetInstanceTransitionTimeElapsed
// Offset::0x630C910;
float FAnimInstance::GetInstanceTransitionTimeElapsed(int32_t MachineIndex,int32_t TransitionIndex);


// Function  Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
// Offset::0x630C820;
float FAnimInstance::GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex,int32_t TransitionIndex);


// Function  Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag
// Offset::0x630D770;
FAnimInstance* FAnimInstance::GetLinkedAnimGraphInstanceByTag(FName InTag);


// Function  Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag
// Offset::0x630D670;
void FAnimInstance::GetLinkedAnimGraphInstancesByTag(FName InTag,TArray<FAnimInstance*> OutLinkedInstances);


// Function  Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass
// Offset::0x630D120;
FAnimInstance* FAnimInstance::GetLinkedAnimLayerInstanceByClass(FAnimInstance* InClass);


// Function  Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup
// Offset::0x630D3B0;
FAnimInstance* FAnimInstance::GetLinkedAnimLayerInstanceByGroup(FName InGroup);


// Function  Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass
// Offset::0x630D1C0;
FAnimInstance* FAnimInstance::GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup,FAnimInstance* InClass);


// Function  Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup
// Offset::0x630D2B0;
void FAnimInstance::GetLinkedAnimLayerInstancesByGroup(FName InGroup,TArray<FAnimInstance*> OutLinkedInstances);


// Function  Engine.AnimInstance.GetOwningActor
// Offset::0x630F9A0;
FActor* FAnimInstance::GetOwningActor();


// Function  Engine.AnimInstance.GetOwningComponent
// Offset::0x1AA9730;
FSkeletalMeshComponent* FAnimInstance::GetOwningComponent();


// Function  Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
// Offset::0x630FB80;
bool FAnimInstance::GetPropagateNotifiesToLinkedInstances();


// Function  Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
// Offset::0x630FC60;
bool FAnimInstance::GetReceiveNotifiesFromLinkedInstances();


// Function  Engine.AnimInstance.GetRelevantAnimLength
// Offset::0x630C550;
float FAnimInstance::GetRelevantAnimLength(int32_t MachineIndex,int32_t StateIndex);


// Function  Engine.AnimInstance.GetRelevantAnimTime
// Offset::0x630C460;
float FAnimInstance::GetRelevantAnimTime(int32_t MachineIndex,int32_t StateIndex);


// Function  Engine.AnimInstance.GetRelevantAnimTimeFraction
// Offset::0x630C370;
float FAnimInstance::GetRelevantAnimTimeFraction(int32_t MachineIndex,int32_t StateIndex);


// Function  Engine.AnimInstance.GetRelevantAnimTimeRemaining
// Offset::0x630C730;
float FAnimInstance::GetRelevantAnimTimeRemaining(int32_t MachineIndex,int32_t StateIndex);


// Function  Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
// Offset::0x630C640;
float FAnimInstance::GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex,int32_t StateIndex);


// Function  Engine.AnimInstance.GetSyncGroupPosition
// Offset::0x630AC80;
FMarkerSyncAnimPosition FAnimInstance::GetSyncGroupPosition(FName InSyncGroupName);


// Function  Engine.AnimInstance.GetTimeToClosestMarker
// Offset::0x630AFB0;
bool FAnimInstance::GetTimeToClosestMarker(FName SyncGroup,FName MarkerName,float OutMarkerTime);


// Function  Engine.AnimInstance.HasMarkerBeenHitThisFrame
// Offset::0x630AEC0;
bool FAnimInstance::HasMarkerBeenHitThisFrame(FName SyncGroup,FName MarkerName);


// Function  Engine.AnimInstance.IsAnimNotifyStateActive
// Offset::0x630C2D0;
bool FAnimInstance::IsAnimNotifyStateActive(FAnimNotifyState* AnimNotifyStateType);


// Function  Engine.AnimInstance.IsAnimNotifyStateActiveInLinkedAnimInstanceState
// Offset::0x630BF20;
bool FAnimInstance::IsAnimNotifyStateActiveInLinkedAnimInstanceState(FName LinkedAnimInstanceTag,FName StateMachineName,FName StateName,FAnimNotifyState* AnimNotifyStateType);


// Function  Engine.AnimInstance.IsAnimNotifyStateActiveInSourceState
// Offset::0x630C0B0;
bool FAnimInstance::IsAnimNotifyStateActiveInSourceState(int32_t MachineIndex,int32_t StateIndex,FAnimNotifyState* AnimNotifyStateType);


// Function  Engine.AnimInstance.IsAnimNotifyStateActiveInStateMachine
// Offset::0x630C1E0;
bool FAnimInstance::IsAnimNotifyStateActiveInStateMachine(int32_t MachineIndex,FAnimNotifyState* AnimNotifyStateType);


// Function  Engine.AnimInstance.IsAnyMontagePlaying
// Offset::0x630D840;
bool FAnimInstance::IsAnyMontagePlaying();


// Function  Engine.AnimInstance.IsPlayingSlotAnimation
// Offset::0x630EED0;
bool FAnimInstance::IsPlayingSlotAnimation(FAnimSequenceBase* Asset,FName SlotNodeName);


// Function  Engine.AnimInstance.IsSyncGroupBetweenMarkers
// Offset::0x630AD30;
bool FAnimInstance::IsSyncGroupBetweenMarkers(FName InSyncGroupName,FName PreviousMarker,FName NextMarker,bool bRespectMarkerOrder);


// Function  Engine.AnimInstance.IsUsingMainInstanceMontageEvaluationData
// Offset::0x630FA90;
bool FAnimInstance::IsUsingMainInstanceMontageEvaluationData();


// Function  Engine.AnimInstance.LinkAnimClassLayers
// Offset::0x630D4F0;
void FAnimInstance::LinkAnimClassLayers(FAnimInstance* InClass);


// Function  Engine.AnimInstance.LinkAnimGraphByTag
// Offset::0x630D590;
void FAnimInstance::LinkAnimGraphByTag(FName InTag,FAnimInstance* InClass);


// Function  Engine.AnimInstance.LockAIResources
// Offset::0x630B0F0;
void FAnimInstance::LockAIResources(bool bLockMovement,bool LockAILogic);


// Function  Engine.AnimInstance.Montage_GetBlendTime
// Offset::0x630DAE0;
float FAnimInstance::Montage_GetBlendTime(FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_GetCurrentSection
// Offset::0x630DDA0;
FName FAnimInstance::Montage_GetCurrentSection(FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_GetIsStopped
// Offset::0x630DB80;
bool FAnimInstance::Montage_GetIsStopped(FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_GetPlayRate
// Offset::0x630DA40;
float FAnimInstance::Montage_GetPlayRate(FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_GetPosition
// Offset::0x630DD00;
float FAnimInstance::Montage_GetPosition(FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_IsActive
// Offset::0x630DEF0;
bool FAnimInstance::Montage_IsActive(FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_IsPlaying
// Offset::0x630DE50;
bool FAnimInstance::Montage_IsPlaying(FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_JumpToSection
// Offset::0x630E280;
void FAnimInstance::Montage_JumpToSection(FName SectionName,FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_JumpToSectionsEnd
// Offset::0x630E1A0;
void FAnimInstance::Montage_JumpToSectionsEnd(FName SectionName,FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_Pause
// Offset::0x630E400;
void FAnimInstance::Montage_Pause(FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_Play
// Offset::0x630ECF0;
float FAnimInstance::Montage_Play(FAnimMontage* MontageToPlay,float InPlayRate,enum class EMontagePlayReturnType ReturnValueType,float InTimeToStartMontageAt,bool bStopAllMontages);


// Function  Engine.AnimInstance.Montage_PlayWithBlendIn
// Offset::0x630EAB0;
float FAnimInstance::Montage_PlayWithBlendIn(FAnimMontage* MontageToPlay,FAlphaBlendArgs BlendIn,float InPlayRate,enum class EMontagePlayReturnType ReturnValueType,float InTimeToStartMontageAt,bool bStopAllMontages);


// Function  Engine.AnimInstance.Montage_PlayWithBlendSettings
// Offset::0x630E860;
float FAnimInstance::Montage_PlayWithBlendSettings(FAnimMontage* MontageToPlay,FMontageBlendSettings BlendInSettings,float InPlayRate,enum class EMontagePlayReturnType ReturnValueType,float InTimeToStartMontageAt,bool bStopAllMontages);


// Function  Engine.AnimInstance.Montage_Resume
// Offset::0x630E360;
void FAnimInstance::Montage_Resume(FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_SetNextSection
// Offset::0x630E070;
void FAnimInstance::Montage_SetNextSection(FName SectionNameToChange,FName NextSection,FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_SetPlayRate
// Offset::0x630DF90;
void FAnimInstance::Montage_SetPlayRate(FAnimMontage* Montage,float NewPlayRate);


// Function  Engine.AnimInstance.Montage_SetPosition
// Offset::0x630DC20;
void FAnimInstance::Montage_SetPosition(FAnimMontage* Montage,float NewPosition);


// Function  Engine.AnimInstance.Montage_Stop
// Offset::0x630E780;
void FAnimInstance::Montage_Stop(float InBlendOutTime,FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_StopGroupByName
// Offset::0x630E4A0;
void FAnimInstance::Montage_StopGroupByName(float InBlendOutTime,FName GroupName);


// Function  Engine.AnimInstance.Montage_StopWithBlendOut
// Offset::0x630E680;
void FAnimInstance::Montage_StopWithBlendOut(FAlphaBlendArgs BlendOut,FAnimMontage* Montage);


// Function  Engine.AnimInstance.Montage_StopWithBlendSettings
// Offset::0x630E580;
void FAnimInstance::Montage_StopWithBlendSettings(FMontageBlendSettings BlendOutSettings,FAnimMontage* Montage);


// Function  Engine.AnimInstance.MontageSync_Follow
// Offset::0x630D910;
void FAnimInstance::MontageSync_Follow(FAnimMontage* MontageFollower,FAnimInstance* OtherAnimInstance,FAnimMontage* MontageLeader);


// Function  Engine.AnimInstance.MontageSync_StopFollowing
// Offset::0x630D870;
void FAnimInstance::MontageSync_StopFollowing(FAnimMontage* MontageFollower);


// Function  Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
// Offset::0x630F6D0;
FAnimMontage* FAnimInstance::PlaySlotAnimationAsDynamicMontage(FAnimSequenceBase* Asset,FName SlotNodeName,float BlendInTime,float BlendOutTime,float InPlayRate,int32_t LoopCount,float BlendOutTriggerTime,float InTimeToStartMontageAt);


// Function  Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage_WithBlendArgs
// Offset::0x630F3C0;
FAnimMontage* FAnimInstance::PlaySlotAnimationAsDynamicMontage_WithBlendArgs(FAnimSequenceBase* Asset,FName SlotNodeName,FAlphaBlendArgs BlendIn,FAlphaBlendArgs BlendOut,float InPlayRate,int32_t LoopCount,float BlendOutTriggerTime,float InTimeToStartMontageAt);


// Function  Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage_WithBlendSettings
// Offset::0x630F0A0;
FAnimMontage* FAnimInstance::PlaySlotAnimationAsDynamicMontage_WithBlendSettings(FAnimSequenceBase* Asset,FName SlotNodeName,FMontageBlendSettings BlendInSettings,FMontageBlendSettings BlendOutSettings,float InPlayRate,int32_t LoopCount,float BlendOutTriggerTime,float InTimeToStartMontageAt);


// Function  Engine.AnimInstance.RemovePoseSnapshot
// Offset::0x630FD70;
void FAnimInstance::RemovePoseSnapshot(FName SnapshotName);


// Function  Engine.AnimInstance.RequestSlotGroupInertialization
// Offset::0x630D040;
void FAnimInstance::RequestSlotGroupInertialization(FName InSlotGroupName,float Duration);


// Function  Engine.AnimInstance.ResetDynamics
// Offset::0x630ABF0;
void FAnimInstance::ResetDynamics(enum class ETeleportType InTeleportType);


// Function  Engine.AnimInstance.SavePoseSnapshot
// Offset::0x630FE10;
void FAnimInstance::SavePoseSnapshot(FName SnapshotName);


// Function  Engine.AnimInstance.SetMorphTarget
// Offset::0x630B300;
void FAnimInstance::SetMorphTarget(FName MorphTargetName,float Value);


// Function  Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
// Offset::0x630FAC0;
void FAnimInstance::SetPropagateNotifiesToLinkedInstances(bool bSet);


// Function  Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
// Offset::0x630FBB0;
void FAnimInstance::SetReceiveNotifiesFromLinkedInstances(bool bSet);


// Function  Engine.AnimInstance.SetRootMotionMode
// Offset::0x62ECA80;
void FAnimInstance::SetRootMotionMode(enum class ERootMotionMode Value);


// Function  Engine.AnimInstance.SetUseMainInstanceMontageEvaluationData
// Offset::0x630F9D0;
void FAnimInstance::SetUseMainInstanceMontageEvaluationData(bool bSet);


// Function  Engine.AnimInstance.SnapshotPose
// Offset::0x630FC90;
void FAnimInstance::SnapshotPose(FPoseSnapshot Snapshot);


// Function  Engine.AnimInstance.StopSlotAnimation
// Offset::0x630EFC0;
void FAnimInstance::StopSlotAnimation(float InBlendOutTime,FName SlotNodeName);


// Function  Engine.AnimInstance.TryGetPawnOwner
// Offset::0x234D360;
FPawn* FAnimInstance::TryGetPawnOwner();


// Function  Engine.AnimInstance.UnlinkAnimClassLayers
// Offset::0x630D450;
void FAnimInstance::UnlinkAnimClassLayers(FAnimInstance* InClass);


// Function  Engine.AnimInstance.UnlockAIResources
// Offset::0x630B0F0;
void FAnimInstance::UnlockAIResources(bool bUnlockMovement,bool UnlockAILogic);


// Function  Engine.AnimInstance.WasAnimNotifyNameTriggeredInAnyState
// Offset::0x630B6E0;
bool FAnimInstance::WasAnimNotifyNameTriggeredInAnyState(FName NotifyName);


// Function  Engine.AnimInstance.WasAnimNotifyNameTriggeredInSourceState
// Offset::0x630BA00;
bool FAnimInstance::WasAnimNotifyNameTriggeredInSourceState(int32_t MachineIndex,int32_t StateIndex,FName NotifyName);


// Function  Engine.AnimInstance.WasAnimNotifyNameTriggeredInStateMachine
// Offset::0x630B820;
bool FAnimInstance::WasAnimNotifyNameTriggeredInStateMachine(int32_t MachineIndex,FName NotifyName);


// Function  Engine.AnimInstance.WasAnimNotifyStateActiveInAnyState
// Offset::0x630BE80;
bool FAnimInstance::WasAnimNotifyStateActiveInAnyState(FAnimNotifyState* AnimNotifyStateType);


// Function  Engine.AnimInstance.WasAnimNotifyStateActiveInSourceState
// Offset::0x630BC60;
bool FAnimInstance::WasAnimNotifyStateActiveInSourceState(int32_t MachineIndex,int32_t StateIndex,FAnimNotifyState* AnimNotifyStateType);


// Function  Engine.AnimInstance.WasAnimNotifyStateActiveInStateMachine
// Offset::0x630BD90;
bool FAnimInstance::WasAnimNotifyStateActiveInStateMachine(int32_t MachineIndex,FAnimNotifyState* AnimNotifyStateType);


// Function  Engine.AnimInstance.WasAnimNotifyTriggeredInAnyState
// Offset::0x630B780;
bool FAnimInstance::WasAnimNotifyTriggeredInAnyState(FAnimNotify* AnimNotifyType);


// Function  Engine.AnimInstance.WasAnimNotifyTriggeredInSourceState
// Offset::0x630BB30;
bool FAnimInstance::WasAnimNotifyTriggeredInSourceState(int32_t MachineIndex,int32_t StateIndex,FAnimNotify* AnimNotifyType);


// Function  Engine.AnimInstance.WasAnimNotifyTriggeredInStateMachine
// Offset::0x630B910;
bool FAnimInstance::WasAnimNotifyTriggeredInStateMachine(int32_t MachineIndex,FAnimNotify* AnimNotifyType);


// Function  EmbarkAnimationRuntime.EmbarkAnimInstance_Base.BlueprintPostUpdateAnimationGameThread
// Offset::0x3D30810;
void FEmbarkAnimInstance_Base::BlueprintPostUpdateAnimationGameThread(float DeltaTimeX);


// Function  EmbarkAnimationRuntime.EmbarkAnimInstance_Base.BlueprintPreUpdateAnimationAnyThread
// Offset::0x3D30810;
void FEmbarkAnimInstance_Base::BlueprintPreUpdateAnimationAnyThread(float DeltaTimeX);


// Function  EmbarkAnimationRuntime.EmbarkAnimInstance_Base.BlueprintPreUpdateAnimationGameThread
// Offset::0x3D30810;
void FEmbarkAnimInstance_Base::BlueprintPreUpdateAnimationGameThread(float DeltaTimeX);


// Function  EmbarkAnimationRuntime.EmbarkAnimInstance_Base.CalculatePlayRateToSpecifiedPoint
// Offset::0x23736A0;
float FEmbarkAnimInstance_Base::CalculatePlayRateToSpecifiedPoint(float Duration,float Endpoint);


// Function  EmbarkAnimationRuntime.EmbarkAnimInstance_Base.GetAdditiveBaseSequence
// Offset::0x23735A0;
FAnimSequence* FEmbarkAnimInstance_Base::GetAdditiveBaseSequence(FAnimSequence* InSequence,float Time);


// Function  EmbarkAnimationRuntime.EmbarkAnimInstance_Base.IsValid_Threadsafe
// Offset::0x2373500;
bool FEmbarkAnimInstance_Base::IsValid_Threadsafe(FObject* InObject);


// Function  EmbarkAnimationRuntime.EmbarkAnimInstance_Base.RandomFloatInRange_Threadsafe
// Offset::0x2373790;
float FEmbarkAnimInstance_Base::RandomFloatInRange_Threadsafe(float Min,float Max);


// Function  EmbarkAnimationRuntime.EmbarkAnimInstance_Base.RandomIntInRange_Threadsafe
// Offset::0x2373880;
int32_t FEmbarkAnimInstance_Base::RandomIntInRange_Threadsafe(int32_t Min,int32_t Max);


// Function  EmbarkAnimationRuntime.EmbarkAnimInstance_Base.SetVariableContainerObjectForCompiledPinExpressions
// Offset::0x2373970;
void FEmbarkAnimInstance_Base::SetVariableContainerObjectForCompiledPinExpressions(FObject* ContainerObject);


// Function  EmbarkAnimationRuntime.EmbarkAnimStateUpdaterComponent.MainThreadDebugDraw
// Offset::0x3D30810;
void FEmbarkAnimStateUpdaterComponent::MainThreadDebugDraw(float DeltaSeconds);


// Function  EmbarkAnimationRuntime.EmbarkAnimStateUpdaterComponent.MainThreadPreParallelTick
// Offset::0x3D30810;
void FEmbarkAnimStateUpdaterComponent::MainThreadPreParallelTick(float DeltaSeconds);


// Function  EmbarkAnimationRuntime.EmbarkAnimStateUpdaterComponent.ParallelTick
// Offset::0x3D30810;
void FEmbarkAnimStateUpdaterComponent::ParallelTick(float DeltaSeconds);


// Function  EmbarkAnimationRuntime.EmbarkAnimStateUpdaterComponent.SetPairedMeshComponent
// Offset::0x2374680;
void FEmbarkAnimStateUpdaterComponent::SetPairedMeshComponent(FSkeletalMeshComponent* Comp);


// Function  EmbarkAnimationRuntime.EmbarkAnimStateUpdaterComponent.StartTicking
// Offset::0x3D30810;
void FEmbarkAnimStateUpdaterComponent::StartTicking();


// Function  EmbarkAnimationRuntime.EmbarkAnimStateUpdaterSystem.DeregisterStateUpdaterComponent
// Offset::0x23752A0;
void FEmbarkAnimStateUpdaterSystem::DeregisterStateUpdaterComponent(FEmbarkAnimStateUpdaterComponent* StateUpdaterComponent);


// Function  EmbarkAnimationRuntime.EmbarkAnimStateUpdaterSystem.RegisterStateUpdaterComponent
// Offset::0x2375340;
void FEmbarkAnimStateUpdaterSystem::RegisterStateUpdaterComponent(FEmbarkAnimStateUpdaterComponent* StateUpdaterComponent,FSkeletalMeshComponent* MeshComponent);


// Function  EmbarkAnimationRuntime.AnimNotifyEventReferenceMixinLibrary.opEquals
// Offset::0x2375810;
bool FAnimNotifyEventReferenceMixinLibrary::opEquals(FAnimNotifyEventReference Lhs,FAnimNotifyEventReference Rhs);


// Function  Engine.CameraModifier.BlueprintModifyCamera
// Offset::0x3D30810;
void FCameraModifier::BlueprintModifyCamera(float DeltaTime,FVector ViewLocation,FRotator ViewRotation,float FOV,FVector NewViewLocation,FRotator NewViewRotation,float NewFOV);


// Function  Engine.CameraModifier.BlueprintModifyPostProcess
// Offset::0x3D30810;
void FCameraModifier::BlueprintModifyPostProcess(float DeltaTime,float PostProcessBlendWeight,FPostProcessSettings PostProcessSettings);


// Function  Engine.CameraModifier.DisableModifier
// Offset::0x62F2240;
void FCameraModifier::DisableModifier(bool bImmediate);


// Function  Engine.CameraModifier.EnableModifier
// Offset::0x179F4A0;
void FCameraModifier::EnableModifier();


// Function  Engine.CameraModifier.GetViewTarget
// Offset::0x26D22B0;
FActor* FCameraModifier::GetViewTarget();


// Function  Engine.CameraModifier.IsDisabled
// Offset::0x2876320;
bool FCameraModifier::IsDisabled();


// Function  Engine.CameraModifier.OnCameraOwnerDestroyed
// Offset::0x634B230;
void FCameraModifier::OnCameraOwnerDestroyed(FActor* InOwner);


// Function  Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent
// Offset::0x64DFB60;
void FPoseableMeshComponent::CopyPoseFromSkeletalComponent(FSkeletalMeshComponent* InComponentToCopy);


// Function  Engine.PoseableMeshComponent.GetBoneLocationByName
// Offset::0x64DFEA0;
FVector FPoseableMeshComponent::GetBoneLocationByName(FName BoneName,enum class EBoneSpaces BoneSpace);


// Function  Engine.PoseableMeshComponent.GetBoneRotationByName
// Offset::0x64DFDA0;
FRotator FPoseableMeshComponent::GetBoneRotationByName(FName BoneName,enum class EBoneSpaces BoneSpace);


// Function  Engine.PoseableMeshComponent.GetBoneScaleByName
// Offset::0x64DFCA0;
FVector FPoseableMeshComponent::GetBoneScaleByName(FName BoneName,enum class EBoneSpaces BoneSpace);


// Function  Engine.PoseableMeshComponent.GetBoneTransformByName
// Offset::0x64DFFA0;
FTransform FPoseableMeshComponent::GetBoneTransformByName(FName BoneName,enum class EBoneSpaces BoneSpace);


// Function  Engine.PoseableMeshComponent.ResetBoneTransformByName
// Offset::0x64DFC00;
void FPoseableMeshComponent::ResetBoneTransformByName(FName BoneName);


// Function  Engine.PoseableMeshComponent.SetBoneLocationByName
// Offset::0x64E0360;
void FPoseableMeshComponent::SetBoneLocationByName(FName BoneName,FVector InLocation,enum class EBoneSpaces BoneSpace);


// Function  Engine.PoseableMeshComponent.SetBoneRotationByName
// Offset::0x64E0220;
void FPoseableMeshComponent::SetBoneRotationByName(FName BoneName,FRotator InRotation,enum class EBoneSpaces BoneSpace);


// Function  Engine.PoseableMeshComponent.SetBoneScaleByName
// Offset::0x64E00E0;
void FPoseableMeshComponent::SetBoneScaleByName(FName BoneName,FVector InScale3D,enum class EBoneSpaces BoneSpace);


// Function  Engine.PoseableMeshComponent.SetBoneTransformByName
// Offset::0x64E04A0;
void FPoseableMeshComponent::SetBoneTransformByName(FName BoneName,FTransform InTransform,enum class EBoneSpaces BoneSpace);


// Function  EmbarkAnimationDebugRuntime.EmbarkAnimationFunctionLibrary.GetAllActiveAnimations
// Offset::0x23CC520;
TArray<FActiveAnimInfo> FEmbarkAnimationFunctionLibrary::GetAllActiveAnimations(FAnimInstance* AnimInstance);


// Function  EmbarkAnimationDebugRuntime.EmbarkAnimationFunctionLibrary.GetAuthoredNotifyTriggerTime
// Offset::0x23CC440;
float FEmbarkAnimationFunctionLibrary::GetAuthoredNotifyTriggerTime(FAnimNotifyEventReference EventReference);


// Function  EmbarkAnimationDebugRuntime.AnimDebugRuntimeLibrary.AddCustomEntry
// Offset::0x23CCBB0;
void FAnimDebugRuntimeLibrary::AddCustomEntry(FAnimInstance* AnimInstance,FString Name,FString Value,bool bMainInstanceOnly);


// Function  EmbarkAnimationDebugRuntime.AnimDebugRuntimeLibrary.AddCustomEntryCharacter
// Offset::0x23CCA70;
void FAnimDebugRuntimeLibrary::AddCustomEntryCharacter(FCharacter* Character,FString Name,FString Value);


// Function  EmbarkAnimationDebugRuntime.AnimDebugRuntimeLibrary.StartToRecord
// Offset::0x23CCD40;
void FAnimDebugRuntimeLibrary::StartToRecord(FAnimInstance* AnimInstance);


// Function  EmbarkAntiCheat.EmbarkStatManagerDataMixinLibrary.RequestNextMutableSnapshot
// Offset::0x23D08B0;
FEmbarkStatManagerSnapshot FEmbarkStatManagerDataMixinLibrary::RequestNextMutableSnapshot(FEmbarkStatManagerData TelemetryData);


// Function  EmbarkAntiCheat.EmbarkStatManagerBase.DeregisterController
// Offset::0x23D0FB0;
void FEmbarkStatManagerBase::DeregisterController(FPlayerController* Controller);


// Function  EmbarkAntiCheat.EmbarkStatManagerBase.GetControllerIndex
// Offset::0x23D0E20;
int32_t FEmbarkStatManagerBase::GetControllerIndex(FPlayerController* Controller);


// Function  EmbarkAntiCheat.EmbarkStatManagerBase.GetMutableTelemetryData
// Offset::0x23D0D30;
TArray<FEmbarkStatManagerData> FEmbarkStatManagerBase::GetMutableTelemetryData();


// Function  EmbarkAntiCheat.EmbarkStatManagerBase.GetStatManagerDataForController
// Offset::0x23D10F0;
bool FEmbarkStatManagerBase::GetStatManagerDataForController(FPlayerController* Controller,FEmbarkStatManagerData KillTelemetry);


// Function  EmbarkAntiCheat.EmbarkStatManagerBase.ReceiveOnControllerDeregistered
// Offset::0x3D30810;
void FEmbarkStatManagerBase::ReceiveOnControllerDeregistered(FPlayerController* Controller,int32_t ControllerIdx);


// Function  EmbarkAntiCheat.EmbarkStatManagerBase.ReceiveOnControllerRegistered
// Offset::0x3D30810;
void FEmbarkStatManagerBase::ReceiveOnControllerRegistered(FPlayerController* Controller,int32_t ControllerIdx);


// Function  EmbarkAntiCheat.EmbarkStatManagerBase.ReceiveUpdatePerPlayerSnapshotData
// Offset::0x3D30810;
void FEmbarkStatManagerBase::ReceiveUpdatePerPlayerSnapshotData(float DeltaSeconds,TArray<FPlayerController*> AllRegisteredControllers,FEmbarkStatManagerWorker* AllWorkerData);


// Function  EmbarkAntiCheat.EmbarkStatManagerBase.RegisterController
// Offset::0x23D1050;
void FEmbarkStatManagerBase::RegisterController(FPlayerController* Controller);


// Function  EmbarkAntiCheat.EmbarkStatManagerBase.RequestKillDump
// Offset::0x23D0EC0;
bool FEmbarkStatManagerBase::RequestKillDump(FPlayerController* Killer,FPlayerController* Victim);


// Function  EmbarkLensFlareOcclusion.EmbarkLensFlareOcclusionSubsystem.GetOcclusionResultTexture
// Offset::0x23D6DD0;
FTextureRenderTarget2D* FEmbarkLensFlareOcclusionSubsystem::GetOcclusionResultTexture();


// Function  EmbarkStateInterpolator.StateInterpolator.AddStateInstance
// Offset::0x2405360;
void FStateInterpolator::AddStateInstance(FStateInstanceId InstanceId);


// Function  EmbarkStateInterpolator.StateInterpolator.HasInstance
// Offset::0x24050B0;
bool FStateInterpolator::HasInstance(FStateInstanceId StateInstance);


// Function  EmbarkStateInterpolator.StateInterpolator.HasInstanceForActor
// Offset::0x2405170;
bool FStateInterpolator::HasInstanceForActor(FActor* Actor);


// Function  EmbarkStateInterpolator.StateInterpolator.RemoveStateInstance
// Offset::0x2405210;
void FStateInterpolator::RemoveStateInstance(FStateInstanceId InstanceId);


// Function  EmbarkStateInterpolator.BPObjectInterpolator.GetInputStateObj_BP
// Offset::0x2403D20;
FObject* FBPObjectInterpolator::GetInputStateObj_BP(FStateInstanceId InstanceId);


// Function  EmbarkStateInterpolator.BPObjectInterpolator.GetInterpolatedStateObj_BP
// Offset::0x2403B40;
FObject* FBPObjectInterpolator::GetInterpolatedStateObj_BP(FStateInstanceId InstanceId);


// Function  EmbarkStateInterpolator.BPObjectInterpolator.GetLatestStateObj_BP
// Offset::0x2403C30;
FObject* FBPObjectInterpolator::GetLatestStateObj_BP(FStateInstanceId InstanceId);


// Function  EmbarkStateInterpolator.BPObjectInterpolator.GetObjectType_BP
// Offset::0x3D30810;
FObject* FBPObjectInterpolator::GetObjectType_BP();


// Function  EmbarkStateInterpolator.BPObjectInterpolator.Interpolate_BP
// Offset::0x3D30810;
void FBPObjectInterpolator::Interpolate_BP(TArray<FObject*> A_Array,TArray<FObject*> B_Array,TArray<float> Alphas,TArray<FObject*> OutResults);


// Function  EmbarkStateInterpolator.InterpolatedTestActor.OnRep_Transform
// Offset::0x2400D50;
void FInterpolatedTestActor::OnRep_Transform();


// Function  EmbarkStateInterpolator.InterpolatedTestActor.SetAngularVelocity
// Offset::0x2400BB0;
void FInterpolatedTestActor::SetAngularVelocity(FVector Velocity);


// Function  EmbarkStateInterpolator.InterpolatedTestActor.SetVelocity
// Offset::0x2400C80;
void FInterpolatedTestActor::SetVelocity(FVector Velocity);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.CutoffBool
// Offset::0x24025B0;
bool FInterpolationUtilsStatics::CutoffBool(bool A,bool B,float Alpha,float CutoffPoint);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.CutoffFloat
// Offset::0x24028D0;
float FInterpolationUtilsStatics::CutoffFloat(float A,float B,float Alpha,float CutoffPoint);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.CutoffInt
// Offset::0x2402740;
int32_t FInterpolationUtilsStatics::CutoffInt(int32_t A,int32_t B,float Alpha,float CutoffPoint);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.CutoffVector
// Offset::0x24023E0;
FVector FInterpolationUtilsStatics::CutoffVector(FVector A,FVector B,float Alpha,float CutoffPoint);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.LinearFloat
// Offset::0x2401980;
float FInterpolationUtilsStatics::LinearFloat(float A,float B,float Alpha);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.LinearVector
// Offset::0x24017E0;
FVector FInterpolationUtilsStatics::LinearVector(FVector A,FVector B,float Alpha);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.MaxBool
// Offset::0x2401AC0;
bool FInterpolationUtilsStatics::MaxBool(bool A,bool B,float Alpha);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.MaxFloat
// Offset::0x2401DC0;
float FInterpolationUtilsStatics::MaxFloat(float A,float B,float Alpha);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.MaxInt
// Offset::0x2401C50;
int32_t FInterpolationUtilsStatics::MaxInt(int32_t A,int32_t B,float Alpha);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.MinBool
// Offset::0x2401F50;
bool FInterpolationUtilsStatics::MinBool(bool A,bool B,float Alpha);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.MinFloat
// Offset::0x2402250;
float FInterpolationUtilsStatics::MinFloat(float A,float B,float Alpha);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.MinInt
// Offset::0x24020E0;
int32_t FInterpolationUtilsStatics::MinInt(int32_t A,int32_t B,float Alpha);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.SinusoidalFloat
// Offset::0x2401570;
float FInterpolationUtilsStatics::SinusoidalFloat(float A,float B,float Alpha);


// Function  EmbarkStateInterpolator.InterpolationUtilsStatics.SinusoidalVector
// Offset::0x2401290;
FVector FInterpolationUtilsStatics::SinusoidalVector(FVector A,FVector B,float Alpha);


// Function  EmbarkStateInterpolator.StateInstanceIdMixinLibrary.GetActor
// Offset::0x2404C10;
FActor* FStateInstanceIdMixinLibrary::GetActor(FStateInstanceId StateInstanceId);


// Function  EmbarkStateInterpolator.StateInstanceIdMixinLibrary.GetKey
// Offset::0x2404B60;
int32_t FStateInstanceIdMixinLibrary::GetKey(FStateInstanceId StateInstanceId);


// Function  EmbarkStateInterpolator.StateInstanceIdMixinLibrary.IsValid
// Offset::0x2404AB0;
bool FStateInstanceIdMixinLibrary::IsValid(FStateInstanceId StateInstanceId);


// Function  EmbarkStateInterpolator.StateInterpolatorSubsystem.GetOrCreateStateInterpolator
// Offset::0x2407450;
FStateInterpolator* FStateInterpolatorSubsystem::GetOrCreateStateInterpolator(FStateInterpolator* StateClass);


// Function  EmbarkStateInterpolator.StateInterpolatorSubsystem.ManuallySetActorHasNewState
// Offset::0x24074F0;
void FStateInterpolatorSubsystem::ManuallySetActorHasNewState(FActor* Actor);


// Function  EmbarkStateInterpolator.StateInterpolatorSubsystem.SetDebugModeForActor
// Offset::0x2406F60;
void FStateInterpolatorSubsystem::SetDebugModeForActor(FActor* Actor,enum class EStateInterpolatorDebugMode DebugMode);


// Function  EmbarkStateInterpolator.StateInterpolatorSubsystem.SetDebugModeForActorOnInterpolator
// Offset::0x2407040;
void FStateInterpolatorSubsystem::SetDebugModeForActorOnInterpolator(FStateInterpolator* StateInterpolatorClass,FActor* Actor,enum class EStateInterpolatorDebugMode DebugMode);


// Function  EmbarkStateInterpolator.StateInterpolatorSubsystem.SetDebugModeForAll
// Offset::0x24072C0;
void FStateInterpolatorSubsystem::SetDebugModeForAll(enum class EStateInterpolatorDebugMode DebugMode);


// Function  EmbarkStateInterpolator.StateInterpolatorSubsystem.SetDebugModeForAllOnInterpolator
// Offset::0x2406F60;
void FStateInterpolatorSubsystem::SetDebugModeForAllOnInterpolator(FStateInterpolator* StateInterpolatorClass,enum class EStateInterpolatorDebugMode DebugMode);


// Function  EmbarkStateInterpolator.StateInterpolatorSubsystem.SetDebugModeForInstance
// Offset::0x2407350;
void FStateInterpolatorSubsystem::SetDebugModeForInstance(FStateInstanceId StateInstance,enum class EStateInterpolatorDebugMode DebugMode);


// Function  EmbarkStateInterpolator.StateInterpolatorSubsystem.SetDebugModeForInstanceOnInterpolator
// Offset::0x2407170;
void FStateInterpolatorSubsystem::SetDebugModeForInstanceOnInterpolator(FStateInterpolator* StateInterpolatorClass,FStateInstanceId StateInstance,enum class EStateInterpolatorDebugMode DebugMode);


// Function  EmbarkStateInterpolator.StateInterpolatorSubsystem.SetGlobalMinInterpolationReplicationDelayOverride
// Offset::0x2406EB0;
void FStateInterpolatorSubsystem::SetGlobalMinInterpolationReplicationDelayOverride(float Delay);


// Function  EmbarkStateInterpolator.StateInterpolatorStatics.GetSubsystem
// Offset::0x2407BA0;
FStateInterpolatorSubsystem* FStateInterpolatorStatics::GetSubsystem(FObject* WorldContextObject);


// Function  EmbarkStateInterpolator.TransformInterpolator.GetInterpolatedState
// Offset::0x2408320;
bool FTransformInterpolator::GetInterpolatedState(FStateInstanceId InstanceId,FTransformInterpolatorData OutTransformInterpolatorData);


// Function  EmbarkStateInterpolator.TransformInterpolator.GetLatestState
// Offset::0x24084A0;
bool FTransformInterpolator::GetLatestState(FStateInstanceId InstanceId,FTransformInterpolatorData OutTransformInterpolatorData);


// Function  EmbarkStateInterpolator.TransformInterpolator.SetInput
// Offset::0x2408620;
void FTransformInterpolator::SetInput(FStateInstanceId InstanceId,FTransformInterpolatorData InputData);


// Function  EmbarkReplicatedTransform.ReplicatedTransformMixinLibrary.CopyToActor
// Offset::0x240B200;
void FReplicatedTransformMixinLibrary::CopyToActor(FReplicatedTransform Transform,FActor* Actor,FVector OutAngularVelocity);


// Function  EmbarkReplicatedTransform.ReplicatedTransformMixinLibrary.CopyToRigidBodyState
// Offset::0x240B040;
void FReplicatedTransformMixinLibrary::CopyToRigidBodyState(FReplicatedTransform Transform,FRigidBodyState OutRBState);


// Function  EmbarkReplicatedTransform.ReplicatedTransformMixinLibrary.FillFromActor
// Offset::0x240B810;
void FReplicatedTransformMixinLibrary::FillFromActor(FReplicatedTransform Transform,FActor* Actor,FVector SetAngularVelocity,bool bSetTeleported);


// Function  EmbarkReplicatedTransform.ReplicatedTransformMixinLibrary.FillFromRigidBodyState
// Offset::0x240B3B0;
void FReplicatedTransformMixinLibrary::FillFromRigidBodyState(FReplicatedTransform Transform,FRigidBodyState RBState);


// Function  EmbarkReplicatedTransform.ReplicatedTransformMixinLibrary.IsAngularVelocityDormant
// Offset::0x240BBB0;
bool FReplicatedTransformMixinLibrary::IsAngularVelocityDormant(FReplicatedTransform Transform);


// Function  EmbarkReplicatedTransform.ReplicatedTransformMixinLibrary.IsLinearVelocityDormant
// Offset::0x240BCC0;
bool FReplicatedTransformMixinLibrary::IsLinearVelocityDormant(FReplicatedTransform Transform);


// Function  EmbarkReplicatedTransform.ReplicatedTransformMixinLibrary.IsTransformDormant
// Offset::0x240BA10;
bool FReplicatedTransformMixinLibrary::IsTransformDormant(FReplicatedTransform Transform,bool bOnlyIfReplicated);


// Function  EmbarkUtils.EmbarkClassUtilsFunctionLibrary.GetSubclassesOf
// Offset::0x243AC10;
TArray<FObject*> FEmbarkClassUtilsFunctionLibrary::GetSubclassesOf(FObject* ParentClass);


// Function  EmbarkUtils.EmbarkConsoleCommandMacroFunctionLibrary.PlayMacro
// Offset::0x243AF60;
void FEmbarkConsoleCommandMacroFunctionLibrary::PlayMacro(FObject* WorldContextObject,TArray<FString> Commands,FPlayerController* SpecificPlayer);


// Function  EmbarkUtils.EmbarkConsoleCommandMacroFunctionLibrary.StartRecordingMacro
// Offset::0x243B220;
void FEmbarkConsoleCommandMacroFunctionLibrary::StartRecordingMacro(FObject* WorldContextObject);


// Function  EmbarkUtils.EmbarkConsoleCommandMacroFunctionLibrary.StopRecordingMacro
// Offset::0x243B0E0;
TArray<FString> FEmbarkConsoleCommandMacroFunctionLibrary::StopRecordingMacro(FObject* WorldContextObject);


// Function  EmbarkUtils.EmbarkDebugUtilsFunctionLibrary.DrawDebugArrow
// Offset::0x243B630;
void FEmbarkDebugUtilsFunctionLibrary::DrawDebugArrow(FObject* WorldContextObject,FVector LineStart,FVector LineEnd,float DrawTime,float Thickness,FLinearColor Color);


// Function  EmbarkUtils.EmbarkDebugUtilsFunctionLibrary.DrawDebugLine
// Offset::0x243B630;
void FEmbarkDebugUtilsFunctionLibrary::DrawDebugLine(FObject* WorldContextObject,FVector LineStart,FVector LineEnd,float DrawTime,float Thickness,FLinearColor Color);


// Function  EmbarkUtils.EmbarkDebugUtilsFunctionLibrary.DrawDebugSphere
// Offset::0x243B8B0;
void FEmbarkDebugUtilsFunctionLibrary::DrawDebugSphere(FObject* WorldContextObject,FVector Center,float Radius,int32_t Segments,FLinearColor SphereColor,float Duration,float Thickness);


// Function  EmbarkUtils.EmbarkOctreeDataHandleMixinLibrary.IsValid
// Offset::0x243C0A0;
bool FEmbarkOctreeDataHandleMixinLibrary::IsValid(FEmbarkOctreeDataHandle Handle);


// Function  EmbarkUtils.EmbarkGenericOctreeMixinLibrary.DebugDrawOctree
// Offset::0x243C430;
void FEmbarkGenericOctreeMixinLibrary::DebugDrawOctree(FEmbarkGenericOctree Octree,FWorld* World);


// Function  EmbarkUtils.EmbarkGenericOctreeMixinLibrary.FindElements
// Offset::0x243D040;
TArray<FEmbarkOctreeDataHandle> FEmbarkGenericOctreeMixinLibrary::FindElements(FEmbarkGenericOctree Octree,FBox BoxBounds);


// Function  EmbarkUtils.EmbarkGenericOctreeMixinLibrary.FindElementsWithBoundsTest
// Offset::0x243CCA0;
void FEmbarkGenericOctreeMixinLibrary::FindElementsWithBoundsTest(FEmbarkGenericOctree Octree,FBox BoxBounds,FDelegate IterateBoundsFunc);


// Function  EmbarkUtils.EmbarkGenericOctreeMixinLibrary.FindFirstElementWithBoundsTest
// Offset::0x243C900;
void FEmbarkGenericOctreeMixinLibrary::FindFirstElementWithBoundsTest(FEmbarkGenericOctree Octree,FBox BoxBounds,FDelegate IterateBoundsFunc);


// Function  EmbarkUtils.EmbarkGenericOctreeMixinLibrary.FindNearbyElements
// Offset::0x243C5B0;
void FEmbarkGenericOctreeMixinLibrary::FindNearbyElements(FEmbarkGenericOctree Octree,FVector Position,FDelegate IterateBoundsFunc);


// Function  EmbarkUtils.EmbarkGenericOctreeMixinLibrary.Initialize
// Offset::0x243D890;
void FEmbarkGenericOctreeMixinLibrary::Initialize(FEmbarkGenericOctree Octree,FBox Bounds);


// Function  EmbarkUtils.EmbarkGenericOctreeMixinLibrary.IsInitialized
// Offset::0x243D770;
bool FEmbarkGenericOctreeMixinLibrary::IsInitialized(FEmbarkGenericOctree Octree);


// Function  EmbarkUtils.EmbarkGenericOctreeMixinLibrary.RemoveNode
// Offset::0x243D370;
void FEmbarkGenericOctreeMixinLibrary::RemoveNode(FEmbarkGenericOctree Octree,FEmbarkOctreeDataHandle ID);


// Function  EmbarkUtils.EmbarkGenericOctreeMixinLibrary.UpdateNode
// Offset::0x243D500;
void FEmbarkGenericOctreeMixinLibrary::UpdateNode(FEmbarkGenericOctree Octree,FEmbarkOctreeDataHandle ID,FBoxSphereBounds NewBounds);


// Function  EmbarkUtils.EmbarkHardwareBreakpointSubsystem.AddHardwareBreakpointForProperty
// Offset::0x243E760;
int32_t FEmbarkHardwareBreakpointSubsystem::AddHardwareBreakpointForProperty(FObject* Obj,FString PropertyName,int32_t TriggersUntilDisable,enum class EEmbarkHardwareBreakpointTypes BreakpointType,enum class EEmbarkHardwareBreakpointConditions TriggerCondition,int64_t TriggerConditionValue);


// Function  EmbarkUtils.EmbarkHardwareBreakpointSubsystem.ClearAllHardwareBreakpoints
// Offset::0x1B91E70;
void FEmbarkHardwareBreakpointSubsystem::ClearAllHardwareBreakpoints();


// Function  EmbarkUtils.EmbarkHardwareBreakpointSubsystem.ClearHardwareBreakpoint
// Offset::0x243E350;
bool FEmbarkHardwareBreakpointSubsystem::ClearHardwareBreakpoint(int32_t DebugRegisterToClear);


// Function  EmbarkUtils.EmbarkHardwareBreakpointSubsystem.DoesPropertySupportHardwareBreakpoint
// Offset::0x243E660;
bool FEmbarkHardwareBreakpointSubsystem::DoesPropertySupportHardwareBreakpoint(FObject* Obj,FString PropertyName);


// Function  EmbarkUtils.EmbarkHardwareBreakpointSubsystem.DoesPropertySupportTriggerCondition
// Offset::0x243E560;
bool FEmbarkHardwareBreakpointSubsystem::DoesPropertySupportTriggerCondition(FObject* Obj,FString PropertyName);


// Function  EmbarkUtils.EmbarkHardwareBreakpointSubsystem.FindHardwareBreakpointForProperty
// Offset::0x243E3F0;
bool FEmbarkHardwareBreakpointSubsystem::FindHardwareBreakpointForProperty(FObject* Obj,FString PropertyName,FEmbarkHardwareBreakpointInfo OutBreakpointInfo);


// Function  EmbarkUtils.EmbarkHardwareBreakpointSubsystem.GetTriggerVSBreakpoint
// Offset::0x243E320;
bool FEmbarkHardwareBreakpointSubsystem::GetTriggerVSBreakpoint();


// Function  EmbarkUtils.EmbarkHardwareBreakpointSubsystem.SetTriggerVSBreakpoint
// Offset::0x22AE960;
void FEmbarkHardwareBreakpointSubsystem::SetTriggerVSBreakpoint(bool bEnable);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.AlphaToBlendOption
// Offset::0x24415F0;
float FFMathUtilsFunctionLibrary::AlphaToBlendOption(float InAlpha,enum class EAlphaBlendOption InBlendOption,FCurveFloat* InCustomCurve);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.CalculateWindingNumber2D
// Offset::0x243FF70;
int32_t FFMathUtilsFunctionLibrary::CalculateWindingNumber2D(TArray<FVector> Polygon,FVector Point);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.FastSin
// Offset::0x2441210;
float FFMathUtilsFunctionLibrary::FastSin(float X);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.FastSin2
// Offset::0x2441170;
float FFMathUtilsFunctionLibrary::FastSin2(float X);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.FastSin3
// Offset::0x24410D0;
float FFMathUtilsFunctionLibrary::FastSin3(float X);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.GetClosestPointInList
// Offset::0x2440FB0;
FVector FFMathUtilsFunctionLibrary::GetClosestPointInList(TArray<FVector> PointList,FVector Point);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.GetClosestPointsBetweenSegmentedLines
// Offset::0x2440D50;
void FFMathUtilsFunctionLibrary::GetClosestPointsBetweenSegmentedLines(FVector Start1,FVector End1,FVector Start2,FVector End2,FVector OutPoint1,FVector OutPoint2);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.GetLinearVelocityAtPoint
// Offset::0x24401E0;
FVector FFMathUtilsFunctionLibrary::GetLinearVelocityAtPoint(FVector SpaceLoc,FVector SpaceLinVel,FVector SpaceAngVel,FVector Point);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.HashCombine
// Offset::0x243FDA0;
uint32_t FFMathUtilsFunctionLibrary::HashCombine(uint32_t A,uint32_t B);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.LineLineIntersect
// Offset::0x2441390;
bool FFMathUtilsFunctionLibrary::LineLineIntersect(FVector2D L1Start,FVector2D L1End,FVector2D L2Start,FVector2D L2End,FVector2D OutIntersect,double Tolerance);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.MinimumJerkTrajectory
// Offset::0x2441720;
double FFMathUtilsFunctionLibrary::MinimumJerkTrajectory(double CurrentValue,double CurrentSpeed,double CurrentAcc,double TargetValue,double TargetSpeed,double TargetAcc,double TimeLeft,double DeltaTime);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.PredictBallistics_SpeedToDirection_Basic
// Offset::0x2440A60;
bool FFMathUtilsFunctionLibrary::PredictBallistics_SpeedToDirection_Basic(FEmbarkBallisticPredictionInput InputData,TArray<FEmbarkBallisticPredictionOutput> Results);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.PredictBallistics_SpeedToDirection_Complex
// Offset::0x24408F0;
bool FFMathUtilsFunctionLibrary::PredictBallistics_SpeedToDirection_Complex(FEmbarkBallisticPredictionInput InputData,TArray<FEmbarkBallisticPredictionOutput> Results);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.PredictBallistics_SpeedToDirection_Simple
// Offset::0x2440BD0;
void FFMathUtilsFunctionLibrary::PredictBallistics_SpeedToDirection_Simple(FEmbarkBallisticPredictionInput InputData,FEmbarkBallisticPredictionOutput OutputData);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.ProjectOrientedBox
// Offset::0x24403B0;
void FFMathUtilsFunctionLibrary::ProjectOrientedBox(FOrientedBox Box,FVector ProjectionAxis,float Min,float Max);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.ProjectVectorOnPlane
// Offset::0x2440080;
FVector FFMathUtilsFunctionLibrary::ProjectVectorOnPlane(FVector Vec,FVector GroundNormal,FVector UpVector);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.RotationalDeltaToAngularVelocity
// Offset::0x243F460;
FVector FFMathUtilsFunctionLibrary::RotationalDeltaToAngularVelocity(FQuat DeltaRotation,double DeltaSeconds);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.RotationsToAngularVelocity
// Offset::0x243F960;
FVector FFMathUtilsFunctionLibrary::RotationsToAngularVelocity(FQuat PrevRotation,FQuat NewRotation,double DeltaSeconds);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.SampleProbabilityDensityFunction
// Offset::0x24412B0;
float FFMathUtilsFunctionLibrary::SampleProbabilityDensityFunction(FCurveFloat* ProbabilityDensityFunction,int32_t NumberOfSamples);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.SlerpVector
// Offset::0x243F310;
FVector FFMathUtilsFunctionLibrary::SlerpVector(FVector Start,FVector End,float Alpha);


// Function  EmbarkUtils.FMathUtilsFunctionLibrary.TraceBallisticPath
// Offset::0x24405D0;
bool FFMathUtilsFunctionLibrary::TraceBallisticPath(FObject* WorldContextObject,FEmbarkBallisticTraceInput InputData,TArray<FVector> OutTracedPath,FHitResult OutHitResult);


// Function  EmbarkUtils.EmbarkMeshMergeFunctionLibrary.MergeAttachedStaticMeshes
// Offset::0x2445780;
FSkeletalMesh* FEmbarkMeshMergeFunctionLibrary::MergeAttachedStaticMeshes(FSkeletalMesh* RootMesh,TArray<FEmbarkAttachedStaticMeshDesc> AttachedStaticMeshes,TArray<FName> MorphTargetsToMerge,int32_t MaxNumLODsToMerge,bool bWaitUntilComplete,FObject* CallbackObject,FName CallbackFunction,int32_t CallbackUserData);


// Function  EmbarkUtils.EmbarkMeshMergeFunctionLibrary.MergeMeshes
// Offset::0x2445AA0;
FSkeletalMesh* FEmbarkMeshMergeFunctionLibrary::MergeMeshes(FSkeleton* Skeleton,FSkeletalMesh* RootMesh,TArray<FSkeletalMesh*> MeshesToMerge,TArray<FEmbarkAttachedStaticMeshDesc> AttachedStaticMeshes,TArray<FName> MorphTargetsToMerge,int32_t MaxNumLODsToMerge,bool bWaitUntilComplete,FObject* CallbackObject,FName CallbackFunction,int32_t CallbackUserData);


// Function  EmbarkUtils.EmbarkPawnComponent.ReceiveOnPossessedBy
// Offset::0x3D30810;
void FEmbarkPawnComponent::ReceiveOnPossessedBy(FController* PossessedBy);


// Function  EmbarkUtils.EmbarkPawnComponent.ReceiveOnUnpossessedBy
// Offset::0x3D30810;
void FEmbarkPawnComponent::ReceiveOnUnpossessedBy(FController* UnpossessedBy);


// Function  EmbarkUtils.EmbarkPerformanceRecorderComponent.SendServerPerformanceTelemetryEvent
// Offset::0x24467D0;
void FEmbarkPerformanceRecorderComponent::SendServerPerformanceTelemetryEvent();


// Function  EmbarkUtils.EmbarkPerformanceRecorderComponent.StartRecording
// Offset::0x2446810;
void FEmbarkPerformanceRecorderComponent::StartRecording();


// Function  EmbarkUtils.EmbarkPerformanceRecorderComponent.StopRecording
// Offset::0x24467F0;
void FEmbarkPerformanceRecorderComponent::StopRecording();


// Function  EmbarkUtils.EmbarkPhysicsUtil.ConvertObjectTypeToCollisionChannel
// Offset::0x2446CE0;
enum class ECollisionChannel FEmbarkPhysicsUtil::ConvertObjectTypeToCollisionChannel(enum class EObjectTypeQuery ObjectType);


// Function  EmbarkUtils.EmbarkPhysicsUtil.ConvertToObjectType
// Offset::0x2446C50;
enum class EObjectTypeQuery FEmbarkPhysicsUtil::ConvertToObjectType(enum class ECollisionChannel CollisionChannel);


// Function  EmbarkUtils.EmbarkPhysicsUtil.ConvertToTraceType
// Offset::0x2446BC0;
enum class ETraceTypeQuery FEmbarkPhysicsUtil::ConvertToTraceType(enum class ECollisionChannel CollisionChannel);


// Function  EmbarkUtils.EmbarkPhysicsUtil.ConvertTraceTypeToCollisionChannel
// Offset::0x2446D70;
enum class ECollisionChannel FEmbarkPhysicsUtil::ConvertTraceTypeToCollisionChannel(enum class ETraceTypeQuery TraceType);


// Function  EmbarkUtils.EmbarkPhysicsUtil.EnhancedBoxOverlap
// Offset::0x2447430;
TArray<FOverlapResult> FEmbarkPhysicsUtil::EnhancedBoxOverlap(FObject* WorldContextObject,FVector BoxPos,FRotator BoxRotation,FVector BoxExtent,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ComponentClassFilter,TArray<FActor*> ActorsToIgnore);


// Function  EmbarkUtils.EmbarkPhysicsUtil.EnhancedBoxOverlapByTrace
// Offset::0x2447120;
TArray<FOverlapResult> FEmbarkPhysicsUtil::EnhancedBoxOverlapByTrace(FObject* WorldContextObject,FVector BoxPos,FRotator BoxRotation,FVector BoxExtent,enum class ETraceTypeQuery TraceChannel,FObject* ComponentClassFilter,TArray<FActor*> ActorsToIgnore);


// Function  EmbarkUtils.EmbarkPhysicsUtil.EnhancedComponentOverlap
// Offset::0x2446E00;
TArray<FOverlapResult> FEmbarkPhysicsUtil::EnhancedComponentOverlap(FObject* WorldContextObject,FPrimitiveComponent* Component,FTransform ComponentTransform,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ComponentClassFilter,TArray<FActor*> ActorsToIgnore);


// Function  EmbarkUtils.EmbarkPhysicsUtil.EnhancedSphereOverlap
// Offset::0x2447A40;
TArray<FOverlapResult> FEmbarkPhysicsUtil::EnhancedSphereOverlap(FObject* WorldContextObject,FVector SpherePos,float SphereRadius,TArray<enum class EObjectTypeQuery> ObjectTypes,FObject* ComponentClassFilter,TArray<FActor*> ActorsToIgnore);


// Function  EmbarkUtils.EmbarkPhysicsUtil.EnhancedSphereOverlapByTrace
// Offset::0x24477B0;
TArray<FOverlapResult> FEmbarkPhysicsUtil::EnhancedSphereOverlapByTrace(FObject* WorldContextObject,FVector SpherePos,float SphereRadius,enum class ETraceTypeQuery TraceChannel,FObject* ComponentClassFilter,TArray<FActor*> ActorsToIgnore);


// Function  EmbarkUtils.EmbarkPhysicsUtil.FastDisableCollisionOnBodyShapes
// Offset::0x2447FE0;
bool FEmbarkPhysicsUtil::FastDisableCollisionOnBodyShapes(FBodyInstance Instance);


// Function  EmbarkUtils.EmbarkPhysicsUtil.GetBodyInstanceMass
// Offset::0x2447D30;
float FEmbarkPhysicsUtil::GetBodyInstanceMass(FPrimitiveComponent* PrimitiveComponent,FName BoneName);


// Function  EmbarkUtils.EmbarkPhysicsUtil.GetKinematicTarget
// Offset::0x24480A0;
FTransform FEmbarkPhysicsUtil::GetKinematicTarget(FBodyInstance Body);


// Function  EmbarkUtils.EmbarkPhysicsUtil.GetSimulatingParent
// Offset::0x2447F00;
FPrimitiveComponent* FEmbarkPhysicsUtil::GetSimulatingParent(FSceneComponent* SceneComponent,FName BoneName);


// Function  EmbarkUtils.EmbarkPhysicsUtil.IsInScene
// Offset::0x24481A0;
bool FEmbarkPhysicsUtil::IsInScene(FBodyInstance Body);


// Function  EmbarkUtils.EmbarkPhysicsUtil.IsInstanceSimulating
// Offset::0x2447E20;
bool FEmbarkPhysicsUtil::IsInstanceSimulating(FPrimitiveComponent* Component,FName BoneName);


// Function  EmbarkUtils.EmbarkPhysicsUtil.SetBodyTransform
// Offset::0x2448260;
void FEmbarkPhysicsUtil::SetBodyTransform(FBodyInstance Instance,FTransform NewTransform,enum class ETeleportType Teleport,bool bAutoWake);


// Function  EmbarkUtils.EmbarkRepeatConsoleCommandSubsystem.GetRepeatingConsoleCommandSubsystem
// Offset::0x2449000;
FEmbarkRepeatConsoleCommandSubsystem* FEmbarkRepeatConsoleCommandSubsystem::GetRepeatingConsoleCommandSubsystem(FObject* InObjectContext);


// Function  EmbarkUtils.EmbarkRepeatConsoleCommandSubsystem.OnTimerReachedExecuteCommand
// Offset::0x1B91D80;
void FEmbarkRepeatConsoleCommandSubsystem::OnTimerReachedExecuteCommand(FString InConsoleCommand);


// Function  EmbarkUtils.EmbarkRepeatConsoleCommandSubsystem.StartExecutingRepeatingConsoleCommand
// Offset::0x2448EB0;
bool FEmbarkRepeatConsoleCommandSubsystem::StartExecutingRepeatingConsoleCommand(FString InConsoleCommand,float Interval);


// Function  EmbarkUtils.EmbarkRepeatConsoleCommandSubsystem.StopAllExecutingRepeatingConsoleCommand
// Offset::0x1B91E70;
void FEmbarkRepeatConsoleCommandSubsystem::StopAllExecutingRepeatingConsoleCommand();


// Function  EmbarkUtils.EmbarkRepeatConsoleCommandSubsystem.StopExecutingRepeatingConsoleCommand
// Offset::0x1B91D80;
void FEmbarkRepeatConsoleCommandSubsystem::StopExecutingRepeatingConsoleCommand(FString ConsoleCommand);


// Function  EmbarkUtils.RootMotionAnimMatchingUtils.GetTimeAtClosestPoint
// Offset::0x2449700;
float FRootMotionAnimMatchingUtils::GetTimeAtClosestPoint(TArray<FRootMotionAnimMatching_PointAtTime> PointAtTimes,FVector3f Point,float MaxTimeToQuery);


// Function  EmbarkUtils.EmbarkRootMotionUtils.AdjustWarpCurvesForPhasedEntry
// Offset::0x2449C10;
void FEmbarkRootMotionUtils::AdjustWarpCurvesForPhasedEntry(float CurrentClipTime,float StartTimeOffset,float RateScale,FWarpCurvesValue OutWarpCurves);


// Function  EmbarkUtils.EmbarkRootMotionUtils.GetCurveAlphaForPhasedEntry
// Offset::0x2449AE0;
float FEmbarkRootMotionUtils::GetCurveAlphaForPhasedEntry(float CurrentClipTime,float StartTimeOffset,float RateScale);


// Function  EmbarkUtils.EmbarkRootMotionUtils.GetInterpolatedWarpWorldTransform
// Offset::0x2449F50;
FTransform FEmbarkRootMotionUtils::GetInterpolatedWarpWorldTransform(FTransform AuxRootTransform,FWarpCurvesValue WarpCurves,FTransform WarpTargetWorldTransform,FTransform WarpStartTransform,float CapsuleHeight);


// Function  EmbarkUtils.EmbarkRootMotionUtils.GetWarpCurvesFromSeqAtTime
// Offset::0x2449D90;
FWarpCurvesValue FEmbarkRootMotionUtils::GetWarpCurvesFromSeqAtTime(FAnimSequence* Sequence,float Time,FWarpCurvesDefinition WarpCurveDefinitions,FWarpCurvesValue ValuesIfCurvesDoNotExists);


// Function  EmbarkUtils.EmbarkTeamFunctionLibrary.GetActorTeam
// Offset::0x244AAB0;
enum class EEmbarkTeamId FEmbarkTeamFunctionLibrary::GetActorTeam(FActor* TeamMember);


// Function  EmbarkUtils.EmbarkTeamFunctionLibrary.GetAttitudeBetweenActors
// Offset::0x244A8F0;
enum class ETeamAttitude FEmbarkTeamFunctionLibrary::GetAttitudeBetweenActors(FActor* AskingActor,FActor* TargetActor);


// Function  EmbarkUtils.EmbarkTeamFunctionLibrary.GetAttitudeBetweenTeams
// Offset::0x244A810;
enum class ETeamAttitude FEmbarkTeamFunctionLibrary::GetAttitudeBetweenTeams(enum class EEmbarkTeamId AskingTeam,enum class EEmbarkTeamId TargetTeam);


// Function  EmbarkUtils.EmbarkTeamFunctionLibrary.SetActorTeam
// Offset::0x244A9D0;
void FEmbarkTeamFunctionLibrary::SetActorTeam(FActor* ActorToUpdate,enum class EEmbarkTeamId NewTeam);


// Function  EmbarkUtils.EmbarkWindowWrapperMixinLibrary.CreateAndOpenWindow
// Offset::0x244B4B0;
void FEmbarkWindowWrapperMixinLibrary::CreateAndOpenWindow(FEmbarkWindowWrapper Window,FUserWidget* WidgetContent,FString WindowTitle,FVector2D WindowSize,bool bResizable);


// Function  EmbarkUtils.EmbarkWindowWrapperMixinLibrary.DestroyWindow
// Offset::0x244B2E0;
void FEmbarkWindowWrapperMixinLibrary::DestroyWindow(FEmbarkWindowWrapper Window);


// Function  EmbarkUtils.EmbarkWindowWrapperMixinLibrary.IsWindowDestroyed
// Offset::0x244B0A0;
bool FEmbarkWindowWrapperMixinLibrary::IsWindowDestroyed(FEmbarkWindowWrapper Window);


// Function  EmbarkUtils.EmbarkWindowWrapperMixinLibrary.IsWindowVisible
// Offset::0x244B220;
bool FEmbarkWindowWrapperMixinLibrary::IsWindowVisible(FEmbarkWindowWrapper Window);


// Function  EmbarkUtils.EmbarkWindowWrapperMixinLibrary.MakeFocused
// Offset::0x244B160;
void FEmbarkWindowWrapperMixinLibrary::MakeFocused(FEmbarkWindowWrapper Window);


// Function  EmbarkUtils.EmbarkWindowWrapperMixinLibrary.SetVisibility
// Offset::0x244B3A0;
void FEmbarkWindowWrapperMixinLibrary::SetVisibility(FEmbarkWindowWrapper Window,bool bVisibility);


// Function  EmbarkUtils.EmbarkUtils.AnimSequenceGetBoneIndex
// Offset::0x244F010;
bool FEmbarkUtils::AnimSequenceGetBoneIndex(FAnimSequence* Seq,FName BoneName,int32_t BoneIndex);


// Function  EmbarkUtils.EmbarkUtils.AnimSequenceGetTrackIndex
// Offset::0x244EED0;
bool FEmbarkUtils::AnimSequenceGetTrackIndex(FAnimSequence* Seq,int32_t BoneIndex,int32_t TrackIndex);


// Function  EmbarkUtils.EmbarkUtils.AreObjectPropertiesIdentical
// Offset::0x2453CA0;
bool FEmbarkUtils::AreObjectPropertiesIdentical(FObject* ObjectA,FObject* ObjectB);


// Function  EmbarkUtils.EmbarkUtils.AreObjectPropertiesIdenticalWithProperties
// Offset::0x2453B50;
bool FEmbarkUtils::AreObjectPropertiesIdenticalWithProperties(FObject* ObjectA,FObject* ObjectB,TArray<FName> OutDifferingProperties);


// Function  EmbarkUtils.EmbarkUtils.AutoplayGameMode
// Offset::0x244D920;
FString FEmbarkUtils::AutoplayGameMode();


// Function  EmbarkUtils.EmbarkUtils.BindOnReceiveEmbarkPlayerController
// Offset::0x244C6B0;
void FEmbarkUtils::BindOnReceiveEmbarkPlayerController(FObject* Object,FName FunctionName);


// Function  EmbarkUtils.EmbarkUtils.CalculateFullCDOExtent
// Offset::0x2455B50;
void FEmbarkUtils::CalculateFullCDOExtent(FActor* ActorClass,FBox OutExtent,FActor* Opt_DebugActor);


// Function  EmbarkUtils.EmbarkUtils.CapsuleOverlapByChannel
// Offset::0x24541A0;
bool FEmbarkUtils::CapsuleOverlapByChannel(FObject* WorldContextObject,FVector CapsulePos,float Radius,float HalfHeight,FQuat Rotation,enum class ECollisionChannel CollisionChannel,TArray<FActor*> ActorsToIgnore,TArray<FOverlapResult> OutOverlaps);


// Function  EmbarkUtils.EmbarkUtils.ClearAllTimersForObject
// Offset::0x244FD50;
void FEmbarkUtils::ClearAllTimersForObject(FObject* WorldContextObject,FObject* Object);


// Function  EmbarkUtils.EmbarkUtils.Conv_StringToVector
// Offset::0x2457060;
FVector FEmbarkUtils::Conv_StringToVector(FString InString);


// Function  EmbarkUtils.EmbarkUtils.CopyCollisionResponses
// Offset::0x2453EA0;
void FEmbarkUtils::CopyCollisionResponses(FPrimitiveComponent* From,FPrimitiveComponent* To);


// Function  EmbarkUtils.EmbarkUtils.CopyPropertiesBetweenObjects
// Offset::0x2450870;
void FEmbarkUtils::CopyPropertiesBetweenObjects(FObject* FromObj,FObject* ToObj);


// Function  EmbarkUtils.EmbarkUtils.CopyProperty
// Offset::0x2450950;
bool FEmbarkUtils::CopyProperty(FObject* FromObj,FString FromPropertyName,FObject* ToObj,FString ToPropertyName);


// Function  EmbarkUtils.EmbarkUtils.CreateComponentOfType
// Offset::0x2452D10;
FActorComponent* FEmbarkUtils::CreateComponentOfType(FActor* Owner,FActorComponent* ComponentType,bool bForceDisableReplication,enum class EComponentMobility Opt_SceneComponentMobility,FSceneComponent* Opt_SceneComponentParent,FName Opt_SceneComponentAttachSocket,bool bCallRegisterComponent,bool bSetNetAddressable,FName ComponentName);


// Function  EmbarkUtils.EmbarkUtils.DebugGetAllObjectsOfClass
// Offset::0x244FC30;
TArray<FObject*> FEmbarkUtils::DebugGetAllObjectsOfClass(FObject* Class,bool bIncludeDerivedClasses);


// Function  EmbarkUtils.EmbarkUtils.DeleteDeveloperSetting
// Offset::0x2457360;
void FEmbarkUtils::DeleteDeveloperSetting(FString SectionName,FString SettingsKey);


// Function  EmbarkUtils.EmbarkUtils.DestroyController
// Offset::0x24538F0;
bool FEmbarkUtils::DestroyController(FController* Controller);


// Function  EmbarkUtils.EmbarkUtils.DoesFunctionExist
// Offset::0x244FE30;
bool FEmbarkUtils::DoesFunctionExist(FObject* Obj,FName FunctionName);


// Function  EmbarkUtils.EmbarkUtils.DoesPropertyExist
// Offset::0x2450AF0;
bool FEmbarkUtils::DoesPropertyExist(FObject* Obj,FString PropertyName);


// Function  EmbarkUtils.EmbarkUtils.DrawDebugLine
// Offset::0x243B630;
void FEmbarkUtils::DrawDebugLine(FObject* WorldContextObject,FVector LineStart,FVector LineEnd,float DrawTime,float Thickness,FLinearColor Color);


// Function  EmbarkUtils.EmbarkUtils.DrawDebugSphere
// Offset::0x243B8B0;
void FEmbarkUtils::DrawDebugSphere(FObject* WorldContextObject,FVector Center,float Radius,int32_t Segments,FLinearColor SphereColor,float Duration,float Thickness);


// Function  EmbarkUtils.EmbarkUtils.DumpCallstackToLogSlow
// Offset::0x1B91E70;
void FEmbarkUtils::DumpCallstackToLogSlow();


// Function  EmbarkUtils.EmbarkUtils.EnumIndexToString
// Offset::0x2455820;
FString FEmbarkUtils::EnumIndexToString(FString EnumName,int32_t Index);


// Function  EmbarkUtils.EmbarkUtils.EnumToString
// Offset::0x2455950;
FString FEmbarkUtils::EnumToString(FString EnumName,int32_t Value);


// Function  EmbarkUtils.EmbarkUtils.EnumValueToString
// Offset::0x24556F0;
FString FEmbarkUtils::EnumValueToString(FString EnumName,int64_t Value);


// Function  EmbarkUtils.EmbarkUtils.ErrorCodePadWithZeros
// Offset::0x2456E90;
FString FEmbarkUtils::ErrorCodePadWithZeros(int32_t ErrorCode);


// Function  EmbarkUtils.EmbarkUtils.ExecuteSystemCommand
// Offset::0x244BC30;
void FEmbarkUtils::ExecuteSystemCommand(FString CommandString);


// Function  EmbarkUtils.EmbarkUtils.ForceUpdateOverlaps
// Offset::0x24540C0;
void FEmbarkUtils::ForceUpdateOverlaps(FActor* Actor,bool bNotify);


// Function  EmbarkUtils.EmbarkUtils.GetActorRelativeTransform
// Offset::0x24531D0;
bool FEmbarkUtils::GetActorRelativeTransform(FSceneComponent* SceneComponent,FTransform OutTransform);


// Function  EmbarkUtils.EmbarkUtils.GetAllAttachedActors
// Offset::0x244F9F0;
void FEmbarkUtils::GetAllAttachedActors(FActor* Actor,TArray<FActor*> OutAttachedActors);


// Function  EmbarkUtils.EmbarkUtils.GetAllEnumValueNames
// Offset::0x2455300;
TArray<FString> FEmbarkUtils::GetAllEnumValueNames(FString EnumName);


// Function  EmbarkUtils.EmbarkUtils.GetAllLevelInstancesToLoadOnClient
// Offset::0x2456B70;
TArray<FLevelInstance*> FEmbarkUtils::GetAllLevelInstancesToLoadOnClient(FWorld* PersistentWorld);


// Function  EmbarkUtils.EmbarkUtils.GetAllNotifyStatesInSequence
// Offset::0x244DC50;
TArray<FAnimNotifyEvent> FEmbarkUtils::GetAllNotifyStatesInSequence(FAnimSequence* Seq);


// Function  EmbarkUtils.EmbarkUtils.GetAllPropertyNames
// Offset::0x2450240;
void FEmbarkUtils::GetAllPropertyNames(FObject* Obj,TArray<FString> OutNames,bool bRecursivelyFindProperties,bool bOnlyBlueprintVisible,bool bDotSyntaxForNestedProperties,bool bIncludeEditorProperties,bool bIncludeASOnlyProperties);


// Function  EmbarkUtils.EmbarkUtils.GetAllSoftObjectPaths
// Offset::0x2450520;
void FEmbarkUtils::GetAllSoftObjectPaths(FObject* Object,TArray<FSoftObjectPath> OutPaths,bool bRecursivelySearchSubObjects,TArray<FObject*> IgnoreSubObjectsOfClass);


// Function  EmbarkUtils.EmbarkUtils.GetAllStreamingLevels
// Offset::0x2456AA0;
TArray<FLevelStreaming*> FEmbarkUtils::GetAllStreamingLevels(FWorld* PersistentWorld);


// Function  EmbarkUtils.EmbarkUtils.GetAllStreamingLevelsAssetPackageNames
// Offset::0x24569D0;
TArray<FName> FEmbarkUtils::GetAllStreamingLevelsAssetPackageNames(FWorld* PersistentWorld);


// Function  EmbarkUtils.EmbarkUtils.GetAllSublevelsToLoadOnClient
// Offset::0x2456C40;
TArray<FLevelStreaming*> FEmbarkUtils::GetAllSublevelsToLoadOnClient(FWorld* PersistentWorld);


// Function  EmbarkUtils.EmbarkUtils.GetAnimationSequenceCurveUIDFromName
// Offset::0x244E170;
bool FEmbarkUtils::GetAnimationSequenceCurveUIDFromName(FAnimSequence* Seq,FName CurveName,uint16_t OutUID);


// Function  EmbarkUtils.EmbarkUtils.GetAnimationSequenceCurveValueFromNameAtTime
// Offset::0x244DE50;
bool FEmbarkUtils::GetAnimationSequenceCurveValueFromNameAtTime(FAnimSequence* Seq,FName CurveName,float Time,float Out);


// Function  EmbarkUtils.EmbarkUtils.GetAnimationSequenceCurveValueFromUIDAtTime
// Offset::0x244DFE0;
bool FEmbarkUtils::GetAnimationSequenceCurveValueFromUIDAtTime(FAnimSequence* Seq,uint16_t CurveUID,float Time,float Out);


// Function  EmbarkUtils.EmbarkUtils.GetAnimSequenceBoneTransform
// Offset::0x244E2B0;
void FEmbarkUtils::GetAnimSequenceBoneTransform(FAnimSequence* Seq,int32_t TrackIndex,float Time,FTransform Out);


// Function  EmbarkUtils.EmbarkUtils.GetAnimSequenceBoneTransformFromIndexAtTime
// Offset::0x244E910;
bool FEmbarkUtils::GetAnimSequenceBoneTransformFromIndexAtTime(FAnimSequence* Seq,int32_t BoneIndex,float Time,FTransform Out,bool bApplyAdditiveAnimation);


// Function  EmbarkUtils.EmbarkUtils.GetAnimSequenceBoneTransformFromNameAtTime
// Offset::0x244EB50;
bool FEmbarkUtils::GetAnimSequenceBoneTransformFromNameAtTime(FAnimSequence* Seq,FName BoneName,float Time,FTransform Out,bool bApplyAdditiveAnimation);


// Function  EmbarkUtils.EmbarkUtils.GetAnimSequenceModelSpaceBoneTransformFromIndexAtTime
// Offset::0x244E490;
bool FEmbarkUtils::GetAnimSequenceModelSpaceBoneTransformFromIndexAtTime(FAnimSequence* Seq,int32_t BoneIndex,float Time,FTransform Out,bool bApplyAdditiveAnimation);


// Function  EmbarkUtils.EmbarkUtils.GetAnimSequenceModelSpaceBoneTransformFromNameAtTime
// Offset::0x244E6D0;
bool FEmbarkUtils::GetAnimSequenceModelSpaceBoneTransformFromNameAtTime(FAnimSequence* Seq,FName BoneName,float Time,FTransform Out,bool bApplyAdditiveAnimation);


// Function  EmbarkUtils.EmbarkUtils.GetAverageFrameTime
// Offset::0x244D090;
float FEmbarkUtils::GetAverageFrameTime(FPawn* Pawn);


// Function  EmbarkUtils.EmbarkUtils.GetBlueprintGeneratedClass
// Offset::0x24564D0;
FObject* FEmbarkUtils::GetBlueprintGeneratedClass(FBlueprint* Blueprint);


// Function  EmbarkUtils.EmbarkUtils.GetBlueprintInheritanceList
// Offset::0x2454E20;
void FEmbarkUtils::GetBlueprintInheritanceList(FObject* StartingType,TArray<FObject*> ClassInheritanceList);


// Function  EmbarkUtils.EmbarkUtils.GetBuildCL
// Offset::0x2457030;
int32_t FEmbarkUtils::GetBuildCL();


// Function  EmbarkUtils.EmbarkUtils.GetCDOComponentFromClass
// Offset::0x2456020;
FActorComponent* FEmbarkUtils::GetCDOComponentFromClass(FActor* ActorClass,FActorComponent* ComponentCDOClass);


// Function  EmbarkUtils.EmbarkUtils.GetCDOComponentsForClass
// Offset::0x2455F20;
void FEmbarkUtils::GetCDOComponentsForClass(FActor* ActorClass,TArray<FActorComponent*> OutCDOComponents);


// Function  EmbarkUtils.EmbarkUtils.GetClassPath
// Offset::0x2456750;
FString FEmbarkUtils::GetClassPath(FObject* ClassToGetPathFrom);


// Function  EmbarkUtils.EmbarkUtils.GetClientRate
// Offset::0x244F150;
void FEmbarkUtils::GetClientRate(FWorld* World,int32_t MaxClientRate,int32_t MaxInternetClientRate);


// Function  EmbarkUtils.EmbarkUtils.GetClosestBoxActorsToWorldLocation
// Offset::0x244F6C0;
void FEmbarkUtils::GetClosestBoxActorsToWorldLocation(int32_t ResultCount,float MaxDistanceToCenter,FVector WorldLocation,TArray<FActor*> InBoxes,TArray<FActor*> OutBoxes);


// Function  EmbarkUtils.EmbarkUtils.GetComponentsByClassFromCDO
// Offset::0x2453D80;
TArray<FActorComponent*> FEmbarkUtils::GetComponentsByClassFromCDO(FActor* ActorClass,FActorComponent* ComponentClass);


// Function  EmbarkUtils.EmbarkUtils.GetConfidentialSetting
// Offset::0x244BED0;
bool FEmbarkUtils::GetConfidentialSetting(int32_t Type);


// Function  EmbarkUtils.EmbarkUtils.GetConnectionJitter
// Offset::0x244D130;
float FEmbarkUtils::GetConnectionJitter(FPawn* Pawn);


// Function  EmbarkUtils.EmbarkUtils.GetConnectionURLOptions
// Offset::0x244CDD0;
TMap<FString,FString> FEmbarkUtils::GetConnectionURLOptions(FController* Controller);


// Function  EmbarkUtils.EmbarkUtils.GetEnumCount
// Offset::0x2455540;
int32_t FEmbarkUtils::GetEnumCount(FString EnumName);


// Function  EmbarkUtils.EmbarkUtils.GetEnumValueByIndex
// Offset::0x2455450;
int32_t FEmbarkUtils::GetEnumValueByIndex(FString EnumName,int32_t Index);


// Function  EmbarkUtils.EmbarkUtils.GetIncomingPacketLossAverage
// Offset::0x244D270;
float FEmbarkUtils::GetIncomingPacketLossAverage(FPawn* Pawn);


// Function  EmbarkUtils.EmbarkUtils.GetInheritenceList
// Offset::0x2454F20;
void FEmbarkUtils::GetInheritenceList(FObject* StartingType,FObject* TerminationType,TArray<FObject*> ClassInheritenceList);


// Function  EmbarkUtils.EmbarkUtils.GetInvalidId
// Offset::0x2455B20;
int32_t FEmbarkUtils::GetInvalidId();


// Function  EmbarkUtils.EmbarkUtils.GetLogTimestampFormat
// Offset::0x2453990;
FString FEmbarkUtils::GetLogTimestampFormat();


// Function  EmbarkUtils.EmbarkUtils.GetLookAt
// Offset::0x2454CE0;
bool FEmbarkUtils::GetLookAt(FPlayerController* PlayerController,FVector OutLocation,FVector OutDirection);


// Function  EmbarkUtils.EmbarkUtils.GetLookAtInfo
// Offset::0x2454AC0;
bool FEmbarkUtils::GetLookAtInfo(FPlayerController* PlayerController,float MaxDistance,FHitResult OutLookAtInfo);


// Function  EmbarkUtils.EmbarkUtils.GetNameOfPhysicalSurface
// Offset::0x2454020;
FName FEmbarkUtils::GetNameOfPhysicalSurface(enum class EPhysicalSurface SurfaceType);


// Function  EmbarkUtils.EmbarkUtils.GetNetGUIDForObject
// Offset::0x244CFF0;
int32_t FEmbarkUtils::GetNetGUIDForObject(FObject* Object);


// Function  EmbarkUtils.EmbarkUtils.GetNotifyStartAndEndTimeFromName
// Offset::0x244DB30;
TArray<FVector2D> FEmbarkUtils::GetNotifyStartAndEndTimeFromName(FAnimSequence* Seq,FName Name);


// Function  EmbarkUtils.EmbarkUtils.GetNotifyStateStartAndEndTimes
// Offset::0x244DD20;
TArray<FVector2D> FEmbarkUtils::GetNotifyStateStartAndEndTimes(FAnimSequence* Seq,FAnimNotifyState* Type);


// Function  EmbarkUtils.EmbarkUtils.GetObjectFromNetGUID
// Offset::0x244CF10;
FObject* FEmbarkUtils::GetObjectFromNetGUID(FObject* WorldContextObject,int32_t NetGUID);


// Function  EmbarkUtils.EmbarkUtils.GetOutgoingPacketLossAverage
// Offset::0x244D1D0;
float FEmbarkUtils::GetOutgoingPacketLossAverage(FPawn* Pawn);


// Function  EmbarkUtils.EmbarkUtils.GetParentForCDOComponent
// Offset::0x2455D60;
FSceneComponent* FEmbarkUtils::GetParentForCDOComponent(FObject* BPClass,FSceneComponent* CDOComponent);


// Function  EmbarkUtils.EmbarkUtils.GetPhysicalSurfaceFromName
// Offset::0x2453F80;
enum class EPhysicalSurface FEmbarkUtils::GetPhysicalSurfaceFromName(FName SurfaceName);


// Function  EmbarkUtils.EmbarkUtils.GetPlatformTimeMSTwoDecimals
// Offset::0x244C9A0;
int64_t FEmbarkUtils::GetPlatformTimeMSTwoDecimals();


// Function  EmbarkUtils.EmbarkUtils.GetPlatformUserName
// Offset::0x2456F60;
FString FEmbarkUtils::GetPlatformUserName(bool bOnlyAlphaNumeric);


// Function  EmbarkUtils.EmbarkUtils.GetPlayerControllerInWorld
// Offset::0x244C410;
FPlayerController* FEmbarkUtils::GetPlayerControllerInWorld(FObject* WorldContextObject,uint64_t PlayerIndex);


// Function  EmbarkUtils.EmbarkUtils.GetPropertyType
// Offset::0x2452750;
enum class EEmbarkPropertyTypes FEmbarkUtils::GetPropertyType(FObject* Obj,FString PropertyName);


// Function  EmbarkUtils.EmbarkUtils.GetPropertyTypeNameAsString
// Offset::0x24525F0;
bool FEmbarkUtils::GetPropertyTypeNameAsString(FObject* Obj,FString PropertyName,FString OutPropertyTypeName);


// Function  EmbarkUtils.EmbarkUtils.GetPropertyValueAsString
// Offset::0x2450710;
bool FEmbarkUtils::GetPropertyValueAsString(FObject* Obj,FString PropertyName,FString OutPropertyValue);


// Function  EmbarkUtils.EmbarkUtils.GetRunAngelscriptCodeStringEntryFuncDecl
// Offset::0x244BCD0;
FString FEmbarkUtils::GetRunAngelscriptCodeStringEntryFuncDecl(FObject* OptionalObject);


// Function  EmbarkUtils.EmbarkUtils.GetSanitizedComponentTemplateName
// Offset::0x2455130;
FString FEmbarkUtils::GetSanitizedComponentTemplateName(FString ComponentTemplateName);


// Function  EmbarkUtils.EmbarkUtils.GetSanitizedComponentTemplateNameByObject
// Offset::0x2455060;
FString FEmbarkUtils::GetSanitizedComponentTemplateNameByObject(FObject* ComponentTemplateObject);


// Function  EmbarkUtils.EmbarkUtils.GetSCSNodeFromCDOComponent
// Offset::0x2455E40;
FSCS_Node* FEmbarkUtils::GetSCSNodeFromCDOComponent(FObject* BPClass,FSceneComponent* CDOComponent);


// Function  EmbarkUtils.EmbarkUtils.GetServerTimestamp
// Offset::0x2453AB0;
bool FEmbarkUtils::GetServerTimestamp(float OutServerTime);


// Function  EmbarkUtils.EmbarkUtils.GetServerTimestampAccurate
// Offset::0x2453A10;
float FEmbarkUtils::GetServerTimestampAccurate(FObject* WorldContextObject);


// Function  EmbarkUtils.EmbarkUtils.GetSkeletalMeshRefPoseTransform
// Offset::0x244ED90;
FTransform FEmbarkUtils::GetSkeletalMeshRefPoseTransform(FSkeletalMesh* SkeletalMesh,FName BoneName);


// Function  EmbarkUtils.EmbarkUtils.GetSocketRelativeTransform
// Offset::0x2453040;
bool FEmbarkUtils::GetSocketRelativeTransform(FStaticMeshComponent* StaticMeshComponent,FName InSocketName,FTransform OutRelativeTransform);


// Function  EmbarkUtils.EmbarkUtils.GetTextPropertyByName
// Offset::0x2450BE0;
FText FEmbarkUtils::GetTextPropertyByName(FObject* Object,FString PropertyName);


// Function  EmbarkUtils.EmbarkUtils.GetUniqueId
// Offset::0x2455A80;
int32_t FEmbarkUtils::GetUniqueId(FObject* QueryObject);


// Function  EmbarkUtils.EmbarkUtils.GetVertexColorData
// Offset::0x244C1B0;
TMap<FVector,FColor> FEmbarkUtils::GetVertexColorData(FSkeletalMesh* SkeletalMesh,uint32_t PaintingMeshLODIndex);


// Function  EmbarkUtils.EmbarkUtils.IsAnonymousUser
// Offset::0x244D8F0;
bool FEmbarkUtils::IsAnonymousUser();


// Function  EmbarkUtils.EmbarkUtils.IsAutoplay
// Offset::0x244D9A0;
bool FEmbarkUtils::IsAutoplay();


// Function  EmbarkUtils.EmbarkUtils.IsLevelInstanceLoaded
// Offset::0x2456D10;
bool FEmbarkUtils::IsLevelInstanceLoaded(FLevelInstance* LevelInstance);


// Function  EmbarkUtils.EmbarkUtils.IsPropertyIdentical
// Offset::0x24500A0;
bool FEmbarkUtils::IsPropertyIdentical(FObject* ObjA,FString PropertyNameA,FObject* ObjB,FString PropertyNameB);


// Function  EmbarkUtils.EmbarkUtils.IsRepGraphNetRelevant
// Offset::0x244CCA0;
bool FEmbarkUtils::IsRepGraphNetRelevant(FPawn* Pawn,FActor* ActorToCheck,bool bIncludeDormant);


// Function  EmbarkUtils.EmbarkUtils.IsRunningTests
// Offset::0x243E320;
bool FEmbarkUtils::IsRunningTests();


// Function  EmbarkUtils.EmbarkUtils.IsStaticJITTranspiledCodeLoaded
// Offset::0x2456820;
bool FEmbarkUtils::IsStaticJITTranspiledCodeLoaded();


// Function  EmbarkUtils.EmbarkUtils.IsStreamingLevelPending
// Offset::0x2456930;
bool FEmbarkUtils::IsStreamingLevelPending(FLevelStreaming* LevelStreaming);


// Function  EmbarkUtils.EmbarkUtils.IsUnattended
// Offset::0x244D8C0;
bool FEmbarkUtils::IsUnattended();


// Function  EmbarkUtils.EmbarkUtils.IsWorldDistanceDependentSubLevel
// Offset::0x2456850;
bool FEmbarkUtils::IsWorldDistanceDependentSubLevel(FWorld* PersistentWorld,FName SubLevelPackageName);


// Function  EmbarkUtils.EmbarkUtils.LineTraceSingleBatched
// Offset::0x2453310;
bool FEmbarkUtils::LineTraceSingleBatched(FObject* WorldContextObject,TArray<FVector> Start,TArray<FVector> End,enum class ETraceTypeQuery TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,TArray<FHitResult> OutHits,bool bIgnoreSelf,FLinearColor TraceColor,FLinearColor TraceHitColor,float DrawTime);


// Function  EmbarkUtils.EmbarkUtils.LoadAssetAsync
// Offset::0x2456330;
void FEmbarkUtils::LoadAssetAsync(FSoftObjectPath ObjectPath,FObject* CallbackObject,FName CallbackMethodName);


// Function  EmbarkUtils.EmbarkUtils.LoadAssetsAsync
// Offset::0x2456100;
void FEmbarkUtils::LoadAssetsAsync(TArray<FSoftObjectPath> ObjectPaths,FObject* CallbackObject,FName CallbackMethodName);


// Function  EmbarkUtils.EmbarkUtils.LoadAutoExec
// Offset::0x24574F0;
bool FEmbarkUtils::LoadAutoExec(TArray<FString> Commands);


// Function  EmbarkUtils.EmbarkUtils.LoadClassFromString
// Offset::0x2456660;
FObject* FEmbarkUtils::LoadClassFromString(FString ClassPath);


// Function  EmbarkUtils.EmbarkUtils.LoadDeveloperFloatSetting
// Offset::0x2457970;
bool FEmbarkUtils::LoadDeveloperFloatSetting(FString SectionName,FString SettingsKey,float OutSetting);


// Function  EmbarkUtils.EmbarkUtils.LoadDeveloperIntSetting
// Offset::0x2457780;
bool FEmbarkUtils::LoadDeveloperIntSetting(FString SectionName,FString SettingsKey,int32_t OutSetting);


// Function  EmbarkUtils.EmbarkUtils.LoadDeveloperSection
// Offset::0x24575E0;
bool FEmbarkUtils::LoadDeveloperSection(FString SectionName,TArray<FString> OutSectionContents);


// Function  EmbarkUtils.EmbarkUtils.LoadDeveloperStringSetting
// Offset::0x2457B60;
bool FEmbarkUtils::LoadDeveloperStringSetting(FString SectionName,FString SettingsKey,FString OutSetting);


// Function  EmbarkUtils.EmbarkUtils.LoadEngineStringSetting
// Offset::0x2457160;
bool FEmbarkUtils::LoadEngineStringSetting(FString SectionName,FString SettingsKey,FString OutSetting);


// Function  EmbarkUtils.EmbarkUtils.LoadFloatConsoleVariable
// Offset::0x2455210;
float FEmbarkUtils::LoadFloatConsoleVariable(FString ConsoleVariableName);


// Function  EmbarkUtils.EmbarkUtils.MakeUniqueObjectName
// Offset::0x244FAF0;
FName FEmbarkUtils::MakeUniqueObjectName(FObject* Parent,FObject* Class,FName InBaseName);


// Function  EmbarkUtils.EmbarkUtils.OverrideClientRate
// Offset::0x244F290;
void FEmbarkUtils::OverrideClientRate(FWorld* World,int32_t MaxClientRate,int32_t MaxInternetClientRate);


// Function  EmbarkUtils.EmbarkUtils.RegisterComponent
// Offset::0x2452C80;
void FEmbarkUtils::RegisterComponent(FActorComponent* ComponentToRegister);


// Function  EmbarkUtils.EmbarkUtils.ReinitializeProperties
// Offset::0x244C0B0;
void FEmbarkUtils::ReinitializeProperties(FObject* Source,FObject* Target);


// Function  EmbarkUtils.EmbarkUtils.ReinitSkeletalMeshComponentAnim
// Offset::0x244C000;
void FEmbarkUtils::ReinitSkeletalMeshComponentAnim(FSkeletalMeshComponent* SkeletalMeshComponent);


// Function  EmbarkUtils.EmbarkUtils.RemoveSCSNodeFromBlueprint
// Offset::0x2455C80;
void FEmbarkUtils::RemoveSCSNodeFromBlueprint(FObject* Class,FActorComponent* RemoveNodeMatchingThisComponentTemplate);


// Function  EmbarkUtils.EmbarkUtils.RemoveWorldPIEPrefix
// Offset::0x2456DB0;
FString FEmbarkUtils::RemoveWorldPIEPrefix(FString WorldPackagePath);


// Function  EmbarkUtils.EmbarkUtils.ResetObjectPropertiesToCDO
// Offset::0x2450000;
bool FEmbarkUtils::ResetObjectPropertiesToCDO(FObject* Object);


// Function  EmbarkUtils.EmbarkUtils.ResetObjectPropertyToCDO
// Offset::0x244FF10;
bool FEmbarkUtils::ResetObjectPropertyToCDO(FObject* Object,FString PropertyName);


// Function  EmbarkUtils.EmbarkUtils.ResolveClassFromString
// Offset::0x2456570;
FObject* FEmbarkUtils::ResolveClassFromString(FString ClassPath);


// Function  EmbarkUtils.EmbarkUtils.RunAngelscriptCodeString
// Offset::0x244BDA0;
FString FEmbarkUtils::RunAngelscriptCodeString(FString CodeString,FObject* OptionalObject);


// Function  EmbarkUtils.EmbarkUtils.SaveAutoExec
// Offset::0x2457D60;
bool FEmbarkUtils::SaveAutoExec(FString NewAutoExec);


// Function  EmbarkUtils.EmbarkUtils.SaveDeveloperFloatSetting
// Offset::0x2458030;
void FEmbarkUtils::SaveDeveloperFloatSetting(FString SectionName,FString SettingsKey,float Setting);


// Function  EmbarkUtils.EmbarkUtils.SaveDeveloperIntSetting
// Offset::0x2457E50;
void FEmbarkUtils::SaveDeveloperIntSetting(FString SectionName,FString SettingsKey,int32_t Setting);


// Function  EmbarkUtils.EmbarkUtils.SaveDeveloperStringSetting
// Offset::0x2458220;
void FEmbarkUtils::SaveDeveloperStringSetting(FString SectionName,FString SettingsKey,FString Setting);


// Function  EmbarkUtils.EmbarkUtils.SegmentCapsuleOverlapActors
// Offset::0x24547A0;
bool FEmbarkUtils::SegmentCapsuleOverlapActors(FObject* WorldContextObject,FVector CapsuleStart,FVector CapsuleEnd,float Radius,enum class ECollisionChannel CollisionChannel,TArray<FActor*> ActorsToIgnore,TArray<FActor*> OutActors);


// Function  EmbarkUtils.EmbarkUtils.SetBoolPropertyByName
// Offset::0x2451FC0;
void FEmbarkUtils::SetBoolPropertyByName(FObject* Object,FString PropertyName,bool Value);


// Function  EmbarkUtils.EmbarkUtils.SetBytePropertyByName
// Offset::0x2452240;
void FEmbarkUtils::SetBytePropertyByName(FObject* Object,FString PropertyName,char Value);


// Function  EmbarkUtils.EmbarkUtils.SetClassPropertyByName
// Offset::0x2451D40;
void FEmbarkUtils::SetClassPropertyByName(FObject* Object,FString PropertyName,FObject* Value);


// Function  EmbarkUtils.EmbarkUtils.SetColorPropertyByName
// Offset::0x2451150;
void FEmbarkUtils::SetColorPropertyByName(FObject* Object,FString PropertyName,FColor Value);


// Function  EmbarkUtils.EmbarkUtils.SetFloatPropertyByName
// Offset::0x2452100;
void FEmbarkUtils::SetFloatPropertyByName(FObject* Object,FString PropertyName,double Value);


// Function  EmbarkUtils.EmbarkUtils.SetGameplayTagPropertyByName
// Offset::0x2450E70;
void FEmbarkUtils::SetGameplayTagPropertyByName(FObject* Object,FString PropertyName,FGameplayTag Value);


// Function  EmbarkUtils.EmbarkUtils.SetHighTickPrioForComponent
// Offset::0x244C900;
void FEmbarkUtils::SetHighTickPrioForComponent(FActorComponent* ActorComponent);


// Function  EmbarkUtils.EmbarkUtils.SetInt64PropertyByName
// Offset::0x2452370;
void FEmbarkUtils::SetInt64PropertyByName(FObject* Object,FString PropertyName,int64_t Value);


// Function  EmbarkUtils.EmbarkUtils.SetIntPropertyByName
// Offset::0x24524B0;
void FEmbarkUtils::SetIntPropertyByName(FObject* Object,FString PropertyName,int32_t Value);


// Function  EmbarkUtils.EmbarkUtils.SetLinearColorPropertyByName
// Offset::0x2451290;
void FEmbarkUtils::SetLinearColorPropertyByName(FObject* Object,FString PropertyName,FLinearColor Value);


// Function  EmbarkUtils.EmbarkUtils.SetNamePropertyByName
// Offset::0x2451C00;
void FEmbarkUtils::SetNamePropertyByName(FObject* Object,FString PropertyName,FName Value);


// Function  EmbarkUtils.EmbarkUtils.SetObjectPropertyByName
// Offset::0x2451E80;
void FEmbarkUtils::SetObjectPropertyByName(FObject* Object,FString PropertyName,FObject* Value);


// Function  EmbarkUtils.EmbarkUtils.SetPropertyByNameFromString
// Offset::0x2450D20;
bool FEmbarkUtils::SetPropertyByNameFromString(FObject* Object,FString PropertyName,FString Value);


// Function  EmbarkUtils.EmbarkUtils.SetRotatorPropertyByName
// Offset::0x24513D0;
void FEmbarkUtils::SetRotatorPropertyByName(FObject* Object,FString PropertyName,FRotator Value);


// Function  EmbarkUtils.EmbarkUtils.SetSoftClassPropertyByName
// Offset::0x2451900;
void FEmbarkUtils::SetSoftClassPropertyByName(FObject* Object,FString PropertyName,TSoftClassPtr<UObject> Value);


// Function  EmbarkUtils.EmbarkUtils.SetSoftObjectPropertyByName
// Offset::0x2451A80;
void FEmbarkUtils::SetSoftObjectPropertyByName(FObject* Object,FString PropertyName,TSoftObjectPtr<FObject> Value);


// Function  EmbarkUtils.EmbarkUtils.SetStringPropertyByName
// Offset::0x24517C0;
void FEmbarkUtils::SetStringPropertyByName(FObject* Object,FString PropertyName,FString Value);


// Function  EmbarkUtils.EmbarkUtils.SetTextPropertyByName
// Offset::0x2451650;
void FEmbarkUtils::SetTextPropertyByName(FObject* Object,FString PropertyName,FText Value);


// Function  EmbarkUtils.EmbarkUtils.SetTickOrderForComponent
// Offset::0x244C800;
void FEmbarkUtils::SetTickOrderForComponent(FActorComponent* ActorComponent,uint64_t TickOrder);


// Function  EmbarkUtils.EmbarkUtils.SetTimer
// Offset::0x244CA70;
FTimerHandle FEmbarkUtils::SetTimer(FObject* Object,FName FunctionName,float Time,bool bLooping,float InitialStartDelay,float InitialStartDelayVariance);


// Function  EmbarkUtils.EmbarkUtils.SetTimerDelegateForNextTick
// Offset::0x244D400;
FTimerHandle FEmbarkUtils::SetTimerDelegateForNextTick(FDelegate Delegate);


// Function  EmbarkUtils.EmbarkUtils.SetTimerDelegateForNextTickByFunctionName
// Offset::0x244D310;
FTimerHandle FEmbarkUtils::SetTimerDelegateForNextTickByFunctionName(FObject* Object,FName FunctionName);


// Function  EmbarkUtils.EmbarkUtils.SetTransformPropertyByName
// Offset::0x2450FB0;
void FEmbarkUtils::SetTransformPropertyByName(FObject* Object,FString PropertyName,FTransform Value);


// Function  EmbarkUtils.EmbarkUtils.SetVectorPropertyByName
// Offset::0x2451510;
void FEmbarkUtils::SetVectorPropertyByName(FObject* Object,FString PropertyName,FVector Value);


// Function  EmbarkUtils.EmbarkUtils.SimulateKeyInput
// Offset::0x244D7A0;
void FEmbarkUtils::SimulateKeyInput(FKey Key,enum class EInputEvent InputEvent);


// Function  EmbarkUtils.EmbarkUtils.SimulateMouseClick
// Offset::0x244D680;
void FEmbarkUtils::SimulateMouseClick(FKey MouseButton,enum class EInputEvent InputEvent);


// Function  EmbarkUtils.EmbarkUtils.SimulateMouseLMBDown
// Offset::0x244D660;
void FEmbarkUtils::SimulateMouseLMBDown();


// Function  EmbarkUtils.EmbarkUtils.SimulateMouseLMBUp
// Offset::0x244D640;
void FEmbarkUtils::SimulateMouseLMBUp();


// Function  EmbarkUtils.EmbarkUtils.SimulateMouseMoved
// Offset::0x244D4D0;
void FEmbarkUtils::SimulateMouseMoved(int32_t X,int32_t Y,bool bActuallyMoveCursor);


// Function  EmbarkUtils.EmbarkUtils.SimulateMouseRMBDown
// Offset::0x244D620;
void FEmbarkUtils::SimulateMouseRMBDown();


// Function  EmbarkUtils.EmbarkUtils.SimulateMouseRMBUp
// Offset::0x244D600;
void FEmbarkUtils::SimulateMouseRMBUp();


// Function  EmbarkUtils.EmbarkUtils.SimulateTicksOnActor
// Offset::0x2452B50;
void FEmbarkUtils::SimulateTicksOnActor(FActor* Actor,float TotalTime,float TimeStepTarget);


// Function  EmbarkUtils.EmbarkUtils.SimulateTicksOnActorComponent
// Offset::0x2452A20;
void FEmbarkUtils::SimulateTicksOnActorComponent(FActorComponent* ActorComponent,float TotalTime,float TimeStepTarget);


// Function  EmbarkUtils.EmbarkUtils.SkeletalMeshComponentQueueReinitializeAnimationOnNextUpdate
// Offset::0x244BF70;
void FEmbarkUtils::SkeletalMeshComponentQueueReinitializeAnimationOnNextUpdate(FSkeletalMeshComponent* SkeletalMeshComponent);


// Function  EmbarkUtils.EmbarkUtils.SortActorsByDistance
// Offset::0x244F8F0;
void FEmbarkUtils::SortActorsByDistance(FVector Location,TArray<FActor*> Actors);


// Function  EmbarkUtils.EmbarkUtils.SortLocationsByDistance
// Offset::0x244F540;
void FEmbarkUtils::SortLocationsByDistance(FVector Origin,TArray<FVector> Locations,TArray<int32_t> OutIndices);


// Function  EmbarkUtils.EmbarkUtils.SortLocationsByDistance2D
// Offset::0x244F3C0;
void FEmbarkUtils::SortLocationsByDistance2D(FVector Origin,TArray<FVector> Locations,TArray<int32_t> OutIndices);


// Function  EmbarkUtils.EmbarkUtils.SphereOverlapByChannel
// Offset::0x2454520;
bool FEmbarkUtils::SphereOverlapByChannel(FObject* WorldContextObject,FVector SpherePos,float SphereRadius,enum class ECollisionChannel CollisionChannel,TArray<FActor*> ActorsToIgnore,TArray<FOverlapResult> OutOverlaps);


// Function  EmbarkUtils.EmbarkUtils.StartPerfTimer
// Offset::0x244DA80;
void FEmbarkUtils::StartPerfTimer(FPerfTimerData Data);


// Function  EmbarkUtils.EmbarkUtils.StopPerfTimer
// Offset::0x244D9D0;
float FEmbarkUtils::StopPerfTimer(FPerfTimerData Data);


// Function  EmbarkUtils.EmbarkUtils.StringToEnumIdx
// Offset::0x24555F0;
int32_t FEmbarkUtils::StringToEnumIdx(FString EnumName,FString Value);


// Function  EmbarkUtils.EmbarkUtils.TeleportActor
// Offset::0x2452840;
bool FEmbarkUtils::TeleportActor(FActor* Actor,FVector DestLocation,FRotator DestRotation,bool bIsATest,bool bNoCheck);


// Function  EmbarkUtils.EmbarkUtils.UnbindOnReceiveEmbarkPlayerController
// Offset::0x244C500;
void FEmbarkUtils::UnbindOnReceiveEmbarkPlayerController(FObject* Object,FName FunctionName);


// Function  EmbarkDynamics.EmbarkDynamicsDebugDraw.DrawOverlappingCones
// Offset::0x247AEC0;
void FEmbarkDynamicsDebugDraw::DrawOverlappingCones(FWorld* World,FTransform Origin,TArray<FConeParameters> ConeConstraints,float Length,int32_t NumSegments);


// Function  EmbarkDynamics.EmbarkDynamicsDebugDraw.DrawSpringGraph
// Offset::0x247B110;
void FEmbarkDynamicsDebugDraw::DrawSpringGraph(FWorld* World,FSpringPlot LastPlot,FVector GraphOrigin,FLinearColor FirstColor,FLinearColor LastColor,float FirstLineThickness,float LastLineThickness,float GraphSize);


// Function  EmbarkDynamics.EmbarkPendulumMixinLibrary.DebugDraw
// Offset::0x247C770;
void FEmbarkPendulumMixinLibrary::DebugDraw(FEmbarkPendulum Pend,FWorld* World,FTransform Origin,FTransform WorldOffset);


// Function  EmbarkDynamics.EmbarkPendulumMixinLibrary.GetResult
// Offset::0x247C3E0;
FTransform FEmbarkPendulumMixinLibrary::GetResult(FEmbarkPendulum Pend);


// Function  EmbarkDynamics.EmbarkPendulumMixinLibrary.GetVelocity
// Offset::0x247C100;
FVector FEmbarkPendulumMixinLibrary::GetVelocity(FEmbarkPendulum Pend);


// Function  EmbarkDynamics.EmbarkPendulumMixinLibrary.PushParticle
// Offset::0x247BA40;
void FEmbarkPendulumMixinLibrary::PushParticle(FEmbarkPendulum Pend,FVector PushVector);


// Function  EmbarkDynamics.EmbarkPendulumMixinLibrary.Reset
// Offset::0x247D0A0;
void FEmbarkPendulumMixinLibrary::Reset(FEmbarkPendulum Pend,FTransform Origin);


// Function  EmbarkDynamics.EmbarkPendulumMixinLibrary.SetVelocity
// Offset::0x247BDC0;
void FEmbarkPendulumMixinLibrary::SetVelocity(FEmbarkPendulum Pend,FVector InVelocity);


// Function  EmbarkDynamics.EmbarkPendulumMixinLibrary.Update
// Offset::0x247CBF0;
FTransform FEmbarkPendulumMixinLibrary::Update(FEmbarkPendulum Pend,FTransform Origin,float DeltaSeconds,FVector ExternalForces);


// Function  EmbarkDynamics.SimpleExactDamperMixinLibrary.GetHalfLife
// Offset::0x247E370;
float FSimpleExactDamperMixinLibrary::GetHalfLife(FSimpleExactDamper SED);


// Function  EmbarkDynamics.SimpleExactDamperMixinLibrary.GetValue
// Offset::0x247E540;
float FSimpleExactDamperMixinLibrary::GetValue(FSimpleExactDamper SED);


// Function  EmbarkDynamics.SimpleExactDamperMixinLibrary.GetVelocity
// Offset::0x247E160;
float FSimpleExactDamperMixinLibrary::GetVelocity(FSimpleExactDamper SED);


// Function  EmbarkDynamics.SimpleExactDamperMixinLibrary.Init
// Offset::0x247E600;
void FSimpleExactDamperMixinLibrary::Init(FSimpleExactDamper SED,float InitValue,float InitVelocity);


// Function  EmbarkDynamics.SimpleExactDamperMixinLibrary.Reset
// Offset::0x247DF90;
void FSimpleExactDamperMixinLibrary::Reset(FSimpleExactDamper SED);


// Function  EmbarkDynamics.SimpleExactDamperMixinLibrary.SetHalfLife
// Offset::0x247E220;
void FSimpleExactDamperMixinLibrary::SetHalfLife(FSimpleExactDamper SED,float InHalfLife);


// Function  EmbarkDynamics.SimpleExactDamperMixinLibrary.SetValue
// Offset::0x247E430;
void FSimpleExactDamperMixinLibrary::SetValue(FSimpleExactDamper SED,float InValue);


// Function  EmbarkDynamics.SimpleExactDamperMixinLibrary.SetVelocity
// Offset::0x247E060;
void FSimpleExactDamperMixinLibrary::SetVelocity(FSimpleExactDamper SED,float InVelocity);


// Function  EmbarkDynamics.SimpleExactDamperMixinLibrary.Update
// Offset::0x247DD10;
float FSimpleExactDamperMixinLibrary::Update(FSimpleExactDamper SED,float DeltaSeconds);


// Function  EmbarkDynamics.SimpleExactDamperMixinLibrary.UpdateWithTarget
// Offset::0x247DA40;
float FSimpleExactDamperMixinLibrary::UpdateWithTarget(FSimpleExactDamper SED,float NewTarget,float DeltaSeconds);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.GetSmoothness
// Offset::0x247F7E0;
float FDoubleExactDamperMixinLibrary::GetSmoothness(FDoubleExactDamper DED);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.GetTarget
// Offset::0x247FAF0;
float FDoubleExactDamperMixinLibrary::GetTarget(FDoubleExactDamper DED);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.GetValue
// Offset::0x247F8C0;
float FDoubleExactDamperMixinLibrary::GetValue(FDoubleExactDamper DED);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.GetVelocity
// Offset::0x247F570;
float FDoubleExactDamperMixinLibrary::GetVelocity(FDoubleExactDamper DED);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.Init
// Offset::0x247FD00;
void FDoubleExactDamperMixinLibrary::Init(FDoubleExactDamper DED,float InitValue,float InitVelocity);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.Reset
// Offset::0x247F480;
void FDoubleExactDamperMixinLibrary::Reset(FDoubleExactDamper DED);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.SetSmoothness
// Offset::0x247F650;
void FDoubleExactDamperMixinLibrary::SetSmoothness(FDoubleExactDamper DED,float InSmoothness);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.SetTarget
// Offset::0x247FBD0;
void FDoubleExactDamperMixinLibrary::SetTarget(FDoubleExactDamper DED,float Target);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.Teleport
// Offset::0x247F9A0;
void FDoubleExactDamperMixinLibrary::Teleport(FDoubleExactDamper DED,float InValue);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.Update
// Offset::0x247F1F0;
float FDoubleExactDamperMixinLibrary::Update(FDoubleExactDamper DED,float DeltaSeconds);


// Function  EmbarkDynamics.DoubleExactDamperMixinLibrary.UpdateWithTarget
// Offset::0x247EF10;
float FDoubleExactDamperMixinLibrary::UpdateWithTarget(FDoubleExactDamper DED,float NewTarget,float DeltaSeconds);


// Function  EmbarkDynamics.DoubleExactDamperVecMixinLibrary.GetSmoothness
// Offset::0x2481040;
FVector FDoubleExactDamperVecMixinLibrary::GetSmoothness(FDoubleExactDamperVec DED);


// Function  EmbarkDynamics.DoubleExactDamperVecMixinLibrary.GetTarget
// Offset::0x2481360;
FVector FDoubleExactDamperVecMixinLibrary::GetTarget(FDoubleExactDamperVec DED);


// Function  EmbarkDynamics.DoubleExactDamperVecMixinLibrary.GetValue
// Offset::0x24811D0;
FVector FDoubleExactDamperVecMixinLibrary::GetValue(FDoubleExactDamperVec DED);


// Function  EmbarkDynamics.DoubleExactDamperVecMixinLibrary.GetVelocity
// Offset::0x2480C60;
FVector FDoubleExactDamperVecMixinLibrary::GetVelocity(FDoubleExactDamperVec DED);


// Function  EmbarkDynamics.DoubleExactDamperVecMixinLibrary.Init
// Offset::0x24816E0;
void FDoubleExactDamperVecMixinLibrary::Init(FDoubleExactDamperVec DED,FVector InitValue,FVector InitVelocity);


// Function  EmbarkDynamics.DoubleExactDamperVecMixinLibrary.Reset
// Offset::0x2480AD0;
void FDoubleExactDamperVecMixinLibrary::Reset(FDoubleExactDamperVec DED);


// Function  EmbarkDynamics.DoubleExactDamperVecMixinLibrary.SetSmoothness
// Offset::0x2480DF0;
void FDoubleExactDamperVecMixinLibrary::SetSmoothness(FDoubleExactDamperVec DED,FVector InSmoothness);


// Function  EmbarkDynamics.DoubleExactDamperVecMixinLibrary.SetTarget
// Offset::0x24814F0;
void FDoubleExactDamperVecMixinLibrary::SetTarget(FDoubleExactDamperVec DED,FVector Target);


// Function  EmbarkDynamics.DoubleExactDamperVecMixinLibrary.Update
// Offset::0x2480900;
FVector FDoubleExactDamperVecMixinLibrary::Update(FDoubleExactDamperVec DED,float DeltaSeconds);


// Function  EmbarkDynamics.DoubleExactDamperVecMixinLibrary.UpdateWithTarget
// Offset::0x24806C0;
FVector FDoubleExactDamperVecMixinLibrary::UpdateWithTarget(FDoubleExactDamperVec DED,FVector NewTarget,float DeltaSeconds);


// Function  EmbarkDynamics.SODSpringFloatMixinLibrary.Compute
// Offset::0x2482460;
void FSODSpringFloatMixinLibrary::Compute(FSODSpringFloat SOD,float Frequency,float Damping,float Response);


// Function  EmbarkDynamics.SODSpringFloatMixinLibrary.GetAcceleration
// Offset::0x2482870;
float FSODSpringFloatMixinLibrary::GetAcceleration(FSODSpringFloat SOD);


// Function  EmbarkDynamics.SODSpringFloatMixinLibrary.GetValue
// Offset::0x2482C30;
float FSODSpringFloatMixinLibrary::GetValue(FSODSpringFloat SOD);


// Function  EmbarkDynamics.SODSpringFloatMixinLibrary.GetVelocity
// Offset::0x2482A50;
float FSODSpringFloatMixinLibrary::GetVelocity(FSODSpringFloat SOD);


// Function  EmbarkDynamics.SODSpringFloatMixinLibrary.Reset
// Offset::0x24827A0;
void FSODSpringFloatMixinLibrary::Reset(FSODSpringFloat SOD);


// Function  EmbarkDynamics.SODSpringFloatMixinLibrary.SetParameters
// Offset::0x2482310;
void FSODSpringFloatMixinLibrary::SetParameters(FSODSpringFloat SOD,FSecondOrderDynamicParameters InParams);


// Function  EmbarkDynamics.SODSpringFloatMixinLibrary.SetValue
// Offset::0x2482B20;
void FSODSpringFloatMixinLibrary::SetValue(FSODSpringFloat SOD,float InValue);


// Function  EmbarkDynamics.SODSpringFloatMixinLibrary.SetVelocity
// Offset::0x2482940;
void FSODSpringFloatMixinLibrary::SetVelocity(FSODSpringFloat SOD,float InVelocity);


// Function  EmbarkDynamics.SODSpringFloatMixinLibrary.TeleportTo
// Offset::0x2482680;
void FSODSpringFloatMixinLibrary::TeleportTo(FSODSpringFloat SOD,float NewValue);


// Function  EmbarkDynamics.SODSpringFloatMixinLibrary.Update
// Offset::0x24821A0;
void FSODSpringFloatMixinLibrary::Update(FSODSpringFloat SOD,float NewTarget,float DeltaSeconds);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.Compute
// Offset::0x2483790;
void FSODSpringVectorMixinLibrary::Compute(FSODSpringVector SOD,float Frequency,float Damping,float Response);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.GetAcceleration
// Offset::0x2483E40;
FVector FSODSpringVectorMixinLibrary::GetAcceleration(FSODSpringVector SOD);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.GetValue
// Offset::0x2484330;
FVector FSODSpringVectorMixinLibrary::GetValue(FSODSpringVector SOD);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.GetVelocity
// Offset::0x24840C0;
FVector FSODSpringVectorMixinLibrary::GetVelocity(FSODSpringVector SOD);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.Reset
// Offset::0x2483D40;
void FSODSpringVectorMixinLibrary::Reset(FSODSpringVector SOD);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.ResetTo
// Offset::0x2483B90;
void FSODSpringVectorMixinLibrary::ResetTo(FSODSpringVector SOD,FVector InResetTo);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.SetParameters
// Offset::0x2483610;
void FSODSpringVectorMixinLibrary::SetParameters(FSODSpringVector SOD,FSecondOrderDynamicParameters InParams);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.SetValue
// Offset::0x24841E0;
void FSODSpringVectorMixinLibrary::SetValue(FSODSpringVector SOD,FVector InValue);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.SetVelocity
// Offset::0x2483F60;
void FSODSpringVectorMixinLibrary::SetVelocity(FSODSpringVector SOD,FVector InVelocity);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.TeleportTo
// Offset::0x24839E0;
void FSODSpringVectorMixinLibrary::TeleportTo(FSODSpringVector SOD,FVector NewValue);


// Function  EmbarkDynamics.SODSpringVectorMixinLibrary.Update
// Offset::0x2483410;
void FSODSpringVectorMixinLibrary::Update(FSODSpringVector SOD,FVector NewTarget,float DeltaSeconds);


// Function  EmbarkDynamics.MinJerkMixinLibrary.Init
// Offset::0x2484FE0;
void FMinJerkMixinLibrary::Init(FMinJerk MinJerk,double ResetValue,double ResetSpeed,double ResetAccel);


// Function  EmbarkDynamics.MinJerkMixinLibrary.IsSleeping
// Offset::0x2484C60;
bool FMinJerkMixinLibrary::IsSleeping(FMinJerk MinJerk);


// Function  EmbarkDynamics.MinJerkMixinLibrary.Reset
// Offset::0x24851D0;
void FMinJerkMixinLibrary::Reset(FMinJerk MinJerk);


// Function  EmbarkDynamics.MinJerkMixinLibrary.Update
// Offset::0x2484E00;
double FMinJerkMixinLibrary::Update(FMinJerk MinJerk,double Target,double TimeHorizon,double DeltaSeconds);


// Function  EmbarkDynamics.MinJerkVecMixinLibrary.GetAccelerationAsVector
// Offset::0x2485A40;
FVector FMinJerkVecMixinLibrary::GetAccelerationAsVector(FMinJerkVec MinJerkVec);


// Function  EmbarkDynamics.MinJerkVecMixinLibrary.GetAsRotator
// Offset::0x2485D60;
FRotator FMinJerkVecMixinLibrary::GetAsRotator(FMinJerkVec MinJerkVec);


// Function  EmbarkDynamics.MinJerkVecMixinLibrary.GetAsVector
// Offset::0x2485D60;
FVector FMinJerkVecMixinLibrary::GetAsVector(FMinJerkVec MinJerkVec);


// Function  EmbarkDynamics.MinJerkVecMixinLibrary.GetVelocityAsVector
// Offset::0x2485BD0;
FVector FMinJerkVecMixinLibrary::GetVelocityAsVector(FMinJerkVec MinJerkVec);


// Function  EmbarkDynamics.MinJerkVecMixinLibrary.Init
// Offset::0x24865F0;
void FMinJerkVecMixinLibrary::Init(FMinJerkVec MinJerkVec,FVector CurrentVector,FVector Velocity,FVector Acceleration);


// Function  EmbarkDynamics.MinJerkVecMixinLibrary.InitFromRotator
// Offset::0x24865F0;
void FMinJerkVecMixinLibrary::InitFromRotator(FMinJerkVec MinJerkVec,FRotator Rotation,FRotator Velocity,FRotator Acceleration);


// Function  EmbarkDynamics.MinJerkVecMixinLibrary.IsSleeping
// Offset::0x24860D0;
bool FMinJerkVecMixinLibrary::IsSleeping(FMinJerkVec MinJerkVec);


// Function  EmbarkDynamics.MinJerkVecMixinLibrary.Reset
// Offset::0x2486440;
void FMinJerkVecMixinLibrary::Reset(FMinJerkVec MinJerkVec);


// Function  EmbarkDynamics.MinJerkVecMixinLibrary.SetTarget
// Offset::0x2485EF0;
void FMinJerkVecMixinLibrary::SetTarget(FMinJerkVec MinJerkVec,FVector Target);


// Function  EmbarkDynamics.MinJerkVecMixinLibrary.Update
// Offset::0x2485750;
FVector FMinJerkVecMixinLibrary::Update(FMinJerkVec MinJerkVec,FVector TargetVec,float TimeHorizon,float DeltaSeconds);


// Function  EmbarkDynamics.MinJerkVec2DMixinLibrary.GetAccelerationAsVector
// Offset::0x2487410;
FVector2D FMinJerkVec2DMixinLibrary::GetAccelerationAsVector(FMinJerkVec2D MinJerkVec);


// Function  EmbarkDynamics.MinJerkVec2DMixinLibrary.GetAsRotator
// Offset::0x24877D0;
FRotator FMinJerkVec2DMixinLibrary::GetAsRotator(FMinJerkVec2D MinJerkVec);


// Function  EmbarkDynamics.MinJerkVec2DMixinLibrary.GetAsVector2D
// Offset::0x2487690;
FVector2D FMinJerkVec2DMixinLibrary::GetAsVector2D(FMinJerkVec2D MinJerkVec);


// Function  EmbarkDynamics.MinJerkVec2DMixinLibrary.GetVelocityAsVector
// Offset::0x2487550;
FVector2D FMinJerkVec2DMixinLibrary::GetVelocityAsVector(FMinJerkVec2D MinJerkVec);


// Function  EmbarkDynamics.MinJerkVec2DMixinLibrary.Init
// Offset::0x2487F60;
void FMinJerkVec2DMixinLibrary::Init(FMinJerkVec2D MinJerkVec,FVector2D CurrentVector,FVector2D Velocity,FVector2D Acceleration);


// Function  EmbarkDynamics.MinJerkVec2DMixinLibrary.InitFromRotator
// Offset::0x2487CB0;
void FMinJerkVec2DMixinLibrary::InitFromRotator(FMinJerkVec2D MinJerkVec,FRotator Rotation,FRotator Velocity,FRotator Acceleration);


// Function  EmbarkDynamics.MinJerkVec2DMixinLibrary.IsSleeping
// Offset::0x2487920;
bool FMinJerkVec2DMixinLibrary::IsSleeping(FMinJerkVec2D MinJerkVec);


// Function  EmbarkDynamics.MinJerkVec2DMixinLibrary.Reset
// Offset::0x2487B60;
void FMinJerkVec2DMixinLibrary::Reset(FMinJerkVec2D MinJerkVec);


// Function  EmbarkDynamics.MinJerkVec2DMixinLibrary.Update
// Offset::0x24870E0;
FVector2D FMinJerkVec2DMixinLibrary::Update(FMinJerkVec2D MinJerkVec,FVector2D TargetVec,float TimeHorizon,float DeltaSeconds);


// Function  EmbarkDynamics.SimpleSpringDamperMixinLibrary.Init
// Offset::0x2488C10;
void FSimpleSpringDamperMixinLibrary::Init(FSimpleSpringDamper Spring,float InitValue,float InitVelocity);


// Function  EmbarkDynamics.SimpleSpringDamperMixinLibrary.Reset
// Offset::0x2488B30;
void FSimpleSpringDamperMixinLibrary::Reset(FSimpleSpringDamper Spring);


// Function  EmbarkDynamics.SimpleSpringDamperMixinLibrary.Update
// Offset::0x24889A0;
void FSimpleSpringDamperMixinLibrary::Update(FSimpleSpringDamper Spring,float DeltaTime,int32_t NumSubsteps);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.AddVelocity
// Offset::0x2489A00;
void FSimpleSpringDamperVectorMixinLibrary::AddVelocity(FSimpleSpringDamperVector SpringVec,FVector Velocity);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.AddVelocityRotator
// Offset::0x24897A0;
void FSimpleSpringDamperVectorMixinLibrary::AddVelocityRotator(FSimpleSpringDamperVector SpringVec,FRotator Velocity);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.GetRotator
// Offset::0x2489420;
FRotator FSimpleSpringDamperVectorMixinLibrary::GetRotator(FSimpleSpringDamperVector SpringVec);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.GetVector
// Offset::0x24895E0;
FVector FSimpleSpringDamperVectorMixinLibrary::GetVector(FSimpleSpringDamperVector SpringVec);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetCriticalStretchDamping
// Offset::0x2489E50;
void FSimpleSpringDamperVectorMixinLibrary::SetCriticalStretchDamping(FSimpleSpringDamperVector SpringVec,float InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetCriticalStretchLimits
// Offset::0x248A230;
void FSimpleSpringDamperVectorMixinLibrary::SetCriticalStretchLimits(FSimpleSpringDamperVector SpringVec,FVector2D InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetCriticalStretchStiffness
// Offset::0x2489C60;
void FSimpleSpringDamperVectorMixinLibrary::SetCriticalStretchStiffness(FSimpleSpringDamperVector SpringVec,float InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetCriticalStretchTransitionSize
// Offset::0x248A040;
void FSimpleSpringDamperVectorMixinLibrary::SetCriticalStretchTransitionSize(FSimpleSpringDamperVector SpringVec,float InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetDamping
// Offset::0x248A650;
void FSimpleSpringDamperVectorMixinLibrary::SetDamping(FSimpleSpringDamperVector SpringVec,float InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetStiffness
// Offset::0x248A460;
void FSimpleSpringDamperVectorMixinLibrary::SetStiffness(FSimpleSpringDamperVector SpringVec,float InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetTarget
// Offset::0x248AEE0;
void FSimpleSpringDamperVectorMixinLibrary::SetTarget(FSimpleSpringDamperVector SpringVec,FVector InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetTargetRotator
// Offset::0x248ACC0;
void FSimpleSpringDamperVectorMixinLibrary::SetTargetRotator(FSimpleSpringDamperVector SpringVec,FRotator InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetValue
// Offset::0x248B320;
void FSimpleSpringDamperVectorMixinLibrary::SetValue(FSimpleSpringDamperVector SpringVec,FVector InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetValueClamp
// Offset::0x248AA90;
void FSimpleSpringDamperVectorMixinLibrary::SetValueClamp(FSimpleSpringDamperVector SpringVec,FVector2D InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetValueRotator
// Offset::0x248B100;
void FSimpleSpringDamperVectorMixinLibrary::SetValueRotator(FSimpleSpringDamperVector SpringVec,FRotator InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.SetValueWrap
// Offset::0x248A840;
void FSimpleSpringDamperVectorMixinLibrary::SetValueWrap(FSimpleSpringDamperVector SpringVec,FVector2D InVal);


// Function  EmbarkDynamics.SimpleSpringDamperVectorMixinLibrary.Update
// Offset::0x24891B0;
void FSimpleSpringDamperVectorMixinLibrary::Update(FSimpleSpringDamperVector SpringVec,float DeltaTime,int32_t NumSubsteps);


// Function  EmbarkAbilitySystem.ActiveGameplayEffectHandleMixinLibrary.GetOwningAbilitySystemComponent
// Offset::0x24A9D40;
FAbilitySystemComponent* FActiveGameplayEffectHandleMixinLibrary::GetOwningAbilitySystemComponent(FActiveGameplayEffectHandle Handle);


// Function  EmbarkAbilitySystem.EmbarkGameplayCueUtils.AddLocalGameplayCue
// Offset::0x24AC1E0;
void FEmbarkGameplayCueUtils::AddLocalGameplayCue(FActor* TargetActor,FGameplayTag GameplayCueTag,FGameplayCueParameters Parameters);


// Function  EmbarkAbilitySystem.EmbarkGameplayCueUtils.ExecuteLocalGameplayCue
// Offset::0x24ABD20;
void FEmbarkGameplayCueUtils::ExecuteLocalGameplayCue(FActor* TargetActor,FGameplayTag GameplayCueTag,FGameplayCueParameters Parameters);


// Function  EmbarkAbilitySystem.EmbarkGameplayCueUtils.RemoveLocalGameplayCue
// Offset::0x24ABF80;
void FEmbarkGameplayCueUtils::RemoveLocalGameplayCue(FActor* TargetActor,FGameplayTag GameplayCueTag,FGameplayCueParameters Parameters);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemUtils.CreateEmbarkScriptStructTargetData
// Offset::0x24AC7C0;
FGameplayAbilityTargetDataHandle FEmbarkAbilitySystemUtils::CreateEmbarkScriptStructTargetData();


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemUtils.GetTargetDataLocationInfo
// Offset::0x24AC9B0;
FGameplayAbilityTargetData_LocationInfo FEmbarkAbilitySystemUtils::GetTargetDataLocationInfo(FGameplayAbilityTargetDataHandle Handle,int32_t Index);


// Function  EmbarkAbilitySystem.EmbarkAbilitySystemUtils.IsGameplayAbilitySpecHandleValid
// Offset::0x24AC910;
bool FEmbarkAbilitySystemUtils::IsGameplayAbilitySpecHandleValid(FGameplayAbilitySpecHandle Handle);


// Function  EmbarkAbilitySystem.AbilitySystemComponentMixinLibrary2.FindActiveGameplayEffectHandle
// Offset::0x24AD780;
FActiveGameplayEffectHandle FAbilitySystemComponentMixinLibrary2::FindActiveGameplayEffectHandle(FAbilitySystemComponent* AbilitySystemComponent,FGameplayAbilitySpecHandle Handle);


// Function  EmbarkAbilitySystem.AbilitySystemComponentMixinLibrary2.GetAbilityCDO
// Offset::0x24AD460;
FGameplayAbility* FAbilitySystemComponentMixinLibrary2::GetAbilityCDO(FAbilitySystemComponent* AbilitySystemComponent,FGameplayAbilitySpecHandle Handle);


// Function  EmbarkAbilitySystem.AbilitySystemComponentMixinLibrary2.GetActivatableGameplayAbilitySpecHandlesByAllMatchingTags
// Offset::0x24AD290;
void FAbilitySystemComponentMixinLibrary2::GetActivatableGameplayAbilitySpecHandlesByAllMatchingTags(FAbilitySystemComponent* AbilitySystemComponent,FGameplayTagContainer GameplayTagContainer,TArray<FGameplayAbilitySpecHandle> MatchingGameplayAbilities,bool bOnlyAbilitiesThatSatisfyTagRequirements);


// Function  EmbarkAbilitySystem.AbilitySystemComponentMixinLibrary2.GetCooldownTimeRemainingAndDurationForAbility
// Offset::0x24AD100;
void FAbilitySystemComponentMixinLibrary2::GetCooldownTimeRemainingAndDurationForAbility(FAbilitySystemComponent* AbilitySystemComponent,FGameplayAbilitySpecHandle Handle,float Cooldown,float Duration);


// Function  EmbarkAbilitySystem.AbilitySystemComponentMixinLibrary2.GetDurationForEffect
// Offset::0x24AD680;
float FAbilitySystemComponentMixinLibrary2::GetDurationForEffect(FAbilitySystemComponent* AbilitySystemComponent,FActiveGameplayEffectHandle Handle);


// Function  EmbarkAbilitySystem.AbilitySystemComponentMixinLibrary2.GetGameplayEffectContext
// Offset::0x24AD540;
FGameplayEffectContextHandle FAbilitySystemComponentMixinLibrary2::GetGameplayEffectContext(FAbilitySystemComponent* AbilitySystemComponent,FActiveGameplayEffectHandle Handle);


// Function  EmbarkAbilitySystem.AbilitySystemComponentMixinLibrary2.IsAbilityGrantedByEffect
// Offset::0x24AD880;
bool FAbilitySystemComponentMixinLibrary2::IsAbilityGrantedByEffect(FAbilitySystemComponent* AbilitySystemComponent,FGameplayAbilitySpecHandle Handle);


// Function  EmbarkAbilitySystem.GameplayModMagnitudeCalculationMixinLibrary.GetCapturedAttributeMagnitude
// Offset::0x24ADF10;
bool FGameplayModMagnitudeCalculationMixinLibrary::GetCapturedAttributeMagnitude(FGameplayModMagnitudeCalculation* GameplayModMagnitudeCalculation,FGameplayEffectAttributeCaptureDefinition Def,FGameplayEffectSpec Spec,float Magnitude);


// Function  EmbarkAbilitySystem.GameplayCueParametersPartIDMixinLibrary.ArePartIDsValid
// Offset::0x24AE710;
bool FGameplayCueParametersPartIDMixinLibrary::ArePartIDsValid(FGameplayCueParameters Parameters);


// Function  EmbarkAbilitySystem.GameplayCueParametersPartIDMixinLibrary.GetFirstPartID
// Offset::0x24AE390;
int32_t FGameplayCueParametersPartIDMixinLibrary::GetFirstPartID(FGameplayCueParameters Parameters);


// Function  EmbarkAbilitySystem.GameplayCueParametersPartIDMixinLibrary.GetNumPartIDs
// Offset::0x24AE550;
int32_t FGameplayCueParametersPartIDMixinLibrary::GetNumPartIDs(FGameplayCueParameters Parameters);


// Function  EmbarkAbilitySystem.EmbarkAbilityTaskLibrary.PlayMontageAndWait
// Offset::0x1AA8680;
FAbilityTask_PlayMontageAndWait* FEmbarkAbilityTaskLibrary::PlayMontageAndWait(FGameplayAbility* OwningAbility,FName TaskInstanceName,FAnimMontage* MontageToPlay,float Rate,FName StartSection,bool bStopWhenAbilityEnds,float AnimRootMotionTranslationScale,float InTimeToStartAnimMontageAt);


// Function  EmbarkAbilitySystem.EmbarkAbilityTaskLibrary.WaitDelay
// Offset::0x1AA83B0;
FAbilityTask_WaitDelay* FEmbarkAbilityTaskLibrary::WaitDelay(FGameplayAbility* OwningAbility,float Time);


// Function  EmbarkAbilitySystem.EmbarkAbilityTaskLibrary.WaitGameplayEvent
// Offset::0x1AA84A0;
FAbilityTask_WaitGameplayEvent* FEmbarkAbilityTaskLibrary::WaitGameplayEvent(FGameplayAbility* OwningAbility,FGameplayTag EventTag,FActor* OptionalExternalTarget,bool OnlyTriggerOnce,bool OnlyMatchExact);


// Function  EmbarkAbilitySystem.EmbarkAbilityTaskLibrary.WaitGameplayTagAdd
// Offset::0x1AA8220;
FAbilityTask_WaitGameplayTagAdded* FEmbarkAbilityTaskLibrary::WaitGameplayTagAdd(FGameplayAbility* OwningAbility,FGameplayTag Tag,FActor* InOptionalExternalTarget,bool OnlyTriggerOnce);


// Function  EmbarkAbilitySystem.EmbarkAbilityTaskLibrary.WaitGameplayTagRemove
// Offset::0x1AA8090;
FAbilityTask_WaitGameplayTagRemoved* FEmbarkAbilityTaskLibrary::WaitGameplayTagRemove(FGameplayAbility* OwningAbility,FGameplayTag Tag,FActor* InOptionalExternalTarget,bool OnlyTriggerOnce);


// Function  EmbarkAbilitySystem.EmbarkAbilityTaskLibrary.WaitNetSync
// Offset::0x1AA7FA0;
FAbilityTask_NetworkSyncPoint* FEmbarkAbilityTaskLibrary::WaitNetSync(FGameplayAbility* OwningAbility,enum class EAbilityTaskNetSyncType SyncType);


// Function  EmbarkAbilitySystem.EmbarkAbilityTask_ServerWaitForClientTargetData.OnTargetDataReplicatedCallback
// Offset::0x24AF170;
void FEmbarkAbilityTask_ServerWaitForClientTargetData::OnTargetDataReplicatedCallback(FGameplayAbilityTargetDataHandle Data,FGameplayTag ActivationTag);


// Function  EmbarkAbilitySystem.EmbarkAbilityTask_ServerWaitForClientTargetData.ServerWaitForClientTargetData
// Offset::0x24AF2E0;
FEmbarkAbilityTask_ServerWaitForClientTargetData* FEmbarkAbilityTask_ServerWaitForClientTargetData::ServerWaitForClientTargetData(FGameplayAbility* OwningAbility,FName TaskInstanceName,bool TriggerOnce);


// Function  EmbarkAbilitySystem.EmbarkAbilityTask_WaitTargetData.OnTargetDataReplicatedCallback
// Offset::0x24AF850;
void FEmbarkAbilityTask_WaitTargetData::OnTargetDataReplicatedCallback(FGameplayAbilityTargetDataHandle Data,FGameplayTag ActivationTag);


// Function  EmbarkAbilitySystem.EmbarkAbilityTask_WaitTargetData.SendTargetData
// Offset::0x24AF720;
void FEmbarkAbilityTask_WaitTargetData::SendTargetData(FGameplayAbilityTargetDataHandle Data);


// Function  EmbarkAbilitySystem.EmbarkActiveGameplayEffectExecution.BP_OnApply
// Offset::0x3D30810;
void FEmbarkActiveGameplayEffectExecution::BP_OnApply();


// Function  EmbarkAbilitySystem.EmbarkActiveGameplayEffectExecution.BP_OnRemove
// Offset::0x3D30810;
void FEmbarkActiveGameplayEffectExecution::BP_OnRemove();


// Function  EmbarkAbilitySystem.EmbarkActiveGameplayEffectExecution.GetAbilitySystemComponent
// Offset::0x22C1870;
FAbilitySystemComponent* FEmbarkActiveGameplayEffectExecution::GetAbilitySystemComponent();


// Function  EmbarkAbilitySystem.EmbarkActiveGameplayEffectExecution.GetContext
// Offset::0x24AFD00;
FGameplayEffectContextHandle FEmbarkActiveGameplayEffectExecution::GetContext();


// Function  EmbarkAbilitySystem.EmbarkActiveGameplayEffectExecution.GetGameplayEffect
// Offset::0x24AFD80;
FGameplayEffect* FEmbarkActiveGameplayEffectExecution::GetGameplayEffect();


// Function  EmbarkAbilitySystem.EmbarkActiveGameplayEffectHandleMixinLibrary.GetStartWorldTime
// Offset::0x24B05D0;
float FEmbarkActiveGameplayEffectHandleMixinLibrary::GetStartWorldTime(FActiveGameplayEffect Effect);


// Function  EmbarkAbilitySystem.EmbarkAttributeInitializerMixinLibrary.Init
// Offset::0x24B0B00;
void FEmbarkAttributeInitializerMixinLibrary::Init(FEmbarkAttributeInitializer AttributeInitializer,FAbilitySystemComponent* AbilitySystem);


// Function  EmbarkReplicationGraph.EmbarkReplicationGraphStatics.AddDependentActor_Server
// Offset::0x24BA030;
void FEmbarkReplicationGraphStatics::AddDependentActor_Server(FActor* Parent,FActor* Child,FObject* WorldContextObject);


// Function  EmbarkReplicationGraph.EmbarkReplicationGraphStatics.RemoveDependentActor_Server
// Offset::0x24B9C50;
void FEmbarkReplicationGraphStatics::RemoveDependentActor_Server(FActor* Parent,FActor* Child,FObject* WorldContextObject);


// Function  EmbarkGlobalSubsystemAngelscript.SubsystemFunctionLibrary.GetGlobalSubsystem
// Offset::0x24BC590;
FEmbarkGlobalSubsystem* FSubsystemFunctionLibrary::GetGlobalSubsystem(FEmbarkGlobalSubsystem* SubsystemClass);


// Function  EmbarkInput.EmbarkAnalogCursorSubsystem.EnableAnalogCursor
// Offset::0x24BEC40;
void FEmbarkAnalogCursorSubsystem::EnableAnalogCursor(bool bIsEnabled);


// Function  EmbarkInput.EmbarkAnalogCursorSubsystem.Get
// Offset::0x24BECE0;
FEmbarkAnalogCursorSubsystem* FEmbarkAnalogCursorSubsystem::Get(FLocalPlayer* LocalPlayer);


// Function  EmbarkInput.EmbarkInputUtils.GetNavigationActionFromKey
// Offset::0x24BF150;
enum class EUINavigationAction FEmbarkInputUtils::GetNavigationActionFromKey(FKeyEvent InKeyEvent);


// Function  EmbarkInput.EmbarkInputUtils.GetNavigationDirectionFromAnalog
// Offset::0x24BF260;
enum class EUINavigation FEmbarkInputUtils::GetNavigationDirectionFromAnalog(FAnalogInputEvent InAnalogEvent);


// Function  EmbarkInput.EmbarkInputUtils.GetNavigationDirectionFromKey
// Offset::0x24BF370;
enum class EUINavigation FEmbarkInputUtils::GetNavigationDirectionFromKey(FKeyEvent InKeyEvent);


// Function  EmbarkInput.EmbarkInputUtils.PlatformDefaultInputDevice
// Offset::0x24BF480;
enum class EEmbarkInputDevice FEmbarkInputUtils::PlatformDefaultInputDevice();


// Function  EmbarkInput.EmbarkInputSubsystem.GetCurrentInputDevice
// Offset::0x24BF950;
enum class EEmbarkInputDevice FEmbarkInputSubsystem::GetCurrentInputDevice();


// Function  EmbarkInput.EmbarkInputSubsystem.IsMouseAndKeyboard
// Offset::0x24BF8F0;
bool FEmbarkInputSubsystem::IsMouseAndKeyboard();


// Function  EmbarkInput.EmbarkInputSubsystem.IsUsingGamepad
// Offset::0x24BF920;
bool FEmbarkInputSubsystem::IsUsingGamepad();


// Function  EmbarkWeather.EmbarkWeatherManager.GetWeatherTags
// Offset::0x24C4170;
FGameplayTagContainer FEmbarkWeatherManager::GetWeatherTags();


// Function  EmbarkWeather.EmbarkWeatherManager.ShouldEffectBeActive
// Offset::0x24C40D0;
bool FEmbarkWeatherManager::ShouldEffectBeActive(FNiagaraSystem* NiagaraSystem);


// Function  EmbarkWeather.EmbarkWeatherSubsystem.GetWeatherManager
// Offset::0x24C44B0;
FEmbarkWeatherManager* FEmbarkWeatherSubsystem::GetWeatherManager();


// Function  EmbarkCurves.CurveFloatMixin.GetKeys
// Offset::0x24C9A20;
TArray<FRichCurveKey> FCurveFloatMixin::GetKeys(FCurveFloat* Curve);


// Function  EmbarkOptionSystem.IEmbarkUserSetting.CanChange
// Offset::0x1A7E930;
bool FIEmbarkUserSetting::CanChange();


// Function  EmbarkOptionSystem.IEmbarkUserSetting.GetDefaultIndex
// Offset::0x28762F0;
int32_t FIEmbarkUserSetting::GetDefaultIndex();


// Function  EmbarkOptionSystem.IEmbarkUserSetting.GetDisplayText
// Offset::0x2876200;
FText FIEmbarkUserSetting::GetDisplayText(int32_t Index);


// Function  EmbarkOptionSystem.IEmbarkUserSetting.GetNumOptions
// Offset::0x2870F70;
int32_t FIEmbarkUserSetting::GetNumOptions();


// Function  EmbarkOptionSystem.IEmbarkUserSetting.GetValueIndex
// Offset::0x2876350;
int32_t FIEmbarkUserSetting::GetValueIndex();


// Function  EmbarkOptionSystem.IEmbarkUserSetting.Initialize
// Offset::0x179F4A0;
void FIEmbarkUserSetting::Initialize();


// Function  EmbarkOptionSystem.IEmbarkUserSetting.IsAvailable
// Offset::0x2870F10;
bool FIEmbarkUserSetting::IsAvailable();


// Function  EmbarkOptionSystem.IEmbarkUserSetting.IsDefault
// Offset::0x2876320;
bool FIEmbarkUserSetting::IsDefault();


// Function  EmbarkOptionSystem.IEmbarkUserSetting.SetValue
// Offset::0x2876380;
void FIEmbarkUserSetting::SetValue(int32_t Index);


// Function  Engine.GameUserSettings.ApplyHardwareBenchmarkResults
// Offset::0x2333620;
void FGameUserSettings::ApplyHardwareBenchmarkResults();


// Function  Engine.GameUserSettings.ApplyNonResolutionSettings
// Offset::0x1A7E910;
void FGameUserSettings::ApplyNonResolutionSettings();


// Function  Engine.GameUserSettings.ApplyResolutionSettings
// Offset::0x63B3920;
void FGameUserSettings::ApplyResolutionSettings(bool bCheckForCommandLineOverrides);


// Function  Engine.GameUserSettings.ApplySettings
// Offset::0x63B39C0;
void FGameUserSettings::ApplySettings(bool bCheckForCommandLineOverrides);


// Function  Engine.GameUserSettings.ConfirmVideoMode
// Offset::0x179D370;
void FGameUserSettings::ConfirmVideoMode();


// Function  Engine.GameUserSettings.EnableHDRDisplayOutput
// Offset::0x63B2080;
void FGameUserSettings::EnableHDRDisplayOutput(bool bEnable,int32_t DisplayNits);


// Function  Engine.GameUserSettings.GetAntiAliasingQuality
// Offset::0x374B980;
int32_t FGameUserSettings::GetAntiAliasingQuality();


// Function  Engine.GameUserSettings.GetAudioQualityLevel
// Offset::0x63B3320;
int32_t FGameUserSettings::GetAudioQualityLevel();


// Function  Engine.GameUserSettings.GetCurrentHDRDisplayNits
// Offset::0x63B2050;
int32_t FGameUserSettings::GetCurrentHDRDisplayNits();


// Function  Engine.GameUserSettings.GetDefaultResolution
// Offset::0x63B23E0;
FIntPoint FGameUserSettings::GetDefaultResolution();


// Function  Engine.GameUserSettings.GetDefaultResolutionScale
// Offset::0x63B2430;
float FGameUserSettings::GetDefaultResolutionScale();


// Function  Engine.GameUserSettings.GetDefaultWindowMode
// Offset::0x63B2360;
enum class EWindowMode FGameUserSettings::GetDefaultWindowMode();


// Function  Engine.GameUserSettings.GetDefaultWindowPosition
// Offset::0x63B2390;
FIntPoint FGameUserSettings::GetDefaultWindowPosition();


// Function  Engine.GameUserSettings.GetDesktopResolution
// Offset::0x63B3830;
FIntPoint FGameUserSettings::GetDesktopResolution();


// Function  Engine.GameUserSettings.GetFoliageQuality
// Offset::0x63B2500;
int32_t FGameUserSettings::GetFoliageQuality();


// Function  Engine.GameUserSettings.GetFramePace
// Offset::0x63B2300;
int32_t FGameUserSettings::GetFramePace();


// Function  Engine.GameUserSettings.GetFrameRateLimit
// Offset::0x63B3250;
float FGameUserSettings::GetFrameRateLimit();


// Function  Engine.GameUserSettings.GetFullscreenMode
// Offset::0x63B3770;
enum class EWindowMode FGameUserSettings::GetFullscreenMode();


// Function  Engine.GameUserSettings.GetGameUserSettings
// Offset::0x63B22D0;
FGameUserSettings* FGameUserSettings::GetGameUserSettings();


// Function  Engine.GameUserSettings.GetGlobalIlluminationQuality
// Offset::0x63B29B0;
int32_t FGameUserSettings::GetGlobalIlluminationQuality();


// Function  Engine.GameUserSettings.GetLastConfirmedFullscreenMode
// Offset::0x63B3740;
enum class EWindowMode FGameUserSettings::GetLastConfirmedFullscreenMode();


// Function  Engine.GameUserSettings.GetLastConfirmedScreenResolution
// Offset::0x63B3880;
FIntPoint FGameUserSettings::GetLastConfirmedScreenResolution();


// Function  Engine.GameUserSettings.GetOverallScalabilityLevel
// Offset::0x28762F0;
int32_t FGameUserSettings::GetOverallScalabilityLevel();


// Function  Engine.GameUserSettings.GetPostProcessingQuality
// Offset::0x63B25D0;
int32_t FGameUserSettings::GetPostProcessingQuality();


// Function  Engine.GameUserSettings.GetPreferredFullscreenMode
// Offset::0x63B3680;
enum class EWindowMode FGameUserSettings::GetPreferredFullscreenMode();


// Function  Engine.GameUserSettings.GetRecommendedResolutionScale
// Offset::0x2873D20;
float FGameUserSettings::GetRecommendedResolutionScale();


// Function  Engine.GameUserSettings.GetReflectionQuality
// Offset::0x63B28E0;
int32_t FGameUserSettings::GetReflectionQuality();


// Function  Engine.GameUserSettings.GetResolutionScaleInformation
// Offset::0x63B2FF0;
void FGameUserSettings::GetResolutionScaleInformation(float CurrentScaleNormalized,int32_t CurrentScaleValue,int32_t MinScaleValue,int32_t MaxScaleValue);


// Function  Engine.GameUserSettings.GetResolutionScaleInformationEx
// Offset::0x63B2E30;
void FGameUserSettings::GetResolutionScaleInformationEx(float CurrentScaleNormalized,float CurrentScaleValue,float MinScaleValue,float MaxScaleValue);


// Function  Engine.GameUserSettings.GetResolutionScaleNormalized
// Offset::0x63B2E00;
float FGameUserSettings::GetResolutionScaleNormalized();


// Function  Engine.GameUserSettings.GetScreenResolution
// Offset::0x63B38D0;
FIntPoint FGameUserSettings::GetScreenResolution();


// Function  Engine.GameUserSettings.GetShadingQuality
// Offset::0x50210F0;
int32_t FGameUserSettings::GetShadingQuality();


// Function  Engine.GameUserSettings.GetShadowQuality
// Offset::0x63B2A80;
int32_t FGameUserSettings::GetShadowQuality();


// Function  Engine.GameUserSettings.GetSyncInterval
// Offset::0x63B2330;
int32_t FGameUserSettings::GetSyncInterval();


// Function  Engine.GameUserSettings.GetTextureQuality
// Offset::0x63B2770;
int32_t FGameUserSettings::GetTextureQuality();


// Function  Engine.GameUserSettings.GetViewDistanceQuality
// Offset::0x63B2B50;
int32_t FGameUserSettings::GetViewDistanceQuality();


// Function  Engine.GameUserSettings.GetVisualEffectQuality
// Offset::0x63B26A0;
int32_t FGameUserSettings::GetVisualEffectQuality();


// Function  Engine.GameUserSettings.IsDirty
// Offset::0x2876320;
bool FGameUserSettings::IsDirty();


// Function  Engine.GameUserSettings.IsDynamicResolutionDirty
// Offset::0x63B3420;
bool FGameUserSettings::IsDynamicResolutionDirty();


// Function  Engine.GameUserSettings.IsDynamicResolutionEnabled
// Offset::0x63B34E0;
bool FGameUserSettings::IsDynamicResolutionEnabled();


// Function  Engine.GameUserSettings.IsFullscreenModeDirty
// Offset::0x63B3480;
bool FGameUserSettings::IsFullscreenModeDirty();


// Function  Engine.GameUserSettings.IsHDREnabled
// Offset::0x63B2020;
bool FGameUserSettings::IsHDREnabled();


// Function  Engine.GameUserSettings.IsScreenResolutionDirty
// Offset::0x63B34B0;
bool FGameUserSettings::IsScreenResolutionDirty();


// Function  Engine.GameUserSettings.IsVSyncDirty
// Offset::0x63B3450;
bool FGameUserSettings::IsVSyncDirty();


// Function  Engine.GameUserSettings.IsVSyncEnabled
// Offset::0x63B35B0;
bool FGameUserSettings::IsVSyncEnabled();


// Function  Engine.GameUserSettings.LoadSettings
// Offset::0x62F2240;
void FGameUserSettings::LoadSettings(bool bForceReload);


// Function  Engine.GameUserSettings.ResetToCurrentSettings
// Offset::0x179F4C0;
void FGameUserSettings::ResetToCurrentSettings();


// Function  Engine.GameUserSettings.RevertVideoMode
// Offset::0x63B3400;
void FGameUserSettings::RevertVideoMode();


// Function  Engine.GameUserSettings.RunHardwareBenchmark
// Offset::0x63B21A0;
void FGameUserSettings::RunHardwareBenchmark(int32_t WorkScale,float CPUMultiplier,float GPUMultiplier);


// Function  Engine.GameUserSettings.SaveSettings
// Offset::0x179F4A0;
void FGameUserSettings::SaveSettings();


// Function  Engine.GameUserSettings.SetAntiAliasingQuality
// Offset::0x63B2840;
void FGameUserSettings::SetAntiAliasingQuality(int32_t Value);


// Function  Engine.GameUserSettings.SetAudioQualityLevel
// Offset::0x63B3340;
void FGameUserSettings::SetAudioQualityLevel(int32_t QualityLevel);


// Function  Engine.GameUserSettings.SetBenchmarkFallbackValues
// Offset::0x63B33E0;
void FGameUserSettings::SetBenchmarkFallbackValues();


// Function  Engine.GameUserSettings.SetDynamicResolutionEnabled
// Offset::0x63B3510;
void FGameUserSettings::SetDynamicResolutionEnabled(bool bEnable);


// Function  Engine.GameUserSettings.SetFoliageQuality
// Offset::0x63B2530;
void FGameUserSettings::SetFoliageQuality(int32_t Value);


// Function  Engine.GameUserSettings.SetFrameRateLimit
// Offset::0x63B3280;
void FGameUserSettings::SetFrameRateLimit(float NewLimit);


// Function  Engine.GameUserSettings.SetFullscreenMode
// Offset::0x63B36B0;
void FGameUserSettings::SetFullscreenMode(enum class EWindowMode InFullscreenMode);


// Function  Engine.GameUserSettings.SetGlobalIlluminationQuality
// Offset::0x63B29E0;
void FGameUserSettings::SetGlobalIlluminationQuality(int32_t Value);


// Function  Engine.GameUserSettings.SetOverallScalabilityLevel
// Offset::0x63B31B0;
void FGameUserSettings::SetOverallScalabilityLevel(int32_t Value);


// Function  Engine.GameUserSettings.SetPostProcessingQuality
// Offset::0x63B2600;
void FGameUserSettings::SetPostProcessingQuality(int32_t Value);


// Function  Engine.GameUserSettings.SetReflectionQuality
// Offset::0x63B2910;
void FGameUserSettings::SetReflectionQuality(int32_t Value);


// Function  Engine.GameUserSettings.SetResolutionScaleNormalized
// Offset::0x63B2C20;
void FGameUserSettings::SetResolutionScaleNormalized(float NewScaleNormalized);


// Function  Engine.GameUserSettings.SetResolutionScaleValue
// Offset::0x63B2D60;
void FGameUserSettings::SetResolutionScaleValue(int32_t NewScaleValue);


// Function  Engine.GameUserSettings.SetResolutionScaleValueEx
// Offset::0x63B2CC0;
void FGameUserSettings::SetResolutionScaleValueEx(float NewScaleValue);


// Function  Engine.GameUserSettings.SetScreenResolution
// Offset::0x63B37A0;
void FGameUserSettings::SetScreenResolution(FIntPoint Resolution);


// Function  Engine.GameUserSettings.SetShadingQuality
// Offset::0x63B2460;
void FGameUserSettings::SetShadingQuality(int32_t Value);


// Function  Engine.GameUserSettings.SetShadowQuality
// Offset::0x63B2AB0;
void FGameUserSettings::SetShadowQuality(int32_t Value);


// Function  Engine.GameUserSettings.SetTextureQuality
// Offset::0x63B27A0;
void FGameUserSettings::SetTextureQuality(int32_t Value);


// Function  Engine.GameUserSettings.SetToDefaults
// Offset::0x5717730;
void FGameUserSettings::SetToDefaults();


// Function  Engine.GameUserSettings.SetViewDistanceQuality
// Offset::0x63B2B80;
void FGameUserSettings::SetViewDistanceQuality(int32_t Value);


// Function  Engine.GameUserSettings.SetVisualEffectQuality
// Offset::0x63B26D0;
void FGameUserSettings::SetVisualEffectQuality(int32_t Value);


// Function  Engine.GameUserSettings.SetVSyncEnabled
// Offset::0x63B35E0;
void FGameUserSettings::SetVSyncEnabled(bool bEnable);


// Function  Engine.GameUserSettings.SupportsHDRDisplayOutput
// Offset::0x63B2170;
bool FGameUserSettings::SupportsHDRDisplayOutput();


// Function  Engine.GameUserSettings.ValidateSettings
// Offset::0x179DEB0;
void FGameUserSettings::ValidateSettings();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.AutoDetectScalabilitySettings
// Offset::0x24D9110;
void FEmbarkGameUserSettings::AutoDetectScalabilitySettings();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.Get
// Offset::0x24DA360;
FEmbarkGameUserSettings* FEmbarkGameUserSettings::Get();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetAppliedDLSSMode
// Offset::0x24DA100;
enum class UDLSSMode FEmbarkGameUserSettings::GetAppliedDLSSMode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetAppliedFSR2Mode
// Offset::0x24D9C60;
enum class EFSR2Mode FEmbarkGameUserSettings::GetAppliedFSR2Mode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetAppliedRTXGIQuality
// Offset::0x24D92F0;
enum class ERTXGIQuality FEmbarkGameUserSettings::GetAppliedRTXGIQuality();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetAppliedXeSSMode
// Offset::0x24D9A30;
enum class EXeSSQualityMode FEmbarkGameUserSettings::GetAppliedXeSSMode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetConsole120HzModeEnabled
// Offset::0x24D95F0;
bool FEmbarkGameUserSettings::GetConsole120HzModeEnabled();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetD3D12Enabled
// Offset::0x24D9790;
bool FEmbarkGameUserSettings::GetD3D12Enabled();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetDefaultResolutionScalingMethod
// Offset::0x24D9890;
enum class EResolutionScalingMethod FEmbarkGameUserSettings::GetDefaultResolutionScalingMethod();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetDLSSFrameGenerationMode
// Offset::0x24D9E40;
enum class UStreamlineDLSSGMode FEmbarkGameUserSettings::GetDLSSFrameGenerationMode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetDLSSMode
// Offset::0x24DA160;
enum class UDLSSMode FEmbarkGameUserSettings::GetDLSSMode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetEffectiveDLSSFrameGenerationMode
// Offset::0x24D9E10;
enum class UStreamlineDLSSGMode FEmbarkGameUserSettings::GetEffectiveDLSSFrameGenerationMode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetEffectiveDLSSMode
// Offset::0x24DA130;
enum class UDLSSMode FEmbarkGameUserSettings::GetEffectiveDLSSMode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetEffectiveFSR2Mode
// Offset::0x24D9C90;
enum class EFSR2Mode FEmbarkGameUserSettings::GetEffectiveFSR2Mode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetEffectiveRTXGIQuality
// Offset::0x24D9320;
enum class ERTXGIQuality FEmbarkGameUserSettings::GetEffectiveRTXGIQuality();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetEffectiveXeSSMode
// Offset::0x24D9A60;
enum class EXeSSQualityMode FEmbarkGameUserSettings::GetEffectiveXeSSMode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetEmbarkGameUserSettingsWithDefaultSettings
// Offset::0x24DA330;
FEmbarkGameUserSettings* FEmbarkGameUserSettings::GetEmbarkGameUserSettingsWithDefaultSettings();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetFSR2Mode
// Offset::0x24D9CC0;
enum class EFSR2Mode FEmbarkGameUserSettings::GetFSR2Mode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetLensDistortionEnabled
// Offset::0x24D9420;
bool FEmbarkGameUserSettings::GetLensDistortionEnabled();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetMotionBlurEnabled
// Offset::0x24D9520;
bool FEmbarkGameUserSettings::GetMotionBlurEnabled();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetNvReflexMode
// Offset::0x24D9FE0;
enum class UStreamlineReflexMode FEmbarkGameUserSettings::GetNvReflexMode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetResolutionScalingMethod
// Offset::0x24D98F0;
enum class EResolutionScalingMethod FEmbarkGameUserSettings::GetResolutionScalingMethod();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetRTXGIQuality
// Offset::0x24D9350;
enum class ERTXGIQuality FEmbarkGameUserSettings::GetRTXGIQuality();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetRTXGIResolutionQuality
// Offset::0x24D9200;
int32_t FEmbarkGameUserSettings::GetRTXGIResolutionQuality();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetSupportedDLSSFrameGenerationModes
// Offset::0x24D9F00;
TArray<enum class UStreamlineDLSSGMode> FEmbarkGameUserSettings::GetSupportedDLSSFrameGenerationModes();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetSupportedDLSSModes
// Offset::0x24DA220;
TArray<enum class UDLSSMode> FEmbarkGameUserSettings::GetSupportedDLSSModes();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetSupportedXeSSModes
// Offset::0x24D9B50;
TArray<enum class EXeSSQualityMode> FEmbarkGameUserSettings::GetSupportedXeSSModes();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.GetXeSSMode
// Offset::0x24D9A90;
enum class EXeSSQualityMode FEmbarkGameUserSettings::GetXeSSMode();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsConsole120HzModeSupported
// Offset::0x243E320;
bool FEmbarkGameUserSettings::IsConsole120HzModeSupported();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsD3D12Dirty
// Offset::0x24D9760;
bool FEmbarkGameUserSettings::IsD3D12Dirty();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsD3D12Supported
// Offset::0x24D9860;
bool FEmbarkGameUserSettings::IsD3D12Supported();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsDLSSFrameGenerationDirty
// Offset::0x24D9DE0;
bool FEmbarkGameUserSettings::IsDLSSFrameGenerationDirty();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsDLSSFrameGenerationSupported
// Offset::0x24D9F80;
bool FEmbarkGameUserSettings::IsDLSSFrameGenerationSupported();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsDLSSLoaded
// Offset::0x24DA2D0;
bool FEmbarkGameUserSettings::IsDLSSLoaded();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsDLSSModeDirty
// Offset::0x24DA0D0;
bool FEmbarkGameUserSettings::IsDLSSModeDirty();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsDLSSSupported
// Offset::0x24DA2A0;
bool FEmbarkGameUserSettings::IsDLSSSupported();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsFSR2Loaded
// Offset::0x24D9DB0;
bool FEmbarkGameUserSettings::IsFSR2Loaded();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsFSR2ModeDirty
// Offset::0x24D9C30;
bool FEmbarkGameUserSettings::IsFSR2ModeDirty();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsFSR2Supported
// Offset::0x24D9D80;
bool FEmbarkGameUserSettings::IsFSR2Supported();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsMotionBlurDirty
// Offset::0x24D9450;
bool FEmbarkGameUserSettings::IsMotionBlurDirty();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsNvReflexModeDirty
// Offset::0x24D9FB0;
bool FEmbarkGameUserSettings::IsNvReflexModeDirty();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsNvReflexSupported
// Offset::0x24DA0A0;
bool FEmbarkGameUserSettings::IsNvReflexSupported();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsPCSettingsAvailable
// Offset::0x20074E0;
bool FEmbarkGameUserSettings::IsPCSettingsAvailable();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsRayTracingSupported
// Offset::0x24DA300;
bool FEmbarkGameUserSettings::IsRayTracingSupported();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsResolutionScalingMethodDirty
// Offset::0x24D98C0;
bool FEmbarkGameUserSettings::IsResolutionScalingMethodDirty();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsRTXGIQualityDirty
// Offset::0x24D9230;
bool FEmbarkGameUserSettings::IsRTXGIQualityDirty();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsRTXGIResolutionQualityDirty
// Offset::0x24D9130;
bool FEmbarkGameUserSettings::IsRTXGIResolutionQualityDirty();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsXeSSLoaded
// Offset::0x24D9C00;
bool FEmbarkGameUserSettings::IsXeSSLoaded();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsXeSSModeDirty
// Offset::0x24D9A00;
bool FEmbarkGameUserSettings::IsXeSSModeDirty();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.IsXeSSSupported
// Offset::0x24D9BD0;
bool FEmbarkGameUserSettings::IsXeSSSupported();


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetConsole120HzModeEnabled
// Offset::0x24D9550;
void FEmbarkGameUserSettings::SetConsole120HzModeEnabled(bool bEnabled);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetD3D12Enabled
// Offset::0x24D97C0;
void FEmbarkGameUserSettings::SetD3D12Enabled(bool bEnabled);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetDLSSFrameGenerationMode
// Offset::0x24D9E70;
void FEmbarkGameUserSettings::SetDLSSFrameGenerationMode(enum class UStreamlineDLSSGMode Mode);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetDLSSMode
// Offset::0x24DA190;
void FEmbarkGameUserSettings::SetDLSSMode(enum class UDLSSMode Mode);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetFSR2Mode
// Offset::0x24D9CF0;
void FEmbarkGameUserSettings::SetFSR2Mode(enum class EFSR2Mode Mode);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetInActiveGameplay
// Offset::0x24D9620;
void FEmbarkGameUserSettings::SetInActiveGameplay(bool bIsInActiveGameplay);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetInGameEnabled
// Offset::0x24D96C0;
void FEmbarkGameUserSettings::SetInGameEnabled(bool bEnabled);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetLensDistortionEnabled
// Offset::0x24D9380;
void FEmbarkGameUserSettings::SetLensDistortionEnabled(bool bEnabled);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetMotionBlurEnabled
// Offset::0x24D9480;
void FEmbarkGameUserSettings::SetMotionBlurEnabled(bool bEnabled);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetNvReflexMode
// Offset::0x24DA010;
void FEmbarkGameUserSettings::SetNvReflexMode(enum class UStreamlineReflexMode Mode);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetResolutionScalingMethod
// Offset::0x24D9920;
void FEmbarkGameUserSettings::SetResolutionScalingMethod(enum class EResolutionScalingMethod Method,bool bSetByUser);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetRTXGIQuality
// Offset::0x24D9260;
void FEmbarkGameUserSettings::SetRTXGIQuality(enum class ERTXGIQuality Quality);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetRTXGIResolutionQuality
// Offset::0x24D9160;
void FEmbarkGameUserSettings::SetRTXGIResolutionQuality(int32_t Value);


// Function  EmbarkUserSettings.EmbarkGameUserSettings.SetXeSSMode
// Offset::0x24D9AC0;
void FEmbarkGameUserSettings::SetXeSSMode(enum class EXeSSQualityMode Mode);


// Function  EmbarkOptionSystem.EmbarkOptionBase.CanChange
// Offset::0x17AF4E0;
bool FEmbarkOptionBase::CanChange();


// Function  EmbarkOptionSystem.EmbarkOptionBase.Initialize
// Offset::0x286AF00;
void FEmbarkOptionBase::Initialize(FString InValue);


// Function  EmbarkOptionSystem.EmbarkOptionBase.IsAvailable
// Offset::0x1A7E930;
bool FEmbarkOptionBase::IsAvailable();


// Function  EmbarkOptionSystem.EmbarkOptionBase.IsDefault
// Offset::0x26ECC50;
bool FEmbarkOptionBase::IsDefault();


// Function  EmbarkOptionSystem.EmbarkOptionBase.NotifyOnExternalEvent
// Offset::0x286ADE0;
void FEmbarkOptionBase::NotifyOnExternalEvent(enum class EEmbarkOptionExternalEvent Event);


// Function  EmbarkOptionSystem.EmbarkOptionBase.PreSaveData
// Offset::0x1B91E90;
void FEmbarkOptionBase::PreSaveData();


// Function  EmbarkOptionSystem.EmbarkOptionBase.ResetToDefault
// Offset::0x17A1E00;
void FEmbarkOptionBase::ResetToDefault();


// Function  EmbarkOptionSystem.EmbarkOptionBase.ResetToPreviousValue
// Offset::0x233C8A0;
void FEmbarkOptionBase::ResetToPreviousValue(FString InValue);


// Function  EmbarkOptionSystem.EmbarkOptionBase.Restore
// Offset::0x17AF620;
void FEmbarkOptionBase::Restore(FString String);


// Function  EmbarkOptionSystem.EmbarkOptionBase.SendOptionChangeTelemetry
// Offset::0x286ACE0;
void FEmbarkOptionBase::SendOptionChangeTelemetry(FString OldValue,FString NewValue);


// Function  EmbarkOptionSystem.EmbarkOptionBase.Store
// Offset::0x286AE80;
FString FEmbarkOptionBase::Store();


// Function  EmbarkOptionSystem.IEmbarkOptionFloat.GetCustomDisplayText
// Offset::0x2873B60;
FText FIEmbarkOptionFloat::GetCustomDisplayText(float Value);


// Function  EmbarkOptionSystem.IEmbarkOptionFloat.GetMaxValue
// Offset::0x2873D50;
float FIEmbarkOptionFloat::GetMaxValue();


// Function  EmbarkOptionSystem.IEmbarkOptionFloat.GetMinValue
// Offset::0x2873D20;
float FIEmbarkOptionFloat::GetMinValue();


// Function  EmbarkOptionSystem.IEmbarkOptionFloat.GetNormalizedValue
// Offset::0x2873C50;
float FIEmbarkOptionFloat::GetNormalizedValue();


// Function  EmbarkOptionSystem.IEmbarkOptionFloat.GetValue
// Offset::0x2873D80;
float FIEmbarkOptionFloat::GetValue();


// Function  EmbarkOptionSystem.IEmbarkOptionFloat.SetNormalizedValue
// Offset::0x2873C80;
void FIEmbarkOptionFloat::SetNormalizedValue(float NewValue);


// Function  EmbarkOptionSystem.IEmbarkOptionFloat.SetValue
// Offset::0x2873DB0;
void FIEmbarkOptionFloat::SetValue(float NewValue);


// Function  EmbarkAINavigation.DonNavigationHelper.DonNavigationManager
// Offset::0x2508A70;
FDonNavigationManager* FDonNavigationHelper::DonNavigationManager(FObject* WorldContextObject);


// Function  EmbarkAINavigation.DonNavigationHelper.DonNavigationManagerForActor
// Offset::0x2508930;
FDonNavigationManager* FDonNavigationHelper::DonNavigationManagerForActor(FActor* Actor);


// Function  EmbarkAINavigation.DonNavigationHelper.HpaNavigationManager
// Offset::0x25089D0;
FHpaNavigationManager* FDonNavigationHelper::HpaNavigationManager(FObject* WorldContextObject);


// Function  EmbarkAINavigation.DonNavigationManager.AbortPathfindingTask
// Offset::0x250BF90;
void FDonNavigationManager::AbortPathfindingTask(FActor* Actor);


// Function  EmbarkAINavigation.DonNavigationManager.CanNavigate
// Offset::0x2509940;
bool FDonNavigationManager::CanNavigate(FVector Location);


// Function  EmbarkAINavigation.DonNavigationManager.ClampLocationToNavigableWorld
// Offset::0x250C570;
FVector FDonNavigationManager::ClampLocationToNavigableWorld(FVector DesiredLocation);


// Function  EmbarkAINavigation.DonNavigationManager.ConstructBuilder
// Offset::0x250CC10;
void FDonNavigationManager::ConstructBuilder();


// Function  EmbarkAINavigation.DonNavigationManager.Debug_ClearAllVolumes
// Offset::0x250C7B0;
void FDonNavigationManager::Debug_ClearAllVolumes();


// Function  EmbarkAINavigation.DonNavigationManager.Debug_DrawAllVolumes
// Offset::0x250CB50;
void FDonNavigationManager::Debug_DrawAllVolumes(float LineThickness);


// Function  EmbarkAINavigation.DonNavigationManager.Debug_DrawVolumesAroundPoint
// Offset::0x250C910;
void FDonNavigationManager::Debug_DrawVolumesAroundPoint(FVector Location,int32_t CubeSize,bool DrawPersistentLines,float Duration,float LineThickness,bool bAutoInitializeVolumes);


// Function  EmbarkAINavigation.DonNavigationManager.Debug_DrawVoxelCollisionProfile
// Offset::0x250C7D0;
void FDonNavigationManager::Debug_DrawVoxelCollisionProfile(FPrimitiveComponent* MeshOrPrimitive,bool bDrawPersistent,float Duration);


// Function  EmbarkAINavigation.DonNavigationManager.Debug_ToggleWorldBoundaryInGame
// Offset::0x250CBF0;
void FDonNavigationManager::Debug_ToggleWorldBoundaryInGame();


// Function  EmbarkAINavigation.DonNavigationManager.FindPathSolution_StressTesting
// Offset::0x250B120;
bool FDonNavigationManager::FindPathSolution_StressTesting(FActor* Actor,FVector Destination,TArray<FVector> PathSolutionRaw,TArray<FVector> PathSolutionOptimized,FDoNNavigationQueryParams QueryParams,FDoNNavigationDebugParams DebugParams);


// Function  EmbarkAINavigation.DonNavigationManager.FindRandomPointAroundOriginInNavWorld
// Offset::0x250A1B0;
FVector FDonNavigationManager::FindRandomPointAroundOriginInNavWorld(FActor* NavigationActor,FVector Origin,float Distance,bool bFoundValidResult,float MaxDesiredAltitude,float MaxZAngularDispacement,int32_t MaxAttempts);


// Function  EmbarkAINavigation.DonNavigationManager.FindRandomPointFromActorInNavWorld
// Offset::0x250A4C0;
FVector FDonNavigationManager::FindRandomPointFromActorInNavWorld(FActor* Actor,float Distance,bool bFoundValidResult,float MaxDesiredAltitude,float MaxZAngularDispacement,int32_t MaxAttempts);


// Function  EmbarkAINavigation.DonNavigationManager.HasTask
// Offset::0x250BE90;
bool FDonNavigationManager::HasTask(FActor* Actor);


// Function  EmbarkAINavigation.DonNavigationManager.IsDirectPathLineSweep
// Offset::0x250A720;
bool FDonNavigationManager::IsDirectPathLineSweep(FPrimitiveComponent* CollisionComponent,FVector Start,FVector End,FHitResult OutHit,bool bFindInitialOverlaps,float CollisionShapeInflation);


// Function  EmbarkAINavigation.DonNavigationManager.IsDirectPathLineTrace
// Offset::0x250AA90;
bool FDonNavigationManager::IsDirectPathLineTrace(FVector Start,FVector End,FHitResult OutHit,TArray<FActor*> ActorsToIgnore,bool bFindInitialOverlaps);


// Function  EmbarkAINavigation.DonNavigationManager.IsDirectPathSweep
// Offset::0x250ADB0;
bool FDonNavigationManager::IsDirectPathSweep(FPrimitiveComponent* CollisionComponent,FVector Start,FVector End,FHitResult OutHit,bool bFindInitialOverlaps,float CollisionShapeInflation);


// Function  EmbarkAINavigation.DonNavigationManager.IsLocationBeneathLandscape
// Offset::0x250A0B0;
bool FDonNavigationManager::IsLocationBeneathLandscape(FVector Location,float LineTraceHeight);


// Function  EmbarkAINavigation.DonNavigationManager.IsLocationWithinNavigableWorld
// Offset::0x250C360;
bool FDonNavigationManager::IsLocationWithinNavigableWorld(FVector DesiredLocation);


// Function  EmbarkAINavigation.DonNavigationManager.IsMeshBoundsWithinNavigableWorld
// Offset::0x2509FC0;
bool FDonNavigationManager::IsMeshBoundsWithinNavigableWorld(FPrimitiveComponent* Mesh,float BoundsScaleFactor);


// Function  EmbarkAINavigation.DonNavigationManager.ScheduleDynamicCollisionUpdate
// Offset::0x250BA90;
bool FDonNavigationManager::ScheduleDynamicCollisionUpdate(FPrimitiveComponent* Mesh,FDelegate ResultHandler,FName CustomCacheIdentifier,bool bReplaceExistingTask,bool bDisableCacheUsage,bool bReloadCollisionCache,bool bUseCheapBoundsCollision,float BoundsScaleFactor,bool bForceSynchronousExecution,bool bDrawDebug);


// Function  EmbarkAINavigation.DonNavigationManager.SchedulePathfindingTask
// Offset::0x250C030;
bool FDonNavigationManager::SchedulePathfindingTask(FActor* Actor,FVector Destination,FDoNNavigationQueryParams QueryParams,FDoNNavigationDebugParams DebugParams,FDelegate ResultHandlerDelegate,FDelegate DynamicCollisionListener);


// Function  EmbarkAINavigation.DonNavigationManager.StopListeningToDynamicCollisionsForPath
// Offset::0x250B790;
void FDonNavigationManager::StopListeningToDynamicCollisionsForPath(FDelegate ListenerToClear,FDoNNavigationQueryData QueryData);


// Function  EmbarkAINavigation.DonNavigationManager.StopListeningToDynamicCollisionsForPathIndex
// Offset::0x250B440;
void FDonNavigationManager::StopListeningToDynamicCollisionsForPathIndex(FDelegate ListenerToClear,FDoNNavigationQueryData QueryData,int32_t VolumeIndex);


// Function  EmbarkAINavigation.DonNavigationManager.VisualizeDynamicCollisionListeners
// Offset::0x25099F0;
void FDonNavigationManager::VisualizeDynamicCollisionListeners(FDelegate Listener,FDoNNavigationQueryData QueryData);


// Function  EmbarkAINavigation.DonNavigationManager.VisualizeNAVResult
// Offset::0x2509CF0;
void FDonNavigationManager::VisualizeNAVResult(TArray<FVector> PathSolution,FVector Source,FVector Destination,bool Reset,FDoNNavigationDebugParams DebugParams,FColor LineColor);


// Function  EmbarkAINavigation.DonNavigator.AddMovementInputCustom
// Offset::0x250DD60;
void FDonNavigator::AddMovementInputCustom(FVector WorldDirection,float ScaleValue);


// Function  EmbarkAINavigation.DonNavigator.OnLocomotionAbort
// Offset::0x2098800;
void FDonNavigator::OnLocomotionAbort();


// Function  EmbarkAINavigation.DonNavigator.OnLocomotionBegin
// Offset::0x250DD40;
void FDonNavigator::OnLocomotionBegin();


// Function  EmbarkAINavigation.DonNavigator.OnLocomotionEnd
// Offset::0x250DCA0;
void FDonNavigator::OnLocomotionEnd(bool bLocomotionSuccess);


// Function  EmbarkAINavigation.DonNavigator.OnNextSegment
// Offset::0x250DC00;
void FDonNavigator::OnNextSegment(FVector NextPoint);


// Function  EmbarkAINavigation.HpaNavigation.CanPathInStraightLine
// Offset::0x250ED00;
bool FHpaNavigation::CanPathInStraightLine(FVector Start,FVector End);


// Function  EmbarkAINavigation.HpaNavigation.FindBidirectionalPath_DebugStep
// Offset::0x250E920;
bool FHpaNavigation::FindBidirectionalPath_DebugStep(FVector Origin,FVector Destination,int32_t OutOpenedNodes,FVector ForwardNode,FVector BackwardNode);


// Function  EmbarkAINavigation.HpaNavigation.FindBidirectionalPath_DebugStressTest
// Offset::0x250E6D0;
bool FHpaNavigation::FindBidirectionalPath_DebugStressTest(FVector Origin,FVector Destination,TArray<FVector> OutPathSolution,int32_t OutOpenedNodes,bool Optimize);


// Function  EmbarkAINavigation.HpaNavigation.FindClosestNavigablePositionInRange
// Offset::0x250F130;
bool FHpaNavigation::FindClosestNavigablePositionInRange(FVector WorldLocation,int32_t Range,FVector OutLocation);


// Function  EmbarkAINavigation.HpaNavigation.FindGroundVoxelLocationFromPoint
// Offset::0x250F070;
FVector FHpaNavigation::FindGroundVoxelLocationFromPoint(FVector WorldLocation);


// Function  EmbarkAINavigation.HpaNavigation.FindGroundVoxelLocationInWorld
// Offset::0x250EF70;
FVector FHpaNavigation::FindGroundVoxelLocationInWorld(float WorldLocationX,float WorldLocationY);


// Function  EmbarkAINavigation.HpaNavigation.GetClosestVoxel
// Offset::0x250EE10;
bool FHpaNavigation::GetClosestVoxel(FVector WorldLocation,FVector OutVoxelLocation,bool OutNavigable);


// Function  EmbarkAINavigation.HpaNavigation.GetCollisionInStraightLine
// Offset::0x250EB90;
bool FHpaNavigation::GetCollisionInStraightLine(FVector Start,FVector End,FVector OutCollision);


// Function  EmbarkAINavigation.HpaNavigation.LoadData
// Offset::0x250EB70;
void FHpaNavigation::LoadData();


// Function  EmbarkAINavigation.HpaNavigationManager.AbortPathfindingTask
// Offset::0x2510A20;
void FHpaNavigationManager::AbortPathfindingTask(FActor* Actor);


// Function  EmbarkAINavigation.HpaNavigationManager.FindGroundVoxelLocationFromPoint
// Offset::0x2510910;
FVector FHpaNavigationManager::FindGroundVoxelLocationFromPoint(FVector WorldLocation,float CollisionRadius);


// Function  EmbarkAINavigation.HpaNavigationManager.FindGroundVoxelLocationInWorld
// Offset::0x25107C0;
FVector FHpaNavigationManager::FindGroundVoxelLocationInWorld(float WorldLocationX,float WorldLocationY,float CollisionRadius);


// Function  EmbarkAINavigation.HpaNavigationManager.FindMultiplePaths
// Offset::0x2510550;
TArray<FPathResult> FHpaNavigationManager::FindMultiplePaths(FVector Origin,TArray<FVector> Destinations,float CollisionRadius);


// Function  EmbarkAINavigation.HpaNavigationManager.HasTask
// Offset::0x2510450;
bool FHpaNavigationManager::HasTask(FActor* Actor);


// Function  EmbarkAINavigation.HpaNavigationManager.RegenerateArea
// Offset::0x250FBD0;
void FHpaNavigationManager::RegenerateArea(FVector Origin,FVector BoxExtent);


// Function  EmbarkAINavigation.HpaNavigationManager.RegisterDynamicObstacle
// Offset::0x25103B0;
void FHpaNavigationManager::RegisterDynamicObstacle(FHpaNavigationDynamicObstacleComponent* Obstacle);


// Function  EmbarkAINavigation.HpaNavigationManager.SchedulePathfindingTask
// Offset::0x2510080;
bool FHpaNavigationManager::SchedulePathfindingTask(FActor* Actor,FVector Destination,FHpaNavigationQueryParams QueryParams,FDelegate ResultHandlerDelegate);


// Function  EmbarkAINavigation.HpaNavigationManager.SchedulePathfindingTaskWithOrigin
// Offset::0x250FD80;
bool FHpaNavigationManager::SchedulePathfindingTaskWithOrigin(FActor* Actor,FVector Origin,FVector Destination,FHpaNavigationQueryParams QueryParams,FDelegate ResultHandlerDelegate);


// Function  EmbarkAINavigation.HpaNavigationManager.SelectBestGraph
// Offset::0x250FCE0;
FHpaNavigation* FHpaNavigationManager::SelectBestGraph(float Radius);


// Function  EmbarkAINavigation.HpaNavigationManager.UnregisterDynamicObstacle
// Offset::0x2510310;
void FHpaNavigationManager::UnregisterDynamicObstacle(FHpaNavigationDynamicObstacleComponent* Obstacle);


// Function  EmbarkPerfTesting.EmbarkPerfTestingBlueprintLibrary.CapturePerformanceSnapshot
// Offset::0x2515450;
void FEmbarkPerfTestingBlueprintLibrary::CapturePerformanceSnapshot(FObject* WorldContextObject,FLatentActionInfo LatentInfo,float Duration,FString Name);


// Function  EmbarkPerfTesting.EmbarkPerfTestingBlueprintLibrary.CaptureScreenshotAsync
// Offset::0x25152A0;
void FEmbarkPerfTestingBlueprintLibrary::CaptureScreenshotAsync(FObject* WorldContextObject,FLatentActionInfo LatentInfo,FString Filename);


// Function  EmbarkFracturedDestructible.EmbarkDestructionCollectorSubsystem.AddDestructionEvent
// Offset::0x25820D0;
void FEmbarkDestructionCollectorSubsystem::AddDestructionEvent(FVector Location,FVector Extents,enum class EDestructionEventType EventType,FPrimitiveComponent* Component,int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkDestructionCollectorSubsystem.RegisterListener
// Offset::0x2582030;
void FEmbarkDestructionCollectorSubsystem::RegisterListener(FEmbarkDestructionListenerVolumeComponent* Listener);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.BoneHasAnyValidConnections
// Offset::0x2583C70;
bool FEmbarkDestructionGraphActor::BoneHasAnyValidConnections(FDestructibleBoneHandle InBoneHandle);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.ClearBoneFlags
// Offset::0x2583480;
void FEmbarkDestructionGraphActor::ClearBoneFlags(FDestructibleBoneHandle InBoneHandle,char Flags);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.DamageBone
// Offset::0x2583DB0;
void FEmbarkDestructionGraphActor::DamageBone(FDestructibleBoneHandle InBoneHandle,FBoneDamage Damage);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.DumpDestructionGraph
// Offset::0x2583640;
void FEmbarkDestructionGraphActor::DumpDestructionGraph(bool bDumpToLog,bool bDumpToFile,bool bPrettyPrint,bool bHashStableGraph);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.FindAllConnectedBones
// Offset::0x25837E0;
void FEmbarkDestructionGraphActor::FindAllConnectedBones(FDestructibleBoneHandle InBoneHandle,TSet<FDestructibleBoneHandle> OutFoundBones,bool bIncludeBrokenConnections,bool bIncludeDestroyedBones,int32_t Depth);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.GetBoneFracturedDestructibleComponent
// Offset::0x25828A0;
FEmbarkFracturedDestructibleMeshComponent* FEmbarkDestructionGraphActor::GetBoneFracturedDestructibleComponent(FDestructibleBoneHandle InBoneHandle);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.GetBoneHealth
// Offset::0x2583D10;
float FEmbarkDestructionGraphActor::GetBoneHealth(FDestructibleBoneHandle InBoneHandle);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.GetBonesLevelData
// Offset::0x2583250;
TArray<FFracturedDestructibleBoneLevelData> FEmbarkDestructionGraphActor::GetBonesLevelData();


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.GetFromActor
// Offset::0x2583FB0;
FEmbarkDestructionGraphActor* FEmbarkDestructionGraphActor::GetFromActor(FActor* InActorContext);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.GetFromComponent
// Offset::0x2583F10;
FEmbarkDestructionGraphActor* FEmbarkDestructionGraphActor::GetFromComponent(FActorComponent* InComponentContext);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.GetFromLevel
// Offset::0x2584050;
FEmbarkDestructionGraphActor* FEmbarkDestructionGraphActor::GetFromLevel(FLevel* InLevelContext);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.GetSimpleDestructiblesLevelData
// Offset::0x2583050;
TArray<FSimpleDestructibleLevelData> FEmbarkDestructionGraphActor::GetSimpleDestructiblesLevelData();


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.GetStrainBonesLevelData
// Offset::0x2583140;
TArray<FFracturedDestructibleStrainBone> FEmbarkDestructionGraphActor::GetStrainBonesLevelData();


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.HasBoneFlags
// Offset::0x2583390;
bool FEmbarkDestructionGraphActor::HasBoneFlags(FDestructibleBoneHandle InBoneHandle,char Flags);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.IsValidBoneConnection
// Offset::0x2583A90;
bool FEmbarkDestructionGraphActor::IsValidBoneConnection(FDestructibleBoneHandle InBoneHandle1,FDestructibleBoneHandle InBoneHandle2);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.IsValidBoneLink
// Offset::0x2583B80;
bool FEmbarkDestructionGraphActor::IsValidBoneLink(FDestructibleBoneHandle InBoneHandle,int32_t LinkIndex);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.OnRep_BlackBoardReplicationPtr
// Offset::0x2582880;
void FEmbarkDestructionGraphActor::OnRep_BlackBoardReplicationPtr();


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.OnRep_DestructionGraphHash
// Offset::0x1B91E70;
void FEmbarkDestructionGraphActor::OnRep_DestructionGraphHash();


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.SetBoneFlags
// Offset::0x2583560;
void FEmbarkDestructionGraphActor::SetBoneFlags(FDestructibleBoneHandle InBoneHandle,char Flags);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.TryGetBoneHandle
// Offset::0x2582EA0;
bool FEmbarkDestructionGraphActor::TryGetBoneHandle(FEmbarkFracturedDestructibleMeshComponent* InFracturedDestructibleMeshComponent,int32_t InBoneIndex,FDestructibleBoneHandle OutBoneHandle);


// Function  EmbarkFracturedDestructible.EmbarkDestructionGraphActor.TryGetBoneLevelData
// Offset::0x2582B50;
bool FEmbarkDestructionGraphActor::TryGetBoneLevelData(FEmbarkFracturedDestructibleMeshComponent* InFracturedDestructibleMeshComponent,int32_t InBoneIndex,FFracturedDestructibleBoneLevelData OutBoneLevelData);


// Function  EmbarkFracturedDestructible.FracturedMaterialsSettings.GetDefaultMapping
// Offset::0x2585EA0;
FFracturedMaterialMapping* FFracturedMaterialsSettings::GetDefaultMapping();


// Function  EmbarkFracturedDestructible.FracturedMaterialSubsystem.OnMappingLoaded
// Offset::0x2586150;
void FFracturedMaterialSubsystem::OnMappingLoaded();


// Function  EmbarkFracturedDestructible.StrainSettingsAsset.GetMaxNumNoCollisionDamageTypes
// Offset::0x2586730;
int32_t FStrainSettingsAsset::GetMaxNumNoCollisionDamageTypes();


// Function  EmbarkFracturedDestructible.StrainSettingsAsset.GetMaxNumNoCollisionViolationMsg
// Offset::0x2586670;
FString FStrainSettingsAsset::GetMaxNumNoCollisionViolationMsg();


// Function  EmbarkFracturedDestructible.FracturedStrainSettings.GetDefaultStrainSettingsAsset
// Offset::0x2586B20;
FStrainSettingsAsset* FFracturedStrainSettings::GetDefaultStrainSettingsAsset();


// Function  EmbarkFracturedDestructible.EmbarkDestructionSettings.GetDefaultDestructionBudgetSettingsAsset
// Offset::0x2587230;
FEmbarkDestructionBudgetSettingsAsset* FEmbarkDestructionSettings::GetDefaultDestructionBudgetSettingsAsset();


// Function  EmbarkFracturedDestructible.EmbarkDestructionSettings.GetDestructionBudgetSettingsAssetForLevel
// Offset::0x2587190;
FEmbarkDestructionBudgetSettingsAsset* FEmbarkDestructionSettings::GetDestructionBudgetSettingsAssetForLevel(FWorld* InWorld);


// Function  EmbarkFracturedDestructible.EmbarkDestructionUtils.FindDestructionGraphActorInlevel
// Offset::0x258A4E0;
FEmbarkDestructionGraphActor* FEmbarkDestructionUtils::FindDestructionGraphActorInlevel(FLevel* InLevel);


// Function  EmbarkFracturedDestructible.EmbarkDestructionUtils.GetPrimitiveBoneIndexFromBoneName
// Offset::0x258A400;
int32_t FEmbarkDestructionUtils::GetPrimitiveBoneIndexFromBoneName(FPrimitiveComponent* PrimitiveComponent,FName BoneName);


// Function  EmbarkFracturedDestructible.EmbarkDestructionUtils.GetPrimitiveBoneNameFromBoneIndex
// Offset::0x258A310;
FName FEmbarkDestructionUtils::GetPrimitiveBoneNameFromBoneIndex(FPrimitiveComponent* PrimitiveComponent,int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkDestructionUtils.IsSimpleDestructibleRefactorEnabled
// Offset::0x258A580;
bool FEmbarkDestructionUtils::IsSimpleDestructibleRefactorEnabled(FLevel* InLevel);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.BoneFireDamageTimer
// Offset::0x258B7E0;
void FEmbarkFracturedDestructibleMeshComponent::BoneFireDamageTimer();


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.CalcBoneBounds
// Offset::0x258BBF0;
FBoxSphereBounds FEmbarkFracturedDestructibleMeshComponent::CalcBoneBounds(int32_t BoneIndex,FTransform LocalToWorld);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.ClearBoneFlags
// Offset::0x258C170;
void FEmbarkFracturedDestructibleMeshComponent::ClearBoneFlags(int32_t BoneIndex,char Flags);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.DamageBone
// Offset::0x258C8E0;
void FEmbarkFracturedDestructibleMeshComponent::DamageBone(int32_t BoneIndex,FBoneDamage InDamage);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneBounds
// Offset::0x258BA90;
FBoxSphereBounds FEmbarkFracturedDestructibleMeshComponent::GetBoneBounds(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneBreakMaterial
// Offset::0x258F5C0;
FFracturedMaterialEffects* FEmbarkFracturedDestructibleMeshComponent::GetBoneBreakMaterial(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneChildren
// Offset::0x258C330;
TSet<FSceneComponent*> FEmbarkFracturedDestructibleMeshComponent::GetBoneChildren(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneGameplayMaterial
// Offset::0x258EFB0;
FFracturedMaterialGameplay* FEmbarkFracturedDestructibleMeshComponent::GetBoneGameplayMaterial(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneGameplayTag
// Offset::0x258E480;
FGameplayTag FEmbarkFracturedDestructibleMeshComponent::GetBoneGameplayTag(FName BoneName);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneHealth
// Offset::0x258C570;
float FEmbarkFracturedDestructibleMeshComponent::GetBoneHealth(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneIndex
// Offset::0x258DB60;
int32_t FEmbarkFracturedDestructibleMeshComponent::GetBoneIndex(FName BoneName);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneMass
// Offset::0x258D100;
float FEmbarkFracturedDestructibleMeshComponent::GetBoneMass(int32_t BoneIndex,bool bGetWelded);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneMaterialSettings
// Offset::0x258F660;
FFracturedMaterialAsset* FEmbarkFracturedDestructibleMeshComponent::GetBoneMaterialSettings(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneName
// Offset::0x258D6E0;
FName FEmbarkFracturedDestructibleMeshComponent::GetBoneName(int32_t InBoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneNameSimulatePhysics
// Offset::0x258CA40;
bool FEmbarkFracturedDestructibleMeshComponent::GetBoneNameSimulatePhysics(FName BoneName);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneRenderTransform
// Offset::0x258BD60;
FTransform FEmbarkFracturedDestructibleMeshComponent::GetBoneRenderTransform(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneSimulatePhysics
// Offset::0x258CFC0;
bool FEmbarkFracturedDestructibleMeshComponent::GetBoneSimulatePhysics(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetBoneTransform
// Offset::0x258BE50;
FTransform FEmbarkFracturedDestructibleMeshComponent::GetBoneTransform(int32_t BoneIndex,enum class ERelativeTransformSpace TransformSpace);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetDestructibleMeshAssetData
// Offset::0x258E0B0;
FEmbarkFracturedDestructibleMeshAssetUserData* FEmbarkFracturedDestructibleMeshComponent::GetDestructibleMeshAssetData();


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetMaterialSettings
// Offset::0x258FBF0;
FFracturedMaterialAsset* FEmbarkFracturedDestructibleMeshComponent::GetMaterialSettings(FName Material);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetNumBones
// Offset::0x258D320;
int32_t FEmbarkFracturedDestructibleMeshComponent::GetNumBones();


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetNumConnectedBones
// Offset::0x258D060;
int32_t FEmbarkFracturedDestructibleMeshComponent::GetNumConnectedBones(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.GetWeldedBoneTransform
// Offset::0x258BF90;
FTransform FEmbarkFracturedDestructibleMeshComponent::GetWeldedBoneTransform(FName BoneName);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.HasBoneFlags
// Offset::0x258C080;
bool FEmbarkFracturedDestructibleMeshComponent::HasBoneFlags(int32_t BoneIndex,char Flags);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.HideBone
// Offset::0x258C750;
void FEmbarkFracturedDestructibleMeshComponent::HideBone(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.IsBoneDestroyed
// Offset::0x258D230;
bool FEmbarkFracturedDestructibleMeshComponent::IsBoneDestroyed(int32_t InBoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.IsBoneHidden
// Offset::0x258C6B0;
bool FEmbarkFracturedDestructibleMeshComponent::IsBoneHidden(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.MarkBoneForDestruction
// Offset::0x258C7F0;
void FEmbarkFracturedDestructibleMeshComponent::MarkBoneForDestruction(int32_t BoneIndex,bool bDestroyConnected);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.OnBoneDamagedCallback
// Offset::0x258B680;
void FEmbarkFracturedDestructibleMeshComponent::OnBoneDamagedCallback(FBoneDamageEventType Damage);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.OnFireObjectStateChanged
// Offset::0x258B800;
void FEmbarkFracturedDestructibleMeshComponent::OnFireObjectStateChanged(FEmbarkFireOnStateChangedData ChangedData);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.OnHitCallback
// Offset::0x258B390;
void FEmbarkFracturedDestructibleMeshComponent::OnHitCallback(FPrimitiveComponent* HitComp,FActor* OtherActor,FPrimitiveComponent* OtherComp,FVector NormalImpulse,FHitResult Hit);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.ResetBoneCollisionProfile
// Offset::0x258B910;
void FEmbarkFracturedDestructibleMeshComponent::ResetBoneCollisionProfile(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.SetBoneCollisionProfile
// Offset::0x258B9B0;
void FEmbarkFracturedDestructibleMeshComponent::SetBoneCollisionProfile(int32_t BoneIndex,FName CollisionProfile);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.SetBoneFlags
// Offset::0x258C250;
void FEmbarkFracturedDestructibleMeshComponent::SetBoneFlags(int32_t BoneIndex,char Flags);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.ShowBone
// Offset::0x258C610;
void FEmbarkFracturedDestructibleMeshComponent::ShowBone(int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructibleMeshComponent.StartSimulateFractured
// Offset::0x1B91E70;
void FEmbarkFracturedDestructibleMeshComponent::StartSimulateFractured();


// Function  EmbarkFracturedDestructible.DestructibleBoneHandleLibrary.GetBoneGraphIndex
// Offset::0x2591520;
int32_t FDestructibleBoneHandleLibrary::GetBoneGraphIndex(FDestructibleBoneHandle InBoneHandle);


// Function  EmbarkFracturedDestructible.DestructibleBoneHandleLibrary.GetBoneIndex
// Offset::0x25913D0;
int32_t FDestructibleBoneHandleLibrary::GetBoneIndex(FDestructibleBoneHandle InBoneHandle);


// Function  EmbarkFracturedDestructible.DestructibleBoneHandleLibrary.GetRootBoneGraphIndex
// Offset::0x2591470;
int32_t FDestructibleBoneHandleLibrary::GetRootBoneGraphIndex(FDestructibleBoneHandle InBoneHandle);


// Function  EmbarkFracturedDestructible.DestructibleBoneHandleLibrary.IsSet
// Offset::0x2591320;
int32_t FDestructibleBoneHandleLibrary::IsSet(FDestructibleBoneHandle InBoneHandle);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructionListenerComponent.CalcDestructionListenerBounds
// Offset::0x2595FF0;
void FEmbarkFracturedDestructionListenerComponent::CalcDestructionListenerBounds(FVector OutBoundsLocation,FQuat OutBoundsRotation,FVector OutBoundsExtent);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructionListenerComponent.DebugDrawBoundsOverlap
// Offset::0x2596140;
void FEmbarkFracturedDestructionListenerComponent::DebugDrawBoundsOverlap();


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructionListenerComponent.RegisterOnDestructibleBoneBeginSimulate
// Offset::0x2595DF0;
void FEmbarkFracturedDestructionListenerComponent::RegisterOnDestructibleBoneBeginSimulate(FDelegate InDelegate);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructionListenerComponent.RegisterOnDestructibleBoneDestroyed
// Offset::0x2595F40;
void FEmbarkFracturedDestructionListenerComponent::RegisterOnDestructibleBoneDestroyed(FDelegate InDelegate);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructionListenerComponent.UnregisterOnDestructibleBoneBeginSimulate
// Offset::0x2595D50;
void FEmbarkFracturedDestructionListenerComponent::UnregisterOnDestructibleBoneBeginSimulate(FObject* InObject);


// Function  EmbarkFracturedDestructible.EmbarkFracturedDestructionListenerComponent.UnregisterOnDestructibleBoneDestroyed
// Offset::0x2595EA0;
void FEmbarkFracturedDestructionListenerComponent::UnregisterOnDestructibleBoneDestroyed(FObject* InObject);


// Function  EmbarkFracturedDestructible.EmbarkSimpleDestructibleMeshComponent.CalcDestructionBounds
// Offset::0x2596730;
void FEmbarkSimpleDestructibleMeshComponent::CalcDestructionBounds(FVector OutBoundsLocation,FQuat OutBoundsRotation,FVector OutBoundsExtent);


// Function  EmbarkFracturedDestructible.EmbarkSimpleDestructibleMeshComponent.IsPartOfDestructionGraph
// Offset::0x25966D0;
bool FEmbarkSimpleDestructibleMeshComponent::IsPartOfDestructionGraph();


// Function  EmbarkFracturedDestructible.EmbarkSimpleDestructibleMeshComponent.IsSimpleDestructibleRefactorEnabled
// Offset::0x2596700;
bool FEmbarkSimpleDestructibleMeshComponent::IsSimpleDestructibleRefactorEnabled();


// Function  EmbarkFracturedDestructible.EmbarkSimpleDestructibleMeshComponent.NotifyDestructionGraphComponentDestroyed
// Offset::0x2596880;
void FEmbarkSimpleDestructibleMeshComponent::NotifyDestructionGraphComponentDestroyed();


// Function  EmbarkFracturedDestructible.EmbarkSimpleDestructibleMeshComponent.ReceiveIsDestroyed
// Offset::0x3D30810;
bool FEmbarkSimpleDestructibleMeshComponent::ReceiveIsDestroyed();


// Function  EmbarkFracturedDestructible.EmbarkSimpleDestructibleMeshComponent.ReceiveOnDestroyComponentFromDestruction_Deterministic
// Offset::0x3D30810;
void FEmbarkSimpleDestructibleMeshComponent::ReceiveOnDestroyComponentFromDestruction_Deterministic(FEmbarkFracturedDestructibleMeshComponent* FracturedDestructibleMeshComponent,int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkSimpleDestructibleMeshComponent.ReceiveOnDestroyComponentFromDestruction_Server
// Offset::0x3D30810;
void FEmbarkSimpleDestructibleMeshComponent::ReceiveOnDestroyComponentFromDestruction_Server(FEmbarkFracturedDestructibleMeshComponent* FracturedDestructibleMeshComponent,int32_t BoneIndex);


// Function  EmbarkFracturedDestructible.EmbarkSimpleDestructibleMeshComponent.ReceiveShouldDisableDestructionGraphRegistration
// Offset::0x3D30810;
bool FEmbarkSimpleDestructibleMeshComponent::ReceiveShouldDisableDestructionGraphRegistration();


// Function  EmbarkFire.EmbarkFireFunctionLibrary.AddHeat_Server
// Offset::0x25A6160;
void FEmbarkFireFunctionLibrary::AddHeat_Server(FObject* WorldContextObject,FEmbarkFireObjectHandle Handle,float HeatToAdd,FInstigator Instigator);


// Function  EmbarkFire.EmbarkFireFunctionLibrary.ClearAllHeat_Server
// Offset::0x25A60D0;
void FEmbarkFireFunctionLibrary::ClearAllHeat_Server(FObject* WorldContextObject);


// Function  EmbarkFire.EmbarkFireFunctionLibrary.DisableHandle_Server
// Offset::0x25A6340;
void FEmbarkFireFunctionLibrary::DisableHandle_Server(FObject* WorldContextObject,FEmbarkFireObjectHandle Handle);


// Function  EmbarkFire.EmbarkFireFunctionLibrary.EnableHandle_Server
// Offset::0x25A6420;
void FEmbarkFireFunctionLibrary::EnableHandle_Server(FObject* WorldContextObject,FEmbarkFireObjectHandle Handle);


// Function  EmbarkFire.EmbarkFireFunctionLibrary.GetEmbarkFireSubsystem_Server
// Offset::0x25A6850;
FEmbarkFireSubsystem* FEmbarkFireFunctionLibrary::GetEmbarkFireSubsystem_Server(FObject* WorldContextObject);


// Function  EmbarkFire.EmbarkFireFunctionLibrary.IsHandleValid
// Offset::0x25A5D20;
bool FEmbarkFireFunctionLibrary::IsHandleValid(FObject* WorldContextObject,FEmbarkFireObjectHandle Handle);


// Function  EmbarkFire.EmbarkFireFunctionLibrary.RegisterObject_Server
// Offset::0x25A65E0;
FEmbarkFireObjectHandle FEmbarkFireFunctionLibrary::RegisterObject_Server(FObject* WorldContextObject,FEmbarkFireObjectStateInitData InitData);


// Function  EmbarkFire.EmbarkFireFunctionLibrary.SetInstigator_Server
// Offset::0x25A5E00;
void FEmbarkFireFunctionLibrary::SetInstigator_Server(FObject* WorldContextObject,FEmbarkFireObjectHandle Handle,FInstigator Instigator);


// Function  EmbarkFire.EmbarkFireFunctionLibrary.SetSphereLocation_Server
// Offset::0x25A5FA0;
void FEmbarkFireFunctionLibrary::SetSphereLocation_Server(FObject* WorldContextObject,FEmbarkFireObjectHandle Handle,FVector Location);


// Function  EmbarkFire.EmbarkFireFunctionLibrary.UnregisterHandle_Server
// Offset::0x25A6500;
void FEmbarkFireFunctionLibrary::UnregisterHandle_Server(FObject* WorldContextObject,FEmbarkFireObjectHandle Handle);


// Function  EmbarkFire.EmbarkFireObjectGraph.OnDistanceQueryManagerData
// Offset::0x25A7590;
void FEmbarkFireObjectGraph::OnDistanceQueryManagerData(FEmbarkDistanceQueryInfo Info,bool bOverlapping);


// Function  EmbarkMovement.EmbarkMovementParamsDynamicMixinLibrary.GetCapsuleHalfHeight
// Offset::0x25D2F10;
float FEmbarkMovementParamsDynamicMixinLibrary::GetCapsuleHalfHeight(FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  EmbarkMovement.EmbarkMovementFunctionLibrary.CalcMostRelevantHitResult
// Offset::0x25D3B40;
void FEmbarkMovementFunctionLibrary::CalcMostRelevantHitResult(TArray<FHitResult> HitResults,FHitResult OutMostRelevantHitResult);


// Function  EmbarkMovement.EmbarkMovementFunctionLibrary.CalcVelocity
// Offset::0x25D3D20;
void FEmbarkMovementFunctionLibrary::CalcVelocity(FEmbarkMovementParamsDynamic Dynamics,FEmbarkMovementParamsStatic Statics);


// Function  EmbarkMovement.EmbarkMovementParamsTransientResultScriptMixinLibrary.AddUniqueCollider
// Offset::0x25D7A80;
void FEmbarkMovementParamsTransientResultScriptMixinLibrary::AddUniqueCollider(FEmbarkMovementParamsTransientResult TransientResult,FEmbarkMovementParamsTransientResultColliderData AddColliderData);


// Function  EmbarkMovement.EmbarkMovementParamsTransientResultScriptMixinLibrary.GetColliderWithOwner
// Offset::0x25D7D10;
bool FEmbarkMovementParamsTransientResultScriptMixinLibrary::GetColliderWithOwner(FEmbarkMovementParamsTransientResult TransientResult,FActor* Owner,FEmbarkMovementParamsTransientResultColliderData OutColliderData);


// Function  EmbarkMovement.KneeHeightHelpers.DebugKneeHeightPillSweeps
// Offset::0x243E320;
bool FKneeHeightHelpers::DebugKneeHeightPillSweeps();


// Function  EmbarkMovement.KneeHeightHelpers.DebugKneeHeightVerticalSweeps
// Offset::0x243E320;
bool FKneeHeightHelpers::DebugKneeHeightVerticalSweeps();


// Function  EmbarkMovement.KneeHeightHelpers.DebugKneeHeightVirtualDitch
// Offset::0x243E320;
bool FKneeHeightHelpers::DebugKneeHeightVirtualDitch();


// Function  EmbarkMovement.EmbarkMovementBlockedFloorsContainerMixinLibrary.AddBlockedFloor
// Offset::0x25D8D60;
void FEmbarkMovementBlockedFloorsContainerMixinLibrary::AddBlockedFloor(FEmbarkMovementBlockedFloorsContainer Container,FActor* InBlockedFloorActor);


// Function  EmbarkMovement.EmbarkMovementBlockedFloorsContainerMixinLibrary.FillBlockedFloors
// Offset::0x25D8EC0;
void FEmbarkMovementBlockedFloorsContainerMixinLibrary::FillBlockedFloors(FEmbarkMovementBlockedFloorsContainer Container,TArray<FActor*> InOutBlockedFloorActors);


// Function  EmbarkMovement.EmbarkMovementBlockedFloorsContainerMixinLibrary.IsFloorBlocked
// Offset::0x25D8BA0;
bool FEmbarkMovementBlockedFloorsContainerMixinLibrary::IsFloorBlocked(FEmbarkMovementBlockedFloorsContainer Container,FActor* InBlockedFloorActor);


// Function  EmbarkMovement.EmbarkRootWarpSpaceMixinLibrary.GetAttachedToBone
// Offset::0x25D9A20;
FName FEmbarkRootWarpSpaceMixinLibrary::GetAttachedToBone(FEmbarkRootWarpSpace RootWarpSpace);


// Function  EmbarkMovement.EmbarkRootWarpSpaceMixinLibrary.GetAttachedToComponent
// Offset::0x25D9BE0;
FSceneComponent* FEmbarkRootWarpSpaceMixinLibrary::GetAttachedToComponent(FEmbarkRootWarpSpace RootWarpSpace);


// Function  EmbarkMovement.EmbarkRootWarpSpaceMixinLibrary.SetStartAndEndTransforms
// Offset::0x25DA0A0;
void FEmbarkRootWarpSpaceMixinLibrary::SetStartAndEndTransforms(FEmbarkRootWarpSpace RootWarpSpace,FTransform WorldStartTransform,FTransform WorldEndTransform,FSceneComponent* InAttachComponent,FName InAttachToBone);


// Function  EmbarkMovement.EmbarkRootWarpSpaceMixinLibrary.UpdateTransforms
// Offset::0x25D9D90;
void FEmbarkRootWarpSpaceMixinLibrary::UpdateTransforms(FEmbarkRootWarpSpace RootWarpSpace,FTransform OutStartTransform,FTransform OutEndTransform);


// Function  EmbarkMovement.EmbarkServersideReplicatedInputScriptMixinLibrary.GetBool
// Offset::0x25DCD70;
bool FEmbarkServersideReplicatedInputScriptMixinLibrary::GetBool(FEmbarkServersideReplicatedInput Input,FName InputName);


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.ClientInputProcessingSpeedChange
// Offset::0x25DD4B0;
void FEmbarkServersideInputReplicationComponent::ClientInputProcessingSpeedChange(float SpeedChange);


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.ClientInputProcessingStarted
// Offset::0x25DD550;
void FEmbarkServersideInputReplicationComponent::ClientInputProcessingStarted();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.CreateInput_Client
// Offset::0x25DD5C0;
void FEmbarkServersideInputReplicationComponent::CreateInput_Client(FEmbarkServersideReplicatedInput NewInput);


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.GetInputBufferSize
// Offset::0x25DDB80;
int32_t FEmbarkServersideInputReplicationComponent::GetInputBufferSize();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.GetInputSyncInterval
// Offset::0x25DD990;
float FEmbarkServersideInputReplicationComponent::GetInputSyncInterval();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.GetInputTimestamp
// Offset::0x25DDB10;
float FEmbarkServersideInputReplicationComponent::GetInputTimestamp();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.GetLatestInput
// Offset::0x25DDBE0;
FEmbarkServersideReplicatedInput FEmbarkServersideInputReplicationComponent::GetLatestInput();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.GetLatestInputProcessingTime
// Offset::0x25DDBB0;
float FEmbarkServersideInputReplicationComponent::GetLatestInputProcessingTime();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.GetNewInputs
// Offset::0x25DDE40;
TArray<FEmbarkServersideReplicatedInput> FEmbarkServersideInputReplicationComponent::GetNewInputs();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.GetServerLatestInputFrame_Server
// Offset::0x1F62C50;
int32_t FEmbarkServersideInputReplicationComponent::GetServerLatestInputFrame_Server();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.IsInputNewer
// Offset::0x25DDA20;
bool FEmbarkServersideInputReplicationComponent::IsInputNewer(int32_t NewInputFrame,int32_t BaseInputFrame);


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.RecalculatePendingInput
// Offset::0x25DD970;
void FEmbarkServersideInputReplicationComponent::RecalculatePendingInput();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.ServerInputProcessingCanBeStarted
// Offset::0x25DD570;
void FEmbarkServersideInputReplicationComponent::ServerInputProcessingCanBeStarted();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.SetLocalBaseForInputVector_Client
// Offset::0x25DD810;
void FEmbarkServersideInputReplicationComponent::SetLocalBaseForInputVector_Client(FPrimitiveComponent* InLocalBase,FName InLocalBaseBone);


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.StartInputGeneration
// Offset::0x25DD940;
void FEmbarkServersideInputReplicationComponent::StartInputGeneration();


// Function  EmbarkMovement.EmbarkServersideInputReplicationComponent.StopInputGeneration
// Offset::0x25DD910;
void FEmbarkServersideInputReplicationComponent::StopInputGeneration();


// Function  EmbarkMovement.VirtualTerrainFunctionLibrary.CreateGroundPlane
// Offset::0x25DF3D0;
void FVirtualTerrainFunctionLibrary::CreateGroundPlane(FObject* DebugDrawCntxObj,FVector RequesterFootLocation,FVector RequesterGroundNormal,FVirtualTerrainWalkableThresholds WalkableThresholds,TArray<FHitResult> GroundGridHits,FVirtualTerrainGroundPlane OutResult);


// Function  EmbarkMovement.VirtualTerrainFunctionLibrary.MovingTrace
// Offset::0x25DF890;
int64_t FVirtualTerrainFunctionLibrary::MovingTrace(FObject* WorldContextObject,FVirtualTerrainParams TraceParams,TArray<FHitResult> OutHitResults);


// Function  EmbarkMovement.VirtualTerrainFunctionLibrary.StandingStillTrace
// Offset::0x25DFAC0;
int64_t FVirtualTerrainFunctionLibrary::StandingStillTrace(FObject* WorldContextObject,FVirtualTerrainParams TraceParams,TArray<FHitResult> OutHitResults);


// Function  EmbarkMovement.VirtualTerrainFunctionLibrary.TraceForGroundPlane
// Offset::0x25DEFB0;
void FVirtualTerrainFunctionLibrary::TraceForGroundPlane(FObject* WorldContextObject,FVirtualTerrainParams TraceParams,FVirtualTerrainGroundPlane OutGroundPlane);


// Function  EmbarkMovement.VirtualTerrainGroundPlaneMixinLibrary.GetBestHitResult
// Offset::0x25E0220;
FHitResult FVirtualTerrainGroundPlaneMixinLibrary::GetBestHitResult(FVirtualTerrainGroundPlane GroundPlane);


// Function  EmbarkMovement.VirtualTerrainGroundPlaneMixinLibrary.IsGroundWalkable
// Offset::0x25E0510;
bool FVirtualTerrainGroundPlaneMixinLibrary::IsGroundWalkable(FVirtualTerrainGroundPlane GroundPlane);


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.GenerateTimeWarpCurve
// Offset::0x25E1080;
bool FEmbarkRootMotionSourceUtilLibrary::GenerateTimeWarpCurve(float DeltaTime,float SpeedScale,FName CurveName,TArray<FAnimSequence*> Sequences,FCurveFloat* OutCurve,float OutLastTime);


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.GenerateTimeWarpCurveRuntimeFloatCurve
// Offset::0x25E0DF0;
bool FEmbarkRootMotionSourceUtilLibrary::GenerateTimeWarpCurveRuntimeFloatCurve(float DeltaTime,float SpeedScale,FName CurveName,TArray<FAnimSequence*> Sequences,FRuntimeFloatCurve OutCurve,float OutLastTime);


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.GetCurrentPlayingSequenceData
// Offset::0x25E13E0;
enum class ERootMotionParseRetVal FEmbarkRootMotionSourceUtilLibrary::GetCurrentPlayingSequenceData(TArray<FAnimSequence*> InSequences,float InTime,float OneFrameTime,int32_t OutClipIndex,float OutClipTime,float OutPrevClipTime);


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.GetTotalSequenceLength
// Offset::0x25E12D0;
float FEmbarkRootMotionSourceUtilLibrary::GetTotalSequenceLength(TArray<FAnimSequence*> InSequences,float OneFrameTime);


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.Name_Warp_Active
// Offset::0x25E16B0;
FName FEmbarkRootMotionSourceUtilLibrary::Name_Warp_Active();


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.Name_Warp_InputScale
// Offset::0x25E16E0;
FName FEmbarkRootMotionSourceUtilLibrary::Name_Warp_InputScale();


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.Name_Warp_RootMotionScale
// Offset::0x25E1710;
FName FEmbarkRootMotionSourceUtilLibrary::Name_Warp_RootMotionScale();


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.Name_Warp_Rotation
// Offset::0x25E1740;
FName FEmbarkRootMotionSourceUtilLibrary::Name_Warp_Rotation();


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.Name_Warp_SpeedWarp
// Offset::0x25E1650;
FName FEmbarkRootMotionSourceUtilLibrary::Name_Warp_SpeedWarp();


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.Name_Warp_TranslationHorizontal
// Offset::0x25E1770;
FName FEmbarkRootMotionSourceUtilLibrary::Name_Warp_TranslationHorizontal();


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.Name_Warp_TranslationVertical
// Offset::0x25E17A0;
FName FEmbarkRootMotionSourceUtilLibrary::Name_Warp_TranslationVertical();


// Function  EmbarkMovement.EmbarkRootMotionSourceUtilLibrary.Name_Warp_Upright
// Offset::0x25E1680;
FName FEmbarkRootMotionSourceUtilLibrary::Name_Warp_Upright();


// Function  EmbarkMovement.AbilityTask_ApplyRootMotion_AnimSequenceBase.GetRootMotionDuration
// Offset::0x25E20E0;
float FAbilityTask_ApplyRootMotion_AnimSequenceBase::GetRootMotionDuration();


// Function  EmbarkMovement.AbilityTask_ApplyRootMotion_AnimSequenceBase.GetRootMotionInitialVelocity
// Offset::0x25E2110;
FVector FAbilityTask_ApplyRootMotion_AnimSequenceBase::GetRootMotionInitialVelocity();


// Function  EmbarkMovement.AbilityTask_ApplyRootMotion_AnimSequenceBase.GetRootMotionSpeedScale
// Offset::0x25E2170;
float FAbilityTask_ApplyRootMotion_AnimSequenceBase::GetRootMotionSpeedScale();


// Function  EmbarkMovement.AbilityTask_ApplyRootMotion_AnimSequenceBase.GetRootMotionTimeWarpedTime
// Offset::0x25E21A0;
float FAbilityTask_ApplyRootMotion_AnimSequenceBase::GetRootMotionTimeWarpedTime();


// Function  EmbarkMovement.AbilityTask_ApplyRootMotion_AnimSequenceRootMotion.ApplyRootMotionAnimSequence
// Offset::0x25E27F0;
FAbilityTask_ApplyRootMotion_AnimSequenceRootMotion* FAbilityTask_ApplyRootMotion_AnimSequenceRootMotion::ApplyRootMotionAnimSequence(FGameplayAbility* OwningAbility,FName TaskInstanceName,TArray<FAnimSequence*> InSequences,FRotator MovementDirectionOffset,bool bOverrideIgnoreGravity,bool bShouldSpeedWarp,float SpeedWarpMin,float SpeedWarpMax);


// Function  EmbarkMovement.AbilityTask_ApplyRootMotion_AnimSequenceRootWarp.ApplyRootMotionAnimSequence
// Offset::0x25E2EB0;
FAbilityTask_ApplyRootMotion_AnimSequenceRootWarp* FAbilityTask_ApplyRootMotion_AnimSequenceRootWarp::ApplyRootMotionAnimSequence(FGameplayAbility* OwningAbility,FName TaskInstanceName,TArray<FAnimSequence*> InSequences,FTransform StartActorTransform,FTransform WarpTargetTransform,FSceneComponent* AlignToComponent,FName InCharacterAuxBoneName,float CapsuleHeight,enum class ERootMotionFinishVelocityMode VelocityOnFinishMode,FName InAlignToComponentBoneName,enum class ERootMotionDefaultCurveType DefaultCurveType,float BlendLength,bool bShouldSpeedWarp,float SpeedWarpMin,float SpeedWarpMax,bool bSweepTestDuringRootWarp,float StartTimeOffset);


// Function  EmbarkMovement.KneeHeightMovementHelpers.GetCollisionAdjustedMove
// Offset::0x25E6BB0;
FVector FKneeHeightMovementHelpers::GetCollisionAdjustedMove(bool bDisallowUpwardsBounces,FKneeHeightPill KneeHeightPill,FVector MoveVec,float DeltaSeconds,FHitResult OutHitResult,FVector DepenetrationVec,TArray<FObject*> IgnoreStartingPenetrationForTypes,FEmbarkMovementParamsTransientResult TransientResult);


// Function  EmbarkMovement.KneeHeightMovementHelpers.GetCollisionAdjustedMoveWithDebug
// Offset::0x25E70D0;
FVector FKneeHeightMovementHelpers::GetCollisionAdjustedMoveWithDebug(bool bDisallowUpwardsBounces,FKneeHeightPill KneeHeightPill,FVector MoveVec,float DeltaSeconds,FHitResult OutHitResult,FVector DepenetrationVec,TArray<FObject*> IgnoreStartingPenetrationForTypes,FEmbarkMovementParamsTransientResult TransientResult,FKneeHeightMoveDebugData OutDebugData);


// Function  EmbarkMovement.KneeHeightMovementHelpers.SimulateMovement
// Offset::0x25E7680;
void FKneeHeightMovementHelpers::SimulateMovement(FKneeHeightMoveSimulationContext SimContext,FKneeHeightMoveSimulationResult OutSimResult,FEmbarkMovementParamsTransientResult TransientResult,float Standing_Kneeheight);


// Function  EmbarkMovement.KneeHeightMovementHelpers.SimulateMovementWithDebug
// Offset::0x25E7BD0;
void FKneeHeightMovementHelpers::SimulateMovementWithDebug(FKneeHeightMoveSimulationContext SimContext,FKneeHeightMoveSimulationResult OutSimResult,FEmbarkMovementParamsTransientResult TransientResult,float Standing_Kneeheight,FKneeHeightMoveDebugData OutDebugData);


// Function  EmbarkMovement.KneeHeightVirtualDitchHelpers.FixGroundForPotentialVirtualDitch
// Offset::0x25E85B0;
void FKneeHeightVirtualDitchHelpers::FixGroundForPotentialVirtualDitch(FKneeHeightPill KneeHeightPill,FVirtualTerrainWalkableThresholds WalkableThresholds,FKneeHeightMoveSimulationContext OutKneeHeightSimContext);


// Function  EmbarkMovement.PendulumUtils.GetAnimTicksFromTime
// Offset::0x25E8E00;
int32_t FPendulumUtils::GetAnimTicksFromTime(float Time);


// Function  EmbarkMovement.PendulumUtils.GetAnimTimeFromTicks
// Offset::0x25E8D60;
float FPendulumUtils::GetAnimTimeFromTicks(int32_t Ticks);


// Function  EmbarkMovement.PendulumUtils.GetTicksFromTime
// Offset::0x25E8F40;
int32_t FPendulumUtils::GetTicksFromTime(float Time);


// Function  EmbarkMovement.PendulumUtils.GetTimeFromTicks
// Offset::0x25E8EA0;
float FPendulumUtils::GetTimeFromTicks(int32_t Ticks);


// Function  EmbarkMovement.PendulumBlockedVaultablesStateMixinLibrary.AddBlockedVaultable
// Offset::0x25E9AC0;
void FPendulumBlockedVaultablesStateMixinLibrary::AddBlockedVaultable(FPendulumBlockedVaultables BlockedVaultables,FPrimitiveComponent* Vaultable,int16_t VaultableBoneIndex,float BlockedUntilTimeStamp);


// Function  EmbarkMovement.PendulumBlockedVaultablesStateMixinLibrary.GetNumBlockedVaultables
// Offset::0x25E96E0;
uint32_t FPendulumBlockedVaultablesStateMixinLibrary::GetNumBlockedVaultables(FPendulumBlockedVaultables BlockedVaultables);


// Function  EmbarkMovement.PendulumBlockedVaultablesStateMixinLibrary.IsVaultableBlocked
// Offset::0x25E97D0;
bool FPendulumBlockedVaultablesStateMixinLibrary::IsVaultableBlocked(FPendulumBlockedVaultables BlockedVaultables,FPrimitiveComponent* Vaultable,int16_t VaultableBoneIndex);


// Function  EmbarkMovement.PendulumBlockedVaultablesStateMixinLibrary.UpdateBlockedVaultables
// Offset::0x25E9970;
void FPendulumBlockedVaultablesStateMixinLibrary::UpdateBlockedVaultables(FPendulumBlockedVaultables BlockedVaultables,float CurrentTime);


// Function  EmbarkMovement.PendulumVaultSimStateMixinLibrary.IsVaultOnCooldown
// Offset::0x25EA450;
bool FPendulumVaultSimStateMixinLibrary::IsVaultOnCooldown(FPendulumVaultSimState VaultSimState,float CurrentTime);


// Function  EmbarkMovement.PendulumVaultSimStateMixinLibrary.StartVaultCooldown
// Offset::0x25EA2B0;
void FPendulumVaultSimStateMixinLibrary::StartVaultCooldown(FPendulumVaultSimState VaultSimState,float CurrentTime,float Cooldown);


// Function  EmbarkMovement.PendulumVaultSimStateMixinLibrary.UpdateCooldowns
// Offset::0x25EA150;
void FPendulumVaultSimStateMixinLibrary::UpdateCooldowns(FPendulumVaultSimState VaultSimState,float CurrentTime);


// Function  EmbarkFeatureFlags.FeatureFlagNativeFunctionLibrary.IsAutoTestHappypath
// Offset::0x25ED650;
bool FFeatureFlagNativeFunctionLibrary::IsAutoTestHappypath();


// Function  EmbarkFeatureFlags.FeatureFlagNativeFunctionLibrary.IsDevMode
// Offset::0x25ED720;
bool FFeatureFlagNativeFunctionLibrary::IsDevMode();


// Function  EmbarkFeatureFlags.FeatureFlagNativeFunctionLibrary.IsLocalPlaytest
// Offset::0x25ED580;
bool FFeatureFlagNativeFunctionLibrary::IsLocalPlaytest();


// Function  EmbarkFeatureFlags.FeatureFlagNativeFunctionLibrary.UseKneeHeightMovement
// Offset::0x25ED4B0;
bool FFeatureFlagNativeFunctionLibrary::UseKneeHeightMovement();


// Function  ActorBlackBoard.ActorBlackBoardFunctionLibrary.DirtyStateInBlackBoard
// Offset::0x26085D0;
void FActorBlackBoardFunctionLibrary::DirtyStateInBlackBoard(FBlackBoardVariableDeltaCompressionPtr BB,FSimBaseClass* State);


// Function  ActorBlackBoard.ActorBlackBoardFunctionLibrary.EditFirstStateOfTypeFromBlackBoard
// Offset::0x26086D0;
FObject* FActorBlackBoardFunctionLibrary::EditFirstStateOfTypeFromBlackBoard(FBlackBoardVariableDeltaCompressionPtr BB,FObject* Clazz);


// Function  ActorBlackBoard.ActorBlackBoardFunctionLibrary.GetFirstStateOfTypeFromBlackBoard
// Offset::0x26087E0;
FObject* FActorBlackBoardFunctionLibrary::GetFirstStateOfTypeFromBlackBoard(FBlackBoardVariableDeltaCompressionPtr BB,FObject* Clazz);


// Function  ActorBlackBoard.ActorBlackBoardFunctionLibrary.RegisterClassToBlackBoard
// Offset::0x26088F0;
FObject* FActorBlackBoardFunctionLibrary::RegisterClassToBlackBoard(FBlackBoardVariableDeltaCompressionPtr BB,FObject* Clazz);


// Function  ActorBlackBoard.ActorBlackBoardOwner.DirtyStateInBlackBoard
// Offset::0x2608EE0;
void FActorBlackBoardOwner::DirtyStateInBlackBoard(FSimBaseClass* State);


// Function  ActorBlackBoard.ActorBlackBoardOwner.EditFirstStateOfTypeFromBlackBoard
// Offset::0x2608F80;
FObject* FActorBlackBoardOwner::EditFirstStateOfTypeFromBlackBoard(FObject* Clazz);


// Function  ActorBlackBoard.ActorBlackBoardOwner.GetDeltaCompressionPtr
// Offset::0x2609160;
FBlackBoardVariableDeltaCompressionPtr FActorBlackBoardOwner::GetDeltaCompressionPtr();


// Function  ActorBlackBoard.ActorBlackBoardOwner.GetFirstStateOfTypeFromBlackBoard
// Offset::0x2609020;
FObject* FActorBlackBoardOwner::GetFirstStateOfTypeFromBlackBoard(FObject* Clazz);


// Function  ActorBlackBoard.ActorBlackBoardOwner.RegisterClassToBlackBoard
// Offset::0x26090C0;
FObject* FActorBlackBoardOwner::RegisterClassToBlackBoard(FObject* Clazz);


// Function  ActorBlackBoard.ActorBlackBoardTestOnReps.OnRep_TriggeredA
// Offset::0x260AEE0;
void FActorBlackBoardTestOnReps::OnRep_TriggeredA();


// Function  ActorBlackBoard.ActorBlackBoardTestOnReps.OnRep_TriggeredExplosions
// Offset::0x260AF10;
void FActorBlackBoardTestOnReps::OnRep_TriggeredExplosions();


// Function  ActorBlackBoard.ActorBlackBoardTestInitialization.InitForActor
// Offset::0x260B400;
void FActorBlackBoardTestInitialization::InitForActor(FObject* Owner);


// Function  ActorBlackBoard.BlackBoardTesterAS.FakeTransmit
// Offset::0x260B800;
void FBlackBoardTesterAS::FakeTransmit();


// Function  ActorBlackBoard.BlackBoardTesterAS.GetFirstStateOfTypeFromClientBlackBoard
// Offset::0x260B830;
FObject* FBlackBoardTesterAS::GetFirstStateOfTypeFromClientBlackBoard(FObject* Class);


// Function  ActorBlackBoard.BlackBoardTesterAS.GetFirstStateOfTypeFromServerBlackBoard
// Offset::0x260B830;
FObject* FBlackBoardTesterAS::GetFirstStateOfTypeFromServerBlackBoard(FObject* Class);


// Function  ActorBlackBoard.BlackBoardTesterAS.Init
// Offset::0x260B800;
void FBlackBoardTesterAS::Init();


// Function  ActorBlackBoard.BlackBoardTesterAS.RegisterClassToServerBlackBoard
// Offset::0x260B830;
FObject* FBlackBoardTesterAS::RegisterClassToServerBlackBoard(FObject* Class);


// Function  ActorBlackBoard.BlackBoardTesterAS.SetOwnerActor
// Offset::0x260B760;
void FBlackBoardTesterAS::SetOwnerActor(FActor* Obj);


// Function  EmbarkFastReplicator.EmbarkFastReplicatorRegisterTokenScriptMixinLibrary.IsValid
// Offset::0x2618ED0;
bool FEmbarkFastReplicatorRegisterTokenScriptMixinLibrary::IsValid(FEmbarkFastReplicatorRegisterToken Token);


// Function  EmbarkFastReplicator.EmbarkFastReplicatorActorOrComponentScriptMixinLibrary.IsValid
// Offset::0x2619280;
bool FEmbarkFastReplicatorActorOrComponentScriptMixinLibrary::IsValid(FEmbarkFastReplicatorActorOrComponent Ref);


// Function  EmbarkFastReplicator.TestEmbarkFastReplicatorMockup.OnCallback
// Offset::0x261A9B0;
void FTestEmbarkFastReplicatorMockup::OnCallback(FEmbarkFastReplicatorActorOrComponent Ref);


// Function  EmbarkFastReplicator.EmbarkFastReplicatorTransform.RegisterCallback_Client
// Offset::0x51990;
void FEmbarkFastReplicatorTransform::RegisterCallback_Client(FEmbarkFastReplicatorActorOrComponent Ref,FDelegate Callback);


// Function  EmbarkFastReplicator.EmbarkFastReplicatorTransform.UpdateData_Server
// Offset::0x261B560;
void FEmbarkFastReplicatorTransform::UpdateData_Server(FEmbarkFastReplicatorActorOrComponent Ref,FReplicatedTransform NewTransform);


// Function  EmbarkActivities.EmbarkSlimActivitiesSubsystem.SetActivityAvailability
// Offset::0x26392C0;
void FEmbarkSlimActivitiesSubsystem::SetActivityAvailability(FString ActivityId,bool bAvailability);


// Function  EmbarkActivities.EmbarkSlimActivitiesSubsystem.TryConsumeLaunchActivity
// Offset::0x2639180;
bool FEmbarkSlimActivitiesSubsystem::TryConsumeLaunchActivity(FString OutActivityId);


// Function  EmbarkObjectPools.EmbarkObjectPool.FillPool
// Offset::0x263AB30;
void FEmbarkObjectPool::FillPool(int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkObjectPool.FinalizePool
// Offset::0x263AD70;
void FEmbarkObjectPool::FinalizePool();


// Function  EmbarkObjectPools.EmbarkObjectPool.InitializePool
// Offset::0x263AE00;
void FEmbarkObjectPool::InitializePool(FName Name,FObject* Class,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkObjectPool.NextObject
// Offset::0x263A6F0;
FObject* FEmbarkObjectPool::NextObject();


// Function  EmbarkObjectPools.EmbarkObjectPool.NextOrCreateObject
// Offset::0x263A600;
FObject* FEmbarkObjectPool::NextOrCreateObject();


// Function  EmbarkObjectPools.EmbarkObjectPool.PoolObject
// Offset::0x263A810;
bool FEmbarkObjectPool::PoolObject(FObject* Object);


// Function  EmbarkObjectPools.EmbarkObjectPool.ResetPool
// Offset::0x263ACA0;
void FEmbarkObjectPool::ResetPool(int32_t Capacity);


// Function  EmbarkObjectPools.EmbarkActorPool.FillPool
// Offset::0x263BAC0;
void FEmbarkActorPool::FillPool(int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorPool.FinalizePool
// Offset::0x263BC80;
void FEmbarkActorPool::FinalizePool();


// Function  EmbarkObjectPools.EmbarkActorPool.InitializePool
// Offset::0x263BDD0;
void FEmbarkActorPool::InitializePool(FName Name,FActor* Class,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorPool.NextObject
// Offset::0x263A6F0;
FActor* FEmbarkActorPool::NextObject();


// Function  EmbarkObjectPools.EmbarkActorPool.NextOrCreateObject
// Offset::0x263B730;
FActor* FEmbarkActorPool::NextOrCreateObject();


// Function  EmbarkObjectPools.EmbarkActorPool.PoolObject
// Offset::0x263B880;
bool FEmbarkActorPool::PoolObject(FActor* Object);


// Function  EmbarkObjectPools.EmbarkActorPool.ResetPool
// Offset::0x263ACA0;
void FEmbarkActorPool::ResetPool(int32_t Capacity);


// Function  EmbarkObjectPools.EmbarkActorComponentPool.FillPool
// Offset::0x263C9F0;
void FEmbarkActorComponentPool::FillPool(int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorComponentPool.FinalizePool
// Offset::0x263CC80;
void FEmbarkActorComponentPool::FinalizePool();


// Function  EmbarkObjectPools.EmbarkActorComponentPool.InitializePool
// Offset::0x263CDD0;
void FEmbarkActorComponentPool::InitializePool(FName Name,FActorComponent* Class,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorComponentPool.NextObject
// Offset::0x263C830;
FActorComponent* FEmbarkActorComponentPool::NextObject();


// Function  EmbarkObjectPools.EmbarkActorComponentPool.NextOrCreateObject
// Offset::0x263C6E0;
FActorComponent* FEmbarkActorComponentPool::NextOrCreateObject();


// Function  EmbarkObjectPools.EmbarkActorComponentPool.PoolObject
// Offset::0x263C950;
bool FEmbarkActorComponentPool::PoolObject(FActorComponent* Object);


// Function  EmbarkObjectPools.EmbarkActorComponentPool.ResetPool
// Offset::0x263CBB0;
void FEmbarkActorComponentPool::ResetPool(int32_t Capacity);


// Function  EmbarkObjectPools.EmbarkObjectVariantPool.FillPool
// Offset::0x263D970;
void FEmbarkObjectVariantPool::FillPool(FObject* Class,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkObjectVariantPool.FinalizePool
// Offset::0x263DD00;
void FEmbarkObjectVariantPool::FinalizePool();


// Function  EmbarkObjectPools.EmbarkObjectVariantPool.InitializePool
// Offset::0x263DD70;
void FEmbarkObjectVariantPool::InitializePool(FName Name,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkObjectVariantPool.NextObject
// Offset::0x263D720;
FObject* FEmbarkObjectVariantPool::NextObject(FObject* Class);


// Function  EmbarkObjectPools.EmbarkObjectVariantPool.NextOrCreateObject
// Offset::0x263D5D0;
FObject* FEmbarkObjectVariantPool::NextOrCreateObject(FObject* Class);


// Function  EmbarkObjectPools.EmbarkObjectVariantPool.PoolObject
// Offset::0x263D8D0;
bool FEmbarkObjectVariantPool::PoolObject(FObject* Object);


// Function  EmbarkObjectPools.EmbarkObjectVariantPool.PrewarmPool
// Offset::0x263DB60;
void FEmbarkObjectVariantPool::PrewarmPool(FObject* Class);


// Function  EmbarkObjectPools.EmbarkObjectVariantPool.ResetPool
// Offset::0x263DC50;
void FEmbarkObjectVariantPool::ResetPool(int32_t Capacity);


// Function  EmbarkObjectPools.EmbarkActorVariantPool.FillPool
// Offset::0x263EB40;
void FEmbarkActorVariantPool::FillPool(FActor* Class,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorVariantPool.FinalizePool
// Offset::0x263EEB0;
void FEmbarkActorVariantPool::FinalizePool();


// Function  EmbarkObjectPools.EmbarkActorVariantPool.InitializePool
// Offset::0x263DD70;
void FEmbarkActorVariantPool::InitializePool(FName Name,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorVariantPool.NextObject
// Offset::0x263E740;
FActor* FEmbarkActorVariantPool::NextObject(FActor* Class);


// Function  EmbarkObjectPools.EmbarkActorVariantPool.NextOrCreateObject
// Offset::0x263E590;
FActor* FEmbarkActorVariantPool::NextOrCreateObject(FActor* Class);


// Function  EmbarkObjectPools.EmbarkActorVariantPool.PoolObject
// Offset::0x263E920;
bool FEmbarkActorVariantPool::PoolObject(FActor* Object);


// Function  EmbarkObjectPools.EmbarkActorVariantPool.PrewarmPool
// Offset::0x263ED70;
void FEmbarkActorVariantPool::PrewarmPool(FActor* Class);


// Function  EmbarkObjectPools.EmbarkActorVariantPool.ResetPool
// Offset::0x263DC50;
void FEmbarkActorVariantPool::ResetPool(int32_t Capacity);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPool.FillPool
// Offset::0x263FB00;
void FEmbarkActorComponentVariantPool::FillPool(FActorComponent* Class,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPool.FinalizePool
// Offset::0x263FF20;
void FEmbarkActorComponentVariantPool::FinalizePool();


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPool.InitializePool
// Offset::0x263DD70;
void FEmbarkActorComponentVariantPool::InitializePool(FName Name,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPool.NextObject
// Offset::0x263F700;
FActorComponent* FEmbarkActorComponentVariantPool::NextObject(FActorComponent* Class);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPool.NextOrCreateObject
// Offset::0x263F550;
FActorComponent* FEmbarkActorComponentVariantPool::NextOrCreateObject(FActorComponent* Class);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPool.PoolObject
// Offset::0x263F8E0;
bool FEmbarkActorComponentVariantPool::PoolObject(FActorComponent* Object);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPool.PrewarmPool
// Offset::0x263FD30;
void FEmbarkActorComponentVariantPool::PrewarmPool(FActorComponent* Class);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPool.ResetPool
// Offset::0x263FE70;
void FEmbarkActorComponentVariantPool::ResetPool(int32_t Capacity);


// Function  EmbarkObjectPools.EmbarkActorPoolSubsystem.FillPool
// Offset::0x2641F30;
void FEmbarkActorPoolSubsystem::FillPool(int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorPoolSubsystem.FinalizePool
// Offset::0x26420F0;
void FEmbarkActorPoolSubsystem::FinalizePool();


// Function  EmbarkObjectPools.EmbarkActorPoolSubsystem.InitializePool
// Offset::0x2642240;
void FEmbarkActorPoolSubsystem::InitializePool(FName Name,FActor* Class,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorPoolSubsystem.NextObject
// Offset::0x26406B0;
FActor* FEmbarkActorPoolSubsystem::NextObject();


// Function  EmbarkObjectPools.EmbarkActorPoolSubsystem.NextOrCreateObject
// Offset::0x2641B80;
FActor* FEmbarkActorPoolSubsystem::NextOrCreateObject();


// Function  EmbarkObjectPools.EmbarkActorPoolSubsystem.OnDeinitializeSubsystem
// Offset::0x3D30810;
void FEmbarkActorPoolSubsystem::OnDeinitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkActorPoolSubsystem.OnInitializeSubsystem
// Offset::0x3D30810;
void FEmbarkActorPoolSubsystem::OnInitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkActorPoolSubsystem.PoolObject
// Offset::0x2641CD0;
bool FEmbarkActorPoolSubsystem::PoolObject(FActor* Object);


// Function  EmbarkObjectPools.EmbarkActorPoolSubsystem.ResetPool
// Offset::0x2640C70;
void FEmbarkActorPoolSubsystem::ResetPool(int32_t Capacity);


// Function  EmbarkObjectPools.EmbarkActorComponentPoolSubsystem.FillPool
// Offset::0x26432F0;
void FEmbarkActorComponentPoolSubsystem::FillPool(int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorComponentPoolSubsystem.FinalizePool
// Offset::0x2643580;
void FEmbarkActorComponentPoolSubsystem::FinalizePool();


// Function  EmbarkObjectPools.EmbarkActorComponentPoolSubsystem.InitializePool
// Offset::0x26436D0;
void FEmbarkActorComponentPoolSubsystem::InitializePool(FName Name,FActorComponent* Class,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorComponentPoolSubsystem.NextObject
// Offset::0x2643130;
FActorComponent* FEmbarkActorComponentPoolSubsystem::NextObject();


// Function  EmbarkObjectPools.EmbarkActorComponentPoolSubsystem.NextOrCreateObject
// Offset::0x2642FE0;
FActorComponent* FEmbarkActorComponentPoolSubsystem::NextOrCreateObject();


// Function  EmbarkObjectPools.EmbarkActorComponentPoolSubsystem.OnDeinitializeSubsystem
// Offset::0x3D30810;
void FEmbarkActorComponentPoolSubsystem::OnDeinitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkActorComponentPoolSubsystem.OnInitializeSubsystem
// Offset::0x3D30810;
void FEmbarkActorComponentPoolSubsystem::OnInitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkActorComponentPoolSubsystem.PoolObject
// Offset::0x2643250;
bool FEmbarkActorComponentPoolSubsystem::PoolObject(FActorComponent* Object);


// Function  EmbarkObjectPools.EmbarkActorComponentPoolSubsystem.ResetPool
// Offset::0x26434B0;
void FEmbarkActorComponentPoolSubsystem::ResetPool(int32_t Capacity);


// Function  EmbarkObjectPools.EmbarkObjectVariantPoolSubsystem.FillPool
// Offset::0x2644980;
void FEmbarkObjectVariantPoolSubsystem::FillPool(FObject* Class,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkObjectVariantPoolSubsystem.FinalizePool
// Offset::0x2644D10;
void FEmbarkObjectVariantPoolSubsystem::FinalizePool();


// Function  EmbarkObjectPools.EmbarkObjectVariantPoolSubsystem.InitializePool
// Offset::0x2644D80;
void FEmbarkObjectVariantPoolSubsystem::InitializePool(FName Name,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkObjectVariantPoolSubsystem.NextObject
// Offset::0x26445A0;
FObject* FEmbarkObjectVariantPoolSubsystem::NextObject(FObject* Class);


// Function  EmbarkObjectPools.EmbarkObjectVariantPoolSubsystem.NextOrCreateObject
// Offset::0x2644450;
FObject* FEmbarkObjectVariantPoolSubsystem::NextOrCreateObject(FObject* Class);


// Function  EmbarkObjectPools.EmbarkObjectVariantPoolSubsystem.OnDeinitializeSubsystem
// Offset::0x3D30810;
void FEmbarkObjectVariantPoolSubsystem::OnDeinitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkObjectVariantPoolSubsystem.OnInitializeSubsystem
// Offset::0x3D30810;
void FEmbarkObjectVariantPoolSubsystem::OnInitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkObjectVariantPoolSubsystem.PoolObject
// Offset::0x2644750;
bool FEmbarkObjectVariantPoolSubsystem::PoolObject(FObject* Object);


// Function  EmbarkObjectPools.EmbarkObjectVariantPoolSubsystem.PrewarmPool
// Offset::0x2644B70;
void FEmbarkObjectVariantPoolSubsystem::PrewarmPool(FObject* Class);


// Function  EmbarkObjectPools.EmbarkObjectVariantPoolSubsystem.ResetPool
// Offset::0x2644C60;
void FEmbarkObjectVariantPoolSubsystem::ResetPool(int32_t Capacity);


// Function  EmbarkObjectPools.EmbarkActorVariantPoolSubsystem.FillPool
// Offset::0x2645D00;
void FEmbarkActorVariantPoolSubsystem::FillPool(FActor* Class,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorVariantPoolSubsystem.FinalizePool
// Offset::0x2646070;
void FEmbarkActorVariantPoolSubsystem::FinalizePool();


// Function  EmbarkObjectPools.EmbarkActorVariantPoolSubsystem.InitializePool
// Offset::0x2644D80;
void FEmbarkActorVariantPoolSubsystem::InitializePool(FName Name,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorVariantPoolSubsystem.NextObject
// Offset::0x2645BB0;
FActor* FEmbarkActorVariantPoolSubsystem::NextObject(FActor* Class);


// Function  EmbarkObjectPools.EmbarkActorVariantPoolSubsystem.NextOrCreateObject
// Offset::0x2645A00;
FActor* FEmbarkActorVariantPoolSubsystem::NextOrCreateObject(FActor* Class);


// Function  EmbarkObjectPools.EmbarkActorVariantPoolSubsystem.OnDeinitializeSubsystem
// Offset::0x3D30810;
void FEmbarkActorVariantPoolSubsystem::OnDeinitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkActorVariantPoolSubsystem.OnInitializeSubsystem
// Offset::0x3D30810;
void FEmbarkActorVariantPoolSubsystem::OnInitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkActorVariantPoolSubsystem.PoolObject
// Offset::0x2645C60;
bool FEmbarkActorVariantPoolSubsystem::PoolObject(FActor* Object);


// Function  EmbarkObjectPools.EmbarkActorVariantPoolSubsystem.PrewarmPool
// Offset::0x2645F30;
void FEmbarkActorVariantPoolSubsystem::PrewarmPool(FActor* Class);


// Function  EmbarkObjectPools.EmbarkActorVariantPoolSubsystem.ResetPool
// Offset::0x2644C60;
void FEmbarkActorVariantPoolSubsystem::ResetPool(int32_t Capacity);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPoolSubsystem.FillPool
// Offset::0x2646F00;
void FEmbarkActorComponentVariantPoolSubsystem::FillPool(FActorComponent* Class,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPoolSubsystem.FinalizePool
// Offset::0x2647320;
void FEmbarkActorComponentVariantPoolSubsystem::FinalizePool();


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPoolSubsystem.InitializePool
// Offset::0x2644D80;
void FEmbarkActorComponentVariantPoolSubsystem::InitializePool(FName Name,FDelegate Delegate,int32_t Capacity,int32_t FillTarget,int32_t FillRate);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPoolSubsystem.NextObject
// Offset::0x2646C80;
FActorComponent* FEmbarkActorComponentVariantPoolSubsystem::NextObject(FActorComponent* Class);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPoolSubsystem.NextOrCreateObject
// Offset::0x2646B70;
FActorComponent* FEmbarkActorComponentVariantPoolSubsystem::NextOrCreateObject(FActorComponent* Class);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPoolSubsystem.OnDeinitializeSubsystem
// Offset::0x3D30810;
void FEmbarkActorComponentVariantPoolSubsystem::OnDeinitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPoolSubsystem.OnInitializeSubsystem
// Offset::0x3D30810;
void FEmbarkActorComponentVariantPoolSubsystem::OnInitializeSubsystem();


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPoolSubsystem.PoolObject
// Offset::0x2646E60;
bool FEmbarkActorComponentVariantPoolSubsystem::PoolObject(FActorComponent* Object);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPoolSubsystem.PrewarmPool
// Offset::0x2647130;
void FEmbarkActorComponentVariantPoolSubsystem::PrewarmPool(FActorComponent* Class);


// Function  EmbarkObjectPools.EmbarkActorComponentVariantPoolSubsystem.ResetPool
// Offset::0x2647270;
void FEmbarkActorComponentVariantPoolSubsystem::ResetPool(int32_t Capacity);


// Function  EmbarkPropertyBag.PropertyBagLibrary.Delete
// Offset::0x264E1C0;
void FPropertyBagLibrary::Delete(FObject* WorldContextObject,FPropertyBagItem Item);


// Function  EmbarkPropertyBag.PropertyBagLibrary.GetBool
// Offset::0x264DBB0;
bool FPropertyBagLibrary::GetBool(FObject* WorldContextObject,FPropertyBagItem Item,bool bDefault,int32_t Index);


// Function  EmbarkPropertyBag.PropertyBagLibrary.GetFloat
// Offset::0x264D8B0;
float FPropertyBagLibrary::GetFloat(FObject* WorldContextObject,FPropertyBagItem Item,float Default,int32_t Index);


// Function  EmbarkPropertyBag.PropertyBagLibrary.GetInt
// Offset::0x264DA30;
int32_t FPropertyBagLibrary::GetInt(FObject* WorldContextObject,FPropertyBagItem Item,int32_t Default,int32_t Index);


// Function  EmbarkPropertyBag.PropertyBagLibrary.New
// Offset::0x264E2B0;
FPropertyBagItem FPropertyBagLibrary::New(FObject* WorldContextObject,enum class EPropertyBagItemType Type,int32_t Num);


// Function  EmbarkPropertyBag.PropertyBagLibrary.SetBool
// Offset::0x264E040;
void FPropertyBagLibrary::SetBool(FObject* WorldContextObject,FPropertyBagItem Item,bool bValue,int32_t Index);


// Function  EmbarkPropertyBag.PropertyBagLibrary.SetFloat
// Offset::0x264DD40;
void FPropertyBagLibrary::SetFloat(FObject* WorldContextObject,FPropertyBagItem Item,float Value,int32_t Index);


// Function  EmbarkPropertyBag.PropertyBagLibrary.SetInt
// Offset::0x264DEC0;
void FPropertyBagLibrary::SetInt(FObject* WorldContextObject,FPropertyBagItem Item,int32_t Value,int32_t Index);


// Function  OnlineSubsystem.TurnBasedMatchInterface.OnMatchEnded
// Offset::0x3D30810;
void FTurnBasedMatchInterface::OnMatchEnded(FString Match);


// Function  OnlineSubsystem.TurnBasedMatchInterface.OnMatchReceivedTurn
// Offset::0x3D30810;
void FTurnBasedMatchInterface::OnMatchReceivedTurn(FString Match,bool bDidBecomeActive);


// Function  OnlineSubsystemAngelscript.VoiceChatModelUserBlocker.NotifyBlockerChanged
// Offset::0x2704090;
void FVoiceChatModelUserBlocker::NotifyBlockerChanged();


// Function  OnlineSubsystemAngelscript.VoiceChatModelUserBlocker.ShouldBlockUser
// Offset::0x27040B0;
bool FVoiceChatModelUserBlocker::ShouldBlockUser(FUniqueNetIdRepl PlayerId);


// Function  OnlineSubsystemAngelscript.BlockedUsersUserBlocker.OnBlockListSynced
// Offset::0x26CB6E0;
void FBlockedUsersUserBlocker::OnBlockListSynced(bool bSuccess);


// Function  OnlineSubsystemAngelscript.BlockedUsersUserBlocker.OnBlockListUpdated
// Offset::0x26CB640;
void FBlockedUsersUserBlocker::OnBlockListUpdated(FServiceBlockedPlayersList* InBlockedList);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineAchievementsModel.AddAchievementProgress
// Offset::0x17A1D00;
void FIEmbarkOnlineAchievementsModel::AddAchievementProgress(FString AchievementId,int32_t TimesToTrigger);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineAchievementsModel.ResetAchievements
// Offset::0x1A7E930;
bool FIEmbarkOnlineAchievementsModel::ResetAchievements();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineAchievementsModel.SetAchievementProgress
// Offset::0x26CF630;
void FIEmbarkOnlineAchievementsModel::SetAchievementProgress(FString AchievementId,int32_t TimesToTrigger);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineAchievementsModel.SyncAchievements
// Offset::0x17AA8C0;
void FIEmbarkOnlineAchievementsModel::SyncAchievements();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineAnnouncementsModel.GetAnnouncements
// Offset::0x179D390;
FServiceAnnouncements* FIEmbarkOnlineAnnouncementsModel::GetAnnouncements();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineAnnouncementsModel.SyncAnnouncements
// Offset::0x179D370;
void FIEmbarkOnlineAnnouncementsModel::SyncAnnouncements();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineBattlePassModel.AutoClaimBattlePassEntries
// Offset::0x179DDF0;
void FIEmbarkOnlineBattlePassModel::AutoClaimBattlePassEntries();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineBattlePassModel.ClaimBattlePassEntries
// Offset::0x26D09E0;
void FIEmbarkOnlineBattlePassModel::ClaimBattlePassEntries(TArray<int64_t> ProductIds);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineBattlePassModel.ClaimBattlePassEntry
// Offset::0x26D0AA0;
void FIEmbarkOnlineBattlePassModel::ClaimBattlePassEntry(int64_t ProductId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineBattlePassModel.GetBattlePass
// Offset::0x26D0B40;
FServiceBattlePass* FIEmbarkOnlineBattlePassModel::GetBattlePass();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineBattlePassModel.SyncBattlePass
// Offset::0x179DEB0;
void FIEmbarkOnlineBattlePassModel::SyncBattlePass();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineBattlePassModel.UpgradeBattlePassLevel
// Offset::0x26D08E0;
void FIEmbarkOnlineBattlePassModel::UpgradeBattlePassLevel(FString ItemId,int32_t NextLevel);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineBuildModel.IsBuildOutdated
// Offset::0x1A7E930;
bool FIEmbarkOnlineBuildModel::IsBuildOutdated();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineBuildModel.RequestLatestBuild
// Offset::0x179DDF0;
void FIEmbarkOnlineBuildModel::RequestLatestBuild();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.AcceptFriendship
// Offset::0x26DA790;
void FIEmbarkOnlineFriendsModel::AcceptFriendship(FServiceFriend* Friend);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.AddRecentPlayers
// Offset::0x26D99E0;
void FIEmbarkOnlineFriendsModel::AddRecentPlayers(TArray<FUniqueNetIdRepl> TenancyUserIds);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.BlockPlayer
// Offset::0x26D9CD0;
void FIEmbarkOnlineFriendsModel::BlockPlayer(FUniqueNetIdRepl TenancyUserId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.DeclineInvitation
// Offset::0x26DA2F0;
void FIEmbarkOnlineFriendsModel::DeclineInvitation(FString PartyId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.DeleteFriendship
// Offset::0x26DA5F0;
void FIEmbarkOnlineFriendsModel::DeleteFriendship(FServiceFriend* Friend);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.GetBlockedPlayersList
// Offset::0x17956C0;
FServiceBlockedPlayersList* FIEmbarkOnlineFriendsModel::GetBlockedPlayersList();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.GetFriendsList
// Offset::0x1795720;
FServiceFriendsList* FIEmbarkOnlineFriendsModel::GetFriendsList();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.GetInvitationsInfo
// Offset::0x1795630;
FServicePartyInvitationsInfo* FIEmbarkOnlineFriendsModel::GetInvitationsInfo();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.GetParty
// Offset::0x1795660;
FServiceParty* FIEmbarkOnlineFriendsModel::GetParty();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.GetPartySettings
// Offset::0x1795600;
FServicePartySettings* FIEmbarkOnlineFriendsModel::GetPartySettings();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.GetRecentPlayersList
// Offset::0x1795690;
FServiceRecentPlayersList* FIEmbarkOnlineFriendsModel::GetRecentPlayersList();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.GetSuggestedFriendsList
// Offset::0x17956F0;
FServiceFriendsList* FIEmbarkOnlineFriendsModel::GetSuggestedFriendsList();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.HasTriedBootToGame
// Offset::0x26D9BA0;
bool FIEmbarkOnlineFriendsModel::HasTriedBootToGame();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.InviteToParty
// Offset::0x26DA550;
void FIEmbarkOnlineFriendsModel::InviteToParty(FServicePlayerProfile* Profile);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.IsCrossplayEnabledForPartyMember
// Offset::0x26D9720;
bool FIEmbarkOnlineFriendsModel::IsCrossplayEnabledForPartyMember(FUniqueNetIdRepl TenancyUserId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.IsPartyLeader
// Offset::0x26D9F80;
bool FIEmbarkOnlineFriendsModel::IsPartyLeader(FUniqueNetIdRepl MemberTenancyId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.IsPartyMemberReadyForMatchmaking
// Offset::0x26D9830;
bool FIEmbarkOnlineFriendsModel::IsPartyMemberReadyForMatchmaking(FUniqueNetIdRepl TenancyUserId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.JoinParty
// Offset::0x26DA3A0;
void FIEmbarkOnlineFriendsModel::JoinParty(FString PartyId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.KickFromParty
// Offset::0x26DA450;
void FIEmbarkOnlineFriendsModel::KickFromParty(FUniqueNetIdRepl UserId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.LeaveParty
// Offset::0x233BA10;
void FIEmbarkOnlineFriendsModel::LeaveParty();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.ReportPlayer
// Offset::0x26DA140;
void FIEmbarkOnlineFriendsModel::ReportPlayer(FUniqueNetIdRepl EmbarkID,enum class EReportPlayerReason ReportReason,FString Message);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.RequestFriendshipByName
// Offset::0x26DA690;
void FIEmbarkOnlineFriendsModel::RequestFriendshipByName(FString DisplayName,FString DisplayNameDiscriminator);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.SetCrossPlayEnabled
// Offset::0x26D9B00;
void FIEmbarkOnlineFriendsModel::SetCrossPlayEnabled(bool bEnabled);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.SetReadyForMatchmaking
// Offset::0x26D9940;
void FIEmbarkOnlineFriendsModel::SetReadyForMatchmaking(bool bReadyForMatchmaking);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.SetRichPresenceStatus
// Offset::0x26DA090;
void FIEmbarkOnlineFriendsModel::SetRichPresenceStatus(FString RichPresenceStatus);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.ShowPlatformProfileUI
// Offset::0x26D9DD0;
void FIEmbarkOnlineFriendsModel::ShowPlatformProfileUI(FUniqueNetIdRepl Requestor,FUniqueNetIdRepl Requestee);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.SyncBlockedUsers
// Offset::0x26DA850;
void FIEmbarkOnlineFriendsModel::SyncBlockedUsers();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.SyncFriends
// Offset::0x26DA890;
void FIEmbarkOnlineFriendsModel::SyncFriends();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.SyncParty
// Offset::0x26DA830;
void FIEmbarkOnlineFriendsModel::SyncParty();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.SyncRecentPlayers
// Offset::0x26DA870;
void FIEmbarkOnlineFriendsModel::SyncRecentPlayers();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineFriendsModel.UnblockPlayer
// Offset::0x26D9BD0;
void FIEmbarkOnlineFriendsModel::UnblockPlayer(FUniqueNetIdRepl TenancyUserId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineGameSettingsModel.GetFrontendTweakablesAsync
// Offset::0x179D370;
void FIEmbarkOnlineGameSettingsModel::GetFrontendTweakablesAsync();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineGameSettingsModel.GetGameSettings
// Offset::0x26D2280;
FEmbarkOnlineGameSettings* FIEmbarkOnlineGameSettingsModel::GetGameSettings();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineGameSettingsModel.SyncGameSettings
// Offset::0x179DDF0;
void FIEmbarkOnlineGameSettingsModel::SyncGameSettings();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.AutoLogin
// Offset::0x26DA890;
void FIEmbarkOnlineIdentityModel::AutoLogin();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.CanCommunicateOnline
// Offset::0x26E1820;
bool FIEmbarkOnlineIdentityModel::CanCommunicateOnline();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetDefaultedCountry
// Offset::0x26E1D40;
FString FIEmbarkOnlineIdentityModel::GetDefaultedCountry();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetDisplayName
// Offset::0x26E1FB0;
FString FIEmbarkOnlineIdentityModel::GetDisplayName();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetLinkingCode
// Offset::0x26E1780;
FEmbarkLinkingCode FIEmbarkOnlineIdentityModel::GetLinkingCode();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetLocalPlayerNum
// Offset::0x26E2180;
int32_t FIEmbarkOnlineIdentityModel::GetLocalPlayerNum();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetPlatform
// Offset::0x26E2280;
FName FIEmbarkOnlineIdentityModel::GetPlatform();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetPlatformDisplayName
// Offset::0x26E1F30;
FString FIEmbarkOnlineIdentityModel::GetPlatformDisplayName();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetProfile
// Offset::0x26E22E0;
FServicePlayerProfile* FIEmbarkOnlineIdentityModel::GetProfile();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetProfileByEmbarkAccountId
// Offset::0x26E1B80;
FServicePlayerProfile* FIEmbarkOnlineIdentityModel::GetProfileByEmbarkAccountId(FEmbarkAccountHandle ID);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetProfileByTenancyUserId
// Offset::0x26E1C60;
FServicePlayerProfile* FIEmbarkOnlineIdentityModel::GetProfileByTenancyUserId(FEmbarkUserHandle ID);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetRetryAfterSeconds
// Offset::0x26E1600;
int32_t FIEmbarkOnlineIdentityModel::GetRetryAfterSeconds();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetUniqueNetId
// Offset::0x26E2030;
FUniqueNetIdRepl FIEmbarkOnlineIdentityModel::GetUniqueNetId();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetUserId
// Offset::0x26E1EB0;
FString FIEmbarkOnlineIdentityModel::GetUserId();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetUserRestriction
// Offset::0x26E1630;
FEmbarkUserRestriction FIEmbarkOnlineIdentityModel::GetUserRestriction();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.GetWebUrlPredeterminedContent
// Offset::0x26E1510;
TArray<FString> FIEmbarkOnlineIdentityModel::GetWebUrlPredeterminedContent();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.HasActiveUserRestriction
// Offset::0x26E1690;
bool FIEmbarkOnlineIdentityModel::HasActiveUserRestriction();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.HasCrossPlayPrivilege
// Offset::0x26E1850;
bool FIEmbarkOnlineIdentityModel::HasCrossPlayPrivilege();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.HasEmail
// Offset::0x26E1E80;
bool FIEmbarkOnlineIdentityModel::HasEmail();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.HasVerifiedEmail
// Offset::0x17A60E0;
bool FIEmbarkOnlineIdentityModel::HasVerifiedEmail();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.IsCrossPlayEnabled
// Offset::0x1AA60D0;
bool FIEmbarkOnlineIdentityModel::IsCrossPlayEnabled();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.IsLoggedIn
// Offset::0x26E21B0;
bool FIEmbarkOnlineIdentityModel::IsLoggedIn();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.IsWebUrlPredeterminedContent
// Offset::0x26E1460;
bool FIEmbarkOnlineIdentityModel::IsWebUrlPredeterminedContent(FString URL);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.Login
// Offset::0x26DA870;
void FIEmbarkOnlineIdentityModel::Login();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.LoginWithLink
// Offset::0x26E21E0;
void FIEmbarkOnlineIdentityModel::LoginWithLink(bool bLink);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.Logout
// Offset::0x26DA830;
void FIEmbarkOnlineIdentityModel::Logout();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.RequestIsUserRestricted
// Offset::0x26E16C0;
void FIEmbarkOnlineIdentityModel::RequestIsUserRestricted(FDelegate Delegate);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.RequestProfilesByEmbarkAccountIds
// Offset::0x26E1880;
void FIEmbarkOnlineIdentityModel::RequestProfilesByEmbarkAccountIds(TArray<FEmbarkAccountHandle> Ids,FDelegate Delegate);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.RequestProfilesByTenancyUserIds
// Offset::0x26E1A00;
void FIEmbarkOnlineIdentityModel::RequestProfilesByTenancyUserIds(TArray<FEmbarkUserHandle> Ids,FDelegate Delegate);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.ResendVerifyEmail
// Offset::0x26E1DC0;
void FIEmbarkOnlineIdentityModel::ResendVerifyEmail(FDelegate Delegate);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.ShowWebURL
// Offset::0x26E1360;
bool FIEmbarkOnlineIdentityModel::ShowWebURL(FString URL,bool bRequestPredeterminedContent);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.SyncPlayerProfile
// Offset::0x26E2310;
void FIEmbarkOnlineIdentityModel::SyncPlayerProfile();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.UpdatePlayingMultiplayerOnline
// Offset::0x26E1130;
void FIEmbarkOnlineIdentityModel::UpdatePlayingMultiplayerOnline(bool bIsPlayingMultiplayerOnline);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineIdentityModel.UpdateProfile
// Offset::0x26E11D0;
void FIEmbarkOnlineIdentityModel::UpdateProfile(FUpdateProfileArguments Arguments,FDelegate Delegate);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineManifestModel.GetManifest
// Offset::0x17A1E20;
FServiceManifest* FIEmbarkOnlineManifestModel::GetManifest();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineManifestModel.IsUpToDate
// Offset::0x1A7E930;
bool FIEmbarkOnlineManifestModel::IsUpToDate();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineManifestModel.OverrideManifest
// Offset::0x179DDF0;
void FIEmbarkOnlineManifestModel::OverrideManifest();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineManifestModel.SetManifestDeferredOverride
// Offset::0x26D9940;
void FIEmbarkOnlineManifestModel::SetManifestDeferredOverride(bool bIsDeferred);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineManifestModel.SyncManifest
// Offset::0x179DEB0;
void FIEmbarkOnlineManifestModel::SyncManifest();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.CanCancelMatchmaking
// Offset::0x26ED070;
bool FIEmbarkOnlineMatchmakingModel::CanCancelMatchmaking();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.CancelMatchmaking
// Offset::0x26ECFB0;
bool FIEmbarkOnlineMatchmakingModel::CancelMatchmaking(FMatchmakingCancelParamaters OptionalParameters);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.CancelPollGameServer
// Offset::0x179D370;
void FIEmbarkOnlineMatchmakingModel::CancelPollGameServer();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.CanJoinSession
// Offset::0x26E1820;
bool FIEmbarkOnlineMatchmakingModel::CanJoinSession();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.CanSkipMatchmaking
// Offset::0x26E1690;
bool FIEmbarkOnlineMatchmakingModel::CanSkipMatchmaking();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.CanStartMatchmaking
// Offset::0x26ED1F0;
bool FIEmbarkOnlineMatchmakingModel::CanStartMatchmaking(FMatchmakingParameters Parameters);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.ConfirmPartyMatchmaking
// Offset::0x26ECAF0;
bool FIEmbarkOnlineMatchmakingModel::ConfirmPartyMatchmaking(FString MatchId,FString Region,bool bEnableVoice);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.GetMatchmakingParameters
// Offset::0x26ED5F0;
FMatchmakingParameters FIEmbarkOnlineMatchmakingModel::GetMatchmakingParameters();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.GetMatchmakingServer
// Offset::0x26ED430;
FGameServer FIEmbarkOnlineMatchmakingModel::GetMatchmakingServer();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.GetMatchmakingSession
// Offset::0x26ED4A0;
FMatchmakingSession FIEmbarkOnlineMatchmakingModel::GetMatchmakingSession();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.GetMatchmakingStatus
// Offset::0x26E1E80;
enum class EMatchmakingStatus FIEmbarkOnlineMatchmakingModel::GetMatchmakingStatus();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.GetMatchmakingTimeEstimates
// Offset::0x26ED340;
FMatchmakingTimeEstimates FIEmbarkOnlineMatchmakingModel::GetMatchmakingTimeEstimates();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.IsAboveLatencyThreshold
// Offset::0x179DE10;
bool FIEmbarkOnlineMatchmakingModel::IsAboveLatencyThreshold();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.IsMatchmaking
// Offset::0x1BAB160;
bool FIEmbarkOnlineMatchmakingModel::IsMatchmaking();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.IsSkipMatchmakingPending
// Offset::0x26D9BA0;
bool FIEmbarkOnlineMatchmakingModel::IsSkipMatchmakingPending();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.JoinLocalServer
// Offset::0x1AA60A0;
bool FIEmbarkOnlineMatchmakingModel::JoinLocalServer();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.JoinSession
// Offset::0x26ECE90;
bool FIEmbarkOnlineMatchmakingModel::JoinSession(FEmbarkOnlineModelConnectionParameters OptionalParameters);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.PollGameServer
// Offset::0x17AE990;
void FIEmbarkOnlineMatchmakingModel::PollGameServer(FString MatchId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.Reconnect
// Offset::0x26ECC80;
bool FIEmbarkOnlineMatchmakingModel::Reconnect(FGameServer GameServer,FEmbarkOnlineModelConnectionParameters OptionalParameters);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.RefreshMatchmakingTimeEstimates
// Offset::0x26EC9F0;
bool FIEmbarkOnlineMatchmakingModel::RefreshMatchmakingTimeEstimates(TArray<FString> Scenarios);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.SkipMatchmaking
// Offset::0x26ECC50;
bool FIEmbarkOnlineMatchmakingModel::SkipMatchmaking();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchmakingModel.StartMatchmaking
// Offset::0x26ED0A0;
bool FIEmbarkOnlineMatchmakingModel::StartMatchmaking(FMatchmakingParameters Parameters);


// Function  OnlineSubsystemAngelscript.DefaultMatchmakingModel.OnPreloadMap
// Offset::0x26CCDA0;
void FDefaultMatchmakingModel::OnPreloadMap(FString MapName);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.CreateMatch
// Offset::0x26F27A0;
void FIEmbarkOnlineMatchSessionInterface::CreateMatch(FUniqueNetIdRepl Sender,FEmbarkGameMatchesData MatchesData);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.CreateMatch_LocalPlayer
// Offset::0x26F2F80;
void FIEmbarkOnlineMatchSessionInterface::CreateMatch_LocalPlayer(FEmbarkGameMatchesData MatchesData);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.JoinMatch
// Offset::0x26F2560;
void FIEmbarkOnlineMatchSessionInterface::JoinMatch(FUniqueNetIdRepl Sender,FString Match,TArray<FEmbarkJoinGameMatchPlayer> JoinData);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.JoinMatch_LocalPlayer
// Offset::0x26F2DE0;
void FIEmbarkOnlineMatchSessionInterface::JoinMatch_LocalPlayer(FString Match,TArray<FEmbarkJoinGameMatchPlayer> JoinData);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.LeaveMatch
// Offset::0x26F2340;
void FIEmbarkOnlineMatchSessionInterface::LeaveMatch(FUniqueNetIdRepl Sender,FString Match,TArray<FEmbarkLeaveGameMatchPlayer> LeaveData);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.LeaveMatch_LocalPlayer
// Offset::0x26F2C60;
void FIEmbarkOnlineMatchSessionInterface::LeaveMatch_LocalPlayer(FString Match,TArray<FEmbarkLeaveGameMatchPlayer> LeaveData);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.ReportMatchResults
// Offset::0x26F1DF0;
void FIEmbarkOnlineMatchSessionInterface::ReportMatchResults(FUniqueNetIdRepl Sender,FString Match,FEmbarkGameMatchRoster Roster);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.ReportMatchResults_LocalPlayer
// Offset::0x26F2950;
void FIEmbarkOnlineMatchSessionInterface::ReportMatchResults_LocalPlayer(FString Match,FEmbarkGameMatchRoster Roster);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.UpdateMatchDetails
// Offset::0x26F1FC0;
void FIEmbarkOnlineMatchSessionInterface::UpdateMatchDetails(FUniqueNetIdRepl Sender,FString Match,FEmbarkGameMatchRoster Roster);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.UpdateMatchDetails_LocalPlayer
// Offset::0x26F2A60;
void FIEmbarkOnlineMatchSessionInterface::UpdateMatchDetails_LocalPlayer(FString Match,FEmbarkGameMatchRoster Roster);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.UpdateMatchStatus
// Offset::0x26F2190;
void FIEmbarkOnlineMatchSessionInterface::UpdateMatchStatus(FUniqueNetIdRepl Sender,FString Match,enum class EEmbarkUpdateGameMatchStatus Status);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineMatchSessionInterface.UpdateMatchStatus_LocalPlayer
// Offset::0x26F2B70;
void FIEmbarkOnlineMatchSessionInterface::UpdateMatchStatus_LocalPlayer(FString Match,enum class EEmbarkUpdateGameMatchStatus Status);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlinePersistentPlayerKeysModel.ClearPersistentPlayerKey
// Offset::0x26F8920;
void FIEmbarkOnlinePersistentPlayerKeysModel::ClearPersistentPlayerKey(FGameplayTag Key);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlinePersistentPlayerKeysModel.ClearPersistentPlayerKeys
// Offset::0x179D370;
void FIEmbarkOnlinePersistentPlayerKeysModel::ClearPersistentPlayerKeys();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlinePersistentPlayerKeysModel.GetPersistentPlayerKey
// Offset::0x26F8AE0;
FString FIEmbarkOnlinePersistentPlayerKeysModel::GetPersistentPlayerKey(FGameplayTag Key);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlinePersistentPlayerKeysModel.GetPersistentPlayerKeys
// Offset::0x179F4A0;
void FIEmbarkOnlinePersistentPlayerKeysModel::GetPersistentPlayerKeys();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlinePersistentPlayerKeysModel.HasCompletedSync
// Offset::0x26F8BD0;
bool FIEmbarkOnlinePersistentPlayerKeysModel::HasCompletedSync();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlinePersistentPlayerKeysModel.HasPersistentPlayerKey
// Offset::0x26F8C00;
bool FIEmbarkOnlinePersistentPlayerKeysModel::HasPersistentPlayerKey(FGameplayTag Key);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlinePersistentPlayerKeysModel.SetPersistentPlayerKey
// Offset::0x26F89D0;
void FIEmbarkOnlinePersistentPlayerKeysModel::SetPersistentPlayerKey(FGameplayTag Key,FString Value);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineRewardModel.GetProgressionRewards
// Offset::0x179F060;
FServiceProgressionRewards* FIEmbarkOnlineRewardModel::GetProgressionRewards();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineRewardModel.SyncProgressionRewards
// Offset::0x179DDF0;
void FIEmbarkOnlineRewardModel::SyncProgressionRewards();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.AddUserBlocker
// Offset::0x2094040;
void FIEmbarkOnlineVoiceChatModel::AddUserBlocker(FVoiceChatModelUserBlocker* UserBlocker);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.DeleteChannelInfo
// Offset::0x2705910;
void FIEmbarkOnlineVoiceChatModel::DeleteChannelInfo(enum class EVoiceChannel Channel);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.EnableRoom
// Offset::0x2704DC0;
void FIEmbarkOnlineVoiceChatModel::EnableRoom(enum class EVoiceChannel Channel,bool bEnable);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.EnableVoiceMod
// Offset::0x2704C80;
void FIEmbarkOnlineVoiceChatModel::EnableVoiceMod(bool Enabled);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.GetAvailableInputDevices
// Offset::0x2705610;
void FIEmbarkOnlineVoiceChatModel::GetAvailableInputDevices(TArray<FVoiceDeviceInfo> Output);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.GetAvailableOutputDevices
// Offset::0x2705510;
void FIEmbarkOnlineVoiceChatModel::GetAvailableOutputDevices(TArray<FVoiceDeviceInfo> Output);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.GetDefaultInputDeviceId
// Offset::0x2705330;
FString FIEmbarkOnlineVoiceChatModel::GetDefaultInputDeviceId();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.GetDefaultOutputDeviceId
// Offset::0x2705230;
FString FIEmbarkOnlineVoiceChatModel::GetDefaultOutputDeviceId();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.GetInputDeviceId
// Offset::0x26E1EB0;
FString FIEmbarkOnlineVoiceChatModel::GetInputDeviceId();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.GetOutputDeviceId
// Offset::0x27052B0;
FString FIEmbarkOnlineVoiceChatModel::GetOutputDeviceId();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.GetRoom
// Offset::0x2704D20;
FEmbarkVoiceRoom* FIEmbarkOnlineVoiceChatModel::GetRoom(enum class EVoiceChannel Channel);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.GetSelectedVoiceModPreset
// Offset::0x2704B50;
FString FIEmbarkOnlineVoiceChatModel::GetSelectedVoiceModPreset();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.GetVoiceModPresets
// Offset::0x2704A60;
TArray<FString> FIEmbarkOnlineVoiceChatModel::GetVoiceModPresets();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.GetVoipInputBindings
// Offset::0x26D22B0;
FInputComponent* FIEmbarkOnlineVoiceChatModel::GetVoipInputBindings();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.IsConsolePlayerMuted
// Offset::0x2704EB0;
bool FIEmbarkOnlineVoiceChatModel::IsConsolePlayerMuted(FUniqueNetIdRepl PlayerId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.IsEnabled
// Offset::0x2705B30;
bool FIEmbarkOnlineVoiceChatModel::IsEnabled();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.IsInVoiceChannel
// Offset::0x2705710;
bool FIEmbarkOnlineVoiceChatModel::IsInVoiceChannel(enum class EVoiceChannel Channel);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.IsInVoiceChat
// Offset::0x27057B0;
bool FIEmbarkOnlineVoiceChatModel::IsInVoiceChat();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.IsPlayerMuted
// Offset::0x2704FC0;
bool FIEmbarkOnlineVoiceChatModel::IsPlayerMuted(FUniqueNetIdRepl PlayerId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.IsPushToTalkPressed
// Offset::0x26D9BA0;
bool FIEmbarkOnlineVoiceChatModel::IsPushToTalkPressed();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.IsVoiceModAvailable
// Offset::0x26E1850;
bool FIEmbarkOnlineVoiceChatModel::IsVoiceModAvailable();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.IsVoiceModEnabled
// Offset::0x1AA60D0;
bool FIEmbarkOnlineVoiceChatModel::IsVoiceModEnabled();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.JoinVoiceChat
// Offset::0x2705A50;
void FIEmbarkOnlineVoiceChatModel::JoinVoiceChat(enum class EVoiceChannel Channel,enum class EVoiceChannelType Type);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.LeaveVoiceChat
// Offset::0x27059B0;
void FIEmbarkOnlineVoiceChatModel::LeaveVoiceChat(enum class EVoiceChannel Channel);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.RemoveUserBlocker
// Offset::0x21F23E0;
bool FIEmbarkOnlineVoiceChatModel::RemoveUserBlocker(FVoiceChatModelUserBlocker* UserBlocker);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.SelectVoiceModPreset
// Offset::0x2704BD0;
void FIEmbarkOnlineVoiceChatModel::SelectVoiceModPreset(FString Preset);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.SetChannelInfo
// Offset::0x27057E0;
void FIEmbarkOnlineVoiceChatModel::SetChannelInfo(enum class EVoiceChannel Channel,FVoiceChannelInfo VoiceChannelInfo);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.SetEnabled
// Offset::0x2705B60;
void FIEmbarkOnlineVoiceChatModel::SetEnabled(bool Enabled);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.SetInputDeviceId
// Offset::0x2705460;
void FIEmbarkOnlineVoiceChatModel::SetInputDeviceId(FString InputDeviceId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.SetInputVolume
// Offset::0x2704880;
void FIEmbarkOnlineVoiceChatModel::SetInputVolume(float InVolume);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.SetMode
// Offset::0x27049C0;
void FIEmbarkOnlineVoiceChatModel::SetMode(enum class EVoiceChatMode InMode);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.SetOutputDeviceId
// Offset::0x27053B0;
void FIEmbarkOnlineVoiceChatModel::SetOutputDeviceId(FString InputDeviceId);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.SetOutputVolume
// Offset::0x2704920;
void FIEmbarkOnlineVoiceChatModel::SetOutputVolume(float InVolume);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineVoiceChatModel.SetPlayerMuted
// Offset::0x27050D0;
void FIEmbarkOnlineVoiceChatModel::SetPlayerMuted(FUniqueNetIdRepl PlayerId,bool bIsMuted);


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnAvailableAudioDevicesChanged
// Offset::0x26CE260;
void FDefaultVoiceModelTestsDelegateWrapper::OnAvailableAudioDevicesChanged();


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnBlockUpdate
// Offset::0x26CDF00;
void FDefaultVoiceModelTestsDelegateWrapper::OnBlockUpdate(enum class EVoiceChannel Channel,FUniqueNetIdRepl PlayerId,bool bIsBlocked);


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnMuteUpdate
// Offset::0x26CE0A0;
void FDefaultVoiceModelTestsDelegateWrapper::OnMuteUpdate(enum class EVoiceChannel Channel,FUniqueNetIdRepl PlayerId,bool bIsMuted);


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnRoomCreated
// Offset::0x26CDE70;
void FDefaultVoiceModelTestsDelegateWrapper::OnRoomCreated(enum class EVoiceChannel Channel);


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnRoomEnabledUpdate
// Offset::0x26CDC70;
void FDefaultVoiceModelTestsDelegateWrapper::OnRoomEnabledUpdate(enum class EVoiceChannel Channel,bool bEnabled);


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnRoomJoined
// Offset::0x26CDDE0;
void FDefaultVoiceModelTestsDelegateWrapper::OnRoomJoined(enum class EVoiceChannel Channel);


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnRoomLeft
// Offset::0x26CDD50;
void FDefaultVoiceModelTestsDelegateWrapper::OnRoomLeft(enum class EVoiceChannel Channel);


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnRoomParticipantStatusUpdate
// Offset::0x26CD950;
void FDefaultVoiceModelTestsDelegateWrapper::OnRoomParticipantStatusUpdate(enum class EVoiceChannel Channel,FUniqueNetIdRepl PlayerId,enum class EVoiceRoomParticipantStatus OldStatus,enum class EVoiceRoomParticipantStatus NewStatus);


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnRoomParticipantsUpdate
// Offset::0x26CDB30;
void FDefaultVoiceModelTestsDelegateWrapper::OnRoomParticipantsUpdate(enum class EVoiceChannel Channel,FUniqueNetIdRepl PlayerId);


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnRoomParticipantTalkingUpdate
// Offset::0x26CD7B0;
void FDefaultVoiceModelTestsDelegateWrapper::OnRoomParticipantTalkingUpdate(enum class EVoiceChannel Channel,FUniqueNetIdRepl PlayerId,bool bIsTalking);


// Function  OnlineSubsystemAngelscript.DefaultVoiceModelTestsDelegateWrapper.OnToggleVoiceChatEnabled
// Offset::0x26CE240;
void FDefaultVoiceModelTestsDelegateWrapper::OnToggleVoiceChatEnabled();


// Function  OnlineSubsystemAngelscript.EmbarkID.Create
// Offset::0x26CF060;
FUniqueNetIdRepl FEmbarkID::Create(int64_t Value);


// Function  OnlineSubsystemAngelscript.EmbarkID.CreateFromString
// Offset::0x26CEEB0;
FUniqueNetIdRepl FEmbarkID::CreateFromString(FString Value);


// Function  OnlineSubsystemAngelscript.EmbarkID.Invalid
// Offset::0x26CED60;
FUniqueNetIdRepl FEmbarkID::Invalid();


// Function  OnlineSubsystemAngelscript.EmbarkID.ToInt64
// Offset::0x26CEC60;
int64_t FEmbarkID::ToInt64(FUniqueNetIdRepl Value);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServicesFactory.Create
// Offset::0x26D5A60;
FIEmbarkOnlineClientServices* FIEmbarkOnlineClientServicesFactory::Create(FLocalPlayer* InLocalPlayer);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineClientServicesFactory.GetDependencies
// Offset::0x26D5B00;
bool FIEmbarkOnlineClientServicesFactory::GetDependencies(TArray<FSubsystem*> Dependencies);


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServicesFactory.Create
// Offset::0x234D360;
FIEmbarkOnlineServerServices* FIEmbarkOnlineServerServicesFactory::Create();


// Function  OnlineSubsystemAngelscript.IEmbarkOnlineServerServicesFactory.GetDependencies
// Offset::0x26D5B00;
bool FIEmbarkOnlineServerServicesFactory::GetDependencies(TArray<FSubsystem*> Dependencies);


// Function  OnlineSubsystemAngelscript.EmbarkOnlineSubSystemHelper.GetSimulationServiceUrl
// Offset::0x2703A30;
FString FEmbarkOnlineSubSystemHelper::GetSimulationServiceUrl();


// Function  OnlineSubsystemAngelscript.EmbarkOnlineSubSystemHelper.RequestAuthToken
// Offset::0x2703AB0;
FString FEmbarkOnlineSubSystemHelper::RequestAuthToken(FWorld* InWorld);


// Function  OnlineSubsystemAngelscript.GameplayEventAPI.LogGameRoundEnd
// Offset::0x270D8F0;
void FGameplayEventAPI::LogGameRoundEnd(FObject* WorldContextObject,uint32_t WinningTeamId);


// Function  OnlineSubsystemAngelscript.GameplayEventAPI.LogGameRoundStart
// Offset::0x270D9D0;
void FGameplayEventAPI::LogGameRoundStart(FObject* WorldContextObject,FString LevelName,FString ModeName,uint32_t RoundTimeSeconds);


// Function  OnlineSubsystemAngelscript.GameplayEventAPI.LogPlayerDespawn
// Offset::0x270D5D0;
void FGameplayEventAPI::LogPlayerDespawn(FObject* WorldContextObject,FUniqueNetIdRepl PlayerId);


// Function  OnlineSubsystemAngelscript.GameplayEventAPI.LogPlayerRevive
// Offset::0x270D3E0;
void FGameplayEventAPI::LogPlayerRevive(FObject* WorldContextObject,FUniqueNetIdRepl RevivedPlayerId,FUniqueNetIdRepl ReviverPlayerId);


// Function  OnlineSubsystemAngelscript.GameplayEventAPI.LogPlayerSpawn
// Offset::0x270D710;
void FGameplayEventAPI::LogPlayerSpawn(FObject* WorldContextObject,FUniqueNetIdRepl PlayerId,uint32_t TeamId,uint32_t CharacterId);


// Function  OnlineSubsystemAngelscript.GameplayEventAPI.LogPlayerTakeDamage
// Offset::0x270C6D0;
void FGameplayEventAPI::LogPlayerTakeDamage(FObject* WorldContextObject,FUniqueNetIdRepl AttackerId,FVector AttackerLocation,FQuat AttackerRotation,FUniqueNetIdRepl VictimPlayerId,FVector VictimLocation,FQuat VictimRotation,float DamageTaken,float HealthRemaining);


// Function  OnlineSubsystemAngelscript.GameplayEventAPI.LogPlayerTick
// Offset::0x270D0B0;
void FGameplayEventAPI::LogPlayerTick(FObject* WorldContextObject,FUniqueNetIdRepl PlayerId,FVector PlayerPosition,FVector InViewPosition,FRotator InViewRotation,bool bIsZoomed,float Health);


// Function  OnlineSubsystemAngelscript.GameplayEventAPI.LogPlayerUseAbility
// Offset::0x270CB40;
void FGameplayEventAPI::LogPlayerUseAbility(FObject* WorldContextObject,FUniqueNetIdRepl PlayerId,uint32_t AbilityId,uint32_t DurationMs,uint32_t CooldownMs);


// Function  OnlineSubsystemAngelscript.GameplayEventAPI.LogPlayerUseWeapon
// Offset::0x270CD70;
void FGameplayEventAPI::LogPlayerUseWeapon(FObject* WorldContextObject,FUniqueNetIdRepl PlayerId,FVector PlayerPosition,FQuat PlayerView,bool bIsZoomed,bool bIsMelee,FString WeaponName);


// Function  OnlineSubsystemAngelscript.ServiceFriendsList.Add
// Offset::0x270F590;
void FServiceFriendsList::Add(FServiceFriend* Friend);


// Function  OnlineSubsystemAngelscript.ServiceFriendsList.Find
// Offset::0x270F310;
bool FServiceFriendsList::Find(FUniqueNetIdRepl ID,FServiceFriend* Result);


// Function  OnlineSubsystemAngelscript.ServiceFriendsList.FindFriendByName
// Offset::0x270F1B0;
bool FServiceFriendsList::FindFriendByName(FString DisplayName,FString DisplayNameDiscriminator,FServiceFriend* Result);


// Function  OnlineSubsystemAngelscript.ServiceFriendsList.GetFriends
// Offset::0x270F180;
TMap<FUniqueNetIdRepl,FServiceFriend*> FServiceFriendsList::GetFriends();


// Function  OnlineSubsystemAngelscript.ServiceFriendsList.Remove
// Offset::0x270F480;
bool FServiceFriendsList::Remove(FUniqueNetIdRepl ID);


// Function  OnlineSubsystemAngelscript.ServiceParty.IsValid
// Offset::0x270FE60;
bool FServiceParty::IsValid();


// Function  OnlineSubsystemAngelscript.ServicePlayerProfile.GetPreferredDisplayName
// Offset::0x27106D0;
FString FServicePlayerProfile::GetPreferredDisplayName();


// Function  OnlineSubsystemAngelscript.ServicePlayerProfile.IsOnlineOnPlatform
// Offset::0x27106A0;
bool FServicePlayerProfile::IsOnlineOnPlatform();


// Function  OnlineSubsystemAngelscript.InventoryServiceInventory.GetItemByAssetId
// Offset::0x27111E0;
FInventoryServiceItemBase* FInventoryServiceInventory::GetItemByAssetId(int64_t AssetId);


// Function  OnlineSubsystemAngelscript.InventoryServiceInventory.GetItemByItemId
// Offset::0x2711320;
FInventoryServiceItemBase* FInventoryServiceInventory::GetItemByItemId(FString ItemId);


// Function  OnlineSubsystemAngelscript.InventoryServiceInventory.GetItemByItemType
// Offset::0x2710FA0;
FInventoryServiceItemBase* FInventoryServiceInventory::GetItemByItemType(FStruct* ItemType);


// Function  OnlineSubsystemAngelscript.InventoryServiceInventory.GetItemsByAssetId
// Offset::0x27110E0;
void FInventoryServiceInventory::GetItemsByAssetId(int64_t AssetId,TArray<FInventoryServiceItemBase*> OutItems);


// Function  OnlineSubsystemAngelscript.InventoryServiceInventory.GetItemsByItemType
// Offset::0x2710EA0;
void FInventoryServiceInventory::GetItemsByItemType(FStruct* ItemType,TArray<FInventoryServiceItemBase*> OutItems);


// Function  OnlineSubsystemAngelscript.InventoryServiceInventory.HasItemByItemId
// Offset::0x27113D0;
bool FInventoryServiceInventory::HasItemByItemId(FString ItemId);


// Function  OnlineSubsystemAngelscript.InventoryServiceInventory.HasItemsByAssetId
// Offset::0x2711280;
bool FInventoryServiceInventory::HasItemsByAssetId(int64_t AssetId);


// Function  OnlineSubsystemAngelscript.InventoryServiceInventory.HasItemsByItemType
// Offset::0x2711040;
bool FInventoryServiceInventory::HasItemsByItemType(FStruct* ItemType);


// Function  OnlineSubsystemAngelscript.InventoryServiceInventory.UpdateDerivedProperties
// Offset::0x2711480;
bool FInventoryServiceInventory::UpdateDerivedProperties();


// Function  OnlineSubsystemAngelscript.ServiceManifest.ParseAndApplyFlags
// Offset::0x2713C30;
void FServiceManifest::ParseAndApplyFlags();


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewardBucket.GetFirstRewardByItemAssetId
// Offset::0x2714A60;
FServiceProgressionReward* FServiceProgressionRewardBucket::GetFirstRewardByItemAssetId(int64_t AssetId);


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewardBucket.GetRewardByRank
// Offset::0x2714DE0;
FServiceProgressionReward* FServiceProgressionRewardBucket::GetRewardByRank(int64_t Rank);


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewardBucket.GetRewardByXP
// Offset::0x2714CA0;
FServiceProgressionReward* FServiceProgressionRewardBucket::GetRewardByXP(int64_t CurrentXP);


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewardBucket.GetRewardsByItemAssetId
// Offset::0x2714B00;
void FServiceProgressionRewardBucket::GetRewardsByItemAssetId(int64_t AssetId,TArray<FServiceProgressionReward*> OutRewards);


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewardBucket.HasRewardByRank
// Offset::0x2714E80;
bool FServiceProgressionRewardBucket::HasRewardByRank(int64_t Rank);


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewardBucket.HasRewardByXP
// Offset::0x2714D40;
bool FServiceProgressionRewardBucket::HasRewardByXP(int64_t CurrentXP);


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewardBucket.HasRewardsByItemAssetId
// Offset::0x2714C00;
bool FServiceProgressionRewardBucket::HasRewardsByItemAssetId(int64_t AssetId);


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewardBucket.UpdateDerivedProperties
// Offset::0x2714F20;
bool FServiceProgressionRewardBucket::UpdateDerivedProperties();


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewards.GetBucketByBucketId
// Offset::0x27155B0;
FServiceProgressionRewardBucket* FServiceProgressionRewards::GetBucketByBucketId(FString BucketId);


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewards.HasBucketByBucketId
// Offset::0x2715660;
bool FServiceProgressionRewards::HasBucketByBucketId(FString BucketId);


// Function  OnlineSubsystemAngelscript.ServiceProgressionRewards.UpdateDerivedProperties
// Offset::0x2715710;
bool FServiceProgressionRewards::UpdateDerivedProperties();


// Function  OnlineSubsystemAngelscript.StoreOffer.GetBundleItem
// Offset::0x2716340;
FStoreBundleItem* FStoreOffer::GetBundleItem(int64_t ItemAssetId);


// Function  OnlineSubsystemAngelscript.StoreOffer.HasEmbarkProduct
// Offset::0x2716400;
bool FStoreOffer::HasEmbarkProduct();


// Function  OnlineSubsystemAngelscript.StoreOffer.HasThirdPartyProduct
// Offset::0x27163E0;
bool FStoreOffer::HasThirdPartyProduct();


// Function  OnlineSubsystemAngelscript.RegexHelper.Match
// Offset::0x2718EB0;
bool FRegexHelper::Match(FString Pattern,FString Subject);


// Function  EmbarkOptionSystem.IEmbarkDynamicEnum.GetDefaultIndex
// Offset::0x2870F40;
int32_t FIEmbarkDynamicEnum::GetDefaultIndex();


// Function  EmbarkOptionSystem.IEmbarkDynamicEnum.GetDisplayName
// Offset::0x2870FA0;
FString FIEmbarkDynamicEnum::GetDisplayName(int32_t Index);


// Function  EmbarkOptionSystem.IEmbarkDynamicEnum.GetIndexByName
// Offset::0x2871160;
int32_t FIEmbarkDynamicEnum::GetIndexByName(FString Value);


// Function  EmbarkOptionSystem.IEmbarkDynamicEnum.GetNameByIndex
// Offset::0x2871080;
FString FIEmbarkDynamicEnum::GetNameByIndex(int32_t Index);


// Function  EmbarkOptionSystem.IEmbarkDynamicEnum.GetNumOptions
// Offset::0x2870F70;
int32_t FIEmbarkDynamicEnum::GetNumOptions();


// Function  EmbarkOptionSystem.IEmbarkDynamicEnum.Initialize
// Offset::0x20E8030;
void FIEmbarkDynamicEnum::Initialize();


// Function  EmbarkOptionSystem.IEmbarkDynamicEnum.IsInitialized
// Offset::0x2870F10;
bool FIEmbarkDynamicEnum::IsInitialized();


// Function  EmbarkOptionSystem.IEmbarkOptionEnum.GetDisplayText
// Offset::0x2872D90;
FText FIEmbarkOptionEnum::GetDisplayText();


// Function  EmbarkOptionSystem.IEmbarkOptionEnum.GetIndex
// Offset::0x2872E60;
int32_t FIEmbarkOptionEnum::GetIndex();


// Function  EmbarkOptionSystem.IEmbarkOptionEnum.GetMaxIndexInclusive
// Offset::0x2872E30;
int32_t FIEmbarkOptionEnum::GetMaxIndexInclusive();


// Function  EmbarkOptionSystem.IEmbarkOptionEnum.SetIndex
// Offset::0x2872E90;
void FIEmbarkOptionEnum::SetIndex(int32_t NewIndex);


// Function  OnlineSubsystemAngelscript.VoiceChatModeSetting.GetCurrentMode
// Offset::0x2719590;
enum class EVoiceChatMode FVoiceChatModeSetting::GetCurrentMode();


// Function  OnlineSubsystemAngelscript.VoiceChatModeSetting.GetDisplayTextForPlayerController
// Offset::0x27194A0;
FText FVoiceChatModeSetting::GetDisplayTextForPlayerController(FPlayerController* PlayerController);


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.GetRoomId
// Offset::0x271A060;
FString FEmbarkVoiceRoom::GetRoomId();


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.GetRoomParticipants
// Offset::0x2719A20;
TMap<FUniqueNetIdRepl,FEmbarkVoiceRoomParticipantState> FEmbarkVoiceRoom::GetRoomParticipants();


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.GetState
// Offset::0x271A030;
enum class EVoiceRoomState FEmbarkVoiceRoom::GetState();


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.GetType
// Offset::0x271A000;
enum class EVoiceChannelType FEmbarkVoiceRoom::GetType();


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.IsInRoom
// Offset::0x2719A50;
bool FEmbarkVoiceRoom::IsInRoom();


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.IsPlayerActive
// Offset::0x2719CD0;
bool FEmbarkVoiceRoom::IsPlayerActive(FUniqueNetIdRepl PlayerId);


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.IsPlayerBlocked
// Offset::0x2719AB0;
bool FEmbarkVoiceRoom::IsPlayerBlocked(FUniqueNetIdRepl PlayerId);


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.IsPlayerInRoom
// Offset::0x2719DE0;
bool FEmbarkVoiceRoom::IsPlayerInRoom(FUniqueNetIdRepl PlayerId);


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.IsPlayerMuted
// Offset::0x2719BC0;
bool FEmbarkVoiceRoom::IsPlayerMuted(FUniqueNetIdRepl PlayerId);


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.IsPlayerTalking
// Offset::0x2719EF0;
bool FEmbarkVoiceRoom::IsPlayerTalking(FUniqueNetIdRepl PlayerId);


// Function  OnlineSubsystemAngelscript.EmbarkVoiceRoom.IsRoomMuted
// Offset::0x2719A80;
bool FEmbarkVoiceRoom::IsRoomMuted();


// Function  OnlineSubsystemEmbark.RegionSetting.GetCurrentRegionIdentifier
// Offset::0x2788B40;
FGameplayTag FRegionSetting::GetCurrentRegionIdentifier();


// Function  OnlineSubsystemEmbark.EmbarkRegionSubsystem.GetCurrentRegionDisplayName
// Offset::0x2788ED0;
FText FEmbarkRegionSubsystem::GetCurrentRegionDisplayName();


// Function  OnlineSubsystemEmbark.EmbarkRegionSubsystem.GetCurrentRegionIdentifier
// Offset::0x2788E80;
FGameplayTag FEmbarkRegionSubsystem::GetCurrentRegionIdentifier();


// Function  OnlineSubsystemEmbark.EmbarkRegionSubsystem.GetCurrentRegionOnlineName
// Offset::0x2788F50;
FString FEmbarkRegionSubsystem::GetCurrentRegionOnlineName();


// Function  OnlineSubsystemEmbark.OnlineSubsystemFeatureFlagNativeFunctionLibrary.EnableMatchmakingSquadLayout
// Offset::0x27893C0;
bool FOnlineSubsystemFeatureFlagNativeFunctionLibrary::EnableMatchmakingSquadLayout();


// Function  EmbarkAchievements.AchievementSubsystem.AddAchievementProgress
// Offset::0x279BA80;
void FAchievementSubsystem::AddAchievementProgress(FGameplayTag TriggerEvent,int32_t TimesToTrigger);


// Function  EmbarkAchievements.AchievementSubsystem.FlushAchievementProgress
// Offset::0x17AF4E0;
bool FAchievementSubsystem::FlushAchievementProgress();


// Function  EmbarkAchievements.AchievementSubsystem.GetAchievementProgress
// Offset::0x279B8D0;
float FAchievementSubsystem::GetAchievementProgress(FGameplayTag TriggerEvent);


// Function  EmbarkAchievements.AchievementSubsystem.SetAchievementProgress
// Offset::0x279B980;
void FAchievementSubsystem::SetAchievementProgress(FGameplayTag TriggerEvent,int32_t ProgressToWrite);


// Function  EmbarkApiGateway.EmbarkApiContext.GetAccessToken
// Offset::0x281FF00;
FString FEmbarkApiContext::GetAccessToken();


// Function  EmbarkApiGateway.EmbarkApiContext.GetDevInstanceKey
// Offset::0x281FD10;
FString FEmbarkApiContext::GetDevInstanceKey();


// Function  EmbarkApiGateway.EmbarkApiContext.GetManifestId
// Offset::0x281FE30;
int64_t FEmbarkApiContext::GetManifestId();


// Function  EmbarkApiGateway.EmbarkApiContext.GetSessionId
// Offset::0x281FC90;
FString FEmbarkApiContext::GetSessionId();


// Function  EmbarkApiGateway.EmbarkApiContext.SetAccessToken
// Offset::0x281FF80;
void FEmbarkApiContext::SetAccessToken(FString AccessToken);


// Function  EmbarkApiGateway.EmbarkApiContext.SetDevInstanceKey
// Offset::0x281FD80;
void FEmbarkApiContext::SetDevInstanceKey(FString Key);


// Function  EmbarkApiGateway.EmbarkApiContext.SetGlobalDevInstanceKey
// Offset::0x281FB60;
void FEmbarkApiContext::SetGlobalDevInstanceKey(FString Key);


// Function  EmbarkApiGateway.EmbarkApiContext.SetGlobalManifestId
// Offset::0x281FC00;
void FEmbarkApiContext::SetGlobalManifestId(int64_t InManifestId);


// Function  EmbarkApiGateway.EmbarkApiContext.SetManifestId
// Offset::0x281FE60;
void FEmbarkApiContext::SetManifestId(int64_t InManifestId);


// Function  Agones.AgonesComponent.Allocate
// Offset::0x2843AD0;
void FAgonesComponent::Allocate(FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.Connect
// Offset::0x2843BE0;
void FAgonesComponent::Connect();


// Function  Agones.AgonesComponent.ConnectSuccess
// Offset::0x28424B0;
void FAgonesComponent::ConnectSuccess(FGameServerResponse GameServerResponse);


// Function  Agones.AgonesComponent.GameServer
// Offset::0x28439C0;
void FAgonesComponent::GameServer(FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.GetConnectedPlayers
// Offset::0x2842FB0;
void FAgonesComponent::GetConnectedPlayers(FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.GetPlayerCapacity
// Offset::0x2842EA0;
void FAgonesComponent::GetPlayerCapacity(FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.GetPlayerCount
// Offset::0x2842D90;
void FAgonesComponent::GetPlayerCount(FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.Health
// Offset::0x2843800;
void FAgonesComponent::Health(FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.HealthPing
// Offset::0x2843C00;
void FAgonesComponent::HealthPing(float RateSeconds);


// Function  Agones.AgonesComponent.IsPlayerConnected
// Offset::0x2842BD0;
void FAgonesComponent::IsPlayerConnected(FString PlayerId,FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.PlayerConnect
// Offset::0x2842A10;
void FAgonesComponent::PlayerConnect(FString PlayerId,FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.PlayerDisconnect
// Offset::0x2842850;
void FAgonesComponent::PlayerDisconnect(FString PlayerId,FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.Ready
// Offset::0x28436F0;
void FAgonesComponent::Ready(FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.Reserve
// Offset::0x2843590;
void FAgonesComponent::Reserve(int64_t Seconds,FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.SetAnnotation
// Offset::0x28433B0;
void FAgonesComponent::SetAnnotation(FString Key,FString Value,FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.SetLabel
// Offset::0x28431D0;
void FAgonesComponent::SetLabel(FString Key,FString Value,FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.SetPlayerCapacity
// Offset::0x28426F0;
void FAgonesComponent::SetPlayerCapacity(int64_t Count,FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.Shutdown
// Offset::0x28430C0;
void FAgonesComponent::Shutdown(FDelegate SuccessDelegate,FDelegate ErrorDelegate);


// Function  Agones.AgonesComponent.WatchGameServer
// Offset::0x2843910;
void FAgonesComponent::WatchGameServer(FDelegate WatchDelegate);


// Function  AntiCheatCore.AntiCheatDelegates.EnqueueAction
// Offset::0x28591E0;
void FAntiCheatDelegates::EnqueueAction(enum class EAntiCheatClientAction ClientAction,enum class EAntiCheatClientActionReason ActionReasonCode,FString ActionReasonDetailsString);


// Function  AntiCheatCore.AntiCheatDelegates.EnqueueViolation
// Offset::0x2859320;
void FAntiCheatDelegates::EnqueueViolation(enum class EAntiCheatClientViolationType ViolationType,enum class EAntiCheatVendor Vendor);


// Function  AntiCheatCore.AntiCheatDelegates.ProcessEvents
// Offset::0x2859400;
void FAntiCheatDelegates::ProcessEvents();


// Function  EmbarkCore.AssetDataMixinLibrary.GetTagValueString
// Offset::0x285EDE0;
bool FAssetDataMixinLibrary::GetTagValueString(FAssetData AssetData,FName Tag,FString OutValue);


// Function  EmbarkCore.EmbarkFeatureFlagEditorUtils.DynamicSetOrAddFeatureFlagInEditor
// Offset::0x285F390;
bool FEmbarkFeatureFlagEditorUtils::DynamicSetOrAddFeatureFlagInEditor(FString FlagName,bool bFlagValue,FString FeatureFlagSubSection);


// Function  EmbarkCore.GameModeClassAliasUtils.DynamicAddGameModeClassAliasInEditor
// Offset::0x285F760;
bool FGameModeClassAliasUtils::DynamicAddGameModeClassAliasInEditor(FName Alias);


// Function  EmbarkCore.FFeatureFlagLockMixinLibrary.IsFeatureEnabled
// Offset::0x285FCE0;
bool FFFeatureFlagLockMixinLibrary::IsFeatureEnabled(FFeatureFlagLock FeatureFlagLock);


// Function  EmbarkCore.EmbarkFeatureFlag.IsDeclared
// Offset::0x28602A0;
bool FEmbarkFeatureFlag::IsDeclared(FString FeatureFlagName);


// Function  EmbarkCore.EmbarkFeatureFlag.IsEnabled
// Offset::0x2860400;
bool FEmbarkFeatureFlag::IsEnabled(FFeatureFlag Flag);


// Function  EmbarkCore.EmbarkFeatureFlag.RawIsEnabled
// Offset::0x2860350;
bool FEmbarkFeatureFlag::RawIsEnabled(FString FeatureFlagName);


// Function  EmbarkCore.EmbarkFeatureFlag.ToCommandLine
// Offset::0x28601C0;
FString FEmbarkFeatureFlag::ToCommandLine(FString Prefix);


// Function  EmbarkCore.UEmbarkFeatureFlagStatics.ApplyFromAgonesLabel
// Offset::0x28608B0;
void FUEmbarkFeatureFlagStatics::ApplyFromAgonesLabel(FString AgonesLabel);


// Function  EmbarkCore.FVersionInfoStatics.TryGetGlobalVersionInfo
// Offset::0x2860CF0;
bool FFVersionInfoStatics::TryGetGlobalVersionInfo(FVersionInfo OutVersionInfo);


// Function  EmbarkLocalization.EmbarkLocalizationSettings.Get
// Offset::0x2864650;
FEmbarkLocalizationSettings* FEmbarkLocalizationSettings::Get();


// Function  EmbarkOptionSystem.IEmbarkOptionBool.GetValue
// Offset::0x1AA60A0;
bool FIEmbarkOptionBool::GetValue();


// Function  EmbarkOptionSystem.IEmbarkOptionBool.SetValue
// Offset::0x1BAB250;
void FIEmbarkOptionBool::SetValue(bool bNewValue);


// Function  EmbarkOptionSystem.IEmbarkOptionInt.GetValue
// Offset::0x2875830;
int32_t FIEmbarkOptionInt::GetValue();


// Function  EmbarkOptionSystem.IEmbarkOptionInt.SetValue
// Offset::0x2875860;
void FIEmbarkOptionInt::SetValue(int32_t NewValue);


// Function  EmbarkOptionSystem.IEmbarkOptionString.GetValue
// Offset::0x26FFE50;
FString FIEmbarkOptionString::GetValue();


// Function  EmbarkOptionSystem.IEmbarkOptionString.SetValue
// Offset::0x26DA090;
void FIEmbarkOptionString::SetValue(FString NewValue);


// Function  EmbarkOptionSystem.EmbarkOptionDynamicEnum.AttemptRestore
// Offset::0x286D980;
void FEmbarkOptionDynamicEnum::AttemptRestore();


// Function  EmbarkOptionSystem.IEmbarkOptionGameplayTag.GetValue
// Offset::0x28752A0;
FGameplayTag FIEmbarkOptionGameplayTag::GetValue();


// Function  EmbarkOptionSystem.IEmbarkOptionGameplayTag.SetValue
// Offset::0x2875300;
void FIEmbarkOptionGameplayTag::SetValue(FGameplayTag NewValue);


// Function  EmbarkOptionSystem.EmbarkOptionManager.AddOption
// Offset::0x286F620;
void FEmbarkOptionManager::AddOption(FEmbarkOptionBase* Option);


// Function  EmbarkOptionSystem.EmbarkOptionManager.FindOption
// Offset::0x286F570;
FEmbarkOptionBase* FEmbarkOptionManager::FindOption(FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.FindOptionBool
// Offset::0x286F4C0;
FIEmbarkOptionBool* FEmbarkOptionManager::FindOptionBool(FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.FindOptionEnum
// Offset::0x286EA30;
FIEmbarkOptionEnum* FEmbarkOptionManager::FindOptionEnum(FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.FindOptionFloat
// Offset::0x286F220;
FIEmbarkOptionFloat* FEmbarkOptionManager::FindOptionFloat(FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.FindOptionGameplayTag
// Offset::0x286EF80;
FIEmbarkOptionGameplayTag* FEmbarkOptionManager::FindOptionGameplayTag(FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.FindOptionInt
// Offset::0x286ECD0;
FIEmbarkOptionInt* FEmbarkOptionManager::FindOptionInt(FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.FindOptionString
// Offset::0x286E790;
FIEmbarkOptionString* FEmbarkOptionManager::FindOptionString(FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.GetOptionBool
// Offset::0x286F3D0;
FIEmbarkOptionBool* FEmbarkOptionManager::GetOptionBool(FEmbarkOptionManager* Manager,FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.GetOptionEnum
// Offset::0x286E940;
FIEmbarkOptionEnum* FEmbarkOptionManager::GetOptionEnum(FEmbarkOptionManager* Manager,FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.GetOptionFloat
// Offset::0x286F130;
FIEmbarkOptionFloat* FEmbarkOptionManager::GetOptionFloat(FEmbarkOptionManager* Manager,FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.GetOptionGameplayTag
// Offset::0x286EE90;
FIEmbarkOptionGameplayTag* FEmbarkOptionManager::GetOptionGameplayTag(FEmbarkOptionManager* Manager,FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.GetOptionInt
// Offset::0x286EBE0;
FIEmbarkOptionInt* FEmbarkOptionManager::GetOptionInt(FEmbarkOptionManager* Manager,FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.GetOptionString
// Offset::0x286E6A0;
FIEmbarkOptionString* FEmbarkOptionManager::GetOptionString(FEmbarkOptionManager* Manager,FGameplayTag OptionTag);


// Function  EmbarkOptionSystem.EmbarkOptionManager.HasUnsavedOptions
// Offset::0x286E3C0;
bool FEmbarkOptionManager::HasUnsavedOptions();


// Function  EmbarkOptionSystem.EmbarkOptionManager.ResetOptionsToDefault
// Offset::0x286E4E0;
void FEmbarkOptionManager::ResetOptionsToDefault(FGameplayTag TagCategory);


// Function  EmbarkOptionSystem.EmbarkOptionManager.ResetUnsavedOptions
// Offset::0x286E3F0;
void FEmbarkOptionManager::ResetUnsavedOptions();


// Function  EmbarkOptionSystem.EmbarkOptionManager.RestartRequiredToTakeEffect
// Offset::0x2230E20;
bool FEmbarkOptionManager::RestartRequiredToTakeEffect();


// Function  EmbarkOptionSystem.EmbarkOptionManager.Save
// Offset::0x286E430;
void FEmbarkOptionManager::Save(FGameplayTag TagCategory);


// Function  EmbarkOptionSystem.EmbarkOptionManager.SaveAll
// Offset::0x286E410;
void FEmbarkOptionManager::SaveAll();


// Function  EmbarkOptionSystem.EmbarkOptionManager.SetOptionBool
// Offset::0x286F2D0;
bool FEmbarkOptionManager::SetOptionBool(FGameplayTag OptionTag,bool bNewValue);


// Function  EmbarkOptionSystem.EmbarkOptionManager.SetOptionEnum
// Offset::0x286E840;
bool FEmbarkOptionManager::SetOptionEnum(FGameplayTag OptionTag,int32_t NewIndex);


// Function  EmbarkOptionSystem.EmbarkOptionManager.SetOptionFloat
// Offset::0x286F030;
bool FEmbarkOptionManager::SetOptionFloat(FGameplayTag OptionTag,float NewValue);


// Function  EmbarkOptionSystem.EmbarkOptionManager.SetOptionGameplayTag
// Offset::0x286ED80;
bool FEmbarkOptionManager::SetOptionGameplayTag(FGameplayTag OptionTag,FGameplayTag NewValue);


// Function  EmbarkOptionSystem.EmbarkOptionManager.SetOptionInt
// Offset::0x286EAE0;
bool FEmbarkOptionManager::SetOptionInt(FGameplayTag OptionTag,int32_t NewValue);


// Function  EmbarkOptionSystem.EmbarkOptionManager.SetOptionString
// Offset::0x286E590;
bool FEmbarkOptionManager::SetOptionString(FGameplayTag OptionTag,FString NewString);


// Function  EmbarkUtilities.EmbarkJsonLibrary.JsonObjectStringToUClass
// Offset::0x28802A0;
bool FEmbarkJsonLibrary::JsonObjectStringToUClass(FString JsonString,FObject* OutObject,int32_t CheckFlags,int32_t SkipFlags);


// Function  EmbarkUtilities.EmbarkJsonLibrary.UClassToJsonObjectString
// Offset::0x28805C0;
bool FEmbarkJsonLibrary::UClassToJsonObjectString(FObject* Object,FString Result,int32_t CheckFlags,int32_t SkipFlags,int32_t Indent,bool bPrettyPrint,bool bEncodeSubclassWithTypeWrap,bool bNormalizeCase);


// Function  EmbarkUtilities.EmbarkJsonLibrary.UClassToJsonSerialization
// Offset::0x2880440;
bool FEmbarkJsonLibrary::UClassToJsonSerialization(FObject* Object,FString Result,FEncodeSettings Settings);


// Function  EmbarkTelemetry.EmbarkRoundPerformanceTelemetry.FinishTrackingRoundPerformance
// Offset::0x28F20F0;
void FEmbarkRoundPerformanceTelemetry::FinishTrackingRoundPerformance();


// Function  EmbarkTelemetry.EmbarkRoundPerformanceTelemetry.StartTrackingRoundPerformance
// Offset::0x28F2110;
void FEmbarkRoundPerformanceTelemetry::StartTrackingRoundPerformance();


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.AccountCreated
// Offset::0x28F8620;
void FEmbarkTelemetryAPI::AccountCreated();


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.AccountLinked
// Offset::0x28F8600;
void FEmbarkTelemetryAPI::AccountLinked();


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.AchievementProgress
// Offset::0x28F8510;
void FEmbarkTelemetryAPI::AchievementProgress(FString Tag,int64_t Progress);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.BackpackMinigameOrfScore
// Offset::0x28F8480;
void FEmbarkTelemetryAPI::BackpackMinigameOrfScore(int64_t Score);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.BattlepassPromotionPlatePressed
// Offset::0x28F83A0;
void FEmbarkTelemetryAPI::BattlepassPromotionPlatePressed(int64_t AssetId,int64_t ProductId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ButtonPressed2
// Offset::0x28F8250;
void FEmbarkTelemetryAPI::ButtonPressed2(FString Name,FString ParentName,FString Payload);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientAppInfo
// Offset::0x28F8100;
void FEmbarkTelemetryAPI::ClientAppInfo(FString AppId,FString BranchName,FString CountryCode);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientBackendGameTransformationError2
// Offset::0x28F7F60;
void FEmbarkTelemetryAPI::ClientBackendGameTransformationError2(FString InstanceId,int64_t AssetId,FString ErrorCode,FString DetailedInfo);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientEmbarkStoreTransactionBegin
// Offset::0x28F7E20;
void FEmbarkTelemetryAPI::ClientEmbarkStoreTransactionBegin(FString StoreSessionId,FString ClientRequestId,int64_t EmbarkProductId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientEmbarkStoreTransactionDone
// Offset::0x28F7C80;
void FEmbarkTelemetryAPI::ClientEmbarkStoreTransactionDone(FString StoreSessionId,FString ClientRequestId,int64_t EmbarkProductId,FString ResultCode);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientEmbarkStoreTransactionError
// Offset::0x28F7A70;
void FEmbarkTelemetryAPI::ClientEmbarkStoreTransactionError(FString StoreSessionId,FString ClientRequestId,int64_t EmbarkProductId,FString ResultCode,FString ErrorMessage);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientLoginFailure2
// Offset::0x28F7970;
void FEmbarkTelemetryAPI::ClientLoginFailure2(FString Message,FString Node);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientOnlineTelemetry
// Offset::0x28F78D0;
void FEmbarkTelemetryAPI::ClientOnlineTelemetry(FString Message);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientSetting
// Offset::0x28F7730;
void FEmbarkTelemetryAPI::ClientSetting(FString SettingName,FString SettingValue,FString Description,int64_t SettingBatchId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientSurvey
// Offset::0x28F7530;
void FEmbarkTelemetryAPI::ClientSurvey(FString SurveyName,TArray<FString> Answers,FString AnswerContext,FString LastRoundId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientThirdPartyOffers
// Offset::0x28F72C0;
void FEmbarkTelemetryAPI::ClientThirdPartyOffers(FString ThirdPartyOfferId,FString Country,FString LocalizedPrice,int64_t NumericPrice,FString CurrencyCode,int64_t ThirdPartyProductId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientThirdPartyStoreTransactionBegin2
// Offset::0x28F7120;
void FEmbarkTelemetryAPI::ClientThirdPartyStoreTransactionBegin2(FString StoreSessionId,FString ClientRequestId,FString ThirdPartyStoreId,int64_t ThirdPartyProductId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientThirdPartyStoreTransactionDone2
// Offset::0x28F6F10;
void FEmbarkTelemetryAPI::ClientThirdPartyStoreTransactionDone2(FString StoreSessionId,FString ClientRequestId,FString ThirdPartyStoreId,int64_t ThirdPartyProductId,FString ResultCode);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ClientThirdPartyStoreTransactionError2
// Offset::0x28F6C90;
void FEmbarkTelemetryAPI::ClientThirdPartyStoreTransactionError2(FString StoreSessionId,FString ClientRequestId,FString ThirdPartyStoreId,int64_t ThirdPartyProductId,FString ResultCode,FString ErrorMessage);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.CompleteChamberGeneratorCraft2
// Offset::0x28F6880;
void FEmbarkTelemetryAPI::CompleteChamberGeneratorCraft2(int64_t OfferId,FString OfferInstanceId,int64_t GeneratorAssetId,FString GeneratorInstanceId,FString GeneratorName,TArray<int64_t> ConsumesGameAssetIds,TArray<int64_t> ConsumesAmounts,TArray<int64_t> ProducesGameAssetIds,TArray<int64_t> ProducesAmounts);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoConnectedToServer2
// Offset::0x28F67E0;
void FEmbarkTelemetryAPI::DiscoConnectedToServer2(FString HostName);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoEquipWeaponSkin2
// Offset::0x28F6750;
void FEmbarkTelemetryAPI::DiscoEquipWeaponSkin2(int64_t GameAssetId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoSelectCosmeticItem
// Offset::0x28F66C0;
void FEmbarkTelemetryAPI::DiscoSelectCosmeticItem(int64_t GameAssetId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoSelectEmoteItem
// Offset::0x28F6630;
void FEmbarkTelemetryAPI::DiscoSelectEmoteItem(int64_t GameAssetId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoSelectPack2
// Offset::0x28F64C0;
void FEmbarkTelemetryAPI::DiscoSelectPack2(FString PackId,TArray<int64_t> LoadoutItemIds,TArray<int64_t> ReserveItemIds);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoSelectPoseItem
// Offset::0x28F6430;
void FEmbarkTelemetryAPI::DiscoSelectPoseItem(int64_t GameAssetId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoSelectSprayItem
// Offset::0x28F63A0;
void FEmbarkTelemetryAPI::DiscoSelectSprayItem(int64_t GameAssetId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoSelectWeaponCharm2
// Offset::0x28F6310;
void FEmbarkTelemetryAPI::DiscoSelectWeaponCharm2(int64_t GameAssetId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoSelectWeaponSkin2
// Offset::0x28F6280;
void FEmbarkTelemetryAPI::DiscoSelectWeaponSkin2(int64_t GameAssetId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoSelectWeaponSticker2
// Offset::0x28F61F0;
void FEmbarkTelemetryAPI::DiscoSelectWeaponSticker2(int64_t GameAssetId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoToggleCosmeticItem
// Offset::0x28F6110;
void FEmbarkTelemetryAPI::DiscoToggleCosmeticItem(int64_t GameAssetId,bool bEquip);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoToggleEmoteItem
// Offset::0x28F6030;
void FEmbarkTelemetryAPI::DiscoToggleEmoteItem(int64_t GameAssetId,bool bEquip);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoTogglePoseItem
// Offset::0x28F5F50;
void FEmbarkTelemetryAPI::DiscoTogglePoseItem(int64_t GameAssetId,bool bEquip);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoToggleSprayItem
// Offset::0x28F5E70;
void FEmbarkTelemetryAPI::DiscoToggleSprayItem(int64_t GameAssetId,bool bEquip);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoToggleWeaponCharm2
// Offset::0x28F5D90;
void FEmbarkTelemetryAPI::DiscoToggleWeaponCharm2(int64_t GameAssetId,bool bEquip);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoToggleWeaponSticker2
// Offset::0x28F5CB0;
void FEmbarkTelemetryAPI::DiscoToggleWeaponSticker2(int64_t GameAssetId,bool bEquip);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoTournamentMatchUpdate
// Offset::0x28F5C10;
void FEmbarkTelemetryAPI::DiscoTournamentMatchUpdate(FString Status);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoTravelToNextTier
// Offset::0x28F5B70;
void FEmbarkTelemetryAPI::DiscoTravelToNextTier(FString HostName);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DiscoUpdatePack
// Offset::0x28F58D0;
void FEmbarkTelemetryAPI::DiscoUpdatePack(FString DefaultPackId,FString PackId,FString Name,int64_t RemainingCredits,TArray<int64_t> LoadoutItemIds,TArray<int64_t> ReserveItemIds);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.DropPinDebug3
// Offset::0x28F56E0;
void FEmbarkTelemetryAPI::DropPinDebug3(FVector Location,float Pitch,float Roll,float Yaw,FString Category);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.EditorToolUsage
// Offset::0x28F5550;
void FEmbarkTelemetryAPI::EditorToolUsage(FString ToolName,FString FunctionName);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.EditPack
// Offset::0x28F5650;
void FEmbarkTelemetryAPI::EditPack(bool bIsNew);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.EmbarkStoreProductViewLoad
// Offset::0x28F5460;
void FEmbarkTelemetryAPI::EmbarkStoreProductViewLoad(FString StoreSessionId,int64_t EmbarkProductId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.EnterGameModeScreen2
// Offset::0x28F53D0;
void FEmbarkTelemetryAPI::EnterGameModeScreen2(int64_t PowerRating);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.EnterScreenView2
// Offset::0x28F5280;
void FEmbarkTelemetryAPI::EnterScreenView2(FString CurrentScreenName,FString FromScreenName,FString MapName);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.EnterScreenView3
// Offset::0x28F50D0;
void FEmbarkTelemetryAPI::EnterScreenView3(FString CurrentScreenName,FString FromScreenName,FString MapName,FString Payload);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ErrorCodeShown
// Offset::0x28F5030;
void FEmbarkTelemetryAPI::ErrorCodeShown(FString ErrorCode);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ExpandChamber
// Offset::0x28F4F40;
void FEmbarkTelemetryAPI::ExpandChamber(int64_t ChamberAssetId,FString ChamberName);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.FallbackLoadout
// Offset::0x28F4E40;
void FEmbarkTelemetryAPI::FallbackLoadout(int64_t LoadoutId,TArray<int64_t> Items);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.GetClientUuid
// Offset::0x28F2430;
FString FEmbarkTelemetryAPI::GetClientUuid();


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.KeyboardBindingsChange
// Offset::0x28F4D40;
void FEmbarkTelemetryAPI::KeyboardBindingsChange(FString Action,FString Key);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.LocalizationSetting
// Offset::0x28F4CA0;
void FEmbarkTelemetryAPI::LocalizationSetting(FString Locale);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.MainMenuOffer
// Offset::0x28F4BC0;
void FEmbarkTelemetryAPI::MainMenuOffer(int64_t AssetId,int64_t ProductId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.MainMenuQuickPurchase
// Offset::0x28F4AE0;
void FEmbarkTelemetryAPI::MainMenuQuickPurchase(int64_t AssetId,int64_t ProductId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.MapInteraction2
// Offset::0x28F4A40;
void FEmbarkTelemetryAPI::MapInteraction2(FString Interaction);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.MatchmakingGameserverAvailable
// Offset::0x28F48A0;
void FEmbarkTelemetryAPI::MatchmakingGameserverAvailable(FString TicketId,FString GameserverName,FString GameserverHost,int32_t GameserverPort);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.MatchmakingGameserverAvailable2
// Offset::0x28F4690;
void FEmbarkTelemetryAPI::MatchmakingGameserverAvailable2(FString TicketId,FString GameserverName,FString GameserverHost,int32_t GameserverPort,FString MatchId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.MatchmakingStatus
// Offset::0x28F4540;
void FEmbarkTelemetryAPI::MatchmakingStatus(FString TicketId,FString PreviousStatus,FString NewStatus);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ModalCreated
// Offset::0x28F4440;
void FEmbarkTelemetryAPI::ModalCreated(FString Name,FString Screen);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ModalDeactivated
// Offset::0x28F4340;
void FEmbarkTelemetryAPI::ModalDeactivated(FString Name,FString Screen);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ModalDestroyed
// Offset::0x28F4240;
void FEmbarkTelemetryAPI::ModalDestroyed(FString Name,FString Screen);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.PredictionBufferOverflow
// Offset::0x28F4220;
void FEmbarkTelemetryAPI::PredictionBufferOverflow();


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.RichPresenceMissing
// Offset::0x28F4190;
void FEmbarkTelemetryAPI::RichPresenceMissing(int64_t OtherPlayerId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ScrapItem
// Offset::0x28F4010;
void FEmbarkTelemetryAPI::ScrapItem(int64_t TypeId,FString InstanceId,int64_t Amount,float Durability);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.SettingsChanged
// Offset::0x28F3EC0;
void FEmbarkTelemetryAPI::SettingsChanged(FString Tag,FString OldValue,FString NewValue);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.StartChamberGeneratorCraft2
// Offset::0x28F3AB0;
void FEmbarkTelemetryAPI::StartChamberGeneratorCraft2(int64_t OfferId,FString OfferInstanceId,int64_t GeneratorAssetId,FString GeneratorInstanceId,FString GeneratorName,TArray<int64_t> ConsumesGameAssetIds,TArray<int64_t> ConsumesAmounts,TArray<int64_t> ProducesGameAssetIds,TArray<int64_t> ProducesAmounts);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.StartGameMode2
// Offset::0x28F3910;
void FEmbarkTelemetryAPI::StartGameMode2(int64_t PowerRating,FString GameMode,FString GameModeIdentifier,FString Severity);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.StashStatus
// Offset::0x28F3750;
void FEmbarkTelemetryAPI::StashStatus(int64_t Currency,TArray<int64_t> GameAssetIds,TArray<int64_t> ItemAmounts,int64_t StashValue);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.StoreSessionBegin2
// Offset::0x28F3650;
void FEmbarkTelemetryAPI::StoreSessionBegin2(FString StoreSessionId,FString ScreenName);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.StoreSessionDone
// Offset::0x28F35B0;
void FEmbarkTelemetryAPI::StoreSessionDone(FString StoreSessionId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.StoreViewLoad2
// Offset::0x28F3300;
void FEmbarkTelemetryAPI::StoreViewLoad2(FString StoreSessionId,int64_t ViewId,TArray<int64_t> LayoutIds,TArray<int64_t> EmbarkProductIds,FString ThirdPartyStoreId,TArray<int64_t> ThirdPartyProductIds);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.SurveyOpen3
// Offset::0x28F31B0;
void FEmbarkTelemetryAPI::SurveyOpen3(FString SurveyId,FString SurveyType,FString URL);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.SwapDeckSlot
// Offset::0x28F2EE0;
void FEmbarkTelemetryAPI::SwapDeckSlot(FString FirstSlotId,int64_t FirstGameAssetId,FString FirstSlotType,FString SecondSlotId,int64_t SecondAssetId,FString SecondSlotType,bool bIsDrafting);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.TamperAction
// Offset::0x28F2E50;
void FEmbarkTelemetryAPI::TamperAction(int32_t Value);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.TestEvent
// Offset::0x28F2DB0;
void FEmbarkTelemetryAPI::TestEvent(FString Stuff);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ThirdPartyProductViewLoad2
// Offset::0x28F2C70;
void FEmbarkTelemetryAPI::ThirdPartyProductViewLoad2(FString StoreSessionId,FString ThirdPartyStoreId,int64_t ThirdPartyProductId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ThirdPartyStoreMissingOfferIds
// Offset::0x28F2B70;
void FEmbarkTelemetryAPI::ThirdPartyStoreMissingOfferIds(FString CountryCode,FString CurrencyCode);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ThirdPartyStoreNoProductReceived
// Offset::0x28F2A70;
void FEmbarkTelemetryAPI::ThirdPartyStoreNoProductReceived(FString CountryCode,FString ThirdPartyOfferId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ThirdPartyStoreProductFailedLoad
// Offset::0x28F2870;
void FEmbarkTelemetryAPI::ThirdPartyStoreProductFailedLoad(FString CountryCode,FString CurrencyCode,FString ThirdPartyOfferId,int64_t ThirdPartyProductId,int64_t AssetId);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.ThirdPartyStoreQueryFailed
// Offset::0x28F2770;
void FEmbarkTelemetryAPI::ThirdPartyStoreQueryFailed(FString CountryCode,FString Error);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.UpdateDeckSlot
// Offset::0x28F2580;
void FEmbarkTelemetryAPI::UpdateDeckSlot(FString FirstSlotId,int64_t FirstGameAssetId,FString FirstSlotType,int64_t SecondAssetId,bool bIsDrafting);


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.VideoEnd
// Offset::0x28F2560;
void FEmbarkTelemetryAPI::VideoEnd();


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.VideoSkip
// Offset::0x28F2540;
void FEmbarkTelemetryAPI::VideoSkip();


// Function  EmbarkTelemetry.EmbarkTelemetryAPI.VoiceEnabledChanged
// Offset::0x28F24B0;
void FEmbarkTelemetryAPI::VoiceEnabledChanged(bool bEnabled);


// Function  EmbarkTelemetry.EmbarkTelemetryUtil.GetClientPlatform
// Offset::0x28FB770;
int64_t FEmbarkTelemetryUtil::GetClientPlatform();


// Function  EmbarkTelemetry.EmbarkTelemetryUtil.GetClientUuid
// Offset::0x28FB7A0;
FString FEmbarkTelemetryUtil::GetClientUuid();


// Function  EmbarkTelemetry.EmbarkTelemetryUtil.GetLastTelemetryRoundId
// Offset::0x28FB510;
FString FEmbarkTelemetryUtil::GetLastTelemetryRoundId();


// Function  EmbarkTelemetry.EmbarkTelemetryUtil.NewXid
// Offset::0x28FB490;
FString FEmbarkTelemetryUtil::NewXid();


// Function  EmbarkTelemetry.EmbarkTelemetryUtil.SetClientStatusActivity
// Offset::0x28FB820;
void FEmbarkTelemetryUtil::SetClientStatusActivity(enum class ETelemetryClientActivity Activity);


// Function  EmbarkTelemetry.EmbarkTelemetryUtil.SetRegion
// Offset::0x28FB680;
void FEmbarkTelemetryUtil::SetRegion(FString Region);


// Function  EmbarkTelemetry.EmbarkTelemetryUtil.SetTelemetryRoundId
// Offset::0x28FB590;
void FEmbarkTelemetryUtil::SetTelemetryRoundId(FString TelemetryRoundId);


// Function  OnlineSubsystemUtils.AchievementBlueprintLibrary.GetCachedAchievementDescription
// Offset::0x2941D40;
void FAchievementBlueprintLibrary::GetCachedAchievementDescription(FObject* WorldContextObject,FPlayerController* PlayerController,FName AchievementId,bool bFoundID,FText Title,FText LockedDescription,FText UnlockedDescription,bool bHidden);


// Function  OnlineSubsystemUtils.AchievementBlueprintLibrary.GetCachedAchievementProgress
// Offset::0x2942110;
void FAchievementBlueprintLibrary::GetCachedAchievementProgress(FObject* WorldContextObject,FPlayerController* PlayerController,FName AchievementId,bool bFoundID,float Progress);


// Function  OnlineSubsystemUtils.AchievementQueryCallbackProxy.CacheAchievementDescriptions
// Offset::0x29425F0;
FAchievementQueryCallbackProxy* FAchievementQueryCallbackProxy::CacheAchievementDescriptions(FObject* WorldContextObject,FPlayerController* PlayerController);


// Function  OnlineSubsystemUtils.AchievementQueryCallbackProxy.CacheAchievements
// Offset::0x29426D0;
FAchievementQueryCallbackProxy* FAchievementQueryCallbackProxy::CacheAchievements(FObject* WorldContextObject,FPlayerController* PlayerController);


// Function  OnlineSubsystemUtils.AchievementWriteCallbackProxy.WriteAchievementProgress
// Offset::0x2942B00;
FAchievementWriteCallbackProxy* FAchievementWriteCallbackProxy::WriteAchievementProgress(FObject* WorldContextObject,FPlayerController* PlayerController,FName AchievementName,float Progress,int32_t UserTag);


// Function  OnlineSubsystemUtils.ConnectionCallbackProxy.ConnectToService
// Offset::0x2942F90;
FConnectionCallbackProxy* FConnectionCallbackProxy::ConnectToService(FObject* WorldContextObject,FPlayerController* PlayerController);


// Function  OnlineSubsystemUtils.CreateSessionCallbackProxy.CreateSession
// Offset::0x2943300;
FCreateSessionCallbackProxy* FCreateSessionCallbackProxy::CreateSession(FObject* WorldContextObject,FPlayerController* PlayerController,int32_t PublicConnections,bool bUseLAN);


// Function  OnlineSubsystemUtils.DestroySessionCallbackProxy.DestroySession
// Offset::0x2943710;
FDestroySessionCallbackProxy* FDestroySessionCallbackProxy::DestroySession(FObject* WorldContextObject,FPlayerController* PlayerController);


// Function  OnlineSubsystemUtils.EndMatchCallbackProxy.EndMatch
// Offset::0x2943A80;
FEndMatchCallbackProxy* FEndMatchCallbackProxy::EndMatch(FObject* WorldContextObject,FPlayerController* PlayerController,TScriptInterface<ITurnBasedMatchInterface> MatchActor,FString MatchId,enum class EMPMatchOutcome LocalPlayerOutcome,enum class EMPMatchOutcome OtherPlayersOutcome);


// Function  OnlineSubsystemUtils.EndTurnCallbackProxy.EndTurn
// Offset::0x2943F00;
FEndTurnCallbackProxy* FEndTurnCallbackProxy::EndTurn(FObject* WorldContextObject,FPlayerController* PlayerController,FString MatchId,TScriptInterface<ITurnBasedMatchInterface> TurnBasedMatchInterface);


// Function  OnlineSubsystemUtils.FindSessionsCallbackProxy.FindSessions
// Offset::0x2944990;
FFindSessionsCallbackProxy* FFindSessionsCallbackProxy::FindSessions(FObject* WorldContextObject,FPlayerController* PlayerController,int32_t MaxResults,bool bUseLAN);


// Function  OnlineSubsystemUtils.FindSessionsCallbackProxy.GetCurrentPlayers
// Offset::0x2944500;
int32_t FFindSessionsCallbackProxy::GetCurrentPlayers(FBlueprintSessionResult Result);


// Function  OnlineSubsystemUtils.FindSessionsCallbackProxy.GetMaxPlayers
// Offset::0x2944390;
int32_t FFindSessionsCallbackProxy::GetMaxPlayers(FBlueprintSessionResult Result);


// Function  OnlineSubsystemUtils.FindSessionsCallbackProxy.GetPingInMs
// Offset::0x2944820;
int32_t FFindSessionsCallbackProxy::GetPingInMs(FBlueprintSessionResult Result);


// Function  OnlineSubsystemUtils.FindSessionsCallbackProxy.GetServerName
// Offset::0x2944670;
FString FFindSessionsCallbackProxy::GetServerName(FBlueprintSessionResult Result);


// Function  OnlineSubsystemUtils.FindTurnBasedMatchCallbackProxy.FindTurnBasedMatch
// Offset::0x2944FD0;
FFindTurnBasedMatchCallbackProxy* FFindTurnBasedMatchCallbackProxy::FindTurnBasedMatch(FObject* WorldContextObject,FPlayerController* PlayerController,TScriptInterface<ITurnBasedMatchInterface> MatchActor,int32_t MinPlayers,int32_t MaxPlayers,int32_t PlayerGroup,bool ShowExistingMatches);


// Function  OnlineSubsystemUtils.InAppPurchaseCallbackProxy.CreateProxyObjectForInAppPurchase
// Offset::0x29454D0;
FInAppPurchaseCallbackProxy* FInAppPurchaseCallbackProxy::CreateProxyObjectForInAppPurchase(FPlayerController* PlayerController,FInAppPurchaseProductRequest ProductRequest);


// Function  OnlineSubsystemUtils.InAppPurchaseCallbackProxy2.CreateProxyObjectForInAppPurchase
// Offset::0x2945BC0;
FInAppPurchaseCallbackProxy2* FInAppPurchaseCallbackProxy2::CreateProxyObjectForInAppPurchase(FPlayerController* PlayerController,FInAppPurchaseProductRequest2 ProductRequest);


// Function  OnlineSubsystemUtils.InAppPurchaseCallbackProxy2.CreateProxyObjectForInAppPurchaseQueryOwned
// Offset::0x2945A80;
FInAppPurchaseCallbackProxy2* FInAppPurchaseCallbackProxy2::CreateProxyObjectForInAppPurchaseQueryOwned(FPlayerController* PlayerController);


// Function  OnlineSubsystemUtils.InAppPurchaseCallbackProxy2.CreateProxyObjectForInAppPurchaseUnprocessedPurchases
// Offset::0x2945B20;
FInAppPurchaseCallbackProxy2* FInAppPurchaseCallbackProxy2::CreateProxyObjectForInAppPurchaseUnprocessedPurchases(FPlayerController* PlayerController);


// Function  OnlineSubsystemUtils.InAppPurchaseQueryCallbackProxy.CreateProxyObjectForInAppPurchaseQuery
// Offset::0x2946090;
FInAppPurchaseQueryCallbackProxy* FInAppPurchaseQueryCallbackProxy::CreateProxyObjectForInAppPurchaseQuery(FPlayerController* PlayerController,TArray<FString> ProductIdentifiers);


// Function  OnlineSubsystemUtils.InAppPurchaseQueryCallbackProxy2.CreateProxyObjectForInAppPurchaseQuery
// Offset::0x2946590;
FInAppPurchaseQueryCallbackProxy2* FInAppPurchaseQueryCallbackProxy2::CreateProxyObjectForInAppPurchaseQuery(FPlayerController* PlayerController,TArray<FString> ProductIdentifiers);


// Function  OnlineSubsystemUtils.InAppPurchaseRestoreCallbackProxy.CreateProxyObjectForInAppPurchaseRestore
// Offset::0x2946980;
FInAppPurchaseRestoreCallbackProxy* FInAppPurchaseRestoreCallbackProxy::CreateProxyObjectForInAppPurchaseRestore(TArray<FInAppPurchaseProductRequest> ConsumableProductFlags,FPlayerController* PlayerController);


// Function  OnlineSubsystemUtils.InAppPurchaseRestoreCallbackProxy2.CreateProxyObjectForInAppPurchaseRestore
// Offset::0x29481D0;
FInAppPurchaseRestoreCallbackProxy2* FInAppPurchaseRestoreCallbackProxy2::CreateProxyObjectForInAppPurchaseRestore(TArray<FInAppPurchaseProductRequest2> ConsumableProductFlags,FPlayerController* PlayerController);


// Function  OnlineSubsystemUtils.JoinSessionCallbackProxy.JoinSession
// Offset::0x29487A0;
FJoinSessionCallbackProxy* FJoinSessionCallbackProxy::JoinSession(FObject* WorldContextObject,FPlayerController* PlayerController,FBlueprintSessionResult SearchResult);


// Function  OnlineSubsystemUtils.LeaderboardBlueprintLibrary.WriteLeaderboardInteger
// Offset::0x2948C40;
bool FLeaderboardBlueprintLibrary::WriteLeaderboardInteger(FPlayerController* PlayerController,FName StatName,int32_t StatValue);


// Function  OnlineSubsystemUtils.LeaderboardFlushCallbackProxy.CreateProxyObjectForFlush
// Offset::0x2949020;
FLeaderboardFlushCallbackProxy* FLeaderboardFlushCallbackProxy::CreateProxyObjectForFlush(FPlayerController* PlayerController,FName SessionName);


// Function  OnlineSubsystemUtils.LeaderboardQueryCallbackProxy.CreateProxyObjectForIntQuery
// Offset::0x29493B0;
FLeaderboardQueryCallbackProxy* FLeaderboardQueryCallbackProxy::CreateProxyObjectForIntQuery(FPlayerController* PlayerController,FName StatName);


// Function  OnlineSubsystemUtils.LogoutCallbackProxy.Logout
// Offset::0x2949740;
FLogoutCallbackProxy* FLogoutCallbackProxy::Logout(FObject* WorldContextObject,FPlayerController* PlayerController);


// Function  OnlineSubsystemUtils.OnlineBeaconClient.ClientOnConnected
// Offset::0x1BB4100;
void FOnlineBeaconClient::ClientOnConnected();


// Function  OnlineSubsystemUtils.PartyBeaconClient.ClientCancelReservationResponse
// Offset::0x294B460;
void FPartyBeaconClient::ClientCancelReservationResponse(enum class EPartyReservationResult ReservationResponse);


// Function  OnlineSubsystemUtils.PartyBeaconClient.ClientReservationResponse
// Offset::0x294B500;
void FPartyBeaconClient::ClientReservationResponse(enum class EPartyReservationResult ReservationResponse);


// Function  OnlineSubsystemUtils.PartyBeaconClient.ClientSendReservationFull
// Offset::0x1B80CF0;
void FPartyBeaconClient::ClientSendReservationFull();


// Function  OnlineSubsystemUtils.PartyBeaconClient.ClientSendReservationUpdates
// Offset::0x294B3C0;
void FPartyBeaconClient::ClientSendReservationUpdates(int32_t NumRemainingReservations);


// Function  OnlineSubsystemUtils.PartyBeaconClient.ServerAddOrUpdateReservationRequest
// Offset::0x294AC10;
void FPartyBeaconClient::ServerAddOrUpdateReservationRequest(FString SessionId,FPartyReservation Reservation);


// Function  OnlineSubsystemUtils.PartyBeaconClient.ServerCancelReservationRequest
// Offset::0x294A870;
void FPartyBeaconClient::ServerCancelReservationRequest(FUniqueNetIdRepl PartyLeader);


// Function  OnlineSubsystemUtils.PartyBeaconClient.ServerRemoveMemberFromReservationRequest
// Offset::0x294A980;
void FPartyBeaconClient::ServerRemoveMemberFromReservationRequest(FString SessionId,FPartyReservation ReservationUpdate);


// Function  OnlineSubsystemUtils.PartyBeaconClient.ServerReservationRequest
// Offset::0x294B130;
void FPartyBeaconClient::ServerReservationRequest(FString SessionId,FPartyReservation Reservation);


// Function  OnlineSubsystemUtils.PartyBeaconClient.ServerUpdateReservationRequest
// Offset::0x294AEA0;
void FPartyBeaconClient::ServerUpdateReservationRequest(FString SessionId,FPartyReservation ReservationUpdate);


// Function  OnlineSubsystemUtils.QuitMatchCallbackProxy.QuitMatch
// Offset::0x294DFF0;
FQuitMatchCallbackProxy* FQuitMatchCallbackProxy::QuitMatch(FObject* WorldContextObject,FPlayerController* PlayerController,FString MatchId,enum class EMPMatchOutcome Outcome,int32_t TurnTimeoutInSeconds);


// Function  OnlineSubsystemUtils.ShowLoginUICallbackProxy.ShowExternalLoginUI
// Offset::0x294E4B0;
FShowLoginUICallbackProxy* FShowLoginUICallbackProxy::ShowExternalLoginUI(FObject* WorldContextObject,FPlayerController* InPlayerController);


// Function  OnlineSubsystemUtils.SpectatorBeaconClient.ClientCancelReservationResponse
// Offset::0x294FBD0;
void FSpectatorBeaconClient::ClientCancelReservationResponse(enum class ESpectatorReservationResult ReservationResponse);


// Function  OnlineSubsystemUtils.SpectatorBeaconClient.ClientReservationResponse
// Offset::0x294FC70;
void FSpectatorBeaconClient::ClientReservationResponse(enum class ESpectatorReservationResult ReservationResponse);


// Function  OnlineSubsystemUtils.SpectatorBeaconClient.ClientSendReservationFull
// Offset::0x1BBB1D0;
void FSpectatorBeaconClient::ClientSendReservationFull();


// Function  OnlineSubsystemUtils.SpectatorBeaconClient.ClientSendReservationUpdates
// Offset::0x294FB30;
void FSpectatorBeaconClient::ClientSendReservationUpdates(int32_t NumRemainingReservations);


// Function  OnlineSubsystemUtils.SpectatorBeaconClient.ServerCancelReservationRequest
// Offset::0x294A870;
void FSpectatorBeaconClient::ServerCancelReservationRequest(FUniqueNetIdRepl Spectator);


// Function  OnlineSubsystemUtils.SpectatorBeaconClient.ServerReservationRequest
// Offset::0x294F920;
void FSpectatorBeaconClient::ServerReservationRequest(FString SessionId,FSpectatorReservation Reservation);


// Function  OnlineSubsystemUtils.TestBeaconClient.ClientPing
// Offset::0x29515D0;
void FTestBeaconClient::ClientPing();


// Function  OnlineSubsystemUtils.TestBeaconClient.ServerPong
// Offset::0x2951580;
void FTestBeaconClient::ServerPong();


// Function  OnlineSubsystemUtils.TurnBasedBlueprintLibrary.GetIsMyTurn
// Offset::0x2952350;
void FTurnBasedBlueprintLibrary::GetIsMyTurn(FObject* WorldContextObject,FPlayerController* PlayerController,FString MatchId,bool bIsMyTurn);


// Function  OnlineSubsystemUtils.TurnBasedBlueprintLibrary.GetMyPlayerIndex
// Offset::0x2952170;
void FTurnBasedBlueprintLibrary::GetMyPlayerIndex(FObject* WorldContextObject,FPlayerController* PlayerController,FString MatchId,int32_t PlayerIndex);


// Function  OnlineSubsystemUtils.TurnBasedBlueprintLibrary.GetPlayerDisplayName
// Offset::0x2951DF0;
void FTurnBasedBlueprintLibrary::GetPlayerDisplayName(FObject* WorldContextObject,FPlayerController* PlayerController,FString MatchId,int32_t PlayerIndex,FString PlayerDisplayName);


// Function  OnlineSubsystemUtils.TurnBasedBlueprintLibrary.RegisterTurnBasedMatchInterfaceObject
// Offset::0x2952040;
void FTurnBasedBlueprintLibrary::RegisterTurnBasedMatchInterfaceObject(FObject* WorldContextObject,FPlayerController* PlayerController,FObject* Object);


// Function  OnlineSubsystemUtils.VoipListenerSynthComponent.IsIdling
// Offset::0x2952940;
bool FVoipListenerSynthComponent::IsIdling();


// Function  Qos.QosBeaconClient.ClientQosResponse
// Offset::0x2961FA0;
void FQosBeaconClient::ClientQosResponse(enum class EQosResponseType Response);


// Function  Qos.QosBeaconClient.ServerQosRequest
// Offset::0x2962040;
void FQosBeaconClient::ServerQosRequest(FString InSessionId);


// Function  Lobby.LobbyBeaconClient.ClientAckJoiningServer
// Offset::0x29C4350;
void FLobbyBeaconClient::ClientAckJoiningServer();


// Function  Lobby.LobbyBeaconClient.ClientJoinGame
// Offset::0x29C4760;
void FLobbyBeaconClient::ClientJoinGame();


// Function  Lobby.LobbyBeaconClient.ClientLoginComplete
// Offset::0x29C3ED0;
void FLobbyBeaconClient::ClientLoginComplete(FUniqueNetIdRepl InUniqueId,bool bWasSuccessful);


// Function  Lobby.LobbyBeaconClient.ClientPlayerJoined
// Offset::0x29C3C90;
void FLobbyBeaconClient::ClientPlayerJoined(FText NewPlayerName,FUniqueNetIdRepl InUniqueId);


// Function  Lobby.LobbyBeaconClient.ClientPlayerLeft
// Offset::0x29C3BA0;
void FLobbyBeaconClient::ClientPlayerLeft(FUniqueNetIdRepl InUniqueId);


// Function  Lobby.LobbyBeaconClient.ClientSetInviteFlags
// Offset::0x29C46C0;
void FLobbyBeaconClient::ClientSetInviteFlags(FJoinabilitySettings Settings);


// Function  Lobby.LobbyBeaconClient.ClientWasKicked
// Offset::0x29C3E00;
void FLobbyBeaconClient::ClientWasKicked(FText KickReason);


// Function  Lobby.LobbyBeaconClient.ServerCheat
// Offset::0x29C45F0;
void FLobbyBeaconClient::ServerCheat(FString Msg);


// Function  Lobby.LobbyBeaconClient.ServerDisconnectFromLobby
// Offset::0x29C43C0;
void FLobbyBeaconClient::ServerDisconnectFromLobby();


// Function  Lobby.LobbyBeaconClient.ServerKickPlayer
// Offset::0x29C41C0;
void FLobbyBeaconClient::ServerKickPlayer(FUniqueNetIdRepl PlayerToKick,FText Reason);


// Function  Lobby.LobbyBeaconClient.ServerLoginPlayer
// Offset::0x29C4410;
void FLobbyBeaconClient::ServerLoginPlayer(FString InSessionId,FUniqueNetIdRepl InUniqueId,FString UrlString);


// Function  Lobby.LobbyBeaconClient.ServerNotifyJoiningServer
// Offset::0x29C4370;
void FLobbyBeaconClient::ServerNotifyJoiningServer();


// Function  Lobby.LobbyBeaconClient.ServerSetPartyOwner
// Offset::0x29C4010;
void FLobbyBeaconClient::ServerSetPartyOwner(FUniqueNetIdRepl InUniqueId,FUniqueNetIdRepl InPartyOwnerId);


// Function  Lobby.LobbyBeaconPlayerState.OnRep_InLobby
// Offset::0x29C7760;
void FLobbyBeaconPlayerState::OnRep_InLobby();


// Function  Lobby.LobbyBeaconPlayerState.OnRep_PartyOwner
// Offset::0x29C7780;
void FLobbyBeaconPlayerState::OnRep_PartyOwner();


// Function  Lobby.LobbyBeaconPlayerState.OnRep_UniqueId
// Offset::0x29C77A0;
void FLobbyBeaconPlayerState::OnRep_UniqueId();


// Function  Lobby.LobbyBeaconState.OnRep_LobbyStarted
// Offset::0x29C7F80;
void FLobbyBeaconState::OnRep_LobbyStarted();


// Function  Lobby.LobbyBeaconState.OnRep_WaitForPlayersTimeRemaining
// Offset::0x29C7F60;
void FLobbyBeaconState::OnRep_WaitForPlayersTimeRemaining();


// Function  Hotfix.OnlineHotfixManager.StartHotfixProcess
// Offset::0x29DDC20;
void FOnlineHotfixManager::StartHotfixProcess();


// Function  ReplicationGraph.ReplicationGraphDebugActor.ClientCellInfo
// Offset::0x2AE53F0;
void FReplicationGraphDebugActor::ClientCellInfo(FVector CellLocation,FVector CellExtent,TArray<FActor*> Actors);


// Function  ReplicationGraph.ReplicationGraphDebugActor.ServerCellInfo
// Offset::0x2AE5890;
void FReplicationGraphDebugActor::ServerCellInfo();


// Function  ReplicationGraph.ReplicationGraphDebugActor.ServerPrintAllActorInfo
// Offset::0x2AE57E0;
void FReplicationGraphDebugActor::ServerPrintAllActorInfo(FString Str);


// Function  ReplicationGraph.ReplicationGraphDebugActor.ServerPrintCullDistances
// Offset::0x1A802D0;
void FReplicationGraphDebugActor::ServerPrintCullDistances();


// Function  ReplicationGraph.ReplicationGraphDebugActor.ServerSetConditionalActorBreakpoint
// Offset::0x2AE5560;
void FReplicationGraphDebugActor::ServerSetConditionalActorBreakpoint(FActor* Actor);


// Function  ReplicationGraph.ReplicationGraphDebugActor.ServerSetCullDistanceForClass
// Offset::0x2AE56F0;
void FReplicationGraphDebugActor::ServerSetCullDistanceForClass(FObject* Class,float CullDistance);


// Function  ReplicationGraph.ReplicationGraphDebugActor.ServerSetPeriodFrameForClass
// Offset::0x2AE5600;
void FReplicationGraphDebugActor::ServerSetPeriodFrameForClass(FObject* Class,int32_t PeriodFrame);


// Function  ReplicationGraph.ReplicationGraphDebugActor.ServerStartDebugging
// Offset::0x2AE58D0;
void FReplicationGraphDebugActor::ServerStartDebugging();


// Function  ReplicationGraph.ReplicationGraphDebugActor.ServerStopDebugging
// Offset::0x2AE58B0;
void FReplicationGraphDebugActor::ServerStopDebugging();


// Function  Synthesis.ModularSynthLibrary.AddModularSynthPresetToBankAsset
// Offset::0x2B1DB90;
void FModularSynthLibrary::AddModularSynthPresetToBankAsset(FModularSynthPresetBank* InBank,FModularSynthPreset Preset,FString PresetName);


// Function  Synthesis.ModularSynthComponent.CreatePatch
// Offset::0x2B1E200;
FPatchId FModularSynthComponent::CreatePatch(enum class ESynth1PatchSource PatchSource,TArray<FSynth1PatchCable> PatchCables,bool bEnableByDefault);


// Function  Synthesis.ModularSynthComponent.NoteOff
// Offset::0x2B20AE0;
void FModularSynthComponent::NoteOff(float Note,bool bAllNotesOff,bool bKillAllNotes);


// Function  Synthesis.ModularSynthComponent.NoteOn
// Offset::0x2B20C20;
void FModularSynthComponent::NoteOn(float Note,int32_t Velocity,float Duration);


// Function  Synthesis.ModularSynthComponent.SetAttackTime
// Offset::0x2B1F820;
void FModularSynthComponent::SetAttackTime(float AttackTimeMsec);


// Function  Synthesis.ModularSynthComponent.SetChorusDepth
// Offset::0x2B1E6F0;
void FModularSynthComponent::SetChorusDepth(float Depth);


// Function  Synthesis.ModularSynthComponent.SetChorusEnabled
// Offset::0x2B1E790;
void FModularSynthComponent::SetChorusEnabled(bool EnableChorus);


// Function  Synthesis.ModularSynthComponent.SetChorusFeedback
// Offset::0x2B1E650;
void FModularSynthComponent::SetChorusFeedback(float Feedback);


// Function  Synthesis.ModularSynthComponent.SetChorusFrequency
// Offset::0x2B1E5B0;
void FModularSynthComponent::SetChorusFrequency(float Frequency);


// Function  Synthesis.ModularSynthComponent.SetDecayTime
// Offset::0x2B1F780;
void FModularSynthComponent::SetDecayTime(float DecayTimeMsec);


// Function  Synthesis.ModularSynthComponent.SetEnableLegato
// Offset::0x2B1F020;
void FModularSynthComponent::SetEnableLegato(bool LegatoEnabled);


// Function  Synthesis.ModularSynthComponent.SetEnablePatch
// Offset::0x2B1E110;
bool FModularSynthComponent::SetEnablePatch(FPatchId PatchId,bool bIsEnabled);


// Function  Synthesis.ModularSynthComponent.SetEnablePolyphony
// Offset::0x2B20A40;
void FModularSynthComponent::SetEnablePolyphony(bool bEnablePolyphony);


// Function  Synthesis.ModularSynthComponent.SetEnableRetrigger
// Offset::0x2B1EF80;
void FModularSynthComponent::SetEnableRetrigger(bool RetriggerEnabled);


// Function  Synthesis.ModularSynthComponent.SetEnableUnison
// Offset::0x2B20160;
void FModularSynthComponent::SetEnableUnison(bool EnableUnison);


// Function  Synthesis.ModularSynthComponent.SetFilterAlgorithm
// Offset::0x2B1EBE0;
void FModularSynthComponent::SetFilterAlgorithm(enum class ESynthFilterAlgorithm FilterAlgorithm);


// Function  Synthesis.ModularSynthComponent.SetFilterFrequency
// Offset::0x2B1EEE0;
void FModularSynthComponent::SetFilterFrequency(float FilterFrequencyHz);


// Function  Synthesis.ModularSynthComponent.SetFilterFrequencyMod
// Offset::0x2B1EE40;
void FModularSynthComponent::SetFilterFrequencyMod(float FilterFrequencyHz);


// Function  Synthesis.ModularSynthComponent.SetFilterQ
// Offset::0x2B1EDA0;
void FModularSynthComponent::SetFilterQ(float FilterQ);


// Function  Synthesis.ModularSynthComponent.SetFilterQMod
// Offset::0x2B1ED00;
void FModularSynthComponent::SetFilterQMod(float FilterQ);


// Function  Synthesis.ModularSynthComponent.SetFilterType
// Offset::0x2B1EC70;
void FModularSynthComponent::SetFilterType(enum class ESynthFilterType FilterType);


// Function  Synthesis.ModularSynthComponent.SetGainDb
// Offset::0x2B1F8C0;
void FModularSynthComponent::SetGainDb(float GainDb);


// Function  Synthesis.ModularSynthComponent.SetLFOFrequency
// Offset::0x2B1FEA0;
void FModularSynthComponent::SetLFOFrequency(int32_t LFOIndex,float FrequencyHz);


// Function  Synthesis.ModularSynthComponent.SetLFOFrequencyMod
// Offset::0x2B1FDC0;
void FModularSynthComponent::SetLFOFrequencyMod(int32_t LFOIndex,float FrequencyModHz);


// Function  Synthesis.ModularSynthComponent.SetLFOGain
// Offset::0x2B1FCE0;
void FModularSynthComponent::SetLFOGain(int32_t LFOIndex,float Gain);


// Function  Synthesis.ModularSynthComponent.SetLFOGainMod
// Offset::0x2B1FC00;
void FModularSynthComponent::SetLFOGainMod(int32_t LFOIndex,float GainMod);


// Function  Synthesis.ModularSynthComponent.SetLFOMode
// Offset::0x2B1FA40;
void FModularSynthComponent::SetLFOMode(int32_t LFOIndex,enum class ESynthLFOMode LFOMode);


// Function  Synthesis.ModularSynthComponent.SetLFOPatch
// Offset::0x2B1F960;
void FModularSynthComponent::SetLFOPatch(int32_t LFOIndex,enum class ESynthLFOPatchType LFOPatchType);


// Function  Synthesis.ModularSynthComponent.SetLFOType
// Offset::0x2B1FB20;
void FModularSynthComponent::SetLFOType(int32_t LFOIndex,enum class ESynthLFOType LFOType);


// Function  Synthesis.ModularSynthComponent.SetModEnvAttackTime
// Offset::0x2B1F2A0;
void FModularSynthComponent::SetModEnvAttackTime(float AttackTimeMsec);


// Function  Synthesis.ModularSynthComponent.SetModEnvBiasInvert
// Offset::0x2B1F3E0;
void FModularSynthComponent::SetModEnvBiasInvert(bool bInvert);


// Function  Synthesis.ModularSynthComponent.SetModEnvBiasPatch
// Offset::0x2B1F520;
void FModularSynthComponent::SetModEnvBiasPatch(enum class ESynthModEnvBiasPatch InPatchType);


// Function  Synthesis.ModularSynthComponent.SetModEnvDecayTime
// Offset::0x2B1F200;
void FModularSynthComponent::SetModEnvDecayTime(float DecayTimeMsec);


// Function  Synthesis.ModularSynthComponent.SetModEnvDepth
// Offset::0x2B1F340;
void FModularSynthComponent::SetModEnvDepth(float Depth);


// Function  Synthesis.ModularSynthComponent.SetModEnvInvert
// Offset::0x2B1F480;
void FModularSynthComponent::SetModEnvInvert(bool bInvert);


// Function  Synthesis.ModularSynthComponent.SetModEnvPatch
// Offset::0x2B1F5B0;
void FModularSynthComponent::SetModEnvPatch(enum class ESynthModEnvPatch InPatchType);


// Function  Synthesis.ModularSynthComponent.SetModEnvReleaseTime
// Offset::0x2B1F0C0;
void FModularSynthComponent::SetModEnvReleaseTime(float Release);


// Function  Synthesis.ModularSynthComponent.SetModEnvSustainGain
// Offset::0x2B1F160;
void FModularSynthComponent::SetModEnvSustainGain(float SustainGain);


// Function  Synthesis.ModularSynthComponent.SetOscCents
// Offset::0x2B20420;
void FModularSynthComponent::SetOscCents(int32_t OscIndex,float Cents);


// Function  Synthesis.ModularSynthComponent.SetOscFrequencyMod
// Offset::0x2B207A0;
void FModularSynthComponent::SetOscFrequencyMod(int32_t OscIndex,float OscFreqMod);


// Function  Synthesis.ModularSynthComponent.SetOscGain
// Offset::0x2B20960;
void FModularSynthComponent::SetOscGain(int32_t OscIndex,float OscGain);


// Function  Synthesis.ModularSynthComponent.SetOscGainMod
// Offset::0x2B20880;
void FModularSynthComponent::SetOscGainMod(int32_t OscIndex,float OscGainMod);


// Function  Synthesis.ModularSynthComponent.SetOscOctave
// Offset::0x2B205E0;
void FModularSynthComponent::SetOscOctave(int32_t OscIndex,float Octave);


// Function  Synthesis.ModularSynthComponent.SetOscPulsewidth
// Offset::0x2B20200;
void FModularSynthComponent::SetOscPulsewidth(int32_t OscIndex,float Pulsewidth);


// Function  Synthesis.ModularSynthComponent.SetOscSemitones
// Offset::0x2B20500;
void FModularSynthComponent::SetOscSemitones(int32_t OscIndex,float Semitones);


// Function  Synthesis.ModularSynthComponent.SetOscSync
// Offset::0x2B200C0;
void FModularSynthComponent::SetOscSync(bool bIsSynced);


// Function  Synthesis.ModularSynthComponent.SetOscType
// Offset::0x2B206C0;
void FModularSynthComponent::SetOscType(int32_t OscIndex,enum class ESynth1OscType OscType);


// Function  Synthesis.ModularSynthComponent.SetPan
// Offset::0x2B20020;
void FModularSynthComponent::SetPan(float Pan);


// Function  Synthesis.ModularSynthComponent.SetPitchBend
// Offset::0x2B20380;
void FModularSynthComponent::SetPitchBend(float PitchBend);


// Function  Synthesis.ModularSynthComponent.SetPortamento
// Offset::0x2B202E0;
void FModularSynthComponent::SetPortamento(float Portamento);


// Function  Synthesis.ModularSynthComponent.SetReleaseTime
// Offset::0x2B1F640;
void FModularSynthComponent::SetReleaseTime(float ReleaseTimeMsec);


// Function  Synthesis.ModularSynthComponent.SetSpread
// Offset::0x2B1FF80;
void FModularSynthComponent::SetSpread(float Spread);


// Function  Synthesis.ModularSynthComponent.SetStereoDelayFeedback
// Offset::0x2B1E970;
void FModularSynthComponent::SetStereoDelayFeedback(float DelayFeedback);


// Function  Synthesis.ModularSynthComponent.SetStereoDelayIsEnabled
// Offset::0x2B1EB40;
void FModularSynthComponent::SetStereoDelayIsEnabled(bool StereoDelayEnabled);


// Function  Synthesis.ModularSynthComponent.SetStereoDelayMode
// Offset::0x2B1EAB0;
void FModularSynthComponent::SetStereoDelayMode(enum class ESynthStereoDelayMode StereoDelayMode);


// Function  Synthesis.ModularSynthComponent.SetStereoDelayRatio
// Offset::0x2B1E830;
void FModularSynthComponent::SetStereoDelayRatio(float DelayRatio);


// Function  Synthesis.ModularSynthComponent.SetStereoDelayTime
// Offset::0x2B1EA10;
void FModularSynthComponent::SetStereoDelayTime(float DelayTimeMsec);


// Function  Synthesis.ModularSynthComponent.SetStereoDelayWetlevel
// Offset::0x2B1E8D0;
void FModularSynthComponent::SetStereoDelayWetlevel(float DelayWetlevel);


// Function  Synthesis.ModularSynthComponent.SetSustainGain
// Offset::0x2B1F6E0;
void FModularSynthComponent::SetSustainGain(float SustainGain);


// Function  Synthesis.ModularSynthComponent.SetSynthPreset
// Offset::0x2B1E370;
void FModularSynthComponent::SetSynthPreset(FModularSynthPreset SynthPreset);


// Function  Synthesis.SourceEffectBitCrusherPreset.SetBitModulator
// Offset::0x2B24320;
void FSourceEffectBitCrusherPreset::SetBitModulator(FSoundModulatorBase* Modulator);


// Function  Synthesis.SourceEffectBitCrusherPreset.SetBits
// Offset::0x2B243C0;
void FSourceEffectBitCrusherPreset::SetBits(float Bits);


// Function  Synthesis.SourceEffectBitCrusherPreset.SetModulationSettings
// Offset::0x2B24060;
void FSourceEffectBitCrusherPreset::SetModulationSettings(FSourceEffectBitCrusherSettings ModulationSettings);


// Function  Synthesis.SourceEffectBitCrusherPreset.SetSampleRate
// Offset::0x2B24280;
void FSourceEffectBitCrusherPreset::SetSampleRate(float SampleRate);


// Function  Synthesis.SourceEffectBitCrusherPreset.SetSampleRateModulator
// Offset::0x2B241E0;
void FSourceEffectBitCrusherPreset::SetSampleRateModulator(FSoundModulatorBase* Modulator);


// Function  Synthesis.SourceEffectBitCrusherPreset.SetSettings
// Offset::0x2B24130;
void FSourceEffectBitCrusherPreset::SetSettings(FSourceEffectBitCrusherBaseSettings Settings);


// Function  Synthesis.SourceEffectChorusPreset.SetDepth
// Offset::0x2B25440;
void FSourceEffectChorusPreset::SetDepth(float Depth);


// Function  Synthesis.SourceEffectChorusPreset.SetDepthModulator
// Offset::0x2B253A0;
void FSourceEffectChorusPreset::SetDepthModulator(FSoundModulatorBase* Modulator);


// Function  Synthesis.SourceEffectChorusPreset.SetDry
// Offset::0x2B24F40;
void FSourceEffectChorusPreset::SetDry(float DryAmount);


// Function  Synthesis.SourceEffectChorusPreset.SetDryModulator
// Offset::0x2B24EA0;
void FSourceEffectChorusPreset::SetDryModulator(FSoundModulatorBase* Modulator);


// Function  Synthesis.SourceEffectChorusPreset.SetFeedback
// Offset::0x2B25300;
void FSourceEffectChorusPreset::SetFeedback(float Feedback);


// Function  Synthesis.SourceEffectChorusPreset.SetFeedbackModulator
// Offset::0x2B25260;
void FSourceEffectChorusPreset::SetFeedbackModulator(FSoundModulatorBase* Modulator);


// Function  Synthesis.SourceEffectChorusPreset.SetFrequency
// Offset::0x2B251C0;
void FSourceEffectChorusPreset::SetFrequency(float Frequency);


// Function  Synthesis.SourceEffectChorusPreset.SetFrequencyModulator
// Offset::0x2B25120;
void FSourceEffectChorusPreset::SetFrequencyModulator(FSoundModulatorBase* Modulator);


// Function  Synthesis.SourceEffectChorusPreset.SetModulationSettings
// Offset::0x2B24B70;
void FSourceEffectChorusPreset::SetModulationSettings(FSourceEffectChorusSettings ModulationSettings);


// Function  Synthesis.SourceEffectChorusPreset.SetSettings
// Offset::0x2B24CA0;
void FSourceEffectChorusPreset::SetSettings(FSourceEffectChorusBaseSettings Settings);


// Function  Synthesis.SourceEffectChorusPreset.SetSpread
// Offset::0x2B24E00;
void FSourceEffectChorusPreset::SetSpread(float Spread);


// Function  Synthesis.SourceEffectChorusPreset.SetSpreadModulator
// Offset::0x2B24D60;
void FSourceEffectChorusPreset::SetSpreadModulator(FSoundModulatorBase* Modulator);


// Function  Synthesis.SourceEffectChorusPreset.SetWet
// Offset::0x2B25080;
void FSourceEffectChorusPreset::SetWet(float WetAmount);


// Function  Synthesis.SourceEffectChorusPreset.SetWetModulator
// Offset::0x2B24FE0;
void FSourceEffectChorusPreset::SetWetModulator(FSoundModulatorBase* Modulator);


// Function  Synthesis.SourceEffectDynamicsProcessorPreset.SetSettings
// Offset::0x2B260E0;
void FSourceEffectDynamicsProcessorPreset::SetSettings(FSourceEffectDynamicsProcessorSettings InSettings);


// Function  Synthesis.SourceEffectEnvelopeFollowerPreset.RegisterEnvelopeFollowerListener
// Offset::0x2B267D0;
void FSourceEffectEnvelopeFollowerPreset::RegisterEnvelopeFollowerListener(FEnvelopeFollowerListener* EnvelopeFollowerListener);


// Function  Synthesis.SourceEffectEnvelopeFollowerPreset.SetSettings
// Offset::0x2B26870;
void FSourceEffectEnvelopeFollowerPreset::SetSettings(FSourceEffectEnvelopeFollowerSettings InSettings);


// Function  Synthesis.SourceEffectEnvelopeFollowerPreset.UnregisterEnvelopeFollowerListener
// Offset::0x2B26730;
void FSourceEffectEnvelopeFollowerPreset::UnregisterEnvelopeFollowerListener(FEnvelopeFollowerListener* EnvelopeFollowerListener);


// Function  Synthesis.SourceEffectEQPreset.SetSettings
// Offset::0x2B26E50;
void FSourceEffectEQPreset::SetSettings(FSourceEffectEQSettings InSettings);


// Function  Synthesis.SourceEffectFilterPreset.SetSettings
// Offset::0x2B27470;
void FSourceEffectFilterPreset::SetSettings(FSourceEffectFilterSettings InSettings);


// Function  Synthesis.SourceEffectFoldbackDistortionPreset.SetSettings
// Offset::0x2B278E0;
void FSourceEffectFoldbackDistortionPreset::SetSettings(FSourceEffectFoldbackDistortionSettings InSettings);


// Function  Synthesis.SourceEffectMidSideSpreaderPreset.SetSettings
// Offset::0x2B27D80;
void FSourceEffectMidSideSpreaderPreset::SetSettings(FSourceEffectMidSideSpreaderSettings InSettings);


// Function  Synthesis.SourceEffectMotionFilterPreset.SetSettings
// Offset::0x2B28540;
void FSourceEffectMotionFilterPreset::SetSettings(FSourceEffectMotionFilterSettings InSettings);


// Function  Synthesis.SourceEffectPannerPreset.SetSettings
// Offset::0x2B2B540;
void FSourceEffectPannerPreset::SetSettings(FSourceEffectPannerSettings InSettings);


// Function  Synthesis.SourceEffectPhaserPreset.SetSettings
// Offset::0x2B2B9D0;
void FSourceEffectPhaserPreset::SetSettings(FSourceEffectPhaserSettings InSettings);


// Function  Synthesis.SourceEffectRingModulationPreset.SetSettings
// Offset::0x2B2BEA0;
void FSourceEffectRingModulationPreset::SetSettings(FSourceEffectRingModulationSettings InSettings);


// Function  Synthesis.SourceEffectSimpleDelayPreset.SetSettings
// Offset::0x2B2C310;
void FSourceEffectSimpleDelayPreset::SetSettings(FSourceEffectSimpleDelaySettings InSettings);


// Function  Synthesis.SourceEffectStereoDelayPreset.SetSettings
// Offset::0x2B2C850;
void FSourceEffectStereoDelayPreset::SetSettings(FSourceEffectStereoDelaySettings InSettings);


// Function  Synthesis.SourceEffectWaveShaperPreset.SetSettings
// Offset::0x2B2B540;
void FSourceEffectWaveShaperPreset::SetSettings(FSourceEffectWaveShaperSettings InSettings);


// Function  Synthesis.SubmixEffectConvolutionReverbPreset.SetImpulseResponse
// Offset::0x2B2D190;
void FSubmixEffectConvolutionReverbPreset::SetImpulseResponse(FAudioImpulseResponse* InImpulseResponse);


// Function  Synthesis.SubmixEffectConvolutionReverbPreset.SetSettings
// Offset::0x2B2D230;
void FSubmixEffectConvolutionReverbPreset::SetSettings(FSubmixEffectConvolutionReverbSettings InSettings);


// Function  Synthesis.SubmixEffectDelayStatics.SetDelayLength
// Offset::0x2B2D690;
FSubmixEffectDelaySettings FSubmixEffectDelayStatics::SetDelayLength(FSubmixEffectDelaySettings DelaySettings,float DelayLength);


// Function  Synthesis.SubmixEffectDelayStatics.SetInterpolationTime
// Offset::0x2B2D800;
FSubmixEffectDelaySettings FSubmixEffectDelayStatics::SetInterpolationTime(FSubmixEffectDelaySettings DelaySettings,float InterpolationTime);


// Function  Synthesis.SubmixEffectDelayStatics.SetMaximumDelayLength
// Offset::0x2B2D940;
FSubmixEffectDelaySettings FSubmixEffectDelayStatics::SetMaximumDelayLength(FSubmixEffectDelaySettings DelaySettings,float MaximumDelayLength);


// Function  Synthesis.SubmixEffectDelayPreset.GetMaxDelayInMilliseconds
// Offset::0x2B2DF80;
float FSubmixEffectDelayPreset::GetMaxDelayInMilliseconds();


// Function  Synthesis.SubmixEffectDelayPreset.SetDefaultSettings
// Offset::0x2B2DFB0;
void FSubmixEffectDelayPreset::SetDefaultSettings(FSubmixEffectDelaySettings InSettings);


// Function  Synthesis.SubmixEffectDelayPreset.SetDelay
// Offset::0x2B2DE40;
void FSubmixEffectDelayPreset::SetDelay(float Length);


// Function  Synthesis.SubmixEffectDelayPreset.SetInterpolationTime
// Offset::0x2B2DEE0;
void FSubmixEffectDelayPreset::SetInterpolationTime(float Time);


// Function  Synthesis.SubmixEffectDelayPreset.SetSettings
// Offset::0x2B2E060;
void FSubmixEffectDelayPreset::SetSettings(FSubmixEffectDelaySettings InSettings);


// Function  Synthesis.SubmixEffectFilterPreset.SetFilterAlgorithm
// Offset::0x2B2EA00;
void FSubmixEffectFilterPreset::SetFilterAlgorithm(enum class ESubmixFilterAlgorithm InAlgorithm);


// Function  Synthesis.SubmixEffectFilterPreset.SetFilterCutoffFrequency
// Offset::0x2B2E960;
void FSubmixEffectFilterPreset::SetFilterCutoffFrequency(float InFrequency);


// Function  Synthesis.SubmixEffectFilterPreset.SetFilterCutoffFrequencyMod
// Offset::0x2B2E8C0;
void FSubmixEffectFilterPreset::SetFilterCutoffFrequencyMod(float InFrequency);


// Function  Synthesis.SubmixEffectFilterPreset.SetFilterQ
// Offset::0x2B2E820;
void FSubmixEffectFilterPreset::SetFilterQ(float InQ);


// Function  Synthesis.SubmixEffectFilterPreset.SetFilterQMod
// Offset::0x2B2E780;
void FSubmixEffectFilterPreset::SetFilterQMod(float InQ);


// Function  Synthesis.SubmixEffectFilterPreset.SetFilterType
// Offset::0x2B2EA90;
void FSubmixEffectFilterPreset::SetFilterType(enum class ESubmixFilterType InType);


// Function  Synthesis.SubmixEffectFilterPreset.SetSettings
// Offset::0x2B2EB20;
void FSubmixEffectFilterPreset::SetSettings(FSubmixEffectFilterSettings InSettings);


// Function  Synthesis.SubmixEffectFlexiverbPreset.SetSettings
// Offset::0x2B2F270;
void FSubmixEffectFlexiverbPreset::SetSettings(FSubmixEffectFlexiverbSettings InSettings);


// Function  Synthesis.SubmixEffectMultibandCompressorPreset.ResetKey
// Offset::0x2B2F990;
void FSubmixEffectMultibandCompressorPreset::ResetKey();


// Function  Synthesis.SubmixEffectMultibandCompressorPreset.SetAudioBus
// Offset::0x2B2F8F0;
void FSubmixEffectMultibandCompressorPreset::SetAudioBus(FAudioBus* AudioBus);


// Function  Synthesis.SubmixEffectMultibandCompressorPreset.SetExternalSubmix
// Offset::0x2B2F850;
void FSubmixEffectMultibandCompressorPreset::SetExternalSubmix(FSoundSubmix* Submix);


// Function  Synthesis.SubmixEffectMultibandCompressorPreset.SetSettings
// Offset::0x2B2F770;
void FSubmixEffectMultibandCompressorPreset::SetSettings(FSubmixEffectMultibandCompressorSettings InSettings);


// Function  Synthesis.SubmixEffectStereoDelayPreset.SetSettings
// Offset::0x2B2C850;
void FSubmixEffectStereoDelayPreset::SetSettings(FSubmixEffectStereoDelaySettings InSettings);


// Function  Synthesis.SubmixEffectTapDelayPreset.AddTap
// Offset::0x2B32440;
void FSubmixEffectTapDelayPreset::AddTap(int32_t TapId);


// Function  Synthesis.SubmixEffectTapDelayPreset.GetMaxDelayInMilliseconds
// Offset::0x2B320E0;
float FSubmixEffectTapDelayPreset::GetMaxDelayInMilliseconds();


// Function  Synthesis.SubmixEffectTapDelayPreset.GetTap
// Offset::0x2B321C0;
void FSubmixEffectTapDelayPreset::GetTap(int32_t TapId,FTapDelayInfo TapInfo);


// Function  Synthesis.SubmixEffectTapDelayPreset.GetTapIds
// Offset::0x2B32110;
void FSubmixEffectTapDelayPreset::GetTapIds(TArray<int32_t> TapIds);


// Function  Synthesis.SubmixEffectTapDelayPreset.RemoveTap
// Offset::0x2B323A0;
void FSubmixEffectTapDelayPreset::RemoveTap(int32_t TapId);


// Function  Synthesis.SubmixEffectTapDelayPreset.SetInterpolationTime
// Offset::0x2B32040;
void FSubmixEffectTapDelayPreset::SetInterpolationTime(float Time);


// Function  Synthesis.SubmixEffectTapDelayPreset.SetSettings
// Offset::0x2B324F0;
void FSubmixEffectTapDelayPreset::SetSettings(FSubmixEffectTapDelaySettings InSettings);


// Function  Synthesis.SubmixEffectTapDelayPreset.SetTap
// Offset::0x2B322B0;
void FSubmixEffectTapDelayPreset::SetTap(int32_t TapId,FTapDelayInfo TapInfo);


// Function  Synthesis.Synth2DSlider.GetValue
// Offset::0x2B33070;
FVector2D FSynth2DSlider::GetValue();


// Function  Synthesis.Synth2DSlider.SetIndentHandle
// Offset::0x2B32F30;
void FSynth2DSlider::SetIndentHandle(bool InValue);


// Function  Synthesis.Synth2DSlider.SetLocked
// Offset::0x2B32E90;
void FSynth2DSlider::SetLocked(bool InValue);


// Function  Synthesis.Synth2DSlider.SetSliderHandleColor
// Offset::0x2B32D50;
void FSynth2DSlider::SetSliderHandleColor(FLinearColor InValue);


// Function  Synthesis.Synth2DSlider.SetStepSize
// Offset::0x2B32DF0;
void FSynth2DSlider::SetStepSize(float InValue);


// Function  Synthesis.Synth2DSlider.SetValue
// Offset::0x2B32FD0;
void FSynth2DSlider::SetValue(FVector2D InValue);


// Function  Synthesis.GranularSynth.GetCurrentPlayheadTime
// Offset::0x2B337C0;
float FGranularSynth::GetCurrentPlayheadTime();


// Function  Synthesis.GranularSynth.GetSampleDuration
// Offset::0x2B339C0;
float FGranularSynth::GetSampleDuration();


// Function  Synthesis.GranularSynth.IsLoaded
// Offset::0x2B33790;
bool FGranularSynth::IsLoaded();


// Function  Synthesis.GranularSynth.NoteOff
// Offset::0x2B34020;
void FGranularSynth::NoteOff(float Note,bool bKill);


// Function  Synthesis.GranularSynth.NoteOn
// Offset::0x2B34110;
void FGranularSynth::NoteOn(float Note,int32_t Velocity,float Duration);


// Function  Synthesis.GranularSynth.SetAttackTime
// Offset::0x2B34380;
void FGranularSynth::SetAttackTime(float AttackTimeMsec);


// Function  Synthesis.GranularSynth.SetDecayTime
// Offset::0x2B34380;
void FGranularSynth::SetDecayTime(float DecayTimeMsec);


// Function  Synthesis.GranularSynth.SetGrainDuration
// Offset::0x2B339F0;
void FGranularSynth::SetGrainDuration(float BaseDurationMsec,FVector2D DurationRange);


// Function  Synthesis.GranularSynth.SetGrainEnvelopeType
// Offset::0x2B33E50;
void FGranularSynth::SetGrainEnvelopeType(enum class EGranularSynthEnvelopeType EnvelopeType);


// Function  Synthesis.GranularSynth.SetGrainPan
// Offset::0x2B33AE0;
void FGranularSynth::SetGrainPan(float BasePan,FVector2D PanRange);


// Function  Synthesis.GranularSynth.SetGrainPitch
// Offset::0x2B33CC0;
void FGranularSynth::SetGrainPitch(float BasePitch,FVector2D PitchRange);


// Function  Synthesis.GranularSynth.SetGrainProbability
// Offset::0x2B33EE0;
void FGranularSynth::SetGrainProbability(float InGrainProbability);


// Function  Synthesis.GranularSynth.SetGrainsPerSecond
// Offset::0x2B33F80;
void FGranularSynth::SetGrainsPerSecond(float InGrainsPerSecond);


// Function  Synthesis.GranularSynth.SetGrainVolume
// Offset::0x2B33BD0;
void FGranularSynth::SetGrainVolume(float BaseVolume,FVector2D VolumeRange);


// Function  Synthesis.GranularSynth.SetPlaybackSpeed
// Offset::0x2B33DB0;
void FGranularSynth::SetPlaybackSpeed(float InPlayheadRate);


// Function  Synthesis.GranularSynth.SetPlayheadTime
// Offset::0x2B337F0;
void FGranularSynth::SetPlayheadTime(float InPositionSec,float LerpTimeSec,enum class EGranularSynthSeekType SeekType);


// Function  Synthesis.GranularSynth.SetReleaseTimeMsec
// Offset::0x2B34240;
void FGranularSynth::SetReleaseTimeMsec(float ReleaseTimeMsec);


// Function  Synthesis.GranularSynth.SetScrubMode
// Offset::0x2B33920;
void FGranularSynth::SetScrubMode(bool bScrubMode);


// Function  Synthesis.GranularSynth.SetSoundWave
// Offset::0x2B34420;
void FGranularSynth::SetSoundWave(FSoundWave* InSoundWave);


// Function  Synthesis.GranularSynth.SetSustainGain
// Offset::0x2B342E0;
void FGranularSynth::SetSustainGain(float SustainGain);


// Function  Synthesis.SynthComponentMonoWaveTable.GetCurveTangent
// Offset::0x2B353B0;
float FSynthComponentMonoWaveTable::GetCurveTangent(int32_t TableIndex);


// Function  Synthesis.SynthComponentMonoWaveTable.GetKeyFrameValuesForTable
// Offset::0x2B352D0;
TArray<float> FSynthComponentMonoWaveTable::GetKeyFrameValuesForTable(float TableIndex);


// Function  Synthesis.SynthComponentMonoWaveTable.GetMaxTableIndex
// Offset::0x2B35760;
int32_t FSynthComponentMonoWaveTable::GetMaxTableIndex();


// Function  Synthesis.SynthComponentMonoWaveTable.GetNumTableEntries
// Offset::0x2B36E80;
int32_t FSynthComponentMonoWaveTable::GetNumTableEntries();


// Function  Synthesis.SynthComponentMonoWaveTable.NoteOff
// Offset::0x2B36D00;
void FSynthComponentMonoWaveTable::NoteOff(float InMidiNote);


// Function  Synthesis.SynthComponentMonoWaveTable.NoteOn
// Offset::0x2B36DA0;
void FSynthComponentMonoWaveTable::NoteOn(float InMidiNote,float InVelocity);


// Function  Synthesis.SynthComponentMonoWaveTable.RefreshAllWaveTables
// Offset::0x2B36920;
void FSynthComponentMonoWaveTable::RefreshAllWaveTables();


// Function  Synthesis.SynthComponentMonoWaveTable.RefreshWaveTable
// Offset::0x2B36940;
void FSynthComponentMonoWaveTable::RefreshWaveTable(int32_t Index);


// Function  Synthesis.SynthComponentMonoWaveTable.SetAmpEnvelopeAttackTime
// Offset::0x2B36610;
void FSynthComponentMonoWaveTable::SetAmpEnvelopeAttackTime(float InAttackTimeMsec);


// Function  Synthesis.SynthComponentMonoWaveTable.SetAmpEnvelopeBiasDepth
// Offset::0x2B361B0;
void FSynthComponentMonoWaveTable::SetAmpEnvelopeBiasDepth(float InDepth);


// Function  Synthesis.SynthComponentMonoWaveTable.SetAmpEnvelopeBiasInvert
// Offset::0x2B362F0;
void FSynthComponentMonoWaveTable::SetAmpEnvelopeBiasInvert(bool bInBiasInvert);


// Function  Synthesis.SynthComponentMonoWaveTable.SetAmpEnvelopeDecayTime
// Offset::0x2B36570;
void FSynthComponentMonoWaveTable::SetAmpEnvelopeDecayTime(float InDecayTimeMsec);


// Function  Synthesis.SynthComponentMonoWaveTable.SetAmpEnvelopeDepth
// Offset::0x2B36250;
void FSynthComponentMonoWaveTable::SetAmpEnvelopeDepth(float InDepth);


// Function  Synthesis.SynthComponentMonoWaveTable.SetAmpEnvelopeInvert
// Offset::0x2B36390;
void FSynthComponentMonoWaveTable::SetAmpEnvelopeInvert(bool bInInvert);


// Function  Synthesis.SynthComponentMonoWaveTable.SetAmpEnvelopeReleaseTime
// Offset::0x2B36430;
void FSynthComponentMonoWaveTable::SetAmpEnvelopeReleaseTime(float InReleaseTimeMsec);


// Function  Synthesis.SynthComponentMonoWaveTable.SetAmpEnvelopeSustainGain
// Offset::0x2B364D0;
void FSynthComponentMonoWaveTable::SetAmpEnvelopeSustainGain(float InSustainGain);


// Function  Synthesis.SynthComponentMonoWaveTable.SetCurveInterpolationType
// Offset::0x2B35540;
bool FSynthComponentMonoWaveTable::SetCurveInterpolationType(enum class CurveInterpolationType InterpolationType,int32_t TableIndex);


// Function  Synthesis.SynthComponentMonoWaveTable.SetCurveTangent
// Offset::0x2B35450;
bool FSynthComponentMonoWaveTable::SetCurveTangent(int32_t TableIndex,float InNewTangent);


// Function  Synthesis.SynthComponentMonoWaveTable.SetCurveValue
// Offset::0x2B35630;
bool FSynthComponentMonoWaveTable::SetCurveValue(int32_t TableIndex,int32_t KeyframeIndex,float NewValue);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFilterEnvelopeAttackTime
// Offset::0x2B36110;
void FSynthComponentMonoWaveTable::SetFilterEnvelopeAttackTime(float InAttackTimeMsec);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFilterEnvelopeBiasDepth
// Offset::0x2B35CB0;
void FSynthComponentMonoWaveTable::SetFilterEnvelopeBiasDepth(float InDepth);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFilterEnvelopeBiasInvert
// Offset::0x2B35DF0;
void FSynthComponentMonoWaveTable::SetFilterEnvelopeBiasInvert(bool bInBiasInvert);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFilterEnvelopeDepth
// Offset::0x2B35D50;
void FSynthComponentMonoWaveTable::SetFilterEnvelopeDepth(float InDepth);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFilterEnvelopeInvert
// Offset::0x2B35E90;
void FSynthComponentMonoWaveTable::SetFilterEnvelopeInvert(bool bInInvert);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFilterEnvelopenDecayTime
// Offset::0x2B36070;
void FSynthComponentMonoWaveTable::SetFilterEnvelopenDecayTime(float InDecayTimeMsec);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFilterEnvelopeReleaseTime
// Offset::0x2B35F30;
void FSynthComponentMonoWaveTable::SetFilterEnvelopeReleaseTime(float InReleaseTimeMsec);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFilterEnvelopeSustainGain
// Offset::0x2B35FD0;
void FSynthComponentMonoWaveTable::SetFilterEnvelopeSustainGain(float InSustainGain);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFrequency
// Offset::0x2B36BC0;
void FSynthComponentMonoWaveTable::SetFrequency(float FrequencyHz);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFrequencyPitchBend
// Offset::0x2B36B20;
void FSynthComponentMonoWaveTable::SetFrequencyPitchBend(float FrequencyOffsetCents);


// Function  Synthesis.SynthComponentMonoWaveTable.SetFrequencyWithMidiNote
// Offset::0x2B36A80;
void FSynthComponentMonoWaveTable::SetFrequencyWithMidiNote(float InMidiNote);


// Function  Synthesis.SynthComponentMonoWaveTable.SetLowPassFilterResonance
// Offset::0x2B366B0;
void FSynthComponentMonoWaveTable::SetLowPassFilterResonance(float InNewQ);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPositionEnvelopeAttackTime
// Offset::0x2B35C10;
void FSynthComponentMonoWaveTable::SetPositionEnvelopeAttackTime(float InAttackTimeMsec);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPositionEnvelopeBiasDepth
// Offset::0x2B357B0;
void FSynthComponentMonoWaveTable::SetPositionEnvelopeBiasDepth(float InDepth);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPositionEnvelopeBiasInvert
// Offset::0x2B358F0;
void FSynthComponentMonoWaveTable::SetPositionEnvelopeBiasInvert(bool bInBiasInvert);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPositionEnvelopeDecayTime
// Offset::0x2B35B70;
void FSynthComponentMonoWaveTable::SetPositionEnvelopeDecayTime(float InDecayTimeMsec);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPositionEnvelopeDepth
// Offset::0x2B35850;
void FSynthComponentMonoWaveTable::SetPositionEnvelopeDepth(float InDepth);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPositionEnvelopeInvert
// Offset::0x2B35990;
void FSynthComponentMonoWaveTable::SetPositionEnvelopeInvert(bool bInInvert);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPositionEnvelopeReleaseTime
// Offset::0x2B35A30;
void FSynthComponentMonoWaveTable::SetPositionEnvelopeReleaseTime(float InReleaseTimeMsec);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPositionEnvelopeSustainGain
// Offset::0x2B35AD0;
void FSynthComponentMonoWaveTable::SetPositionEnvelopeSustainGain(float InSustainGain);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPosLfoDepth
// Offset::0x2B367E0;
void FSynthComponentMonoWaveTable::SetPosLfoDepth(float InLfoDepth);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPosLfoFrequency
// Offset::0x2B36880;
void FSynthComponentMonoWaveTable::SetPosLfoFrequency(float InLfoFrequency);


// Function  Synthesis.SynthComponentMonoWaveTable.SetPosLfoType
// Offset::0x2B36750;
void FSynthComponentMonoWaveTable::SetPosLfoType(enum class ESynthLFOType InLfoType);


// Function  Synthesis.SynthComponentMonoWaveTable.SetSustainPedalState
// Offset::0x2B36C60;
void FSynthComponentMonoWaveTable::SetSustainPedalState(bool InSustainPedalState);


// Function  Synthesis.SynthComponentMonoWaveTable.SetWaveTablePosition
// Offset::0x2B369E0;
void FSynthComponentMonoWaveTable::SetWaveTablePosition(float InPosition);


// Function  Synthesis.SynthComponentToneGenerator.SetFrequency
// Offset::0x2B393F0;
void FSynthComponentToneGenerator::SetFrequency(float InFrequency);


// Function  Synthesis.SynthComponentToneGenerator.SetVolume
// Offset::0x2B39350;
void FSynthComponentToneGenerator::SetVolume(float InVolume);


// Function  Synthesis.SynthSamplePlayer.GetCurrentPlaybackProgressPercent
// Offset::0x2B398D0;
float FSynthSamplePlayer::GetCurrentPlaybackProgressPercent();


// Function  Synthesis.SynthSamplePlayer.GetCurrentPlaybackProgressTime
// Offset::0x2B39900;
float FSynthSamplePlayer::GetCurrentPlaybackProgressTime();


// Function  Synthesis.SynthSamplePlayer.GetSampleDuration
// Offset::0x2B39930;
float FSynthSamplePlayer::GetSampleDuration();


// Function  Synthesis.SynthSamplePlayer.IsLoaded
// Offset::0x2B398A0;
bool FSynthSamplePlayer::IsLoaded();


// Function  Synthesis.SynthSamplePlayer.SeekToTime
// Offset::0x2B39AA0;
void FSynthSamplePlayer::SeekToTime(float TimeSec,enum class ESamplePlayerSeekType SeekType,bool bWrap);


// Function  Synthesis.SynthSamplePlayer.SetPitch
// Offset::0x2B39BD0;
void FSynthSamplePlayer::SetPitch(float InPitch,float TimeSec);


// Function  Synthesis.SynthSamplePlayer.SetScrubMode
// Offset::0x2B39A00;
void FSynthSamplePlayer::SetScrubMode(bool bScrubMode);


// Function  Synthesis.SynthSamplePlayer.SetScrubTimeWidth
// Offset::0x2B39960;
void FSynthSamplePlayer::SetScrubTimeWidth(float InScrubTimeWidthSec);


// Function  Synthesis.SynthSamplePlayer.SetSoundWave
// Offset::0x2B39CB0;
void FSynthSamplePlayer::SetSoundWave(FSoundWave* InSoundWave);


// Function  Synthesis.SynthesisUtilitiesBlueprintFunctionLibrary.GetLinearFrequency
// Offset::0x2B3A4F0;
float FSynthesisUtilitiesBlueprintFunctionLibrary::GetLinearFrequency(float InLogFrequencyValue,float InDomainMin,float InDomainMax,float InRangeMin,float InRangeMax);


// Function  Synthesis.SynthesisUtilitiesBlueprintFunctionLibrary.GetLogFrequency
// Offset::0x2B3A6C0;
float FSynthesisUtilitiesBlueprintFunctionLibrary::GetLogFrequency(float InLinearValue,float InDomainMin,float InDomainMax,float InRangeMin,float InRangeMax);


// Function  Synthesis.SynthKnob.GetValue
// Offset::0x2B3AD70;
float FSynthKnob::GetValue();


// Function  Synthesis.SynthKnob.SetLocked
// Offset::0x2B3AC30;
void FSynthKnob::SetLocked(bool InValue);


// Function  Synthesis.SynthKnob.SetStepSize
// Offset::0x2B3AB90;
void FSynthKnob::SetStepSize(float InValue);


// Function  Synthesis.SynthKnob.SetValue
// Offset::0x2B3ACD0;
void FSynthKnob::SetValue(float InValue);


// Function  AudioSynesthesia.ConstantQNRT.GetChannelConstantQAtTime
// Offset::0x2B4D740;
void FConstantQNRT::GetChannelConstantQAtTime(float InSeconds,int32_t InChannel,TArray<float> OutConstantQ);


// Function  AudioSynesthesia.ConstantQNRT.GetNormalizedChannelConstantQAtTime
// Offset::0x2B4D5F0;
void FConstantQNRT::GetNormalizedChannelConstantQAtTime(float InSeconds,int32_t InChannel,TArray<float> OutConstantQ);


// Function  AudioAnalyzer.AudioAnalyzer.StartAnalyzing
// Offset::0x6AD9C60;
void FAudioAnalyzer::StartAnalyzing(FObject* WorldContextObject,FAudioBus* AudioBusToAnalyze);


// Function  AudioAnalyzer.AudioAnalyzer.StopAnalyzing
// Offset::0x6AD9BC0;
void FAudioAnalyzer::StopAnalyzing(FObject* WorldContextObject);


// Function  AudioSynesthesia.LoudnessNRT.GetChannelLoudnessAtTime
// Offset::0x2B4E240;
void FLoudnessNRT::GetChannelLoudnessAtTime(float InSeconds,int32_t InChannel,float OutLoudness);


// Function  AudioSynesthesia.LoudnessNRT.GetLoudnessAtTime
// Offset::0x2B4E380;
void FLoudnessNRT::GetLoudnessAtTime(float InSeconds,float OutLoudness);


// Function  AudioSynesthesia.LoudnessNRT.GetNormalizedChannelLoudnessAtTime
// Offset::0x2B4E010;
void FLoudnessNRT::GetNormalizedChannelLoudnessAtTime(float InSeconds,int32_t InChannel,float OutLoudness);


// Function  AudioSynesthesia.LoudnessNRT.GetNormalizedLoudnessAtTime
// Offset::0x2B4E150;
void FLoudnessNRT::GetNormalizedLoudnessAtTime(float InSeconds,float OutLoudness);


// Function  AudioSynesthesia.OnsetNRT.GetChannelOnsetsBetweenTimes
// Offset::0x2B4EE70;
void FOnsetNRT::GetChannelOnsetsBetweenTimes(float InStartSeconds,float InEndSeconds,int32_t InChannel,TArray<float> OutOnsetTimestamps,TArray<float> OutOnsetStrengths);


// Function  AudioSynesthesia.OnsetNRT.GetNormalizedChannelOnsetsBetweenTimes
// Offset::0x2B4EC60;
void FOnsetNRT::GetNormalizedChannelOnsetsBetweenTimes(float InStartSeconds,float InEndSeconds,int32_t InChannel,TArray<float> OutOnsetTimestamps,TArray<float> OutOnsetStrengths);


// Function  SMSystem.SMEditorGraphNodeInterface.GetAllEditorGraphProperties
// Offset::0x2B95510;
TArray<TScriptInterface<ISMEditorGraphPropertyNodeInterface>> FSMEditorGraphNodeInterface::GetAllEditorGraphProperties(FSMNodeInstance* NodeInstance);


// Function  SMSystem.SMEditorGraphNodeInterface.GetEditorGraphProperty
// Offset::0x2B95760;
TScriptInterface<ISMEditorGraphPropertyNodeInterface> FSMEditorGraphNodeInterface::GetEditorGraphProperty(FName PropertyName,FSMNodeInstance* NodeInstance,int32_t ArrayIndex);


// Function  SMSystem.SMEditorGraphNodeInterface.GetEditorGraphPropertyAsArray
// Offset::0x2B955F0;
TArray<TScriptInterface<ISMEditorGraphPropertyNodeInterface>> FSMEditorGraphNodeInterface::GetEditorGraphPropertyAsArray(FName PropertyName,FSMNodeInstance* NodeInstance,int32_t ArrayIndex);


// Function  SMSystem.SMEditorGraphPropertyNodeInterface.ResetProperty
// Offset::0x2B95D40;
void FSMEditorGraphPropertyNodeInterface::ResetProperty();


// Function  SMSystem.SMEditorGraphPropertyNodeInterface.SetHighlight
// Offset::0x2B96080;
void FSMEditorGraphPropertyNodeInterface::SetHighlight(bool bEnable,FLinearColor Color,bool bClearOnCompile);


// Function  SMSystem.SMEditorGraphPropertyNodeInterface.SetNotification
// Offset::0x2B95EF0;
void FSMEditorGraphPropertyNodeInterface::SetNotification(bool bEnable,enum class ESMLogType Severity,FString Message,bool bClearOnCompile);


// Function  SMSystem.SMEditorGraphPropertyNodeInterface.SetNotificationAndHighlight
// Offset::0x2B95D60;
void FSMEditorGraphPropertyNodeInterface::SetNotificationAndHighlight(bool bEnable,enum class ESMLogType Severity,FString Message,bool bClearOnCompile);


// Function  SMSystem.SMStateMachineNetworkedInterface.HasAuthority
// Offset::0x2B96770;
bool FSMStateMachineNetworkedInterface::HasAuthority();


// Function  SMSystem.SMStateMachineNetworkedInterface.IsConfiguredForNetworking
// Offset::0x2B967A0;
bool FSMStateMachineNetworkedInterface::IsConfiguredForNetworking();


// Function  SMSystem.SMStateMachineNetworkedInterface.IsSimulatedProxy
// Offset::0x2B96740;
bool FSMStateMachineNetworkedInterface::IsSimulatedProxy();


// Function  SMSystem.SMNodeInstance.ConstructionScript
// Offset::0x179F4C0;
void FSMNodeInstance::ConstructionScript();


// Function  SMSystem.SMNodeInstance.EvaluateGraphProperties
// Offset::0x2BA4A00;
void FSMNodeInstance::EvaluateGraphProperties(bool bTargetOnly);


// Function  SMSystem.SMNodeInstance.GetContext
// Offset::0x2BA4D80;
FObject* FSMNodeInstance::GetContext();


// Function  SMSystem.SMNodeInstance.GetGuid
// Offset::0x2BA4B60;
FGuid FSMNodeInstance::GetGuid();


// Function  SMSystem.SMNodeInstance.GetInputComponent
// Offset::0x2BA42B0;
FInputComponent* FSMNodeInstance::GetInputComponent();


// Function  SMSystem.SMNodeInstance.GetNetworkInterface
// Offset::0x2BA4C60;
TScriptInterface<ISMStateMachineNetworkedInterface> FSMNodeInstance::GetNetworkInterface();


// Function  SMSystem.SMNodeInstance.GetNodeDescriptionText
// Offset::0x2BA4750;
FText FSMNodeInstance::GetNodeDescriptionText();


// Function  SMSystem.SMNodeInstance.GetNodeIcon
// Offset::0x26D2340;
FTexture2D* FSMNodeInstance::GetNodeIcon();


// Function  SMSystem.SMNodeInstance.GetNodeIconSize
// Offset::0x2BA4B00;
FVector2D FSMNodeInstance::GetNodeIconSize();


// Function  SMSystem.SMNodeInstance.GetNodeIconTintColor
// Offset::0x2BA4AA0;
FLinearColor FSMNodeInstance::GetNodeIconTintColor();


// Function  SMSystem.SMNodeInstance.GetNodeName
// Offset::0x2BA4B90;
FString FSMNodeInstance::GetNodeName();


// Function  SMSystem.SMNodeInstance.GetNodePosition
// Offset::0x2BA49D0;
FVector2D FSMNodeInstance::GetNodePosition();


// Function  SMSystem.SMNodeInstance.GetOwningEditorGraphNode
// Offset::0x2BA44D0;
TScriptInterface<ISMEditorGraphNodeInterface> FSMNodeInstance::GetOwningEditorGraphNode();


// Function  SMSystem.SMNodeInstance.GetOwningStateMachineNodeInstance
// Offset::0x2BA4CB0;
FSMStateMachineInstance* FSMNodeInstance::GetOwningStateMachineNodeInstance();


// Function  SMSystem.SMNodeInstance.GetStateMachineInstance
// Offset::0x2BA4CE0;
FSMInstance* FSMNodeInstance::GetStateMachineInstance(bool bTopMostInstance);


// Function  SMSystem.SMNodeInstance.GetTimeInState
// Offset::0x2BA4C30;
float FSMNodeInstance::GetTimeInState();


// Function  SMSystem.SMNodeInstance.HasUpdated
// Offset::0x26D9BA0;
bool FSMNodeInstance::HasUpdated();


// Function  SMSystem.SMNodeInstance.IsActive
// Offset::0x2BA4C00;
bool FSMNodeInstance::IsActive();


// Function  SMSystem.SMNodeInstance.IsEditorExecution
// Offset::0x243E320;
bool FSMNodeInstance::IsEditorExecution();


// Function  SMSystem.SMNodeInstance.IsInEndState
// Offset::0x26F8BD0;
bool FSMNodeInstance::IsInEndState();


// Function  SMSystem.SMNodeInstance.IsInitialized
// Offset::0x2BA49A0;
bool FSMNodeInstance::IsInitialized();


// Function  SMSystem.SMNodeInstance.IsInitializedAndReadyForInputEvents
// Offset::0x2BA4970;
bool FSMNodeInstance::IsInitializedAndReadyForInputEvents();


// Function  SMSystem.SMNodeInstance.K2_TryGetOwningEditorGraphNode
// Offset::0x2BA43D0;
void FSMNodeInstance::K2_TryGetOwningEditorGraphNode(TScriptInterface<ISMEditorGraphNodeInterface> EditorNode,enum class ESMValidEditorNode IsValidNode);


// Function  SMSystem.SMNodeInstance.OnContextPawnControllerChanged
// Offset::0x2BA42D0;
void FSMNodeInstance::OnContextPawnControllerChanged(FPawn* Pawn,FController* NewController);


// Function  SMSystem.SMNodeInstance.OnPreCompileValidate
// Offset::0x2093E60;
void FSMNodeInstance::OnPreCompileValidate(FSMCompilerLog* CompilerLog);


// Function  SMSystem.SMNodeInstance.OnRootStateMachineStart
// Offset::0x179D370;
void FSMNodeInstance::OnRootStateMachineStart();


// Function  SMSystem.SMNodeInstance.OnRootStateMachineStop
// Offset::0x179DDF0;
void FSMNodeInstance::OnRootStateMachineStop();


// Function  SMSystem.SMNodeInstance.ResetVariables
// Offset::0x2BA43B0;
void FSMNodeInstance::ResetVariables();


// Function  SMSystem.SMNodeInstance.SetDisplayName
// Offset::0x2BA48D0;
void FSMNodeInstance::SetDisplayName(FName NewDisplayName);


// Function  SMSystem.SMNodeInstance.SetNodeColor
// Offset::0x2BA46B0;
void FSMNodeInstance::SetNodeColor(FLinearColor NewColor);


// Function  SMSystem.SMNodeInstance.SetNodeDescriptionText
// Offset::0x2BA47E0;
void FSMNodeInstance::SetNodeDescriptionText(FText NewDescription);


// Function  SMSystem.SMNodeInstance.SetUseCustomColor
// Offset::0x22AE960;
void FSMNodeInstance::SetUseCustomColor(bool bValue);


// Function  SMSystem.SMNodeInstance.SetUseCustomIcon
// Offset::0x22AE960;
void FSMNodeInstance::SetUseCustomIcon(bool bValue);


// Function  SMSystem.SMNodeInstance.SetVariableHidden
// Offset::0x2BA45C0;
void FSMNodeInstance::SetVariableHidden(FName VariableName,bool bSetHidden);


// Function  SMSystem.SMNodeInstance.SetVariableReadOnly
// Offset::0x2BA45C0;
void FSMNodeInstance::SetVariableReadOnly(FName VariableName,bool bSetIsReadOnly);


// Function  SMSystem.SMNodeInstance.WithExecutionEnvironment
// Offset::0x2BA4520;
void FSMNodeInstance::WithExecutionEnvironment(enum class ESMExecutionEnvironment ExecutionEnvironment);


// Function  SMSystem.SMStateInstance_Base.AreAllIncomingTransitionsFromAnAnyState
// Offset::0x2BA9A80;
bool FSMStateInstance_Base::AreAllIncomingTransitionsFromAnAnyState();


// Function  SMSystem.SMStateInstance_Base.AreAllOutgoingTransitionsFromAnAnyState
// Offset::0x2BA9AB0;
bool FSMStateInstance_Base::AreAllOutgoingTransitionsFromAnAnyState();


// Function  SMSystem.SMStateInstance_Base.EvaluateTransitions
// Offset::0x2BAA400;
void FSMStateInstance_Base::EvaluateTransitions();


// Function  SMSystem.SMStateInstance_Base.GetAllowParallelReentry
// Offset::0x2BA9700;
bool FSMStateInstance_Base::GetAllowParallelReentry();


// Function  SMSystem.SMStateInstance_Base.GetAlwaysUpdate
// Offset::0x2BA9970;
bool FSMStateInstance_Base::GetAlwaysUpdate();


// Function  SMSystem.SMStateInstance_Base.GetDefaultToParallel
// Offset::0x2BA97D0;
bool FSMStateInstance_Base::GetDefaultToParallel();


// Function  SMSystem.SMStateInstance_Base.GetDisableTickTransitionEvaluation
// Offset::0x2BA98A0;
bool FSMStateInstance_Base::GetDisableTickTransitionEvaluation();


// Function  SMSystem.SMStateInstance_Base.GetEvalTransitionsOnStart
// Offset::0x2BA9560;
bool FSMStateInstance_Base::GetEvalTransitionsOnStart();


// Function  SMSystem.SMStateInstance_Base.GetExcludeFromAnyState
// Offset::0x2BA9480;
bool FSMStateInstance_Base::GetExcludeFromAnyState();


// Function  SMSystem.SMStateInstance_Base.GetIncomingTransitions
// Offset::0x2BAA1E0;
bool FSMStateInstance_Base::GetIncomingTransitions(TArray<FSMTransitionInstance*> Transitions,bool bExcludeAlwaysFalse);


// Function  SMSystem.SMStateInstance_Base.GetNextStateByName
// Offset::0x2BA9BF0;
FSMStateInstance_Base* FSMStateInstance_Base::GetNextStateByName(FString StateName);


// Function  SMSystem.SMStateInstance_Base.GetNextStateByTransitionIndex
// Offset::0x2BA9CA0;
FSMStateInstance_Base* FSMStateInstance_Base::GetNextStateByTransitionIndex(int32_t Index);


// Function  SMSystem.SMStateInstance_Base.GetOutgoingTransitions
// Offset::0x2BAA2F0;
bool FSMStateInstance_Base::GetOutgoingTransitions(TArray<FSMTransitionInstance*> Transitions,bool bExcludeAlwaysFalse);


// Function  SMSystem.SMStateInstance_Base.GetPreviousActiveState
// Offset::0x2BA9B10;
FSMStateInstance_Base* FSMStateInstance_Base::GetPreviousActiveState();


// Function  SMSystem.SMStateInstance_Base.GetPreviousActiveTransition
// Offset::0x2BA9AE0;
FSMTransitionInstance* FSMStateInstance_Base::GetPreviousActiveTransition();


// Function  SMSystem.SMStateInstance_Base.GetPreviousStateByName
// Offset::0x2BA9B40;
FSMStateInstance_Base* FSMStateInstance_Base::GetPreviousStateByName(FString StateName);


// Function  SMSystem.SMStateInstance_Base.GetServerTimeInState
// Offset::0x2BA99A0;
float FSMStateInstance_Base::GetServerTimeInState(bool bOutUsedLocalTime);


// Function  SMSystem.SMStateInstance_Base.GetStartTime
// Offset::0x2BA9A50;
FDateTime FSMStateInstance_Base::GetStartTime();


// Function  SMSystem.SMStateInstance_Base.GetStateInfo
// Offset::0x2BAA5C0;
void FSMStateInstance_Base::GetStateInfo(FSMStateInfo State);


// Function  SMSystem.SMStateInstance_Base.GetStayActiveOnStateChange
// Offset::0x2BA9630;
bool FSMStateInstance_Base::GetStayActiveOnStateChange();


// Function  SMSystem.SMStateInstance_Base.GetTransitionByIndex
// Offset::0x2BA9D40;
FSMTransitionInstance* FSMStateInstance_Base::GetTransitionByIndex(int32_t Index);


// Function  SMSystem.SMStateInstance_Base.GetTransitionToTake
// Offset::0x2BAA1B0;
FSMTransitionInstance* FSMStateInstance_Base::GetTransitionToTake();


// Function  SMSystem.SMStateInstance_Base.IsEntryState
// Offset::0x2BAA560;
bool FSMStateInstance_Base::IsEntryState();


// Function  SMSystem.SMStateInstance_Base.IsStateMachine
// Offset::0x2BAA590;
bool FSMStateInstance_Base::IsStateMachine();


// Function  SMSystem.SMStateInstance_Base.OnStateBegin
// Offset::0x233B9F0;
void FSMStateInstance_Base::OnStateBegin();


// Function  SMSystem.SMStateInstance_Base.OnStateEnd
// Offset::0x2BAA6F0;
void FSMStateInstance_Base::OnStateEnd();


// Function  SMSystem.SMStateInstance_Base.OnStateUpdate
// Offset::0x2BAA710;
void FSMStateInstance_Base::OnStateUpdate(float DeltaSeconds);


// Function  SMSystem.SMStateInstance_Base.SetActive
// Offset::0x2BAA420;
void FSMStateInstance_Base::SetActive(bool bValue,bool bSetAllParents,bool bActivateNow);


// Function  SMSystem.SMStateInstance_Base.SetAllowParallelReentry
// Offset::0x2BA9660;
void FSMStateInstance_Base::SetAllowParallelReentry(bool bValue);


// Function  SMSystem.SMStateInstance_Base.SetAlwaysUpdate
// Offset::0x2BA98D0;
void FSMStateInstance_Base::SetAlwaysUpdate(bool bValue);


// Function  SMSystem.SMStateInstance_Base.SetDefaultToParallel
// Offset::0x2BA9730;
void FSMStateInstance_Base::SetDefaultToParallel(bool bValue);


// Function  SMSystem.SMStateInstance_Base.SetDisableTickTransitionEvaluation
// Offset::0x2BA9800;
void FSMStateInstance_Base::SetDisableTickTransitionEvaluation(bool bValue);


// Function  SMSystem.SMStateInstance_Base.SetEvalTransitionsOnStart
// Offset::0x2BA94C0;
void FSMStateInstance_Base::SetEvalTransitionsOnStart(bool bValue);


// Function  SMSystem.SMStateInstance_Base.SetExcludeFromAnyState
// Offset::0x2BA93E0;
void FSMStateInstance_Base::SetExcludeFromAnyState(bool bValue);


// Function  SMSystem.SMStateInstance_Base.SetStayActiveOnStateChange
// Offset::0x2BA9590;
void FSMStateInstance_Base::SetStayActiveOnStateChange(bool bValue);


// Function  SMSystem.SMStateInstance_Base.SwitchToLinkedState
// Offset::0x2BAA070;
bool FSMStateInstance_Base::SwitchToLinkedState(FSMStateInstance_Base* NextStateInstance,bool bRequireTransitionToPass,bool bActivateNow);


// Function  SMSystem.SMStateInstance_Base.SwitchToLinkedStateByName
// Offset::0x2BA9F20;
bool FSMStateInstance_Base::SwitchToLinkedStateByName(FString NextStateName,bool bRequireTransitionToPass,bool bActivateNow);


// Function  SMSystem.SMStateInstance_Base.SwitchToLinkedStateByTransition
// Offset::0x2BA9DE0;
bool FSMStateInstance_Base::SwitchToLinkedStateByTransition(FSMTransitionInstance* TransitionInstance,bool bRequireTransitionToPass,bool bActivateNow);


// Function  SMSystem.SMConduitInstance.CanEnterTransition
// Offset::0x1BAB160;
bool FSMConduitInstance::CanEnterTransition();


// Function  SMSystem.SMConduitInstance.GetCanEvaluate
// Offset::0x2B970F0;
bool FSMConduitInstance::GetCanEvaluate();


// Function  SMSystem.SMConduitInstance.GetEvalWithTransitions
// Offset::0x2B970C0;
bool FSMConduitInstance::GetEvalWithTransitions();


// Function  SMSystem.SMConduitInstance.OnConduitEntered
// Offset::0x2341800;
void FSMConduitInstance::OnConduitEntered();


// Function  SMSystem.SMConduitInstance.OnConduitInitialized
// Offset::0x27002D0;
void FSMConduitInstance::OnConduitInitialized();


// Function  SMSystem.SMConduitInstance.OnConduitShutdown
// Offset::0x2B971C0;
void FSMConduitInstance::OnConduitShutdown();


// Function  SMSystem.SMConduitInstance.SetCanEvaluate
// Offset::0x2B97120;
void FSMConduitInstance::SetCanEvaluate(bool bValue);


// Function  SMSystem.SMConduitInstance.SetEvalWithTransitions
// Offset::0x2B97020;
void FSMConduitInstance::SetEvalWithTransitions(bool bValue);


// Function  SMSystem.SMCompilerLog.Log
// Offset::0x2BA3E10;
void FSMCompilerLog::Log(enum class ESMCompilerLogType Severity,FString Message);


// Function  SMSystem.SMCompilerLog.LogProperty
// Offset::0x2BA3B90;
void FSMCompilerLog::LogProperty(FName PropertyName,FSMNodeInstance* NodeInstance,FString Message,enum class ESMCompilerLogType Severity,bool bHighlight,bool bSilent,int32_t ArrayIndex);


// Function  SMSystem.SMStateInstance.AddStateToStack
// Offset::0x2BAC420;
FSMStateInstance* FSMStateInstance::AddStateToStack(FSMStateInstance* StateClass,int32_t StackIndex);


// Function  SMSystem.SMStateInstance.ClearStateStack
// Offset::0x1B91E70;
void FSMStateInstance::ClearStateStack();


// Function  SMSystem.SMStateInstance.GetAllStatesInStackOfClass
// Offset::0x2BAC5E0;
void FSMStateInstance::GetAllStatesInStackOfClass(FSMStateInstance* StateClass,TArray<FSMStateInstance_Base*> StateStackInstances,bool bIncludeChildren);


// Function  SMSystem.SMStateInstance.GetAllStateStackInstances
// Offset::0x2BAC8F0;
void FSMStateInstance::GetAllStateStackInstances(TArray<FSMStateInstance_Base*> StateStackInstances);


// Function  SMSystem.SMStateInstance.GetStackOwnerInstance
// Offset::0x2BAC730;
FSMStateInstance_Base* FSMStateInstance::GetStackOwnerInstance();


// Function  SMSystem.SMStateInstance.GetStateIndexInStack
// Offset::0x2BAC540;
int32_t FSMStateInstance::GetStateIndexInStack(FSMStateInstance_Base* StateInstance);


// Function  SMSystem.SMStateInstance.GetStateInStack
// Offset::0x2BAC850;
FSMStateInstance_Base* FSMStateInstance::GetStateInStack(int32_t Index);


// Function  SMSystem.SMStateInstance.GetStateInStackByClass
// Offset::0x2BAC760;
FSMStateInstance_Base* FSMStateInstance::GetStateInStackByClass(FSMStateInstance* StateClass,bool bIncludeChildren);


// Function  SMSystem.SMStateInstance.GetStateStackCount
// Offset::0x2BAC510;
int32_t FSMStateInstance::GetStateStackCount();


// Function  SMSystem.SMStateInstance.OnStateInitialized
// Offset::0x2333620;
void FSMStateInstance::OnStateInitialized();


// Function  SMSystem.SMStateInstance.OnStateShutdown
// Offset::0x2341800;
void FSMStateInstance::OnStateShutdown();


// Function  SMSystem.SMStateInstance.RemoveStateFromStack
// Offset::0x2BAC380;
void FSMStateInstance::RemoveStateFromStack(int32_t StackIndex);


// Function  SMSystem.SMStateMachineComponent.CLIENT_ActivateStates
// Offset::0x2BADAB0;
void FSMStateMachineComponent::CLIENT_ActivateStates(TArray<FSMActivateStateTransaction> StateTransactions);


// Function  SMSystem.SMStateMachineComponent.CLIENT_FullSync
// Offset::0x2BAD930;
void FSMStateMachineComponent::CLIENT_FullSync(FSMFullSyncTransaction FullSyncTransaction);


// Function  SMSystem.SMStateMachineComponent.CLIENT_Shutdown
// Offset::0x2BADDD0;
void FSMStateMachineComponent::CLIENT_Shutdown(FSMTransaction_Base Transaction);


// Function  SMSystem.SMStateMachineComponent.CLIENT_Start
// Offset::0x2BAE050;
void FSMStateMachineComponent::CLIENT_Start(FSMTransaction_Base Transaction);


// Function  SMSystem.SMStateMachineComponent.CLIENT_Stop
// Offset::0x2BADF10;
void FSMStateMachineComponent::CLIENT_Stop(FSMTransaction_Base Transaction);


// Function  SMSystem.SMStateMachineComponent.CLIENT_TakeTransitions
// Offset::0x2BADC10;
void FSMStateMachineComponent::CLIENT_TakeTransitions(TArray<FSMTransitionTransaction> Transactions);


// Function  SMSystem.SMStateMachineComponent.CopySettingsFromOtherComponent
// Offset::0x2BAF940;
void FSMStateMachineComponent::CopySettingsFromOtherComponent(FSMStateMachineComponent* OtherComponent);


// Function  SMSystem.SMStateMachineComponent.GetContextForInitialization
// Offset::0x2BAF810;
FObject* FSMStateMachineComponent::GetContextForInitialization();


// Function  SMSystem.SMStateMachineComponent.GetInstance
// Offset::0x2BAF840;
FSMInstance* FSMStateMachineComponent::GetInstance();


// Function  SMSystem.SMStateMachineComponent.GetTopMostParentActor
// Offset::0x2BAF870;
FActor* FSMStateMachineComponent::GetTopMostParentActor();


// Function  SMSystem.SMStateMachineComponent.Initialize
// Offset::0x2BAFCA0;
void FSMStateMachineComponent::Initialize(FObject* Context);


// Function  SMSystem.SMStateMachineComponent.Internal_OnInstanceInitializedAsync
// Offset::0x2BAF770;
void FSMStateMachineComponent::Internal_OnInstanceInitializedAsync(FSMInstance* Instance);


// Function  SMSystem.SMStateMachineComponent.Internal_OnReplicatedInstanceInitialized
// Offset::0x2BAF6D0;
void FSMStateMachineComponent::Internal_OnReplicatedInstanceInitialized(FSMInstance* Instance);


// Function  SMSystem.SMStateMachineComponent.Internal_OnStateMachineShutdown
// Offset::0x2BAF410;
void FSMStateMachineComponent::Internal_OnStateMachineShutdown(FSMInstance* Instance);


// Function  SMSystem.SMStateMachineComponent.Internal_OnStateMachineStarted
// Offset::0x2BAF630;
void FSMStateMachineComponent::Internal_OnStateMachineStarted(FSMInstance* Instance);


// Function  SMSystem.SMStateMachineComponent.Internal_OnStateMachineStateChanged
// Offset::0x2BAEB60;
void FSMStateMachineComponent::Internal_OnStateMachineStateChanged(FSMInstance* Instance,FSMStateInfo ToState,FSMStateInfo FromState);


// Function  SMSystem.SMStateMachineComponent.Internal_OnStateMachineStateStarted
// Offset::0x2BAE7D0;
void FSMStateMachineComponent::Internal_OnStateMachineStateStarted(FSMInstance* Instance,FSMStateInfo State);


// Function  SMSystem.SMStateMachineComponent.Internal_OnStateMachineStopped
// Offset::0x2BAF4B0;
void FSMStateMachineComponent::Internal_OnStateMachineStopped(FSMInstance* Instance);


// Function  SMSystem.SMStateMachineComponent.Internal_OnStateMachineTransitionTaken
// Offset::0x2BAF200;
void FSMStateMachineComponent::Internal_OnStateMachineTransitionTaken(FSMInstance* Instance,FSMTransitionInfo Transition);


// Function  SMSystem.SMStateMachineComponent.Internal_OnStateMachineUpdated
// Offset::0x2BAF550;
void FSMStateMachineComponent::Internal_OnStateMachineUpdated(FSMInstance* Instance,float DeltaSeconds);


// Function  SMSystem.SMStateMachineComponent.IsInitialized
// Offset::0x2BAFA10;
bool FSMStateMachineComponent::IsInitialized();


// Function  SMSystem.SMStateMachineComponent.IsStateMachineActive
// Offset::0x2BAF9E0;
bool FSMStateMachineComponent::IsStateMachineActive();


// Function  SMSystem.SMStateMachineComponent.K2_InitializeAsync
// Offset::0x2BAFA40;
void FSMStateMachineComponent::K2_InitializeAsync(FObject* Context,FLatentActionInfo LatentInfo);


// Function  SMSystem.SMStateMachineComponent.MULTICAST_ActivateStates
// Offset::0x2BADB60;
void FSMStateMachineComponent::MULTICAST_ActivateStates(TArray<FSMActivateStateTransaction> StateTransactions);


// Function  SMSystem.SMStateMachineComponent.MULTICAST_FullSync
// Offset::0x2BAD9F0;
void FSMStateMachineComponent::MULTICAST_FullSync(FSMFullSyncTransaction FullSyncTransaction);


// Function  SMSystem.SMStateMachineComponent.MULTICAST_Shutdown
// Offset::0x2BADE70;
void FSMStateMachineComponent::MULTICAST_Shutdown(FSMTransaction_Base Transaction);


// Function  SMSystem.SMStateMachineComponent.MULTICAST_Start
// Offset::0x2BAE0F0;
void FSMStateMachineComponent::MULTICAST_Start(FSMTransaction_Base Transaction);


// Function  SMSystem.SMStateMachineComponent.MULTICAST_Stop
// Offset::0x2BADFB0;
void FSMStateMachineComponent::MULTICAST_Stop(FSMTransaction_Base Transaction);


// Function  SMSystem.SMStateMachineComponent.MULTICAST_TakeTransitions
// Offset::0x2BADCF0;
void FSMStateMachineComponent::MULTICAST_TakeTransitions(TArray<FSMTransitionTransaction> Transactions);


// Function  SMSystem.SMStateMachineComponent.OnContextPawnControllerChanged
// Offset::0x2BAD850;
void FSMStateMachineComponent::OnContextPawnControllerChanged(FPawn* Pawn,FController* NewController);


// Function  SMSystem.SMStateMachineComponent.OnPostInitialize
// Offset::0x3D30810;
void FSMStateMachineComponent::OnPostInitialize();


// Function  SMSystem.SMStateMachineComponent.REP_OnInstanceLoaded
// Offset::0x2BAE190;
void FSMStateMachineComponent::REP_OnInstanceLoaded();


// Function  SMSystem.SMStateMachineComponent.Restart
// Offset::0x2BAFB70;
void FSMStateMachineComponent::Restart();


// Function  SMSystem.SMStateMachineComponent.SERVER_ActivateStates
// Offset::0x2BAE310;
void FSMStateMachineComponent::SERVER_ActivateStates(TArray<FSMActivateStateTransaction> StateTransactions);


// Function  SMSystem.SMStateMachineComponent.SERVER_FullSync
// Offset::0x2BAE1B0;
void FSMStateMachineComponent::SERVER_FullSync(FSMFullSyncTransaction FullSyncTransaction);


// Function  SMSystem.SMStateMachineComponent.SERVER_Initialize
// Offset::0x2BAE720;
void FSMStateMachineComponent::SERVER_Initialize(FSMInitializeTransaction Transaction);


// Function  SMSystem.SMStateMachineComponent.SERVER_RequestFullSync
// Offset::0x2BAE270;
void FSMStateMachineComponent::SERVER_RequestFullSync(bool bForceFullRefresh);


// Function  SMSystem.SMStateMachineComponent.SERVER_Shutdown
// Offset::0x2BAE4A0;
void FSMStateMachineComponent::SERVER_Shutdown(FSMTransaction_Base Transaction);


// Function  SMSystem.SMStateMachineComponent.SERVER_Start
// Offset::0x2BAE680;
void FSMStateMachineComponent::SERVER_Start(FSMTransaction_Base Transaction);


// Function  SMSystem.SMStateMachineComponent.SERVER_Stop
// Offset::0x2BAE540;
void FSMStateMachineComponent::SERVER_Stop(FSMTransaction_Base Transaction);


// Function  SMSystem.SMStateMachineComponent.SERVER_TakeTransitions
// Offset::0x2BAE3C0;
void FSMStateMachineComponent::SERVER_TakeTransitions(TArray<FSMTransitionTransaction> TransitionTransactions);


// Function  SMSystem.SMStateMachineComponent.SERVER_Update
// Offset::0x2BAE5E0;
void FSMStateMachineComponent::SERVER_Update(float DeltaTime);


// Function  SMSystem.SMStateMachineComponent.SetCanInstanceNetworkTick
// Offset::0x2BAF8A0;
void FSMStateMachineComponent::SetCanInstanceNetworkTick(bool bCanEverTick);


// Function  SMSystem.SMStateMachineComponent.Shutdown
// Offset::0x2BAFB40;
void FSMStateMachineComponent::Shutdown();


// Function  SMSystem.SMStateMachineComponent.Start
// Offset::0x2BAFC70;
void FSMStateMachineComponent::Start();


// Function  SMSystem.SMStateMachineComponent.Stop
// Offset::0x2BAFBA0;
void FSMStateMachineComponent::Stop();


// Function  SMSystem.SMStateMachineComponent.Update
// Offset::0x2BAFBD0;
void FSMStateMachineComponent::Update(float DeltaSeconds);


// Function  SMSystem.SMStateMachineInstance.GetActiveStates
// Offset::0x2BB7320;
void FSMStateMachineInstance::GetActiveStates(TArray<FSMStateInstance_Base*> ActiveStates);


// Function  SMSystem.SMStateMachineInstance.GetAllStateInstances
// Offset::0x2BB7530;
void FSMStateMachineInstance::GetAllStateInstances(TArray<FSMStateInstance_Base*> StateInstances);


// Function  SMSystem.SMStateMachineInstance.GetContainedStateByName
// Offset::0x2BB7480;
FSMStateInstance_Base* FSMStateMachineInstance::GetContainedStateByName(FString StateName);


// Function  SMSystem.SMStateMachineInstance.GetEntryStates
// Offset::0x2BB73D0;
void FSMStateMachineInstance::GetEntryStates(TArray<FSMStateInstance_Base*> EntryStates);


// Function  SMSystem.SMStateMachineInstance.GetReuseCurrentState
// Offset::0x2BB71F0;
bool FSMStateMachineInstance::GetReuseCurrentState();


// Function  SMSystem.SMStateMachineInstance.GetReuseIfNotEndState
// Offset::0x2BB7120;
bool FSMStateMachineInstance::GetReuseIfNotEndState();


// Function  SMSystem.SMStateMachineInstance.GetStateMachineReference
// Offset::0x2BB72F0;
FSMInstance* FSMStateMachineInstance::GetStateMachineReference();


// Function  SMSystem.SMStateMachineInstance.GetWaitForEndState
// Offset::0x2BB72C0;
bool FSMStateMachineInstance::GetWaitForEndState();


// Function  SMSystem.SMStateMachineInstance.OnEndStateReached
// Offset::0x2341800;
void FSMStateMachineInstance::OnEndStateReached();


// Function  SMSystem.SMStateMachineInstance.OnStateInitialized
// Offset::0x27002D0;
void FSMStateMachineInstance::OnStateInitialized();


// Function  SMSystem.SMStateMachineInstance.OnStateMachineCompleted
// Offset::0x2333620;
void FSMStateMachineInstance::OnStateMachineCompleted();


// Function  SMSystem.SMStateMachineInstance.OnStateShutdown
// Offset::0x2B971C0;
void FSMStateMachineInstance::OnStateShutdown();


// Function  SMSystem.SMStateMachineInstance.SetReuseCurrentState
// Offset::0x2BB7150;
void FSMStateMachineInstance::SetReuseCurrentState(bool bValue);


// Function  SMSystem.SMStateMachineInstance.SetReuseIfNotEndState
// Offset::0x2BB7080;
void FSMStateMachineInstance::SetReuseIfNotEndState(bool bValue);


// Function  SMSystem.SMStateMachineInstance.SetWaitForEndState
// Offset::0x2BB7220;
void FSMStateMachineInstance::SetWaitForEndState(bool bValue);


// Function  SMSystem.SMTransitionInstance.CanEnterTransition
// Offset::0x26E1820;
bool FSMTransitionInstance::CanEnterTransition();


// Function  SMSystem.SMTransitionInstance.DoesTransitionPass
// Offset::0x2BB9800;
bool FSMTransitionInstance::DoesTransitionPass();


// Function  SMSystem.SMTransitionInstance.EvaluateFromManuallyBoundEvent
// Offset::0x2BB9770;
bool FSMTransitionInstance::EvaluateFromManuallyBoundEvent();


// Function  SMSystem.SMTransitionInstance.GetAllTransitionsInStackOfClass
// Offset::0x2BB93B0;
void FSMTransitionInstance::GetAllTransitionsInStackOfClass(FSMTransitionInstance* TransitionClass,TArray<FSMTransitionInstance*> TransitionStackInstances,bool bIncludeChildren);


// Function  SMSystem.SMTransitionInstance.GetAllTransitionStackInstances
// Offset::0x2BB96C0;
void FSMTransitionInstance::GetAllTransitionStackInstances(TArray<FSMTransitionInstance*> TransitionStackInstances);


// Function  SMSystem.SMTransitionInstance.GetCanEvaluate
// Offset::0x2BB92E0;
bool FSMTransitionInstance::GetCanEvaluate();


// Function  SMSystem.SMTransitionInstance.GetCanEvaluateFromEvent
// Offset::0x2BB9040;
bool FSMTransitionInstance::GetCanEvaluateFromEvent();


// Function  SMSystem.SMTransitionInstance.GetCanEvalWithStartState
// Offset::0x2BB8F70;
bool FSMTransitionInstance::GetCanEvalWithStartState();


// Function  SMSystem.SMTransitionInstance.GetDestinationStateForActiveTransition
// Offset::0x2BB9930;
FSMStateInstance_Base* FSMTransitionInstance::GetDestinationStateForActiveTransition();


// Function  SMSystem.SMTransitionInstance.GetEvalIfNextStateActive
// Offset::0x2BB9110;
bool FSMTransitionInstance::GetEvalIfNextStateActive();


// Function  SMSystem.SMTransitionInstance.GetNextStateInstance
// Offset::0x2BB9990;
FSMStateInstance_Base* FSMTransitionInstance::GetNextStateInstance();


// Function  SMSystem.SMTransitionInstance.GetPreviousStateInstance
// Offset::0x2BB99C0;
FSMStateInstance_Base* FSMTransitionInstance::GetPreviousStateInstance();


// Function  SMSystem.SMTransitionInstance.GetPriorityOrder
// Offset::0x2BB92B0;
int32_t FSMTransitionInstance::GetPriorityOrder();


// Function  SMSystem.SMTransitionInstance.GetRunParallel
// Offset::0x2BB91E0;
bool FSMTransitionInstance::GetRunParallel();


// Function  SMSystem.SMTransitionInstance.GetServerTimestamp
// Offset::0x2BB9830;
FDateTime FSMTransitionInstance::GetServerTimestamp();


// Function  SMSystem.SMTransitionInstance.GetSourceStateForActiveTransition
// Offset::0x2BB9960;
FSMStateInstance_Base* FSMTransitionInstance::GetSourceStateForActiveTransition();


// Function  SMSystem.SMTransitionInstance.GetStackOwnerInstance
// Offset::0x2BB9500;
FSMTransitionInstance* FSMTransitionInstance::GetStackOwnerInstance();


// Function  SMSystem.SMTransitionInstance.GetTransitionIndexInStack
// Offset::0x2BAC540;
int32_t FSMTransitionInstance::GetTransitionIndexInStack(FSMTransitionInstance* TransitionInstance);


// Function  SMSystem.SMTransitionInstance.GetTransitionInfo
// Offset::0x2BB9860;
void FSMTransitionInstance::GetTransitionInfo(FSMTransitionInfo Transition);


// Function  SMSystem.SMTransitionInstance.GetTransitionInStack
// Offset::0x2BB9620;
FSMTransitionInstance* FSMTransitionInstance::GetTransitionInStack(int32_t Index);


// Function  SMSystem.SMTransitionInstance.GetTransitionInStackByClass
// Offset::0x2BB9530;
FSMTransitionInstance* FSMTransitionInstance::GetTransitionInStackByClass(FSMTransitionInstance* TransitionClass,bool bIncludeChildren);


// Function  SMSystem.SMTransitionInstance.GetTransitionStackCount
// Offset::0x2BAC510;
int32_t FSMTransitionInstance::GetTransitionStackCount();


// Function  SMSystem.SMTransitionInstance.IsTransitionFromAnyState
// Offset::0x2BB97D0;
bool FSMTransitionInstance::IsTransitionFromAnyState();


// Function  SMSystem.SMTransitionInstance.IsTransitionFromLinkState
// Offset::0x2BB97A0;
bool FSMTransitionInstance::IsTransitionFromLinkState();


// Function  SMSystem.SMTransitionInstance.OnTransitionEntered
// Offset::0x233BA10;
void FSMTransitionInstance::OnTransitionEntered();


// Function  SMSystem.SMTransitionInstance.OnTransitionInitialized
// Offset::0x2BAA6F0;
void FSMTransitionInstance::OnTransitionInitialized();


// Function  SMSystem.SMTransitionInstance.OnTransitionShutdown
// Offset::0x2333620;
void FSMTransitionInstance::OnTransitionShutdown();


// Function  SMSystem.SMTransitionInstance.SetCanEvaluate
// Offset::0x2BB9310;
void FSMTransitionInstance::SetCanEvaluate(bool bValue);


// Function  SMSystem.SMTransitionInstance.SetCanEvaluateFromEvent
// Offset::0x2BB8FA0;
void FSMTransitionInstance::SetCanEvaluateFromEvent(bool bValue);


// Function  SMSystem.SMTransitionInstance.SetCanEvalWithStartState
// Offset::0x2BB8ED0;
void FSMTransitionInstance::SetCanEvalWithStartState(bool bValue);


// Function  SMSystem.SMTransitionInstance.SetEvalIfNextStateActive
// Offset::0x2BB9070;
void FSMTransitionInstance::SetEvalIfNextStateActive(bool bValue);


// Function  SMSystem.SMTransitionInstance.SetPriorityOrder
// Offset::0x2BB9210;
void FSMTransitionInstance::SetPriorityOrder(int32_t Value);


// Function  SMSystem.SMTransitionInstance.SetRunParallel
// Offset::0x2BB9140;
void FSMTransitionInstance::SetRunParallel(bool bValue);


// Function  SMSystem.SMBlueprintUtils.CreateStateMachineInstanceFromTemplate
// Offset::0x2BBB4B0;
FSMInstance* FSMBlueprintUtils::CreateStateMachineInstanceFromTemplate(FSMInstance* StateMachineClass,FObject* Context,FSMInstance* Template,bool bInitializeNow);


// Function  SMSystem.SMBlueprintUtils.K2_CreateStateMachineInstance
// Offset::0x2BBB630;
FSMInstance* FSMBlueprintUtils::K2_CreateStateMachineInstance(FSMInstance* StateMachineClass,FObject* Context,bool bInitializeNow);


// Function  SMSystem.SMBlueprintUtils.K2_CreateStateMachineInstanceAsync
// Offset::0x2BBB760;
FSMInstance* FSMBlueprintUtils::K2_CreateStateMachineInstanceAsync(FSMInstance* StateMachineClass,FObject* Context,FLatentActionInfo LatentInfo);


// Function  SMSystem.SMBlueprintUtils.K2_CreateStateMachineInstancePure
// Offset::0x2BBB630;
FSMInstance* FSMBlueprintUtils::K2_CreateStateMachineInstancePure(FSMInstance* StateMachineClass,FObject* Context,bool bInitializeNow);


// Function  SMExtendedRuntime.SMExtendedGraphPropertyHelpers.BreakTextGraphProperty
// Offset::0x2BBD5D0;
void FSMExtendedGraphPropertyHelpers::BreakTextGraphProperty(FSMTextGraphProperty GraphProperty,FText Result);


// Function  SMExtendedRuntime.SMExtendedGraphPropertyHelpers.ObjectToText
// Offset::0x2BBD4A0;
FText FSMExtendedGraphPropertyHelpers::ObjectToText(FObject* InObject,FName InFunctionName);


// Function  StreamlineBlueprint.StreamlineLibrary.BreakStreamlineFeatureRequirements
// Offset::0x2BCD5E0;
void FStreamlineLibrary::BreakStreamlineFeatureRequirements(enum class UStreamlineFeatureRequirementsFlags Requirements,bool D3D11Supported,bool D3D12Supported,bool VulkanSupported,bool VSyncOffRequired,bool HardwareSchedulingRequired);


// Function  StreamlineBlueprint.StreamlineLibrary.GetStreamlineFeatureInformation
// Offset::0x2BCD830;
FStreamlineFeatureRequirements FStreamlineLibrary::GetStreamlineFeatureInformation(enum class UStreamlineFeature Feature);


// Function  StreamlineBlueprint.StreamlineLibrary.IsStreamlineFeatureSupported
// Offset::0x2BCD550;
bool FStreamlineLibrary::IsStreamlineFeatureSupported(enum class UStreamlineFeature Feature);


// Function  StreamlineBlueprint.StreamlineLibrary.QueryStreamlineFeatureSupport
// Offset::0x2BCD4C0;
enum class UStreamlineFeatureSupport FStreamlineLibrary::QueryStreamlineFeatureSupport(enum class UStreamlineFeature Feature);


// Function  StreamlineBlueprint.StreamlineLibraryDLSSG.GetDefaultDLSSGMode
// Offset::0x2BCDE70;
enum class UStreamlineDLSSGMode FStreamlineLibraryDLSSG::GetDefaultDLSSGMode();


// Function  StreamlineBlueprint.StreamlineLibraryDLSSG.GetDLSSGFrameTiming
// Offset::0x2BCDD70;
void FStreamlineLibraryDLSSG::GetDLSSGFrameTiming(float FrameRateInHertz,int32_t FramesPresented);


// Function  StreamlineBlueprint.StreamlineLibraryDLSSG.GetDLSSGMode
// Offset::0x2BCDEA0;
enum class UStreamlineDLSSGMode FStreamlineLibraryDLSSG::GetDLSSGMode();


// Function  StreamlineBlueprint.StreamlineLibraryDLSSG.GetSupportedDLSSGModes
// Offset::0x2BCDF60;
TArray<enum class UStreamlineDLSSGMode> FStreamlineLibraryDLSSG::GetSupportedDLSSGModes();


// Function  StreamlineBlueprint.StreamlineLibraryDLSSG.IsDLSSGModeSupported
// Offset::0x2BCDFE0;
bool FStreamlineLibraryDLSSG::IsDLSSGModeSupported(enum class UStreamlineDLSSGMode DLSSGMode);


// Function  StreamlineBlueprint.StreamlineLibraryDLSSG.IsDLSSGSupported
// Offset::0x2BCE0A0;
bool FStreamlineLibraryDLSSG::IsDLSSGSupported();


// Function  StreamlineBlueprint.StreamlineLibraryDLSSG.QueryDLSSGSupport
// Offset::0x2BCE070;
enum class UStreamlineFeatureSupport FStreamlineLibraryDLSSG::QueryDLSSGSupport();


// Function  StreamlineBlueprint.StreamlineLibraryDLSSG.SetDLSSGMode
// Offset::0x2BCDED0;
void FStreamlineLibraryDLSSG::SetDLSSGMode(enum class UStreamlineDLSSGMode DLSSGMode);


// Function  StreamlineBlueprint.StreamlineLibraryReflex.GetDefaultReflexMode
// Offset::0x20074E0;
enum class UStreamlineReflexMode FStreamlineLibraryReflex::GetDefaultReflexMode();


// Function  StreamlineBlueprint.StreamlineLibraryReflex.GetGameLatencyInMs
// Offset::0x2BCE790;
float FStreamlineLibraryReflex::GetGameLatencyInMs();


// Function  StreamlineBlueprint.StreamlineLibraryReflex.GetGameToRenderLatencyInMs
// Offset::0x2BCE7C0;
float FStreamlineLibraryReflex::GetGameToRenderLatencyInMs();


// Function  StreamlineBlueprint.StreamlineLibraryReflex.GetReflexMode
// Offset::0x2BCE7F0;
enum class UStreamlineReflexMode FStreamlineLibraryReflex::GetReflexMode();


// Function  StreamlineBlueprint.StreamlineLibraryReflex.GetRenderLatencyInMs
// Offset::0x2BCE760;
float FStreamlineLibraryReflex::GetRenderLatencyInMs();


// Function  StreamlineBlueprint.StreamlineLibraryReflex.IsReflexSupported
// Offset::0x2BCE8E0;
bool FStreamlineLibraryReflex::IsReflexSupported();


// Function  StreamlineBlueprint.StreamlineLibraryReflex.QueryReflexSupport
// Offset::0x2BCE8B0;
enum class UStreamlineFeatureSupport FStreamlineLibraryReflex::QueryReflexSupport();


// Function  StreamlineBlueprint.StreamlineLibraryReflex.SetReflexMode
// Offset::0x2BCE820;
void FStreamlineLibraryReflex::SetReflexMode(enum class UStreamlineReflexMode Mode);


// Function  DLSSBlueprint.DLSSLibrary.EnableDLAA
// Offset::0x2BE5AF0;
void FDLSSLibrary::EnableDLAA(bool bEnabled);


// Function  DLSSBlueprint.DLSSLibrary.EnableDLSS
// Offset::0x2BE5C70;
void FDLSSLibrary::EnableDLSS(bool bEnabled);


// Function  DLSSBlueprint.DLSSLibrary.EnableDLSSRR
// Offset::0x2BE5BB0;
void FDLSSLibrary::EnableDLSSRR(bool bEnabled);


// Function  DLSSBlueprint.DLSSLibrary.GetDefaultDLSSMode
// Offset::0x2BE53E0;
enum class UDLSSMode FDLSSLibrary::GetDefaultDLSSMode();


// Function  DLSSBlueprint.DLSSLibrary.GetDLSSMinimumDriverVersion
// Offset::0x2BE5E00;
void FDLSSLibrary::GetDLSSMinimumDriverVersion(int32_t MinDriverVersionMajor,int32_t MinDriverVersionMinor);


// Function  DLSSBlueprint.DLSSLibrary.GetDLSSMode
// Offset::0x2BE54D0;
enum class UDLSSMode FDLSSLibrary::GetDLSSMode();


// Function  DLSSBlueprint.DLSSLibrary.GetDLSSModeInformation
// Offset::0x2BE5690;
void FDLSSLibrary::GetDLSSModeInformation(enum class UDLSSMode DLSSMode,FVector2D ScreenResolution,bool bIsSupported,float OptimalScreenPercentage,bool bIsFixedScreenPercentage,float MinScreenPercentage,float MaxScreenPercentage,float OptimalSharpness);


// Function  DLSSBlueprint.DLSSLibrary.GetDLSSRRMinimumDriverVersion
// Offset::0x2BE5D00;
void FDLSSLibrary::GetDLSSRRMinimumDriverVersion(int32_t MinDriverVersionMajor,int32_t MinDriverVersionMinor);


// Function  DLSSBlueprint.DLSSLibrary.GetDLSSScreenPercentageRange
// Offset::0x2BE5590;
void FDLSSLibrary::GetDLSSScreenPercentageRange(float MinScreenPercentage,float MaxScreenPercentage);


// Function  DLSSBlueprint.DLSSLibrary.GetDLSSSharpness
// Offset::0x2BE5410;
float FDLSSLibrary::GetDLSSSharpness();


// Function  DLSSBlueprint.DLSSLibrary.GetSupportedDLSSModes
// Offset::0x2BE59B0;
TArray<enum class UDLSSMode> FDLSSLibrary::GetSupportedDLSSModes();


// Function  DLSSBlueprint.DLSSLibrary.IsDLAAEnabled
// Offset::0x2BE5AC0;
bool FDLSSLibrary::IsDLAAEnabled();


// Function  DLSSBlueprint.DLSSLibrary.IsDLSSEnabled
// Offset::0x2BE5C40;
bool FDLSSLibrary::IsDLSSEnabled();


// Function  DLSSBlueprint.DLSSLibrary.IsDLSSModeSupported
// Offset::0x2BE5A30;
bool FDLSSLibrary::IsDLSSModeSupported(enum class UDLSSMode DLSSMode);


// Function  DLSSBlueprint.DLSSLibrary.IsDLSSRREnabled
// Offset::0x2BE5B80;
bool FDLSSLibrary::IsDLSSRREnabled();


// Function  DLSSBlueprint.DLSSLibrary.IsDLSSRRSupported
// Offset::0x2BE5F60;
bool FDLSSLibrary::IsDLSSRRSupported();


// Function  DLSSBlueprint.DLSSLibrary.IsDLSSSupported
// Offset::0x2BE5F90;
bool FDLSSLibrary::IsDLSSSupported();


// Function  DLSSBlueprint.DLSSLibrary.QueryDLSSRRSupport
// Offset::0x2BE5F00;
enum class UDLSSSupport FDLSSLibrary::QueryDLSSRRSupport();


// Function  DLSSBlueprint.DLSSLibrary.QueryDLSSSupport
// Offset::0x2BE5F30;
enum class UDLSSSupport FDLSSLibrary::QueryDLSSSupport();


// Function  DLSSBlueprint.DLSSLibrary.SetDLSSMode
// Offset::0x2BE5500;
void FDLSSLibrary::SetDLSSMode(enum class UDLSSMode DLSSMode);


// Function  DLSSBlueprint.DLSSLibrary.SetDLSSSharpness
// Offset::0x2BE5440;
void FDLSSLibrary::SetDLSSSharpness(float Sharpness);


// Function  RTXGI.DDGIVolumeComponent.ClearProbeData
// Offset::0x2C2E120;
void FDDGIVolumeComponent::ClearProbeData();


// Function  RTXGI.DDGIVolumeComponent.DDGIClearVolumes
// Offset::0x2C2E140;
void FDDGIVolumeComponent::DDGIClearVolumes();


// Function  RTXGI.DDGIVolumeComponent.GetEmissiveMultiplier
// Offset::0x2C2DF80;
float FDDGIVolumeComponent::GetEmissiveMultiplier();


// Function  RTXGI.DDGIVolumeComponent.GetIrradianceScalar
// Offset::0x2C2E050;
float FDDGIVolumeComponent::GetIrradianceScalar();


// Function  RTXGI.DDGIVolumeComponent.GetLightMultiplier
// Offset::0x2C2DEB0;
float FDDGIVolumeComponent::GetLightMultiplier();


// Function  RTXGI.DDGIVolumeComponent.SetEmissiveMultiplier
// Offset::0x2C2DEE0;
void FDDGIVolumeComponent::SetEmissiveMultiplier(float NewEmissiveMultiplier);


// Function  RTXGI.DDGIVolumeComponent.SetIrradianceScalar
// Offset::0x2C2DFB0;
void FDDGIVolumeComponent::SetIrradianceScalar(float NewIrradianceScalar);


// Function  RTXGI.DDGIVolumeComponent.SetLightMultiplier
// Offset::0x2C2DE10;
void FDDGIVolumeComponent::SetLightMultiplier(float NewLightMultiplier);


// Function  RTXGI.DDGIVolumeComponent.ToggleVolume
// Offset::0x2C2E080;
void FDDGIVolumeComponent::ToggleVolume(bool IsVolumeEnabled);


// Function  ControlRig.ControlRig.CanExecute
// Offset::0x1A7E8E0;
bool FControlRig::CanExecute();


// Function  ControlRig.ControlRig.ClearControlSelection
// Offset::0x1BAAF80;
bool FControlRig::ClearControlSelection();


// Function  ControlRig.ControlRig.CurrentControlSelection
// Offset::0x2705230;
TArray<FName> FControlRig::CurrentControlSelection();


// Function  ControlRig.ControlRig.Execute
// Offset::0x2D41E20;
void FControlRig::Execute(enum class EControlRigState State,FName InEventName);


// Function  ControlRig.ControlRig.FindControlRigs
// Offset::0x2D42700;
TArray<FControlRig*> FControlRig::FindControlRigs(FObject* Outer,FControlRig* OptionalClass);


// Function  ControlRig.ControlRig.GetAbsoluteTime
// Offset::0x2D426E0;
float FControlRig::GetAbsoluteTime();


// Function  ControlRig.ControlRig.GetCurrentFramesPerSecond
// Offset::0x2D423A0;
float FControlRig::GetCurrentFramesPerSecond();


// Function  ControlRig.ControlRig.GetHierarchy
// Offset::0x2D41F10;
FRigHierarchy* FControlRig::GetHierarchy();


// Function  ControlRig.ControlRig.GetInteractionRig
// Offset::0x2D41BD0;
FControlRig* FControlRig::GetInteractionRig();


// Function  ControlRig.ControlRig.GetInteractionRigClass
// Offset::0x2D41B00;
FControlRig* FControlRig::GetInteractionRigClass();


// Function  ControlRig.ControlRig.GetScriptAccessibleVariables
// Offset::0x2D42320;
TArray<FName> FControlRig::GetScriptAccessibleVariables();


// Function  ControlRig.ControlRig.GetSupportedEvents
// Offset::0x2D41F30;
TArray<FName> FControlRig::GetSupportedEvents();


// Function  ControlRig.ControlRig.GetVariableAsString
// Offset::0x2D42170;
FString FControlRig::GetVariableAsString(FName InVariableName);


// Function  ControlRig.ControlRig.GetVariableType
// Offset::0x2D42260;
FName FControlRig::GetVariableType(FName InVariableName);


// Function  ControlRig.ControlRig.GetVM
// Offset::0x2D41DB0;
FRigVM* FControlRig::GetVM();


// Function  ControlRig.ControlRig.IsControlSelected
// Offset::0x2D41C00;
bool FControlRig::IsControlSelected(FName InControlName);


// Function  ControlRig.ControlRig.RequestInit
// Offset::0x2D41E00;
void FControlRig::RequestInit();


// Function  ControlRig.ControlRig.RequestSetup
// Offset::0x2D41DE0;
void FControlRig::RequestSetup();


// Function  ControlRig.ControlRig.SelectControl
// Offset::0x2D41CB0;
void FControlRig::SelectControl(FName InControlName,bool bSelect);


// Function  ControlRig.ControlRig.SetAbsoluteAndDeltaTime
// Offset::0x2D42470;
void FControlRig::SetAbsoluteAndDeltaTime(float InAbsoluteTime,float InDeltaTime);


// Function  ControlRig.ControlRig.SetAbsoluteTime
// Offset::0x2D42550;
void FControlRig::SetAbsoluteTime(float InAbsoluteTime,bool InSetDeltaTimeZero);


// Function  ControlRig.ControlRig.SetDeltaTime
// Offset::0x2D42640;
void FControlRig::SetDeltaTime(float InDeltaTime);


// Function  ControlRig.ControlRig.SetFramesPerSecond
// Offset::0x2D423D0;
void FControlRig::SetFramesPerSecond(float InFramesPerSecond);


// Function  ControlRig.ControlRig.SetInteractionRig
// Offset::0x2D41B30;
void FControlRig::SetInteractionRig(FControlRig* InInteractionRig);


// Function  ControlRig.ControlRig.SetInteractionRigClass
// Offset::0x2D41A60;
void FControlRig::SetInteractionRigClass(FControlRig* InInteractionRigClass);


// Function  ControlRig.ControlRig.SetVariableFromString
// Offset::0x2D42060;
bool FControlRig::SetVariableFromString(FName InVariableName,FString InValue);


// Function  ControlRig.ControlRig.SupportsEvent
// Offset::0x2D41FB0;
bool FControlRig::SupportsEvent(FName InEventName);


// Function  ControlRig.ControlRigComponent.AddMappedCompleteSkeletalMesh
// Offset::0x2D45F60;
void FControlRigComponent::AddMappedCompleteSkeletalMesh(FSkeletalMeshComponent* SkeletalMeshComponent);


// Function  ControlRig.ControlRigComponent.AddMappedComponents
// Offset::0x2D461E0;
void FControlRigComponent::AddMappedComponents(TArray<FControlRigComponentMappedComponent> Components);


// Function  ControlRig.ControlRigComponent.AddMappedElements
// Offset::0x2D462D0;
void FControlRigComponent::AddMappedElements(TArray<FControlRigComponentMappedElement> NewMappedElements);


// Function  ControlRig.ControlRigComponent.AddMappedSkeletalMesh
// Offset::0x2D46000;
void FControlRigComponent::AddMappedSkeletalMesh(FSkeletalMeshComponent* SkeletalMeshComponent,TArray<FControlRigComponentMappedBone> Bones,TArray<FControlRigComponentMappedCurve> Curves);


// Function  ControlRig.ControlRigComponent.CanExecute
// Offset::0x2D46B20;
bool FControlRigComponent::CanExecute();


// Function  ControlRig.ControlRigComponent.ClearMappedElements
// Offset::0x2D46650;
void FControlRigComponent::ClearMappedElements();


// Function  ControlRig.ControlRigComponent.DoesElementExist
// Offset::0x2D45D00;
bool FControlRigComponent::DoesElementExist(FName Name,enum class ERigElementType ElementType);


// Function  ControlRig.ControlRigComponent.GetAbsoluteTime
// Offset::0x2D46AF0;
float FControlRigComponent::GetAbsoluteTime();


// Function  ControlRig.ControlRigComponent.GetBoneTransform
// Offset::0x2D45BC0;
FTransform FControlRigComponent::GetBoneTransform(FName BoneName,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.GetControlBool
// Offset::0x2D454E0;
bool FControlRigComponent::GetControlBool(FName ControlName);


// Function  ControlRig.ControlRigComponent.GetControlFloat
// Offset::0x2D45440;
float FControlRigComponent::GetControlFloat(FName ControlName);


// Function  ControlRig.ControlRigComponent.GetControlInt
// Offset::0x2D453A0;
int32_t FControlRigComponent::GetControlInt(FName ControlName);


// Function  ControlRig.ControlRigComponent.GetControlOffset
// Offset::0x2D44420;
FTransform FControlRigComponent::GetControlOffset(FName ControlName,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.GetControlPosition
// Offset::0x2D451F0;
FVector FControlRigComponent::GetControlPosition(FName ControlName,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.GetControlRig
// Offset::0x2D46B50;
FControlRig* FControlRigComponent::GetControlRig();


// Function  ControlRig.ControlRigComponent.GetControlRotator
// Offset::0x2D450F0;
FRotator FControlRigComponent::GetControlRotator(FName ControlName,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.GetControlScale
// Offset::0x2D44FF0;
FVector FControlRigComponent::GetControlScale(FName ControlName,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.GetControlTransform
// Offset::0x2D44EB0;
FTransform FControlRigComponent::GetControlTransform(FName ControlName,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.GetControlVector2D
// Offset::0x2D452F0;
FVector2D FControlRigComponent::GetControlVector2D(FName ControlName);


// Function  ControlRig.ControlRigComponent.GetElementNames
// Offset::0x2D45DF0;
TArray<FName> FControlRigComponent::GetElementNames(enum class ERigElementType ElementType);


// Function  ControlRig.ControlRigComponent.GetInitialBoneTransform
// Offset::0x2D45A80;
FTransform FControlRigComponent::GetInitialBoneTransform(FName BoneName,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.GetInitialSpaceTransform
// Offset::0x2D43FB0;
FTransform FControlRigComponent::GetInitialSpaceTransform(FName SpaceName,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.GetSpaceTransform
// Offset::0x2D440F0;
FTransform FControlRigComponent::GetSpaceTransform(FName SpaceName,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.Initialize
// Offset::0x2D46710;
void FControlRigComponent::Initialize();


// Function  ControlRig.ControlRigComponent.OnPostForwardsSolve
// Offset::0x2D46730;
void FControlRigComponent::OnPostForwardsSolve(FControlRigComponent* Component);


// Function  ControlRig.ControlRigComponent.OnPostInitialize
// Offset::0x2D469B0;
void FControlRigComponent::OnPostInitialize(FControlRigComponent* Component);


// Function  ControlRig.ControlRigComponent.OnPostSetup
// Offset::0x2D46870;
void FControlRigComponent::OnPostSetup(FControlRigComponent* Component);


// Function  ControlRig.ControlRigComponent.OnPreForwardsSolve
// Offset::0x2D467D0;
void FControlRigComponent::OnPreForwardsSolve(FControlRigComponent* Component);


// Function  ControlRig.ControlRigComponent.OnPreInitialize
// Offset::0x2D46A50;
void FControlRigComponent::OnPreInitialize(FControlRigComponent* Component);


// Function  ControlRig.ControlRigComponent.OnPreSetup
// Offset::0x2D46910;
void FControlRigComponent::OnPreSetup(FControlRigComponent* Component);


// Function  ControlRig.ControlRigComponent.SetBoneInitialTransformsFromSkeletalMesh
// Offset::0x2D45EC0;
void FControlRigComponent::SetBoneInitialTransformsFromSkeletalMesh(FSkeletalMesh* InSkeletalMesh);


// Function  ControlRig.ControlRigComponent.SetBoneTransform
// Offset::0x2D457D0;
void FControlRigComponent::SetBoneTransform(FName BoneName,FTransform Transform,enum class EControlRigComponentSpace Space,float Weight,bool bPropagateToChildren);


// Function  ControlRig.ControlRigComponent.SetControlBool
// Offset::0x2D44DC0;
void FControlRigComponent::SetControlBool(FName ControlName,bool Value);


// Function  ControlRig.ControlRigComponent.SetControlFloat
// Offset::0x2D44CE0;
void FControlRigComponent::SetControlFloat(FName ControlName,float Value);


// Function  ControlRig.ControlRigComponent.SetControlInt
// Offset::0x2D44C00;
void FControlRigComponent::SetControlInt(FName ControlName,int32_t Value);


// Function  ControlRig.ControlRigComponent.SetControlOffset
// Offset::0x2D44230;
void FControlRigComponent::SetControlOffset(FName ControlName,FTransform OffsetTransform,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.SetControlPosition
// Offset::0x2D449D0;
void FControlRigComponent::SetControlPosition(FName ControlName,FVector Value,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.SetControlRotator
// Offset::0x2D44890;
void FControlRigComponent::SetControlRotator(FName ControlName,FRotator Value,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.SetControlScale
// Offset::0x2D44750;
void FControlRigComponent::SetControlScale(FName ControlName,FVector Value,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.SetControlTransform
// Offset::0x2D44560;
void FControlRigComponent::SetControlTransform(FName ControlName,FTransform Value,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.SetControlVector2D
// Offset::0x2D44B10;
void FControlRigComponent::SetControlVector2D(FName ControlName,FVector2D Value);


// Function  ControlRig.ControlRigComponent.SetInitialBoneTransform
// Offset::0x2D45580;
void FControlRigComponent::SetInitialBoneTransform(FName BoneName,FTransform InitialTransform,enum class EControlRigComponentSpace Space,bool bPropagateToChildren);


// Function  ControlRig.ControlRigComponent.SetInitialSpaceTransform
// Offset::0x2D43DC0;
void FControlRigComponent::SetInitialSpaceTransform(FName SpaceName,FTransform InitialTransform,enum class EControlRigComponentSpace Space);


// Function  ControlRig.ControlRigComponent.SetMappedElements
// Offset::0x2D46490;
void FControlRigComponent::SetMappedElements(TArray<FControlRigComponentMappedElement> NewMappedElements);


// Function  ControlRig.ControlRigComponent.Update
// Offset::0x2D46670;
void FControlRigComponent::Update(float DeltaTime);


// Function  ControlRig.ControlRigControlActor.Clear
// Offset::0x2D4CDC0;
void FControlRigControlActor::Clear();


// Function  ControlRig.ControlRigControlActor.Refresh
// Offset::0x2D4CDA0;
void FControlRigControlActor::Refresh();


// Function  ControlRig.ControlRigShapeActor.GetGlobalTransform
// Offset::0x2D4D730;
FTransform FControlRigShapeActor::GetGlobalTransform();


// Function  ControlRig.ControlRigShapeActor.IsEnabled
// Offset::0x2D4DAE0;
bool FControlRigShapeActor::IsEnabled();


// Function  ControlRig.ControlRigShapeActor.IsHovered
// Offset::0x2D4D8A0;
bool FControlRigShapeActor::IsHovered();


// Function  ControlRig.ControlRigShapeActor.IsSelectedInEditor
// Offset::0x2D4DA10;
bool FControlRigShapeActor::IsSelectedInEditor();


// Function  ControlRig.ControlRigShapeActor.OnEnabledChanged
// Offset::0x3D30810;
void FControlRigShapeActor::OnEnabledChanged(bool bIsEnabled);


// Function  ControlRig.ControlRigShapeActor.OnHoveredChanged
// Offset::0x3D30810;
void FControlRigShapeActor::OnHoveredChanged(bool bIsSelected);


// Function  ControlRig.ControlRigShapeActor.OnManipulatingChanged
// Offset::0x3D30810;
void FControlRigShapeActor::OnManipulatingChanged(bool bIsManipulating);


// Function  ControlRig.ControlRigShapeActor.OnSelectionChanged
// Offset::0x3D30810;
void FControlRigShapeActor::OnSelectionChanged(bool bIsSelected);


// Function  ControlRig.ControlRigShapeActor.OnTransformChanged
// Offset::0x3D30810;
void FControlRigShapeActor::OnTransformChanged(FTransform NewTransform);


// Function  ControlRig.ControlRigShapeActor.SetEnabled
// Offset::0x2D4DB10;
void FControlRigShapeActor::SetEnabled(bool bInEnabled);


// Function  ControlRig.ControlRigShapeActor.SetGlobalTransform
// Offset::0x2D4D7C0;
void FControlRigShapeActor::SetGlobalTransform(FTransform InTransform);


// Function  ControlRig.ControlRigShapeActor.SetHovered
// Offset::0x2D4D8D0;
void FControlRigShapeActor::SetHovered(bool bInHovered);


// Function  ControlRig.ControlRigShapeActor.SetSelectable
// Offset::0x2D4D970;
void FControlRigShapeActor::SetSelectable(bool bInSelectable);


// Function  ControlRig.ControlRigShapeActor.SetSelected
// Offset::0x2D4DA40;
void FControlRigShapeActor::SetSelected(bool bInSelected);


// Function  ControlRig.ControlRigPoseAsset.DoesMirrorMatch
// Offset::0x2D4F1B0;
bool FControlRigPoseAsset::DoesMirrorMatch(FControlRig* ControlRig,FName ControlName);


// Function  ControlRig.ControlRigPoseAsset.GetControlNames
// Offset::0x2D4F3B0;
TArray<FName> FControlRigPoseAsset::GetControlNames();


// Function  ControlRig.ControlRigPoseAsset.GetCurrentPose
// Offset::0x2D4F430;
void FControlRigPoseAsset::GetCurrentPose(FControlRig* InControlRig,FControlRigControlPose OutPose);


// Function  ControlRig.ControlRigPoseAsset.PastePose
// Offset::0x2D4F660;
void FControlRigPoseAsset::PastePose(FControlRig* InControlRig,bool bDoKey,bool bDoMirror);


// Function  ControlRig.ControlRigPoseAsset.ReplaceControlName
// Offset::0x2D4F2B0;
void FControlRigPoseAsset::ReplaceControlName(FName CurrentName,FName NewName);


// Function  ControlRig.ControlRigPoseAsset.SavePose
// Offset::0x2D4F7A0;
void FControlRigPoseAsset::SavePose(FControlRig* InControlRig,bool bUseAll);


// Function  ControlRig.ControlRigPoseAsset.SelectControls
// Offset::0x2D4F570;
void FControlRigPoseAsset::SelectControls(FControlRig* InControlRig,bool bDoMirror);


// Function  MovieScene.MovieSceneSequence.FindBindingByTag
// Offset::0x53FFAE0;
FMovieSceneObjectBindingID FMovieSceneSequence::FindBindingByTag(FName InBindingName);


// Function  MovieScene.MovieSceneSequence.FindBindingsByTag
// Offset::0x53FFA00;
TArray<FMovieSceneObjectBindingID> FMovieSceneSequence::FindBindingsByTag(FName InBindingName);


// Function  MovieScene.MovieSceneSequence.GetEarliestTimecodeSource
// Offset::0x53FF9A0;
FMovieSceneTimecodeSource FMovieSceneSequence::GetEarliestTimecodeSource();


// Function  LevelSequence.LevelSequence.CopyMetaData
// Offset::0x590F130;
FObject* FLevelSequence::CopyMetaData(FObject* InMetaData);


// Function  LevelSequence.LevelSequence.FindMetaDataByClass
// Offset::0x590F130;
FObject* FLevelSequence::FindMetaDataByClass(FObject* InClass);


// Function  LevelSequence.LevelSequence.FindOrAddMetaDataByClass
// Offset::0x590F130;
FObject* FLevelSequence::FindOrAddMetaDataByClass(FObject* InClass);


// Function  LevelSequence.LevelSequence.RemoveMetaDataByClass
// Offset::0x590F0A0;
void FLevelSequence::RemoveMetaDataByClass(FObject* InClass);


// Function  MovieSceneTracks.MovieSceneParameterSection.AddBoolParameterKey
// Offset::0x560EEC0;
void FMovieSceneParameterSection::AddBoolParameterKey(FName InParameterName,FFrameNumber InTime,bool InValue);


// Function  MovieSceneTracks.MovieSceneParameterSection.AddColorParameterKey
// Offset::0x560EB20;
void FMovieSceneParameterSection::AddColorParameterKey(FName InParameterName,FFrameNumber InTime,FLinearColor InValue);


// Function  MovieSceneTracks.MovieSceneParameterSection.AddScalarParameterKey
// Offset::0x560EFF0;
void FMovieSceneParameterSection::AddScalarParameterKey(FName InParameterName,FFrameNumber InTime,float InValue);


// Function  MovieSceneTracks.MovieSceneParameterSection.AddTransformParameterKey
// Offset::0x560E990;
void FMovieSceneParameterSection::AddTransformParameterKey(FName InParameterName,FFrameNumber InTime,FTransform InValue);


// Function  MovieSceneTracks.MovieSceneParameterSection.AddVector2DParameterKey
// Offset::0x560ED90;
void FMovieSceneParameterSection::AddVector2DParameterKey(FName InParameterName,FFrameNumber InTime,FVector2D InValue);


// Function  MovieSceneTracks.MovieSceneParameterSection.AddVectorParameterKey
// Offset::0x560EC50;
void FMovieSceneParameterSection::AddVectorParameterKey(FName InParameterName,FFrameNumber InTime,FVector InValue);


// Function  MovieSceneTracks.MovieSceneParameterSection.GetParameterNames
// Offset::0x560E480;
void FMovieSceneParameterSection::GetParameterNames(TSet<FName> ParameterNames);


// Function  MovieSceneTracks.MovieSceneParameterSection.RemoveBoolParameter
// Offset::0x560E850;
bool FMovieSceneParameterSection::RemoveBoolParameter(FName InParameterName);


// Function  MovieSceneTracks.MovieSceneParameterSection.RemoveColorParameter
// Offset::0x560E670;
bool FMovieSceneParameterSection::RemoveColorParameter(FName InParameterName);


// Function  MovieSceneTracks.MovieSceneParameterSection.RemoveScalarParameter
// Offset::0x560E8F0;
bool FMovieSceneParameterSection::RemoveScalarParameter(FName InParameterName);


// Function  MovieSceneTracks.MovieSceneParameterSection.RemoveTransformParameter
// Offset::0x560E5D0;
bool FMovieSceneParameterSection::RemoveTransformParameter(FName InParameterName);


// Function  MovieSceneTracks.MovieSceneParameterSection.RemoveVector2DParameter
// Offset::0x560E7B0;
bool FMovieSceneParameterSection::RemoveVector2DParameter(FName InParameterName);


// Function  MovieSceneTracks.MovieSceneParameterSection.RemoveVectorParameter
// Offset::0x560E710;
bool FMovieSceneParameterSection::RemoveVectorParameter(FName InParameterName);


// Function  ControlRig.RigHierarchy.Contains_ForBlueprint
// Offset::0x2D63660;
bool FRigHierarchy::Contains_ForBlueprint(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.CopyHierarchy
// Offset::0x2D63B40;
void FRigHierarchy::CopyHierarchy(FRigHierarchy* InHierarchy);


// Function  ControlRig.RigHierarchy.CopyPose
// Offset::0x2D63A00;
void FRigHierarchy::CopyPose(FRigHierarchy* InHierarchy,bool bCurrent,bool bInitial);


// Function  ControlRig.RigHierarchy.FindBone_ForBlueprintOnly
// Offset::0x2D62E40;
FRigBoneElement FRigHierarchy::FindBone_ForBlueprintOnly(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.FindControl_ForBlueprintOnly
// Offset::0x2D61F30;
FRigControlElement FRigHierarchy::FindControl_ForBlueprintOnly(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.FindNull_ForBlueprintOnly
// Offset::0x2D617F0;
FRigNullElement FRigHierarchy::FindNull_ForBlueprintOnly(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.GetAllKeys_ForBlueprint
// Offset::0x2D57320;
TArray<FRigElementKey> FRigHierarchy::GetAllKeys_ForBlueprint(bool bTraverse);


// Function  ControlRig.RigHierarchy.GetBoneKeys
// Offset::0x2D613A0;
TArray<FRigElementKey> FRigHierarchy::GetBoneKeys(bool bTraverse);


// Function  ControlRig.RigHierarchy.GetChildren
// Offset::0x2D587D0;
TArray<FRigElementKey> FRigHierarchy::GetChildren(FRigElementKey InKey,bool bRecursive);


// Function  ControlRig.RigHierarchy.GetControlKeys
// Offset::0x2D60B00;
TArray<FRigElementKey> FRigHierarchy::GetControlKeys(bool bTraverse);


// Function  ControlRig.RigHierarchy.GetController
// Offset::0x2D57130;
FRigHierarchyController* FRigHierarchy::GetController(bool bCreateIfNeeded);


// Function  ControlRig.RigHierarchy.GetControlValue
// Offset::0x2D5C930;
FRigControlValue FRigHierarchy::GetControlValue(FRigElementKey InKey,enum class ERigControlValueType InValueType);


// Function  ControlRig.RigHierarchy.GetControlValueByIndex
// Offset::0x2D5C620;
FRigControlValue FRigHierarchy::GetControlValueByIndex(int32_t InElementIndex,enum class ERigControlValueType InValueType);


// Function  ControlRig.RigHierarchy.GetCurveKeys
// Offset::0x2D60830;
TArray<FRigElementKey> FRigHierarchy::GetCurveKeys();


// Function  ControlRig.RigHierarchy.GetCurveValue
// Offset::0x2D5B7C0;
float FRigHierarchy::GetCurveValue(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.GetCurveValueByIndex
// Offset::0x2D5B6D0;
float FRigHierarchy::GetCurveValueByIndex(int32_t InElementIndex);


// Function  ControlRig.RigHierarchy.GetEulerTransformFromControlValue
// Offset::0x2D54D10;
FEulerTransform FRigHierarchy::GetEulerTransformFromControlValue(FRigControlValue InValue);


// Function  ControlRig.RigHierarchy.GetFirstParent
// Offset::0x2D585C0;
FRigElementKey FRigHierarchy::GetFirstParent(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.GetFloatFromControlValue
// Offset::0x2D56480;
float FRigHierarchy::GetFloatFromControlValue(FRigControlValue InValue);


// Function  ControlRig.RigHierarchy.GetGlobalControlOffsetTransform
// Offset::0x2D5D5F0;
FTransform FRigHierarchy::GetGlobalControlOffsetTransform(FRigElementKey InKey,bool bInitial);


// Function  ControlRig.RigHierarchy.GetGlobalControlOffsetTransformByIndex
// Offset::0x2D5D3A0;
FTransform FRigHierarchy::GetGlobalControlOffsetTransformByIndex(int32_t InElementIndex,bool bInitial);


// Function  ControlRig.RigHierarchy.GetGlobalControlShapeTransform
// Offset::0x2D5CFF0;
FTransform FRigHierarchy::GetGlobalControlShapeTransform(FRigElementKey InKey,bool bInitial);


// Function  ControlRig.RigHierarchy.GetGlobalControlShapeTransformByIndex
// Offset::0x2D5CDA0;
FTransform FRigHierarchy::GetGlobalControlShapeTransformByIndex(int32_t InElementIndex,bool bInitial);


// Function  ControlRig.RigHierarchy.GetGlobalTransform
// Offset::0x2D5E4A0;
FTransform FRigHierarchy::GetGlobalTransform(FRigElementKey InKey,bool bInitial);


// Function  ControlRig.RigHierarchy.GetGlobalTransformByIndex
// Offset::0x2D5E230;
FTransform FRigHierarchy::GetGlobalTransformByIndex(int32_t InElementIndex,bool bInitial);


// Function  ControlRig.RigHierarchy.GetIndex_ForBlueprint
// Offset::0x2D63460;
int32_t FRigHierarchy::GetIndex_ForBlueprint(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.GetIntFromControlValue
// Offset::0x2D56150;
int32_t FRigHierarchy::GetIntFromControlValue(FRigControlValue InValue);


// Function  ControlRig.RigHierarchy.GetKey
// Offset::0x2D63340;
FRigElementKey FRigHierarchy::GetKey(int32_t InElementIndex);


// Function  ControlRig.RigHierarchy.GetLocalTransform
// Offset::0x2D5F430;
FTransform FRigHierarchy::GetLocalTransform(FRigElementKey InKey,bool bInitial);


// Function  ControlRig.RigHierarchy.GetLocalTransformByIndex
// Offset::0x2D5F1C0;
FTransform FRigHierarchy::GetLocalTransformByIndex(int32_t InElementIndex,bool bInitial);


// Function  ControlRig.RigHierarchy.GetNullKeys
// Offset::0x2D60F50;
TArray<FRigElementKey> FRigHierarchy::GetNullKeys(bool bTraverse);


// Function  ControlRig.RigHierarchy.GetNumberOfParents
// Offset::0x2D58500;
int32_t FRigHierarchy::GetNumberOfParents(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.GetParents
// Offset::0x2D58690;
TArray<FRigElementKey> FRigHierarchy::GetParents(FRigElementKey InKey,bool bRecursive);


// Function  ControlRig.RigHierarchy.GetParentTransform
// Offset::0x2D58B40;
FTransform FRigHierarchy::GetParentTransform(FRigElementKey InKey,bool bInitial);


// Function  ControlRig.RigHierarchy.GetParentTransformByIndex
// Offset::0x2D58910;
FTransform FRigHierarchy::GetParentTransformByIndex(int32_t InElementIndex,bool bInitial);


// Function  ControlRig.RigHierarchy.GetParentWeight
// Offset::0x2D58380;
FRigElementWeight FRigHierarchy::GetParentWeight(FRigElementKey InChild,FRigElementKey InParent,bool bInitial);


// Function  ControlRig.RigHierarchy.GetParentWeightArray
// Offset::0x2D58240;
TArray<FRigElementWeight> FRigHierarchy::GetParentWeightArray(FRigElementKey InChild,bool bInitial);


// Function  ControlRig.RigHierarchy.GetPose
// Offset::0x2D56E10;
FRigPose FRigHierarchy::GetPose(bool bInitial);


// Function  ControlRig.RigHierarchy.GetPreviousName
// Offset::0x2D54850;
FName FRigHierarchy::GetPreviousName(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.GetPreviousParent
// Offset::0x2D54790;
FRigElementKey FRigHierarchy::GetPreviousParent(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.GetReferenceKeys
// Offset::0x2D5FF90;
TArray<FRigElementKey> FRigHierarchy::GetReferenceKeys(bool bTraverse);


// Function  ControlRig.RigHierarchy.GetRigidBodyKeys
// Offset::0x2D603E0;
TArray<FRigElementKey> FRigHierarchy::GetRigidBodyKeys(bool bTraverse);


// Function  ControlRig.RigHierarchy.GetRotatorFromControlValue
// Offset::0x2D55610;
FRotator FRigHierarchy::GetRotatorFromControlValue(FRigControlValue InValue);


// Function  ControlRig.RigHierarchy.GetSelectedKeys
// Offset::0x2D5FEC0;
TArray<FRigElementKey> FRigHierarchy::GetSelectedKeys(enum class ERigElementType InTypeFilter);


// Function  ControlRig.RigHierarchy.GetTransformFromControlValue
// Offset::0x2D55180;
FTransform FRigHierarchy::GetTransformFromControlValue(FRigControlValue InValue);


// Function  ControlRig.RigHierarchy.GetTransformNoScaleFromControlValue
// Offset::0x2D54910;
FTransformNoScale FRigHierarchy::GetTransformNoScaleFromControlValue(FRigControlValue InValue);


// Function  ControlRig.RigHierarchy.GetVector2DFromControlValue
// Offset::0x2D55E00;
FVector2D FRigHierarchy::GetVector2DFromControlValue(FRigControlValue InValue);


// Function  ControlRig.RigHierarchy.GetVectorFromControlValue
// Offset::0x2D55A70;
FVector FRigHierarchy::GetVectorFromControlValue(FRigControlValue InValue);


// Function  ControlRig.RigHierarchy.IsParentedTo
// Offset::0x2D57420;
bool FRigHierarchy::IsParentedTo(FRigElementKey InChild,FRigElementKey InParent);


// Function  ControlRig.RigHierarchy.IsSelected
// Offset::0x2D5FC70;
bool FRigHierarchy::IsSelected(FRigElementKey InKey);


// Function  ControlRig.RigHierarchy.IsSelectedByIndex
// Offset::0x2D5FB80;
bool FRigHierarchy::IsSelectedByIndex(int32_t InIndex);


// Function  ControlRig.RigHierarchy.IsValidIndex
// Offset::0x2D63860;
bool FRigHierarchy::IsValidIndex(int32_t InElementIndex);


// Function  ControlRig.RigHierarchy.MakeControlValueFromBool
// Offset::0x2D567C0;
FRigControlValue FRigHierarchy::MakeControlValueFromBool(bool InValue);


// Function  ControlRig.RigHierarchy.MakeControlValueFromEulerTransform
// Offset::0x2D54EC0;
FRigControlValue FRigHierarchy::MakeControlValueFromEulerTransform(FEulerTransform InValue);


// Function  ControlRig.RigHierarchy.MakeControlValueFromFloat
// Offset::0x2D565B0;
FRigControlValue FRigHierarchy::MakeControlValueFromFloat(float InValue);


// Function  ControlRig.RigHierarchy.MakeControlValueFromInt
// Offset::0x2D56280;
FRigControlValue FRigHierarchy::MakeControlValueFromInt(int32_t InValue);


// Function  ControlRig.RigHierarchy.MakeControlValueFromRotator
// Offset::0x2D557D0;
FRigControlValue FRigHierarchy::MakeControlValueFromRotator(FRotator InValue);


// Function  ControlRig.RigHierarchy.MakeControlValueFromTransform
// Offset::0x2D55340;
FRigControlValue FRigHierarchy::MakeControlValueFromTransform(FTransform InValue);


// Function  ControlRig.RigHierarchy.MakeControlValueFromTransformNoScale
// Offset::0x2D54A90;
FRigControlValue FRigHierarchy::MakeControlValueFromTransformNoScale(FTransformNoScale InValue);


// Function  ControlRig.RigHierarchy.MakeControlValueFromVector
// Offset::0x2D55BD0;
FRigControlValue FRigHierarchy::MakeControlValueFromVector(FVector InValue);


// Function  ControlRig.RigHierarchy.MakeControlValueFromVector2D
// Offset::0x2D55F40;
FRigControlValue FRigHierarchy::MakeControlValueFromVector2D(FVector2D InValue);


// Function  ControlRig.RigHierarchy.Num
// Offset::0x2D63930;
int32_t FRigHierarchy::Num();


// Function  ControlRig.RigHierarchy.Reset
// Offset::0x2D63BE0;
void FRigHierarchy::Reset();


// Function  ControlRig.RigHierarchy.ResetCurveValues
// Offset::0x2D63950;
void FRigHierarchy::ResetCurveValues();


// Function  ControlRig.RigHierarchy.ResetPoseToInitial
// Offset::0x2D63970;
void FRigHierarchy::ResetPoseToInitial(enum class ERigElementType InTypeFilter);


// Function  ControlRig.RigHierarchy.SendAutoKeyEvent
// Offset::0x2D571D0;
void FRigHierarchy::SendAutoKeyEvent(FRigElementKey InElement,float InOffsetInSeconds,bool bAsynchronous);


// Function  ControlRig.RigHierarchy.SetControlOffsetTransform
// Offset::0x2D5ACE0;
void FRigHierarchy::SetControlOffsetTransform(FRigElementKey InKey,FTransform InTransform,bool bInitial,bool bAffectChildren,bool bSetupUndo,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchy.SetControlOffsetTransformByIndex
// Offset::0x2D5A940;
void FRigHierarchy::SetControlOffsetTransformByIndex(int32_t InElementIndex,FTransform InTransform,bool bInitial,bool bAffectChildren,bool bSetupUndo,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchy.SetControlSettings
// Offset::0x2D59620;
void FRigHierarchy::SetControlSettings(FRigElementKey InKey,FRigControlSettings InSettings,bool bSetupUndo,bool bForce,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchy.SetControlSettingsByIndex
// Offset::0x2D58EE0;
void FRigHierarchy::SetControlSettingsByIndex(int32_t InElementIndex,FRigControlSettings InSettings,bool bSetupUndo,bool bForce,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchy.SetControlShapeTransform
// Offset::0x2D5A4B0;
void FRigHierarchy::SetControlShapeTransform(FRigElementKey InKey,FTransform InTransform,bool bInitial,bool bSetupUndo);


// Function  ControlRig.RigHierarchy.SetControlShapeTransformByIndex
// Offset::0x2D5A1E0;
void FRigHierarchy::SetControlShapeTransformByIndex(int32_t InElementIndex,FTransform InTransform,bool bInitial,bool bSetupUndo);


// Function  ControlRig.RigHierarchy.SetControlValue
// Offset::0x2D5C150;
void FRigHierarchy::SetControlValue(FRigElementKey InKey,FRigControlValue InValue,enum class ERigControlValueType InValueType,bool bSetupUndo,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchy.SetControlValueByIndex
// Offset::0x2D5BE00;
void FRigHierarchy::SetControlValueByIndex(int32_t InElementIndex,FRigControlValue InValue,enum class ERigControlValueType InValueType,bool bSetupUndo,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchy.SetControlVisibility
// Offset::0x2D5BB70;
void FRigHierarchy::SetControlVisibility(FRigElementKey InKey,bool bVisibility);


// Function  ControlRig.RigHierarchy.SetControlVisibilityByIndex
// Offset::0x2D5BA30;
void FRigHierarchy::SetControlVisibilityByIndex(int32_t InElementIndex,bool bVisibility);


// Function  ControlRig.RigHierarchy.SetCurveValue
// Offset::0x2D5B3C0;
void FRigHierarchy::SetCurveValue(FRigElementKey InKey,float InValue,bool bSetupUndo);


// Function  ControlRig.RigHierarchy.SetCurveValueByIndex
// Offset::0x2D5B220;
void FRigHierarchy::SetCurveValueByIndex(int32_t InElementIndex,float InValue,bool bSetupUndo);


// Function  ControlRig.RigHierarchy.SetGlobalTransform
// Offset::0x2D5DD10;
void FRigHierarchy::SetGlobalTransform(FRigElementKey InKey,FTransform InTransform,bool bInitial,bool bAffectChildren,bool bSetupUndo);


// Function  ControlRig.RigHierarchy.SetGlobalTransformByIndex
// Offset::0x2D5D9A0;
void FRigHierarchy::SetGlobalTransformByIndex(int32_t InElementIndex,FTransform InTransform,bool bInitial,bool bAffectChildren,bool bSetupUndo);


// Function  ControlRig.RigHierarchy.SetLocalTransform
// Offset::0x2D5EC50;
void FRigHierarchy::SetLocalTransform(FRigElementKey InKey,FTransform InTransform,bool bInitial,bool bAffectChildren,bool bSetupUndo,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchy.SetLocalTransformByIndex
// Offset::0x2D5E880;
void FRigHierarchy::SetLocalTransformByIndex(int32_t InElementIndex,FTransform InTransform,bool bInitial,bool bAffectChildren,bool bSetupUndo,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchy.SetParentWeight
// Offset::0x2D57FE0;
bool FRigHierarchy::SetParentWeight(FRigElementKey InChild,FRigElementKey InParent,FRigElementWeight InWeight,bool bInitial,bool bAffectChildren);


// Function  ControlRig.RigHierarchy.SetParentWeightArray
// Offset::0x2D57DD0;
bool FRigHierarchy::SetParentWeightArray(FRigElementKey InChild,TArray<FRigElementWeight> InWeights,bool bInitial,bool bAffectChildren);


// Function  ControlRig.RigHierarchy.SetPose_ForBlueprint
// Offset::0x2D569C0;
void FRigHierarchy::SetPose_ForBlueprint(FRigPose InPose);


// Function  ControlRig.RigHierarchy.SortKeys
// Offset::0x2D5F810;
TArray<FRigElementKey> FRigHierarchy::SortKeys(TArray<FRigElementKey> InKeys);


// Function  ControlRig.RigHierarchy.SwitchToDefaultParent
// Offset::0x2D57AB0;
bool FRigHierarchy::SwitchToDefaultParent(FRigElementKey InChild,bool bInitial,bool bAffectChildren);


// Function  ControlRig.RigHierarchy.SwitchToParent
// Offset::0x2D57C10;
bool FRigHierarchy::SwitchToParent(FRigElementKey InChild,FRigElementKey InParent,bool bInitial,bool bAffectChildren);


// Function  ControlRig.RigHierarchy.SwitchToWorldSpace
// Offset::0x2D57950;
bool FRigHierarchy::SwitchToWorldSpace(FRigElementKey InChild,bool bInitial,bool bAffectChildren);


// Function  ControlRig.RigHierarchyController.AddBone
// Offset::0x2D70140;
FRigElementKey FRigHierarchyController::AddBone(FName InName,FRigElementKey InParent,FTransform InTransform,bool bTransformInGlobal,enum class ERigBoneType InBoneType,bool bSetupUndo,bool bPrintPythonCommand);


// Function  ControlRig.RigHierarchyController.AddControl_ForBlueprint
// Offset::0x2D6F3A0;
FRigElementKey FRigHierarchyController::AddControl_ForBlueprint(FName InName,FRigElementKey InParent,FRigControlSettings InSettings,FRigControlValue InValue,bool bSetupUndo);


// Function  ControlRig.RigHierarchyController.AddCurve
// Offset::0x2D6F200;
FRigElementKey FRigHierarchyController::AddCurve(FName InName,float InValue,bool bSetupUndo,bool bPrintPythonCommand);


// Function  ControlRig.RigHierarchyController.AddNull
// Offset::0x2D6FDE0;
FRigElementKey FRigHierarchyController::AddNull(FName InName,FRigElementKey InParent,FTransform InTransform,bool bTransformInGlobal,bool bSetupUndo,bool bPrintPythonCommand);


// Function  ControlRig.RigHierarchyController.AddParent
// Offset::0x2D6D9E0;
bool FRigHierarchyController::AddParent(FRigElementKey InChild,FRigElementKey InParent,float InWeight,bool bMaintainGlobalTransform,bool bSetupUndo);


// Function  ControlRig.RigHierarchyController.AddRigidBody
// Offset::0x2D6EEB0;
FRigElementKey FRigHierarchyController::AddRigidBody(FName InName,FRigElementKey InParent,FRigRigidBodySettings InSettings,FTransform InLocalTransform,bool bSetupUndo,bool bPrintPythonCommand);


// Function  ControlRig.RigHierarchyController.ClearSelection
// Offset::0x2D704F0;
bool FRigHierarchyController::ClearSelection();


// Function  ControlRig.RigHierarchyController.DeselectElement
// Offset::0x2D706C0;
bool FRigHierarchyController::DeselectElement(FRigElementKey InKey);


// Function  ControlRig.RigHierarchyController.DuplicateElements
// Offset::0x2D6D1B0;
TArray<FRigElementKey> FRigHierarchyController::DuplicateElements(TArray<FRigElementKey> InKeys,bool bSelectNewElements,bool bSetupUndo,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchyController.ExportSelectionToText
// Offset::0x2D6E350;
FString FRigHierarchyController::ExportSelectionToText();


// Function  ControlRig.RigHierarchyController.ExportToText
// Offset::0x2D6E210;
FString FRigHierarchyController::ExportToText(TArray<FRigElementKey> InKeys);


// Function  ControlRig.RigHierarchyController.GetControlSettings
// Offset::0x2D6EBC0;
FRigControlSettings FRigHierarchyController::GetControlSettings(FRigElementKey InKey);


// Function  ControlRig.RigHierarchyController.GetHierarchy
// Offset::0x2D709D0;
FRigHierarchy* FRigHierarchyController::GetHierarchy();


// Function  ControlRig.RigHierarchyController.ImportBones
// Offset::0x2D6E5F0;
TArray<FRigElementKey> FRigHierarchyController::ImportBones(FSkeleton* InSkeleton,FName InNameSpace,bool bReplaceExistingBones,bool bRemoveObsoleteBones,bool bSelectBones,bool bSetupUndo,bool bPrintPythonCommand);


// Function  ControlRig.RigHierarchyController.ImportCurves
// Offset::0x2D6E3D0;
TArray<FRigElementKey> FRigHierarchyController::ImportCurves(FSkeleton* InSkeleton,FName InNameSpace,bool bSelectCurves,bool bSetupUndo,bool bPrintPythonCommand);


// Function  ControlRig.RigHierarchyController.ImportFromText
// Offset::0x2D6DF80;
TArray<FRigElementKey> FRigHierarchyController::ImportFromText(FString InContent,bool bReplaceExistingElements,bool bSelectNewElements,bool bSetupUndo,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchyController.MirrorElements
// Offset::0x2D6CE00;
TArray<FRigElementKey> FRigHierarchyController::MirrorElements(TArray<FRigElementKey> InKeys,FRigMirrorSettings InSettings,bool bSelectNewElements,bool bSetupUndo,bool bPrintPythonCommands);


// Function  ControlRig.RigHierarchyController.RemoveAllParents
// Offset::0x2D6D610;
bool FRigHierarchyController::RemoveAllParents(FRigElementKey InChild,bool bMaintainGlobalTransform,bool bSetupUndo,bool bPrintPythonCommand);


// Function  ControlRig.RigHierarchyController.RemoveElement
// Offset::0x2D6DE20;
bool FRigHierarchyController::RemoveElement(FRigElementKey InElement,bool bSetupUndo,bool bPrintPythonCommand);


// Function  ControlRig.RigHierarchyController.RemoveParent
// Offset::0x2D6D7C0;
bool FRigHierarchyController::RemoveParent(FRigElementKey InChild,FRigElementKey InParent,bool bMaintainGlobalTransform,bool bSetupUndo,bool bPrintPythonCommand);


// Function  ControlRig.RigHierarchyController.RenameElement
// Offset::0x2D6DC00;
FRigElementKey FRigHierarchyController::RenameElement(FRigElementKey InElement,FName InName,bool bSetupUndo,bool bPrintPythonCommand,bool bClearSelection);


// Function  ControlRig.RigHierarchyController.SelectElement
// Offset::0x2D707D0;
bool FRigHierarchyController::SelectElement(FRigElementKey InKey,bool bSelect,bool bClearSelection);


// Function  ControlRig.RigHierarchyController.SetControlSettings
// Offset::0x2D6E8D0;
bool FRigHierarchyController::SetControlSettings(FRigElementKey InKey,FRigControlSettings InSettings,bool bSetupUndo);


// Function  ControlRig.RigHierarchyController.SetHierarchy
// Offset::0x2D70930;
void FRigHierarchyController::SetHierarchy(FRigHierarchy* InHierarchy);


// Function  ControlRig.RigHierarchyController.SetParent
// Offset::0x2D6D3F0;
bool FRigHierarchyController::SetParent(FRigElementKey InChild,FRigElementKey InParent,bool bMaintainGlobalTransform,bool bSetupUndo,bool bPrintPythonCommand);


// Function  ControlRig.RigHierarchyController.SetSelection
// Offset::0x2D705B0;
bool FRigHierarchyController::SetSelection(TArray<FRigElementKey> InKeys,bool bPrintPythonCommand);


// Function  SequencerScripting.MovieSceneBindingExtensions.AddTrack
// Offset::0x2E23370;
FMovieSceneTrack* FMovieSceneBindingExtensions::AddTrack(FSequencerBindingProxy InBinding,FMovieSceneTrack* TrackType);


// Function  SequencerScripting.MovieSceneBindingExtensions.FindTracksByExactType
// Offset::0x2E23610;
TArray<FMovieSceneTrack*> FMovieSceneBindingExtensions::FindTracksByExactType(FSequencerBindingProxy InBinding,FMovieSceneTrack* TrackType);


// Function  SequencerScripting.MovieSceneBindingExtensions.FindTracksByType
// Offset::0x2E23750;
TArray<FMovieSceneTrack*> FMovieSceneBindingExtensions::FindTracksByType(FSequencerBindingProxy InBinding,FMovieSceneTrack* TrackType);


// Function  SequencerScripting.MovieSceneBindingExtensions.GetChildPossessables
// Offset::0x2E23280;
TArray<FSequencerBindingProxy> FMovieSceneBindingExtensions::GetChildPossessables(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneBindingExtensions.GetDisplayName
// Offset::0x2E23CC0;
FText FMovieSceneBindingExtensions::GetDisplayName(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneBindingExtensions.GetId
// Offset::0x2E23DC0;
FGuid FMovieSceneBindingExtensions::GetId(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneBindingExtensions.GetName
// Offset::0x2E23A90;
FString FMovieSceneBindingExtensions::GetName(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneBindingExtensions.GetObjectTemplate
// Offset::0x2E231D0;
FObject* FMovieSceneBindingExtensions::GetObjectTemplate(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneBindingExtensions.GetParent
// Offset::0x2E23060;
FSequencerBindingProxy FMovieSceneBindingExtensions::GetParent(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneBindingExtensions.GetPossessedObjectClass
// Offset::0x2E23120;
FObject* FMovieSceneBindingExtensions::GetPossessedObjectClass(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneBindingExtensions.GetTracks
// Offset::0x2E23890;
TArray<FMovieSceneTrack*> FMovieSceneBindingExtensions::GetTracks(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneBindingExtensions.IsValid
// Offset::0x2E23E80;
bool FMovieSceneBindingExtensions::IsValid(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneBindingExtensions.MoveBindingContents
// Offset::0x2E22E40;
void FMovieSceneBindingExtensions::MoveBindingContents(FSequencerBindingProxy SourceBindingId,FSequencerBindingProxy DestinationBindingId);


// Function  SequencerScripting.MovieSceneBindingExtensions.Remove
// Offset::0x2E23470;
void FMovieSceneBindingExtensions::Remove(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneBindingExtensions.RemoveTrack
// Offset::0x2E23520;
void FMovieSceneBindingExtensions::RemoveTrack(FSequencerBindingProxy InBinding,FMovieSceneTrack* TrackToRemove);


// Function  SequencerScripting.MovieSceneBindingExtensions.SetDisplayName
// Offset::0x2E23B80;
void FMovieSceneBindingExtensions::SetDisplayName(FSequencerBindingProxy InBinding,FText InDisplayName);


// Function  SequencerScripting.MovieSceneBindingExtensions.SetName
// Offset::0x2E23980;
void FMovieSceneBindingExtensions::SetName(FSequencerBindingProxy InBinding,FString InName);


// Function  SequencerScripting.MovieSceneBindingExtensions.SetParent
// Offset::0x2E22F50;
void FMovieSceneBindingExtensions::SetParent(FSequencerBindingProxy InBinding,FSequencerBindingProxy InParentBinding);


// Function  SequencerScripting.MovieSceneEventTrackExtensions.AddEventRepeaterSection
// Offset::0x2E24C10;
FMovieSceneEventRepeaterSection* FMovieSceneEventTrackExtensions::AddEventRepeaterSection(FMovieSceneEventTrack* InTrack);


// Function  SequencerScripting.MovieSceneEventTrackExtensions.AddEventTriggerSection
// Offset::0x2E24B70;
FMovieSceneEventTriggerSection* FMovieSceneEventTrackExtensions::AddEventTriggerSection(FMovieSceneEventTrack* InTrack);


// Function  SequencerScripting.MovieSceneEventTrackExtensions.GetBoundObjectPropertyClass
// Offset::0x2E24A90;
FObject* FMovieSceneEventTrackExtensions::GetBoundObjectPropertyClass(FMovieSceneEvent EventKey);


// Function  SequencerScripting.MovieSceneFolderExtensions.AddChildFolder
// Offset::0x2E25670;
bool FMovieSceneFolderExtensions::AddChildFolder(FMovieSceneFolder* TargetFolder,FMovieSceneFolder* FolderToAdd);


// Function  SequencerScripting.MovieSceneFolderExtensions.AddChildMasterTrack
// Offset::0x2E253E0;
bool FMovieSceneFolderExtensions::AddChildMasterTrack(FMovieSceneFolder* Folder,FMovieSceneTrack* InMasterTrack);


// Function  SequencerScripting.MovieSceneFolderExtensions.AddChildObjectBinding
// Offset::0x2E25130;
bool FMovieSceneFolderExtensions::AddChildObjectBinding(FMovieSceneFolder* Folder,FSequencerBindingProxy InObjectBinding);


// Function  SequencerScripting.MovieSceneFolderExtensions.GetChildFolders
// Offset::0x2E25750;
TArray<FMovieSceneFolder*> FMovieSceneFolderExtensions::GetChildFolders(FMovieSceneFolder* Folder);


// Function  SequencerScripting.MovieSceneFolderExtensions.GetChildMasterTracks
// Offset::0x2E254C0;
TArray<FMovieSceneTrack*> FMovieSceneFolderExtensions::GetChildMasterTracks(FMovieSceneFolder* Folder);


// Function  SequencerScripting.MovieSceneFolderExtensions.GetChildObjectBindings
// Offset::0x2E25230;
TArray<FSequencerBindingProxy> FMovieSceneFolderExtensions::GetChildObjectBindings(FMovieSceneFolder* Folder);


// Function  SequencerScripting.MovieSceneFolderExtensions.GetFolderColor
// Offset::0x2E25900;
FColor FMovieSceneFolderExtensions::GetFolderColor(FMovieSceneFolder* Folder);


// Function  SequencerScripting.MovieSceneFolderExtensions.GetFolderName
// Offset::0x2E25A80;
FName FMovieSceneFolderExtensions::GetFolderName(FMovieSceneFolder* Folder);


// Function  SequencerScripting.MovieSceneFolderExtensions.RemoveChildFolder
// Offset::0x2E25590;
bool FMovieSceneFolderExtensions::RemoveChildFolder(FMovieSceneFolder* TargetFolder,FMovieSceneFolder* FolderToRemove);


// Function  SequencerScripting.MovieSceneFolderExtensions.RemoveChildMasterTrack
// Offset::0x2E25300;
bool FMovieSceneFolderExtensions::RemoveChildMasterTrack(FMovieSceneFolder* Folder,FMovieSceneTrack* InMasterTrack);


// Function  SequencerScripting.MovieSceneFolderExtensions.RemoveChildObjectBinding
// Offset::0x2E25030;
bool FMovieSceneFolderExtensions::RemoveChildObjectBinding(FMovieSceneFolder* Folder,FSequencerBindingProxy InObjectBinding);


// Function  SequencerScripting.MovieSceneFolderExtensions.SetFolderColor
// Offset::0x2E25820;
bool FMovieSceneFolderExtensions::SetFolderColor(FMovieSceneFolder* Folder,FColor InFolderColor);


// Function  SequencerScripting.MovieSceneFolderExtensions.SetFolderName
// Offset::0x2E259A0;
bool FMovieSceneFolderExtensions::SetFolderName(FMovieSceneFolder* Folder,FName InFolderName);


// Function  SequencerScripting.MovieScenePropertyTrackExtensions.GetObjectPropertyClass
// Offset::0x2E263D0;
FObject* FMovieScenePropertyTrackExtensions::GetObjectPropertyClass(FMovieSceneObjectPropertyTrack* Track);


// Function  SequencerScripting.MovieScenePropertyTrackExtensions.GetPropertyName
// Offset::0x2E266C0;
FName FMovieScenePropertyTrackExtensions::GetPropertyName(FMovieScenePropertyTrack* Track);


// Function  SequencerScripting.MovieScenePropertyTrackExtensions.GetPropertyPath
// Offset::0x2E265F0;
FString FMovieScenePropertyTrackExtensions::GetPropertyPath(FMovieScenePropertyTrack* Track);


// Function  SequencerScripting.MovieScenePropertyTrackExtensions.GetUniqueTrackName
// Offset::0x2E26550;
FName FMovieScenePropertyTrackExtensions::GetUniqueTrackName(FMovieScenePropertyTrack* Track);


// Function  SequencerScripting.MovieScenePropertyTrackExtensions.SetObjectPropertyClass
// Offset::0x2E26470;
void FMovieScenePropertyTrackExtensions::SetObjectPropertyClass(FMovieSceneObjectPropertyTrack* Track,FObject* PropertyClass);


// Function  SequencerScripting.MovieScenePropertyTrackExtensions.SetPropertyNameAndPath
// Offset::0x2E26760;
void FMovieScenePropertyTrackExtensions::SetPropertyNameAndPath(FMovieScenePropertyTrack* Track,FName InPropertyName,FString InPropertyPath);


// Function  SequencerScripting.MovieSceneScriptingActorReferenceKey.GetTime
// Offset::0x2E271A0;
FFrameTime FMovieSceneScriptingActorReferenceKey::GetTime(enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingActorReferenceKey.GetValue
// Offset::0x2E26F60;
FMovieSceneObjectBindingID FMovieSceneScriptingActorReferenceKey::GetValue();


// Function  SequencerScripting.MovieSceneScriptingActorReferenceKey.SetTime
// Offset::0x2E27020;
void FMovieSceneScriptingActorReferenceKey::SetTime(FFrameNumber NewFrameNumber,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingActorReferenceKey.SetValue
// Offset::0x2E26DC0;
void FMovieSceneScriptingActorReferenceKey::SetValue(FMovieSceneObjectBindingID InNewValue);


// Function  SequencerScripting.MovieSceneScriptingActorReferenceChannel.AddKey
// Offset::0x2E27CA0;
FMovieSceneScriptingActorReferenceKey* FMovieSceneScriptingActorReferenceChannel::AddKey(FFrameNumber InTime,FMovieSceneObjectBindingID NewValue,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingActorReferenceChannel.GetDefault
// Offset::0x2E27860;
FMovieSceneObjectBindingID FMovieSceneScriptingActorReferenceChannel::GetDefault();


// Function  SequencerScripting.MovieSceneScriptingActorReferenceChannel.GetKeys
// Offset::0x2E27B80;
TArray<FMovieSceneScriptingKey*> FMovieSceneScriptingActorReferenceChannel::GetKeys();


// Function  SequencerScripting.MovieSceneScriptingActorReferenceChannel.HasDefault
// Offset::0x2E276C0;
bool FMovieSceneScriptingActorReferenceChannel::HasDefault();


// Function  SequencerScripting.MovieSceneScriptingActorReferenceChannel.RemoveDefault
// Offset::0x2E277D0;
void FMovieSceneScriptingActorReferenceChannel::RemoveDefault();


// Function  SequencerScripting.MovieSceneScriptingActorReferenceChannel.RemoveKey
// Offset::0x2E27C00;
void FMovieSceneScriptingActorReferenceChannel::RemoveKey(FMovieSceneScriptingKey* Key);


// Function  SequencerScripting.MovieSceneScriptingActorReferenceChannel.SetDefault
// Offset::0x2E27960;
void FMovieSceneScriptingActorReferenceChannel::SetDefault(FMovieSceneObjectBindingID InDefaultValue);


// Function  SequencerScripting.MovieSceneScriptingBoolKey.GetTime
// Offset::0x2E271A0;
FFrameTime FMovieSceneScriptingBoolKey::GetTime(enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingBoolKey.GetValue
// Offset::0x2E28620;
bool FMovieSceneScriptingBoolKey::GetValue();


// Function  SequencerScripting.MovieSceneScriptingBoolKey.SetTime
// Offset::0x2E27020;
void FMovieSceneScriptingBoolKey::SetTime(FFrameNumber NewFrameNumber,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingBoolKey.SetValue
// Offset::0x2E28570;
void FMovieSceneScriptingBoolKey::SetValue(bool InNewValue);


// Function  SequencerScripting.MovieSceneScriptingBoolChannel.AddKey
// Offset::0x2E293E0;
FMovieSceneScriptingBoolKey* FMovieSceneScriptingBoolChannel::AddKey(FFrameNumber InTime,bool NewValue,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingBoolChannel.ComputeEffectiveRange
// Offset::0x2E29030;
FSequencerScriptingRange FMovieSceneScriptingBoolChannel::ComputeEffectiveRange();


// Function  SequencerScripting.MovieSceneScriptingBoolChannel.EvaluateKeys
// Offset::0x2E29130;
TArray<bool> FMovieSceneScriptingBoolChannel::EvaluateKeys(FSequencerScriptingRange Range,FFrameRate FrameRate);


// Function  SequencerScripting.MovieSceneScriptingBoolChannel.GetDefault
// Offset::0x2E28D10;
bool FMovieSceneScriptingBoolChannel::GetDefault();


// Function  SequencerScripting.MovieSceneScriptingBoolChannel.GetKeys
// Offset::0x2E27B80;
TArray<FMovieSceneScriptingKey*> FMovieSceneScriptingBoolChannel::GetKeys();


// Function  SequencerScripting.MovieSceneScriptingBoolChannel.GetNumKeys
// Offset::0x2E29350;
int32_t FMovieSceneScriptingBoolChannel::GetNumKeys();


// Function  SequencerScripting.MovieSceneScriptingBoolChannel.HasDefault
// Offset::0x2E28A70;
bool FMovieSceneScriptingBoolChannel::HasDefault();


// Function  SequencerScripting.MovieSceneScriptingBoolChannel.RemoveDefault
// Offset::0x2E28BC0;
void FMovieSceneScriptingBoolChannel::RemoveDefault();


// Function  SequencerScripting.MovieSceneScriptingBoolChannel.RemoveKey
// Offset::0x2E27C00;
void FMovieSceneScriptingBoolChannel::RemoveKey(FMovieSceneScriptingKey* Key);


// Function  SequencerScripting.MovieSceneScriptingBoolChannel.SetDefault
// Offset::0x2E28E90;
void FMovieSceneScriptingBoolChannel::SetDefault(bool InDefaultValue);


// Function  SequencerScripting.MovieSceneScriptingByteKey.GetTime
// Offset::0x2E271A0;
FFrameTime FMovieSceneScriptingByteKey::GetTime(enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingByteKey.GetValue
// Offset::0x2E2CBB0;
char FMovieSceneScriptingByteKey::GetValue();


// Function  SequencerScripting.MovieSceneScriptingByteKey.SetTime
// Offset::0x2E27020;
void FMovieSceneScriptingByteKey::SetTime(FFrameNumber NewFrameNumber,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingByteKey.SetValue
// Offset::0x2E2CA50;
void FMovieSceneScriptingByteKey::SetValue(char InNewValue);


// Function  SequencerScripting.MovieSceneScriptingByteChannel.AddKey
// Offset::0x2E2D2A0;
FMovieSceneScriptingByteKey* FMovieSceneScriptingByteChannel::AddKey(FFrameNumber InTime,char NewValue,float SubFrame,enum class ESequenceTimeUnit TimeUnit,enum class EMovieSceneKeyInterpolation InInterpolation);


// Function  SequencerScripting.MovieSceneScriptingByteChannel.GetDefault
// Offset::0x2E2D030;
char FMovieSceneScriptingByteChannel::GetDefault();


// Function  SequencerScripting.MovieSceneScriptingByteChannel.GetKeys
// Offset::0x2E27B80;
TArray<FMovieSceneScriptingKey*> FMovieSceneScriptingByteChannel::GetKeys();


// Function  SequencerScripting.MovieSceneScriptingByteChannel.HasDefault
// Offset::0x2E28A70;
bool FMovieSceneScriptingByteChannel::HasDefault();


// Function  SequencerScripting.MovieSceneScriptingByteChannel.RemoveDefault
// Offset::0x2E28BC0;
void FMovieSceneScriptingByteChannel::RemoveDefault();


// Function  SequencerScripting.MovieSceneScriptingByteChannel.RemoveKey
// Offset::0x2E27C00;
void FMovieSceneScriptingByteChannel::RemoveKey(FMovieSceneScriptingKey* Key);


// Function  SequencerScripting.MovieSceneScriptingByteChannel.SetDefault
// Offset::0x2E2D1A0;
void FMovieSceneScriptingByteChannel::SetDefault(char InDefaultValue);


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.GetArriveTangent
// Offset::0x2E2E740;
float FMovieSceneScriptingDoubleKey::GetArriveTangent();


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.GetArriveTangentWeight
// Offset::0x2E2E0E0;
float FMovieSceneScriptingDoubleKey::GetArriveTangentWeight();


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.GetInterpolationMode
// Offset::0x2E2EBD0;
enum class ERichCurveInterpMode FMovieSceneScriptingDoubleKey::GetInterpolationMode();


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.GetLeaveTangent
// Offset::0x2E2E530;
float FMovieSceneScriptingDoubleKey::GetLeaveTangent();


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.GetLeaveTangentWeight
// Offset::0x2E2DED0;
float FMovieSceneScriptingDoubleKey::GetLeaveTangentWeight();


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.GetTangentMode
// Offset::0x2E2E990;
enum class ERichCurveTangentMode FMovieSceneScriptingDoubleKey::GetTangentMode();


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.GetTangentWeightMode
// Offset::0x2E2E330;
enum class ERichCurveTangentWeightMode FMovieSceneScriptingDoubleKey::GetTangentWeightMode();


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.GetTime
// Offset::0x2E271A0;
FFrameTime FMovieSceneScriptingDoubleKey::GetTime(enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.GetValue
// Offset::0x2E2EDE0;
double FMovieSceneScriptingDoubleKey::GetValue();


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.SetArriveTangent
// Offset::0x2E2E5E0;
void FMovieSceneScriptingDoubleKey::SetArriveTangent(float InNewValue);


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.SetArriveTangentWeight
// Offset::0x2E2DF80;
void FMovieSceneScriptingDoubleKey::SetArriveTangentWeight(float InNewValue);


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.SetInterpolationMode
// Offset::0x2E2EA30;
void FMovieSceneScriptingDoubleKey::SetInterpolationMode(enum class ERichCurveInterpMode InNewValue);


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.SetLeaveTangent
// Offset::0x2E2E3D0;
void FMovieSceneScriptingDoubleKey::SetLeaveTangent(float InNewValue);


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.SetLeaveTangentWeight
// Offset::0x2E2DD70;
void FMovieSceneScriptingDoubleKey::SetLeaveTangentWeight(float InNewValue);


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.SetTangentMode
// Offset::0x2E2E7F0;
void FMovieSceneScriptingDoubleKey::SetTangentMode(enum class ERichCurveTangentMode InNewValue);


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.SetTangentWeightMode
// Offset::0x2E2E190;
void FMovieSceneScriptingDoubleKey::SetTangentWeightMode(enum class ERichCurveTangentWeightMode InNewValue);


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.SetTime
// Offset::0x2E27020;
void FMovieSceneScriptingDoubleKey::SetTime(FFrameNumber NewFrameNumber,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingDoubleKey.SetValue
// Offset::0x2E2EC70;
void FMovieSceneScriptingDoubleKey::SetValue(double InNewValue);


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.AddKey
// Offset::0x2E30690;
FMovieSceneScriptingDoubleKey* FMovieSceneScriptingDoubleChannel::AddKey(FFrameNumber InTime,double NewValue,float SubFrame,enum class ESequenceTimeUnit TimeUnit,enum class EMovieSceneKeyInterpolation InInterpolation);


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.ComputeEffectiveRange
// Offset::0x2E302E0;
FSequencerScriptingRange FMovieSceneScriptingDoubleChannel::ComputeEffectiveRange();


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.EvaluateKeys
// Offset::0x2E303E0;
TArray<double> FMovieSceneScriptingDoubleChannel::EvaluateKeys(FSequencerScriptingRange Range,FFrameRate FrameRate);


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.GetDefault
// Offset::0x2E2FC80;
double FMovieSceneScriptingDoubleChannel::GetDefault();


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.GetKeys
// Offset::0x2E27B80;
TArray<FMovieSceneScriptingKey*> FMovieSceneScriptingDoubleChannel::GetKeys();


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.GetNumKeys
// Offset::0x2E30600;
int32_t FMovieSceneScriptingDoubleChannel::GetNumKeys();


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.GetPostInfinityExtrapolation
// Offset::0x2E300C0;
enum class ERichCurveExtrapolation FMovieSceneScriptingDoubleChannel::GetPostInfinityExtrapolation();


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.GetPreInfinityExtrapolation
// Offset::0x2E30250;
enum class ERichCurveExtrapolation FMovieSceneScriptingDoubleChannel::GetPreInfinityExtrapolation();


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.HasDefault
// Offset::0x2E2F9D0;
bool FMovieSceneScriptingDoubleChannel::HasDefault();


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.RemoveDefault
// Offset::0x2E2FB30;
void FMovieSceneScriptingDoubleChannel::RemoveDefault();


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.RemoveKey
// Offset::0x2E27C00;
void FMovieSceneScriptingDoubleChannel::RemoveKey(FMovieSceneScriptingKey* Key);


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.SetDefault
// Offset::0x2E2FE00;
void FMovieSceneScriptingDoubleChannel::SetDefault(double InDefaultValue);


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.SetPostInfinityExtrapolation
// Offset::0x2E2FFC0;
void FMovieSceneScriptingDoubleChannel::SetPostInfinityExtrapolation(enum class ERichCurveExtrapolation InExtrapolation);


// Function  SequencerScripting.MovieSceneScriptingDoubleChannel.SetPreInfinityExtrapolation
// Offset::0x2E30150;
void FMovieSceneScriptingDoubleChannel::SetPreInfinityExtrapolation(enum class ERichCurveExtrapolation InExtrapolation);


// Function  SequencerScripting.MovieSceneScriptingEventKey.GetTime
// Offset::0x2E271A0;
FFrameTime FMovieSceneScriptingEventKey::GetTime(enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingEventKey.GetValue
// Offset::0x2E31430;
FMovieSceneEvent FMovieSceneScriptingEventKey::GetValue();


// Function  SequencerScripting.MovieSceneScriptingEventKey.SetTime
// Offset::0x2E27020;
void FMovieSceneScriptingEventKey::SetTime(FFrameNumber NewFrameNumber,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingEventKey.SetValue
// Offset::0x2E312F0;
void FMovieSceneScriptingEventKey::SetValue(FMovieSceneEvent InNewValue);


// Function  SequencerScripting.MovieSceneScriptingEventChannel.AddKey
// Offset::0x2E318D0;
FMovieSceneScriptingEventKey* FMovieSceneScriptingEventChannel::AddKey(FFrameNumber InTime,FMovieSceneEvent NewValue,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingEventChannel.GetKeys
// Offset::0x2E27B80;
TArray<FMovieSceneScriptingKey*> FMovieSceneScriptingEventChannel::GetKeys();


// Function  SequencerScripting.MovieSceneScriptingEventChannel.RemoveKey
// Offset::0x2E27C00;
void FMovieSceneScriptingEventChannel::RemoveKey(FMovieSceneScriptingKey* Key);


// Function  SequencerScripting.MovieSceneScriptingFloatKey.GetArriveTangent
// Offset::0x2E32240;
float FMovieSceneScriptingFloatKey::GetArriveTangent();


// Function  SequencerScripting.MovieSceneScriptingFloatKey.GetArriveTangentWeight
// Offset::0x2873D20;
float FMovieSceneScriptingFloatKey::GetArriveTangentWeight();


// Function  SequencerScripting.MovieSceneScriptingFloatKey.GetInterpolationMode
// Offset::0x179DE10;
enum class ERichCurveInterpMode FMovieSceneScriptingFloatKey::GetInterpolationMode();


// Function  SequencerScripting.MovieSceneScriptingFloatKey.GetLeaveTangent
// Offset::0x2E32170;
float FMovieSceneScriptingFloatKey::GetLeaveTangent();


// Function  SequencerScripting.MovieSceneScriptingFloatKey.GetLeaveTangentWeight
// Offset::0x2873D80;
float FMovieSceneScriptingFloatKey::GetLeaveTangentWeight();


// Function  SequencerScripting.MovieSceneScriptingFloatKey.GetTangentMode
// Offset::0x26F8BD0;
enum class ERichCurveTangentMode FMovieSceneScriptingFloatKey::GetTangentMode();


// Function  SequencerScripting.MovieSceneScriptingFloatKey.GetTangentWeightMode
// Offset::0x1AA60D0;
enum class ERichCurveTangentWeightMode FMovieSceneScriptingFloatKey::GetTangentWeightMode();


// Function  SequencerScripting.MovieSceneScriptingFloatKey.GetTime
// Offset::0x2E271A0;
FFrameTime FMovieSceneScriptingFloatKey::GetTime(enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingFloatKey.GetValue
// Offset::0x2E323B0;
float FMovieSceneScriptingFloatKey::GetValue();


// Function  SequencerScripting.MovieSceneScriptingFloatKey.SetArriveTangent
// Offset::0x2E321A0;
void FMovieSceneScriptingFloatKey::SetArriveTangent(float InNewValue);


// Function  SequencerScripting.MovieSceneScriptingFloatKey.SetArriveTangentWeight
// Offset::0x2E31F90;
void FMovieSceneScriptingFloatKey::SetArriveTangentWeight(float InNewValue);


// Function  SequencerScripting.MovieSceneScriptingFloatKey.SetInterpolationMode
// Offset::0x2E32310;
void FMovieSceneScriptingFloatKey::SetInterpolationMode(enum class ERichCurveInterpMode InNewValue);


// Function  SequencerScripting.MovieSceneScriptingFloatKey.SetLeaveTangent
// Offset::0x2E320D0;
void FMovieSceneScriptingFloatKey::SetLeaveTangent(float InNewValue);


// Function  SequencerScripting.MovieSceneScriptingFloatKey.SetLeaveTangentWeight
// Offset::0x2873DB0;
void FMovieSceneScriptingFloatKey::SetLeaveTangentWeight(float InNewValue);


// Function  SequencerScripting.MovieSceneScriptingFloatKey.SetTangentMode
// Offset::0x2E32270;
void FMovieSceneScriptingFloatKey::SetTangentMode(enum class ERichCurveTangentMode InNewValue);


// Function  SequencerScripting.MovieSceneScriptingFloatKey.SetTangentWeightMode
// Offset::0x2E32030;
void FMovieSceneScriptingFloatKey::SetTangentWeightMode(enum class ERichCurveTangentWeightMode InNewValue);


// Function  SequencerScripting.MovieSceneScriptingFloatKey.SetTime
// Offset::0x2E323E0;
void FMovieSceneScriptingFloatKey::SetTime(FFrameNumber NewFrameNumber,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingFloatKey.SetValue
// Offset::0x2704920;
void FMovieSceneScriptingFloatKey::SetValue(float InNewValue);


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.AddKey
// Offset::0x2E34220;
FMovieSceneScriptingFloatKey* FMovieSceneScriptingFloatChannel::AddKey(FFrameNumber InTime,float NewValue,float SubFrame,enum class ESequenceTimeUnit TimeUnit,enum class EMovieSceneKeyInterpolation InInterpolation);


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.ComputeEffectiveRange
// Offset::0x2E33CB0;
FSequencerScriptingRange FMovieSceneScriptingFloatChannel::ComputeEffectiveRange();


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.EvaluateKeys
// Offset::0x2E33E50;
TArray<float> FMovieSceneScriptingFloatChannel::EvaluateKeys(FSequencerScriptingRange Range,FFrameRate FrameRate);


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.GetDefault
// Offset::0x2E335A0;
float FMovieSceneScriptingFloatChannel::GetDefault();


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.GetKeys
// Offset::0x2E27B80;
TArray<FMovieSceneScriptingKey*> FMovieSceneScriptingFloatChannel::GetKeys();


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.GetNumKeys
// Offset::0x2E34150;
int32_t FMovieSceneScriptingFloatChannel::GetNumKeys();


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.GetPostInfinityExtrapolation
// Offset::0x2E33A40;
enum class ERichCurveExtrapolation FMovieSceneScriptingFloatChannel::GetPostInfinityExtrapolation();


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.GetPreInfinityExtrapolation
// Offset::0x2E33C00;
enum class ERichCurveExtrapolation FMovieSceneScriptingFloatChannel::GetPreInfinityExtrapolation();


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.HasDefault
// Offset::0x2E33320;
bool FMovieSceneScriptingFloatChannel::HasDefault();


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.RemoveDefault
// Offset::0x2E33470;
void FMovieSceneScriptingFloatChannel::RemoveDefault();


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.RemoveKey
// Offset::0x2E27C00;
void FMovieSceneScriptingFloatChannel::RemoveKey(FMovieSceneScriptingKey* Key);


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.SetDefault
// Offset::0x2E33750;
void FMovieSceneScriptingFloatChannel::SetDefault(float InDefaultValue);


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.SetPostInfinityExtrapolation
// Offset::0x2E33930;
void FMovieSceneScriptingFloatChannel::SetPostInfinityExtrapolation(enum class ERichCurveExtrapolation InExtrapolation);


// Function  SequencerScripting.MovieSceneScriptingFloatChannel.SetPreInfinityExtrapolation
// Offset::0x2E33AF0;
void FMovieSceneScriptingFloatChannel::SetPreInfinityExtrapolation(enum class ERichCurveExtrapolation InExtrapolation);


// Function  SequencerScripting.MovieSceneScriptingIntegerKey.GetTime
// Offset::0x2E271A0;
FFrameTime FMovieSceneScriptingIntegerKey::GetTime(enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingIntegerKey.GetValue
// Offset::0x2E39F20;
int32_t FMovieSceneScriptingIntegerKey::GetValue();


// Function  SequencerScripting.MovieSceneScriptingIntegerKey.SetTime
// Offset::0x2E27020;
void FMovieSceneScriptingIntegerKey::SetTime(FFrameNumber NewFrameNumber,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingIntegerKey.SetValue
// Offset::0x2E39DC0;
void FMovieSceneScriptingIntegerKey::SetValue(int32_t InNewValue);


// Function  SequencerScripting.MovieSceneScriptingIntegerChannel.AddKey
// Offset::0x2E3A910;
FMovieSceneScriptingIntegerKey* FMovieSceneScriptingIntegerChannel::AddKey(FFrameNumber InTime,int32_t NewValue,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingIntegerChannel.GetDefault
// Offset::0x2E3A610;
int32_t FMovieSceneScriptingIntegerChannel::GetDefault();


// Function  SequencerScripting.MovieSceneScriptingIntegerChannel.GetKeys
// Offset::0x2E27B80;
TArray<FMovieSceneScriptingKey*> FMovieSceneScriptingIntegerChannel::GetKeys();


// Function  SequencerScripting.MovieSceneScriptingIntegerChannel.HasDefault
// Offset::0x2E3A370;
bool FMovieSceneScriptingIntegerChannel::HasDefault();


// Function  SequencerScripting.MovieSceneScriptingIntegerChannel.RemoveDefault
// Offset::0x2E3A4C0;
void FMovieSceneScriptingIntegerChannel::RemoveDefault();


// Function  SequencerScripting.MovieSceneScriptingIntegerChannel.RemoveKey
// Offset::0x2E27C00;
void FMovieSceneScriptingIntegerChannel::RemoveKey(FMovieSceneScriptingKey* Key);


// Function  SequencerScripting.MovieSceneScriptingIntegerChannel.SetDefault
// Offset::0x2E3A770;
void FMovieSceneScriptingIntegerChannel::SetDefault(int32_t InDefaultValue);


// Function  SequencerScripting.MovieSceneScriptingObjectPathKey.GetTime
// Offset::0x2E271A0;
FFrameTime FMovieSceneScriptingObjectPathKey::GetTime(enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingObjectPathKey.GetValue
// Offset::0x2E3B430;
FObject* FMovieSceneScriptingObjectPathKey::GetValue();


// Function  SequencerScripting.MovieSceneScriptingObjectPathKey.SetTime
// Offset::0x2E27020;
void FMovieSceneScriptingObjectPathKey::SetTime(FFrameNumber NewFrameNumber,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingObjectPathKey.SetValue
// Offset::0x2E3B180;
void FMovieSceneScriptingObjectPathKey::SetValue(FObject* InNewValue);


// Function  SequencerScripting.MovieSceneScriptingObjectPathChannel.AddKey
// Offset::0x2E3BBF0;
FMovieSceneScriptingObjectPathKey* FMovieSceneScriptingObjectPathChannel::AddKey(FFrameNumber InTime,FObject* NewValue,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingObjectPathChannel.GetDefault
// Offset::0x2E3B990;
FObject* FMovieSceneScriptingObjectPathChannel::GetDefault();


// Function  SequencerScripting.MovieSceneScriptingObjectPathChannel.GetKeys
// Offset::0x2E27B80;
TArray<FMovieSceneScriptingKey*> FMovieSceneScriptingObjectPathChannel::GetKeys();


// Function  SequencerScripting.MovieSceneScriptingObjectPathChannel.HasDefault
// Offset::0x2E3B940;
bool FMovieSceneScriptingObjectPathChannel::HasDefault();


// Function  SequencerScripting.MovieSceneScriptingObjectPathChannel.RemoveDefault
// Offset::0x2E277D0;
void FMovieSceneScriptingObjectPathChannel::RemoveDefault();


// Function  SequencerScripting.MovieSceneScriptingObjectPathChannel.RemoveKey
// Offset::0x2E27C00;
void FMovieSceneScriptingObjectPathChannel::RemoveKey(FMovieSceneScriptingKey* Key);


// Function  SequencerScripting.MovieSceneScriptingObjectPathChannel.SetDefault
// Offset::0x2E3BAF0;
void FMovieSceneScriptingObjectPathChannel::SetDefault(FObject* InDefaultValue);


// Function  SequencerScripting.MovieSceneScriptingStringKey.GetTime
// Offset::0x2E271A0;
FFrameTime FMovieSceneScriptingStringKey::GetTime(enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingStringKey.GetValue
// Offset::0x2E3C660;
FString FMovieSceneScriptingStringKey::GetValue();


// Function  SequencerScripting.MovieSceneScriptingStringKey.SetTime
// Offset::0x2E27020;
void FMovieSceneScriptingStringKey::SetTime(FFrameNumber NewFrameNumber,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingStringKey.SetValue
// Offset::0x2E3C4D0;
void FMovieSceneScriptingStringKey::SetValue(FString InNewValue);


// Function  SequencerScripting.MovieSceneScriptingStringChannel.AddKey
// Offset::0x2E3CF50;
FMovieSceneScriptingStringKey* FMovieSceneScriptingStringChannel::AddKey(FFrameNumber InTime,FString NewValue,float SubFrame,enum class ESequenceTimeUnit TimeUnit);


// Function  SequencerScripting.MovieSceneScriptingStringChannel.GetDefault
// Offset::0x2E3CC40;
FString FMovieSceneScriptingStringChannel::GetDefault();


// Function  SequencerScripting.MovieSceneScriptingStringChannel.GetKeys
// Offset::0x2E27B80;
TArray<FMovieSceneScriptingKey*> FMovieSceneScriptingStringChannel::GetKeys();


// Function  SequencerScripting.MovieSceneScriptingStringChannel.HasDefault
// Offset::0x2E3CB20;
bool FMovieSceneScriptingStringChannel::HasDefault();


// Function  SequencerScripting.MovieSceneScriptingStringChannel.RemoveDefault
// Offset::0x2E2FB30;
void FMovieSceneScriptingStringChannel::RemoveDefault();


// Function  SequencerScripting.MovieSceneScriptingStringChannel.RemoveKey
// Offset::0x2E27C00;
void FMovieSceneScriptingStringChannel::RemoveKey(FMovieSceneScriptingKey* Key);


// Function  SequencerScripting.MovieSceneScriptingStringChannel.SetDefault
// Offset::0x2E3CDA0;
void FMovieSceneScriptingStringChannel::SetDefault(FString InDefaultValue);


// Function  SequencerScripting.MovieSceneSectionExtensions.FindChannelsByType
// Offset::0x2E3D970;
TArray<FMovieSceneScriptingChannel*> FMovieSceneSectionExtensions::FindChannelsByType(FMovieSceneSection* Section,FMovieSceneScriptingChannel* ChannelType);


// Function  SequencerScripting.MovieSceneSectionExtensions.GetAllChannels
// Offset::0x2E3DA90;
TArray<FMovieSceneScriptingChannel*> FMovieSceneSectionExtensions::GetAllChannels(FMovieSceneSection* Section);


// Function  SequencerScripting.MovieSceneSectionExtensions.GetChannels
// Offset::0x2E3DB60;
TArray<FMovieSceneScriptingChannel*> FMovieSceneSectionExtensions::GetChannels(FMovieSceneSection* Section);


// Function  SequencerScripting.MovieSceneSectionExtensions.GetChannelsByType
// Offset::0x2E3D970;
TArray<FMovieSceneScriptingChannel*> FMovieSceneSectionExtensions::GetChannelsByType(FMovieSceneSection* Section,FMovieSceneScriptingChannel* ChannelType);


// Function  SequencerScripting.MovieSceneSectionExtensions.GetEndFrame
// Offset::0x2E3E470;
int32_t FMovieSceneSectionExtensions::GetEndFrame(FMovieSceneSection* Section);


// Function  SequencerScripting.MovieSceneSectionExtensions.GetEndFrameSeconds
// Offset::0x2E3E3D0;
float FMovieSceneSectionExtensions::GetEndFrameSeconds(FMovieSceneSection* Section);


// Function  SequencerScripting.MovieSceneSectionExtensions.GetParentSequenceFrame
// Offset::0x2E3D840;
int32_t FMovieSceneSectionExtensions::GetParentSequenceFrame(FMovieSceneSubSection* Section,int32_t InFrame,FMovieSceneSequence* ParentSequence);


// Function  SequencerScripting.MovieSceneSectionExtensions.GetStartFrame
// Offset::0x2E3E650;
int32_t FMovieSceneSectionExtensions::GetStartFrame(FMovieSceneSection* Section);


// Function  SequencerScripting.MovieSceneSectionExtensions.GetStartFrameSeconds
// Offset::0x2E3E5B0;
float FMovieSceneSectionExtensions::GetStartFrameSeconds(FMovieSceneSection* Section);


// Function  SequencerScripting.MovieSceneSectionExtensions.HasEndFrame
// Offset::0x2E3E510;
bool FMovieSceneSectionExtensions::HasEndFrame(FMovieSceneSection* Section);


// Function  SequencerScripting.MovieSceneSectionExtensions.HasStartFrame
// Offset::0x2E3E6F0;
bool FMovieSceneSectionExtensions::HasStartFrame(FMovieSceneSection* Section);


// Function  SequencerScripting.MovieSceneSectionExtensions.SetEndFrame
// Offset::0x2E3DDF0;
void FMovieSceneSectionExtensions::SetEndFrame(FMovieSceneSection* Section,int32_t EndFrame);


// Function  SequencerScripting.MovieSceneSectionExtensions.SetEndFrameBounded
// Offset::0x2E3DC30;
void FMovieSceneSectionExtensions::SetEndFrameBounded(FMovieSceneSection* Section,bool bIsBounded);


// Function  SequencerScripting.MovieSceneSectionExtensions.SetEndFrameSeconds
// Offset::0x2E3DD10;
void FMovieSceneSectionExtensions::SetEndFrameSeconds(FMovieSceneSection* Section,float EndTime);


// Function  SequencerScripting.MovieSceneSectionExtensions.SetRange
// Offset::0x2E3E2A0;
void FMovieSceneSectionExtensions::SetRange(FMovieSceneSection* Section,int32_t StartFrame,int32_t EndFrame);


// Function  SequencerScripting.MovieSceneSectionExtensions.SetRangeSeconds
// Offset::0x2E3E170;
void FMovieSceneSectionExtensions::SetRangeSeconds(FMovieSceneSection* Section,float StartTime,float EndTime);


// Function  SequencerScripting.MovieSceneSectionExtensions.SetStartFrame
// Offset::0x2E3E090;
void FMovieSceneSectionExtensions::SetStartFrame(FMovieSceneSection* Section,int32_t StartFrame);


// Function  SequencerScripting.MovieSceneSectionExtensions.SetStartFrameBounded
// Offset::0x2E3DED0;
void FMovieSceneSectionExtensions::SetStartFrameBounded(FMovieSceneSection* Section,bool bIsBounded);


// Function  SequencerScripting.MovieSceneSectionExtensions.SetStartFrameSeconds
// Offset::0x2E3DFB0;
void FMovieSceneSectionExtensions::SetStartFrameSeconds(FMovieSceneSection* Section,float StartTime);


// Function  SequencerScripting.MovieSceneSequenceExtensions.AddMarkedFrame
// Offset::0x2E3FB00;
int32_t FMovieSceneSequenceExtensions::AddMarkedFrame(FMovieSceneSequence* Sequence,FMovieSceneMarkedFrame InMarkedFrame);


// Function  SequencerScripting.MovieSceneSequenceExtensions.AddMasterTrack
// Offset::0x2E41F50;
FMovieSceneTrack* FMovieSceneSequenceExtensions::AddMasterTrack(FMovieSceneSequence* Sequence,FMovieSceneTrack* TrackType);


// Function  SequencerScripting.MovieSceneSequenceExtensions.AddPossessable
// Offset::0x2E40670;
FSequencerBindingProxy FMovieSceneSequenceExtensions::AddPossessable(FMovieSceneSequence* Sequence,FObject* ObjectToPossess);


// Function  SequencerScripting.MovieSceneSequenceExtensions.AddRootFolderToSequence
// Offset::0x2E3FD40;
FMovieSceneFolder* FMovieSceneSequenceExtensions::AddRootFolderToSequence(FMovieSceneSequence* Sequence,FString NewFolderName);


// Function  SequencerScripting.MovieSceneSequenceExtensions.AddSpawnableFromClass
// Offset::0x2E40570;
FSequencerBindingProxy FMovieSceneSequenceExtensions::AddSpawnableFromClass(FMovieSceneSequence* Sequence,FObject* ClassToSpawn);


// Function  SequencerScripting.MovieSceneSequenceExtensions.AddSpawnableFromInstance
// Offset::0x2E40570;
FSequencerBindingProxy FMovieSceneSequenceExtensions::AddSpawnableFromInstance(FMovieSceneSequence* Sequence,FObject* ObjectToSpawn);


// Function  SequencerScripting.MovieSceneSequenceExtensions.DeleteMarkedFrame
// Offset::0x2E3F8F0;
void FMovieSceneSequenceExtensions::DeleteMarkedFrame(FMovieSceneSequence* Sequence,int32_t DeleteIndex);


// Function  SequencerScripting.MovieSceneSequenceExtensions.DeleteMarkedFrames
// Offset::0x2E3F860;
void FMovieSceneSequenceExtensions::DeleteMarkedFrames(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.FindBindingById
// Offset::0x2E409E0;
FSequencerBindingProxy FMovieSceneSequenceExtensions::FindBindingById(FMovieSceneSequence* Sequence,FGuid BindingID);


// Function  SequencerScripting.MovieSceneSequenceExtensions.FindBindingByName
// Offset::0x2E40AE0;
FSequencerBindingProxy FMovieSceneSequenceExtensions::FindBindingByName(FMovieSceneSequence* Sequence,FString Name);


// Function  SequencerScripting.MovieSceneSequenceExtensions.FindMarkedFrameByFrameNumber
// Offset::0x2E3F600;
int32_t FMovieSceneSequenceExtensions::FindMarkedFrameByFrameNumber(FMovieSceneSequence* Sequence,FFrameNumber InFrameNumber);


// Function  SequencerScripting.MovieSceneSequenceExtensions.FindMarkedFrameByLabel
// Offset::0x2E3F6E0;
int32_t FMovieSceneSequenceExtensions::FindMarkedFrameByLabel(FMovieSceneSequence* Sequence,FString InLabel);


// Function  SequencerScripting.MovieSceneSequenceExtensions.FindMasterTracksByExactType
// Offset::0x2E42030;
TArray<FMovieSceneTrack*> FMovieSceneSequenceExtensions::FindMasterTracksByExactType(FMovieSceneSequence* Sequence,FMovieSceneTrack* TrackType);


// Function  SequencerScripting.MovieSceneSequenceExtensions.FindMasterTracksByType
// Offset::0x2E42150;
TArray<FMovieSceneTrack*> FMovieSceneSequenceExtensions::FindMasterTracksByType(FMovieSceneSequence* Sequence,FMovieSceneTrack* TrackType);


// Function  SequencerScripting.MovieSceneSequenceExtensions.FindNextMarkedFrame
// Offset::0x2E3F4D0;
int32_t FMovieSceneSequenceExtensions::FindNextMarkedFrame(FMovieSceneSequence* Sequence,FFrameNumber InFrameNumber,bool bForward);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetBindingID
// Offset::0x2E401D0;
FMovieSceneObjectBindingID FMovieSceneSequenceExtensions::GetBindingID(FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetBindings
// Offset::0x2E40910;
TArray<FSequencerBindingProxy> FMovieSceneSequenceExtensions::GetBindings(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetClockSource
// Offset::0x2E40CE0;
enum class EUpdateClockSource FMovieSceneSequenceExtensions::GetClockSource(FMovieSceneSequence* InSequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetDisplayRate
// Offset::0x2E41DD0;
FFrameRate FMovieSceneSequenceExtensions::GetDisplayRate(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetEvaluationType
// Offset::0x2E40E60;
enum class EMovieSceneEvaluationType FMovieSceneSequenceExtensions::GetEvaluationType(FMovieSceneSequence* InSequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetMarkedFrames
// Offset::0x2E3FC10;
TArray<FMovieSceneMarkedFrame> FMovieSceneSequenceExtensions::GetMarkedFrames(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetMasterTracks
// Offset::0x2E42270;
TArray<FMovieSceneTrack*> FMovieSceneSequenceExtensions::GetMasterTracks(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetMovieScene
// Offset::0x2E42340;
FMovieScene* FMovieSceneSequenceExtensions::GetMovieScene(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetPlaybackEnd
// Offset::0x2E41580;
int32_t FMovieSceneSequenceExtensions::GetPlaybackEnd(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetPlaybackEndSeconds
// Offset::0x2E414E0;
float FMovieSceneSequenceExtensions::GetPlaybackEndSeconds(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetPlaybackRange
// Offset::0x2E41760;
FSequencerScriptingRange FMovieSceneSequenceExtensions::GetPlaybackRange(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetPlaybackStart
// Offset::0x2E416C0;
int32_t FMovieSceneSequenceExtensions::GetPlaybackStart(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetPlaybackStartSeconds
// Offset::0x2E41620;
float FMovieSceneSequenceExtensions::GetPlaybackStartSeconds(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetPortableBindingID
// Offset::0x2E40070;
FMovieSceneObjectBindingID FMovieSceneSequenceExtensions::GetPortableBindingID(FMovieSceneSequence* MasterSequence,FMovieSceneSequence* DestinationSequence,FSequencerBindingProxy InBinding);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetPossessables
// Offset::0x2E40770;
TArray<FSequencerBindingProxy> FMovieSceneSequenceExtensions::GetPossessables(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetRootFoldersInSequence
// Offset::0x2E3FE80;
TArray<FMovieSceneFolder*> FMovieSceneSequenceExtensions::GetRootFoldersInSequence(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetSpawnables
// Offset::0x2E40840;
TArray<FSequencerBindingProxy> FMovieSceneSequenceExtensions::GetSpawnables(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetTickResolution
// Offset::0x2E41C50;
FFrameRate FMovieSceneSequenceExtensions::GetTickResolution(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetTimecodeSource
// Offset::0x2E40C30;
FTimecode FMovieSceneSequenceExtensions::GetTimecodeSource(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetViewRangeEnd
// Offset::0x2E40FE0;
float FMovieSceneSequenceExtensions::GetViewRangeEnd(FMovieSceneSequence* InSequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetViewRangeStart
// Offset::0x2E40FE0;
float FMovieSceneSequenceExtensions::GetViewRangeStart(FMovieSceneSequence* InSequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetWorkRangeEnd
// Offset::0x2E40FE0;
float FMovieSceneSequenceExtensions::GetWorkRangeEnd(FMovieSceneSequence* InSequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.GetWorkRangeStart
// Offset::0x2E40FE0;
float FMovieSceneSequenceExtensions::GetWorkRangeStart(FMovieSceneSequence* InSequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.IsReadOnly
// Offset::0x2E3F350;
bool FMovieSceneSequenceExtensions::IsReadOnly(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneSequenceExtensions.LocateBoundObjects
// Offset::0x2E403F0;
TArray<FObject*> FMovieSceneSequenceExtensions::LocateBoundObjects(FMovieSceneSequence* Sequence,FSequencerBindingProxy InBinding,FObject* Context);


// Function  SequencerScripting.MovieSceneSequenceExtensions.MakeBindingID
// Offset::0x2E40290;
FMovieSceneObjectBindingID FMovieSceneSequenceExtensions::MakeBindingID(FMovieSceneSequence* MasterSequence,FSequencerBindingProxy InBinding,enum class EMovieSceneObjectBindingSpace Space);


// Function  SequencerScripting.MovieSceneSequenceExtensions.MakeRange
// Offset::0x2E41950;
FSequencerScriptingRange FMovieSceneSequenceExtensions::MakeRange(FMovieSceneSequence* Sequence,int32_t StartFrame,int32_t Duration);


// Function  SequencerScripting.MovieSceneSequenceExtensions.MakeRangeSeconds
// Offset::0x2E41810;
FSequencerScriptingRange FMovieSceneSequenceExtensions::MakeRangeSeconds(FMovieSceneSequence* Sequence,float StartTime,float Duration);


// Function  SequencerScripting.MovieSceneSequenceExtensions.RemoveMasterTrack
// Offset::0x2E41E70;
bool FMovieSceneSequenceExtensions::RemoveMasterTrack(FMovieSceneSequence* Sequence,FMovieSceneTrack* MasterTrack);


// Function  SequencerScripting.MovieSceneSequenceExtensions.ResolveBindingID
// Offset::0x2E3FF50;
FSequencerBindingProxy FMovieSceneSequenceExtensions::ResolveBindingID(FMovieSceneSequence* MasterSequence,FMovieSceneObjectBindingID InObjectBindingID);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetClockSource
// Offset::0x2E40D80;
void FMovieSceneSequenceExtensions::SetClockSource(FMovieSceneSequence* InSequence,enum class EUpdateClockSource InClockSource);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetDisplayRate
// Offset::0x2E41CF0;
void FMovieSceneSequenceExtensions::SetDisplayRate(FMovieSceneSequence* Sequence,FFrameRate DisplayRate);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetEvaluationType
// Offset::0x2E40F00;
void FMovieSceneSequenceExtensions::SetEvaluationType(FMovieSceneSequence* InSequence,enum class EMovieSceneEvaluationType InEvaluationType);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetMarkedFrame
// Offset::0x2E3F9D0;
void FMovieSceneSequenceExtensions::SetMarkedFrame(FMovieSceneSequence* Sequence,int32_t InMarkIndex,FFrameNumber InFrameNumber);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetPlaybackEnd
// Offset::0x2E41240;
void FMovieSceneSequenceExtensions::SetPlaybackEnd(FMovieSceneSequence* Sequence,int32_t EndFrame);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetPlaybackEndSeconds
// Offset::0x2E41160;
void FMovieSceneSequenceExtensions::SetPlaybackEndSeconds(FMovieSceneSequence* Sequence,float EndTime);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetPlaybackStart
// Offset::0x2E41400;
void FMovieSceneSequenceExtensions::SetPlaybackStart(FMovieSceneSequence* Sequence,int32_t StartFrame);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetPlaybackStartSeconds
// Offset::0x2E41320;
void FMovieSceneSequenceExtensions::SetPlaybackStartSeconds(FMovieSceneSequence* Sequence,float StartTime);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetReadOnly
// Offset::0x2E3F3F0;
void FMovieSceneSequenceExtensions::SetReadOnly(FMovieSceneSequence* Sequence,bool bInReadOnly);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetTickResolution
// Offset::0x2E41B70;
void FMovieSceneSequenceExtensions::SetTickResolution(FMovieSceneSequence* Sequence,FFrameRate TickResolution);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetTickResolutionDirectly
// Offset::0x2E41A90;
void FMovieSceneSequenceExtensions::SetTickResolutionDirectly(FMovieSceneSequence* Sequence,FFrameRate TickResolution);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetViewRangeEnd
// Offset::0x2E41080;
void FMovieSceneSequenceExtensions::SetViewRangeEnd(FMovieSceneSequence* InSequence,float EndTimeInSeconds);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetViewRangeStart
// Offset::0x2E41080;
void FMovieSceneSequenceExtensions::SetViewRangeStart(FMovieSceneSequence* InSequence,float StartTimeInSeconds);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetWorkRangeEnd
// Offset::0x2E41080;
void FMovieSceneSequenceExtensions::SetWorkRangeEnd(FMovieSceneSequence* InSequence,float EndTimeInSeconds);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SetWorkRangeStart
// Offset::0x2E41080;
void FMovieSceneSequenceExtensions::SetWorkRangeStart(FMovieSceneSequence* InSequence,float StartTimeInSeconds);


// Function  SequencerScripting.MovieSceneSequenceExtensions.SortMarkedFrames
// Offset::0x2E3F7D0;
void FMovieSceneSequenceExtensions::SortMarkedFrames(FMovieSceneSequence* Sequence);


// Function  SequencerScripting.MovieSceneTrackExtensions.AddSection
// Offset::0x2E47920;
FMovieSceneSection* FMovieSceneTrackExtensions::AddSection(FMovieSceneTrack* Track);


// Function  SequencerScripting.MovieSceneTrackExtensions.GetColorTint
// Offset::0x2E25900;
FColor FMovieSceneTrackExtensions::GetColorTint(FMovieSceneTrack* Track);


// Function  SequencerScripting.MovieSceneTrackExtensions.GetDisplayName
// Offset::0x2E47C60;
FText FMovieSceneTrackExtensions::GetDisplayName(FMovieSceneTrack* Track);


// Function  SequencerScripting.MovieSceneTrackExtensions.GetSections
// Offset::0x2E47850;
TArray<FMovieSceneSection*> FMovieSceneTrackExtensions::GetSections(FMovieSceneTrack* Track);


// Function  SequencerScripting.MovieSceneTrackExtensions.GetSectionToKey
// Offset::0x2E47470;
FMovieSceneSection* FMovieSceneTrackExtensions::GetSectionToKey(FMovieSceneTrack* Track);


// Function  SequencerScripting.MovieSceneTrackExtensions.GetSortingOrder
// Offset::0x2E476D0;
int32_t FMovieSceneTrackExtensions::GetSortingOrder(FMovieSceneTrack* Track);


// Function  SequencerScripting.MovieSceneTrackExtensions.GetTrackRowDisplayName
// Offset::0x2E479C0;
FText FMovieSceneTrackExtensions::GetTrackRowDisplayName(FMovieSceneTrack* Track,int32_t RowIndex);


// Function  SequencerScripting.MovieSceneTrackExtensions.RemoveSection
// Offset::0x2E47770;
void FMovieSceneTrackExtensions::RemoveSection(FMovieSceneTrack* Track,FMovieSceneSection* Section);


// Function  SequencerScripting.MovieSceneTrackExtensions.SetColorTint
// Offset::0x2E47510;
void FMovieSceneTrackExtensions::SetColorTint(FMovieSceneTrack* Track,FColor ColorTint);


// Function  SequencerScripting.MovieSceneTrackExtensions.SetDisplayName
// Offset::0x2E47D40;
void FMovieSceneTrackExtensions::SetDisplayName(FMovieSceneTrack* Track,FText InName);


// Function  SequencerScripting.MovieSceneTrackExtensions.SetSectionToKey
// Offset::0x2E47390;
void FMovieSceneTrackExtensions::SetSectionToKey(FMovieSceneTrack* Track,FMovieSceneSection* Section);


// Function  SequencerScripting.MovieSceneTrackExtensions.SetSortingOrder
// Offset::0x2E475F0;
void FMovieSceneTrackExtensions::SetSortingOrder(FMovieSceneTrack* Track,int32_t SortingOrder);


// Function  SequencerScripting.MovieSceneTrackExtensions.SetTrackRowDisplayName
// Offset::0x2E47AF0;
void FMovieSceneTrackExtensions::SetTrackRowDisplayName(FMovieSceneTrack* Track,FText InName,int32_t RowIndex);


// Function  SequencerScripting.MovieSceneFloatVectorTrackExtensions.GetNumChannelsUsed
// Offset::0x2E48750;
int32_t FMovieSceneFloatVectorTrackExtensions::GetNumChannelsUsed(FMovieSceneFloatVectorTrack* Track);


// Function  SequencerScripting.MovieSceneFloatVectorTrackExtensions.SetNumChannelsUsed
// Offset::0x2E487F0;
void FMovieSceneFloatVectorTrackExtensions::SetNumChannelsUsed(FMovieSceneFloatVectorTrack* Track,int32_t InNumChannelsUsed);


// Function  SequencerScripting.MovieSceneDoubleVectorTrackExtensions.GetNumChannelsUsed
// Offset::0x2E48750;
int32_t FMovieSceneDoubleVectorTrackExtensions::GetNumChannelsUsed(FMovieSceneDoubleVectorTrack* Track);


// Function  SequencerScripting.MovieSceneDoubleVectorTrackExtensions.SetNumChannelsUsed
// Offset::0x2E487F0;
void FMovieSceneDoubleVectorTrackExtensions::SetNumChannelsUsed(FMovieSceneDoubleVectorTrack* Track,int32_t InNumChannelsUsed);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.GetEndFrame
// Offset::0x2E491C0;
int32_t FSequencerScriptingRangeExtensions::GetEndFrame(FSequencerScriptingRange Range);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.GetEndSeconds
// Offset::0x2E49500;
float FSequencerScriptingRangeExtensions::GetEndSeconds(FSequencerScriptingRange Range);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.GetStartFrame
// Offset::0x2E49270;
int32_t FSequencerScriptingRangeExtensions::GetStartFrame(FSequencerScriptingRange Range);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.GetStartSeconds
// Offset::0x2E495B0;
float FSequencerScriptingRangeExtensions::GetStartSeconds(FSequencerScriptingRange Range);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.HasEnd
// Offset::0x2E497C0;
bool FSequencerScriptingRangeExtensions::HasEnd(FSequencerScriptingRange Range);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.HasStart
// Offset::0x2E49870;
bool FSequencerScriptingRangeExtensions::HasStart(FSequencerScriptingRange Range);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.RemoveEnd
// Offset::0x2E49660;
void FSequencerScriptingRangeExtensions::RemoveEnd(FSequencerScriptingRange Range);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.RemoveStart
// Offset::0x2E49710;
void FSequencerScriptingRangeExtensions::RemoveStart(FSequencerScriptingRange Range);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.SetEndFrame
// Offset::0x2E48FE0;
void FSequencerScriptingRangeExtensions::SetEndFrame(FSequencerScriptingRange Range,int32_t End);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.SetEndSeconds
// Offset::0x2E49320;
void FSequencerScriptingRangeExtensions::SetEndSeconds(FSequencerScriptingRange Range,float End);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.SetStartFrame
// Offset::0x2E490D0;
void FSequencerScriptingRangeExtensions::SetStartFrame(FSequencerScriptingRange Range,int32_t Start);


// Function  SequencerScripting.SequencerScriptingRangeExtensions.SetStartSeconds
// Offset::0x2E49410;
void FSequencerScriptingRangeExtensions::SetStartSeconds(FSequencerScriptingRange Range,float Start);


// Function  XeSSBlueprint.XeSSBlueprintLibrary.GetDefaultXeSSQualityMode
// Offset::0x2E87780;
enum class EXeSSQualityMode FXeSSBlueprintLibrary::GetDefaultXeSSQualityMode(FIntPoint ScreenResolution);


// Function  XeSSBlueprint.XeSSBlueprintLibrary.GetSupportedXeSSQualityModes
// Offset::0x2E87840;
TArray<enum class EXeSSQualityMode> FXeSSBlueprintLibrary::GetSupportedXeSSQualityModes();


// Function  XeSSBlueprint.XeSSBlueprintLibrary.GetXeSSQualityMode
// Offset::0x2E87810;
enum class EXeSSQualityMode FXeSSBlueprintLibrary::GetXeSSQualityMode();


// Function  XeSSBlueprint.XeSSBlueprintLibrary.GetXeSSQualityModeInformation
// Offset::0x2E87600;
bool FXeSSBlueprintLibrary::GetXeSSQualityModeInformation(enum class EXeSSQualityMode QualityMode,float ScreenPercentage);


// Function  XeSSBlueprint.XeSSBlueprintLibrary.IsXeSSSupported
// Offset::0x2E878C0;
bool FXeSSBlueprintLibrary::IsXeSSSupported();


// Function  XeSSBlueprint.XeSSBlueprintLibrary.SetXeSSQualityMode
// Offset::0x2E876F0;
void FXeSSBlueprintLibrary::SetXeSSQualityMode(enum class EXeSSQualityMode QualityMode);


// Function  AnimationBudgetAllocator.AnimationBudgetBlueprintLibrary.EnableAnimationBudget
// Offset::0x2E901F0;
void FAnimationBudgetBlueprintLibrary::EnableAnimationBudget(FObject* WorldContextObject,bool bEnabled);


// Function  AnimationBudgetAllocator.AnimationBudgetBlueprintLibrary.SetAnimationBudgetParameters
// Offset::0x2E90080;
void FAnimationBudgetBlueprintLibrary::SetAnimationBudgetParameters(FObject* WorldContextObject,FAnimationBudgetAllocatorParameters InParameters);


// Function  AnimationBudgetAllocator.EmbarkAnimationBudgetBlueprintLibrary.GetAllRegisteredComponents
// Offset::0x2E909E0;
TArray<FEmbarkAnimBudgetAllocatorComponentData> FEmbarkAnimationBudgetBlueprintLibrary::GetAllRegisteredComponents(FObject* WorldContextObject);


// Function  AnimationBudgetAllocator.EmbarkAnimationBudgetBlueprintLibrary.RecalculatePrerequisite
// Offset::0x2E90790;
FSkeletalMeshComponentBudgeted* FEmbarkAnimationBudgetBlueprintLibrary::RecalculatePrerequisite(FObject* WorldContextObject,FSkeletalMeshComponentBudgeted* ForComp);


// Function  AnimationBudgetAllocator.EmbarkAnimationBudgetBlueprintLibrary.RegisterComponent
// Offset::0x2E906B0;
void FEmbarkAnimationBudgetBlueprintLibrary::RegisterComponent(FObject* WorldContextObject,FSkeletalMeshComponentBudgeted* InComponent);


// Function  AnimationBudgetAllocator.EmbarkAnimationBudgetBlueprintLibrary.SetComponentSignificance
// Offset::0x2E90AB0;
void FEmbarkAnimationBudgetBlueprintLibrary::SetComponentSignificance(FObject* WorldContextObject,FSkeletalMeshComponentBudgeted* Component,float Significance,bool bNeverSkip,bool bTickEvenIfNotRendered,bool bAllowReducedWork,bool bForceInterpolate);


// Function  AnimationBudgetAllocator.EmbarkAnimationBudgetBlueprintLibrary.SetParameters
// Offset::0x2E90870;
void FEmbarkAnimationBudgetBlueprintLibrary::SetParameters(FObject* WorldContextObject,FAnimationBudgetAllocatorParameters InParameters);


// Function  AnimationBudgetAllocator.EmbarkAnimationBudgetBlueprintLibrary.UnregisterComponent
// Offset::0x2E905D0;
void FEmbarkAnimationBudgetBlueprintLibrary::UnregisterComponent(FObject* WorldContextObject,FSkeletalMeshComponentBudgeted* InComponent);


// Function  Text3D.Text3DCharacterTransform.SetLocationDistance
// Offset::0x2EB5620;
void FText3DCharacterTransform::SetLocationDistance(FVector Distance);


// Function  Text3D.Text3DCharacterTransform.SetLocationEnabled
// Offset::0x2EB5890;
void FText3DCharacterTransform::SetLocationEnabled(bool bEnabled);


// Function  Text3D.Text3DCharacterTransform.SetLocationOrder
// Offset::0x2EB5760;
void FText3DCharacterTransform::SetLocationOrder(enum class EText3DCharacterEffectOrder Order);


// Function  Text3D.Text3DCharacterTransform.SetLocationProgress
// Offset::0x2EB57F0;
void FText3DCharacterTransform::SetLocationProgress(float Progress);


// Function  Text3D.Text3DCharacterTransform.SetLocationRange
// Offset::0x2EB56C0;
void FText3DCharacterTransform::SetLocationRange(float Range);


// Function  Text3D.Text3DCharacterTransform.SetRotateBegin
// Offset::0x2EB4F60;
void FText3DCharacterTransform::SetRotateBegin(FRotator Value);


// Function  Text3D.Text3DCharacterTransform.SetRotateEnabled
// Offset::0x2EB51D0;
void FText3DCharacterTransform::SetRotateEnabled(bool bEnabled);


// Function  Text3D.Text3DCharacterTransform.SetRotateEnd
// Offset::0x2EB4EC0;
void FText3DCharacterTransform::SetRotateEnd(FRotator Value);


// Function  Text3D.Text3DCharacterTransform.SetRotateOrder
// Offset::0x2EB50A0;
void FText3DCharacterTransform::SetRotateOrder(enum class EText3DCharacterEffectOrder Order);


// Function  Text3D.Text3DCharacterTransform.SetRotateProgress
// Offset::0x2EB5130;
void FText3DCharacterTransform::SetRotateProgress(float Progress);


// Function  Text3D.Text3DCharacterTransform.SetRotateRange
// Offset::0x2EB5000;
void FText3DCharacterTransform::SetRotateRange(float Range);


// Function  Text3D.Text3DCharacterTransform.SetScaleBegin
// Offset::0x2EB5310;
void FText3DCharacterTransform::SetScaleBegin(FVector Value);


// Function  Text3D.Text3DCharacterTransform.SetScaleEnabled
// Offset::0x2EB5580;
void FText3DCharacterTransform::SetScaleEnabled(bool bEnabled);


// Function  Text3D.Text3DCharacterTransform.SetScaleEnd
// Offset::0x2EB5270;
void FText3DCharacterTransform::SetScaleEnd(FVector Value);


// Function  Text3D.Text3DCharacterTransform.SetScaleOrder
// Offset::0x2EB5450;
void FText3DCharacterTransform::SetScaleOrder(enum class EText3DCharacterEffectOrder Order);


// Function  Text3D.Text3DCharacterTransform.SetScaleProgress
// Offset::0x2EB54E0;
void FText3DCharacterTransform::SetScaleProgress(float Progress);


// Function  Text3D.Text3DCharacterTransform.SetScaleRange
// Offset::0x2EB53B0;
void FText3DCharacterTransform::SetScaleRange(float Range);


// Function  MetasoundEngine.MetaSoundAssetSubsystem.RegisterAssetClassesInDirectories
// Offset::0x33885B0;
void FMetaSoundAssetSubsystem::RegisterAssetClassesInDirectories(TArray<FMetaSoundAssetDirectory> Directories);


// Function  MetasoundEngine.MetaSoundAssetSubsystem.UnregisterAssetClassesInDirectories
// Offset::0x33884C0;
void FMetaSoundAssetSubsystem::UnregisterAssetClassesInDirectories(TArray<FMetaSoundAssetDirectory> Directories);


// Function  Engine.SoundWave.GetSoundAssetCompressionType
// Offset::0x652CC90;
enum class ESoundAssetCompressionType FSoundWave::GetSoundAssetCompressionType();


// Function  Engine.SoundWave.SetSoundAssetCompressionType
// Offset::0x24072C0;
void FSoundWave::SetSoundAssetCompressionType(enum class ESoundAssetCompressionType InSoundAssetCompressionType);


// Function  AudioWidgets.AudioRadialSlider.SetCenterBackgroundColor
// Offset::0x33AB4D0;
void FAudioRadialSlider::SetCenterBackgroundColor(FLinearColor InValue);


// Function  AudioWidgets.AudioRadialSlider.SetHandStartEndRatio
// Offset::0x33AB2F0;
void FAudioRadialSlider::SetHandStartEndRatio(FVector2D InHandStartEndRatio);


// Function  AudioWidgets.AudioRadialSlider.SetOutputRange
// Offset::0x33AAD90;
void FAudioRadialSlider::SetOutputRange(FVector2D InOutputRange);


// Function  AudioWidgets.AudioRadialSlider.SetShowLabelOnlyOnHover
// Offset::0x33AAF70;
void FAudioRadialSlider::SetShowLabelOnlyOnHover(bool bShowLabelOnlyOnHover);


// Function  AudioWidgets.AudioRadialSlider.SetShowUnitsText
// Offset::0x33AAED0;
void FAudioRadialSlider::SetShowUnitsText(bool bShowUnitsText);


// Function  AudioWidgets.AudioRadialSlider.SetSliderBarColor
// Offset::0x33AB390;
void FAudioRadialSlider::SetSliderBarColor(FLinearColor InValue);


// Function  AudioWidgets.AudioRadialSlider.SetSliderProgressColor
// Offset::0x33AB430;
void FAudioRadialSlider::SetSliderProgressColor(FLinearColor InValue);


// Function  AudioWidgets.AudioRadialSlider.SetSliderThickness
// Offset::0x33AAE30;
void FAudioRadialSlider::SetSliderThickness(float InThickness);


// Function  AudioWidgets.AudioRadialSlider.SetTextLabelBackgroundColor
// Offset::0x33AB240;
void FAudioRadialSlider::SetTextLabelBackgroundColor(FSlateColor InColor);


// Function  AudioWidgets.AudioRadialSlider.SetUnitsText
// Offset::0x33AB150;
void FAudioRadialSlider::SetUnitsText(FText Units);


// Function  AudioWidgets.AudioRadialSlider.SetUnitsTextReadOnly
// Offset::0x33AB0B0;
void FAudioRadialSlider::SetUnitsTextReadOnly(bool bIsReadOnly);


// Function  AudioWidgets.AudioRadialSlider.SetValueTextReadOnly
// Offset::0x33AB010;
void FAudioRadialSlider::SetValueTextReadOnly(bool bIsReadOnly);


// Function  AudioWidgets.AudioRadialSlider.SetWidgetLayout
// Offset::0x33AB570;
void FAudioRadialSlider::SetWidgetLayout(enum class EAudioRadialSliderLayout InLayout);


// Function  AudioWidgets.AudioSliderBase.GetLinValue
// Offset::0x33AC7C0;
float FAudioSliderBase::GetLinValue(float OutputValue);


// Function  AudioWidgets.AudioSliderBase.GetOutputValue
// Offset::0x33AC860;
float FAudioSliderBase::GetOutputValue(float LinValue);


// Function  AudioWidgets.AudioSliderBase.SetShowLabelOnlyOnHover
// Offset::0x33AC440;
void FAudioSliderBase::SetShowLabelOnlyOnHover(bool bShowLabelOnlyOnHover);


// Function  AudioWidgets.AudioSliderBase.SetShowUnitsText
// Offset::0x33AC3A0;
void FAudioSliderBase::SetShowUnitsText(bool bShowUnitsText);


// Function  AudioWidgets.AudioSliderBase.SetSliderBackgroundColor
// Offset::0x33AC300;
void FAudioSliderBase::SetSliderBackgroundColor(FLinearColor InValue);


// Function  AudioWidgets.AudioSliderBase.SetSliderBarColor
// Offset::0x33AC260;
void FAudioSliderBase::SetSliderBarColor(FLinearColor InValue);


// Function  AudioWidgets.AudioSliderBase.SetSliderThumbColor
// Offset::0x33AC1C0;
void FAudioSliderBase::SetSliderThumbColor(FLinearColor InValue);


// Function  AudioWidgets.AudioSliderBase.SetTextLabelBackgroundColor
// Offset::0x33AC710;
void FAudioSliderBase::SetTextLabelBackgroundColor(FSlateColor InColor);


// Function  AudioWidgets.AudioSliderBase.SetUnitsText
// Offset::0x33AC620;
void FAudioSliderBase::SetUnitsText(FText Units);


// Function  AudioWidgets.AudioSliderBase.SetUnitsTextReadOnly
// Offset::0x33AC580;
void FAudioSliderBase::SetUnitsTextReadOnly(bool bIsReadOnly);


// Function  AudioWidgets.AudioSliderBase.SetValueTextReadOnly
// Offset::0x33AC4E0;
void FAudioSliderBase::SetValueTextReadOnly(bool bIsReadOnly);


// Function  AudioWidgets.AudioSliderBase.SetWidgetBackgroundColor
// Offset::0x33AC120;
void FAudioSliderBase::SetWidgetBackgroundColor(FLinearColor InValue);


// Function  Sentry.SentryAttachment.GetContentType
// Offset::0x33BB8E0;
FString FSentryAttachment::GetContentType();


// Function  Sentry.SentryAttachment.GetData
// Offset::0x33BBA60;
TArray<char> FSentryAttachment::GetData();


// Function  Sentry.SentryAttachment.GetFilename
// Offset::0x33BB960;
FString FSentryAttachment::GetFilename();


// Function  Sentry.SentryAttachment.GetPath
// Offset::0x33BB9E0;
FString FSentryAttachment::GetPath();


// Function  Sentry.SentryAttachment.InitializeWithData
// Offset::0x33BBC40;
void FSentryAttachment::InitializeWithData(TArray<char> Data,FString Filename,FString ContentType);


// Function  Sentry.SentryAttachment.InitializeWithPath
// Offset::0x33BBAE0;
void FSentryAttachment::InitializeWithPath(FString Path,FString Filename,FString ContentType);


// Function  Sentry.SentryBeforeSendHandler.HandleBeforeSend
// Offset::0x33BC2E0;
FSentryEvent* FSentryBeforeSendHandler::HandleBeforeSend(FSentryEvent* Event,FSentryHint* Hint);


// Function  Sentry.SentryBreadcrumb.GetCategory
// Offset::0x33BCCB0;
FString FSentryBreadcrumb::GetCategory();


// Function  Sentry.SentryBreadcrumb.GetData
// Offset::0x33BCAC0;
TMap<FString,FString> FSentryBreadcrumb::GetData();


// Function  Sentry.SentryBreadcrumb.GetLevel
// Offset::0x33BCA00;
enum class ESentryLevel FSentryBreadcrumb::GetLevel();


// Function  Sentry.SentryBreadcrumb.GetMessage
// Offset::0x33BB9E0;
FString FSentryBreadcrumb::GetMessage();


// Function  Sentry.SentryBreadcrumb.GetType
// Offset::0x33BB8E0;
FString FSentryBreadcrumb::GetType();


// Function  Sentry.SentryBreadcrumb.SetCategory
// Offset::0x33BCD30;
void FSentryBreadcrumb::SetCategory(FString Category);


// Function  Sentry.SentryBreadcrumb.SetData
// Offset::0x33BCBA0;
void FSentryBreadcrumb::SetData(TMap<FString,FString> Data);


// Function  Sentry.SentryBreadcrumb.SetLevel
// Offset::0x33BCA30;
void FSentryBreadcrumb::SetLevel(enum class ESentryLevel Level);


// Function  Sentry.SentryBreadcrumb.SetMessage
// Offset::0x33BCE90;
void FSentryBreadcrumb::SetMessage(FString Message);


// Function  Sentry.SentryBreadcrumb.SetType
// Offset::0x33BCDE0;
void FSentryBreadcrumb::SetType(FString Type);


// Function  Sentry.SentryEvent.CreateEventWithMessageAndLevel
// Offset::0x33BD7C0;
FSentryEvent* FSentryEvent::CreateEventWithMessageAndLevel(FString Message,enum class ESentryLevel Level);


// Function  Sentry.SentryEvent.GetLevel
// Offset::0x33BD700;
enum class ESentryLevel FSentryEvent::GetLevel();


// Function  Sentry.SentryEvent.GetMessage
// Offset::0x33BB9E0;
FString FSentryEvent::GetMessage();


// Function  Sentry.SentryEvent.IsCrash
// Offset::0x33BD6D0;
bool FSentryEvent::IsCrash();


// Function  Sentry.SentryEvent.SetLevel
// Offset::0x33BD730;
void FSentryEvent::SetLevel(enum class ESentryLevel Level);


// Function  Sentry.SentryEvent.SetMessage
// Offset::0x33BCE90;
void FSentryEvent::SetMessage(FString Message);


// Function  Sentry.SentryHint.AddAttachment
// Offset::0x33BDD20;
void FSentryHint::AddAttachment(FSentryAttachment* Attachment);


// Function  Sentry.SentryId.ToString
// Offset::0x33BBA60;
FString FSentryId::ToString();


// Function  Sentry.SentryLibrary.ByteArrayToString
// Offset::0x33BE350;
FString FSentryLibrary::ByteArrayToString(TArray<char> Array);


// Function  Sentry.SentryLibrary.CreateSentryAttachmentWithData
// Offset::0x33BE680;
FSentryAttachment* FSentryLibrary::CreateSentryAttachmentWithData(TArray<char> Data,FString Filename,FString ContentType);


// Function  Sentry.SentryLibrary.CreateSentryAttachmentWithPath
// Offset::0x33BE520;
FSentryAttachment* FSentryLibrary::CreateSentryAttachmentWithPath(FString Path,FString Filename,FString ContentType);


// Function  Sentry.SentryLibrary.CreateSentryBreadcrumb
// Offset::0x33BE7F0;
FSentryBreadcrumb* FSentryLibrary::CreateSentryBreadcrumb(FString Message,FString Type,FString Category,TMap<FString,FString> Data,enum class ESentryLevel Level);


// Function  Sentry.SentryLibrary.CreateSentryEvent
// Offset::0x33BD7C0;
FSentryEvent* FSentryLibrary::CreateSentryEvent(FString Message,enum class ESentryLevel Level);


// Function  Sentry.SentryLibrary.CreateSentryUser
// Offset::0x33BEC30;
FSentryUser* FSentryLibrary::CreateSentryUser(FString Email,FString ID,FString UserName,FString IpAddress,TMap<FString,FString> Data);


// Function  Sentry.SentryLibrary.CreateSentryUserFeedback
// Offset::0x33BEA80;
FSentryUserFeedback* FSentryLibrary::CreateSentryUserFeedback(FSentryId* EventID,FString Name,FString Email,FString Comments);


// Function  Sentry.SentryLibrary.SaveStringToFile
// Offset::0x33BE210;
FString FSentryLibrary::SaveStringToFile(FString InString,FString Filename);


// Function  Sentry.SentryLibrary.StringToBytesArray
// Offset::0x33BE440;
TArray<char> FSentryLibrary::StringToBytesArray(FString InString);


// Function  Sentry.SentryScope.AddAttachment
// Offset::0x33C0760;
void FSentryScope::AddAttachment(FSentryAttachment* Attachment);


// Function  Sentry.SentryScope.AddBreadcrumb
// Offset::0x33BDD20;
void FSentryScope::AddBreadcrumb(FSentryBreadcrumb* Breadcrumb);


// Function  Sentry.SentryScope.Clear
// Offset::0x33BF6E0;
void FSentryScope::Clear();


// Function  Sentry.SentryScope.ClearAttachments
// Offset::0x33C0740;
void FSentryScope::ClearAttachments();


// Function  Sentry.SentryScope.ClearBreadcrumbs
// Offset::0x33C0800;
void FSentryScope::ClearBreadcrumbs();


// Function  Sentry.SentryScope.GetDist
// Offset::0x33C0180;
FString FSentryScope::GetDist();


// Function  Sentry.SentryScope.GetEnvironment
// Offset::0x33C0050;
FString FSentryScope::GetEnvironment();


// Function  Sentry.SentryScope.GetExtras
// Offset::0x33BF700;
TMap<FString,FString> FSentryScope::GetExtras();


// Function  Sentry.SentryScope.GetExtraValue
// Offset::0x33BF9A0;
FString FSentryScope::GetExtraValue(FString Key);


// Function  Sentry.SentryScope.GetFingerprint
// Offset::0x33BFE70;
TArray<FString> FSentryScope::GetFingerprint();


// Function  Sentry.SentryScope.GetLevel
// Offset::0x33BFDB0;
enum class ESentryLevel FSentryScope::GetLevel();


// Function  Sentry.SentryScope.GetTags
// Offset::0x33C02B0;
TMap<FString,FString> FSentryScope::GetTags();


// Function  Sentry.SentryScope.GetTagValue
// Offset::0x33C0550;
FString FSentryScope::GetTagValue(FString Key);


// Function  Sentry.SentryScope.RemoveContext
// Offset::0x33BFB90;
void FSentryScope::RemoveContext(FString Key);


// Function  Sentry.SentryScope.RemoveExtra
// Offset::0x33BF8F0;
void FSentryScope::RemoveExtra(FString Key);


// Function  Sentry.SentryScope.RemoveTag
// Offset::0x33C04A0;
void FSentryScope::RemoveTag(FString Key);


// Function  Sentry.SentryScope.SetContext
// Offset::0x33BFC40;
void FSentryScope::SetContext(FString Key,TMap<FString,FString> Values);


// Function  Sentry.SentryScope.SetDist
// Offset::0x33C0200;
void FSentryScope::SetDist(FString Dist);


// Function  Sentry.SentryScope.SetEnvironment
// Offset::0x33C00D0;
void FSentryScope::SetEnvironment(FString Environment);


// Function  Sentry.SentryScope.SetExtras
// Offset::0x33BF7E0;
void FSentryScope::SetExtras(TMap<FString,FString> Extras);


// Function  Sentry.SentryScope.SetExtraValue
// Offset::0x33BFA90;
void FSentryScope::SetExtraValue(FString Key,FString Value);


// Function  Sentry.SentryScope.SetFingerprint
// Offset::0x33BFF60;
void FSentryScope::SetFingerprint(TArray<FString> Fingerprint);


// Function  Sentry.SentryScope.SetLevel
// Offset::0x33BFDE0;
void FSentryScope::SetLevel(enum class ESentryLevel Level);


// Function  Sentry.SentryScope.SetTags
// Offset::0x33C0390;
void FSentryScope::SetTags(TMap<FString,FString> Tags);


// Function  Sentry.SentryScope.SetTagValue
// Offset::0x33C0640;
void FSentryScope::SetTagValue(FString Key,FString Value);


// Function  Sentry.SentrySubsystem.AddBreadcrumb
// Offset::0x33C29B0;
void FSentrySubsystem::AddBreadcrumb(FSentryBreadcrumb* Breadcrumb);


// Function  Sentry.SentrySubsystem.AddBreadcrumbWithParams
// Offset::0x33C2720;
void FSentrySubsystem::AddBreadcrumbWithParams(FString Message,FString Category,FString Type,TMap<FString,FString> Data,enum class ESentryLevel Level);


// Function  Sentry.SentrySubsystem.CaptureEvent
// Offset::0x33C23F0;
FSentryId* FSentrySubsystem::CaptureEvent(FSentryEvent* Event);


// Function  Sentry.SentrySubsystem.CaptureEventWithScope
// Offset::0x33C22D0;
FSentryId* FSentrySubsystem::CaptureEventWithScope(FSentryEvent* Event,FDelegate OnConfigureScope);


// Function  Sentry.SentrySubsystem.CaptureMessage
// Offset::0x33C2600;
FSentryId* FSentrySubsystem::CaptureMessage(FString Message,enum class ESentryLevel Level);


// Function  Sentry.SentrySubsystem.CaptureMessageWithScope
// Offset::0x33C2490;
FSentryId* FSentrySubsystem::CaptureMessageWithScope(FString Message,FDelegate OnConfigureScope,enum class ESentryLevel Level);


// Function  Sentry.SentrySubsystem.CaptureUserFeedback
// Offset::0x33C2230;
void FSentrySubsystem::CaptureUserFeedback(FSentryUserFeedback* UserFeedback);


// Function  Sentry.SentrySubsystem.CaptureUserFeedbackWithParams
// Offset::0x33C2080;
void FSentrySubsystem::CaptureUserFeedbackWithParams(FSentryId* EventID,FString Email,FString Comments,FString Name);


// Function  Sentry.SentrySubsystem.ClearBreadcrumbs
// Offset::0x33C2700;
void FSentrySubsystem::ClearBreadcrumbs();


// Function  Sentry.SentrySubsystem.Close
// Offset::0x33C2A80;
void FSentrySubsystem::Close();


// Function  Sentry.SentrySubsystem.ConfigureScope
// Offset::0x33C1F00;
void FSentrySubsystem::ConfigureScope(FDelegate OnConfigureScope);


// Function  Sentry.SentrySubsystem.EndSession
// Offset::0x33C1B10;
void FSentrySubsystem::EndSession();


// Function  Sentry.SentrySubsystem.Initialize
// Offset::0x33C2B60;
void FSentrySubsystem::Initialize();


// Function  Sentry.SentrySubsystem.InitializeWithSettings
// Offset::0x33C2AA0;
void FSentrySubsystem::InitializeWithSettings(FDelegate OnConfigureSettings);


// Function  Sentry.SentrySubsystem.IsEnabled
// Offset::0x33C2A50;
bool FSentrySubsystem::IsEnabled();


// Function  Sentry.SentrySubsystem.RemoveTag
// Offset::0x33C1BE0;
void FSentrySubsystem::RemoveTag(FString Key);


// Function  Sentry.SentrySubsystem.RemoveUser
// Offset::0x33C1FC0;
void FSentrySubsystem::RemoveUser();


// Function  Sentry.SentrySubsystem.SetContext
// Offset::0x33C1D90;
void FSentrySubsystem::SetContext(FString Key,TMap<FString,FString> Values);


// Function  Sentry.SentrySubsystem.SetLevel
// Offset::0x33C1B50;
void FSentrySubsystem::SetLevel(enum class ESentryLevel Level);


// Function  Sentry.SentrySubsystem.SetTag
// Offset::0x33C1C90;
void FSentrySubsystem::SetTag(FString Key,FString Value);


// Function  Sentry.SentrySubsystem.SetUser
// Offset::0x33C1FE0;
void FSentrySubsystem::SetUser(FSentryUser* User);


// Function  Sentry.SentrySubsystem.StartSession
// Offset::0x33C1B30;
void FSentrySubsystem::StartSession();


// Function  Sentry.SentryUser.GetData
// Offset::0x33C3930;
TMap<FString,FString> FSentryUser::GetData();


// Function  Sentry.SentryUser.GetEmail
// Offset::0x33BB9E0;
FString FSentryUser::GetEmail();


// Function  Sentry.SentryUser.GetId
// Offset::0x33BB8E0;
FString FSentryUser::GetId();


// Function  Sentry.SentryUser.GetIpAddress
// Offset::0x33C3B20;
FString FSentryUser::GetIpAddress();


// Function  Sentry.SentryUser.GetUsername
// Offset::0x33BCCB0;
FString FSentryUser::GetUsername();


// Function  Sentry.SentryUser.SetData
// Offset::0x33C3A10;
void FSentryUser::SetData(TMap<FString,FString> Data);


// Function  Sentry.SentryUser.SetEmail
// Offset::0x33BCE90;
void FSentryUser::SetEmail(FString Email);


// Function  Sentry.SentryUser.SetId
// Offset::0x33BCDE0;
void FSentryUser::SetId(FString ID);


// Function  Sentry.SentryUser.SetIpAddress
// Offset::0x33C04A0;
void FSentryUser::SetIpAddress(FString IpAddress);


// Function  Sentry.SentryUser.SetUsername
// Offset::0x33BCD30;
void FSentryUser::SetUsername(FString UserName);


// Function  Sentry.SentryUserFeedback.GetComment
// Offset::0x33BCCB0;
FString FSentryUserFeedback::GetComment();


// Function  Sentry.SentryUserFeedback.GetEmail
// Offset::0x33BB8E0;
FString FSentryUserFeedback::GetEmail();


// Function  Sentry.SentryUserFeedback.GetName
// Offset::0x33BB9E0;
FString FSentryUserFeedback::GetName();


// Function  Sentry.SentryUserFeedback.Initialize
// Offset::0x33C4200;
void FSentryUserFeedback::Initialize(FSentryId* EventID);


// Function  Sentry.SentryUserFeedback.SetComment
// Offset::0x33BCD30;
void FSentryUserFeedback::SetComment(FString Comments);


// Function  Sentry.SentryUserFeedback.SetEmail
// Offset::0x33BCDE0;
void FSentryUserFeedback::SetEmail(FString Email);


// Function  Sentry.SentryUserFeedback.SetName
// Offset::0x33BCE90;
void FSentryUserFeedback::SetName(FString Name);


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.ClothConfigUpdated
// Offset::0x179DDF0;
void FClothingSimulationInteractor::ClothConfigUpdated();


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.DisableGravityOverride
// Offset::0x179DEB0;
void FClothingSimulationInteractor::DisableGravityOverride();


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.EnableGravityOverride
// Offset::0x58D59E0;
void FClothingSimulationInteractor::EnableGravityOverride(FVector InVector);


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.GetClothingInteractor
// Offset::0x58D5710;
FClothingInteractor* FClothingSimulationInteractor::GetClothingInteractor(FString ClothingAssetName);


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.GetNumCloths
// Offset::0x58D5880;
int32_t FClothingSimulationInteractor::GetNumCloths();


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.GetNumDynamicParticles
// Offset::0x58D5840;
int32_t FClothingSimulationInteractor::GetNumDynamicParticles();


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.GetNumIterations
// Offset::0x58D5810;
int32_t FClothingSimulationInteractor::GetNumIterations();


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.GetNumKinematicParticles
// Offset::0x58D5860;
int32_t FClothingSimulationInteractor::GetNumKinematicParticles();


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.GetNumSubsteps
// Offset::0x58D57F0;
int32_t FClothingSimulationInteractor::GetNumSubsteps();


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.GetSimulationTime
// Offset::0x58D57C0;
float FClothingSimulationInteractor::GetSimulationTime();


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.PhysicsAssetUpdated
// Offset::0x179D370;
void FClothingSimulationInteractor::PhysicsAssetUpdated();


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.SetAnimDriveSpringStiffness
// Offset::0x58D5A80;
void FClothingSimulationInteractor::SetAnimDriveSpringStiffness(float InStiffness);


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.SetMaxNumIterations
// Offset::0x58D5940;
void FClothingSimulationInteractor::SetMaxNumIterations(int32_t MaxNumIterations);


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.SetNumIterations
// Offset::0x2876380;
void FClothingSimulationInteractor::SetNumIterations(int32_t NumIterations);


// Function  ClothingSystemRuntimeInterface.ClothingSimulationInteractor.SetNumSubsteps
// Offset::0x58D58A0;
void FClothingSimulationInteractor::SetNumSubsteps(int32_t NumSubsteps);


// Function  EmbarkSplineTools.SplineDistributionActor.ReceivePostRebuild
// Offset::0x3D30810;
void FSplineDistributionActor::ReceivePostRebuild();


// Function  GameplayCameras.CameraAnimationCameraModifier.GetCameraAnimationCameraModifier
// Offset::0x34223B0;
FCameraAnimationCameraModifier* FCameraAnimationCameraModifier::GetCameraAnimationCameraModifier(FObject* WorldContextObject,int32_t PlayerIndex);


// Function  GameplayCameras.CameraAnimationCameraModifier.GetCameraAnimationCameraModifierFromID
// Offset::0x34222D0;
FCameraAnimationCameraModifier* FCameraAnimationCameraModifier::GetCameraAnimationCameraModifierFromID(FObject* WorldContextObject,int32_t ControllerId);


// Function  GameplayCameras.CameraAnimationCameraModifier.GetCameraAnimationCameraModifierFromPlayerController
// Offset::0x3422230;
FCameraAnimationCameraModifier* FCameraAnimationCameraModifier::GetCameraAnimationCameraModifierFromPlayerController(FPlayerController* PlayerController);


// Function  GameplayCameras.CameraAnimationCameraModifier.IsCameraAnimationActive
// Offset::0x3422680;
bool FCameraAnimationCameraModifier::IsCameraAnimationActive(FCameraAnimationHandle Handle);


// Function  GameplayCameras.CameraAnimationCameraModifier.PlayCameraAnimation
// Offset::0x3422730;
FCameraAnimationHandle FCameraAnimationCameraModifier::PlayCameraAnimation(FCameraAnimationSequence* Sequence,FCameraAnimationParams Params);


// Function  GameplayCameras.CameraAnimationCameraModifier.StopAllCameraAnimations
// Offset::0x2704C80;
void FCameraAnimationCameraModifier::StopAllCameraAnimations(bool bImmediate);


// Function  GameplayCameras.CameraAnimationCameraModifier.StopAllCameraAnimationsOf
// Offset::0x3422490;
void FCameraAnimationCameraModifier::StopAllCameraAnimationsOf(FCameraAnimationSequence* Sequence,bool bImmediate);


// Function  GameplayCameras.CameraAnimationCameraModifier.StopCameraAnimation
// Offset::0x3422580;
void FCameraAnimationCameraModifier::StopCameraAnimation(FCameraAnimationHandle Handle,bool bImmediate);


// Function  Engine.CameraShakeBase.GetRootShakePattern
// Offset::0x22C1870;
FCameraShakePattern* FCameraShakeBase::GetRootShakePattern();


// Function  Engine.CameraShakeBase.SetRootShakePattern
// Offset::0x634C640;
void FCameraShakeBase::SetRootShakePattern(FCameraShakePattern* InPattern);


// Function  GameplayCameras.MatineeCameraShake.BlueprintUpdateCameraShake
// Offset::0x3D30810;
void FMatineeCameraShake::BlueprintUpdateCameraShake(float DeltaTime,float Alpha,FMinimalViewInfo POV,FMinimalViewInfo ModifiedPOV);


// Function  GameplayCameras.MatineeCameraShake.ReceiveIsFinished
// Offset::0x1A7E8E0;
bool FMatineeCameraShake::ReceiveIsFinished();


// Function  GameplayCameras.MatineeCameraShake.ReceivePlayShake
// Offset::0x3D30810;
void FMatineeCameraShake::ReceivePlayShake(float Scale);


// Function  GameplayCameras.MatineeCameraShake.ReceiveStopShake
// Offset::0x3D30810;
void FMatineeCameraShake::ReceiveStopShake(bool bImmediately);


// Function  GameplayCameras.MatineeCameraShake.StartMatineeCameraShake
// Offset::0x34238C0;
FMatineeCameraShake* FMatineeCameraShake::StartMatineeCameraShake(FPlayerCameraManager* PlayerCameraManager,FMatineeCameraShake* ShakeClass,float Scale,enum class ECameraShakePlaySpace PlaySpace,FRotator UserPlaySpaceRot);


// Function  GameplayCameras.MatineeCameraShake.StartMatineeCameraShakeFromSource
// Offset::0x3423690;
FMatineeCameraShake* FMatineeCameraShake::StartMatineeCameraShakeFromSource(FPlayerCameraManager* PlayerCameraManager,FMatineeCameraShake* ShakeClass,FCameraShakeSourceComponent* SourceComponent,float Scale,enum class ECameraShakePlaySpace PlaySpace,FRotator UserPlaySpaceRot);


// Function  GameplayCameras.MatineeCameraShakeFunctionLibrary.Conv_MatineeCameraShake
// Offset::0x3424F00;
FMatineeCameraShake* FMatineeCameraShakeFunctionLibrary::Conv_MatineeCameraShake(FCameraShakeBase* CameraShake);


// Function  TemplateSequence.SequenceCameraShakeTestUtil.GetCameraCachePOV
// Offset::0x34380E0;
FMinimalViewInfo FSequenceCameraShakeTestUtil::GetCameraCachePOV(FPlayerController* PlayerController);


// Function  TemplateSequence.SequenceCameraShakeTestUtil.GetLastFrameCameraCachePOV
// Offset::0x3437EF0;
FMinimalViewInfo FSequenceCameraShakeTestUtil::GetLastFrameCameraCachePOV(FPlayerController* PlayerController);


// Function  TemplateSequence.SequenceCameraShakeTestUtil.GetPostProcessBlendCache
// Offset::0x3437D30;
bool FSequenceCameraShakeTestUtil::GetPostProcessBlendCache(FPlayerController* PlayerController,int32_t PPIndex,FPostProcessSettings OutPPSettings,float OutPPBlendWeight);


// Function  TemplateSequence.TemplateSequenceActor.GetSequence
// Offset::0x3438910;
FTemplateSequence* FTemplateSequenceActor::GetSequence();


// Function  TemplateSequence.TemplateSequenceActor.GetSequencePlayer
// Offset::0x3438810;
FTemplateSequencePlayer* FTemplateSequenceActor::GetSequencePlayer();


// Function  TemplateSequence.TemplateSequenceActor.LoadSequence
// Offset::0x34388E0;
FTemplateSequence* FTemplateSequenceActor::LoadSequence();


// Function  TemplateSequence.TemplateSequenceActor.SetBinding
// Offset::0x3438720;
void FTemplateSequenceActor::SetBinding(FActor* Actor,bool bOverridesDefault);


// Function  TemplateSequence.TemplateSequenceActor.SetSequence
// Offset::0x3438840;
void FTemplateSequenceActor::SetSequence(FTemplateSequence* InSequence);


// Function  MovieScene.MovieSceneSequencePlayer.ChangePlaybackDirection
// Offset::0x5404DD0;
void FMovieSceneSequencePlayer::ChangePlaybackDirection();


// Function  MovieScene.MovieSceneSequencePlayer.GetBoundObjects
// Offset::0x54035E0;
TArray<FObject*> FMovieSceneSequencePlayer::GetBoundObjects(FMovieSceneObjectBindingID ObjectBinding);


// Function  MovieScene.MovieSceneSequencePlayer.GetCurrentTime
// Offset::0x5404C40;
FQualifiedFrameTime FMovieSceneSequencePlayer::GetCurrentTime();


// Function  MovieScene.MovieSceneSequencePlayer.GetDisableCameraCuts
// Offset::0x54036E0;
bool FMovieSceneSequencePlayer::GetDisableCameraCuts();


// Function  MovieScene.MovieSceneSequencePlayer.GetDuration
// Offset::0x5404BF0;
FQualifiedFrameTime FMovieSceneSequencePlayer::GetDuration();


// Function  MovieScene.MovieSceneSequencePlayer.GetEndTime
// Offset::0x5404A30;
FQualifiedFrameTime FMovieSceneSequencePlayer::GetEndTime();


// Function  MovieScene.MovieSceneSequencePlayer.GetFrameDuration
// Offset::0x5404BC0;
int32_t FMovieSceneSequencePlayer::GetFrameDuration();


// Function  MovieScene.MovieSceneSequencePlayer.GetFrameRate
// Offset::0x5404B90;
FFrameRate FMovieSceneSequencePlayer::GetFrameRate();


// Function  MovieScene.MovieSceneSequencePlayer.GetObjectBindings
// Offset::0x5403500;
TArray<FMovieSceneObjectBindingID> FMovieSceneSequencePlayer::GetObjectBindings(FObject* InObject);


// Function  MovieScene.MovieSceneSequencePlayer.GetPlayRate
// Offset::0x5403890;
float FMovieSceneSequencePlayer::GetPlayRate();


// Function  MovieScene.MovieSceneSequencePlayer.GetSequence
// Offset::0x54034E0;
FMovieSceneSequence* FMovieSceneSequencePlayer::GetSequence();


// Function  MovieScene.MovieSceneSequencePlayer.GetSequenceName
// Offset::0x5403400;
FString FMovieSceneSequencePlayer::GetSequenceName(bool bAddClientInfo);


// Function  MovieScene.MovieSceneSequencePlayer.GetStartTime
// Offset::0x5404AA0;
FQualifiedFrameTime FMovieSceneSequencePlayer::GetStartTime();


// Function  MovieScene.MovieSceneSequencePlayer.GoToEndAndStop
// Offset::0x5404C90;
void FMovieSceneSequencePlayer::GoToEndAndStop();


// Function  MovieScene.MovieSceneSequencePlayer.IsPaused
// Offset::0x54038F0;
bool FMovieSceneSequencePlayer::IsPaused();


// Function  MovieScene.MovieSceneSequencePlayer.IsPlaying
// Offset::0x5403920;
bool FMovieSceneSequencePlayer::IsPlaying();


// Function  MovieScene.MovieSceneSequencePlayer.IsReversed
// Offset::0x54038C0;
bool FMovieSceneSequencePlayer::IsReversed();


// Function  MovieScene.MovieSceneSequencePlayer.JumpToFrame
// Offset::0x54041F0;
void FMovieSceneSequencePlayer::JumpToFrame(FFrameTime NewPosition);


// Function  MovieScene.MovieSceneSequencePlayer.JumpToMarkedFrame
// Offset::0x5403950;
bool FMovieSceneSequencePlayer::JumpToMarkedFrame(FString InLabel);


// Function  MovieScene.MovieSceneSequencePlayer.JumpToSeconds
// Offset::0x5403E90;
void FMovieSceneSequencePlayer::JumpToSeconds(float TimeInSeconds);


// Function  MovieScene.MovieSceneSequencePlayer.Pause
// Offset::0x5404D10;
void FMovieSceneSequencePlayer::Pause();


// Function  MovieScene.MovieSceneSequencePlayer.Play
// Offset::0x5404E10;
void FMovieSceneSequencePlayer::Play();


// Function  MovieScene.MovieSceneSequencePlayer.PlayLooping
// Offset::0x5404D30;
void FMovieSceneSequencePlayer::PlayLooping(int32_t NumLoops);


// Function  MovieScene.MovieSceneSequencePlayer.PlayReverse
// Offset::0x5404DF0;
void FMovieSceneSequencePlayer::PlayReverse();


// Function  MovieScene.MovieSceneSequencePlayer.PlayTo
// Offset::0x5404690;
void FMovieSceneSequencePlayer::PlayTo(FMovieSceneSequencePlaybackParams PlaybackParams,FMovieSceneSequencePlayToParams PlayToParams);


// Function  MovieScene.MovieSceneSequencePlayer.PlayToFrame
// Offset::0x5404430;
void FMovieSceneSequencePlayer::PlayToFrame(FFrameTime NewPosition);


// Function  MovieScene.MovieSceneSequencePlayer.PlayToMarkedFrame
// Offset::0x5403CD0;
bool FMovieSceneSequencePlayer::PlayToMarkedFrame(FString InLabel);


// Function  MovieScene.MovieSceneSequencePlayer.PlayToSeconds
// Offset::0x54040D0;
void FMovieSceneSequencePlayer::PlayToSeconds(float TimeInSeconds);


// Function  MovieScene.MovieSceneSequencePlayer.RestoreState
// Offset::0x5404540;
void FMovieSceneSequencePlayer::RestoreState();


// Function  MovieScene.MovieSceneSequencePlayer.RPC_ExplicitServerUpdateEvent
// Offset::0x5403320;
void FMovieSceneSequencePlayer::RPC_ExplicitServerUpdateEvent(enum class EUpdatePositionMethod Method,FFrameTime RelevantTime);


// Function  MovieScene.MovieSceneSequencePlayer.RPC_OnFinishPlaybackEvent
// Offset::0x54031E0;
void FMovieSceneSequencePlayer::RPC_OnFinishPlaybackEvent(FFrameTime StoppedTime);


// Function  MovieScene.MovieSceneSequencePlayer.RPC_OnStopEvent
// Offset::0x5403280;
void FMovieSceneSequencePlayer::RPC_OnStopEvent(FFrameTime StoppedTime);


// Function  MovieScene.MovieSceneSequencePlayer.Scrub
// Offset::0x5404CF0;
void FMovieSceneSequencePlayer::Scrub();


// Function  MovieScene.MovieSceneSequencePlayer.ScrubToFrame
// Offset::0x5404310;
void FMovieSceneSequencePlayer::ScrubToFrame(FFrameTime NewPosition);


// Function  MovieScene.MovieSceneSequencePlayer.ScrubToMarkedFrame
// Offset::0x5403B10;
bool FMovieSceneSequencePlayer::ScrubToMarkedFrame(FString InLabel);


// Function  MovieScene.MovieSceneSequencePlayer.ScrubToSeconds
// Offset::0x5403FB0;
void FMovieSceneSequencePlayer::ScrubToSeconds(float TimeInSeconds);


// Function  MovieScene.MovieSceneSequencePlayer.SetDisableCameraCuts
// Offset::0x5403710;
void FMovieSceneSequencePlayer::SetDisableCameraCuts(bool bInDisableCameraCuts);


// Function  MovieScene.MovieSceneSequencePlayer.SetFrameRange
// Offset::0x5404900;
void FMovieSceneSequencePlayer::SetFrameRange(int32_t StartFrame,int32_t Duration,float SubFrames);


// Function  MovieScene.MovieSceneSequencePlayer.SetFrameRate
// Offset::0x5404AF0;
void FMovieSceneSequencePlayer::SetFrameRate(FFrameRate FrameRate);


// Function  MovieScene.MovieSceneSequencePlayer.SetPlaybackPosition
// Offset::0x5404560;
void FMovieSceneSequencePlayer::SetPlaybackPosition(FMovieSceneSequencePlaybackParams PlaybackParams);


// Function  MovieScene.MovieSceneSequencePlayer.SetPlayRate
// Offset::0x54037F0;
void FMovieSceneSequencePlayer::SetPlayRate(float PlayRate);


// Function  MovieScene.MovieSceneSequencePlayer.SetTimeRange
// Offset::0x5404820;
void FMovieSceneSequencePlayer::SetTimeRange(float StartTime,float Duration);


// Function  MovieScene.MovieSceneSequencePlayer.Stop
// Offset::0x5404CD0;
void FMovieSceneSequencePlayer::Stop();


// Function  MovieScene.MovieSceneSequencePlayer.StopAtCurrentTime
// Offset::0x5404CB0;
void FMovieSceneSequencePlayer::StopAtCurrentTime();


// Function  TemplateSequence.TemplateSequencePlayer.CreateTemplateSequencePlayer
// Offset::0x3438F60;
FTemplateSequencePlayer* FTemplateSequencePlayer::CreateTemplateSequencePlayer(FObject* WorldContextObject,FTemplateSequence* TemplateSequence,FMovieSceneSequencePlaybackSettings Settings,FTemplateSequenceActor* OutActor);


// Function  MovieScene.MovieSceneSubSection.GetSequence
// Offset::0x5407AF0;
FMovieSceneSequence* FMovieSceneSubSection::GetSequence();


// Function  MovieScene.MovieSceneSubSection.SetSequence
// Offset::0x5407A50;
void FMovieSceneSubSection::SetSequence(FMovieSceneSequence* Sequence);


// Function  KantanChartsDatasource.KantanCartesianDatasourceInterface.GetNumSeries
// Offset::0x343BF20;
int32_t FKantanCartesianDatasourceInterface::GetNumSeries();


// Function  KantanChartsDatasource.KantanCartesianDatasourceInterface.GetSeriesDatapoints
// Offset::0x343BCA0;
TArray<FKantanCartesianDatapoint> FKantanCartesianDatasourceInterface::GetSeriesDatapoints(int32_t SeriesIdx);


// Function  KantanChartsDatasource.KantanCartesianDatasourceInterface.GetSeriesId
// Offset::0x343BE70;
FName FKantanCartesianDatasourceInterface::GetSeriesId(int32_t CatIdx);


// Function  KantanChartsDatasource.KantanCartesianDatasourceInterface.GetSeriesName
// Offset::0x343BD80;
FText FKantanCartesianDatasourceInterface::GetSeriesName(int32_t SeriesIdx);


// Function  KantanChartsDatasource.KantanCategoryDatasourceInterface.GetCategoryId
// Offset::0x343BE70;
FName FKantanCategoryDatasourceInterface::GetCategoryId(int32_t CatIdx);


// Function  KantanChartsDatasource.KantanCategoryDatasourceInterface.GetCategoryName
// Offset::0x343BD80;
FText FKantanCategoryDatasourceInterface::GetCategoryName(int32_t CatIdx);


// Function  KantanChartsDatasource.KantanCategoryDatasourceInterface.GetCategoryValue
// Offset::0x343D100;
float FKantanCategoryDatasourceInterface::GetCategoryValue(int32_t CatIdx);


// Function  KantanChartsDatasource.KantanCategoryDatasourceInterface.GetNumCategories
// Offset::0x343BF20;
int32_t FKantanCategoryDatasourceInterface::GetNumCategories();


// Function  KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_AddDatapoint
// Offset::0x343E2C0;
void FKantanSimpleCartesianDatasource::BP_AddDatapoint(FName SeriesId,FVector2D Point,bool bSuccess);


// Function  KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_AddSeries
// Offset::0x343E5B0;
void FKantanSimpleCartesianDatasource::BP_AddSeries(FText Name,FName SeriesId);


// Function  KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_AddSeriesWithId
// Offset::0x343E6F0;
void FKantanSimpleCartesianDatasource::BP_AddSeriesWithId(FName ID,FText Name,bool bSuccess);


// Function  KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_RemoveAllSeries
// Offset::0x343E4A0;
void FKantanSimpleCartesianDatasource::BP_RemoveAllSeries();


// Function  KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_RemoveSeries
// Offset::0x343E4C0;
void FKantanSimpleCartesianDatasource::BP_RemoveSeries(FName ID,bool bSuccess);


// Function  KantanChartsDatasource.KantanSimpleCartesianDatasource.BP_SetDatapointLimit
// Offset::0x343E400;
void FKantanSimpleCartesianDatasource::BP_SetDatapointLimit(int32_t Limit);


// Function  KantanChartsDatasource.KantanSimpleCartesianDatasource.NewSimpleCartesianDatasource
// Offset::0x343E880;
FKantanSimpleCartesianDatasource* FKantanSimpleCartesianDatasource::NewSimpleCartesianDatasource(int32_t MaxDatapoints);


// Function  KantanChartsDatasource.KantanSimpleCategoryDatasource.BP_AddCategory
// Offset::0x343F120;
void FKantanSimpleCategoryDatasource::BP_AddCategory(FText Name,FName CatId);


// Function  KantanChartsDatasource.KantanSimpleCategoryDatasource.BP_AddCategoryWithId
// Offset::0x343F260;
void FKantanSimpleCategoryDatasource::BP_AddCategoryWithId(FName ID,FText Name,bool bSuccess);


// Function  KantanChartsDatasource.KantanSimpleCategoryDatasource.BP_RemoveAllCategories
// Offset::0x343F010;
void FKantanSimpleCategoryDatasource::BP_RemoveAllCategories();


// Function  KantanChartsDatasource.KantanSimpleCategoryDatasource.BP_RemoveCategory
// Offset::0x343F030;
void FKantanSimpleCategoryDatasource::BP_RemoveCategory(FName ID,bool bSuccess);


// Function  KantanChartsDatasource.KantanSimpleCategoryDatasource.BP_UpdateCategoryValue
// Offset::0x343EED0;
void FKantanSimpleCategoryDatasource::BP_UpdateCategoryValue(FName ID,float Value,bool bSuccess);


// Function  KantanChartsDatasource.KantanSimpleCategoryDatasource.NewSimpleCategoryDatasource
// Offset::0x343F3F0;
FKantanSimpleCategoryDatasource* FKantanSimpleCategoryDatasource::NewSimpleCategoryDatasource();


// Function  KantanChartsUMG.KantanChart.SetChartTitle
// Offset::0x3466160;
void FKantanChart::SetChartTitle(FText InTitle);


// Function  KantanChartsUMG.KantanChart.SetChartTitlePadding
// Offset::0x34660B0;
void FKantanChart::SetChartTitlePadding(FMargin InPadding);


// Function  KantanChartsUMG.KantanChart.SetMargins
// Offset::0x3466240;
void FKantanChart::SetMargins(FMargin InMargins);


// Function  KantanChartsUMG.KantanChart.SetUpdateTickRate
// Offset::0x3466010;
void FKantanChart::SetUpdateTickRate(float InRate);


// Function  KantanChartsUMG.KantanCategoryChart.AddCategoryStyleOverride
// Offset::0x3465D70;
void FKantanCategoryChart::AddCategoryStyleOverride(FName CategoryId,FLinearColor Color);


// Function  KantanChartsUMG.KantanBarChartBase.SetBarToGapRatio
// Offset::0x34643F0;
void FKantanBarChartBase::SetBarToGapRatio(float InRatio);


// Function  KantanChartsUMG.KantanBarChartBase.SetExtentsDisplay
// Offset::0x3464360;
void FKantanBarChartBase::SetExtentsDisplay(enum class EKantanBarValueExtents InExtents);


// Function  KantanChartsUMG.KantanBarChartBase.SetLabelPosition
// Offset::0x3464490;
void FKantanBarChartBase::SetLabelPosition(enum class EKantanBarLabelPosition InPosition);


// Function  KantanChartsUMG.KantanBarChartBase.SetMaxBarValue
// Offset::0x3464520;
void FKantanBarChartBase::SetMaxBarValue(float InMaxValue);


// Function  KantanChartsUMG.KantanBarChartBase.SetOrientation
// Offset::0x34645C0;
void FKantanBarChartBase::SetOrientation(enum class EKantanBarChartOrientation InOrientation);


// Function  KantanChartsUMG.KantanBarChartBase.SetValueAxisConfig
// Offset::0x3464230;
void FKantanBarChartBase::SetValueAxisConfig(FCartesianAxisConfig InCfg);


// Function  KantanChartsUMG.BarChart.SetDatasource
// Offset::0x34639E0;
bool FBarChart::SetDatasource(FObject* InDatasource);


// Function  KantanChartsUMG.KantanCartesianChartBase.AddSeriesStyleOverride
// Offset::0x3464E40;
void FKantanCartesianChartBase::AddSeriesStyleOverride(FName SeriesId,FKantanPointStyle* PointStyle,FLinearColor Color);


// Function  KantanChartsUMG.KantanCartesianChartBase.ConfigureSeries
// Offset::0x3464C10;
void FKantanCartesianChartBase::ConfigureSeries(FName ID,bool bDrawPoints,bool bDrawLines);


// Function  KantanChartsUMG.KantanCartesianChartBase.EnableSeries
// Offset::0x3464D50;
void FKantanCartesianChartBase::EnableSeries(FName ID,bool bEnable);


// Function  KantanChartsUMG.KantanCartesianChartBase.SetAxisTitlePadding
// Offset::0x3464F70;
void FKantanCartesianChartBase::SetAxisTitlePadding(FMargin InPadding);


// Function  KantanChartsUMG.KantanCartesianChartBase.SetDataPointSize
// Offset::0x3465280;
void FKantanCartesianChartBase::SetDataPointSize(enum class EKantanDataPointSize InSize);


// Function  KantanChartsUMG.KantanCartesianChartBase.SetPlotScale
// Offset::0x3465420;
void FKantanCartesianChartBase::SetPlotScale(FVector2D InScale,FVector2D InFocalCoords);


// Function  KantanChartsUMG.KantanCartesianChartBase.SetPlotScaleByRange
// Offset::0x3465310;
void FKantanCartesianChartBase::SetPlotScaleByRange(FCartesianAxisRange InRangeX,FCartesianAxisRange InRangeY);


// Function  KantanChartsUMG.KantanCartesianChartBase.SetXAxisConfig
// Offset::0x3465150;
void FKantanCartesianChartBase::SetXAxisConfig(FCartesianAxisConfig InCfg);


// Function  KantanChartsUMG.KantanCartesianChartBase.SetYAxisConfig
// Offset::0x3465020;
void FKantanCartesianChartBase::SetYAxisConfig(FCartesianAxisConfig InCfg);


// Function  KantanChartsUMG.CartesianPlot.SetDatasource
// Offset::0x3463E20;
bool FCartesianPlot::SetDatasource(FObject* InDatasource);


// Function  KantanChartsUMG.KantanChartLegend.SetBackground
// Offset::0x3466760;
void FKantanChartLegend::SetBackground(FSlateBrush InBrush);


// Function  KantanChartsUMG.KantanChartLegend.SetChart
// Offset::0x3466620;
void FKantanChartLegend::SetChart(FKantanCartesianChartBase* InChart);


// Function  KantanChartsUMG.KantanChartLegend.SetFontSize
// Offset::0x34666C0;
void FKantanChartLegend::SetFontSize(int32_t InFontSize);


// Function  KantanChartsUMG.KantanChartLegend.SetMargins
// Offset::0x3466900;
void FKantanChartLegend::SetMargins(FMargin InMargins);


// Function  KantanChartsUMG.KantanChartLegend.SetSeriesPadding
// Offset::0x3466850;
void FKantanChartLegend::SetSeriesPadding(FMargin InPadding);


// Function  KantanChartsUMG.KantanTimeSeriesPlotBase.SetFixedTimeRange
// Offset::0x34670D0;
void FKantanTimeSeriesPlotBase::SetFixedTimeRange(bool bEnableFixedRange,float TimeRange);


// Function  KantanChartsUMG.KantanTimeSeriesPlotBase.SetLowerTimeBound
// Offset::0x3467030;
void FKantanTimeSeriesPlotBase::SetLowerTimeBound(FCartesianRangeBound InLowerBound);


// Function  KantanChartsUMG.KantanTimeSeriesPlotBase.SetLowerValueBound
// Offset::0x3466EF0;
void FKantanTimeSeriesPlotBase::SetLowerValueBound(FCartesianRangeBound InLowerBound);


// Function  KantanChartsUMG.KantanTimeSeriesPlotBase.SetUpperTimeBound
// Offset::0x3466F90;
void FKantanTimeSeriesPlotBase::SetUpperTimeBound(FCartesianRangeBound InUpperBound);


// Function  KantanChartsUMG.KantanTimeSeriesPlotBase.SetUpperValueBound
// Offset::0x3466E50;
void FKantanTimeSeriesPlotBase::SetUpperValueBound(FCartesianRangeBound InUpperBound);


// Function  KantanChartsUMG.SimpleBarChart.BP_AddCategory
// Offset::0x34678B0;
void FSimpleBarChart::BP_AddCategory(FText Name,FName CatId);


// Function  KantanChartsUMG.SimpleBarChart.BP_AddCategoryWithId
// Offset::0x34679F0;
void FSimpleBarChart::BP_AddCategoryWithId(FName ID,FText Name,bool bSuccess);


// Function  KantanChartsUMG.SimpleBarChart.BP_RemoveAllCategories
// Offset::0x34677A0;
void FSimpleBarChart::BP_RemoveAllCategories();


// Function  KantanChartsUMG.SimpleBarChart.BP_RemoveCategory
// Offset::0x34677C0;
void FSimpleBarChart::BP_RemoveCategory(FName ID,bool bSuccess);


// Function  KantanChartsUMG.SimpleBarChart.BP_UpdateCategoryValue
// Offset::0x3467660;
void FSimpleBarChart::BP_UpdateCategoryValue(FName ID,float Value,bool bSuccess);


// Function  KantanChartsUMG.SimpleCartesianPlot.BP_AddDatapoint
// Offset::0x3468020;
void FSimpleCartesianPlot::BP_AddDatapoint(FName SeriesId,FVector2D Point,bool bSuccess);


// Function  KantanChartsUMG.SimpleCartesianPlot.BP_AddSeries
// Offset::0x3468270;
void FSimpleCartesianPlot::BP_AddSeries(FName SeriesId,FText Name,bool bEnabled,bool bShowPoints,bool bShowLines);


// Function  KantanChartsUMG.SimpleCartesianPlot.BP_AddSeriesWithId
// Offset::0x34684C0;
void FSimpleCartesianPlot::BP_AddSeriesWithId(bool bSuccess,FName ID,FText Name,bool bEnabled,bool bShowPoints,bool bShowLines);


// Function  KantanChartsUMG.SimpleCartesianPlot.BP_RemoveAllSeries
// Offset::0x3468160;
void FSimpleCartesianPlot::BP_RemoveAllSeries();


// Function  KantanChartsUMG.SimpleCartesianPlot.BP_RemoveSeries
// Offset::0x3468180;
void FSimpleCartesianPlot::BP_RemoveSeries(FName ID,bool bSuccess);


// Function  KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddDatapoint
// Offset::0x3468DE0;
void FSimpleTimeSeriesPlot::BP_AddDatapoint(FName SeriesId,FVector2D Point,bool bSuccess);


// Function  KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddDatapointNow
// Offset::0x3468CA0;
void FSimpleTimeSeriesPlot::BP_AddDatapointNow(FName SeriesId,float Value,bool bSuccess);


// Function  KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddSeries
// Offset::0x3469030;
void FSimpleTimeSeriesPlot::BP_AddSeries(FName SeriesId,FText Name,bool bEnabled,bool bShowPoints,bool bShowLines);


// Function  KantanChartsUMG.SimpleTimeSeriesPlot.BP_AddSeriesWithId
// Offset::0x3469280;
void FSimpleTimeSeriesPlot::BP_AddSeriesWithId(bool bSuccess,FName ID,FText Name,bool bEnabled,bool bShowPoints,bool bShowLines);


// Function  KantanChartsUMG.SimpleTimeSeriesPlot.BP_RemoveAllSeries
// Offset::0x3468F20;
void FSimpleTimeSeriesPlot::BP_RemoveAllSeries();


// Function  KantanChartsUMG.SimpleTimeSeriesPlot.BP_RemoveSeries
// Offset::0x3468F40;
void FSimpleTimeSeriesPlot::BP_RemoveSeries(FName ID,bool bSuccess);


// Function  KantanChartsUMG.SimpleTimeSeriesPlot.BP_SetDatapointLimit
// Offset::0x3468C00;
void FSimpleTimeSeriesPlot::BP_SetDatapointLimit(int32_t Limit);


// Function  KantanChartsUMG.TimeSeriesPlot.SetDatasource
// Offset::0x3469AD0;
bool FTimeSeriesPlot::SetDatasource(FObject* InDatasource);


// Function  NiagaraUIRenderer.NiagaraSystemWidget.ActivateSystem
// Offset::0x3472690;
void FNiagaraSystemWidget::ActivateSystem(bool Reset);


// Function  NiagaraUIRenderer.NiagaraSystemWidget.DeactivateSystem
// Offset::0x3472670;
void FNiagaraSystemWidget::DeactivateSystem();


// Function  NiagaraUIRenderer.NiagaraSystemWidget.GetNiagaraComponent
// Offset::0x3472640;
FNiagaraUIComponent* FNiagaraSystemWidget::GetNiagaraComponent();


// Function  NiagaraUIRenderer.NiagaraSystemWidget.GetRemapMaterial
// Offset::0x34722E0;
FMaterialInterface* FNiagaraSystemWidget::GetRemapMaterial(FMaterialInterface* OriginalMaterial);


// Function  NiagaraUIRenderer.NiagaraSystemWidget.SetDesiredWidgetSize
// Offset::0x3472460;
void FNiagaraSystemWidget::SetDesiredWidgetSize(FVector2D NewDesiredSize);


// Function  NiagaraUIRenderer.NiagaraSystemWidget.SetRemapMaterial
// Offset::0x3472380;
void FNiagaraSystemWidget::SetRemapMaterial(FMaterialInterface* OriginalMaterial,FMaterialInterface* RemapMaterial);


// Function  NiagaraUIRenderer.NiagaraSystemWidget.UpdateNiagaraSystemReference
// Offset::0x34725A0;
void FNiagaraSystemWidget::UpdateNiagaraSystemReference(FNiagaraSystem* NewNiagaraSystem);


// Function  NiagaraUIRenderer.NiagaraSystemWidget.UpdateTickWhenPaused
// Offset::0x3472500;
void FNiagaraSystemWidget::UpdateTickWhenPaused(bool NewTickWhenPaused);


// Function  PrefabricatorRuntime.PrefabActor.GetPrefabAsset
// Offset::0x347F170;
FPrefabricatorAsset* FPrefabActor::GetPrefabAsset();


// Function  PrefabricatorRuntime.PrefabActor.IsPrefabOutdated
// Offset::0x347F1A0;
bool FPrefabActor::IsPrefabOutdated();


// Function  PrefabricatorRuntime.PrefabActor.LoadPrefab
// Offset::0x347F1F0;
void FPrefabActor::LoadPrefab();


// Function  PrefabricatorRuntime.PrefabActor.RandomizeSeed
// Offset::0x347F070;
void FPrefabActor::RandomizeSeed(FRandomStream InRandom,bool bRecursive);


// Function  PrefabricatorRuntime.PrefabActor.SavePrefab
// Offset::0x347F1D0;
void FPrefabActor::SavePrefab();


// Function  PrefabricatorRuntime.PrefabRandomizer.Randomize
// Offset::0x347FB60;
void FPrefabRandomizer::Randomize(int32_t InSeed);


// Function  PrefabricatorRuntime.PrefabricatorEventListener.PostSpawn
// Offset::0x3480190;
void FPrefabricatorEventListener::PostSpawn(FPrefabActor* Prefab);


// Function  PrefabricatorRuntime.PrefabricatorBlueprintLibrary.FindTopMostPrefabActor
// Offset::0x3480A00;
FPrefabActor* FPrefabricatorBlueprintLibrary::FindTopMostPrefabActor(FActor* InActor);


// Function  PrefabricatorRuntime.PrefabricatorBlueprintLibrary.GetAllAttachedActors
// Offset::0x3480BD0;
void FPrefabricatorBlueprintLibrary::GetAllAttachedActors(FActor* Prefab,TArray<FActor*> AttachedActors);


// Function  PrefabricatorRuntime.PrefabricatorBlueprintLibrary.RandomizePrefab
// Offset::0x3480D60;
void FPrefabricatorBlueprintLibrary::RandomizePrefab(FPrefabActor* PrefabActor,FRandomStream InRandom);


// Function  PrefabricatorRuntime.PrefabricatorBlueprintLibrary.SetPrefabAsset
// Offset::0x3480AA0;
void FPrefabricatorBlueprintLibrary::SetPrefabAsset(FPrefabActor* PrefabActor,FPrefabricatorAssetInterface* Prefab,bool bReloadPrefab);


// Function  PrefabricatorRuntime.PrefabricatorBlueprintLibrary.SpawnPrefab
// Offset::0x3480E50;
FPrefabActor* FPrefabricatorBlueprintLibrary::SpawnPrefab(FObject* WorldContextObject,FPrefabricatorAssetInterface* Prefab,FTransform Transform,int32_t Seed);


// Function  PrefabricatorRuntime.PrefabricatorBlueprintLibrary.UnlinkPrefab
// Offset::0x3480CD0;
void FPrefabricatorBlueprintLibrary::UnlinkPrefab(FPrefabActor* PrefabActor);


// Function  ConstructionSystemRuntime.ConstructionSystemBuildTool.HandleInput_ConstructAtCursor
// Offset::0x3491EE0;
void FConstructionSystemBuildTool::HandleInput_ConstructAtCursor();


// Function  ConstructionSystemRuntime.ConstructionSystemBuildTool.HandleInput_CursorMoveNext
// Offset::0x3491EC0;
void FConstructionSystemBuildTool::HandleInput_CursorMoveNext();


// Function  ConstructionSystemRuntime.ConstructionSystemBuildTool.HandleInput_CursorMovePrev
// Offset::0x3491EA0;
void FConstructionSystemBuildTool::HandleInput_CursorMovePrev();


// Function  ConstructionSystemRuntime.ConstructionSystemBuildTool.HandleInput_RotateCursorStep
// Offset::0x3491E00;
void FConstructionSystemBuildTool::HandleInput_RotateCursorStep(float NumSteps);


// Function  ConstructionSystemRuntime.ConstructionSystemBuildTool.SetActivePrefab
// Offset::0x3491F00;
void FConstructionSystemBuildTool::SetActivePrefab(FPrefabricatorAssetInterface* InActivePrefabAsset);


// Function  ConstructionSystemRuntime.ConstructionSystemComponent.DisableConstructionSystem
// Offset::0x3492990;
void FConstructionSystemComponent::DisableConstructionSystem();


// Function  ConstructionSystemRuntime.ConstructionSystemComponent.EnableConstructionSystem
// Offset::0x34929B0;
void FConstructionSystemComponent::EnableConstructionSystem(enum class EConstructionSystemToolType InToolType);


// Function  ConstructionSystemRuntime.ConstructionSystemComponent.GetActiveTool
// Offset::0x3492860;
FConstructionSystemTool* FConstructionSystemComponent::GetActiveTool();


// Function  ConstructionSystemRuntime.ConstructionSystemComponent.GetActiveToolType
// Offset::0x3492890;
enum class EConstructionSystemToolType FConstructionSystemComponent::GetActiveToolType();


// Function  ConstructionSystemRuntime.ConstructionSystemComponent.GetTool
// Offset::0x34927C0;
FConstructionSystemTool* FConstructionSystemComponent::GetTool(enum class EConstructionSystemToolType InToolType);


// Function  ConstructionSystemRuntime.ConstructionSystemComponent.HideBuildMenu
// Offset::0x3492950;
void FConstructionSystemComponent::HideBuildMenu();


// Function  ConstructionSystemRuntime.ConstructionSystemComponent.SetActiveTool
// Offset::0x34928C0;
void FConstructionSystemComponent::SetActiveTool(enum class EConstructionSystemToolType InToolType);


// Function  ConstructionSystemRuntime.ConstructionSystemComponent.ShowBuildMenu
// Offset::0x3492970;
void FConstructionSystemComponent::ShowBuildMenu();


// Function  ConstructionSystemRuntime.ConstructionSystemComponent.ToggleConstructionSystem
// Offset::0x3492A40;
void FConstructionSystemComponent::ToggleConstructionSystem();


// Function  ConstructionSystemRuntime.ConstructionSystemRemoveTool.HandleInput_RemoveAtCursor
// Offset::0x3493460;
void FConstructionSystemRemoveTool::HandleInput_RemoveAtCursor();


// Function  ConstructionSystemRuntime.ConstructionSystemSaveSystem.HandleConstructionSystemLevelLoad
// Offset::0x3493A50;
void FConstructionSystemSaveSystem::HandleConstructionSystemLevelLoad(FObject* WorldContextObject);


// Function  ConstructionSystemRuntime.ConstructionSystemSaveSystem.LoadConstructionSystemLevel
// Offset::0x3493AE0;
void FConstructionSystemSaveSystem::LoadConstructionSystemLevel(FObject* WorldContextObject,FName LevelName,bool bAbsolute,FString SaveSlotName,int32_t UserIndex);


// Function  ConstructionSystemRuntime.ConstructionSystemSaveSystem.SaveConstructionSystemLevel
// Offset::0x3493CD0;
void FConstructionSystemSaveSystem::SaveConstructionSystemLevel(FObject* WorldContextObject,FString SaveSlotName,int32_t UserIndex,bool bSavePlayerState);


// Function  ConstructionSystemRuntime.ConstructionSystemBuildUI.SetConstructionSystem
// Offset::0x3D30810;
void FConstructionSystemBuildUI::SetConstructionSystem(FConstructionSystemComponent* ConstructionSystem);


// Function  ConstructionSystemRuntime.ConstructionSystemBuildUI.SetUIAsset
// Offset::0x3D30810;
void FConstructionSystemBuildUI::SetUIAsset(FConstructionSystemUIAsset* UIAsset);


// Function  ProceduralMeshComponent.KismetProceduralMeshLibrary.CalculateTangentsForMesh
// Offset::0x34A5810;
void FKismetProceduralMeshLibrary::CalculateTangentsForMesh(TArray<FVector> Vertices,TArray<int32_t> Triangles,TArray<FVector2D> UVs,TArray<FVector> Normals,TArray<FProcMeshTangent> Tangents);


// Function  ProceduralMeshComponent.KismetProceduralMeshLibrary.ConvertQuadToTriangles
// Offset::0x34A5630;
void FKismetProceduralMeshLibrary::ConvertQuadToTriangles(TArray<int32_t> Triangles,int32_t Vert0,int32_t Vert1,int32_t Vert2,int32_t Vert3);


// Function  ProceduralMeshComponent.KismetProceduralMeshLibrary.CopyProceduralMeshFromStaticMeshComponent
// Offset::0x34A4A00;
void FKismetProceduralMeshLibrary::CopyProceduralMeshFromStaticMeshComponent(FStaticMeshComponent* StaticMeshComponent,int32_t LODIndex,FProceduralMeshComponent* ProcMeshComponent,bool bCreateCollision);


// Function  ProceduralMeshComponent.KismetProceduralMeshLibrary.CreateGridMeshSplit
// Offset::0x34A4F10;
void FKismetProceduralMeshLibrary::CreateGridMeshSplit(int32_t NumX,int32_t NumY,TArray<int32_t> Triangles,TArray<FVector> Vertices,TArray<FVector2D> UVs,TArray<FVector2D> UV1s,float GridSpacing);


// Function  ProceduralMeshComponent.KismetProceduralMeshLibrary.CreateGridMeshTriangles
// Offset::0x34A54A0;
void FKismetProceduralMeshLibrary::CreateGridMeshTriangles(int32_t NumX,int32_t NumY,bool bWinding,TArray<int32_t> Triangles);


// Function  ProceduralMeshComponent.KismetProceduralMeshLibrary.CreateGridMeshWelded
// Offset::0x34A5220;
void FKismetProceduralMeshLibrary::CreateGridMeshWelded(int32_t NumX,int32_t NumY,TArray<int32_t> Triangles,TArray<FVector> Vertices,TArray<FVector2D> UVs,float GridSpacing);


// Function  ProceduralMeshComponent.KismetProceduralMeshLibrary.GenerateBoxMesh
// Offset::0x34A5A90;
void FKismetProceduralMeshLibrary::GenerateBoxMesh(FVector BoxRadius,TArray<FVector> Vertices,TArray<int32_t> Triangles,TArray<FVector> Normals,TArray<FVector2D> UVs,TArray<FProcMeshTangent> Tangents);


// Function  ProceduralMeshComponent.KismetProceduralMeshLibrary.GetSectionFromProceduralMesh
// Offset::0x34A46C0;
void FKismetProceduralMeshLibrary::GetSectionFromProceduralMesh(FProceduralMeshComponent* InProcMesh,int32_t SectionIndex,TArray<FVector> Vertices,TArray<int32_t> Triangles,TArray<FVector> Normals,TArray<FVector2D> UVs,TArray<FProcMeshTangent> Tangents);


// Function  ProceduralMeshComponent.KismetProceduralMeshLibrary.GetSectionFromStaticMesh
// Offset::0x34A4B80;
void FKismetProceduralMeshLibrary::GetSectionFromStaticMesh(FStaticMesh* InMesh,int32_t LODIndex,int32_t SectionIndex,TArray<FVector> Vertices,TArray<int32_t> Triangles,TArray<FVector> Normals,TArray<FVector2D> UVs,TArray<FProcMeshTangent> Tangents);


// Function  ProceduralMeshComponent.KismetProceduralMeshLibrary.SliceProceduralMesh
// Offset::0x34A43D0;
void FKismetProceduralMeshLibrary::SliceProceduralMesh(FProceduralMeshComponent* InProcMesh,FVector PlanePosition,FVector PlaneNormal,bool bCreateOtherHalf,FProceduralMeshComponent* OutOtherHalfProcMesh,enum class EProcMeshSliceCapOption CapOption,FMaterialInterface* CapMaterial);


// Function  ProceduralMeshComponent.ProceduralMeshComponent.AddCollisionConvexMesh
// Offset::0x34A6770;
void FProceduralMeshComponent::AddCollisionConvexMesh(TArray<FVector> ConvexVerts);


// Function  ProceduralMeshComponent.ProceduralMeshComponent.ClearAllMeshSections
// Offset::0x34A6A20;
void FProceduralMeshComponent::ClearAllMeshSections();


// Function  ProceduralMeshComponent.ProceduralMeshComponent.ClearCollisionConvexMeshes
// Offset::0x34A6750;
void FProceduralMeshComponent::ClearCollisionConvexMeshes();


// Function  ProceduralMeshComponent.ProceduralMeshComponent.ClearMeshSection
// Offset::0x34A6A40;
void FProceduralMeshComponent::ClearMeshSection(int32_t SectionIndex);


// Function  ProceduralMeshComponent.ProceduralMeshComponent.CreateMeshSection
// Offset::0x34A7880;
void FProceduralMeshComponent::CreateMeshSection(int32_t SectionIndex,TArray<FVector> Vertices,TArray<int32_t> Triangles,TArray<FVector> Normals,TArray<FVector2D> UV0,TArray<FColor> VertexColors,TArray<FProcMeshTangent> Tangents,bool bCreateCollision);


// Function  ProceduralMeshComponent.ProceduralMeshComponent.CreateMeshSection_LinearColor
// Offset::0x34A7300;
void FProceduralMeshComponent::CreateMeshSection_LinearColor(int32_t SectionIndex,TArray<FVector> Vertices,TArray<int32_t> Triangles,TArray<FVector> Normals,TArray<FVector2D> UV0,TArray<FVector2D> UV1,TArray<FVector2D> UV2,TArray<FVector2D> UV3,TArray<FLinearColor> VertexColors,TArray<FProcMeshTangent> Tangents,bool bCreateCollision);


// Function  ProceduralMeshComponent.ProceduralMeshComponent.GetNumSections
// Offset::0x34A6860;
int32_t FProceduralMeshComponent::GetNumSections();


// Function  ProceduralMeshComponent.ProceduralMeshComponent.IsMeshSectionVisible
// Offset::0x34A6890;
bool FProceduralMeshComponent::IsMeshSectionVisible(int32_t SectionIndex);


// Function  ProceduralMeshComponent.ProceduralMeshComponent.SetMeshSectionVisible
// Offset::0x34A6930;
void FProceduralMeshComponent::SetMeshSectionVisible(int32_t SectionIndex,bool bNewVisibility);


// Function  ProceduralMeshComponent.ProceduralMeshComponent.UpdateMeshSection
// Offset::0x34A6F60;
void FProceduralMeshComponent::UpdateMeshSection(int32_t SectionIndex,TArray<FVector> Vertices,TArray<FVector> Normals,TArray<FVector2D> UV0,TArray<FColor> VertexColors,TArray<FProcMeshTangent> Tangents);


// Function  ProceduralMeshComponent.ProceduralMeshComponent.UpdateMeshSection_LinearColor
// Offset::0x34A6AE0;
void FProceduralMeshComponent::UpdateMeshSection_LinearColor(int32_t SectionIndex,TArray<FVector> Vertices,TArray<FVector> Normals,TArray<FVector2D> UV0,TArray<FVector2D> UV1,TArray<FVector2D> UV2,TArray<FVector2D> UV3,TArray<FLinearColor> VertexColors,TArray<FProcMeshTangent> Tangents);


// Function  IKRig.IKRigComponent.ClearAllGoals
// Offset::0x36F1FD0;
void FIKRigComponent::ClearAllGoals();


// Function  IKRig.IKRigComponent.SetIKRigGoal
// Offset::0x36F2040;
void FIKRigComponent::SetIKRigGoal(FIKRigGoal Goal);


// Function  IKRig.IKRigComponent.SetIKRigGoalPositionAndRotation
// Offset::0x36F25A0;
void FIKRigComponent::SetIKRigGoalPositionAndRotation(FName GoalName,FVector Position,FQuat Rotation,float PositionAlpha,float RotationAlpha);


// Function  IKRig.IKRigComponent.SetIKRigGoalTransform
// Offset::0x36F2190;
void FIKRigComponent::SetIKRigGoalTransform(FName GoalName,FTransform Transform,float PositionAlpha,float RotationAlpha);


// Function  IKRig.IKGoalCreatorInterface.AddIKGoals
// Offset::0x36F34C0;
void FIKGoalCreatorInterface::AddIKGoals(TMap<FName,FIKRigGoal> OutGoals);


// Function  AnimationSharing.AnimSharingStateInstance.GetInstancedActors
// Offset::0x3729180;
void FAnimSharingStateInstance::GetInstancedActors(TArray<FActor*> Actors);


// Function  AnimationSharing.AnimationSharingManager.AnimationSharingEnabled
// Offset::0x3729950;
bool FAnimationSharingManager::AnimationSharingEnabled();


// Function  AnimationSharing.AnimationSharingManager.CreateAnimationSharingManager
// Offset::0x3729A60;
bool FAnimationSharingManager::CreateAnimationSharingManager(FObject* WorldContextObject,FAnimationSharingSetup* Setup);


// Function  AnimationSharing.AnimationSharingManager.GetAnimationSharingManager
// Offset::0x3729B40;
FAnimationSharingManager* FAnimationSharingManager::GetAnimationSharingManager(FObject* WorldContextObject);


// Function  AnimationSharing.AnimationSharingManager.RegisterActorWithSkeletonBP
// Offset::0x3729980;
void FAnimationSharingManager::RegisterActorWithSkeletonBP(FActor* InActor,FSkeleton* SharingSkeleton);


// Function  AnimationSharing.AnimationSharingStateProcessor.GetAnimationStateEnum
// Offset::0x26D2250;
FEnum* FAnimationSharingStateProcessor::GetAnimationStateEnum();


// Function  AnimationSharing.AnimationSharingStateProcessor.ProcessActorState
// Offset::0x372A2E0;
void FAnimationSharingStateProcessor::ProcessActorState(int32_t OutState,FActor* InActor,char CurrentState,char OnDemandState,bool bShouldProcess);


// Function  Engine.AudioComponent.AdjustAttenuation
// Offset::0x632DB60;
void FAudioComponent::AdjustAttenuation(FSoundAttenuationSettings InAttenuationSettings);


// Function  Engine.AudioComponent.AdjustVolume
// Offset::0x632DEE0;
void FAudioComponent::AdjustVolume(float AdjustVolumeDuration,float AdjustVolumeLevel,enum class EAudioFaderCurve FadeCurve);


// Function  Engine.AudioComponent.BP_GetAttenuationSettingsToApply
// Offset::0x632D060;
bool FAudioComponent::BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings OutAttenuationSettings);


// Function  Engine.AudioComponent.FadeIn
// Offset::0x632EBC0;
void FAudioComponent::FadeIn(float FadeInDuration,float FadeVolumeLevel,float StartTime,enum class EAudioFaderCurve FadeCurve);


// Function  Engine.AudioComponent.FadeOut
// Offset::0x632EA90;
void FAudioComponent::FadeOut(float FadeOutDuration,float FadeVolumeLevel,enum class EAudioFaderCurve FadeCurve);


// Function  Engine.AudioComponent.GetCookedEnvelopeData
// Offset::0x632D1E0;
bool FAudioComponent::GetCookedEnvelopeData(float OutEnvelopeData);


// Function  Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
// Offset::0x632D120;
bool FAudioComponent::GetCookedEnvelopeDataForAllPlayingSounds(TArray<FSoundWaveEnvelopeDataPerSound> OutEnvelopeData);


// Function  Engine.AudioComponent.GetCookedFFTData
// Offset::0x632D390;
bool FAudioComponent::GetCookedFFTData(TArray<float> FrequenciesToGet,TArray<FSoundWaveSpectralData> OutSoundWaveSpectralData);


// Function  Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
// Offset::0x632D290;
bool FAudioComponent::GetCookedFFTDataForAllPlayingSounds(TArray<FSoundWaveSpectralDataPerSound> OutSoundWaveSpectralData);


// Function  Engine.AudioComponent.GetPlayState
// Offset::0x632E010;
enum class EAudioComponentPlayState FAudioComponent::GetPlayState();


// Function  Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
// Offset::0x632D4C0;
bool FAudioComponent::HasCookedAmplitudeEnvelopeData();


// Function  Engine.AudioComponent.HasCookedFFTData
// Offset::0x632D4F0;
bool FAudioComponent::HasCookedFFTData();


// Function  Engine.AudioComponent.IsPlaying
// Offset::0x632E070;
bool FAudioComponent::IsPlaying();


// Function  Engine.AudioComponent.IsVirtualized
// Offset::0x632E040;
bool FAudioComponent::IsVirtualized();


// Function  Engine.AudioComponent.Play
// Offset::0x632E9F0;
void FAudioComponent::Play(float StartTime);


// Function  Engine.AudioComponent.PlayEx
// Offset::0x632E8C0;
void FAudioComponent::PlayEx(float StartTime,float FadeInDuration,FActor* OwnerOverride);


// Function  Engine.AudioComponent.PlayQuantized
// Offset::0x632E4E0;
void FAudioComponent::PlayQuantized(FObject* WorldContextObject,FQuartzClockHandle* InClockHandle,FQuartzQuantizationBoundary InQuantizationBoundary,FDelegate InDelegate,float InStartTime,float InFadeInDuration,float InFadeVolumeLevel,enum class EAudioFaderCurve InFadeCurve);


// Function  Engine.AudioComponent.SetAudioBusSendPostEffect
// Offset::0x632D700;
void FAudioComponent::SetAudioBusSendPostEffect(FAudioBus* AudioBus,float AudioBusSendLevel);


// Function  Engine.AudioComponent.SetAudioBusSendPreEffect
// Offset::0x632D7E0;
void FAudioComponent::SetAudioBusSendPreEffect(FAudioBus* AudioBus,float AudioBusSendLevel);


// Function  Engine.AudioComponent.SetBoolParameter
// Offset::0x632E3F0;
void FAudioComponent::SetBoolParameter(FName InName,bool InBool);


// Function  Engine.AudioComponent.SetFloatParameter
// Offset::0x632E210;
void FAudioComponent::SetFloatParameter(FName InName,float InFloat);


// Function  Engine.AudioComponent.SetIntParameter
// Offset::0x632E300;
void FAudioComponent::SetIntParameter(FName InName,int32_t inInt);


// Function  Engine.AudioComponent.SetLowPassFilterEnabled
// Offset::0x632D660;
void FAudioComponent::SetLowPassFilterEnabled(bool InLowPassFilterEnabled);


// Function  Engine.AudioComponent.SetLowPassFilterFrequency
// Offset::0x632D5C0;
void FAudioComponent::SetLowPassFilterFrequency(float InLowPassFilterFrequency);


// Function  Engine.AudioComponent.SetOutputToBusOnly
// Offset::0x632D520;
void FAudioComponent::SetOutputToBusOnly(bool bInOutputToBusOnly);


// Function  Engine.AudioComponent.SetPaused
// Offset::0x632E0B0;
void FAudioComponent::SetPaused(bool bPause);


// Function  Engine.AudioComponent.SetPitchMultiplier
// Offset::0x632DCC0;
void FAudioComponent::SetPitchMultiplier(float NewPitchMultiplier);


// Function  Engine.AudioComponent.SetSound
// Offset::0x632ED40;
void FAudioComponent::SetSound(FSoundBase* NewSound);


// Function  Engine.AudioComponent.SetSourceBusSendPostEffect
// Offset::0x632D8C0;
void FAudioComponent::SetSourceBusSendPostEffect(FSoundSourceBus* SoundSourceBus,float SourceBusSendLevel);


// Function  Engine.AudioComponent.SetSourceBusSendPreEffect
// Offset::0x632D9A0;
void FAudioComponent::SetSourceBusSendPreEffect(FSoundSourceBus* SoundSourceBus,float SourceBusSendLevel);


// Function  Engine.AudioComponent.SetSubmixSend
// Offset::0x632DA80;
void FAudioComponent::SetSubmixSend(FSoundSubmixBase* Submix,float SendLevel);


// Function  Engine.AudioComponent.SetUISound
// Offset::0x632DC20;
void FAudioComponent::SetUISound(bool bInUISound);


// Function  Engine.AudioComponent.SetVolumeMultiplier
// Offset::0x632DD60;
void FAudioComponent::SetVolumeMultiplier(float NewVolumeMultiplier);


// Function  Engine.AudioComponent.SetWaveParameter
// Offset::0x632DE00;
void FAudioComponent::SetWaveParameter(FName InName,FSoundWave* InWave);


// Function  Engine.AudioComponent.Stop
// Offset::0x632E1F0;
void FAudioComponent::Stop();


// Function  Engine.AudioComponent.StopDelayed
// Offset::0x632E150;
void FAudioComponent::StopDelayed(float DelayTime);


// Function  DatasmithContent.DatasmithContentBlueprintLibrary.GetDatasmithUserData
// Offset::0x3739480;
FDatasmithAssetUserData* FDatasmithContentBlueprintLibrary::GetDatasmithUserData(FObject* Object);


// Function  DatasmithContent.DatasmithContentBlueprintLibrary.GetDatasmithUserDataKeysAndValuesForValue
// Offset::0x3739160;
void FDatasmithContentBlueprintLibrary::GetDatasmithUserDataKeysAndValuesForValue(FObject* Object,FString StringToMatch,TArray<FName> OutKeys,TArray<FString> OutValues);


// Function  DatasmithContent.DatasmithContentBlueprintLibrary.GetDatasmithUserDataValueForKey
// Offset::0x3739360;
FString FDatasmithContentBlueprintLibrary::GetDatasmithUserDataValueForKey(FObject* Object,FName Key);


// Function  DatasmithContent.DatasmithImportedSequencesActor.PlayLevelSequence
// Offset::0x33C4200;
void FDatasmithImportedSequencesActor::PlayLevelSequence(FLevelSequence* SequenceToPlay);


// Function  VariantManagerContent.LevelVariantSets.GetNumVariantSets
// Offset::0x374B980;
int32_t FLevelVariantSets::GetNumVariantSets();


// Function  VariantManagerContent.LevelVariantSets.GetVariantSet
// Offset::0x374B8E0;
FVariantSet* FLevelVariantSets::GetVariantSet(int32_t VariantSetIndex);


// Function  VariantManagerContent.LevelVariantSets.GetVariantSetByName
// Offset::0x374B7E0;
FVariantSet* FLevelVariantSets::GetVariantSetByName(FString VariantSetName);


// Function  VariantManagerContent.LevelVariantSetsActor.GetLevelVariantSets
// Offset::0x374C120;
FLevelVariantSets* FLevelVariantSetsActor::GetLevelVariantSets(bool bLoad);


// Function  VariantManagerContent.LevelVariantSetsActor.SetLevelVariantSets
// Offset::0x374C080;
void FLevelVariantSetsActor::SetLevelVariantSets(FLevelVariantSets* InVariantSets);


// Function  VariantManagerContent.LevelVariantSetsActor.SwitchOnVariantByIndex
// Offset::0x374BDF0;
bool FLevelVariantSetsActor::SwitchOnVariantByIndex(int32_t VariantSetIndex,int32_t VariantIndex);


// Function  VariantManagerContent.LevelVariantSetsActor.SwitchOnVariantByName
// Offset::0x374BEE0;
bool FLevelVariantSetsActor::SwitchOnVariantByName(FString VariantSetName,FString VariantName);


// Function  VariantManagerContent.PropertyValue.GetFullDisplayString
// Offset::0x374C840;
FString FPropertyValue::GetFullDisplayString();


// Function  VariantManagerContent.PropertyValue.GetPropertyTooltip
// Offset::0x374C8B0;
FText FPropertyValue::GetPropertyTooltip();


// Function  VariantManagerContent.PropertyValue.HasRecordedData
// Offset::0x374C810;
bool FPropertyValue::HasRecordedData();


// Function  VariantManagerContent.SwitchActor.GetOptions
// Offset::0x374D370;
TArray<FActor*> FSwitchActor::GetOptions();


// Function  VariantManagerContent.SwitchActor.GetSelectedOption
// Offset::0x374D340;
int32_t FSwitchActor::GetSelectedOption();


// Function  VariantManagerContent.SwitchActor.SelectOption
// Offset::0x374D2A0;
void FSwitchActor::SelectOption(int32_t OptionIndex);


// Function  VariantManagerContent.Variant.AddDependency
// Offset::0x374DC90;
int32_t FVariant::AddDependency(FVariantDependency Dependency);


// Function  VariantManagerContent.Variant.DeleteDependency
// Offset::0x374D900;
void FVariant::DeleteDependency(int32_t Index);


// Function  VariantManagerContent.Variant.GetActor
// Offset::0x374E340;
FActor* FVariant::GetActor(int32_t ActorIndex);


// Function  VariantManagerContent.Variant.GetDependency
// Offset::0x374DB30;
FVariantDependency FVariant::GetDependency(int32_t Index);


// Function  VariantManagerContent.Variant.GetDependents
// Offset::0x374DDD0;
TArray<FVariant*> FVariant::GetDependents(FLevelVariantSets* LevelVariantSets,bool bOnlyEnabledDependencies);


// Function  VariantManagerContent.Variant.GetDisplayText
// Offset::0x374E410;
FText FVariant::GetDisplayText();


// Function  VariantManagerContent.Variant.GetNumActors
// Offset::0x374E3E0;
int32_t FVariant::GetNumActors();


// Function  VariantManagerContent.Variant.GetNumDependencies
// Offset::0x374D8D0;
int32_t FVariant::GetNumDependencies();


// Function  VariantManagerContent.Variant.GetParent
// Offset::0x374E580;
FVariantSet* FVariant::GetParent();


// Function  VariantManagerContent.Variant.GetThumbnail
// Offset::0x374DF00;
FTexture2D* FVariant::GetThumbnail();


// Function  VariantManagerContent.Variant.IsActive
// Offset::0x374E2F0;
bool FVariant::IsActive();


// Function  VariantManagerContent.Variant.SetDependency
// Offset::0x374D9A0;
void FVariant::SetDependency(int32_t Index,FVariantDependency Dependency);


// Function  VariantManagerContent.Variant.SetDisplayText
// Offset::0x374E4A0;
void FVariant::SetDisplayText(FText NewDisplayText);


// Function  VariantManagerContent.Variant.SetThumbnailFromCamera
// Offset::0x374DF30;
void FVariant::SetThumbnailFromCamera(FObject* WorldContextObject,FTransform CameraTransform,float FOVDegrees,float MinZ,float Gamma);


// Function  VariantManagerContent.Variant.SetThumbnailFromEditorViewport
// Offset::0x1B91E70;
void FVariant::SetThumbnailFromEditorViewport();


// Function  VariantManagerContent.Variant.SetThumbnailFromFile
// Offset::0x374E160;
void FVariant::SetThumbnailFromFile(FString FilePath);


// Function  VariantManagerContent.Variant.SetThumbnailFromTexture
// Offset::0x374E250;
void FVariant::SetThumbnailFromTexture(FTexture2D* NewThumbnail);


// Function  VariantManagerContent.Variant.SwitchOn
// Offset::0x374E320;
void FVariant::SwitchOn();


// Function  VariantManagerContent.VariantSet.GetDisplayText
// Offset::0x374F710;
FText FVariantSet::GetDisplayText();


// Function  VariantManagerContent.VariantSet.GetNumVariants
// Offset::0x374F6E0;
int32_t FVariantSet::GetNumVariants();


// Function  VariantManagerContent.VariantSet.GetParent
// Offset::0x374F880;
FLevelVariantSets* FVariantSet::GetParent();


// Function  VariantManagerContent.VariantSet.GetThumbnail
// Offset::0x1AA5FD0;
FTexture2D* FVariantSet::GetThumbnail();


// Function  VariantManagerContent.VariantSet.GetVariant
// Offset::0x374F640;
FVariant* FVariantSet::GetVariant(int32_t VariantIndex);


// Function  VariantManagerContent.VariantSet.GetVariantByName
// Offset::0x374F540;
FVariant* FVariantSet::GetVariantByName(FString VariantName);


// Function  VariantManagerContent.VariantSet.SetDisplayText
// Offset::0x374F7A0;
void FVariantSet::SetDisplayText(FText NewDisplayText);


// Function  VariantManagerContent.VariantSet.SetThumbnailFromCamera
// Offset::0x374F180;
void FVariantSet::SetThumbnailFromCamera(FObject* WorldContextObject,FTransform CameraTransform,float FOVDegrees,float MinZ,float Gamma);


// Function  VariantManagerContent.VariantSet.SetThumbnailFromEditorViewport
// Offset::0x1B91E70;
void FVariantSet::SetThumbnailFromEditorViewport();


// Function  VariantManagerContent.VariantSet.SetThumbnailFromFile
// Offset::0x374F3B0;
void FVariantSet::SetThumbnailFromFile(FString FilePath);


// Function  VariantManagerContent.VariantSet.SetThumbnailFromTexture
// Offset::0x374F4A0;
void FVariantSet::SetThumbnailFromTexture(FTexture2D* NewThumbnail);


// Function  AutomationUtils.AutomationUtilsBlueprintLibrary.TakeGameplayAutomationScreenshot
// Offset::0x3754880;
void FAutomationUtilsBlueprintLibrary::TakeGameplayAutomationScreenshot(FString ScreenshotName,float MaxGlobalError,float MaxLocalError,FString MapNameOverride);


// Function  GeometryCache.GeometryCacheActor.GetGeometryCacheComponent
// Offset::0x37B5190;
FGeometryCacheComponent* FGeometryCacheActor::GetGeometryCacheComponent();


// Function  GeometryCache.GeometryCacheComponent.GetAnimationTime
// Offset::0x37B5C50;
float FGeometryCacheComponent::GetAnimationTime();


// Function  GeometryCache.GeometryCacheComponent.GetDuration
// Offset::0x37B5BF0;
float FGeometryCacheComponent::GetDuration();


// Function  GeometryCache.GeometryCacheComponent.GetMotionVectorScale
// Offset::0x37B5E90;
float FGeometryCacheComponent::GetMotionVectorScale();


// Function  GeometryCache.GeometryCacheComponent.GetNumberOfFrames
// Offset::0x37B5BC0;
int32_t FGeometryCacheComponent::GetNumberOfFrames();


// Function  GeometryCache.GeometryCacheComponent.GetOverrideWireframeColor
// Offset::0x37B5AF0;
bool FGeometryCacheComponent::GetOverrideWireframeColor();


// Function  GeometryCache.GeometryCacheComponent.GetPlaybackDirection
// Offset::0x37B5C20;
float FGeometryCacheComponent::GetPlaybackDirection();


// Function  GeometryCache.GeometryCacheComponent.GetPlaybackSpeed
// Offset::0x37B5F60;
float FGeometryCacheComponent::GetPlaybackSpeed();


// Function  GeometryCache.GeometryCacheComponent.GetStartTimeOffset
// Offset::0x37B5D20;
float FGeometryCacheComponent::GetStartTimeOffset();


// Function  GeometryCache.GeometryCacheComponent.GetWireframeOverrideColor
// Offset::0x37B5A00;
FLinearColor FGeometryCacheComponent::GetWireframeOverrideColor();


// Function  GeometryCache.GeometryCacheComponent.IsExtrapolatingFrames
// Offset::0x37B6030;
bool FGeometryCacheComponent::IsExtrapolatingFrames();


// Function  GeometryCache.GeometryCacheComponent.IsLooping
// Offset::0x37B6100;
bool FGeometryCacheComponent::IsLooping();


// Function  GeometryCache.GeometryCacheComponent.IsPlaying
// Offset::0x37B6160;
bool FGeometryCacheComponent::IsPlaying();


// Function  GeometryCache.GeometryCacheComponent.IsPlayingReversed
// Offset::0x37B6130;
bool FGeometryCacheComponent::IsPlayingReversed();


// Function  GeometryCache.GeometryCacheComponent.Pause
// Offset::0x37B61B0;
void FGeometryCacheComponent::Pause();


// Function  GeometryCache.GeometryCacheComponent.Play
// Offset::0x37B6230;
void FGeometryCacheComponent::Play();


// Function  GeometryCache.GeometryCacheComponent.PlayFromStart
// Offset::0x37B6210;
void FGeometryCacheComponent::PlayFromStart();


// Function  GeometryCache.GeometryCacheComponent.PlayReversed
// Offset::0x37B61F0;
void FGeometryCacheComponent::PlayReversed();


// Function  GeometryCache.GeometryCacheComponent.PlayReversedFromEnd
// Offset::0x37B61D0;
void FGeometryCacheComponent::PlayReversedFromEnd();


// Function  GeometryCache.GeometryCacheComponent.SetExtrapolateFrames
// Offset::0x37B5F90;
void FGeometryCacheComponent::SetExtrapolateFrames(bool bNewExtrapolating);


// Function  GeometryCache.GeometryCacheComponent.SetGeometryCache
// Offset::0x37B5D50;
bool FGeometryCacheComponent::SetGeometryCache(FGeometryCache* NewGeomCache);


// Function  GeometryCache.GeometryCacheComponent.SetLooping
// Offset::0x37B6060;
void FGeometryCacheComponent::SetLooping(bool bNewLooping);


// Function  GeometryCache.GeometryCacheComponent.SetMotionVectorScale
// Offset::0x37B5DF0;
void FGeometryCacheComponent::SetMotionVectorScale(float NewMotionVectorScale);


// Function  GeometryCache.GeometryCacheComponent.SetOverrideWireframeColor
// Offset::0x37B5B20;
void FGeometryCacheComponent::SetOverrideWireframeColor(bool bOverride);


// Function  GeometryCache.GeometryCacheComponent.SetPlaybackSpeed
// Offset::0x37B5EC0;
void FGeometryCacheComponent::SetPlaybackSpeed(float NewPlaybackSpeed);


// Function  GeometryCache.GeometryCacheComponent.SetStartTimeOffset
// Offset::0x37B5C80;
void FGeometryCacheComponent::SetStartTimeOffset(float NewStartTimeOffset);


// Function  GeometryCache.GeometryCacheComponent.SetWireframeOverrideColor
// Offset::0x37B5A50;
void FGeometryCacheComponent::SetWireframeOverrideColor(FLinearColor Color);


// Function  GeometryCache.GeometryCacheComponent.Stop
// Offset::0x37B6190;
void FGeometryCacheComponent::Stop();


// Function  GeometryCache.GeometryCacheComponent.TickAtThisTime
// Offset::0x37B5870;
void FGeometryCacheComponent::TickAtThisTime(float Time,bool bInIsRunning,bool bInBackwards,bool bInIsLooping);


// Function  GeometryCache.GeometryCacheTrack_FlipbookAnimation.AddMeshSample
// Offset::0x37B7440;
void FGeometryCacheTrack_FlipbookAnimation::AddMeshSample(FGeometryCacheMeshData MeshData,float SampleTime);


// Function  GeometryCache.GeometryCacheTrack_TransformAnimation.SetMesh
// Offset::0x37B7930;
void FGeometryCacheTrack_TransformAnimation::SetMesh(FGeometryCacheMeshData NewMeshData);


// Function  GeometryCache.GeometryCacheTrack_TransformGroupAnimation.SetMesh
// Offset::0x37B7930;
void FGeometryCacheTrack_TransformGroupAnimation::SetMesh(FGeometryCacheMeshData NewMeshData);


// Function  MovieSceneCapture.MovieSceneCaptureProtocolBase.GetState
// Offset::0x50295F0;
enum class EMovieSceneCaptureProtocolState FMovieSceneCaptureProtocolBase::GetState();


// Function  MovieSceneCapture.MovieSceneCaptureProtocolBase.IsCapturing
// Offset::0x59264E0;
bool FMovieSceneCaptureProtocolBase::IsCapturing();


// Function  MovieRenderPipelineCore.MoviePipelineSetting.BuildNewProcessCommandLine
// Offset::0x3834170;
void FMoviePipelineSetting::BuildNewProcessCommandLine(FString InOutUnrealURLParams,FString InOutCommandLineArgs);


// Function  MovieRenderPipelineCore.MoviePipelineSetting.BuildNewProcessCommandLineArgs
// Offset::0x3833E50;
void FMoviePipelineSetting::BuildNewProcessCommandLineArgs(TArray<FString> InOutUnrealURLParams,TArray<FString> InOutCommandLineArgs,TArray<FString> InOutDeviceProfileCvars,TArray<FString> InOutExecCmds);


// Function  MovieRenderPipelineCore.MoviePipeline.GetCurrentJob
// Offset::0x3826FC0;
FMoviePipelineExecutorJob* FMoviePipeline::GetCurrentJob();


// Function  MovieRenderPipelineCore.MoviePipeline.GetInitializationTime
// Offset::0x3827100;
FDateTime FMoviePipeline::GetInitializationTime();


// Function  MovieRenderPipelineCore.MoviePipeline.GetPipelineMasterConfig
// Offset::0x3827010;
FMoviePipelineMasterConfig* FMoviePipeline::GetPipelineMasterConfig();


// Function  MovieRenderPipelineCore.MoviePipeline.GetPreviewTexture
// Offset::0x3826FF0;
FTexture* FMoviePipeline::GetPreviewTexture();


// Function  MovieRenderPipelineCore.MoviePipeline.Initialize
// Offset::0x38272C0;
void FMoviePipeline::Initialize(FMoviePipelineExecutorJob* InJob);


// Function  MovieRenderPipelineCore.MoviePipeline.IsShutdownRequested
// Offset::0x3827130;
bool FMoviePipeline::IsShutdownRequested();


// Function  MovieRenderPipelineCore.MoviePipeline.OnMoviePipelineFinishedImpl
// Offset::0x20E8030;
void FMoviePipeline::OnMoviePipelineFinishedImpl();


// Function  MovieRenderPipelineCore.MoviePipeline.RequestShutdown
// Offset::0x3827220;
void FMoviePipeline::RequestShutdown(bool bIsError);


// Function  MovieRenderPipelineCore.MoviePipeline.SetInitializationTime
// Offset::0x3827040;
void FMoviePipeline::SetInitializationTime(FDateTime InDateTime);


// Function  MovieRenderPipelineCore.MoviePipeline.Shutdown
// Offset::0x3827180;
void FMoviePipeline::Shutdown(bool bError);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.DuplicateSequence
// Offset::0x38296B0;
FMovieSceneSequence* FMoviePipelineBlueprintLibrary::DuplicateSequence(FObject* Outer,FMovieSceneSequence* InSequence);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.FindOrGetDefaultSettingForShot
// Offset::0x3827E80;
FMoviePipelineSetting* FMoviePipelineBlueprintLibrary::FindOrGetDefaultSettingForShot(FMoviePipelineSetting* InSettingType,FMoviePipelineMasterConfig* InMasterConfig,FMoviePipelineExecutorShot* InShot);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCompletionPercentage
// Offset::0x3828950;
float FMoviePipelineBlueprintLibrary::GetCompletionPercentage(FMoviePipeline* InPipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentAperture
// Offset::0x38284D0;
float FMoviePipelineBlueprintLibrary::GetCurrentAperture(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentExecutorShot
// Offset::0x3827D40;
FMoviePipelineExecutorShot* FMoviePipelineBlueprintLibrary::GetCurrentExecutorShot(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentFocalLength
// Offset::0x3828570;
float FMoviePipelineBlueprintLibrary::GetCurrentFocalLength(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentFocusDistance
// Offset::0x3828610;
float FMoviePipelineBlueprintLibrary::GetCurrentFocusDistance(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentSegmentName
// Offset::0x3828C20;
void FMoviePipelineBlueprintLibrary::GetCurrentSegmentName(FMoviePipeline* InMoviePipeline,FText OutOuterName,FText OutInnerName);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentSegmentState
// Offset::0x38290C0;
enum class EMovieRenderShotState FMoviePipelineBlueprintLibrary::GetCurrentSegmentState(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentSegmentWorkMetrics
// Offset::0x38289F0;
FMoviePipelineSegmentWorkMetrics FMoviePipelineBlueprintLibrary::GetCurrentSegmentWorkMetrics(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentSequence
// Offset::0x3827DE0;
FLevelSequence* FMoviePipelineBlueprintLibrary::GetCurrentSequence(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentShotFrameNumber
// Offset::0x38286B0;
FFrameNumber FMoviePipelineBlueprintLibrary::GetCurrentShotFrameNumber(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetCurrentShotTimecode
// Offset::0x3828750;
FTimecode FMoviePipelineBlueprintLibrary::GetCurrentShotTimecode(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetEffectiveOutputResolution
// Offset::0x3827FB0;
FIntPoint FMoviePipelineBlueprintLibrary::GetEffectiveOutputResolution(FMoviePipelineMasterConfig* InMasterConfig,FMoviePipelineExecutorShot* InPipelineExecutorShot);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetEstimatedTimeRemaining
// Offset::0x38292A0;
bool FMoviePipelineBlueprintLibrary::GetEstimatedTimeRemaining(FMoviePipeline* InPipeline,FTimespan OutEstimate);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetJobAuthor
// Offset::0x3828F00;
FText FMoviePipelineBlueprintLibrary::GetJobAuthor(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetJobInitializationTime
// Offset::0x3829200;
FDateTime FMoviePipelineBlueprintLibrary::GetJobInitializationTime(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetJobName
// Offset::0x3828FE0;
FText FMoviePipelineBlueprintLibrary::GetJobName(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetMapPackageName
// Offset::0x3828400;
FString FMoviePipelineBlueprintLibrary::GetMapPackageName(FMoviePipelineExecutorJob* InJob);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetMasterFrameNumber
// Offset::0x3828800;
FFrameNumber FMoviePipelineBlueprintLibrary::GetMasterFrameNumber(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetMasterTimecode
// Offset::0x38288A0;
FTimecode FMoviePipelineBlueprintLibrary::GetMasterTimecode(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetMoviePipelineEngineChangelistLabel
// Offset::0x3827C60;
FText FMoviePipelineBlueprintLibrary::GetMoviePipelineEngineChangelistLabel(FMoviePipeline* InMoviePipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetOverallOutputFrames
// Offset::0x3828DC0;
void FMoviePipelineBlueprintLibrary::GetOverallOutputFrames(FMoviePipeline* InMoviePipeline,int32_t OutCurrentIndex,int32_t OutTotalCount);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetOverallSegmentCounts
// Offset::0x3828AE0;
void FMoviePipelineBlueprintLibrary::GetOverallSegmentCounts(FMoviePipeline* InMoviePipeline,int32_t OutCurrentIndex,int32_t OutTotalCount);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.GetPipelineState
// Offset::0x3829160;
enum class EMovieRenderPipelineState FMoviePipelineBlueprintLibrary::GetPipelineState(FMoviePipeline* InPipeline);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.LoadManifestFileFromString
// Offset::0x3828350;
FMoviePipelineQueue* FMoviePipelineBlueprintLibrary::LoadManifestFileFromString(FString InManifestFilePath);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.ResolveFilenameFormatArguments
// Offset::0x3829390;
void FMoviePipelineBlueprintLibrary::ResolveFilenameFormatArguments(FString InFormatString,FMoviePipelineFilenameResolveParams InParams,FString OutFinalPath,FMoviePipelineFormatArgs OutMergedFormatArgs);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.ResolveVersionNumber
// Offset::0x38280A0;
int32_t FMoviePipelineBlueprintLibrary::ResolveVersionNumber(FMoviePipelineFilenameResolveParams InParams);


// Function  MovieRenderPipelineCore.MoviePipelineBlueprintLibrary.UpdateJobShotListFromSequence
// Offset::0x3828220;
void FMoviePipelineBlueprintLibrary::UpdateJobShotListFromSequence(FLevelSequence* InSequence,FMoviePipelineExecutorJob* InJob,bool bShotsChanged);


// Function  MovieRenderPipelineCore.MoviePipelineConfigBase.CopyFrom
// Offset::0x2E27C00;
void FMoviePipelineConfigBase::CopyFrom(FMoviePipelineConfigBase* InConfig);


// Function  MovieRenderPipelineCore.MoviePipelineConfigBase.FindOrAddSettingByClass
// Offset::0x382ACF0;
FMoviePipelineSetting* FMoviePipelineConfigBase::FindOrAddSettingByClass(FMoviePipelineSetting* InClass,bool bIncludeDisabledSettings);


// Function  MovieRenderPipelineCore.MoviePipelineConfigBase.FindSettingByClass
// Offset::0x382AFF0;
FMoviePipelineSetting* FMoviePipelineConfigBase::FindSettingByClass(FMoviePipelineSetting* InClass,bool bIncludeDisabledSettings);


// Function  MovieRenderPipelineCore.MoviePipelineConfigBase.FindSettingsByClass
// Offset::0x382B0E0;
TArray<FMoviePipelineSetting*> FMoviePipelineConfigBase::FindSettingsByClass(FMoviePipelineSetting* InClass,bool bIncludeDisabledSettings);


// Function  MovieRenderPipelineCore.MoviePipelineConfigBase.GetUserSettings
// Offset::0x26FFD50;
TArray<FMoviePipelineSetting*> FMoviePipelineConfigBase::GetUserSettings();


// Function  MovieRenderPipelineCore.MoviePipelineConfigBase.RemoveSetting
// Offset::0x3480190;
void FMoviePipelineConfigBase::RemoveSetting(FMoviePipelineSetting* InSetting);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.CancelAllJobs
// Offset::0x1B91E90;
void FMoviePipelineExecutorBase::CancelAllJobs();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.CancelCurrentJob
// Offset::0x179F4C0;
void FMoviePipelineExecutorBase::CancelCurrentJob();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.ConnectSocket
// Offset::0x382C040;
bool FMoviePipelineExecutorBase::ConnectSocket(FString InHostName,int32_t InPort);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.DisconnectSocket
// Offset::0x382C020;
void FMoviePipelineExecutorBase::DisconnectSocket();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.Execute
// Offset::0x382C420;
void FMoviePipelineExecutorBase::Execute(FMoviePipelineQueue* InPipelineQueue);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.GetStatusMessage
// Offset::0x286AE80;
FString FMoviePipelineExecutorBase::GetStatusMessage();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.GetStatusProgress
// Offset::0x2E32240;
float FMoviePipelineExecutorBase::GetStatusProgress();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.IsRendering
// Offset::0x17AF4E0;
bool FMoviePipelineExecutorBase::IsRendering();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.IsSocketConnected
// Offset::0x382BF40;
bool FMoviePipelineExecutorBase::IsSocketConnected();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.OnBeginFrame
// Offset::0x17A1E00;
void FMoviePipelineExecutorBase::OnBeginFrame();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.OnExecutorErroredImpl
// Offset::0x382C140;
void FMoviePipelineExecutorBase::OnExecutorErroredImpl(FMoviePipeline* ErroredPipeline,bool bFatal,FText ErrorReason);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.OnExecutorFinishedImpl
// Offset::0x20E8030;
void FMoviePipelineExecutorBase::OnExecutorFinishedImpl();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.SendHTTPRequest
// Offset::0x382BCF0;
int32_t FMoviePipelineExecutorBase::SendHTTPRequest(FString InUrl,FString InVerb,FString InMessage,TMap<FString,FString> InHeaders);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.SendSocketMessage
// Offset::0x382BF70;
bool FMoviePipelineExecutorBase::SendSocketMessage(FString InMessage);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.SetMoviePipelineClass
// Offset::0x382C2D0;
void FMoviePipelineExecutorBase::SetMoviePipelineClass(FObject* InPipelineClass);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.SetStatusMessage
// Offset::0x233C8A0;
void FMoviePipelineExecutorBase::SetStatusMessage(FString InStatus);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorBase.SetStatusProgress
// Offset::0x382C380;
void FMoviePipelineExecutorBase::SetStatusProgress(float InProgress);


// Function  MovieRenderPipelineCore.MoviePipelineMasterConfig.GetAllSettings
// Offset::0x382FA70;
TArray<FMoviePipelineSetting*> FMoviePipelineMasterConfig::GetAllSettings(bool bIncludeDisabledSettings,bool bIncludeTransientSettings);


// Function  MovieRenderPipelineCore.MoviePipelineMasterConfig.GetEffectiveFrameRate
// Offset::0x382F9C0;
FFrameRate FMoviePipelineMasterConfig::GetEffectiveFrameRate(FLevelSequence* InSequence);


// Function  MovieRenderPipelineCore.MoviePipelineMasterConfig.GetTransientSettings
// Offset::0x382FBA0;
TArray<FMoviePipelineSetting*> FMoviePipelineMasterConfig::GetTransientSettings();


// Function  MovieRenderPipelineCore.MoviePipelineMasterConfig.InitializeTransientSettings
// Offset::0x382FCD0;
void FMoviePipelineMasterConfig::InitializeTransientSettings();


// Function  MovieRenderPipelineCore.MoviePipelinePythonHostExecutor.ExecuteDelayed
// Offset::0x3830390;
void FMoviePipelinePythonHostExecutor::ExecuteDelayed(FMoviePipelineQueue* InPipelineQueue);


// Function  MovieRenderPipelineCore.MoviePipelinePythonHostExecutor.GetLastLoadedWorld
// Offset::0x38302D0;
FWorld* FMoviePipelinePythonHostExecutor::GetLastLoadedWorld();


// Function  MovieRenderPipelineCore.MoviePipelinePythonHostExecutor.OnMapLoad
// Offset::0x38302F0;
void FMoviePipelinePythonHostExecutor::OnMapLoad(FWorld* InWorld);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorShot.AllocateNewShotOverrideConfig
// Offset::0x3830FA0;
FMoviePipelineShotConfig* FMoviePipelineExecutorShot::AllocateNewShotOverrideConfig(FMoviePipelineShotConfig* InConfigType);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorShot.GetShotOverrideConfiguration
// Offset::0x3830E30;
FMoviePipelineShotConfig* FMoviePipelineExecutorShot::GetShotOverrideConfiguration();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorShot.GetShotOverridePresetOrigin
// Offset::0x3830C00;
FMoviePipelineShotConfig* FMoviePipelineExecutorShot::GetShotOverridePresetOrigin();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorShot.GetStatusMessage
// Offset::0x26FFD50;
FString FMoviePipelineExecutorShot::GetStatusMessage();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorShot.GetStatusProgress
// Offset::0x3831040;
float FMoviePipelineExecutorShot::GetStatusProgress();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorShot.SetShotOverrideConfiguration
// Offset::0x3830F00;
void FMoviePipelineExecutorShot::SetShotOverrideConfiguration(FMoviePipelineShotConfig* InPreset);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorShot.SetShotOverridePresetOrigin
// Offset::0x3830E60;
void FMoviePipelineExecutorShot::SetShotOverridePresetOrigin(FMoviePipelineShotConfig* InPreset);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorShot.SetStatusMessage
// Offset::0x3831110;
void FMoviePipelineExecutorShot::SetStatusMessage(FString InStatus);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorShot.SetStatusProgress
// Offset::0x3831070;
void FMoviePipelineExecutorShot::SetStatusProgress(float InProgress);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorShot.ShouldRender
// Offset::0x2609650;
bool FMoviePipelineExecutorShot::ShouldRender();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.GetConfiguration
// Offset::0x3827100;
FMoviePipelineMasterConfig* FMoviePipelineExecutorJob::GetConfiguration();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.GetPresetOrigin
// Offset::0x3831BB0;
FMoviePipelineMasterConfig* FMoviePipelineExecutorJob::GetPresetOrigin();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.GetStatusMessage
// Offset::0x3831E60;
FString FMoviePipelineExecutorJob::GetStatusMessage();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.GetStatusProgress
// Offset::0x3831E30;
float FMoviePipelineExecutorJob::GetStatusProgress();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.IsConsumed
// Offset::0x2876320;
bool FMoviePipelineExecutorJob::IsConsumed();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.OnDuplicated
// Offset::0x179DEB0;
void FMoviePipelineExecutorJob::OnDuplicated();


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.SetConfiguration
// Offset::0x3831B10;
void FMoviePipelineExecutorJob::SetConfiguration(FMoviePipelineMasterConfig* InPreset);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.SetConsumed
// Offset::0x26E1130;
void FMoviePipelineExecutorJob::SetConsumed(bool bInConsumed);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.SetPresetOrigin
// Offset::0x3831D90;
void FMoviePipelineExecutorJob::SetPresetOrigin(FMoviePipelineMasterConfig* InPreset);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.SetSequence
// Offset::0x3831A10;
void FMoviePipelineExecutorJob::SetSequence(FSoftObjectPath InSequence);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.SetStatusMessage
// Offset::0x3831110;
void FMoviePipelineExecutorJob::SetStatusMessage(FString InStatus);


// Function  MovieRenderPipelineCore.MoviePipelineExecutorJob.SetStatusProgress
// Offset::0x3831070;
void FMoviePipelineExecutorJob::SetStatusProgress(float InProgress);


// Function  MovieRenderPipelineCore.MoviePipelineQueue.AllocateNewJob
// Offset::0x3833140;
FMoviePipelineExecutorJob* FMoviePipelineQueue::AllocateNewJob(FMoviePipelineExecutorJob* InJobType);


// Function  MovieRenderPipelineCore.MoviePipelineQueue.CopyFrom
// Offset::0x3832E20;
void FMoviePipelineQueue::CopyFrom(FMoviePipelineQueue* InQueue);


// Function  MovieRenderPipelineCore.MoviePipelineQueue.DeleteAllJobs
// Offset::0x3833080;
void FMoviePipelineQueue::DeleteAllJobs();


// Function  MovieRenderPipelineCore.MoviePipelineQueue.DeleteJob
// Offset::0x38330A0;
void FMoviePipelineQueue::DeleteJob(FMoviePipelineExecutorJob* InJob);


// Function  MovieRenderPipelineCore.MoviePipelineQueue.DuplicateJob
// Offset::0x3832FE0;
FMoviePipelineExecutorJob* FMoviePipelineQueue::DuplicateJob(FMoviePipelineExecutorJob* InJob);


// Function  MovieRenderPipelineCore.MoviePipelineQueue.GetJobs
// Offset::0x3832EC0;
TArray<FMoviePipelineExecutorJob*> FMoviePipelineQueue::GetJobs();


// Function  MovieRenderPipelineCore.MoviePipelineQueue.SetJobIndex
// Offset::0x3832D40;
void FMoviePipelineQueue::SetJobIndex(FMoviePipelineExecutorJob* InJob,int32_t Index);


// Function  MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.GetActiveExecutor
// Offset::0x22C1870;
FMoviePipelineExecutorBase* FMoviePipelineQueueEngineSubsystem::GetActiveExecutor();


// Function  MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.GetQueue
// Offset::0x24AFD80;
FMoviePipelineQueue* FMoviePipelineQueueEngineSubsystem::GetQueue();


// Function  MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.IsRendering
// Offset::0x3833710;
bool FMoviePipelineQueueEngineSubsystem::IsRendering();


// Function  MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.RenderQueueWithExecutor
// Offset::0x3833810;
FMoviePipelineExecutorBase* FMoviePipelineQueueEngineSubsystem::RenderQueueWithExecutor(FMoviePipelineExecutorBase* InExecutorType);


// Function  MovieRenderPipelineCore.MoviePipelineQueueEngineSubsystem.RenderQueueWithExecutorInstance
// Offset::0x3833770;
void FMoviePipelineQueueEngineSubsystem::RenderQueueWithExecutorInstance(FMoviePipelineExecutorBase* InExecutor);


// Function  MovieRenderPipelineCore.MoviePipelineSetting_BlueprintBase.OnEngineTickBeginFrame
// Offset::0x3D30810;
void FMoviePipelineSetting_BlueprintBase::OnEngineTickBeginFrame();


// Function  MovieRenderPipelineCore.MoviePipelineSetting_BlueprintBase.ReceiveGetFormatArguments
// Offset::0x38361F0;
FMoviePipelineFormatArgs FMoviePipelineSetting_BlueprintBase::ReceiveGetFormatArguments(FMoviePipelineFormatArgs InOutFormatArgs);


// Function  MovieRenderPipelineCore.MoviePipelineSetting_BlueprintBase.ReceiveSetupForPipelineImpl
// Offset::0x3D30810;
void FMoviePipelineSetting_BlueprintBase::ReceiveSetupForPipelineImpl(FMoviePipeline* InPipeline);


// Function  MovieRenderPipelineCore.MoviePipelineSetting_BlueprintBase.ReceiveTeardownForPipelineImpl
// Offset::0x3D30810;
void FMoviePipelineSetting_BlueprintBase::ReceiveTeardownForPipelineImpl(FMoviePipeline* InPipeline);


// Function  MovieRenderPipelineCore.MovieRenderDebugWidget.OnInitializedForPipeline
// Offset::0x3D30810;
void FMovieRenderDebugWidget::OnInitializedForPipeline(FMoviePipeline* ForPipeline);


// Function  MovieRenderPipelineSettings.MoviePipelineBurnInWidget.OnOutputFrameStarted
// Offset::0x3D30810;
void FMoviePipelineBurnInWidget::OnOutputFrameStarted(FMoviePipeline* ForPipeline);


// Function  ActorLayerUtilities.LayersBlueprintLibrary.AddActorToLayer
// Offset::0x385FEB0;
void FLayersBlueprintLibrary::AddActorToLayer(FActor* InActor,FActorLayer Layer);


// Function  ActorLayerUtilities.LayersBlueprintLibrary.GetActors
// Offset::0x385FFA0;
TArray<FActor*> FLayersBlueprintLibrary::GetActors(FObject* WorldContextObject,FActorLayer ActorLayer);


// Function  ActorLayerUtilities.LayersBlueprintLibrary.RemoveActorFromLayer
// Offset::0x385FDC0;
void FLayersBlueprintLibrary::RemoveActorFromLayer(FActor* InActor,FActorLayer Layer);


// Function  OpenColorIO.OpenColorIOBlueprintLibrary.ApplyColorSpaceTransform
// Offset::0x386CA40;
bool FOpenColorIOBlueprintLibrary::ApplyColorSpaceTransform(FObject* WorldContextObject,FOpenColorIOColorConversionSettings ConversionSettings,FTexture* InputTexture,FTextureRenderTarget2D* OutputRenderTarget);


// Function  OpenColorIO.OpenColorIODisplayExtensionWrapper.CreateOpenColorIODisplayExtension
// Offset::0x386D270;
FOpenColorIODisplayExtensionWrapper* FOpenColorIODisplayExtensionWrapper::CreateOpenColorIODisplayExtension(FOpenColorIODisplayConfiguration InDisplayConfiguration,FSceneViewExtensionIsActiveFunctor IsActiveFunction);


// Function  OpenColorIO.OpenColorIODisplayExtensionWrapper.RemoveSceneExtension
// Offset::0x386D580;
void FOpenColorIODisplayExtensionWrapper::RemoveSceneExtension();


// Function  OpenColorIO.OpenColorIODisplayExtensionWrapper.SetOpenColorIOConfiguration
// Offset::0x386D770;
void FOpenColorIODisplayExtensionWrapper::SetOpenColorIOConfiguration(FOpenColorIODisplayConfiguration InDisplayConfiguration);


// Function  OpenColorIO.OpenColorIODisplayExtensionWrapper.SetSceneExtensionIsActiveFunction
// Offset::0x386D690;
void FOpenColorIODisplayExtensionWrapper::SetSceneExtensionIsActiveFunction(FSceneViewExtensionIsActiveFunctor IsActiveFunction);


// Function  OpenColorIO.OpenColorIODisplayExtensionWrapper.SetSceneExtensionIsActiveFunctions
// Offset::0x386D5A0;
void FOpenColorIODisplayExtensionWrapper::SetSceneExtensionIsActiveFunctions(TArray<FSceneViewExtensionIsActiveFunctor> IsActiveFunctions);


// Function  MediaAssets.MediaSource.GetUrl
// Offset::0x2E27B80;
FString FMediaSource::GetUrl();


// Function  MediaAssets.MediaSource.SetMediaOptionBool
// Offset::0x58FF030;
void FMediaSource::SetMediaOptionBool(FName Key,bool Value);


// Function  MediaAssets.MediaSource.SetMediaOptionFloat
// Offset::0x58FEF40;
void FMediaSource::SetMediaOptionFloat(FName Key,float Value);


// Function  MediaAssets.MediaSource.SetMediaOptionInt64
// Offset::0x58FEE50;
void FMediaSource::SetMediaOptionInt64(FName Key,int64_t Value);


// Function  MediaAssets.MediaSource.SetMediaOptionString
// Offset::0x58FED40;
void FMediaSource::SetMediaOptionString(FName Key,FString Value);


// Function  MediaAssets.MediaSource.Validate
// Offset::0x2870F10;
bool FMediaSource::Validate();


// Function  ImgMedia.ImgMediaSource.AddGlobalCamera
// Offset::0x3883C30;
void FImgMediaSource::AddGlobalCamera(FActor* InActor);


// Function  ImgMedia.ImgMediaSource.AddTargetObject
// Offset::0x3883AB0;
void FImgMediaSource::AddTargetObject(FActor* InActor,float Width);


// Function  ImgMedia.ImgMediaSource.GetProxies
// Offset::0x3883EA0;
void FImgMediaSource::GetProxies(TArray<FString> OutProxies);


// Function  ImgMedia.ImgMediaSource.GetSequencePath
// Offset::0x3883D80;
FString FImgMediaSource::GetSequencePath();


// Function  ImgMedia.ImgMediaSource.RemoveGlobalCamera
// Offset::0x3883B90;
void FImgMediaSource::RemoveGlobalCamera(FActor* InActor);


// Function  ImgMedia.ImgMediaSource.RemoveTargetObject
// Offset::0x3883A10;
void FImgMediaSource::RemoveTargetObject(FActor* InActor);


// Function  ImgMedia.ImgMediaSource.SetMipLevelDistance
// Offset::0x3883970;
void FImgMediaSource::SetMipLevelDistance(float Distance);


// Function  ImgMedia.ImgMediaSource.SetSequencePath
// Offset::0x3883CD0;
void FImgMediaSource::SetSequencePath(FString Path);


// Function  AppleImageUtils.AppleImageUtilsBaseAsyncTaskBlueprintProxy.CreateProxyObjectForConvertToHEIF
// Offset::0x38C45F0;
FAppleImageUtilsBaseAsyncTaskBlueprintProxy* FAppleImageUtilsBaseAsyncTaskBlueprintProxy::CreateProxyObjectForConvertToHEIF(FTexture* SourceImage,int32_t Quality,bool bWantColor,bool bUseGpu,float Scale,enum class ETextureRotationDirection Rotate);


// Function  AppleImageUtils.AppleImageUtilsBaseAsyncTaskBlueprintProxy.CreateProxyObjectForConvertToJPEG
// Offset::0x38C4810;
FAppleImageUtilsBaseAsyncTaskBlueprintProxy* FAppleImageUtilsBaseAsyncTaskBlueprintProxy::CreateProxyObjectForConvertToJPEG(FTexture* SourceImage,int32_t Quality,bool bWantColor,bool bUseGpu,float Scale,enum class ETextureRotationDirection Rotate);


// Function  AppleImageUtils.AppleImageUtilsBaseAsyncTaskBlueprintProxy.CreateProxyObjectForConvertToPNG
// Offset::0x38C4250;
FAppleImageUtilsBaseAsyncTaskBlueprintProxy* FAppleImageUtilsBaseAsyncTaskBlueprintProxy::CreateProxyObjectForConvertToPNG(FTexture* SourceImage,bool bWantColor,bool bUseGpu,float Scale,enum class ETextureRotationDirection Rotate);


// Function  AppleImageUtils.AppleImageUtilsBaseAsyncTaskBlueprintProxy.CreateProxyObjectForConvertToTIFF
// Offset::0x38C4420;
FAppleImageUtilsBaseAsyncTaskBlueprintProxy* FAppleImageUtilsBaseAsyncTaskBlueprintProxy::CreateProxyObjectForConvertToTIFF(FTexture* SourceImage,bool bWantColor,bool bUseGpu,float Scale,enum class ETextureRotationDirection Rotate);


// Function  AssetTags.AssetTagsSubsystem.CollectionExists
// Offset::0x38C9F20;
bool FAssetTagsSubsystem::CollectionExists(FName Name);


// Function  AssetTags.AssetTagsSubsystem.GetAssetsInCollection
// Offset::0x38C9CB0;
TArray<FAssetData> FAssetTagsSubsystem::GetAssetsInCollection(FName Name);


// Function  AssetTags.AssetTagsSubsystem.GetCollections
// Offset::0x38C9EA0;
TArray<FName> FAssetTagsSubsystem::GetCollections();


// Function  AssetTags.AssetTagsSubsystem.GetCollectionsContainingAsset
// Offset::0x38C9BD0;
TArray<FName> FAssetTagsSubsystem::GetCollectionsContainingAsset(FName AssetPathName);


// Function  AssetTags.AssetTagsSubsystem.GetCollectionsContainingAssetData
// Offset::0x38C9A70;
TArray<FName> FAssetTagsSubsystem::GetCollectionsContainingAssetData(FAssetData AssetData);


// Function  AssetTags.AssetTagsSubsystem.GetCollectionsContainingAssetPtr
// Offset::0x38C9990;
TArray<FName> FAssetTagsSubsystem::GetCollectionsContainingAssetPtr(FObject* AssetPtr);


// Function  AudioCapture.AudioCapture.GetAudioCaptureDeviceInfo
// Offset::0x38CC360;
bool FAudioCapture::GetAudioCaptureDeviceInfo(FAudioCaptureDeviceInfo OutInfo);


// Function  AudioCapture.AudioCapture.IsCapturingAudio
// Offset::0x38CC2F0;
bool FAudioCapture::IsCapturingAudio();


// Function  AudioCapture.AudioCapture.StartCapturingAudio
// Offset::0x38CC340;
void FAudioCapture::StartCapturingAudio();


// Function  AudioCapture.AudioCapture.StopCapturingAudio
// Offset::0x38CC320;
void FAudioCapture::StopCapturingAudio();


// Function  AudioCapture.AudioCaptureFunctionLibrary.CreateAudioCapture
// Offset::0x38CC830;
FAudioCapture* FAudioCaptureFunctionLibrary::CreateAudioCapture();


// Function  AudioCapture.AudioCaptureBlueprintLibrary.Conv_AudioInputDeviceInfoToString
// Offset::0x38CCCC0;
FString FAudioCaptureBlueprintLibrary::Conv_AudioInputDeviceInfoToString(FAudioInputDeviceInfo Info);


// Function  AudioCapture.AudioCaptureBlueprintLibrary.GetAvailableAudioInputDevices
// Offset::0x38CCBC0;
void FAudioCaptureBlueprintLibrary::GetAvailableAudioInputDevices(FObject* WorldContextObject,FDelegate OnObtainDevicesEvent);


// Function  AudioModulation.AudioModulationStatics.ActivateBus
// Offset::0x393E000;
void FAudioModulationStatics::ActivateBus(FObject* WorldContextObject,FSoundControlBus* Bus);


// Function  AudioModulation.AudioModulationStatics.ActivateBusMix
// Offset::0x393DF20;
void FAudioModulationStatics::ActivateBusMix(FObject* WorldContextObject,FSoundControlBusMix* Mix);


// Function  AudioModulation.AudioModulationStatics.ActivateGenerator
// Offset::0x393DE40;
void FAudioModulationStatics::ActivateGenerator(FObject* WorldContextObject,FSoundModulationGenerator* Generator);


// Function  AudioModulation.AudioModulationStatics.ClearAllGlobalBusMixValues
// Offset::0x393CDF0;
void FAudioModulationStatics::ClearAllGlobalBusMixValues(FObject* WorldContextObject,float FadeTime);


// Function  AudioModulation.AudioModulationStatics.ClearGlobalBusMixValue
// Offset::0x393CED0;
void FAudioModulationStatics::ClearGlobalBusMixValue(FObject* WorldContextObject,FSoundControlBus* Bus,float FadeTime);


// Function  AudioModulation.AudioModulationStatics.CreateBus
// Offset::0x393DCC0;
FSoundControlBus* FAudioModulationStatics::CreateBus(FObject* WorldContextObject,FName Name,FSoundModulationParameter* Parameter,bool Activate);


// Function  AudioModulation.AudioModulationStatics.CreateBusMix
// Offset::0x393D8E0;
FSoundControlBusMix* FAudioModulationStatics::CreateBusMix(FObject* WorldContextObject,FName Name,TArray<FSoundControlBusMixStage> Stages,bool Activate);


// Function  AudioModulation.AudioModulationStatics.CreateBusMixStage
// Offset::0x393DAC0;
FSoundControlBusMixStage FAudioModulationStatics::CreateBusMixStage(FObject* WorldContextObject,FSoundControlBus* Bus,float Value,float AttackTime,float ReleaseTime);


// Function  AudioModulation.AudioModulationStatics.DeactivateBus
// Offset::0x393D800;
void FAudioModulationStatics::DeactivateBus(FObject* WorldContextObject,FSoundControlBus* Bus);


// Function  AudioModulation.AudioModulationStatics.DeactivateBusMix
// Offset::0x393D720;
void FAudioModulationStatics::DeactivateBusMix(FObject* WorldContextObject,FSoundControlBusMix* Mix);


// Function  AudioModulation.AudioModulationStatics.DeactivateGenerator
// Offset::0x393D640;
void FAudioModulationStatics::DeactivateGenerator(FObject* WorldContextObject,FSoundModulationGenerator* Generator);


// Function  AudioModulation.AudioModulationStatics.LoadMixFromProfile
// Offset::0x393D350;
TArray<FSoundControlBusMixStage> FAudioModulationStatics::LoadMixFromProfile(FObject* WorldContextObject,FSoundControlBusMix* Mix,bool bActivate,int32_t ProfileIndex);


// Function  AudioModulation.AudioModulationStatics.SaveMixToProfile
// Offset::0x393D510;
void FAudioModulationStatics::SaveMixToProfile(FObject* WorldContextObject,FSoundControlBusMix* Mix,int32_t ProfileIndex);


// Function  AudioModulation.AudioModulationStatics.SetGlobalBusMixValue
// Offset::0x393D000;
void FAudioModulationStatics::SetGlobalBusMixValue(FObject* WorldContextObject,FSoundControlBus* Bus,float Value,float FadeTime);


// Function  AudioModulation.AudioModulationStatics.UpdateMix
// Offset::0x393D170;
void FAudioModulationStatics::UpdateMix(FObject* WorldContextObject,FSoundControlBusMix* Mix,TArray<FSoundControlBusMixStage> Stages,float FadeTime);


// Function  AudioModulation.AudioModulationStatics.UpdateMixByFilter
// Offset::0x393CAF0;
void FAudioModulationStatics::UpdateMixByFilter(FObject* WorldContextObject,FSoundControlBusMix* Mix,FString AddressFilter,FSoundModulationParameter* ParamClassFilter,FSoundModulationParameter* ParamFilter,float Value,float FadeTime);


// Function  AudioModulation.AudioModulationStatics.UpdateMixFromObject
// Offset::0x393C9C0;
void FAudioModulationStatics::UpdateMixFromObject(FObject* WorldContextObject,FSoundControlBusMix* Mix,float FadeTime);


// Function  AudioModulation.AudioModulationStatics.UpdateModulator
// Offset::0x393C8E0;
void FAudioModulationStatics::UpdateModulator(FObject* WorldContextObject,FSoundModulatorBase* Modulator);


// Function  AudioModulation.AudioModulationStyle.GetControlBusColor
// Offset::0x393EFC0;
FColor FAudioModulationStyle::GetControlBusColor();


// Function  AudioModulation.AudioModulationStyle.GetControlBusMixColor
// Offset::0x393EF90;
FColor FAudioModulationStyle::GetControlBusMixColor();


// Function  AudioModulation.AudioModulationStyle.GetModulationGeneratorColor
// Offset::0x393EFF0;
FColor FAudioModulationStyle::GetModulationGeneratorColor();


// Function  AudioModulation.AudioModulationStyle.GetParameterColor
// Offset::0x393EF30;
FColor FAudioModulationStyle::GetParameterColor();


// Function  AudioModulation.AudioModulationStyle.GetPatchColor
// Offset::0x393EF60;
FColor FAudioModulationStyle::GetPatchColor();


// Function  AudioModulation.SoundControlBusMix.ActivateMix
// Offset::0x393F5D0;
void FSoundControlBusMix::ActivateMix();


// Function  AudioModulation.SoundControlBusMix.DeactivateAllMixes
// Offset::0x393F590;
void FSoundControlBusMix::DeactivateAllMixes();


// Function  AudioModulation.SoundControlBusMix.DeactivateMix
// Offset::0x393F5B0;
void FSoundControlBusMix::DeactivateMix();


// Function  AudioModulation.SoundControlBusMix.LoadMixFromProfile
// Offset::0x393F630;
void FSoundControlBusMix::LoadMixFromProfile();


// Function  AudioModulation.SoundControlBusMix.SaveMixToProfile
// Offset::0x393F610;
void FSoundControlBusMix::SaveMixToProfile();


// Function  AudioModulation.SoundControlBusMix.SoloMix
// Offset::0x393F5F0;
void FSoundControlBusMix::SoloMix();


// Function  CustomMeshComponent.CustomMeshComponent.AddCustomMeshTriangles
// Offset::0x394B100;
void FCustomMeshComponent::AddCustomMeshTriangles(TArray<FCustomMeshTriangle> Triangles);


// Function  CustomMeshComponent.CustomMeshComponent.ClearCustomMeshTriangles
// Offset::0x394B0E0;
void FCustomMeshComponent::ClearCustomMeshTriangles();


// Function  CustomMeshComponent.CustomMeshComponent.SetCustomMeshTriangles
// Offset::0x394B1B0;
bool FCustomMeshComponent::SetCustomMeshTriangles(TArray<FCustomMeshTriangle> Triangles);


// Function  HoudiniEngineRuntime.HoudiniAssetBlueprintComponent.HasParameter
// Offset::0x3990060;
bool FHoudiniAssetBlueprintComponent::HasParameter(FString Name);


// Function  HoudiniEngineRuntime.HoudiniAssetBlueprintComponent.SetFloatParameter
// Offset::0x398FEC0;
void FHoudiniAssetBlueprintComponent::SetFloatParameter(FString Name,float Value,int32_t Index);


// Function  HoudiniEngineRuntime.HoudiniAssetBlueprintComponent.SetToggleValueAt
// Offset::0x398FD30;
void FHoudiniAssetBlueprintComponent::SetToggleValueAt(FString Name,bool Value,int32_t Index);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.AddStaticMaterial
// Offset::0x399BF20;
uint32_t FHoudiniStaticMesh::AddStaticMaterial(FStaticMaterial InStaticMaterial);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.CalcBounds
// Offset::0x399BD50;
FBox FHoudiniStaticMesh::CalcBounds();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.CalculateNormals
// Offset::0x399BE80;
void FHoudiniStaticMesh::CalculateNormals(bool bInComputeWeightedNormals);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.CalculateTangents
// Offset::0x399BDE0;
void FHoudiniStaticMesh::CalculateTangents(bool bInComputeWeightedNormals);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetMaterial
// Offset::0x399B830;
FMaterialInterface* FHoudiniStaticMesh::GetMaterial(int32_t InMaterialIndex);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetMaterialIDsPerTriangle
// Offset::0x399B950;
TArray<int32_t> FHoudiniStaticMesh::GetMaterialIDsPerTriangle();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetMaterialIndex
// Offset::0x399B790;
int32_t FHoudiniStaticMesh::GetMaterialIndex(FName InMaterialSlotName);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetNumStaticMaterials
// Offset::0x399CB90;
uint32_t FHoudiniStaticMesh::GetNumStaticMaterials();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetNumTriangles
// Offset::0x20E7E80;
uint32_t FHoudiniStaticMesh::GetNumTriangles();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetNumUVLayers
// Offset::0x399CC50;
uint32_t FHoudiniStaticMesh::GetNumUVLayers();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetNumVertexInstances
// Offset::0x399CAA0;
uint32_t FHoudiniStaticMesh::GetNumVertexInstances();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetNumVertices
// Offset::0x399CAD0;
uint32_t FHoudiniStaticMesh::GetNumVertices();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetStaticMaterials
// Offset::0x399B8D0;
TArray<FStaticMaterial> FHoudiniStaticMesh::GetStaticMaterials();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetTriangleIndices
// Offset::0x399BC40;
TArray<FIntVector> FHoudiniStaticMesh::GetTriangleIndices();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetVertexInstanceColors
// Offset::0x399BBD0;
TArray<FColor> FHoudiniStaticMesh::GetVertexInstanceColors();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetVertexInstanceNormals
// Offset::0x399BB50;
TArray<FVector3f> FHoudiniStaticMesh::GetVertexInstanceNormals();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetVertexInstanceUTangents
// Offset::0x399BAD0;
TArray<FVector3f> FHoudiniStaticMesh::GetVertexInstanceUTangents();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetVertexInstanceUVs
// Offset::0x399B9D0;
TArray<FVector2D> FHoudiniStaticMesh::GetVertexInstanceUVs();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetVertexInstanceVTangents
// Offset::0x399BA50;
TArray<FVector3f> FHoudiniStaticMesh::GetVertexInstanceVTangents();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.GetVertexPositions
// Offset::0x399BCB0;
TArray<FVector3f> FHoudiniStaticMesh::GetVertexPositions();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.HasColors
// Offset::0x399CD20;
bool FHoudiniStaticMesh::HasColors();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.HasNormals
// Offset::0x2609650;
bool FHoudiniStaticMesh::HasNormals();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.HasPerFaceMaterials
// Offset::0x399CF50;
bool FHoudiniStaticMesh::HasPerFaceMaterials();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.HasTangents
// Offset::0x399CDF0;
bool FHoudiniStaticMesh::HasTangents();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.Initialize
// Offset::0x399CF70;
void FHoudiniStaticMesh::Initialize(uint32_t InNumVertices,uint32_t InNumTriangles,uint32_t InNumUVLayers,uint32_t InInitialNumStaticMaterials,bool bInHasNormals,bool bInHasTangents,bool bInHasColors,bool bInHasPerFaceMaterials);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.IsValid
// Offset::0x399B6F0;
bool FHoudiniStaticMesh::IsValid(bool bInSkipVertexIndicesCheck);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.Optimize
// Offset::0x399BDC0;
void FHoudiniStaticMesh::Optimize();


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetHasColors
// Offset::0x399CC80;
void FHoudiniStaticMesh::SetHasColors(bool bInHasColors);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetHasNormals
// Offset::0x399CE10;
void FHoudiniStaticMesh::SetHasNormals(bool bInHasNormals);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetHasPerFaceMaterials
// Offset::0x399CEB0;
void FHoudiniStaticMesh::SetHasPerFaceMaterials(bool bInHasPerFaceMaterials);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetHasTangents
// Offset::0x399CD50;
void FHoudiniStaticMesh::SetHasTangents(bool bInHasTangents);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetNumStaticMaterials
// Offset::0x399CAF0;
void FHoudiniStaticMesh::SetNumStaticMaterials(uint32_t InNumStaticMaterials);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetNumUVLayers
// Offset::0x399CBB0;
void FHoudiniStaticMesh::SetNumUVLayers(uint32_t InNumUVLayers);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetStaticMaterial
// Offset::0x399C0A0;
void FHoudiniStaticMesh::SetStaticMaterial(uint32_t InMaterialIndex,FStaticMaterial InStaticMaterial);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetTriangleMaterialID
// Offset::0x399C1A0;
void FHoudiniStaticMesh::SetTriangleMaterialID(uint32_t InTriangleIndex,int32_t InMaterialID);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetTriangleVertexColor
// Offset::0x399C400;
void FHoudiniStaticMesh::SetTriangleVertexColor(uint32_t InTriangleIndex,char InTriangleVertexIndex,FColor InColor);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetTriangleVertexIndices
// Offset::0x399C8C0;
void FHoudiniStaticMesh::SetTriangleVertexIndices(uint32_t InTriangleIndex,FIntVector InTriangleVertexIndices);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetTriangleVertexNormal
// Offset::0x399C790;
void FHoudiniStaticMesh::SetTriangleVertexNormal(uint32_t InTriangleIndex,char InTriangleVertexIndex,FVector3f InNormal);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetTriangleVertexUTangent
// Offset::0x399C660;
void FHoudiniStaticMesh::SetTriangleVertexUTangent(uint32_t InTriangleIndex,char InTriangleVertexIndex,FVector3f InUTangent);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetTriangleVertexUV
// Offset::0x399C280;
void FHoudiniStaticMesh::SetTriangleVertexUV(uint32_t InTriangleIndex,char InTriangleVertexIndex,char InUVLayer,FVector2D InUV);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetTriangleVertexVTangent
// Offset::0x399C530;
void FHoudiniStaticMesh::SetTriangleVertexVTangent(uint32_t InTriangleIndex,char InTriangleVertexIndex,FVector3f InVTangent);


// Function  HoudiniEngineRuntime.HoudiniStaticMesh.SetVertexPosition
// Offset::0x399C9B0;
void FHoudiniStaticMesh::SetVertexPosition(uint32_t InVertexIndex,FVector3f InPosition);


// Function  HoudiniEngineRuntime.HoudiniStaticMeshComponent.GetMesh
// Offset::0x399EAE0;
FHoudiniStaticMesh* FHoudiniStaticMeshComponent::GetMesh();


// Function  HoudiniEngineRuntime.HoudiniStaticMeshComponent.IsHoudiniIconVisible
// Offset::0x399EA90;
bool FHoudiniStaticMeshComponent::IsHoudiniIconVisible();


// Function  HoudiniEngineRuntime.HoudiniStaticMeshComponent.NotifyMeshUpdated
// Offset::0x399EAC0;
void FHoudiniStaticMeshComponent::NotifyMeshUpdated();


// Function  HoudiniEngineRuntime.HoudiniStaticMeshComponent.SetHoudiniIconVisible
// Offset::0x399E9F0;
void FHoudiniStaticMeshComponent::SetHoudiniIconVisible(bool bInHoudiniIconVisible);


// Function  HoudiniEngineRuntime.HoudiniStaticMeshComponent.SetMesh
// Offset::0x399EB00;
void FHoudiniStaticMeshComponent::SetMesh(FHoudiniStaticMesh* InMesh);


// Function  LocationServicesBPLibrary.LocationServices.AreLocationServicesEnabled
// Offset::0x399FBE0;
bool FLocationServices::AreLocationServicesEnabled();


// Function  LocationServicesBPLibrary.LocationServices.GetLastKnownLocation
// Offset::0x399FC10;
FLocationServicesData FLocationServices::GetLastKnownLocation();


// Function  LocationServicesBPLibrary.LocationServices.GetLocationServicesImpl
// Offset::0x399FB20;
FLocationServicesImpl* FLocationServices::GetLocationServicesImpl();


// Function  LocationServicesBPLibrary.LocationServices.InitLocationServices
// Offset::0x399FCD0;
bool FLocationServices::InitLocationServices(enum class ELocationAccuracy Accuracy,float UpdateFrequency,float MinDistanceFilter);


// Function  LocationServicesBPLibrary.LocationServices.IsLocationAccuracyAvailable
// Offset::0x399FB50;
bool FLocationServices::IsLocationAccuracyAvailable(enum class ELocationAccuracy Accuracy);


// Function  LocationServicesBPLibrary.LocationServices.StartLocationServices
// Offset::0x399FCA0;
bool FLocationServices::StartLocationServices();


// Function  LocationServicesBPLibrary.LocationServices.StopLocationServices
// Offset::0x399FC70;
bool FLocationServices::StopLocationServices();


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.ConvertDecibelsToLinear
// Offset::0x39AEC30;
float FSoundUtilitiesBPFunctionLibrary::ConvertDecibelsToLinear(float InDecibels);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.ConvertLinearToDecibels
// Offset::0x39AECD0;
float FSoundUtilitiesBPFunctionLibrary::ConvertLinearToDecibels(float InLinear,float InFloor);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetBandwidthFromQ
// Offset::0x39AE870;
float FSoundUtilitiesBPFunctionLibrary::GetBandwidthFromQ(float InQ);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetBeatTempo
// Offset::0x39AF080;
float FSoundUtilitiesBPFunctionLibrary::GetBeatTempo(float BeatsPerMinute,int32_t BeatMultiplier,int32_t DivisionsOfWholeNote);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetFrequencyFromMIDIPitch
// Offset::0x39AEFE0;
float FSoundUtilitiesBPFunctionLibrary::GetFrequencyFromMIDIPitch(int32_t MidiNote);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetFrequencyMultiplierFromSemitones
// Offset::0x39AE910;
float FSoundUtilitiesBPFunctionLibrary::GetFrequencyMultiplierFromSemitones(float InPitchSemitones);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetGainFromMidiVelocity
// Offset::0x39AEDC0;
float FSoundUtilitiesBPFunctionLibrary::GetGainFromMidiVelocity(int32_t InVelocity);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetLinearFrequencyClamped
// Offset::0x39AE9B0;
float FSoundUtilitiesBPFunctionLibrary::GetLinearFrequencyClamped(float InValue,FVector2D InDomain,FVector2D InRange);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetLogFrequencyClamped
// Offset::0x39AEAF0;
float FSoundUtilitiesBPFunctionLibrary::GetLogFrequencyClamped(float InValue,FVector2D InDomain,FVector2D InRange);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetMIDIPitchFromFrequency
// Offset::0x39AEF40;
int32_t FSoundUtilitiesBPFunctionLibrary::GetMIDIPitchFromFrequency(float Frequency);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetPitchScaleFromMIDIPitch
// Offset::0x39AEE60;
float FSoundUtilitiesBPFunctionLibrary::GetPitchScaleFromMIDIPitch(int32_t BaseMidiNote,int32_t TargetMidiNote);


// Function  SoundUtilities.SoundUtilitiesBPFunctionLibrary.GetQFromBandwidth
// Offset::0x39AE7D0;
float FSoundUtilitiesBPFunctionLibrary::GetQFromBandwidth(float InBandwidth);


// Function  ImageWriteQueue.ImageWriteBlueprintLibrary.ExportToDisk
// Offset::0x423F2B0;
void FImageWriteBlueprintLibrary::ExportToDisk(FTexture* Texture,FString Filename,FImageWriteOptions Options);


// Function  EyeTracker.EyeTrackerFunctionLibrary.GetGazeData
// Offset::0x42456F0;
bool FEyeTrackerFunctionLibrary::GetGazeData(FEyeTrackerGazeData OutGazeData);


// Function  EyeTracker.EyeTrackerFunctionLibrary.GetStereoGazeData
// Offset::0x4245610;
bool FEyeTrackerFunctionLibrary::GetStereoGazeData(FEyeTrackerStereoGazeData OutGazeData);


// Function  EyeTracker.EyeTrackerFunctionLibrary.IsEyeTrackerConnected
// Offset::0x42457E0;
bool FEyeTrackerFunctionLibrary::IsEyeTrackerConnected();


// Function  EyeTracker.EyeTrackerFunctionLibrary.IsStereoGazeDataAvailable
// Offset::0x42457B0;
bool FEyeTrackerFunctionLibrary::IsStereoGazeDataAvailable();


// Function  EyeTracker.EyeTrackerFunctionLibrary.SetEyeTrackedPlayer
// Offset::0x4245580;
void FEyeTrackerFunctionLibrary::SetEyeTrackedPlayer(FPlayerController* PlayerController);


// Function  EngineSettings.GameMapsSettings.GetGameMapsSettings
// Offset::0x4B491A0;
FGameMapsSettings* FGameMapsSettings::GetGameMapsSettings();


// Function  EngineSettings.GameMapsSettings.GetSkipAssigningGamepadToPlayer1
// Offset::0x4B490D0;
bool FGameMapsSettings::GetSkipAssigningGamepadToPlayer1();


// Function  EngineSettings.GameMapsSettings.SetSkipAssigningGamepadToPlayer1
// Offset::0x4B49100;
void FGameMapsSettings::SetSkipAssigningGamepadToPlayer1(bool bSkipFirstPlayer);


// Function  MRMesh.MeshReconstructorBase.ConnectMRMesh
// Offset::0x2094040;
void FMeshReconstructorBase::ConnectMRMesh(FMRMeshComponent* Mesh);


// Function  MRMesh.MeshReconstructorBase.DisconnectMRMesh
// Offset::0x179DEB0;
void FMeshReconstructorBase::DisconnectMRMesh();


// Function  MRMesh.MeshReconstructorBase.IsReconstructionPaused
// Offset::0x179DE10;
bool FMeshReconstructorBase::IsReconstructionPaused();


// Function  MRMesh.MeshReconstructorBase.IsReconstructionStarted
// Offset::0x17AF4E0;
bool FMeshReconstructorBase::IsReconstructionStarted();


// Function  MRMesh.MeshReconstructorBase.PauseReconstruction
// Offset::0x179D370;
void FMeshReconstructorBase::PauseReconstruction();


// Function  MRMesh.MeshReconstructorBase.StartReconstruction
// Offset::0x20E8030;
void FMeshReconstructorBase::StartReconstruction();


// Function  MRMesh.MeshReconstructorBase.StopReconstruction
// Offset::0x1A7E910;
void FMeshReconstructorBase::StopReconstruction();


// Function  MRMesh.MRMeshComponent.Clear
// Offset::0x4FEE2A0;
void FMRMeshComponent::Clear();


// Function  MRMesh.MRMeshComponent.ForceNavMeshUpdate
// Offset::0x4FEE2F0;
void FMRMeshComponent::ForceNavMeshUpdate();


// Function  MRMesh.MRMeshComponent.GetEnableMeshOcclusion
// Offset::0x4FEE1D0;
bool FMRMeshComponent::GetEnableMeshOcclusion();


// Function  MRMesh.MRMeshComponent.GetUseWireframe
// Offset::0x4FEE100;
bool FMRMeshComponent::GetUseWireframe();


// Function  MRMesh.MRMeshComponent.GetWireframeColor
// Offset::0x4FEE030;
FLinearColor FMRMeshComponent::GetWireframeColor();


// Function  MRMesh.MRMeshComponent.IsConnected
// Offset::0x4FEE310;
bool FMRMeshComponent::IsConnected();


// Function  MRMesh.MRMeshComponent.RequestNavMeshUpdate
// Offset::0x4FEE2D0;
void FMRMeshComponent::RequestNavMeshUpdate();


// Function  MRMesh.MRMeshComponent.SetEnableMeshOcclusion
// Offset::0x4FEE200;
void FMRMeshComponent::SetEnableMeshOcclusion(bool bEnable);


// Function  MRMesh.MRMeshComponent.SetUseWireframe
// Offset::0x4FEE130;
void FMRMeshComponent::SetUseWireframe(bool bUseWireframe);


// Function  MRMesh.MRMeshComponent.SetWireframeColor
// Offset::0x4FEE060;
void FMRMeshComponent::SetWireframeColor(FLinearColor InColor);


// Function  MRMesh.MRMeshComponent.SetWireframeMaterial
// Offset::0x2D46730;
void FMRMeshComponent::SetWireframeMaterial(FMaterialInterface* InMaterial);


// Function  AugmentedReality.ARActor.AddARComponent
// Offset::0x50083B0;
FARComponent* FARActor::AddARComponent(FARComponent* InComponentClass,FGuid NativeID);


// Function  AugmentedReality.ARBlueprintLibrary.AddManualEnvironmentCaptureProbe
// Offset::0x5009A70;
bool FARBlueprintLibrary::AddManualEnvironmentCaptureProbe(FVector Location,FVector Extent);


// Function  AugmentedReality.ARBlueprintLibrary.AddRuntimeCandidateImage
// Offset::0x5009700;
FARCandidateImage* FARBlueprintLibrary::AddRuntimeCandidateImage(FARSessionConfig* SessionConfig,FTexture2D* CandidateTexture,FString FriendlyName,float PhysicalWidth);


// Function  AugmentedReality.ARBlueprintLibrary.AddTrackedPointWithName
// Offset::0x5008D20;
bool FARBlueprintLibrary::AddTrackedPointWithName(FTransform WorldTransform,FString PointName,bool bDeletePointsWithSameName);


// Function  AugmentedReality.ARBlueprintLibrary.CalculateAlignmentTransform
// Offset::0x50088A0;
void FARBlueprintLibrary::CalculateAlignmentTransform(FTransform TransformInFirstCoordinateSystem,FTransform TransformInSecondCoordinateSystem,FTransform AlignmentTransform);


// Function  AugmentedReality.ARBlueprintLibrary.CalculateClosestIntersection
// Offset::0x5008AD0;
void FARBlueprintLibrary::CalculateClosestIntersection(TArray<FVector> StartPoints,TArray<FVector> Endpoints,FVector ClosestIntersection);


// Function  AugmentedReality.ARBlueprintLibrary.DebugDrawPin
// Offset::0x500A710;
void FARBlueprintLibrary::DebugDrawPin(FARPin* ARPin,FObject* WorldContextObject,FLinearColor Color,float Scale,float PersistForSeconds);


// Function  AugmentedReality.ARBlueprintLibrary.DebugDrawTrackedGeometry
// Offset::0x500A8E0;
void FARBlueprintLibrary::DebugDrawTrackedGeometry(FARTrackedGeometry* TrackedGeometry,FObject* WorldContextObject,FLinearColor Color,float OutlineThickness,float PersistForSeconds);


// Function  AugmentedReality.ARBlueprintLibrary.FindTrackedPointsByName
// Offset::0x5008C40;
TArray<FARTrackedPoint*> FARBlueprintLibrary::FindTrackedPointsByName(FString PointName);


// Function  AugmentedReality.ARBlueprintLibrary.GetAlignmentTransform
// Offset::0x5008EC0;
FTransform FARBlueprintLibrary::GetAlignmentTransform();


// Function  AugmentedReality.ARBlueprintLibrary.GetAllGeometries
// Offset::0x500AD00;
TArray<FARTrackedGeometry*> FARBlueprintLibrary::GetAllGeometries();


// Function  AugmentedReality.ARBlueprintLibrary.GetAllGeometriesByClass
// Offset::0x500AC30;
TArray<FARTrackedGeometry*> FARBlueprintLibrary::GetAllGeometriesByClass(FARTrackedGeometry* GeometryClass);


// Function  AugmentedReality.ARBlueprintLibrary.GetAllPins
// Offset::0x500A100;
TArray<FARPin*> FARBlueprintLibrary::GetAllPins();


// Function  AugmentedReality.ARBlueprintLibrary.GetAllTracked2DPoses
// Offset::0x5009430;
TArray<FARPose2D> FARBlueprintLibrary::GetAllTracked2DPoses();


// Function  AugmentedReality.ARBlueprintLibrary.GetAllTrackedEnvironmentCaptureProbes
// Offset::0x5009B80;
TArray<FAREnvironmentCaptureProbe*> FARBlueprintLibrary::GetAllTrackedEnvironmentCaptureProbes();


// Function  AugmentedReality.ARBlueprintLibrary.GetAllTrackedImages
// Offset::0x5009C00;
TArray<FARTrackedImage*> FARBlueprintLibrary::GetAllTrackedImages();


// Function  AugmentedReality.ARBlueprintLibrary.GetAllTrackedPlanes
// Offset::0x5009D00;
TArray<FARPlaneGeometry*> FARBlueprintLibrary::GetAllTrackedPlanes();


// Function  AugmentedReality.ARBlueprintLibrary.GetAllTrackedPoints
// Offset::0x5009C80;
TArray<FARTrackedPoint*> FARBlueprintLibrary::GetAllTrackedPoints();


// Function  AugmentedReality.ARBlueprintLibrary.GetAllTrackedPoses
// Offset::0x50093B0;
TArray<FARTrackedPose*> FARBlueprintLibrary::GetAllTrackedPoses();


// Function  AugmentedReality.ARBlueprintLibrary.GetARSessionStatus
// Offset::0x500B760;
FARSessionStatus FARBlueprintLibrary::GetARSessionStatus();


// Function  AugmentedReality.ARBlueprintLibrary.GetARTexture
// Offset::0x500AB40;
FARTexture* FARBlueprintLibrary::GetARTexture(enum class EARTextureType TextureType);


// Function  AugmentedReality.ARBlueprintLibrary.GetARWorldScale
// Offset::0x5008F50;
float FARBlueprintLibrary::GetARWorldScale();


// Function  AugmentedReality.ARBlueprintLibrary.GetCameraDepth
// Offset::0x500ABD0;
FARTextureCameraDepth* FARBlueprintLibrary::GetCameraDepth();


// Function  AugmentedReality.ARBlueprintLibrary.GetCameraImage
// Offset::0x500AC00;
FARTextureCameraImage* FARBlueprintLibrary::GetCameraImage();


// Function  AugmentedReality.ARBlueprintLibrary.GetCameraIntrinsics
// Offset::0x50087B0;
bool FARBlueprintLibrary::GetCameraIntrinsics(FARCameraIntrinsics OutCameraIntrinsics);


// Function  AugmentedReality.ARBlueprintLibrary.GetCurrentLightEstimate
// Offset::0x500A6E0;
FARLightEstimate* FARBlueprintLibrary::GetCurrentLightEstimate();


// Function  AugmentedReality.ARBlueprintLibrary.GetNumberOfTrackedFacesSupported
// Offset::0x5008870;
int32_t FARBlueprintLibrary::GetNumberOfTrackedFacesSupported();


// Function  AugmentedReality.ARBlueprintLibrary.GetObjectClassificationAtLocation
// Offset::0x50091B0;
bool FARBlueprintLibrary::GetObjectClassificationAtLocation(FVector InWorldLocation,enum class EARObjectClassification OutClassification,FVector OutClassificationLocation,float MaxLocationDiff);


// Function  AugmentedReality.ARBlueprintLibrary.GetPersonSegmentationDepthImage
// Offset::0x5009350;
FARTexture* FARBlueprintLibrary::GetPersonSegmentationDepthImage();


// Function  AugmentedReality.ARBlueprintLibrary.GetPersonSegmentationImage
// Offset::0x5009380;
FARTexture* FARBlueprintLibrary::GetPersonSegmentationImage();


// Function  AugmentedReality.ARBlueprintLibrary.GetPointCloud
// Offset::0x50099C0;
TArray<FVector> FARBlueprintLibrary::GetPointCloud();


// Function  AugmentedReality.ARBlueprintLibrary.GetSessionConfig
// Offset::0x500B730;
FARSessionConfig* FARBlueprintLibrary::GetSessionConfig();


// Function  AugmentedReality.ARBlueprintLibrary.GetSupportedVideoFormats
// Offset::0x50098F0;
TArray<FARVideoFormat> FARBlueprintLibrary::GetSupportedVideoFormats(enum class EARSessionType SessionType);


// Function  AugmentedReality.ARBlueprintLibrary.GetTrackingQuality
// Offset::0x500ADB0;
enum class EARTrackingQuality FARBlueprintLibrary::GetTrackingQuality();


// Function  AugmentedReality.ARBlueprintLibrary.GetTrackingQualityReason
// Offset::0x500AD80;
enum class EARTrackingQualityReason FARBlueprintLibrary::GetTrackingQualityReason();


// Function  AugmentedReality.ARBlueprintLibrary.GetWorldMappingStatus
// Offset::0x5009A40;
enum class EARWorldMappingState FARBlueprintLibrary::GetWorldMappingStatus();


// Function  AugmentedReality.ARBlueprintLibrary.IsARPinLocalStoreReady
// Offset::0x500A0A0;
bool FARBlueprintLibrary::IsARPinLocalStoreReady();


// Function  AugmentedReality.ARBlueprintLibrary.IsARPinLocalStoreSupported
// Offset::0x500A0D0;
bool FARBlueprintLibrary::IsARPinLocalStoreSupported();


// Function  AugmentedReality.ARBlueprintLibrary.IsARSupported
// Offset::0x500B8C0;
bool FARBlueprintLibrary::IsARSupported();


// Function  AugmentedReality.ARBlueprintLibrary.IsSceneReconstructionSupported
// Offset::0x5009540;
bool FARBlueprintLibrary::IsSceneReconstructionSupported(enum class EARSessionType SessionType,enum class EARSceneReconstruction SceneReconstructionMethod);


// Function  AugmentedReality.ARBlueprintLibrary.IsSessionTrackingFeatureSupported
// Offset::0x5009620;
bool FARBlueprintLibrary::IsSessionTrackingFeatureSupported(enum class EARSessionType SessionType,enum class EARSessionTrackingFeature SessionTrackingFeature);


// Function  AugmentedReality.ARBlueprintLibrary.IsSessionTypeSupported
// Offset::0x500AAB0;
bool FARBlueprintLibrary::IsSessionTypeSupported(enum class EARSessionType SessionType);


// Function  AugmentedReality.ARBlueprintLibrary.LineTraceTrackedObjects
// Offset::0x500B160;
TArray<FARTraceResult> FARBlueprintLibrary::LineTraceTrackedObjects(FVector2D ScreenCoord,bool bTestFeaturePoints,bool bTestGroundPlane,bool bTestPlaneExtents,bool bTestPlaneBoundaryPolygon);


// Function  AugmentedReality.ARBlueprintLibrary.LineTraceTrackedObjects3D
// Offset::0x500ADE0;
TArray<FARTraceResult> FARBlueprintLibrary::LineTraceTrackedObjects3D(FVector Start,FVector End,bool bTestFeaturePoints,bool bTestGroundPlane,bool bTestPlaneExtents,bool bTestPlaneBoundaryPolygon);


// Function  AugmentedReality.ARBlueprintLibrary.LoadARPinsFromLocalStore
// Offset::0x5009F10;
TMap<FName,FARPin*> FARBlueprintLibrary::LoadARPinsFromLocalStore();


// Function  AugmentedReality.ARBlueprintLibrary.PauseARSession
// Offset::0x500B810;
void FARBlueprintLibrary::PauseARSession();


// Function  AugmentedReality.ARBlueprintLibrary.PinComponent
// Offset::0x500A500;
FARPin* FARBlueprintLibrary::PinComponent(FSceneComponent* ComponentToPin,FTransform PinToWorldTransform,FARTrackedGeometry* TrackedGeometry,FName DebugName);


// Function  AugmentedReality.ARBlueprintLibrary.PinComponentToARPin
// Offset::0x500A2A0;
bool FARBlueprintLibrary::PinComponentToARPin(FSceneComponent* ComponentToPin,FARPin* Pin);


// Function  AugmentedReality.ARBlueprintLibrary.PinComponentToTraceResult
// Offset::0x500A380;
FARPin* FARBlueprintLibrary::PinComponentToTraceResult(FSceneComponent* ComponentToPin,FARTraceResult TraceResult,FName DebugName);


// Function  AugmentedReality.ARBlueprintLibrary.RemoveAllARPinsFromLocalStore
// Offset::0x5009D80;
void FARBlueprintLibrary::RemoveAllARPinsFromLocalStore();


// Function  AugmentedReality.ARBlueprintLibrary.RemoveARPinFromLocalStore
// Offset::0x5009DA0;
void FARBlueprintLibrary::RemoveARPinFromLocalStore(FName InSaveName);


// Function  AugmentedReality.ARBlueprintLibrary.RemovePin
// Offset::0x500A180;
void FARBlueprintLibrary::RemovePin(FARPin* PinToRemove);


// Function  AugmentedReality.ARBlueprintLibrary.ResizeXRCamera
// Offset::0x500B510;
FIntPoint FARBlueprintLibrary::ResizeXRCamera(FIntPoint InSize);


// Function  AugmentedReality.ARBlueprintLibrary.SaveARPinToLocalStore
// Offset::0x5009E30;
bool FARBlueprintLibrary::SaveARPinToLocalStore(FName InSaveName,FARPin* InPin);


// Function  AugmentedReality.ARBlueprintLibrary.SetAlignmentTransform
// Offset::0x500B430;
void FARBlueprintLibrary::SetAlignmentTransform(FTransform InAlignmentTransform);


// Function  AugmentedReality.ARBlueprintLibrary.SetARWorldOriginLocationAndRotation
// Offset::0x5009010;
void FARBlueprintLibrary::SetARWorldOriginLocationAndRotation(FVector OriginLocation,FRotator OriginRotation,bool bIsTransformInWorldSpace,bool bMaintainUpDirection);


// Function  AugmentedReality.ARBlueprintLibrary.SetARWorldScale
// Offset::0x5008F80;
void FARBlueprintLibrary::SetARWorldScale(float InWorldScale);


// Function  AugmentedReality.ARBlueprintLibrary.SetEnabledXRCamera
// Offset::0x500B5C0;
void FARBlueprintLibrary::SetEnabledXRCamera(bool bOnOff);


// Function  AugmentedReality.ARBlueprintLibrary.StartARSession
// Offset::0x500B830;
void FARBlueprintLibrary::StartARSession(FARSessionConfig* SessionConfig);


// Function  AugmentedReality.ARBlueprintLibrary.StopARSession
// Offset::0x500B7F0;
void FARBlueprintLibrary::StopARSession();


// Function  AugmentedReality.ARBlueprintLibrary.ToggleARCapture
// Offset::0x500B650;
bool FARBlueprintLibrary::ToggleARCapture(bool bOnOff,enum class EARCaptureType CaptureType);


// Function  AugmentedReality.ARBlueprintLibrary.UnpinComponent
// Offset::0x500A210;
void FARBlueprintLibrary::UnpinComponent(FSceneComponent* ComponentToUnpin);


// Function  AugmentedReality.ARTraceResultLibrary.GetDistanceFromCamera
// Offset::0x500E060;
float FARTraceResultLibrary::GetDistanceFromCamera(FARTraceResult TraceResult);


// Function  AugmentedReality.ARTraceResultLibrary.GetLocalToTrackingTransform
// Offset::0x500DF30;
FTransform FARTraceResultLibrary::GetLocalToTrackingTransform(FARTraceResult TraceResult);


// Function  AugmentedReality.ARTraceResultLibrary.GetLocalToWorldTransform
// Offset::0x500DE00;
FTransform FARTraceResultLibrary::GetLocalToWorldTransform(FARTraceResult TraceResult);


// Function  AugmentedReality.ARTraceResultLibrary.GetLocalTransform
// Offset::0x500DCD0;
FTransform FARTraceResultLibrary::GetLocalTransform(FARTraceResult TraceResult);


// Function  AugmentedReality.ARTraceResultLibrary.GetTraceChannel
// Offset::0x500DB00;
enum class EARLineTraceChannels FARTraceResultLibrary::GetTraceChannel(FARTraceResult TraceResult);


// Function  AugmentedReality.ARTraceResultLibrary.GetTrackedGeometry
// Offset::0x500DBE0;
FARTrackedGeometry* FARTraceResultLibrary::GetTrackedGeometry(FARTraceResult TraceResult);


// Function  AugmentedReality.ARSaveWorldAsyncTaskBlueprintProxy.ARSaveWorld
// Offset::0x500E780;
FARSaveWorldAsyncTaskBlueprintProxy* FARSaveWorldAsyncTaskBlueprintProxy::ARSaveWorld(FObject* WorldContextObject);


// Function  AugmentedReality.ARGetCandidateObjectAsyncTaskBlueprintProxy.ARGetCandidateObject
// Offset::0x500EB10;
FARGetCandidateObjectAsyncTaskBlueprintProxy* FARGetCandidateObjectAsyncTaskBlueprintProxy::ARGetCandidateObject(FObject* WorldContextObject,FVector Location,FVector Extent);


// Function  AugmentedReality.ARComponent.GetMRMesh
// Offset::0x5010D90;
FMRMeshComponent* FARComponent::GetMRMesh();


// Function  AugmentedReality.ARComponent.OnRep_Payload
// Offset::0x5010D50;
void FARComponent::OnRep_Payload();


// Function  AugmentedReality.ARComponent.ReceiveRemove
// Offset::0x3D30810;
void FARComponent::ReceiveRemove();


// Function  AugmentedReality.ARComponent.SetNativeID
// Offset::0x5010DC0;
void FARComponent::SetNativeID(FGuid NativeID);


// Function  AugmentedReality.ARComponent.UpdateVisualization
// Offset::0x5010D70;
void FARComponent::UpdateVisualization();


// Function  AugmentedReality.ARPlaneComponent.GetObjectClassificationDebugColors
// Offset::0x5011970;
TMap<enum class EARObjectClassification,FLinearColor> FARPlaneComponent::GetObjectClassificationDebugColors();


// Function  AugmentedReality.ARPlaneComponent.ReceiveAdd
// Offset::0x3D30810;
void FARPlaneComponent::ReceiveAdd(FARPlaneUpdatePayload Payload);


// Function  AugmentedReality.ARPlaneComponent.ReceiveUpdate
// Offset::0x3D30810;
void FARPlaneComponent::ReceiveUpdate(FARPlaneUpdatePayload Payload);


// Function  AugmentedReality.ARPlaneComponent.ServerUpdatePayload
// Offset::0x50117F0;
void FARPlaneComponent::ServerUpdatePayload(FARPlaneUpdatePayload NewPayload);


// Function  AugmentedReality.ARPlaneComponent.SetObjectClassificationDebugColors
// Offset::0x50119A0;
void FARPlaneComponent::SetObjectClassificationDebugColors(TMap<enum class EARObjectClassification,FLinearColor> InColors);


// Function  AugmentedReality.ARPlaneComponent.SetPlaneComponentDebugMode
// Offset::0x5011AF0;
void FARPlaneComponent::SetPlaneComponentDebugMode(enum class EPlaneComponentDebugMode NewDebugMode);


// Function  AugmentedReality.ARPointComponent.ReceiveAdd
// Offset::0x3D30810;
void FARPointComponent::ReceiveAdd(FARPointUpdatePayload Payload);


// Function  AugmentedReality.ARPointComponent.ReceiveUpdate
// Offset::0x3D30810;
void FARPointComponent::ReceiveUpdate(FARPointUpdatePayload Payload);


// Function  AugmentedReality.ARPointComponent.ServerUpdatePayload
// Offset::0x5012B40;
void FARPointComponent::ServerUpdatePayload(FARPointUpdatePayload NewPayload);


// Function  AugmentedReality.ARFaceComponent.ReceiveAdd
// Offset::0x3D30810;
void FARFaceComponent::ReceiveAdd(FARFaceUpdatePayload Payload);


// Function  AugmentedReality.ARFaceComponent.ReceiveUpdate
// Offset::0x3D30810;
void FARFaceComponent::ReceiveUpdate(FARFaceUpdatePayload Payload);


// Function  AugmentedReality.ARFaceComponent.ServerUpdatePayload
// Offset::0x50136F0;
void FARFaceComponent::ServerUpdatePayload(FARFaceUpdatePayload NewPayload);


// Function  AugmentedReality.ARFaceComponent.SetFaceComponentDebugMode
// Offset::0x50137E0;
void FARFaceComponent::SetFaceComponentDebugMode(enum class EFaceComponentDebugMode NewDebugMode);


// Function  AugmentedReality.ARImageComponent.ReceiveAdd
// Offset::0x3D30810;
void FARImageComponent::ReceiveAdd(FARImageUpdatePayload Payload);


// Function  AugmentedReality.ARImageComponent.ReceiveUpdate
// Offset::0x3D30810;
void FARImageComponent::ReceiveUpdate(FARImageUpdatePayload Payload);


// Function  AugmentedReality.ARImageComponent.ServerUpdatePayload
// Offset::0x50144F0;
void FARImageComponent::ServerUpdatePayload(FARImageUpdatePayload NewPayload);


// Function  AugmentedReality.ARImageComponent.SetImageComponentDebugMode
// Offset::0x5014630;
void FARImageComponent::SetImageComponentDebugMode(enum class EImageComponentDebugMode NewDebugMode);


// Function  AugmentedReality.ARQRCodeComponent.ReceiveAdd
// Offset::0x3D30810;
void FARQRCodeComponent::ReceiveAdd(FARQRCodeUpdatePayload Payload);


// Function  AugmentedReality.ARQRCodeComponent.ReceiveUpdate
// Offset::0x3D30810;
void FARQRCodeComponent::ReceiveUpdate(FARQRCodeUpdatePayload Payload);


// Function  AugmentedReality.ARQRCodeComponent.ServerUpdatePayload
// Offset::0x50153C0;
void FARQRCodeComponent::ServerUpdatePayload(FARQRCodeUpdatePayload NewPayload);


// Function  AugmentedReality.ARQRCodeComponent.SetQRCodeComponentDebugMode
// Offset::0x5015510;
void FARQRCodeComponent::SetQRCodeComponentDebugMode(enum class EQRCodeComponentDebugMode NewDebugMode);


// Function  AugmentedReality.ARPoseComponent.ReceiveAdd
// Offset::0x3D30810;
void FARPoseComponent::ReceiveAdd(FARPoseUpdatePayload Payload);


// Function  AugmentedReality.ARPoseComponent.ReceiveUpdate
// Offset::0x3D30810;
void FARPoseComponent::ReceiveUpdate(FARPoseUpdatePayload Payload);


// Function  AugmentedReality.ARPoseComponent.ServerUpdatePayload
// Offset::0x50163C0;
void FARPoseComponent::ServerUpdatePayload(FARPoseUpdatePayload NewPayload);


// Function  AugmentedReality.ARPoseComponent.SetPoseComponentDebugMode
// Offset::0x50164F0;
void FARPoseComponent::SetPoseComponentDebugMode(enum class EPoseComponentDebugMode NewDebugMode);


// Function  AugmentedReality.AREnvironmentProbeComponent.ReceiveAdd
// Offset::0x3D30810;
void FAREnvironmentProbeComponent::ReceiveAdd(FAREnvironmentProbeUpdatePayload Payload);


// Function  AugmentedReality.AREnvironmentProbeComponent.ReceiveUpdate
// Offset::0x3D30810;
void FAREnvironmentProbeComponent::ReceiveUpdate(FAREnvironmentProbeUpdatePayload Payload);


// Function  AugmentedReality.AREnvironmentProbeComponent.ServerUpdatePayload
// Offset::0x50172C0;
void FAREnvironmentProbeComponent::ServerUpdatePayload(FAREnvironmentProbeUpdatePayload NewPayload);


// Function  AugmentedReality.ARObjectComponent.ReceiveAdd
// Offset::0x3D30810;
void FARObjectComponent::ReceiveAdd(FARObjectUpdatePayload Payload);


// Function  AugmentedReality.ARObjectComponent.ReceiveUpdate
// Offset::0x3D30810;
void FARObjectComponent::ReceiveUpdate(FARObjectUpdatePayload Payload);


// Function  AugmentedReality.ARObjectComponent.ServerUpdatePayload
// Offset::0x50172C0;
void FARObjectComponent::ServerUpdatePayload(FARObjectUpdatePayload NewPayload);


// Function  AugmentedReality.ARMeshComponent.ReceiveAdd
// Offset::0x3D30810;
void FARMeshComponent::ReceiveAdd(FARMeshUpdatePayload Payload);


// Function  AugmentedReality.ARMeshComponent.ReceiveUpdate
// Offset::0x3D30810;
void FARMeshComponent::ReceiveUpdate(FARMeshUpdatePayload Payload);


// Function  AugmentedReality.ARMeshComponent.ServerUpdatePayload
// Offset::0x5018A40;
void FARMeshComponent::ServerUpdatePayload(FARMeshUpdatePayload NewPayload);


// Function  AugmentedReality.ARGeoAnchorComponent.ReceiveAdd
// Offset::0x3D30810;
void FARGeoAnchorComponent::ReceiveAdd(FARGeoAnchorUpdatePayload Payload);


// Function  AugmentedReality.ARGeoAnchorComponent.ReceiveUpdate
// Offset::0x3D30810;
void FARGeoAnchorComponent::ReceiveUpdate(FARGeoAnchorUpdatePayload Payload);


// Function  AugmentedReality.ARGeoAnchorComponent.ServerUpdatePayload
// Offset::0x50197B0;
void FARGeoAnchorComponent::ServerUpdatePayload(FARGeoAnchorUpdatePayload NewPayload);


// Function  AugmentedReality.ARGeoAnchorComponent.SetGeoAnchorComponentDebugMode
// Offset::0x5019910;
void FARGeoAnchorComponent::SetGeoAnchorComponentDebugMode(enum class EGeoAnchorComponentDebugMode NewDebugMode);


// Function  AugmentedReality.ARDependencyHandler.CheckARServiceAvailability
// Offset::0x501AD70;
void FARDependencyHandler::CheckARServiceAvailability(FObject* WorldContextObject,FLatentActionInfo LatentInfo,enum class EARServiceAvailability OutAvailability);


// Function  AugmentedReality.ARDependencyHandler.GetARDependencyHandler
// Offset::0x501AED0;
FARDependencyHandler* FARDependencyHandler::GetARDependencyHandler();


// Function  AugmentedReality.ARDependencyHandler.InstallARService
// Offset::0x501AC10;
void FARDependencyHandler::InstallARService(FObject* WorldContextObject,FLatentActionInfo LatentInfo,enum class EARServiceInstallRequestResult OutInstallResult);


// Function  AugmentedReality.ARDependencyHandler.RequestARSessionPermission
// Offset::0x501AA50;
void FARDependencyHandler::RequestARSessionPermission(FObject* WorldContextObject,FARSessionConfig* SessionConfig,FLatentActionInfo LatentInfo,enum class EARServicePermissionRequestResult OutPermissionResult);


// Function  AugmentedReality.ARDependencyHandler.StartARSessionLatent
// Offset::0x501A900;
void FARDependencyHandler::StartARSessionLatent(FObject* WorldContextObject,FARSessionConfig* SessionConfig,FLatentActionInfo LatentInfo);


// Function  AugmentedReality.ARGeoTrackingSupport.AddGeoAnchorAtLocation
// Offset::0x501B700;
bool FARGeoTrackingSupport::AddGeoAnchorAtLocation(float Longitude,float Latitude,FString OptionalAnchorName);


// Function  AugmentedReality.ARGeoTrackingSupport.AddGeoAnchorAtLocationWithAltitude
// Offset::0x501B510;
bool FARGeoTrackingSupport::AddGeoAnchorAtLocationWithAltitude(float Longitude,float Latitude,float AltitudeMeters,FString OptionalAnchorName);


// Function  AugmentedReality.ARGeoTrackingSupport.GetGeoTrackingAccuracy
// Offset::0x2876320;
enum class EARGeoTrackingAccuracy FARGeoTrackingSupport::GetGeoTrackingAccuracy();


// Function  AugmentedReality.ARGeoTrackingSupport.GetGeoTrackingState
// Offset::0x17AF4E0;
enum class EARGeoTrackingState FARGeoTrackingSupport::GetGeoTrackingState();


// Function  AugmentedReality.ARGeoTrackingSupport.GetGeoTrackingStateReason
// Offset::0x179DE10;
enum class EARGeoTrackingStateReason FARGeoTrackingSupport::GetGeoTrackingStateReason();


// Function  AugmentedReality.ARGeoTrackingSupport.GetGeoTrackingSupport
// Offset::0x501B8A0;
FARGeoTrackingSupport* FARGeoTrackingSupport::GetGeoTrackingSupport();


// Function  AugmentedReality.ARBasicLightEstimate.GetAmbientColor
// Offset::0x501F680;
FLinearColor FARBasicLightEstimate::GetAmbientColor();


// Function  AugmentedReality.ARBasicLightEstimate.GetAmbientColorTemperatureKelvin
// Offset::0x501F6D0;
float FARBasicLightEstimate::GetAmbientColorTemperatureKelvin();


// Function  AugmentedReality.ARBasicLightEstimate.GetAmbientIntensityLumens
// Offset::0x501F700;
float FARBasicLightEstimate::GetAmbientIntensityLumens();


// Function  AugmentedReality.ARPin.DebugDraw
// Offset::0x501FBF0;
void FARPin::DebugDraw(FWorld* World,FLinearColor Color,float Scale,float PersistForSeconds);


// Function  AugmentedReality.ARPin.GetDebugName
// Offset::0x501FBA0;
FName FARPin::GetDebugName();


// Function  AugmentedReality.ARPin.GetLocalToTrackingTransform
// Offset::0x501FEA0;
FTransform FARPin::GetLocalToTrackingTransform();


// Function  AugmentedReality.ARPin.GetLocalToWorldTransform
// Offset::0x501FE10;
FTransform FARPin::GetLocalToWorldTransform();


// Function  AugmentedReality.ARPin.GetPinnedComponent
// Offset::0x501FD80;
FSceneComponent* FARPin::GetPinnedComponent();


// Function  AugmentedReality.ARPin.GetTrackedGeometry
// Offset::0x501FDB0;
FARTrackedGeometry* FARPin::GetTrackedGeometry();


// Function  AugmentedReality.ARPin.GetTrackingState
// Offset::0x501FDE0;
enum class EARTrackingState FARPin::GetTrackingState();


// Function  AugmentedReality.ARSessionConfig.AddCandidateImage
// Offset::0x5021120;
void FARSessionConfig::AddCandidateImage(FARCandidateImage* NewCandidateImage);


// Function  AugmentedReality.ARSessionConfig.AddCandidateObject
// Offset::0x5020D70;
void FARSessionConfig::AddCandidateObject(FARCandidateObject* CandidateObject);


// Function  AugmentedReality.ARSessionConfig.GetCandidateImageList
// Offset::0x50211C0;
TArray<FARCandidateImage*> FARSessionConfig::GetCandidateImageList();


// Function  AugmentedReality.ARSessionConfig.GetCandidateObjectList
// Offset::0x5020EC0;
TArray<FARCandidateObject*> FARSessionConfig::GetCandidateObjectList();


// Function  AugmentedReality.ARSessionConfig.GetDesiredVideoFormat
// Offset::0x5020D10;
FARVideoFormat FARSessionConfig::GetDesiredVideoFormat();


// Function  AugmentedReality.ARSessionConfig.GetEnabledSessionTrackingFeature
// Offset::0x5020AB0;
enum class EARSessionTrackingFeature FARSessionConfig::GetEnabledSessionTrackingFeature();


// Function  AugmentedReality.ARSessionConfig.GetEnvironmentCaptureProbeType
// Offset::0x50210C0;
enum class EAREnvironmentCaptureProbeType FARSessionConfig::GetEnvironmentCaptureProbeType();


// Function  AugmentedReality.ARSessionConfig.GetFaceTrackingDirection
// Offset::0x5020C30;
enum class EARFaceTrackingDirection FARSessionConfig::GetFaceTrackingDirection();


// Function  AugmentedReality.ARSessionConfig.GetFaceTrackingUpdate
// Offset::0x5020B70;
enum class EARFaceTrackingUpdate FARSessionConfig::GetFaceTrackingUpdate();


// Function  AugmentedReality.ARSessionConfig.GetFrameSyncMode
// Offset::0x5021500;
enum class EARFrameSyncMode FARSessionConfig::GetFrameSyncMode();


// Function  AugmentedReality.ARSessionConfig.GetLightEstimationMode
// Offset::0x5021530;
enum class EARLightEstimationMode FARSessionConfig::GetLightEstimationMode();


// Function  AugmentedReality.ARSessionConfig.GetMaxNumSimultaneousImagesTracked
// Offset::0x50210F0;
int32_t FARSessionConfig::GetMaxNumSimultaneousImagesTracked();


// Function  AugmentedReality.ARSessionConfig.GetPlaneDetectionMode
// Offset::0x5021560;
enum class EARPlaneDetectionMode FARSessionConfig::GetPlaneDetectionMode();


// Function  AugmentedReality.ARSessionConfig.GetSceneReconstructionMethod
// Offset::0x5020A80;
enum class EARSceneReconstruction FARSessionConfig::GetSceneReconstructionMethod();


// Function  AugmentedReality.ARSessionConfig.GetSessionType
// Offset::0x5021590;
enum class EARSessionType FARSessionConfig::GetSessionType();


// Function  AugmentedReality.ARSessionConfig.GetWorldAlignment
// Offset::0x50215C0;
enum class EARWorldAlignment FARSessionConfig::GetWorldAlignment();


// Function  AugmentedReality.ARSessionConfig.GetWorldMapData
// Offset::0x5021050;
TArray<char> FARSessionConfig::GetWorldMapData();


// Function  AugmentedReality.ARSessionConfig.SetCandidateObjectList
// Offset::0x5020E10;
void FARSessionConfig::SetCandidateObjectList(TArray<FARCandidateObject*> InCandidateObjects);


// Function  AugmentedReality.ARSessionConfig.SetDesiredVideoFormat
// Offset::0x5020C60;
void FARSessionConfig::SetDesiredVideoFormat(FARVideoFormat NewFormat);


// Function  AugmentedReality.ARSessionConfig.SetEnableAutoFocus
// Offset::0x50213D0;
void FARSessionConfig::SetEnableAutoFocus(bool bNewValue);


// Function  AugmentedReality.ARSessionConfig.SetFaceTrackingDirection
// Offset::0x5020BA0;
void FARSessionConfig::SetFaceTrackingDirection(enum class EARFaceTrackingDirection InDirection);


// Function  AugmentedReality.ARSessionConfig.SetFaceTrackingUpdate
// Offset::0x5020AE0;
void FARSessionConfig::SetFaceTrackingUpdate(enum class EARFaceTrackingUpdate InUpdate);


// Function  AugmentedReality.ARSessionConfig.SetResetCameraTracking
// Offset::0x5021300;
void FARSessionConfig::SetResetCameraTracking(bool bNewValue);


// Function  AugmentedReality.ARSessionConfig.SetResetTrackedObjects
// Offset::0x5021230;
void FARSessionConfig::SetResetTrackedObjects(bool bNewValue);


// Function  AugmentedReality.ARSessionConfig.SetSceneReconstructionMethod
// Offset::0x5020960;
void FARSessionConfig::SetSceneReconstructionMethod(enum class EARSceneReconstruction InSceneReconstructionMethod);


// Function  AugmentedReality.ARSessionConfig.SetSessionTrackingFeatureToEnable
// Offset::0x50209F0;
void FARSessionConfig::SetSessionTrackingFeatureToEnable(enum class EARSessionTrackingFeature InSessionTrackingFeature);


// Function  AugmentedReality.ARSessionConfig.SetWorldMapData
// Offset::0x5020F60;
void FARSessionConfig::SetWorldMapData(TArray<char> WorldMapData);


// Function  AugmentedReality.ARSessionConfig.ShouldEnableAutoFocus
// Offset::0x5021470;
bool FARSessionConfig::ShouldEnableAutoFocus();


// Function  AugmentedReality.ARSessionConfig.ShouldEnableCameraTracking
// Offset::0x50214A0;
bool FARSessionConfig::ShouldEnableCameraTracking();


// Function  AugmentedReality.ARSessionConfig.ShouldRenderCameraOverlay
// Offset::0x50214D0;
bool FARSessionConfig::ShouldRenderCameraOverlay();


// Function  AugmentedReality.ARSessionConfig.ShouldResetCameraTracking
// Offset::0x50213A0;
bool FARSessionConfig::ShouldResetCameraTracking();


// Function  AugmentedReality.ARSessionConfig.ShouldResetTrackedObjects
// Offset::0x50212D0;
bool FARSessionConfig::ShouldResetTrackedObjects();


// Function  AugmentedReality.ARSharedWorldGameMode.GetARSharedWorldGameState
// Offset::0x21D7020;
FARSharedWorldGameState* FARSharedWorldGameMode::GetARSharedWorldGameState();


// Function  AugmentedReality.ARSharedWorldGameMode.SetARSharedWorldData
// Offset::0x5022950;
void FARSharedWorldGameMode::SetARSharedWorldData(TArray<char> ARWorldData);


// Function  AugmentedReality.ARSharedWorldGameMode.SetARWorldSharingIsReady
// Offset::0x5022930;
void FARSharedWorldGameMode::SetARWorldSharingIsReady();


// Function  AugmentedReality.ARSharedWorldGameMode.SetPreviewImageData
// Offset::0x5022A40;
void FARSharedWorldGameMode::SetPreviewImageData(TArray<char> ImageData);


// Function  AugmentedReality.ARSharedWorldGameState.K2_OnARWorldMapIsReady
// Offset::0x3D30810;
void FARSharedWorldGameState::K2_OnARWorldMapIsReady();


// Function  AugmentedReality.ARSharedWorldPlayerController.ClientInitSharedWorld
// Offset::0x50234A0;
void FARSharedWorldPlayerController::ClientInitSharedWorld(int32_t PreviewImageSize,int32_t ARWorldDataSize);


// Function  AugmentedReality.ARSharedWorldPlayerController.ClientUpdateARWorldData
// Offset::0x5023260;
void FARSharedWorldPlayerController::ClientUpdateARWorldData(int32_t Offset,TArray<char> Buffer);


// Function  AugmentedReality.ARSharedWorldPlayerController.ClientUpdatePreviewImageData
// Offset::0x5023380;
void FARSharedWorldPlayerController::ClientUpdatePreviewImageData(int32_t Offset,TArray<char> Buffer);


// Function  AugmentedReality.ARSharedWorldPlayerController.ServerMarkReadyForReceiving
// Offset::0x50235B0;
void FARSharedWorldPlayerController::ServerMarkReadyForReceiving();


// Function  Engine.SkyLight.OnRep_bEnabled
// Offset::0x21D6F30;
void FSkyLight::OnRep_bEnabled();


// Function  AugmentedReality.ARSkyLight.SetEnvironmentCaptureProbe
// Offset::0x5024D60;
void FARSkyLight::SetEnvironmentCaptureProbe(FAREnvironmentCaptureProbe* InCaptureProbe);


// Function  AugmentedReality.ARTrackedGeometry.GetDebugName
// Offset::0x5025AA0;
FName FARTrackedGeometry::GetDebugName();


// Function  AugmentedReality.ARTrackedGeometry.GetLastUpdateFrameNumber
// Offset::0x5025A00;
int32_t FARTrackedGeometry::GetLastUpdateFrameNumber();


// Function  AugmentedReality.ARTrackedGeometry.GetLastUpdateTimestamp
// Offset::0x50259D0;
float FARTrackedGeometry::GetLastUpdateTimestamp();


// Function  AugmentedReality.ARTrackedGeometry.GetLocalToTrackingTransform
// Offset::0x501FEA0;
FTransform FARTrackedGeometry::GetLocalToTrackingTransform();


// Function  AugmentedReality.ARTrackedGeometry.GetLocalToWorldTransform
// Offset::0x5025B20;
FTransform FARTrackedGeometry::GetLocalToWorldTransform();


// Function  AugmentedReality.ARTrackedGeometry.GetName
// Offset::0x5025A30;
FString FARTrackedGeometry::GetName();


// Function  AugmentedReality.ARTrackedGeometry.GetObjectClassification
// Offset::0x5025980;
enum class EARObjectClassification FARTrackedGeometry::GetObjectClassification();


// Function  AugmentedReality.ARTrackedGeometry.GetTrackingState
// Offset::0x501FDE0;
enum class EARTrackingState FARTrackedGeometry::GetTrackingState();


// Function  AugmentedReality.ARTrackedGeometry.GetUnderlyingMesh
// Offset::0x50259A0;
FMRMeshComponent* FARTrackedGeometry::GetUnderlyingMesh();


// Function  AugmentedReality.ARTrackedGeometry.HasSpatialMeshUsageFlag
// Offset::0x50258D0;
bool FARTrackedGeometry::HasSpatialMeshUsageFlag(enum class EARSpatialMeshUsageFlags InFlag);


// Function  AugmentedReality.ARTrackedGeometry.IsTracked
// Offset::0x5025AF0;
bool FARTrackedGeometry::IsTracked();


// Function  AugmentedReality.ARPlaneGeometry.GetBoundaryPolygonInLocalSpace
// Offset::0x5026390;
TArray<FVector> FARPlaneGeometry::GetBoundaryPolygonInLocalSpace();


// Function  AugmentedReality.ARPlaneGeometry.GetCenter
// Offset::0x5026510;
FVector FARPlaneGeometry::GetCenter();


// Function  AugmentedReality.ARPlaneGeometry.GetExtent
// Offset::0x50264C0;
FVector FARPlaneGeometry::GetExtent();


// Function  AugmentedReality.ARPlaneGeometry.GetOrientation
// Offset::0x5026350;
enum class EARPlaneOrientation FARPlaneGeometry::GetOrientation();


// Function  AugmentedReality.ARPlaneGeometry.GetSubsumedBy
// Offset::0x5026370;
FARPlaneGeometry* FARPlaneGeometry::GetSubsumedBy();


// Function  AugmentedReality.ARTrackedImage.GetDetectedImage
// Offset::0x5026BB0;
FARCandidateImage* FARTrackedImage::GetDetectedImage();


// Function  AugmentedReality.ARTrackedImage.GetEstimateSize
// Offset::0x5026B60;
FVector2D FARTrackedImage::GetEstimateSize();


// Function  AugmentedReality.ARFaceGeometry.GetBlendShapes
// Offset::0x50273C0;
TMap<enum class EARFaceBlendShape,float> FARFaceGeometry::GetBlendShapes();


// Function  AugmentedReality.ARFaceGeometry.GetBlendShapeValue
// Offset::0x50274A0;
float FARFaceGeometry::GetBlendShapeValue(enum class EARFaceBlendShape BlendShape);


// Function  AugmentedReality.ARFaceGeometry.GetLocalSpaceEyeTransform
// Offset::0x50272F0;
FTransform FARFaceGeometry::GetLocalSpaceEyeTransform(enum class EAREye Eye);


// Function  AugmentedReality.ARFaceGeometry.GetWorldSpaceEyeTransform
// Offset::0x5027200;
FTransform FARFaceGeometry::GetWorldSpaceEyeTransform(enum class EAREye Eye);


// Function  AugmentedReality.AREnvironmentCaptureProbe.GetEnvironmentCaptureTexture
// Offset::0x5027A30;
FAREnvironmentCaptureProbeTexture* FAREnvironmentCaptureProbe::GetEnvironmentCaptureTexture();


// Function  AugmentedReality.AREnvironmentCaptureProbe.GetExtent
// Offset::0x5027A60;
FVector FAREnvironmentCaptureProbe::GetExtent();


// Function  AugmentedReality.ARTrackedObject.GetDetectedObject
// Offset::0x5026BB0;
FARCandidateObject* FARTrackedObject::GetDetectedObject();


// Function  AugmentedReality.ARTrackedPose.GetTrackedPoseData
// Offset::0x5028050;
FARPose3D FARTrackedPose::GetTrackedPoseData();


// Function  AugmentedReality.ARMeshGeometry.GetObjectClassificationAtLocation
// Offset::0x5028380;
bool FARMeshGeometry::GetObjectClassificationAtLocation(FVector InWorldLocation,enum class EARObjectClassification OutClassification,FVector OutClassificationLocation,float MaxLocationDiff);


// Function  AugmentedReality.ARGeoAnchor.GetAltitudeMeters
// Offset::0x5028800;
float FARGeoAnchor::GetAltitudeMeters();


// Function  AugmentedReality.ARGeoAnchor.GetAltitudeSource
// Offset::0x50287D0;
enum class EARAltitudeSource FARGeoAnchor::GetAltitudeSource();


// Function  AugmentedReality.ARGeoAnchor.GetLatitude
// Offset::0x5028830;
float FARGeoAnchor::GetLatitude();


// Function  AugmentedReality.ARGeoAnchor.GetLongitude
// Offset::0x5028860;
float FARGeoAnchor::GetLongitude();


// Function  AugmentedReality.ARCandidateImage.GetCandidateTexture
// Offset::0x22C1870;
FTexture2D* FARCandidateImage::GetCandidateTexture();


// Function  AugmentedReality.ARCandidateImage.GetFriendlyName
// Offset::0x5029670;
FString FARCandidateImage::GetFriendlyName();


// Function  AugmentedReality.ARCandidateImage.GetOrientation
// Offset::0x50295F0;
enum class EARCandidateImageOrientation FARCandidateImage::GetOrientation();


// Function  AugmentedReality.ARCandidateImage.GetPhysicalHeight
// Offset::0x5029610;
float FARCandidateImage::GetPhysicalHeight();


// Function  AugmentedReality.ARCandidateImage.GetPhysicalWidth
// Offset::0x5029640;
float FARCandidateImage::GetPhysicalWidth();


// Function  AugmentedReality.ARCandidateObject.GetBoundingBox
// Offset::0x5029BE0;
FBox FARCandidateObject::GetBoundingBox();


// Function  AugmentedReality.ARCandidateObject.GetCandidateObjectData
// Offset::0x5029EE0;
TArray<char> FARCandidateObject::GetCandidateObjectData();


// Function  AugmentedReality.ARCandidateObject.GetFriendlyName
// Offset::0x5029D10;
FString FARCandidateObject::GetFriendlyName();


// Function  AugmentedReality.ARCandidateObject.SetBoundingBox
// Offset::0x5029AF0;
void FARCandidateObject::SetBoundingBox(FBox InBoundingBox);


// Function  AugmentedReality.ARCandidateObject.SetCandidateObjectData
// Offset::0x5029D80;
void FARCandidateObject::SetCandidateObjectData(TArray<char> InCandidateObject);


// Function  AugmentedReality.ARCandidateObject.SetFriendlyName
// Offset::0x5029C20;
void FARCandidateObject::SetFriendlyName(FString NewName);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.BreakKey
// Offset::0x5042F40;
void FHeadMountedDisplayFunctionLibrary::BreakKey(FKey InKey,FString InteractionProfile,enum class EControllerHand Hand,FName MotionSource,FString Indentifier,FString Component);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.CalibrateExternalTrackingToHMD
// Offset::0x5044BB0;
void FHeadMountedDisplayFunctionLibrary::CalibrateExternalTrackingToHMD(FTransform ExternalTrackingTransform);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.ClearXRTimedInputActionDelegate
// Offset::0x5043850;
void FHeadMountedDisplayFunctionLibrary::ClearXRTimedInputActionDelegate(FName ActionPath);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.ConfigureGestures
// Offset::0x5043BD0;
bool FHeadMountedDisplayFunctionLibrary::ConfigureGestures(FXRGestureConfig GestureConfig);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.ConnectRemoteXRDevice
// Offset::0x5043AE0;
enum class EXRDeviceConnectionResult FHeadMountedDisplayFunctionLibrary::ConnectRemoteXRDevice(FString IpAddress,int32_t BitRate);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.DisconnectRemoteXRDevice
// Offset::0x5043AC0;
void FHeadMountedDisplayFunctionLibrary::DisconnectRemoteXRDevice();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.EnableHMD
// Offset::0x5045CD0;
bool FHeadMountedDisplayFunctionLibrary::EnableHMD(bool bEnable);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.EnableLowPersistenceMode
// Offset::0x5045200;
void FHeadMountedDisplayFunctionLibrary::EnableLowPersistenceMode(bool bEnable);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.EnumerateTrackedDevices
// Offset::0x50444B0;
TArray<FXRDeviceId> FHeadMountedDisplayFunctionLibrary::EnumerateTrackedDevices(FName SystemId,enum class EXRTrackedDeviceType DeviceType);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetControllerTransformForTime
// Offset::0x5043300;
bool FHeadMountedDisplayFunctionLibrary::GetControllerTransformForTime(FObject* WorldContext,int32_t ControllerIndex,FName MotionSource,FTimespan Time,bool bTimeWasUsed,FRotator Orientation,FVector Position,bool bProvidedLinearVelocity,FVector LinearVelocity,bool bProvidedAngularVelocity,FVector AngularVelocityRadPerSec,bool bProvidedLinearAcceleration,FVector LinearAcceleration);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetDevicePose
// Offset::0x50442A0;
void FHeadMountedDisplayFunctionLibrary::GetDevicePose(FXRDeviceId XRDeviceId,bool bIsTracked,FRotator Orientation,bool bHasPositionalTracking,FVector Position);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetDeviceWorldPose
// Offset::0x5044030;
void FHeadMountedDisplayFunctionLibrary::GetDeviceWorldPose(FObject* WorldContext,FXRDeviceId XRDeviceId,bool bIsTracked,FRotator Orientation,bool bHasPositionalTracking,FVector Position);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetHMDData
// Offset::0x5043E60;
void FHeadMountedDisplayFunctionLibrary::GetHMDData(FObject* WorldContext,FXRHMDData HMDData);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetHMDDeviceName
// Offset::0x5045C80;
FName FHeadMountedDisplayFunctionLibrary::GetHMDDeviceName();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetHMDWornState
// Offset::0x5045BA0;
enum class EHMDWornState FHeadMountedDisplayFunctionLibrary::GetHMDWornState();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetMotionControllerData
// Offset::0x5043C80;
void FHeadMountedDisplayFunctionLibrary::GetMotionControllerData(FObject* WorldContext,enum class EControllerHand Hand,FXRMotionControllerData MotionControllerData);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetNumOfTrackingSensors
// Offset::0x5045A50;
int32_t FHeadMountedDisplayFunctionLibrary::GetNumOfTrackingSensors();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetOrientationAndPosition
// Offset::0x5045AB0;
void FHeadMountedDisplayFunctionLibrary::GetOrientationAndPosition(FRotator DeviceRotation,FVector DevicePosition);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetPixelDensity
// Offset::0x5044FE0;
float FHeadMountedDisplayFunctionLibrary::GetPixelDensity();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetPlayAreaBounds
// Offset::0x5043260;
FVector2D FHeadMountedDisplayFunctionLibrary::GetPlayAreaBounds(enum class EHMDTrackingOrigin Origin);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetPositionalTrackingCameraParameters
// Offset::0x50452B0;
void FHeadMountedDisplayFunctionLibrary::GetPositionalTrackingCameraParameters(FVector CameraOrigin,FRotator CameraRotation,float HFOV,float VFOV,float CameraDistance,float NearPlane,float FarPlane);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetScreenPercentage
// Offset::0x5045010;
float FHeadMountedDisplayFunctionLibrary::GetScreenPercentage();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetTrackingOrigin
// Offset::0x5044D80;
enum class EHMDTrackingOrigin FHeadMountedDisplayFunctionLibrary::GetTrackingOrigin();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetTrackingSensorParameters
// Offset::0x5045580;
void FHeadMountedDisplayFunctionLibrary::GetTrackingSensorParameters(FVector Origin,FRotator Rotation,float LeftFOV,float RightFOV,float TopFOV,float BottomFOV,float Distance,float NearPlane,float FarPlane,bool IsActive,int32_t Index);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetTrackingToWorldTransform
// Offset::0x5044C90;
FTransform FHeadMountedDisplayFunctionLibrary::GetTrackingToWorldTransform(FObject* WorldContext);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetVersionString
// Offset::0x5045BD0;
FString FHeadMountedDisplayFunctionLibrary::GetVersionString();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetVRFocusState
// Offset::0x50449E0;
void FHeadMountedDisplayFunctionLibrary::GetVRFocusState(bool bUseFocus,bool bHasFocus);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetWorldToMetersScale
// Offset::0x5044E60;
float FHeadMountedDisplayFunctionLibrary::GetWorldToMetersScale(FObject* WorldContext);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.GetXRSystemFlags
// Offset::0x5045C50;
int32_t FHeadMountedDisplayFunctionLibrary::GetXRSystemFlags();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.HasValidTrackingPosition
// Offset::0x5045A80;
bool FHeadMountedDisplayFunctionLibrary::HasValidTrackingPosition();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.IsDeviceTracking
// Offset::0x5043F80;
bool FHeadMountedDisplayFunctionLibrary::IsDeviceTracking(FXRDeviceId XRDeviceId);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayConnected
// Offset::0x5045D70;
bool FHeadMountedDisplayFunctionLibrary::IsHeadMountedDisplayConnected();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayEnabled
// Offset::0x5045DA0;
bool FHeadMountedDisplayFunctionLibrary::IsHeadMountedDisplayEnabled();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.IsInLowPersistenceMode
// Offset::0x5045290;
bool FHeadMountedDisplayFunctionLibrary::IsInLowPersistenceMode();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.IsSpectatorScreenModeControllable
// Offset::0x50449B0;
bool FHeadMountedDisplayFunctionLibrary::IsSpectatorScreenModeControllable();


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.ResetOrientationAndPosition
// Offset::0x5045120;
void FHeadMountedDisplayFunctionLibrary::ResetOrientationAndPosition(float Yaw,enum class EOrientPositionSelector Options);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetClippingPlanes
// Offset::0x5045040;
void FHeadMountedDisplayFunctionLibrary::SetClippingPlanes(float Near,float Far);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetSpectatorScreenMode
// Offset::0x5044920;
void FHeadMountedDisplayFunctionLibrary::SetSpectatorScreenMode(enum class ESpectatorScreenMode Mode);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetSpectatorScreenModeTexturePlusEyeLayout
// Offset::0x50445D0;
void FHeadMountedDisplayFunctionLibrary::SetSpectatorScreenModeTexturePlusEyeLayout(FVector2D EyeRectMin,FVector2D EyeRectMax,FVector2D TextureRectMin,FVector2D TextureRectMax,bool bDrawEyeFirst,bool bClearBlack,bool bUseAlpha);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetSpectatorScreenTexture
// Offset::0x5044890;
void FHeadMountedDisplayFunctionLibrary::SetSpectatorScreenTexture(FTexture* InTexture);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetTrackingOrigin
// Offset::0x5044DD0;
void FHeadMountedDisplayFunctionLibrary::SetTrackingOrigin(enum class EHMDTrackingOrigin Origin);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetWorldToMetersScale
// Offset::0x5044F00;
void FHeadMountedDisplayFunctionLibrary::SetWorldToMetersScale(FObject* WorldContext,float NewScale);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetXRDisconnectDelegate
// Offset::0x5043A00;
void FHeadMountedDisplayFunctionLibrary::SetXRDisconnectDelegate(FDelegate InDisconnectedDelegate);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.SetXRTimedInputActionDelegate
// Offset::0x50438F0;
void FHeadMountedDisplayFunctionLibrary::SetXRTimedInputActionDelegate(FName ActionName,FDelegate InDelegate);


// Function  HeadMountedDisplay.HeadMountedDisplayFunctionLibrary.UpdateExternalTrackingHMDPosition
// Offset::0x5044AD0;
void FHeadMountedDisplayFunctionLibrary::UpdateExternalTrackingHMDPosition(FTransform ExternalTrackingTransform);


// Function  HeadMountedDisplay.HandKeypointConversion.Conv_HandKeypointToInt32
// Offset::0x5047B90;
int32_t FHandKeypointConversion::Conv_HandKeypointToInt32(enum class EHandKeypoint Input);


// Function  HeadMountedDisplay.MotionControllerComponent.GetHandJointPosition
// Offset::0x50480E0;
FVector FMotionControllerComponent::GetHandJointPosition(int32_t jointIndex,bool bValueFound);


// Function  HeadMountedDisplay.MotionControllerComponent.GetParameterValue
// Offset::0x50481F0;
float FMotionControllerComponent::GetParameterValue(FName InName,bool bValueFound);


// Function  HeadMountedDisplay.MotionControllerComponent.GetTrackingSource
// Offset::0x5048430;
enum class EControllerHand FMotionControllerComponent::GetTrackingSource();


// Function  HeadMountedDisplay.MotionControllerComponent.IsTracked
// Offset::0x50486D0;
bool FMotionControllerComponent::IsTracked();


// Function  HeadMountedDisplay.MotionControllerComponent.OnMotionControllerUpdated
// Offset::0x3D30810;
void FMotionControllerComponent::OnMotionControllerUpdated();


// Function  HeadMountedDisplay.MotionControllerComponent.SetAssociatedPlayerIndex
// Offset::0x50482F0;
void FMotionControllerComponent::SetAssociatedPlayerIndex(int32_t NewPlayer);


// Function  HeadMountedDisplay.MotionControllerComponent.SetCustomDisplayMesh
// Offset::0x50484F0;
void FMotionControllerComponent::SetCustomDisplayMesh(FStaticMesh* NewDisplayMesh);


// Function  HeadMountedDisplay.MotionControllerComponent.SetDisplayModelSource
// Offset::0x5048590;
void FMotionControllerComponent::SetDisplayModelSource(FName NewDisplayModelSource);


// Function  HeadMountedDisplay.MotionControllerComponent.SetShowDeviceModel
// Offset::0x5048630;
void FMotionControllerComponent::SetShowDeviceModel(bool bShowControllerModel);


// Function  HeadMountedDisplay.MotionControllerComponent.SetTrackingMotionSource
// Offset::0x5048390;
void FMotionControllerComponent::SetTrackingMotionSource(FName NewSource);


// Function  HeadMountedDisplay.MotionControllerComponent.SetTrackingSource
// Offset::0x5048460;
void FMotionControllerComponent::SetTrackingSource(enum class EControllerHand NewSource);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.DisableMotionTrackingForComponent
// Offset::0x50492F0;
void FMotionTrackedDeviceFunctionLibrary::DisableMotionTrackingForComponent(FMotionControllerComponent* MotionControllerComponent);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.DisableMotionTrackingOfAllControllers
// Offset::0x50492D0;
void FMotionTrackedDeviceFunctionLibrary::DisableMotionTrackingOfAllControllers();


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.DisableMotionTrackingOfControllersForPlayer
// Offset::0x5049240;
void FMotionTrackedDeviceFunctionLibrary::DisableMotionTrackingOfControllersForPlayer(int32_t PlayerIndex);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.DisableMotionTrackingOfDevice
// Offset::0x5049460;
void FMotionTrackedDeviceFunctionLibrary::DisableMotionTrackingOfDevice(int32_t PlayerIndex,enum class EControllerHand Hand);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.DisableMotionTrackingOfSource
// Offset::0x5049380;
void FMotionTrackedDeviceFunctionLibrary::DisableMotionTrackingOfSource(int32_t PlayerIndex,FName SourceName);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.EnableMotionTrackingForComponent
// Offset::0x5049540;
bool FMotionTrackedDeviceFunctionLibrary::EnableMotionTrackingForComponent(FMotionControllerComponent* MotionControllerComponent);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.EnableMotionTrackingOfDevice
// Offset::0x50496C0;
bool FMotionTrackedDeviceFunctionLibrary::EnableMotionTrackingOfDevice(int32_t PlayerIndex,enum class EControllerHand Hand);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.EnableMotionTrackingOfSource
// Offset::0x50495E0;
bool FMotionTrackedDeviceFunctionLibrary::EnableMotionTrackingOfSource(int32_t PlayerIndex,FName SourceName);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.EnumerateMotionSources
// Offset::0x50491C0;
TArray<FName> FMotionTrackedDeviceFunctionLibrary::EnumerateMotionSources();


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.GetActiveTrackingSystemName
// Offset::0x5049170;
FName FMotionTrackedDeviceFunctionLibrary::GetActiveTrackingSystemName();


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.GetMaximumMotionTrackedControllerCount
// Offset::0x5049A30;
int32_t FMotionTrackedDeviceFunctionLibrary::GetMaximumMotionTrackedControllerCount();


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.GetMotionTrackingEnabledControllerCount
// Offset::0x5049A00;
int32_t FMotionTrackedDeviceFunctionLibrary::GetMotionTrackingEnabledControllerCount();


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.IsMotionSourceTracking
// Offset::0x5049090;
bool FMotionTrackedDeviceFunctionLibrary::IsMotionSourceTracking(int32_t PlayerIndex,FName SourceName);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.IsMotionTrackedDeviceCountManagementNecessary
// Offset::0x5049AF0;
bool FMotionTrackedDeviceFunctionLibrary::IsMotionTrackedDeviceCountManagementNecessary();


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.IsMotionTrackingEnabledForComponent
// Offset::0x50497A0;
bool FMotionTrackedDeviceFunctionLibrary::IsMotionTrackingEnabledForComponent(FMotionControllerComponent* MotionControllerComponent);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.IsMotionTrackingEnabledForDevice
// Offset::0x5049920;
bool FMotionTrackedDeviceFunctionLibrary::IsMotionTrackingEnabledForDevice(int32_t PlayerIndex,enum class EControllerHand Hand);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.IsMotionTrackingEnabledForSource
// Offset::0x5049840;
bool FMotionTrackedDeviceFunctionLibrary::IsMotionTrackingEnabledForSource(int32_t PlayerIndex,FName SourceName);


// Function  HeadMountedDisplay.MotionTrackedDeviceFunctionLibrary.SetIsControllerMotionTrackingEnabledByDefault
// Offset::0x5049A60;
void FMotionTrackedDeviceFunctionLibrary::SetIsControllerMotionTrackingEnabledByDefault(bool Enable);


// Function  HeadMountedDisplay.XRAssetFunctionLibrary.AddDeviceVisualizationComponentBlocking
// Offset::0x504AA20;
FPrimitiveComponent* FXRAssetFunctionLibrary::AddDeviceVisualizationComponentBlocking(FActor* Target,FXRDeviceId XRDeviceId,bool bManualAttachment,FTransform RelativeTransform);


// Function  HeadMountedDisplay.XRAssetFunctionLibrary.AddNamedDeviceVisualizationComponentBlocking
// Offset::0x504A760;
FPrimitiveComponent* FXRAssetFunctionLibrary::AddNamedDeviceVisualizationComponentBlocking(FActor* Target,FName SystemName,FName DeviceName,bool bManualAttachment,FTransform RelativeTransform,FXRDeviceId XRDeviceId);


// Function  HeadMountedDisplay.AsyncTask_LoadXRDeviceVisComponent.AddDeviceVisualizationComponentAsync
// Offset::0x504AF20;
FAsyncTask_LoadXRDeviceVisComponent* FAsyncTask_LoadXRDeviceVisComponent::AddDeviceVisualizationComponentAsync(FActor* Target,FXRDeviceId XRDeviceId,bool bManualAttachment,FTransform RelativeTransform,FPrimitiveComponent* NewComponent);


// Function  HeadMountedDisplay.AsyncTask_LoadXRDeviceVisComponent.AddNamedDeviceVisualizationComponentAsync
// Offset::0x504B190;
FAsyncTask_LoadXRDeviceVisComponent* FAsyncTask_LoadXRDeviceVisComponent::AddNamedDeviceVisualizationComponentAsync(FActor* Target,FName SystemName,FName DeviceName,bool bManualAttachment,FTransform RelativeTransform,FXRDeviceId XRDeviceId,FPrimitiveComponent* NewComponent);


// Function  HeadMountedDisplay.XRLoadingScreenFunctionLibrary.AddLoadingScreenSplash
// Offset::0x504B8E0;
void FXRLoadingScreenFunctionLibrary::AddLoadingScreenSplash(FTexture* Texture,FVector Translation,FRotator Rotation,FVector2D Size,FRotator DeltaRotation,bool bClearBeforeAdd);


// Function  HeadMountedDisplay.XRLoadingScreenFunctionLibrary.ClearLoadingScreenSplashes
// Offset::0x504BB70;
void FXRLoadingScreenFunctionLibrary::ClearLoadingScreenSplashes();


// Function  HeadMountedDisplay.XRLoadingScreenFunctionLibrary.HideLoadingScreen
// Offset::0x504B8A0;
void FXRLoadingScreenFunctionLibrary::HideLoadingScreen();


// Function  HeadMountedDisplay.XRLoadingScreenFunctionLibrary.SetLoadingScreen
// Offset::0x504BB90;
void FXRLoadingScreenFunctionLibrary::SetLoadingScreen(FTexture* Texture,FVector2D Scale,FVector Offset,bool bShowLoadingMovie,bool bShowOnSet);


// Function  HeadMountedDisplay.XRLoadingScreenFunctionLibrary.ShowLoadingScreen
// Offset::0x504B8C0;
void FXRLoadingScreenFunctionLibrary::ShowLoadingScreen();


// Function  TypedElementFramework.TestTypedElementInterfaceA.GetDisplayName
// Offset::0x52E7040;
FText FTestTypedElementInterfaceA::GetDisplayName(FScriptTypedElementHandle InElementHandle);


// Function  TypedElementFramework.TestTypedElementInterfaceA.SetDisplayName
// Offset::0x52E6E80;
bool FTestTypedElementInterfaceA::SetDisplayName(FScriptTypedElementHandle InElementHandle,FText InNewName,bool bNotify);


// Function  TypedElementFramework.TestTypedElementInterfaceB.MarkAsTested
// Offset::0x52E7480;
bool FTestTypedElementInterfaceB::MarkAsTested(FScriptTypedElementHandle InElementHandle);


// Function  TypedElementFramework.TestTypedElementInterfaceC.GetIsTested
// Offset::0x52E7480;
bool FTestTypedElementInterfaceC::GetIsTested(FScriptTypedElementHandle InElementHandle);


// Function  TypedElementFramework.TypedElementHandleLibrary.Equal
// Offset::0x52E7F30;
bool FTypedElementHandleLibrary::Equal(FScriptTypedElementHandle Lhs,FScriptTypedElementHandle Rhs);


// Function  TypedElementFramework.TypedElementHandleLibrary.IsSet
// Offset::0x52E8170;
bool FTypedElementHandleLibrary::IsSet(FScriptTypedElementHandle ElementHandle);


// Function  TypedElementFramework.TypedElementHandleLibrary.NotEqual
// Offset::0x52E7DF0;
bool FTypedElementHandleLibrary::NotEqual(FScriptTypedElementHandle Lhs,FScriptTypedElementHandle Rhs);


// Function  TypedElementFramework.TypedElementHandleLibrary.Release
// Offset::0x52E8060;
void FTypedElementHandleLibrary::Release(FScriptTypedElementHandle ElementHandle);


// Function  TypedElementFramework.TypedElementListLibrary.Add
// Offset::0x52E8DA0;
bool FTypedElementListLibrary::Add(FScriptTypedElementListProxy ElementList,FScriptTypedElementHandle ElementHandle);


// Function  TypedElementFramework.TypedElementListLibrary.Append
// Offset::0x52E8B50;
void FTypedElementListLibrary::Append(FScriptTypedElementListProxy ElementList,TArray<FScriptTypedElementHandle> ElementHandles);


// Function  TypedElementFramework.TypedElementListLibrary.AppendList
// Offset::0x52E8870;
void FTypedElementListLibrary::AppendList(FScriptTypedElementListProxy ElementList,FScriptTypedElementListProxy OtherElementList);


// Function  TypedElementFramework.TypedElementListLibrary.Clone
// Offset::0x52EAF00;
FScriptTypedElementListProxy FTypedElementListLibrary::Clone(FScriptTypedElementListProxy ElementList);


// Function  TypedElementFramework.TypedElementListLibrary.Contains
// Offset::0x52E8FC0;
bool FTypedElementListLibrary::Contains(FScriptTypedElementListProxy ElementList,FScriptTypedElementHandle ElementHandle);


// Function  TypedElementFramework.TypedElementListLibrary.CountElements
// Offset::0x52EA570;
int32_t FTypedElementListLibrary::CountElements(FScriptTypedElementListProxy ElementList,FInterface* BaseInterfaceType);


// Function  TypedElementFramework.TypedElementListLibrary.CountElementsOfType
// Offset::0x52EA150;
int32_t FTypedElementListLibrary::CountElementsOfType(FScriptTypedElementListProxy ElementList,FName ElementTypeName);


// Function  TypedElementFramework.TypedElementListLibrary.CreateScriptElementList
// Offset::0x52EB170;
FScriptTypedElementListProxy FTypedElementListLibrary::CreateScriptElementList(FTypedElementRegistry* Registry);


// Function  TypedElementFramework.TypedElementListLibrary.Empty
// Offset::0x52E93F0;
void FTypedElementListLibrary::Empty(FScriptTypedElementListProxy ElementList,int32_t Slack);


// Function  TypedElementFramework.TypedElementListLibrary.GetElementHandleAt
// Offset::0x52EACD0;
FScriptTypedElementHandle FTypedElementListLibrary::GetElementHandleAt(FScriptTypedElementListProxy ElementList,int32_t Index);


// Function  TypedElementFramework.TypedElementListLibrary.GetElementHandles
// Offset::0x52E9E90;
TArray<FScriptTypedElementHandle> FTypedElementListLibrary::GetElementHandles(FScriptTypedElementListProxy ElementList,FInterface* BaseInterfaceType);


// Function  TypedElementFramework.TypedElementListLibrary.GetElementInterface
// Offset::0x52EAA10;
FObject* FTypedElementListLibrary::GetElementInterface(FScriptTypedElementListProxy ElementList,FScriptTypedElementHandle ElementHandle,FInterface* BaseInterfaceType);


// Function  TypedElementFramework.TypedElementListLibrary.HasElements
// Offset::0x52EA7C0;
bool FTypedElementListLibrary::HasElements(FScriptTypedElementListProxy ElementList,FInterface* BaseInterfaceType);


// Function  TypedElementFramework.TypedElementListLibrary.HasElementsOfType
// Offset::0x52EA360;
bool FTypedElementListLibrary::HasElementsOfType(FScriptTypedElementListProxy ElementList,FName ElementTypeName);


// Function  TypedElementFramework.TypedElementListLibrary.IsValidIndex
// Offset::0x52E9C80;
bool FTypedElementListLibrary::IsValidIndex(FScriptTypedElementListProxy ElementList,int32_t Index);


// Function  TypedElementFramework.TypedElementListLibrary.Num
// Offset::0x52E9AC0;
int32_t FTypedElementListLibrary::Num(FScriptTypedElementListProxy ElementList);


// Function  TypedElementFramework.TypedElementListLibrary.Remove
// Offset::0x52E8660;
bool FTypedElementListLibrary::Remove(FScriptTypedElementListProxy ElementList,FScriptTypedElementHandle ElementHandle);


// Function  TypedElementFramework.TypedElementListLibrary.Reserve
// Offset::0x52E96A0;
void FTypedElementListLibrary::Reserve(FScriptTypedElementListProxy ElementList,int32_t Size);


// Function  TypedElementFramework.TypedElementListLibrary.Reset
// Offset::0x52E91D0;
void FTypedElementListLibrary::Reset(FScriptTypedElementListProxy ElementList);


// Function  TypedElementFramework.TypedElementListLibrary.Shrink
// Offset::0x52E98D0;
void FTypedElementListLibrary::Shrink(FScriptTypedElementListProxy ElementList);


// Function  TypedElementFramework.TypedElementRegistry.GetElementInterface
// Offset::0x52EC0A0;
FObject* FTypedElementRegistry::GetElementInterface(FScriptTypedElementHandle InElementHandle,FInterface* InBaseInterfaceType);


// Function  TypedElementFramework.TypedElementRegistry.GetInstance
// Offset::0x52EC260;
FTypedElementRegistry* FTypedElementRegistry::GetInstance();


// Function  Foliage.FoliageStatistics.FoliageOverlappingBoxCount
// Offset::0x52F8CC0;
int32_t FFoliageStatistics::FoliageOverlappingBoxCount(FObject* WorldContextObject,FStaticMesh* StaticMesh,FBox Box);


// Function  Foliage.FoliageStatistics.FoliageOverlappingBoxTransforms
// Offset::0x52F8AE0;
void FFoliageStatistics::FoliageOverlappingBoxTransforms(FObject* WorldContextObject,FStaticMesh* StaticMesh,FBox Box,TArray<FTransform> OutTransforms);


// Function  Foliage.FoliageStatistics.FoliageOverlappingSphereCount
// Offset::0x52F8E40;
int32_t FFoliageStatistics::FoliageOverlappingSphereCount(FObject* WorldContextObject,FStaticMesh* StaticMesh,FVector CenterPosition,float Radius);


// Function  Engine.StaticMeshActor.SetMobility
// Offset::0x653FA10;
void FStaticMeshActor::SetMobility(enum class EComponentMobility InMobility);


// Function  Foliage.InteractiveFoliageActor.CapsuleTouched
// Offset::0x52F9CD0;
void FInteractiveFoliageActor::CapsuleTouched(FPrimitiveComponent* OverlappedComp,FActor* Other,FPrimitiveComponent* OtherComp,int32_t OtherBodyIndex,bool bFromSweep,FHitResult OverlapInfo);


// Function  Foliage.ProceduralFoliageSpawner.Simulate
// Offset::0x52FA860;
void FProceduralFoliageSpawner::Simulate(int32_t NumSteps);


// Function  Landscape.LandscapeProxy.ChangeComponentScreenSizeToUseSubSections
// Offset::0x53433E0;
void FLandscapeProxy::ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);


// Function  Landscape.LandscapeProxy.ChangeLODDistanceFactor
// Offset::0x5343480;
void FLandscapeProxy::ChangeLODDistanceFactor(float InLODDistanceFactor);


// Function  Landscape.LandscapeProxy.EditorApplySpline
// Offset::0x5342F50;
void FLandscapeProxy::EditorApplySpline(FSplineComponent* InSplineComponent,float StartWidth,float EndWidth,float StartSideFalloff,float EndSideFalloff,float StartRoll,float EndRoll,int32_t NumSubdivisions,bool bRaiseHeights,bool bLowerHeights,FLandscapeLayerInfoObject* PaintLayer,FName EditLayerName);


// Function  Landscape.LandscapeProxy.EditorSetLandscapeMaterial
// Offset::0x33C4200;
void FLandscapeProxy::EditorSetLandscapeMaterial(FMaterialInterface* NewLandscapeMaterial);


// Function  Landscape.LandscapeProxy.LandscapeExportHeightmapToRenderTarget
// Offset::0x5342B60;
bool FLandscapeProxy::LandscapeExportHeightmapToRenderTarget(FTextureRenderTarget2D* InRenderTarget,bool InExportHeightIntoRGChannel,bool InExportLandscapeProxies);


// Function  Landscape.LandscapeProxy.SetLandscapeMaterialScalarParameterValue
// Offset::0x5342CA0;
void FLandscapeProxy::SetLandscapeMaterialScalarParameterValue(FName ParameterName,float Value);


// Function  Landscape.LandscapeProxy.SetLandscapeMaterialTextureParameterValue
// Offset::0x5342E70;
void FLandscapeProxy::SetLandscapeMaterialTextureParameterValue(FName ParameterName,FTexture* Value);


// Function  Landscape.LandscapeProxy.SetLandscapeMaterialVectorParameterValue
// Offset::0x5342D80;
void FLandscapeProxy::SetLandscapeMaterialVectorParameterValue(FName ParameterName,FLinearColor Value);


// Function  Landscape.LandscapeBlueprintBrushBase.GetBlueprintRenderDependencies
// Offset::0x3D30810;
void FLandscapeBlueprintBrushBase::GetBlueprintRenderDependencies(TArray<FObject*> OutStreamableAssets);


// Function  Landscape.LandscapeBlueprintBrushBase.Initialize
// Offset::0x533F340;
void FLandscapeBlueprintBrushBase::Initialize(FTransform InLandscapeTransform,FIntPoint InLandscapeSize,FIntPoint InLandscapeRenderTargetSize);


// Function  Landscape.LandscapeBlueprintBrushBase.Render
// Offset::0x533F4D0;
FTextureRenderTarget2D* FLandscapeBlueprintBrushBase::Render(bool InIsHeightmap,FTextureRenderTarget2D* InCombinedResult,FName InWeightmapLayerName);


// Function  Landscape.LandscapeBlueprintBrushBase.RequestLandscapeUpdate
// Offset::0x1B91E70;
void FLandscapeBlueprintBrushBase::RequestLandscapeUpdate();


// Function  Landscape.LandscapeComponent.EditorGetPaintLayerWeightAtLocation
// Offset::0x533FFE0;
float FLandscapeComponent::EditorGetPaintLayerWeightAtLocation(FVector InLocation,FLandscapeLayerInfoObject* PaintLayer);


// Function  Landscape.LandscapeComponent.EditorGetPaintLayerWeightByNameAtLocation
// Offset::0x533FEE0;
float FLandscapeComponent::EditorGetPaintLayerWeightByNameAtLocation(FVector InLocation,FName InPaintLayerName);


// Function  Landscape.LandscapeComponent.GetMaterialInstanceDynamic
// Offset::0x53400E0;
FMaterialInstanceDynamic* FLandscapeComponent::GetMaterialInstanceDynamic(int32_t InIndex);


// Function  Landscape.LandscapeHeightfieldCollisionComponent.GetRenderComponent
// Offset::0x5341B70;
FLandscapeComponent* FLandscapeHeightfieldCollisionComponent::GetRenderComponent();


// Function  Engine.MaterialInterface.GetBaseMaterial
// Offset::0x6490E80;
FMaterial* FMaterialInterface::GetBaseMaterial();


// Function  Engine.MaterialInterface.GetParameterInfo
// Offset::0x6490CA0;
FMaterialParameterInfo FMaterialInterface::GetParameterInfo(enum class EMaterialParameterAssociation Association,FName ParameterName,FMaterialFunctionInterface* LayerFunction);


// Function  Engine.MaterialInterface.GetPhysicalMaterial
// Offset::0x26D2310;
FPhysicalMaterial* FMaterialInterface::GetPhysicalMaterial();


// Function  Engine.MaterialInterface.GetPhysicalMaterialFromMap
// Offset::0x6490DE0;
FPhysicalMaterial* FMaterialInterface::GetPhysicalMaterialFromMap(int32_t Index);


// Function  Engine.MaterialInterface.GetPhysicalMaterialMask
// Offset::0x26D2340;
FPhysicalMaterialMask* FMaterialInterface::GetPhysicalMaterialMask();


// Function  Engine.MaterialInterface.SetForceMipLevelsToBeResident
// Offset::0x6490AC0;
void FMaterialInterface::SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident,bool bForceMiplevelsToBeResidentValue,float ForceDuration,int32_t CinematicTextureGroups,bool bFastResponse);


// Function  Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
// Offset::0x648E980;
float FMaterialInstanceConstant::K2_GetScalarParameterValue(FName ParameterName);


// Function  Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
// Offset::0x648E8E0;
FTexture* FMaterialInstanceConstant::K2_GetTextureParameterValue(FName ParameterName);


// Function  Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
// Offset::0x648E830;
FLinearColor FMaterialInstanceConstant::K2_GetVectorParameterValue(FName ParameterName);


// Function  Landscape.LandscapeSplinesComponent.GetSplineMeshComponents
// Offset::0x5344AA0;
TArray<FSplineMeshComponent*> FLandscapeSplinesComponent::GetSplineMeshComponents();


// Function  Engine.TimecodeProvider.FetchAndUpdate
// Offset::0x1A7E910;
void FTimecodeProvider::FetchAndUpdate();


// Function  Engine.TimecodeProvider.FetchTimecode
// Offset::0x654A240;
bool FTimecodeProvider::FetchTimecode(FQualifiedFrameTime OutFrameTime);


// Function  Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
// Offset::0x654A190;
FQualifiedFrameTime FTimecodeProvider::GetDelayedQualifiedFrameTime();


// Function  Engine.TimecodeProvider.GetDelayedTimecode
// Offset::0x654A0D0;
FTimecode FTimecodeProvider::GetDelayedTimecode();


// Function  Engine.TimecodeProvider.GetFrameRate
// Offset::0x654A020;
FFrameRate FTimecodeProvider::GetFrameRate();


// Function  Engine.TimecodeProvider.GetQualifiedFrameTime
// Offset::0x654A1E0;
FQualifiedFrameTime FTimecodeProvider::GetQualifiedFrameTime();


// Function  Engine.TimecodeProvider.GetSynchronizationState
// Offset::0x2870F70;
enum class ETimecodeProviderSynchronizationState FTimecodeProvider::GetSynchronizationState();


// Function  Engine.TimecodeProvider.GetTimecode
// Offset::0x654A130;
FTimecode FTimecodeProvider::GetTimecode();


// Function  TimeManagement.TimeManagementBlueprintLibrary.Add_FrameNumberFrameNumber
// Offset::0x5349A40;
FFrameNumber FTimeManagementBlueprintLibrary::Add_FrameNumberFrameNumber(FFrameNumber A,FFrameNumber B);


// Function  TimeManagement.TimeManagementBlueprintLibrary.Add_FrameNumberInteger
// Offset::0x5349860;
FFrameNumber FTimeManagementBlueprintLibrary::Add_FrameNumberInteger(FFrameNumber A,int32_t B);


// Function  TimeManagement.TimeManagementBlueprintLibrary.Conv_FrameNumberToInteger
// Offset::0x53494F0;
int32_t FTimeManagementBlueprintLibrary::Conv_FrameNumberToInteger(FFrameNumber InFrameNumber);


// Function  TimeManagement.TimeManagementBlueprintLibrary.Conv_FrameRateToSeconds
// Offset::0x534A2C0;
float FTimeManagementBlueprintLibrary::Conv_FrameRateToSeconds(FFrameRate InFrameRate);


// Function  TimeManagement.TimeManagementBlueprintLibrary.Conv_QualifiedFrameTimeToSeconds
// Offset::0x534A210;
float FTimeManagementBlueprintLibrary::Conv_QualifiedFrameTimeToSeconds(FQualifiedFrameTime InFrameTime);


// Function  TimeManagement.TimeManagementBlueprintLibrary.Conv_TimecodeToString
// Offset::0x5349FD0;
FString FTimeManagementBlueprintLibrary::Conv_TimecodeToString(FTimecode InTimecode,bool bForceSignDisplay);


// Function  TimeManagement.TimeManagementBlueprintLibrary.Divide_FrameNumberInteger
// Offset::0x5349590;
FFrameNumber FTimeManagementBlueprintLibrary::Divide_FrameNumberInteger(FFrameNumber A,int32_t B);


// Function  TimeManagement.TimeManagementBlueprintLibrary.GetTimecode
// Offset::0x5349490;
FTimecode FTimeManagementBlueprintLibrary::GetTimecode();


// Function  TimeManagement.TimeManagementBlueprintLibrary.GetTimecodeFrameRate
// Offset::0x5349440;
FFrameRate FTimeManagementBlueprintLibrary::GetTimecodeFrameRate();


// Function  TimeManagement.TimeManagementBlueprintLibrary.IsValid_Framerate
// Offset::0x5349F20;
bool FTimeManagementBlueprintLibrary::IsValid_Framerate(FFrameRate InFrameRate);


// Function  TimeManagement.TimeManagementBlueprintLibrary.IsValid_MultipleOf
// Offset::0x5349E10;
bool FTimeManagementBlueprintLibrary::IsValid_MultipleOf(FFrameRate InFrameRate,FFrameRate OtherFramerate);


// Function  TimeManagement.TimeManagementBlueprintLibrary.Multiply_FrameNumberInteger
// Offset::0x5349680;
FFrameNumber FTimeManagementBlueprintLibrary::Multiply_FrameNumberInteger(FFrameNumber A,int32_t B);


// Function  TimeManagement.TimeManagementBlueprintLibrary.Multiply_SecondsFrameRate
// Offset::0x534A110;
FFrameTime FTimeManagementBlueprintLibrary::Multiply_SecondsFrameRate(float TimeInSeconds,FFrameRate FrameRate);


// Function  TimeManagement.TimeManagementBlueprintLibrary.SnapFrameTimeToRate
// Offset::0x5349B30;
FFrameTime FTimeManagementBlueprintLibrary::SnapFrameTimeToRate(FFrameTime SourceTime,FFrameRate SourceRate,FFrameRate SnapToRate);


// Function  TimeManagement.TimeManagementBlueprintLibrary.Subtract_FrameNumberFrameNumber
// Offset::0x5349950;
FFrameNumber FTimeManagementBlueprintLibrary::Subtract_FrameNumberFrameNumber(FFrameNumber A,FFrameNumber B);


// Function  TimeManagement.TimeManagementBlueprintLibrary.Subtract_FrameNumberInteger
// Offset::0x5349770;
FFrameNumber FTimeManagementBlueprintLibrary::Subtract_FrameNumberInteger(FFrameNumber A,int32_t B);


// Function  TimeManagement.TimeManagementBlueprintLibrary.TransformTime
// Offset::0x5349CA0;
FFrameTime FTimeManagementBlueprintLibrary::TransformTime(FFrameTime SourceTime,FFrameRate SourceRate,FFrameRate DestinationRate);


// Function  MovieScene.MovieSceneCustomClockSource.OnRequestCurrentTime
// Offset::0x53F43B0;
FFrameTime FMovieSceneCustomClockSource::OnRequestCurrentTime(FQualifiedFrameTime InCurrentTime,float InPlayRate);


// Function  MovieScene.MovieSceneCustomClockSource.OnStartPlaying
// Offset::0x53F4570;
void FMovieSceneCustomClockSource::OnStartPlaying(FQualifiedFrameTime InStartTime);


// Function  MovieScene.MovieSceneCustomClockSource.OnStopPlaying
// Offset::0x53F44C0;
void FMovieSceneCustomClockSource::OnStopPlaying(FQualifiedFrameTime InStopTime);


// Function  MovieScene.MovieSceneCustomClockSource.OnTick
// Offset::0x53F4620;
void FMovieSceneCustomClockSource::OnTick(float DeltaSeconds,float InPlayRate);


// Function  MovieScene.MovieSceneEasingFunction.OnEvaluate
// Offset::0x3D30810;
float FMovieSceneEasingFunction::OnEvaluate(float Interp);


// Function  AnimGraphRuntime.AnimationStateMachineLibrary.ConvertToAnimationStateResult
// Offset::0x5475260;
void FAnimationStateMachineLibrary::ConvertToAnimationStateResult(FAnimNodeReference Node,FAnimationStateResultReference AnimationState,enum class EAnimNodeReferenceConversionResult Result);


// Function  AnimGraphRuntime.AnimationStateMachineLibrary.ConvertToAnimationStateResultPure
// Offset::0x54750C0;
void FAnimationStateMachineLibrary::ConvertToAnimationStateResultPure(FAnimNodeReference Node,FAnimationStateResultReference AnimationState,bool Result);


// Function  AnimGraphRuntime.AnimationStateMachineLibrary.IsStateBlendingIn
// Offset::0x5474FA0;
bool FAnimationStateMachineLibrary::IsStateBlendingIn(FAnimUpdateContext UpdateContext,FAnimationStateResultReference Node);


// Function  AnimGraphRuntime.AnimationStateMachineLibrary.IsStateBlendingOut
// Offset::0x5474E80;
bool FAnimationStateMachineLibrary::IsStateBlendingOut(FAnimUpdateContext UpdateContext,FAnimationStateResultReference Node);


// Function  AnimGraphRuntime.AnimExecutionContextLibrary.ConvertToComponentSpacePoseContext
// Offset::0x54757B0;
FAnimComponentSpacePoseContext FAnimExecutionContextLibrary::ConvertToComponentSpacePoseContext(FAnimExecutionContext Context,enum class EAnimExecutionContextConversionResult Result);


// Function  AnimGraphRuntime.AnimExecutionContextLibrary.ConvertToInitializationContext
// Offset::0x5475D80;
FAnimInitializationContext FAnimExecutionContextLibrary::ConvertToInitializationContext(FAnimExecutionContext Context,enum class EAnimExecutionContextConversionResult Result);


// Function  AnimGraphRuntime.AnimExecutionContextLibrary.ConvertToPoseContext
// Offset::0x5475920;
FAnimPoseContext FAnimExecutionContextLibrary::ConvertToPoseContext(FAnimExecutionContext Context,enum class EAnimExecutionContextConversionResult Result);


// Function  AnimGraphRuntime.AnimExecutionContextLibrary.ConvertToUpdateContext
// Offset::0x5475C10;
FAnimUpdateContext FAnimExecutionContextLibrary::ConvertToUpdateContext(FAnimExecutionContext Context,enum class EAnimExecutionContextConversionResult Result);


// Function  AnimGraphRuntime.AnimExecutionContextLibrary.GetAnimInstance
// Offset::0x5475FE0;
FAnimInstance* FAnimExecutionContextLibrary::GetAnimInstance(FAnimExecutionContext Context);


// Function  AnimGraphRuntime.AnimExecutionContextLibrary.GetAnimNodeReference
// Offset::0x5475EF0;
FAnimNodeReference FAnimExecutionContextLibrary::GetAnimNodeReference(FAnimInstance* Instance,int32_t Index);


// Function  AnimGraphRuntime.AnimExecutionContextLibrary.GetCurrentWeight
// Offset::0x5475A90;
float FAnimExecutionContextLibrary::GetCurrentWeight(FAnimUpdateContext Context);


// Function  AnimGraphRuntime.AnimExecutionContextLibrary.GetDeltaTime
// Offset::0x5475B50;
float FAnimExecutionContextLibrary::GetDeltaTime(FAnimUpdateContext Context);


// Function  AnimGraphRuntime.BoneWeightsAsset.MarkWeightsChanged
// Offset::0x547ACF0;
void FBoneWeightsAsset::MarkWeightsChanged();


// Function  AnimGraphRuntime.BoneWeightsAsset.OnTargetSkeletonHierarchyChanged
// Offset::0x547ACD0;
void FBoneWeightsAsset::OnTargetSkeletonHierarchyChanged();


// Function  AnimGraphRuntime.BoneWeightsAsset.SetWeightForBone
// Offset::0x547ABF0;
void FBoneWeightsAsset::SetWeightForBone(FName BoneName,float Weight);


// Function  AnimGraphRuntime.KismetAnimationLibrary.CalculateDirection
// Offset::0x5488A50;
float FKismetAnimationLibrary::CalculateDirection(FVector Velocity,FRotator BaseRotation);


// Function  AnimGraphRuntime.KismetAnimationLibrary.K2_CalculateVelocityFromPositionHistory
// Offset::0x5489190;
float FKismetAnimationLibrary::K2_CalculateVelocityFromPositionHistory(float DeltaSeconds,FVector Position,FPositionHistory History,int32_t NumberOfSamples,float VelocityMin,float VelocityMax);


// Function  AnimGraphRuntime.KismetAnimationLibrary.K2_CalculateVelocityFromSockets
// Offset::0x5488C60;
float FKismetAnimationLibrary::K2_CalculateVelocityFromSockets(float DeltaSeconds,FSkeletalMeshComponent* Component,FName SocketOrBoneName,FName ReferenceSocketOrBone,enum class ERelativeTransformSpace SocketSpace,FVector OffsetInBoneSpace,FPositionHistory History,int32_t NumberOfSamples,float VelocityMin,float VelocityMax,enum class EEasingFuncType EasingType,FRuntimeFloatCurve CustomCurve);


// Function  AnimGraphRuntime.KismetAnimationLibrary.K2_DirectionBetweenSockets
// Offset::0x5489920;
FVector FKismetAnimationLibrary::K2_DirectionBetweenSockets(FSkeletalMeshComponent* Component,FName SocketOrBoneNameFrom,FName SocketOrBoneNameTo);


// Function  AnimGraphRuntime.KismetAnimationLibrary.K2_DistanceBetweenTwoSocketsAndMapRange
// Offset::0x5489A60;
float FKismetAnimationLibrary::K2_DistanceBetweenTwoSocketsAndMapRange(FSkeletalMeshComponent* Component,FName SocketOrBoneNameA,enum class ERelativeTransformSpace SocketSpaceA,FName SocketOrBoneNameB,enum class ERelativeTransformSpace SocketSpaceB,bool bRemapRange,float InRangeMin,float InRangeMax,float OutRangeMin,float OutRangeMax);


// Function  AnimGraphRuntime.KismetAnimationLibrary.K2_EndProfilingTimer
// Offset::0x5488B40;
float FKismetAnimationLibrary::K2_EndProfilingTimer(bool bLog,FString LogPrefix);


// Function  AnimGraphRuntime.KismetAnimationLibrary.K2_LookAt
// Offset::0x5489DE0;
FTransform FKismetAnimationLibrary::K2_LookAt(FTransform CurrentTransform,FVector TargetPosition,FVector LookAtVector,bool bUseUpVector,FVector UpVector,float ClampConeInDegree);


// Function  AnimGraphRuntime.KismetAnimationLibrary.K2_MakePerlinNoiseAndRemap
// Offset::0x5489430;
float FKismetAnimationLibrary::K2_MakePerlinNoiseAndRemap(float Value,float RangeOutMin,float RangeOutMax);


// Function  AnimGraphRuntime.KismetAnimationLibrary.K2_MakePerlinNoiseVectorAndRemap
// Offset::0x5489560;
FVector FKismetAnimationLibrary::K2_MakePerlinNoiseVectorAndRemap(float X,float Y,float Z,float RangeOutMinX,float RangeOutMaxX,float RangeOutMinY,float RangeOutMaxY,float RangeOutMinZ,float RangeOutMaxZ);


// Function  AnimGraphRuntime.KismetAnimationLibrary.K2_StartProfilingTimer
// Offset::0x5488C40;
void FKismetAnimationLibrary::K2_StartProfilingTimer();


// Function  AnimGraphRuntime.KismetAnimationLibrary.K2_TwoBoneIK
// Offset::0x548A110;
void FKismetAnimationLibrary::K2_TwoBoneIK(FVector RootPos,FVector JointPos,FVector EndPos,FVector JointTarget,FVector Effector,FVector OutJointPos,FVector OutEndPos,bool bAllowStretching,float StartStretchRatio,float MaxStretchScale);


// Function  AnimGraphRuntime.LinkedAnimGraphLibrary.ConvertToLinkedAnimGraph
// Offset::0x548B0F0;
FLinkedAnimGraphReference FLinkedAnimGraphLibrary::ConvertToLinkedAnimGraph(FAnimNodeReference Node,enum class EAnimNodeReferenceConversionResult Result);


// Function  AnimGraphRuntime.LinkedAnimGraphLibrary.ConvertToLinkedAnimGraphPure
// Offset::0x548AF20;
void FLinkedAnimGraphLibrary::ConvertToLinkedAnimGraphPure(FAnimNodeReference Node,FLinkedAnimGraphReference LinkedAnimGraph,bool Result);


// Function  AnimGraphRuntime.LinkedAnimGraphLibrary.GetLinkedAnimInstance
// Offset::0x548ADD0;
FAnimInstance* FLinkedAnimGraphLibrary::GetLinkedAnimInstance(FLinkedAnimGraphReference Node);


// Function  AnimGraphRuntime.LinkedAnimGraphLibrary.HasLinkedAnimInstance
// Offset::0x548AE80;
bool FLinkedAnimGraphLibrary::HasLinkedAnimInstance(FLinkedAnimGraphReference Node);


// Function  AnimGraphRuntime.PlayMontageCallbackProxy.CreateProxyObjectForPlayMontage
// Offset::0x548BA20;
FPlayMontageCallbackProxy* FPlayMontageCallbackProxy::CreateProxyObjectForPlayMontage(FSkeletalMeshComponent* InSkeletalMeshComponent,FAnimMontage* MontageToPlay,float PlayRate,float StartingPosition,FName StartingSection);


// Function  AnimGraphRuntime.PlayMontageCallbackProxy.OnMontageBlendingOut
// Offset::0x548B930;
void FPlayMontageCallbackProxy::OnMontageBlendingOut(FAnimMontage* Montage,bool bInterrupted);


// Function  AnimGraphRuntime.PlayMontageCallbackProxy.OnMontageEnded
// Offset::0x548B840;
void FPlayMontageCallbackProxy::OnMontageEnded(FAnimMontage* Montage,bool bInterrupted);


// Function  AnimGraphRuntime.PlayMontageCallbackProxy.OnNotifyBeginReceived
// Offset::0x548B740;
void FPlayMontageCallbackProxy::OnNotifyBeginReceived(FName NotifyName,FBranchingPointNotifyPayload BranchingPointNotifyPayload);


// Function  AnimGraphRuntime.PlayMontageCallbackProxy.OnNotifyEndReceived
// Offset::0x548B640;
void FPlayMontageCallbackProxy::OnNotifyEndReceived(FName NotifyName,FBranchingPointNotifyPayload BranchingPointNotifyPayload);


// Function  AnimGraphRuntime.SequenceEvaluatorLibrary.AdvanceTime
// Offset::0x548C890;
FSequenceEvaluatorReference FSequenceEvaluatorLibrary::AdvanceTime(FAnimUpdateContext UpdateContext,FSequenceEvaluatorReference SequenceEvaluator,float PlayRate);


// Function  AnimGraphRuntime.SequenceEvaluatorLibrary.ConvertToSequenceEvaluator
// Offset::0x548CCE0;
FSequenceEvaluatorReference FSequenceEvaluatorLibrary::ConvertToSequenceEvaluator(FAnimNodeReference Node,enum class EAnimNodeReferenceConversionResult Result);


// Function  AnimGraphRuntime.SequenceEvaluatorLibrary.ConvertToSequenceEvaluatorPure
// Offset::0x548CB10;
void FSequenceEvaluatorLibrary::ConvertToSequenceEvaluatorPure(FAnimNodeReference Node,FSequenceEvaluatorReference SequenceEvaluator,bool Result);


// Function  AnimGraphRuntime.SequenceEvaluatorLibrary.GetAccumulatedTime
// Offset::0x548C510;
float FSequenceEvaluatorLibrary::GetAccumulatedTime(FSequenceEvaluatorReference SequenceEvaluator);


// Function  AnimGraphRuntime.SequenceEvaluatorLibrary.GetSequence
// Offset::0x548C460;
FAnimSequenceBase* FSequenceEvaluatorLibrary::GetSequence(FSequenceEvaluatorReference SequenceEvaluator);


// Function  AnimGraphRuntime.SequenceEvaluatorLibrary.SetExplicitTime
// Offset::0x548CA10;
FSequenceEvaluatorReference FSequenceEvaluatorLibrary::SetExplicitTime(FSequenceEvaluatorReference SequenceEvaluator,float Time);


// Function  AnimGraphRuntime.SequenceEvaluatorLibrary.SetSequence
// Offset::0x548C790;
FSequenceEvaluatorReference FSequenceEvaluatorLibrary::SetSequence(FSequenceEvaluatorReference SequenceEvaluator,FAnimSequenceBase* Sequence);


// Function  AnimGraphRuntime.SequenceEvaluatorLibrary.SetSequenceWithInertialBlending
// Offset::0x548C5C0;
FSequenceEvaluatorReference FSequenceEvaluatorLibrary::SetSequenceWithInertialBlending(FAnimUpdateContext UpdateContext,FSequenceEvaluatorReference SequenceEvaluator,FAnimSequenceBase* Sequence,float BlendTime);


// Function  AnimGraphRuntime.SequencePlayerLibrary.ConvertToSequencePlayer
// Offset::0x548E0A0;
FSequencePlayerReference FSequencePlayerLibrary::ConvertToSequencePlayer(FAnimNodeReference Node,enum class EAnimNodeReferenceConversionResult Result);


// Function  AnimGraphRuntime.SequencePlayerLibrary.ConvertToSequencePlayerPure
// Offset::0x548DED0;
void FSequencePlayerLibrary::ConvertToSequencePlayerPure(FAnimNodeReference Node,FSequencePlayerReference SequencePlayer,bool Result);


// Function  AnimGraphRuntime.SequencePlayerLibrary.GetAccumulatedTime
// Offset::0x548D690;
float FSequencePlayerLibrary::GetAccumulatedTime(FSequencePlayerReference SequencePlayer);


// Function  AnimGraphRuntime.SequencePlayerLibrary.GetLoopAnimation
// Offset::0x548D490;
bool FSequencePlayerLibrary::GetLoopAnimation(FSequencePlayerReference SequencePlayer);


// Function  AnimGraphRuntime.SequencePlayerLibrary.GetPlayRate
// Offset::0x548D530;
float FSequencePlayerLibrary::GetPlayRate(FSequencePlayerReference SequencePlayer);


// Function  AnimGraphRuntime.SequencePlayerLibrary.GetSequence
// Offset::0x548D7F0;
FSequencePlayerReference FSequencePlayerLibrary::GetSequence(FSequencePlayerReference SequencePlayer,FAnimSequenceBase* SequenceBase);


// Function  AnimGraphRuntime.SequencePlayerLibrary.GetSequencePure
// Offset::0x548D740;
FAnimSequenceBase* FSequencePlayerLibrary::GetSequencePure(FSequencePlayerReference SequencePlayer);


// Function  AnimGraphRuntime.SequencePlayerLibrary.GetStartPosition
// Offset::0x548D5E0;
float FSequencePlayerLibrary::GetStartPosition(FSequencePlayerReference SequencePlayer);


// Function  AnimGraphRuntime.SequencePlayerLibrary.SetAccumulatedTime
// Offset::0x548DDD0;
FSequencePlayerReference FSequencePlayerLibrary::SetAccumulatedTime(FSequencePlayerReference SequencePlayer,float Time);


// Function  AnimGraphRuntime.SequencePlayerLibrary.SetPlayRate
// Offset::0x548DBD0;
FSequencePlayerReference FSequencePlayerLibrary::SetPlayRate(FSequencePlayerReference SequencePlayer,float PlayRate);


// Function  AnimGraphRuntime.SequencePlayerLibrary.SetSequence
// Offset::0x548DAD0;
FSequencePlayerReference FSequencePlayerLibrary::SetSequence(FSequencePlayerReference SequencePlayer,FAnimSequenceBase* Sequence);


// Function  AnimGraphRuntime.SequencePlayerLibrary.SetSequenceWithInertialBlending
// Offset::0x548D900;
FSequencePlayerReference FSequencePlayerLibrary::SetSequenceWithInertialBlending(FAnimUpdateContext UpdateContext,FSequencePlayerReference SequencePlayer,FAnimSequenceBase* Sequence,float BlendTime);


// Function  AnimGraphRuntime.SequencePlayerLibrary.SetStartPosition
// Offset::0x548DCD0;
FSequencePlayerReference FSequencePlayerLibrary::SetStartPosition(FSequencePlayerReference SequencePlayer,float StartPosition);


// Function  AnimGraphRuntime.SkeletalControlLibrary.ConvertToSkeletalControl
// Offset::0x548FE10;
FSkeletalControlReference FSkeletalControlLibrary::ConvertToSkeletalControl(FAnimNodeReference Node,enum class EAnimNodeReferenceConversionResult Result);


// Function  AnimGraphRuntime.SkeletalControlLibrary.ConvertToSkeletalControlPure
// Offset::0x548FC40;
void FSkeletalControlLibrary::ConvertToSkeletalControlPure(FAnimNodeReference Node,FSkeletalControlReference SkeletalControl,bool Result);


// Function  AnimGraphRuntime.SkeletalControlLibrary.GetAlpha
// Offset::0x548FA90;
float FSkeletalControlLibrary::GetAlpha(FSkeletalControlReference SkeletalControl);


// Function  AnimGraphRuntime.SkeletalControlLibrary.SetAlpha
// Offset::0x548FB40;
FSkeletalControlReference FSkeletalControlLibrary::SetAlpha(FSkeletalControlReference SkeletalControl,float Alpha);


// Function  AudioExtensions.AudioParameterControllerInterface.ResetParameters
// Offset::0x54E5070;
void FAudioParameterControllerInterface::ResetParameters();


// Function  AudioExtensions.AudioParameterControllerInterface.SetBoolArrayParameter
// Offset::0x54E4DE0;
void FAudioParameterControllerInterface::SetBoolArrayParameter(FName InName,TArray<bool> InValue);


// Function  AudioExtensions.AudioParameterControllerInterface.SetBoolParameter
// Offset::0x54E4EE0;
void FAudioParameterControllerInterface::SetBoolParameter(FName InName,bool InBool);


// Function  AudioExtensions.AudioParameterControllerInterface.SetFloatArrayParameter
// Offset::0x54E4A10;
void FAudioParameterControllerInterface::SetFloatArrayParameter(FName InName,TArray<float> InValue);


// Function  AudioExtensions.AudioParameterControllerInterface.SetFloatParameter
// Offset::0x54E4B10;
void FAudioParameterControllerInterface::SetFloatParameter(FName InName,float InFloat);


// Function  AudioExtensions.AudioParameterControllerInterface.SetIntArrayParameter
// Offset::0x54E4C00;
void FAudioParameterControllerInterface::SetIntArrayParameter(FName InName,TArray<int32_t> InValue);


// Function  AudioExtensions.AudioParameterControllerInterface.SetIntParameter
// Offset::0x54E4D00;
void FAudioParameterControllerInterface::SetIntParameter(FName InName,int32_t inInt);


// Function  AudioExtensions.AudioParameterControllerInterface.SetObjectArrayParameter
// Offset::0x54E45F0;
void FAudioParameterControllerInterface::SetObjectArrayParameter(FName InName,TArray<FObject*> InValue);


// Function  AudioExtensions.AudioParameterControllerInterface.SetObjectParameter
// Offset::0x54E46F0;
void FAudioParameterControllerInterface::SetObjectParameter(FName InName,FObject* InValue);


// Function  AudioExtensions.AudioParameterControllerInterface.SetParameters_Blueprint
// Offset::0x54E4510;
void FAudioParameterControllerInterface::SetParameters_Blueprint(TArray<FAudioParameter> InParameters);


// Function  AudioExtensions.AudioParameterControllerInterface.SetStringArrayParameter
// Offset::0x54E47E0;
void FAudioParameterControllerInterface::SetStringArrayParameter(FName InName,TArray<FString> InValue);


// Function  AudioExtensions.AudioParameterControllerInterface.SetStringParameter
// Offset::0x54E4920;
void FAudioParameterControllerInterface::SetStringParameter(FName InName,FString InValue);


// Function  AudioExtensions.AudioParameterControllerInterface.SetTriggerParameter
// Offset::0x54E4FD0;
void FAudioParameterControllerInterface::SetTriggerParameter(FName InName);


// Function  MovieSceneTracks.MovieSceneTransformOrigin.BP_GetTransformOrigin
// Offset::0x3D30810;
FTransform FMovieSceneTransformOrigin::BP_GetTransformOrigin();


// Function  MovieSceneTracks.MovieScene3DConstraintSection.GetConstraintBindingID
// Offset::0x5602300;
FMovieSceneObjectBindingID FMovieScene3DConstraintSection::GetConstraintBindingID();


// Function  MovieSceneTracks.MovieScene3DConstraintSection.SetConstraintBindingID
// Offset::0x5602220;
void FMovieScene3DConstraintSection::SetConstraintBindingID(FMovieSceneObjectBindingID InConstraintBindingID);


// Function  MovieSceneTracks.MovieSceneAudioSection.GetSound
// Offset::0x5603340;
FSoundBase* FMovieSceneAudioSection::GetSound();


// Function  MovieSceneTracks.MovieSceneAudioSection.GetStartOffset
// Offset::0x5603280;
FFrameNumber FMovieSceneAudioSection::GetStartOffset();


// Function  MovieSceneTracks.MovieSceneAudioSection.SetSound
// Offset::0x5603360;
void FMovieSceneAudioSection::SetSound(FSoundBase* InSound);


// Function  MovieSceneTracks.MovieSceneAudioSection.SetStartOffset
// Offset::0x56032A0;
void FMovieSceneAudioSection::SetStartOffset(FFrameNumber InStartOffset);


// Function  MovieSceneTracks.MovieSceneCameraCutSection.GetCameraBindingID
// Offset::0x56043D0;
FMovieSceneObjectBindingID FMovieSceneCameraCutSection::GetCameraBindingID();


// Function  MovieSceneTracks.MovieSceneCameraCutSection.SetCameraBindingID
// Offset::0x56042F0;
void FMovieSceneCameraCutSection::SetCameraBindingID(FMovieSceneObjectBindingID InCameraBindingID);


// Function  MovieSceneTracks.MovieSceneCinematicShotSection.GetShotDisplayName
// Offset::0x5606D20;
FString FMovieSceneCinematicShotSection::GetShotDisplayName();


// Function  MovieSceneTracks.MovieSceneCinematicShotSection.SetShotDisplayName
// Offset::0x5606BA0;
void FMovieSceneCinematicShotSection::SetShotDisplayName(FString InShotDisplayName);


// Function  MovieSceneTracks.MovieSceneCVarSection.GetString
// Offset::0x56079E0;
FString FMovieSceneCVarSection::GetString();


// Function  MovieSceneTracks.MovieSceneCVarSection.SetFromString
// Offset::0x5607A60;
void FMovieSceneCVarSection::SetFromString(FString InString);


// Function  MovieSceneTracks.MovieSceneDataLayerSection.GetDataLayers
// Offset::0x56081D0;
TArray<FActorDataLayer> FMovieSceneDataLayerSection::GetDataLayers();


// Function  MovieSceneTracks.MovieSceneDataLayerSection.GetDesiredState
// Offset::0x5608470;
enum class EDataLayerRuntimeState FMovieSceneDataLayerSection::GetDesiredState();


// Function  MovieSceneTracks.MovieSceneDataLayerSection.GetFlushOnUnload
// Offset::0x56082F0;
bool FMovieSceneDataLayerSection::GetFlushOnUnload();


// Function  MovieSceneTracks.MovieSceneDataLayerSection.GetPrerollState
// Offset::0x56083B0;
enum class EDataLayerRuntimeState FMovieSceneDataLayerSection::GetPrerollState();


// Function  MovieSceneTracks.MovieSceneDataLayerSection.SetDataLayers
// Offset::0x5608050;
void FMovieSceneDataLayerSection::SetDataLayers(TArray<FActorDataLayer> InDataLayers);


// Function  MovieSceneTracks.MovieSceneDataLayerSection.SetDesiredState
// Offset::0x56083E0;
void FMovieSceneDataLayerSection::SetDesiredState(enum class EDataLayerRuntimeState InDesiredState);


// Function  MovieSceneTracks.MovieSceneDataLayerSection.SetFlushOnUnload
// Offset::0x5608250;
void FMovieSceneDataLayerSection::SetFlushOnUnload(bool bFlushOnUnload);


// Function  MovieSceneTracks.MovieSceneDataLayerSection.SetPrerollState
// Offset::0x5608320;
void FMovieSceneDataLayerSection::SetPrerollState(enum class EDataLayerRuntimeState InPrerollState);


// Function  MovieSceneTracks.MovieSceneLevelVisibilitySection.GetLevelNames
// Offset::0x560D270;
TArray<FName> FMovieSceneLevelVisibilitySection::GetLevelNames();


// Function  MovieSceneTracks.MovieSceneLevelVisibilitySection.GetVisibility
// Offset::0x560D380;
enum class ELevelVisibility FMovieSceneLevelVisibilitySection::GetVisibility();


// Function  MovieSceneTracks.MovieSceneLevelVisibilitySection.SetLevelNames
// Offset::0x560D0F0;
void FMovieSceneLevelVisibilitySection::SetLevelNames(TArray<FName> InLevelNames);


// Function  MovieSceneTracks.MovieSceneLevelVisibilitySection.SetVisibility
// Offset::0x560D2F0;
void FMovieSceneLevelVisibilitySection::SetVisibility(enum class ELevelVisibility InVisibility);


// Function  MovieSceneTracks.MovieSceneAsyncAction_SequencePrediction.PredictLocalTransformAtFrame
// Offset::0x5612360;
FMovieSceneAsyncAction_SequencePrediction* FMovieSceneAsyncAction_SequencePrediction::PredictLocalTransformAtFrame(FMovieSceneSequencePlayer* Player,FSceneComponent* TargetComponent,FFrameTime FrameTime);


// Function  MovieSceneTracks.MovieSceneAsyncAction_SequencePrediction.PredictLocalTransformAtTime
// Offset::0x5612490;
FMovieSceneAsyncAction_SequencePrediction* FMovieSceneAsyncAction_SequencePrediction::PredictLocalTransformAtTime(FMovieSceneSequencePlayer* Player,FSceneComponent* TargetComponent,float TimeInSeconds);


// Function  MovieSceneTracks.MovieSceneAsyncAction_SequencePrediction.PredictWorldTransformAtFrame
// Offset::0x56125C0;
FMovieSceneAsyncAction_SequencePrediction* FMovieSceneAsyncAction_SequencePrediction::PredictWorldTransformAtFrame(FMovieSceneSequencePlayer* Player,FSceneComponent* TargetComponent,FFrameTime FrameTime);


// Function  MovieSceneTracks.MovieSceneAsyncAction_SequencePrediction.PredictWorldTransformAtTime
// Offset::0x56126F0;
FMovieSceneAsyncAction_SequencePrediction* FMovieSceneAsyncAction_SequencePrediction::PredictWorldTransformAtTime(FMovieSceneSequencePlayer* Player,FSceneComponent* TargetComponent,float TimeInSeconds);


// Function  UMG.AsyncTaskDownloadImage.DownloadImage
// Offset::0x56FDA70;
FAsyncTaskDownloadImage* FAsyncTaskDownloadImage::DownloadImage(FString URL);


// Function  UMG.BackgroundBlur.SetApplyAlphaToBlur
// Offset::0x56FE0F0;
void FBackgroundBlur::SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);


// Function  UMG.BackgroundBlur.SetBlurRadius
// Offset::0x56FE050;
void FBackgroundBlur::SetBlurRadius(int32_t InBlurRadius);


// Function  UMG.BackgroundBlur.SetBlurStrength
// Offset::0x56FDFB0;
void FBackgroundBlur::SetBlurStrength(float InStrength);


// Function  UMG.BackgroundBlur.SetCornerRadius
// Offset::0x56FDEE0;
void FBackgroundBlur::SetCornerRadius(FVector4 InCornerRadius);


// Function  UMG.BackgroundBlur.SetHorizontalAlignment
// Offset::0x56FE220;
void FBackgroundBlur::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.BackgroundBlur.SetLowQualityFallbackBrush
// Offset::0x56FDDF0;
void FBackgroundBlur::SetLowQualityFallbackBrush(FSlateBrush InBrush);


// Function  UMG.BackgroundBlur.SetPadding
// Offset::0x56FE2B0;
void FBackgroundBlur::SetPadding(FMargin InPadding);


// Function  UMG.BackgroundBlur.SetVerticalAlignment
// Offset::0x56FE190;
void FBackgroundBlur::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.BackgroundBlurSlot.SetHorizontalAlignment
// Offset::0x56FEA40;
void FBackgroundBlurSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.BackgroundBlurSlot.SetPadding
// Offset::0x56FEAD0;
void FBackgroundBlurSlot::SetPadding(FMargin InPadding);


// Function  UMG.BackgroundBlurSlot.SetVerticalAlignment
// Offset::0x56FE9B0;
void FBackgroundBlurSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.BoolBinding.GetValue
// Offset::0x56FEF00;
bool FBoolBinding::GetValue();


// Function  UMG.BorderSlot.SetHorizontalAlignment
// Offset::0x5700030;
void FBorderSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.BorderSlot.SetPadding
// Offset::0x57000C0;
void FBorderSlot::SetPadding(FMargin InPadding);


// Function  UMG.BorderSlot.SetVerticalAlignment
// Offset::0x56FFFA0;
void FBorderSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.BrushBinding.GetValue
// Offset::0x57004F0;
FSlateBrush FBrushBinding::GetValue();


// Function  UMG.ButtonSlot.SetHorizontalAlignment
// Offset::0x5701380;
void FButtonSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.ButtonSlot.SetPadding
// Offset::0x5701410;
void FButtonSlot::SetPadding(FMargin InPadding);


// Function  UMG.ButtonSlot.SetVerticalAlignment
// Offset::0x57012F0;
void FButtonSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.CanvasPanel.AddChildToCanvas
// Offset::0x5701840;
FCanvasPanelSlot* FCanvasPanel::AddChildToCanvas(FWidget* Content);


// Function  UMG.CanvasPanelSlot.GetAlignment
// Offset::0x5701FA0;
FVector2D FCanvasPanelSlot::GetAlignment();


// Function  UMG.CanvasPanelSlot.GetAnchors
// Offset::0x5702090;
FAnchors FCanvasPanelSlot::GetAnchors();


// Function  UMG.CanvasPanelSlot.GetAutoSize
// Offset::0x5701ED0;
bool FCanvasPanelSlot::GetAutoSize();


// Function  UMG.CanvasPanelSlot.GetLayout
// Offset::0x5702470;
FAnchorData FCanvasPanelSlot::GetLayout();


// Function  UMG.CanvasPanelSlot.GetOffsets
// Offset::0x57021A0;
FMargin FCanvasPanelSlot::GetOffsets();


// Function  UMG.CanvasPanelSlot.GetPosition
// Offset::0x5702380;
FVector2D FCanvasPanelSlot::GetPosition();


// Function  UMG.CanvasPanelSlot.GetSize
// Offset::0x5702290;
FVector2D FCanvasPanelSlot::GetSize();


// Function  UMG.CanvasPanelSlot.GetZOrder
// Offset::0x5701E00;
int32_t FCanvasPanelSlot::GetZOrder();


// Function  UMG.CanvasPanelSlot.SetAlignment
// Offset::0x5701FF0;
void FCanvasPanelSlot::SetAlignment(FVector2D InAlignment);


// Function  UMG.CanvasPanelSlot.SetAnchors
// Offset::0x57020F0;
void FCanvasPanelSlot::SetAnchors(FAnchors InAnchors);


// Function  UMG.CanvasPanelSlot.SetAutoSize
// Offset::0x5701F00;
void FCanvasPanelSlot::SetAutoSize(bool InbAutoSize);


// Function  UMG.CanvasPanelSlot.SetLayout
// Offset::0x57024E0;
void FCanvasPanelSlot::SetLayout(FAnchorData InLayoutData);


// Function  UMG.CanvasPanelSlot.SetMaximum
// Offset::0x5701CC0;
void FCanvasPanelSlot::SetMaximum(FVector2D InMaximumAnchors);


// Function  UMG.CanvasPanelSlot.SetMinimum
// Offset::0x5701D60;
void FCanvasPanelSlot::SetMinimum(FVector2D InMinimumAnchors);


// Function  UMG.CanvasPanelSlot.SetOffsets
// Offset::0x57021F0;
void FCanvasPanelSlot::SetOffsets(FMargin InOffset);


// Function  UMG.CanvasPanelSlot.SetPosition
// Offset::0x57023D0;
void FCanvasPanelSlot::SetPosition(FVector2D InPosition);


// Function  UMG.CanvasPanelSlot.SetSize
// Offset::0x57022E0;
void FCanvasPanelSlot::SetSize(FVector2D InSize);


// Function  UMG.CanvasPanelSlot.SetZOrder
// Offset::0x5701E30;
void FCanvasPanelSlot::SetZOrder(int32_t InZOrder);


// Function  UMG.CheckBox.GetCheckedState
// Offset::0x5703350;
enum class ECheckBoxState FCheckBox::GetCheckedState();


// Function  UMG.CheckBox.IsChecked
// Offset::0x5703380;
bool FCheckBox::IsChecked();


// Function  UMG.CheckBox.IsPressed
// Offset::0x57033B0;
bool FCheckBox::IsPressed();


// Function  UMG.CheckBox.SetCheckedState
// Offset::0x5703220;
void FCheckBox::SetCheckedState(enum class ECheckBoxState InCheckedState);


// Function  UMG.CheckBox.SetClickMethod
// Offset::0x5703190;
void FCheckBox::SetClickMethod(enum class EButtonClickMethod InClickMethod);


// Function  UMG.CheckBox.SetIsChecked
// Offset::0x57032B0;
void FCheckBox::SetIsChecked(bool InIsChecked);


// Function  UMG.CheckBox.SetPressMethod
// Offset::0x5703070;
void FCheckBox::SetPressMethod(enum class EButtonPressMethod InPressMethod);


// Function  UMG.CheckBox.SetTouchMethod
// Offset::0x5703100;
void FCheckBox::SetTouchMethod(enum class EButtonTouchMethod InTouchMethod);


// Function  UMG.CheckedStateBinding.GetValue
// Offset::0x5703A20;
enum class ECheckBoxState FCheckedStateBinding::GetValue();


// Function  UMG.CircularThrobber.SetNumberOfPieces
// Offset::0x5704660;
void FCircularThrobber::SetNumberOfPieces(int32_t InNumberOfPieces);


// Function  UMG.CircularThrobber.SetPeriod
// Offset::0x57045C0;
void FCircularThrobber::SetPeriod(float InPeriod);


// Function  UMG.CircularThrobber.SetRadius
// Offset::0x5704520;
void FCircularThrobber::SetRadius(float InRadius);


// Function  UMG.ColorBinding.GetLinearValue
// Offset::0x5704AA0;
FLinearColor FColorBinding::GetLinearValue();


// Function  UMG.ColorBinding.GetSlateValue
// Offset::0x5704AF0;
FSlateColor FColorBinding::GetSlateValue();


// Function  UMG.DragDropOperation.DragCancelled
// Offset::0x5706E90;
void FDragDropOperation::DragCancelled(FPointerEvent PointerEvent);


// Function  UMG.DragDropOperation.Dragged
// Offset::0x5706D20;
void FDragDropOperation::Dragged(FPointerEvent PointerEvent);


// Function  UMG.DragDropOperation.Drop
// Offset::0x5707000;
void FDragDropOperation::Drop(FPointerEvent PointerEvent);


// Function  UMG.DynamicEntryBox.BP_CreateEntry
// Offset::0x5708050;
FUserWidget* FDynamicEntryBox::BP_CreateEntry();


// Function  UMG.DynamicEntryBox.BP_CreateEntryOfClass
// Offset::0x5707FB0;
FUserWidget* FDynamicEntryBox::BP_CreateEntryOfClass(FUserWidget* EntryClass);


// Function  UMG.DynamicEntryBox.RemoveEntry
// Offset::0x5708080;
void FDynamicEntryBox::RemoveEntry(FUserWidget* EntryWidget);


// Function  UMG.DynamicEntryBox.Reset
// Offset::0x5708120;
void FDynamicEntryBox::Reset(bool bDeleteWidgets);


// Function  UMG.ExpandableArea.GetIsExpanded
// Offset::0x570B1E0;
bool FExpandableArea::GetIsExpanded();


// Function  UMG.ExpandableArea.SetIsExpanded
// Offset::0x570B140;
void FExpandableArea::SetIsExpanded(bool IsExpanded);


// Function  UMG.ExpandableArea.SetIsExpanded_Animated
// Offset::0x570B0A0;
void FExpandableArea::SetIsExpanded_Animated(bool IsExpanded);


// Function  UMG.FloatBinding.GetValue
// Offset::0x570B500;
float FFloatBinding::GetValue();


// Function  UMG.GridPanel.AddChildToGrid
// Offset::0x570B980;
FGridSlot* FGridPanel::AddChildToGrid(FWidget* Content,int32_t InRow,int32_t InColumn);


// Function  UMG.GridPanel.SetColumnFill
// Offset::0x570B8A0;
void FGridPanel::SetColumnFill(int32_t ColumnIndex,float Coefficient);


// Function  UMG.GridPanel.SetRowFill
// Offset::0x570B7C0;
void FGridPanel::SetRowFill(int32_t ColumnIndex,float Coefficient);


// Function  UMG.GridSlot.SetColumn
// Offset::0x570C200;
void FGridSlot::SetColumn(int32_t InColumn);


// Function  UMG.GridSlot.SetColumnSpan
// Offset::0x570C160;
void FGridSlot::SetColumnSpan(int32_t InColumnSpan);


// Function  UMG.GridSlot.SetHorizontalAlignment
// Offset::0x570BF90;
void FGridSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.GridSlot.SetLayer
// Offset::0x570C0C0;
void FGridSlot::SetLayer(int32_t InLayer);


// Function  UMG.GridSlot.SetNudge
// Offset::0x570C020;
void FGridSlot::SetNudge(FVector2D InNudge);


// Function  UMG.GridSlot.SetPadding
// Offset::0x570C3E0;
void FGridSlot::SetPadding(FMargin InPadding);


// Function  UMG.GridSlot.SetRow
// Offset::0x570C340;
void FGridSlot::SetRow(int32_t InRow);


// Function  UMG.GridSlot.SetRowSpan
// Offset::0x570C2A0;
void FGridSlot::SetRowSpan(int32_t InRowSpan);


// Function  UMG.GridSlot.SetVerticalAlignment
// Offset::0x570BF00;
void FGridSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.HorizontalBox.AddChildToHorizontalBox
// Offset::0x570CA70;
FHorizontalBoxSlot* FHorizontalBox::AddChildToHorizontalBox(FWidget* Content);


// Function  UMG.HorizontalBoxSlot.SetHorizontalAlignment
// Offset::0x570CEE0;
void FHorizontalBoxSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.HorizontalBoxSlot.SetPadding
// Offset::0x570D010;
void FHorizontalBoxSlot::SetPadding(FMargin InPadding);


// Function  UMG.HorizontalBoxSlot.SetSize
// Offset::0x570CF70;
void FHorizontalBoxSlot::SetSize(FSlateChildSize InSize);


// Function  UMG.HorizontalBoxSlot.SetVerticalAlignment
// Offset::0x570CE50;
void FHorizontalBoxSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.Int32Binding.GetValue
// Offset::0x570F510;
int32_t FInt32Binding::GetValue();


// Function  UMG.InvalidationBox.GetCanCache
// Offset::0x570F870;
bool FInvalidationBox::GetCanCache();


// Function  UMG.InvalidationBox.InvalidateCache
// Offset::0x1B91E70;
void FInvalidationBox::InvalidateCache();


// Function  UMG.InvalidationBox.SetCanCache
// Offset::0x570F7D0;
void FInvalidationBox::SetCanCache(bool CanCache);


// Function  UMG.UserListEntry.BP_OnEntryReleased
// Offset::0x3D30810;
void FUserListEntry::BP_OnEntryReleased();


// Function  UMG.UserListEntry.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FUserListEntry::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  UMG.UserListEntry.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FUserListEntry::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  UMG.UserListEntryLibrary.GetOwningListView
// Offset::0x57103F0;
FListViewBase* FUserListEntryLibrary::GetOwningListView(TScriptInterface<IUserListEntry> UserListEntry);


// Function  UMG.UserListEntryLibrary.IsListItemExpanded
// Offset::0x5710490;
bool FUserListEntryLibrary::IsListItemExpanded(TScriptInterface<IUserListEntry> UserListEntry);


// Function  UMG.UserListEntryLibrary.IsListItemSelected
// Offset::0x5710530;
bool FUserListEntryLibrary::IsListItemSelected(TScriptInterface<IUserListEntry> UserListEntry);


// Function  UMG.UserObjectListEntry.OnListItemObjectSet
// Offset::0x3D30810;
void FUserObjectListEntry::OnListItemObjectSet(FObject* ListItemObject);


// Function  UMG.UserObjectListEntryLibrary.GetListItemObject
// Offset::0x5710B30;
FObject* FUserObjectListEntryLibrary::GetListItemObject(TScriptInterface<IUserObjectListEntry> UserObjectListEntry);


// Function  UMG.MouseCursorBinding.GetValue
// Offset::0x5714990;
enum class EMouseCursor FMouseCursorBinding::GetValue();


// Function  UMG.ProgressBar.SetFillColorAndOpacity
// Offset::0x5718BF0;
void FProgressBar::SetFillColorAndOpacity(FLinearColor InColor);


// Function  UMG.ProgressBar.SetIsMarquee
// Offset::0x5718B50;
void FProgressBar::SetIsMarquee(bool InbIsMarquee);


// Function  UMG.ProgressBar.SetPercent
// Offset::0x5718C90;
void FProgressBar::SetPercent(float InPercent);


// Function  UMG.RetainerBox.GetEffectMaterial
// Offset::0x5719440;
FMaterialInstanceDynamic* FRetainerBox::GetEffectMaterial();


// Function  UMG.RetainerBox.RequestRender
// Offset::0x5719470;
void FRetainerBox::RequestRender();


// Function  UMG.RetainerBox.SetEffectMaterial
// Offset::0x57193A0;
void FRetainerBox::SetEffectMaterial(FMaterialInterface* EffectMaterial);


// Function  UMG.RetainerBox.SetRenderingPhase
// Offset::0x5719490;
void FRetainerBox::SetRenderingPhase(int32_t RenderPhase,int32_t TotalPhases);


// Function  UMG.RetainerBox.SetRetainRendering
// Offset::0x5719260;
void FRetainerBox::SetRetainRendering(bool bInRetainRendering);


// Function  UMG.RetainerBox.SetTextureParameter
// Offset::0x5719300;
void FRetainerBox::SetTextureParameter(FName TextureParameter);


// Function  UMG.SafeZone.SetSidesToPad
// Offset::0x571B320;
void FSafeZone::SetSidesToPad(bool InPadLeft,bool InPadRight,bool InPadTop,bool InPadBottom);


// Function  UMG.ScaleBox.SetIgnoreInheritedScale
// Offset::0x571B840;
void FScaleBox::SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);


// Function  UMG.ScaleBox.SetStretch
// Offset::0x571BA10;
void FScaleBox::SetStretch(enum class EStretch InStretch);


// Function  UMG.ScaleBox.SetStretchDirection
// Offset::0x571B980;
void FScaleBox::SetStretchDirection(enum class EStretchDirection InStretchDirection);


// Function  UMG.ScaleBox.SetUserSpecifiedScale
// Offset::0x571B8E0;
void FScaleBox::SetUserSpecifiedScale(float InUserSpecifiedScale);


// Function  UMG.ScaleBoxSlot.SetHorizontalAlignment
// Offset::0x5701380;
void FScaleBoxSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.ScaleBoxSlot.SetPadding
// Offset::0x571BEC0;
void FScaleBoxSlot::SetPadding(FMargin InPadding);


// Function  UMG.ScaleBoxSlot.SetVerticalAlignment
// Offset::0x57012F0;
void FScaleBoxSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.ScrollBar.SetState
// Offset::0x571C2F0;
void FScrollBar::SetState(float InOffsetFraction,float InThumbSizeFraction);


// Function  UMG.ScrollBoxSlot.SetHorizontalAlignment
// Offset::0x571DD40;
void FScrollBoxSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.ScrollBoxSlot.SetPadding
// Offset::0x571DDD0;
void FScrollBoxSlot::SetPadding(FMargin InPadding);


// Function  UMG.ScrollBoxSlot.SetVerticalAlignment
// Offset::0x571DCB0;
void FScrollBoxSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.SizeBoxSlot.SetHorizontalAlignment
// Offset::0x571FCB0;
void FSizeBoxSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.SizeBoxSlot.SetPadding
// Offset::0x571FD40;
void FSizeBoxSlot::SetPadding(FMargin InPadding);


// Function  UMG.SizeBoxSlot.SetVerticalAlignment
// Offset::0x571FC20;
void FSizeBoxSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.SlateBlueprintLibrary.AbsoluteToLocal
// Offset::0x5721290;
FVector2D FSlateBlueprintLibrary::AbsoluteToLocal(FGeometry Geometry,FVector2D AbsoluteCoordinate);


// Function  UMG.SlateBlueprintLibrary.AbsoluteToViewport
// Offset::0x5720610;
void FSlateBlueprintLibrary::AbsoluteToViewport(FObject* WorldContextObject,FVector2D AbsoluteDesktopCoordinate,FVector2D PixelPosition,FVector2D ViewportPosition);


// Function  UMG.SlateBlueprintLibrary.EqualEqual_SlateBrush
// Offset::0x5720990;
bool FSlateBlueprintLibrary::EqualEqual_SlateBrush(FSlateBrush A,FSlateBrush B);


// Function  UMG.SlateBlueprintLibrary.GetAbsoluteSize
// Offset::0x5720F40;
FVector2D FSlateBlueprintLibrary::GetAbsoluteSize(FGeometry Geometry);


// Function  UMG.SlateBlueprintLibrary.GetLocalSize
// Offset::0x5721000;
FVector2D FSlateBlueprintLibrary::GetLocalSize(FGeometry Geometry);


// Function  UMG.SlateBlueprintLibrary.GetLocalTopLeft
// Offset::0x57210C0;
FVector2D FSlateBlueprintLibrary::GetLocalTopLeft(FGeometry Geometry);


// Function  UMG.SlateBlueprintLibrary.IsUnderLocation
// Offset::0x57213A0;
bool FSlateBlueprintLibrary::IsUnderLocation(FGeometry Geometry,FVector2D AbsoluteCoordinate);


// Function  UMG.SlateBlueprintLibrary.LocalToAbsolute
// Offset::0x5721180;
FVector2D FSlateBlueprintLibrary::LocalToAbsolute(FGeometry Geometry,FVector2D LocalCoordinate);


// Function  UMG.SlateBlueprintLibrary.LocalToViewport
// Offset::0x5720790;
void FSlateBlueprintLibrary::LocalToViewport(FObject* WorldContextObject,FGeometry Geometry,FVector2D LocalCoordinate,FVector2D PixelPosition,FVector2D ViewportPosition);


// Function  UMG.SlateBlueprintLibrary.ScreenToViewport
// Offset::0x5720170;
void FSlateBlueprintLibrary::ScreenToViewport(FObject* WorldContextObject,FVector2D ScreenPosition,FVector2D ViewportPosition);


// Function  UMG.SlateBlueprintLibrary.ScreenToWidgetAbsolute
// Offset::0x57202A0;
void FSlateBlueprintLibrary::ScreenToWidgetAbsolute(FObject* WorldContextObject,FVector2D ScreenPosition,FVector2D AbsoluteCoordinate,bool bIncludeWindowPosition);


// Function  UMG.SlateBlueprintLibrary.ScreenToWidgetLocal
// Offset::0x5720420;
void FSlateBlueprintLibrary::ScreenToWidgetLocal(FObject* WorldContextObject,FGeometry Geometry,FVector2D ScreenPosition,FVector2D LocalCoordinate,bool bIncludeWindowPosition);


// Function  UMG.SlateBlueprintLibrary.TransformScalarAbsoluteToLocal
// Offset::0x5720E40;
float FSlateBlueprintLibrary::TransformScalarAbsoluteToLocal(FGeometry Geometry,float AbsoluteScalar);


// Function  UMG.SlateBlueprintLibrary.TransformScalarLocalToAbsolute
// Offset::0x5720D40;
float FSlateBlueprintLibrary::TransformScalarLocalToAbsolute(FGeometry Geometry,float LocalScalar);


// Function  UMG.SlateBlueprintLibrary.TransformVectorAbsoluteToLocal
// Offset::0x5720C30;
FVector2D FSlateBlueprintLibrary::TransformVectorAbsoluteToLocal(FGeometry Geometry,FVector2D AbsoluteVector);


// Function  UMG.SlateBlueprintLibrary.TransformVectorLocalToAbsolute
// Offset::0x5720B20;
FVector2D FSlateBlueprintLibrary::TransformVectorLocalToAbsolute(FGeometry Geometry,FVector2D LocalVector);


// Function  UMG.Spacer.SetSize
// Offset::0x5723270;
void FSpacer::SetSize(FVector2D InSize);


// Function  UMG.TextBinding.GetStringValue
// Offset::0x5725850;
FString FTextBinding::GetStringValue();


// Function  UMG.TextBinding.GetTextValue
// Offset::0x57258D0;
FText FTextBinding::GetTextValue();


// Function  UMG.Throbber.SetAnimateHorizontally
// Offset::0x5727490;
void FThrobber::SetAnimateHorizontally(bool bInAnimateHorizontally);


// Function  UMG.Throbber.SetAnimateOpacity
// Offset::0x5727350;
void FThrobber::SetAnimateOpacity(bool bInAnimateOpacity);


// Function  UMG.Throbber.SetAnimateVertically
// Offset::0x57273F0;
void FThrobber::SetAnimateVertically(bool bInAnimateVertically);


// Function  UMG.Throbber.SetNumberOfPieces
// Offset::0x5727530;
void FThrobber::SetNumberOfPieces(int32_t InNumberOfPieces);


// Function  UMG.UMGSequencePlayer.GetUserTag
// Offset::0x5728600;
FName FUMGSequencePlayer::GetUserTag();


// Function  UMG.UMGSequencePlayer.SetUserTag
// Offset::0x5728550;
void FUMGSequencePlayer::SetUserTag(FName InUserTag);


// Function  UMG.UniformGridPanel.AddChildToUniformGrid
// Offset::0x5728B80;
FUniformGridSlot* FUniformGridPanel::AddChildToUniformGrid(FWidget* Content,int32_t InRow,int32_t InColumn);


// Function  UMG.UniformGridPanel.SetMinDesiredSlotHeight
// Offset::0x5728CC0;
void FUniformGridPanel::SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);


// Function  UMG.UniformGridPanel.SetMinDesiredSlotWidth
// Offset::0x5728D60;
void FUniformGridPanel::SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);


// Function  UMG.UniformGridPanel.SetSlotPadding
// Offset::0x5728E00;
void FUniformGridPanel::SetSlotPadding(FMargin InSlotPadding);


// Function  UMG.UniformGridSlot.SetColumn
// Offset::0x5729480;
void FUniformGridSlot::SetColumn(int32_t InColumn);


// Function  UMG.UniformGridSlot.SetHorizontalAlignment
// Offset::0x57293F0;
void FUniformGridSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.UniformGridSlot.SetRow
// Offset::0x5729520;
void FUniformGridSlot::SetRow(int32_t InRow);


// Function  UMG.UniformGridSlot.SetVerticalAlignment
// Offset::0x5729360;
void FUniformGridSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.VerticalBox.AddChildToVerticalBox
// Offset::0x573A430;
FVerticalBoxSlot* FVerticalBox::AddChildToVerticalBox(FWidget* Content);


// Function  UMG.VerticalBoxSlot.SetHorizontalAlignment
// Offset::0x573A950;
void FVerticalBoxSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.VerticalBoxSlot.SetPadding
// Offset::0x573AA80;
void FVerticalBoxSlot::SetPadding(FMargin InPadding);


// Function  UMG.VerticalBoxSlot.SetSize
// Offset::0x573A9E0;
void FVerticalBoxSlot::SetSize(FSlateChildSize InSize);


// Function  UMG.VerticalBoxSlot.SetVerticalAlignment
// Offset::0x573A8C0;
void FVerticalBoxSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.VisibilityBinding.GetValue
// Offset::0x573B690;
enum class ESlateVisibility FVisibilityBinding::GetValue();


// Function  UMG.WidgetAnimation.BindToAnimationFinished
// Offset::0x573F230;
void FWidgetAnimation::BindToAnimationFinished(FUserWidget* Widget,FDelegate Delegate);


// Function  UMG.WidgetAnimation.BindToAnimationStarted
// Offset::0x573F4D0;
void FWidgetAnimation::BindToAnimationStarted(FUserWidget* Widget,FDelegate Delegate);


// Function  UMG.WidgetAnimation.GetEndTime
// Offset::0x573F5D0;
float FWidgetAnimation::GetEndTime();


// Function  UMG.WidgetAnimation.GetStartTime
// Offset::0x573F600;
float FWidgetAnimation::GetStartTime();


// Function  UMG.WidgetAnimation.UnbindAllFromAnimationFinished
// Offset::0x573F090;
void FWidgetAnimation::UnbindAllFromAnimationFinished(FUserWidget* Widget);


// Function  UMG.WidgetAnimation.UnbindAllFromAnimationStarted
// Offset::0x573F330;
void FWidgetAnimation::UnbindAllFromAnimationStarted(FUserWidget* Widget);


// Function  UMG.WidgetAnimation.UnbindFromAnimationFinished
// Offset::0x573F130;
void FWidgetAnimation::UnbindFromAnimationFinished(FUserWidget* Widget,FDelegate Delegate);


// Function  UMG.WidgetAnimation.UnbindFromAnimationStarted
// Offset::0x573F3D0;
void FWidgetAnimation::UnbindFromAnimationStarted(FUserWidget* Widget,FDelegate Delegate);


// Function  UMG.WidgetAnimationPlayCallbackProxy.CreatePlayAnimationProxyObject
// Offset::0x5740B10;
FWidgetAnimationPlayCallbackProxy* FWidgetAnimationPlayCallbackProxy::CreatePlayAnimationProxyObject(FUMGSequencePlayer* Result,FUserWidget* Widget,FWidgetAnimation* InAnimation,float StartAtTime,int32_t NumLoopsToPlay,enum class EUMGSequencePlayMode PlayMode,float PlaybackSpeed);


// Function  UMG.WidgetAnimationPlayCallbackProxy.CreatePlayAnimationTimeRangeProxyObject
// Offset::0x5740840;
FWidgetAnimationPlayCallbackProxy* FWidgetAnimationPlayCallbackProxy::CreatePlayAnimationTimeRangeProxyObject(FUMGSequencePlayer* Result,FUserWidget* Widget,FWidgetAnimation* InAnimation,float StartAtTime,float EndAtTime,int32_t NumLoopsToPlay,enum class EUMGSequencePlayMode PlayMode,float PlaybackSpeed);


// Function  UMG.WidgetBinding.GetValue
// Offset::0x57410A0;
FWidget* FWidgetBinding::GetValue();


// Function  UMG.WidgetInteractionComponent.Get2DHitLocation
// Offset::0x574BAB0;
FVector2D FWidgetInteractionComponent::Get2DHitLocation();


// Function  UMG.WidgetInteractionComponent.GetHoveredWidgetComponent
// Offset::0x574BBD0;
FWidgetComponent* FWidgetInteractionComponent::GetHoveredWidgetComponent();


// Function  UMG.WidgetInteractionComponent.GetLastHitResult
// Offset::0x574BB00;
FHitResult FWidgetInteractionComponent::GetLastHitResult();


// Function  UMG.WidgetInteractionComponent.IsOverFocusableWidget
// Offset::0x574BB70;
bool FWidgetInteractionComponent::IsOverFocusableWidget();


// Function  UMG.WidgetInteractionComponent.IsOverHitTestVisibleWidget
// Offset::0x574BB40;
bool FWidgetInteractionComponent::IsOverHitTestVisibleWidget();


// Function  UMG.WidgetInteractionComponent.IsOverInteractableWidget
// Offset::0x574BBA0;
bool FWidgetInteractionComponent::IsOverInteractableWidget();


// Function  UMG.WidgetInteractionComponent.PressAndReleaseKey
// Offset::0x574BDF0;
bool FWidgetInteractionComponent::PressAndReleaseKey(FKey Key);


// Function  UMG.WidgetInteractionComponent.PressKey
// Offset::0x574BFD0;
bool FWidgetInteractionComponent::PressKey(FKey Key,bool bRepeat);


// Function  UMG.WidgetInteractionComponent.PressPointerKey
// Offset::0x574C200;
void FWidgetInteractionComponent::PressPointerKey(FKey Key);


// Function  UMG.WidgetInteractionComponent.ReleaseKey
// Offset::0x574BEE0;
bool FWidgetInteractionComponent::ReleaseKey(FKey Key);


// Function  UMG.WidgetInteractionComponent.ReleasePointerKey
// Offset::0x574C110;
void FWidgetInteractionComponent::ReleasePointerKey(FKey Key);


// Function  UMG.WidgetInteractionComponent.ScrollWheel
// Offset::0x574BC00;
void FWidgetInteractionComponent::ScrollWheel(float ScrollDelta);


// Function  UMG.WidgetInteractionComponent.SendKeyChar
// Offset::0x574BCA0;
bool FWidgetInteractionComponent::SendKeyChar(FString Characters,bool bRepeat);


// Function  UMG.WidgetInteractionComponent.SetCustomHitResult
// Offset::0x574B940;
void FWidgetInteractionComponent::SetCustomHitResult(FHitResult HitResult);


// Function  UMG.WidgetInteractionComponent.SetFocus
// Offset::0x574B8A0;
void FWidgetInteractionComponent::SetFocus(FWidget* FocusWidget);


// Function  UMG.WidgetLayoutLibrary.GetMousePositionOnPlatform
// Offset::0x574D7B0;
FVector2D FWidgetLayoutLibrary::GetMousePositionOnPlatform();


// Function  UMG.WidgetLayoutLibrary.GetMousePositionOnViewport
// Offset::0x574D710;
FVector2D FWidgetLayoutLibrary::GetMousePositionOnViewport(FObject* WorldContextObject);


// Function  UMG.WidgetLayoutLibrary.GetMousePositionScaledByDPI
// Offset::0x574D5C0;
bool FWidgetLayoutLibrary::GetMousePositionScaledByDPI(FPlayerController* Player,float LocationX,float LocationY);


// Function  UMG.WidgetLayoutLibrary.GetPlayerScreenWidgetGeometry
// Offset::0x574D800;
FGeometry FWidgetLayoutLibrary::GetPlayerScreenWidgetGeometry(FPlayerController* PlayerController);


// Function  UMG.WidgetLayoutLibrary.GetViewportScale
// Offset::0x574DA00;
float FWidgetLayoutLibrary::GetViewportScale(FObject* WorldContextObject);


// Function  UMG.WidgetLayoutLibrary.GetViewportSize
// Offset::0x574D960;
FVector2D FWidgetLayoutLibrary::GetViewportSize(FObject* WorldContextObject);


// Function  UMG.WidgetLayoutLibrary.GetViewportWidgetGeometry
// Offset::0x574D8B0;
FGeometry FWidgetLayoutLibrary::GetViewportWidgetGeometry(FObject* WorldContextObject);


// Function  UMG.WidgetLayoutLibrary.ProjectWorldLocationToWidgetPosition
// Offset::0x574DAA0;
bool FWidgetLayoutLibrary::ProjectWorldLocationToWidgetPosition(FPlayerController* PlayerController,FVector WorldLocation,FVector2D ScreenPosition,bool bPlayerViewportRelative);


// Function  UMG.WidgetLayoutLibrary.RemoveAllWidgets
// Offset::0x574CD10;
void FWidgetLayoutLibrary::RemoveAllWidgets(FObject* WorldContextObject);


// Function  UMG.WidgetLayoutLibrary.SlotAsBorderSlot
// Offset::0x574D520;
FBorderSlot* FWidgetLayoutLibrary::SlotAsBorderSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsCanvasSlot
// Offset::0x574D480;
FCanvasPanelSlot* FWidgetLayoutLibrary::SlotAsCanvasSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsGridSlot
// Offset::0x574D3E0;
FGridSlot* FWidgetLayoutLibrary::SlotAsGridSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsHorizontalBoxSlot
// Offset::0x574D340;
FHorizontalBoxSlot* FWidgetLayoutLibrary::SlotAsHorizontalBoxSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsOverlaySlot
// Offset::0x574D2A0;
FOverlaySlot* FWidgetLayoutLibrary::SlotAsOverlaySlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsSafeBoxSlot
// Offset::0x574D020;
FSafeZoneSlot* FWidgetLayoutLibrary::SlotAsSafeBoxSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsScaleBoxSlot
// Offset::0x574CF80;
FScaleBoxSlot* FWidgetLayoutLibrary::SlotAsScaleBoxSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsScrollBoxSlot
// Offset::0x574D0C0;
FScrollBoxSlot* FWidgetLayoutLibrary::SlotAsScrollBoxSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsSizeBoxSlot
// Offset::0x574CEE0;
FSizeBoxSlot* FWidgetLayoutLibrary::SlotAsSizeBoxSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsUniformGridSlot
// Offset::0x574D200;
FUniformGridSlot* FWidgetLayoutLibrary::SlotAsUniformGridSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsVerticalBoxSlot
// Offset::0x574D160;
FVerticalBoxSlot* FWidgetLayoutLibrary::SlotAsVerticalBoxSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsWidgetSwitcherSlot
// Offset::0x574CDA0;
FWidgetSwitcherSlot* FWidgetLayoutLibrary::SlotAsWidgetSwitcherSlot(FWidget* Widget);


// Function  UMG.WidgetLayoutLibrary.SlotAsWrapBoxSlot
// Offset::0x574CE40;
FWrapBoxSlot* FWidgetLayoutLibrary::SlotAsWrapBoxSlot(FWidget* Widget);


// Function  UMG.WidgetSwitcherSlot.SetHorizontalAlignment
// Offset::0x5717210;
void FWidgetSwitcherSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.WidgetSwitcherSlot.SetPadding
// Offset::0x570D010;
void FWidgetSwitcherSlot::SetPadding(FMargin InPadding);


// Function  UMG.WidgetSwitcherSlot.SetVerticalAlignment
// Offset::0x5717180;
void FWidgetSwitcherSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.WindowTitleBarArea.SetHorizontalAlignment
// Offset::0x574F790;
void FWindowTitleBarArea::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.WindowTitleBarArea.SetPadding
// Offset::0x574F820;
void FWindowTitleBarArea::SetPadding(FMargin InPadding);


// Function  UMG.WindowTitleBarArea.SetVerticalAlignment
// Offset::0x574F700;
void FWindowTitleBarArea::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.WindowTitleBarAreaSlot.SetHorizontalAlignment
// Offset::0x574FCE0;
void FWindowTitleBarAreaSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.WindowTitleBarAreaSlot.SetPadding
// Offset::0x574FD70;
void FWindowTitleBarAreaSlot::SetPadding(FMargin InPadding);


// Function  UMG.WindowTitleBarAreaSlot.SetVerticalAlignment
// Offset::0x574FC50;
void FWindowTitleBarAreaSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  UMG.WrapBox.AddChildToWrapBox
// Offset::0x57501A0;
FWrapBoxSlot* FWrapBox::AddChildToWrapBox(FWidget* Content);


// Function  UMG.WrapBox.SetHorizontalAlignment
// Offset::0x5750240;
void FWrapBox::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.WrapBox.SetInnerSlotPadding
// Offset::0x57502D0;
void FWrapBox::SetInnerSlotPadding(FVector2D InPadding);


// Function  UMG.WrapBoxSlot.SetFillEmptySpace
// Offset::0x5750960;
void FWrapBoxSlot::SetFillEmptySpace(bool InbFillEmptySpace);


// Function  UMG.WrapBoxSlot.SetFillSpanWhenLessThan
// Offset::0x57508C0;
void FWrapBoxSlot::SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);


// Function  UMG.WrapBoxSlot.SetHorizontalAlignment
// Offset::0x5750830;
void FWrapBoxSlot::SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment);


// Function  UMG.WrapBoxSlot.SetNewLine
// Offset::0x5750700;
void FWrapBoxSlot::SetNewLine(bool InForceNewLine);


// Function  UMG.WrapBoxSlot.SetPadding
// Offset::0x5750A00;
void FWrapBoxSlot::SetPadding(FMargin InPadding);


// Function  UMG.WrapBoxSlot.SetVerticalAlignment
// Offset::0x57507A0;
void FWrapBoxSlot::SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment);


// Function  TypedElementRuntime.TypedElementAssetDataInterface.GetAllReferencedAssetDatas
// Offset::0x5757EE0;
TArray<FAssetData> FTypedElementAssetDataInterface::GetAllReferencedAssetDatas(FScriptTypedElementHandle InElementHandle);


// Function  TypedElementRuntime.TypedElementAssetDataInterface.GetAssetData
// Offset::0x5757CE0;
FAssetData FTypedElementAssetDataInterface::GetAssetData(FScriptTypedElementHandle InElementHandle);


// Function  TypedElementRuntime.TypedElementHierarchyInterface.GetChildElements
// Offset::0x5758360;
void FTypedElementHierarchyInterface::GetChildElements(FScriptTypedElementHandle InElementHandle,TArray<FScriptTypedElementHandle> OutElementHandles,bool bAllowCreate);


// Function  TypedElementRuntime.TypedElementHierarchyInterface.GetParentElement
// Offset::0x5758530;
FScriptTypedElementHandle FTypedElementHierarchyInterface::GetParentElement(FScriptTypedElementHandle InElementHandle,bool bAllowCreate);


// Function  TypedElementRuntime.TypedElementObjectInterface.GetObject
// Offset::0x5758A10;
FObject* FTypedElementObjectInterface::GetObject(FScriptTypedElementHandle InElementHandle);


// Function  TypedElementRuntime.TypedElementObjectInterface.GetObjectClass
// Offset::0x5758950;
FObject* FTypedElementObjectInterface::GetObjectClass(FScriptTypedElementHandle InElementHandle);


// Function  TypedElementRuntime.TypedElementSelectionInterface.AllowSelectionModifiers
// Offset::0x57591E0;
bool FTypedElementSelectionInterface::AllowSelectionModifiers(FScriptTypedElementHandle InElementHandle,FScriptTypedElementListProxy InSelectionSet);


// Function  TypedElementRuntime.TypedElementSelectionInterface.CanDeselectElement
// Offset::0x57596C0;
bool FTypedElementSelectionInterface::CanDeselectElement(FScriptTypedElementHandle InElementHandle,FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionInterface.CanSelectElement
// Offset::0x57597F0;
bool FTypedElementSelectionInterface::CanSelectElement(FScriptTypedElementHandle InElementHandle,FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionInterface.DeselectElement
// Offset::0x5759340;
bool FTypedElementSelectionInterface::DeselectElement(FScriptTypedElementHandle InElementHandle,FScriptTypedElementListProxy InSelectionSet,FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionInterface.GetSelectionElement
// Offset::0x5759020;
FScriptTypedElementHandle FTypedElementSelectionInterface::GetSelectionElement(FScriptTypedElementHandle InElementHandle,FScriptTypedElementListProxy InCurrentSelection,enum class ETypedElementSelectionMethod InSelectionMethod);


// Function  TypedElementRuntime.TypedElementSelectionInterface.IsElementSelected
// Offset::0x5759920;
bool FTypedElementSelectionInterface::IsElementSelected(FScriptTypedElementHandle InElementHandle,FScriptTypedElementListProxy InSelectionSet,FTypedElementIsSelectedOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionInterface.SelectElement
// Offset::0x5759500;
bool FTypedElementSelectionInterface::SelectElement(FScriptTypedElementHandle InElementHandle,FScriptTypedElementListProxy InSelectionSet,FTypedElementSelectionOptions InSelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSetLibrary.DeselectElementsFromList
// Offset::0x575D490;
bool FTypedElementSelectionSetLibrary::DeselectElementsFromList(FTypedElementSelectionSet* SelectionSet,FScriptTypedElementListProxy ElementList,FTypedElementSelectionOptions SelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSetLibrary.GetNormalizedElementList
// Offset::0x575C9E0;
FScriptTypedElementListProxy FTypedElementSelectionSetLibrary::GetNormalizedElementList(FTypedElementSelectionSet* SelectionSet,FScriptTypedElementListProxy ElementList,FTypedElementSelectionNormalizationOptions NormalizationOptions);


// Function  TypedElementRuntime.TypedElementSelectionSetLibrary.GetNormalizedSelection
// Offset::0x575CE70;
FScriptTypedElementListProxy FTypedElementSelectionSetLibrary::GetNormalizedSelection(FTypedElementSelectionSet* SelectionSet,FTypedElementSelectionNormalizationOptions NormalizationOptions);


// Function  TypedElementRuntime.TypedElementSelectionSetLibrary.SelectElementsFromList
// Offset::0x575D7D0;
bool FTypedElementSelectionSetLibrary::SelectElementsFromList(FTypedElementSelectionSet* SelectionSet,FScriptTypedElementListProxy ElementList,FTypedElementSelectionOptions SelectionOptions);


// Function  TypedElementRuntime.TypedElementSelectionSetLibrary.SetSelectionFromList
// Offset::0x575D150;
bool FTypedElementSelectionSetLibrary::SetSelectionFromList(FTypedElementSelectionSet* SelectionSet,FScriptTypedElementListProxy ElementList,FTypedElementSelectionOptions SelectionOptions);


// Function  CinematicCamera.CameraRig_Rail.GetRailSplineComponent
// Offset::0x3826FC0;
FSplineComponent* FCameraRig_Rail::GetRailSplineComponent();


// Function  Engine.CameraActor.GetAutoActivatePlayerIndex
// Offset::0x6347DF0;
int32_t FCameraActor::GetAutoActivatePlayerIndex();


// Function  CinematicCamera.CineCameraActor.GetCineCameraComponent
// Offset::0x5762640;
FCineCameraComponent* FCineCameraActor::GetCineCameraComponent();


// Function  Engine.CameraComponent.AddOrUpdateBlendable
// Offset::0x63489E0;
void FCameraComponent::AddOrUpdateBlendable(TScriptInterface<IBlendableInterface> InBlendableObject,float InWeight);


// Function  Engine.CameraComponent.GetCameraView
// Offset::0x6348B40;
void FCameraComponent::GetCameraView(float DeltaTime,FMinimalViewInfo DesiredView);


// Function  Engine.CameraComponent.OnCameraMeshHiddenChanged
// Offset::0x1B91E70;
void FCameraComponent::OnCameraMeshHiddenChanged();


// Function  Engine.CameraComponent.RemoveBlendable
// Offset::0x63488C0;
void FCameraComponent::RemoveBlendable(TScriptInterface<IBlendableInterface> InBlendableObject);


// Function  Engine.CameraComponent.SetAspectRatio
// Offset::0x2406EB0;
void FCameraComponent::SetAspectRatio(float InAspectRatio);


// Function  Engine.CameraComponent.SetConstraintAspectRatio
// Offset::0x6348EF0;
void FCameraComponent::SetConstraintAspectRatio(bool bInConstrainAspectRatio);


// Function  Engine.CameraComponent.SetFieldOfView
// Offset::0x57C10B0;
void FCameraComponent::SetFieldOfView(float InFieldOfView);


// Function  Engine.CameraComponent.SetOrthoFarClipPlane
// Offset::0x6348FB0;
void FCameraComponent::SetOrthoFarClipPlane(float InOrthoFarClipPlane);


// Function  Engine.CameraComponent.SetOrthoNearClipPlane
// Offset::0x6349050;
void FCameraComponent::SetOrthoNearClipPlane(float InOrthoNearClipPlane);


// Function  Engine.CameraComponent.SetOrthoWidth
// Offset::0x6349100;
void FCameraComponent::SetOrthoWidth(float InOrthoWidth);


// Function  Engine.CameraComponent.SetPostProcessBlendWeight
// Offset::0x6348CD0;
void FCameraComponent::SetPostProcessBlendWeight(float InPostProcessBlendWeight);


// Function  Engine.CameraComponent.SetProjectionMode
// Offset::0x6348D80;
void FCameraComponent::SetProjectionMode(enum class ECameraProjectionMode InProjectionMode);


// Function  Engine.CameraComponent.SetUseFieldOfViewForLOD
// Offset::0x6348E20;
void FCameraComponent::SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);


// Function  CinematicCamera.CineCameraComponent.GetDefaultFilmbackPresetName
// Offset::0x57631C0;
FString FCineCameraComponent::GetDefaultFilmbackPresetName();


// Function  CinematicCamera.CineCameraComponent.GetFilmbackPresetName
// Offset::0x57632F0;
FString FCineCameraComponent::GetFilmbackPresetName();


// Function  CinematicCamera.CineCameraComponent.GetFilmbackPresetsCopy
// Offset::0x5762EF0;
TArray<FNamedFilmbackPreset> FCineCameraComponent::GetFilmbackPresetsCopy();


// Function  CinematicCamera.CineCameraComponent.GetHorizontalFieldOfView
// Offset::0x57633A0;
float FCineCameraComponent::GetHorizontalFieldOfView();


// Function  CinematicCamera.CineCameraComponent.GetLensPresetName
// Offset::0x5763090;
FString FCineCameraComponent::GetLensPresetName();


// Function  CinematicCamera.CineCameraComponent.GetLensPresetsCopy
// Offset::0x5762E00;
TArray<FNamedLensPreset> FCineCameraComponent::GetLensPresetsCopy();


// Function  CinematicCamera.CineCameraComponent.GetVerticalFieldOfView
// Offset::0x5763370;
float FCineCameraComponent::GetVerticalFieldOfView();


// Function  CinematicCamera.CineCameraComponent.SetCurrentFocalLength
// Offset::0x57633D0;
void FCineCameraComponent::SetCurrentFocalLength(float InFocalLength);


// Function  CinematicCamera.CineCameraComponent.SetFilmbackPresetByName
// Offset::0x5763110;
void FCineCameraComponent::SetFilmbackPresetByName(FString InPresetName);


// Function  CinematicCamera.CineCameraComponent.SetLensPresetByName
// Offset::0x5762FE0;
void FCineCameraComponent::SetLensPresetByName(FString InPresetName);


// Function  AudioLinkEngine.AudioLinkBlueprintInterface.IsLinkPlaying
// Offset::0x576BC20;
bool FAudioLinkBlueprintInterface::IsLinkPlaying();


// Function  AudioLinkEngine.AudioLinkBlueprintInterface.PlayLink
// Offset::0x576BC70;
void FAudioLinkBlueprintInterface::PlayLink(float StartTime);


// Function  AudioLinkEngine.AudioLinkBlueprintInterface.SetLinkSound
// Offset::0x576BD10;
void FAudioLinkBlueprintInterface::SetLinkSound(FSoundBase* NewSound);


// Function  AudioLinkEngine.AudioLinkBlueprintInterface.StopLink
// Offset::0x576BC50;
void FAudioLinkBlueprintInterface::StopLink();


// Function  AudioMixer.AudioMixerBlueprintLibrary.AddMasterSubmixEffect
// Offset::0x57B7F70;
void FAudioMixerBlueprintLibrary::AddMasterSubmixEffect(FObject* WorldContextObject,FSoundEffectSubmixPreset* SubmixEffectPreset);


// Function  AudioMixer.AudioMixerBlueprintLibrary.AddSourceEffectToPresetChain
// Offset::0x57B6060;
void FAudioMixerBlueprintLibrary::AddSourceEffectToPresetChain(FObject* WorldContextObject,FSoundEffectSourcePresetChain* PresetChain,FSourceEffectChainEntry Entry);


// Function  AudioMixer.AudioMixerBlueprintLibrary.AddSubmixEffect
// Offset::0x57B7CD0;
int32_t FAudioMixerBlueprintLibrary::AddSubmixEffect(FObject* WorldContextObject,FSoundSubmix* SoundSubmix,FSoundEffectSubmixPreset* SubmixEffectPreset);


// Function  AudioMixer.AudioMixerBlueprintLibrary.ClearMasterSubmixEffects
// Offset::0x57B7E00;
void FAudioMixerBlueprintLibrary::ClearMasterSubmixEffects(FObject* WorldContextObject);


// Function  AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffectChainOverride
// Offset::0x57B73A0;
void FAudioMixerBlueprintLibrary::ClearSubmixEffectChainOverride(FObject* WorldContextObject,FSoundSubmix* SoundSubmix,float FadeTimeSec);


// Function  AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffects
// Offset::0x57B76B0;
void FAudioMixerBlueprintLibrary::ClearSubmixEffects(FObject* WorldContextObject,FSoundSubmix* SoundSubmix);


// Function  AudioMixer.AudioMixerBlueprintLibrary.Conv_AudioOutputDeviceInfoToString
// Offset::0x57B8050;
FString FAudioMixerBlueprintLibrary::Conv_AudioOutputDeviceInfoToString(FAudioOutputDeviceInfo Info);


// Function  AudioMixer.AudioMixerBlueprintLibrary.GetAvailableAudioOutputDevices
// Offset::0x57B5710;
void FAudioMixerBlueprintLibrary::GetAvailableAudioOutputDevices(FObject* WorldContextObject,FDelegate OnObtainDevicesEvent);


// Function  AudioMixer.AudioMixerBlueprintLibrary.GetCurrentAudioOutputDeviceName
// Offset::0x57B5610;
void FAudioMixerBlueprintLibrary::GetCurrentAudioOutputDeviceName(FObject* WorldContextObject,FDelegate OnObtainCurrentDeviceEvent);


// Function  AudioMixer.AudioMixerBlueprintLibrary.GetMagnitudeForFrequencies
// Offset::0x57B6360;
void FAudioMixerBlueprintLibrary::GetMagnitudeForFrequencies(FObject* WorldContextObject,TArray<float> Frequencies,TArray<float> Magnitudes,FSoundSubmix* SubmixToAnalyze);


// Function  AudioMixer.AudioMixerBlueprintLibrary.GetNumberOfEntriesInSourceEffectChain
// Offset::0x57B5CD0;
int32_t FAudioMixerBlueprintLibrary::GetNumberOfEntriesInSourceEffectChain(FObject* WorldContextObject,FSoundEffectSourcePresetChain* PresetChain);


// Function  AudioMixer.AudioMixerBlueprintLibrary.GetPhaseForFrequencies
// Offset::0x57B61A0;
void FAudioMixerBlueprintLibrary::GetPhaseForFrequencies(FObject* WorldContextObject,TArray<float> Frequencies,TArray<float> Phases,FSoundSubmix* SubmixToAnalyze);


// Function  AudioMixer.AudioMixerBlueprintLibrary.IsAudioBusActive
// Offset::0x57B5810;
bool FAudioMixerBlueprintLibrary::IsAudioBusActive(FObject* WorldContextObject,FAudioBus* AudioBus);


// Function  AudioMixer.AudioMixerBlueprintLibrary.MakeFullSpectrumSpectralAnalysisBandSettings
// Offset::0x57B66D0;
TArray<FSoundSubmixSpectralAnalysisBandSettings> FAudioMixerBlueprintLibrary::MakeFullSpectrumSpectralAnalysisBandSettings(int32_t InNumBands,float InMinimumFrequency,float InMaximumFrequency,int32_t InAttackTimeMsec,int32_t InReleaseTimeMsec);


// Function  AudioMixer.AudioMixerBlueprintLibrary.MakeMusicalSpectralAnalysisBandSettings
// Offset::0x57B68D0;
TArray<FSoundSubmixSpectralAnalysisBandSettings> FAudioMixerBlueprintLibrary::MakeMusicalSpectralAnalysisBandSettings(int32_t InNumSemitones,enum class EMusicalNoteName InStartingMusicalNote,int32_t InStartingOctave,int32_t InAttackTimeMsec,int32_t InReleaseTimeMsec);


// Function  AudioMixer.AudioMixerBlueprintLibrary.MakePresetSpectralAnalysisBandSettings
// Offset::0x57B6520;
TArray<FSoundSubmixSpectralAnalysisBandSettings> FAudioMixerBlueprintLibrary::MakePresetSpectralAnalysisBandSettings(enum class EAudioSpectrumBandPresetType InBandPresetType,int32_t InNumBands,int32_t InAttackTimeMsec,int32_t InReleaseTimeMsec);


// Function  AudioMixer.AudioMixerBlueprintLibrary.PauseRecordingOutput
// Offset::0x57B6EF0;
void FAudioMixerBlueprintLibrary::PauseRecordingOutput(FObject* WorldContextObject,FSoundSubmix* SubmixToPause);


// Function  AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundCueForPlayback
// Offset::0x57B5B50;
void FAudioMixerBlueprintLibrary::PrimeSoundCueForPlayback(FSoundCue* SoundCue);


// Function  AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundForPlayback
// Offset::0x57B5BE0;
void FAudioMixerBlueprintLibrary::PrimeSoundForPlayback(FSoundWave* SoundWave,FDelegate OnLoadCompletion);


// Function  AudioMixer.AudioMixerBlueprintLibrary.RemoveMasterSubmixEffect
// Offset::0x57B7E90;
void FAudioMixerBlueprintLibrary::RemoveMasterSubmixEffect(FObject* WorldContextObject,FSoundEffectSubmixPreset* SubmixEffectPreset);


// Function  AudioMixer.AudioMixerBlueprintLibrary.RemoveSourceEffectFromPresetChain
// Offset::0x57B5F30;
void FAudioMixerBlueprintLibrary::RemoveSourceEffectFromPresetChain(FObject* WorldContextObject,FSoundEffectSourcePresetChain* PresetChain,int32_t EntryIndex);


// Function  AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffect
// Offset::0x57B7BA0;
void FAudioMixerBlueprintLibrary::RemoveSubmixEffect(FObject* WorldContextObject,FSoundSubmix* SoundSubmix,FSoundEffectSubmixPreset* SubmixEffectPreset);


// Function  AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectAtIndex
// Offset::0x57B7A70;
void FAudioMixerBlueprintLibrary::RemoveSubmixEffectAtIndex(FObject* WorldContextObject,FSoundSubmix* SoundSubmix,int32_t SubmixChainIndex);


// Function  AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPreset
// Offset::0x57B7BA0;
void FAudioMixerBlueprintLibrary::RemoveSubmixEffectPreset(FObject* WorldContextObject,FSoundSubmix* SoundSubmix,FSoundEffectSubmixPreset* SubmixEffectPreset);


// Function  AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPresetAtIndex
// Offset::0x57B7A70;
void FAudioMixerBlueprintLibrary::RemoveSubmixEffectPresetAtIndex(FObject* WorldContextObject,FSoundSubmix* SoundSubmix,int32_t SubmixChainIndex);


// Function  AudioMixer.AudioMixerBlueprintLibrary.ReplaceSoundEffectSubmix
// Offset::0x57B7900;
void FAudioMixerBlueprintLibrary::ReplaceSoundEffectSubmix(FObject* WorldContextObject,FSoundSubmix* InSoundSubmix,int32_t SubmixChainIndex,FSoundEffectSubmixPreset* SubmixEffectPreset);


// Function  AudioMixer.AudioMixerBlueprintLibrary.ReplaceSubmixEffect
// Offset::0x57B7790;
void FAudioMixerBlueprintLibrary::ReplaceSubmixEffect(FObject* WorldContextObject,FSoundSubmix* InSoundSubmix,int32_t SubmixChainIndex,FSoundEffectSubmixPreset* SubmixEffectPreset);


// Function  AudioMixer.AudioMixerBlueprintLibrary.ResumeRecordingOutput
// Offset::0x57B6E10;
void FAudioMixerBlueprintLibrary::ResumeRecordingOutput(FObject* WorldContextObject,FSoundSubmix* SubmixToPause);


// Function  AudioMixer.AudioMixerBlueprintLibrary.SetBypassSourceEffectChainEntry
// Offset::0x57B5DB0;
void FAudioMixerBlueprintLibrary::SetBypassSourceEffectChainEntry(FObject* WorldContextObject,FSoundEffectSourcePresetChain* PresetChain,int32_t EntryIndex,bool bBypassed);


// Function  AudioMixer.AudioMixerBlueprintLibrary.SetSubmixEffectChainOverride
// Offset::0x57B74D0;
void FAudioMixerBlueprintLibrary::SetSubmixEffectChainOverride(FObject* WorldContextObject,FSoundSubmix* SoundSubmix,TArray<FSoundEffectSubmixPreset*> SubmixEffectPresetChain,float FadeTimeSec);


// Function  AudioMixer.AudioMixerBlueprintLibrary.StartAnalyzingOutput
// Offset::0x57B6BB0;
void FAudioMixerBlueprintLibrary::StartAnalyzingOutput(FObject* WorldContextObject,FSoundSubmix* SubmixToAnalyze,enum class EFFTSize FFTSize,enum class EFFTPeakInterpolationMethod InterpolationMethod,enum class EFFTWindowType WindowType,float HopSize,enum class EAudioSpectrumType SpectrumType);


// Function  AudioMixer.AudioMixerBlueprintLibrary.StartAudioBus
// Offset::0x57B59D0;
void FAudioMixerBlueprintLibrary::StartAudioBus(FObject* WorldContextObject,FAudioBus* AudioBus);


// Function  AudioMixer.AudioMixerBlueprintLibrary.StartRecordingOutput
// Offset::0x57B7270;
void FAudioMixerBlueprintLibrary::StartRecordingOutput(FObject* WorldContextObject,float ExpectedDuration,FSoundSubmix* SubmixToRecord);


// Function  AudioMixer.AudioMixerBlueprintLibrary.StopAnalyzingOutput
// Offset::0x57B6AD0;
void FAudioMixerBlueprintLibrary::StopAnalyzingOutput(FObject* WorldContextObject,FSoundSubmix* SubmixToStopAnalyzing);


// Function  AudioMixer.AudioMixerBlueprintLibrary.StopAudioBus
// Offset::0x57B58F0;
void FAudioMixerBlueprintLibrary::StopAudioBus(FObject* WorldContextObject,FAudioBus* AudioBus);


// Function  AudioMixer.AudioMixerBlueprintLibrary.StopRecordingOutput
// Offset::0x57B6FD0;
FSoundWave* FAudioMixerBlueprintLibrary::StopRecordingOutput(FObject* WorldContextObject,enum class EAudioRecordingExportType ExportType,FString Name,FString Path,FSoundSubmix* SubmixToRecord,FSoundWave* ExistingSoundWaveToOverwrite);


// Function  AudioMixer.AudioMixerBlueprintLibrary.SwapAudioOutputDevice
// Offset::0x57B54B0;
void FAudioMixerBlueprintLibrary::SwapAudioOutputDevice(FObject* WorldContextObject,FString NewDeviceId,FDelegate OnCompletedDeviceSwap);


// Function  AudioMixer.AudioMixerBlueprintLibrary.TrimAudioCache
// Offset::0x57B5AB0;
float FAudioMixerBlueprintLibrary::TrimAudioCache(float InMegabytesToFree);


// Function  AudioMixer.QuartzClockHandle.GetBeatsPerMinute
// Offset::0x57B9770;
float FQuartzClockHandle::GetBeatsPerMinute(FObject* WorldContextObject);


// Function  AudioMixer.QuartzClockHandle.GetCurrentTimestamp
// Offset::0x57BB190;
FQuartzTransportTimeStamp FQuartzClockHandle::GetCurrentTimestamp(FObject* WorldContextObject);


// Function  AudioMixer.QuartzClockHandle.GetDurationOfQuantizationTypeInSeconds
// Offset::0x57BB240;
float FQuartzClockHandle::GetDurationOfQuantizationTypeInSeconds(FObject* WorldContextObject,enum class EQuartzCommandQuantization QuantizationType,float Multiplier);


// Function  AudioMixer.QuartzClockHandle.GetEstimatedRunTime
// Offset::0x57BB0F0;
float FQuartzClockHandle::GetEstimatedRunTime(FObject* WorldContextObject);


// Function  AudioMixer.QuartzClockHandle.GetMillisecondsPerTick
// Offset::0x57B99F0;
float FQuartzClockHandle::GetMillisecondsPerTick(FObject* WorldContextObject);


// Function  AudioMixer.QuartzClockHandle.GetSecondsPerTick
// Offset::0x57B98B0;
float FQuartzClockHandle::GetSecondsPerTick(FObject* WorldContextObject);


// Function  AudioMixer.QuartzClockHandle.GetThirtySecondNotesPerMinute
// Offset::0x57B9810;
float FQuartzClockHandle::GetThirtySecondNotesPerMinute(FObject* WorldContextObject);


// Function  AudioMixer.QuartzClockHandle.GetTicksPerSecond
// Offset::0x57B9950;
float FQuartzClockHandle::GetTicksPerSecond(FObject* WorldContextObject);


// Function  AudioMixer.QuartzClockHandle.IsClockRunning
// Offset::0x57BB390;
bool FQuartzClockHandle::IsClockRunning(FObject* WorldContextObject);


// Function  AudioMixer.QuartzClockHandle.PauseClock
// Offset::0x57BB970;
void FQuartzClockHandle::PauseClock(FObject* WorldContextObject,FQuartzClockHandle* ClockHandle);


// Function  AudioMixer.QuartzClockHandle.ResetTransport
// Offset::0x57BB770;
void FQuartzClockHandle::ResetTransport(FObject* WorldContextObject,FDelegate InDelegate);


// Function  AudioMixer.QuartzClockHandle.ResetTransportQuantized
// Offset::0x57BB430;
void FQuartzClockHandle::ResetTransportQuantized(FObject* WorldContextObject,FQuartzQuantizationBoundary InQuantizationBoundary,FDelegate InDelegate,FQuartzClockHandle* ClockHandle);


// Function  AudioMixer.QuartzClockHandle.ResumeClock
// Offset::0x57BB880;
void FQuartzClockHandle::ResumeClock(FObject* WorldContextObject,FQuartzClockHandle* ClockHandle);


// Function  AudioMixer.QuartzClockHandle.SetBeatsPerMinute
// Offset::0x57B9A90;
void FQuartzClockHandle::SetBeatsPerMinute(FObject* WorldContextObject,FQuartzQuantizationBoundary QuantizationBoundary,FDelegate Delegate,FQuartzClockHandle* ClockHandle,float BeatsPerMinute);


// Function  AudioMixer.QuartzClockHandle.SetMillisecondsPerTick
// Offset::0x57BA590;
void FQuartzClockHandle::SetMillisecondsPerTick(FObject* WorldContextObject,FQuartzQuantizationBoundary QuantizationBoundary,FDelegate Delegate,FQuartzClockHandle* ClockHandle,float MillisecondsPerTick);


// Function  AudioMixer.QuartzClockHandle.SetSecondsPerTick
// Offset::0x57BA010;
void FQuartzClockHandle::SetSecondsPerTick(FObject* WorldContextObject,FQuartzQuantizationBoundary QuantizationBoundary,FDelegate Delegate,FQuartzClockHandle* ClockHandle,float SecondsPerTick);


// Function  AudioMixer.QuartzClockHandle.SetThirtySecondNotesPerMinute
// Offset::0x57B9D50;
void FQuartzClockHandle::SetThirtySecondNotesPerMinute(FObject* WorldContextObject,FQuartzQuantizationBoundary QuantizationBoundary,FDelegate Delegate,FQuartzClockHandle* ClockHandle,float ThirtySecondsNotesPerMinute);


// Function  AudioMixer.QuartzClockHandle.SetTicksPerSecond
// Offset::0x57BA2D0;
void FQuartzClockHandle::SetTicksPerSecond(FObject* WorldContextObject,FQuartzQuantizationBoundary QuantizationBoundary,FDelegate Delegate,FQuartzClockHandle* ClockHandle,float TicksPerSecond);


// Function  AudioMixer.QuartzClockHandle.StartClock
// Offset::0x57BB880;
void FQuartzClockHandle::StartClock(FObject* WorldContextObject,FQuartzClockHandle* ClockHandle);


// Function  AudioMixer.QuartzClockHandle.StartOtherClock
// Offset::0x57BADB0;
void FQuartzClockHandle::StartOtherClock(FObject* WorldContextObject,FName OtherClockName,FQuartzQuantizationBoundary InQuantizationBoundary,FDelegate InDelegate);


// Function  AudioMixer.QuartzClockHandle.StopClock
// Offset::0x57BBA60;
void FQuartzClockHandle::StopClock(FObject* WorldContextObject,bool CancelPendingEvents,FQuartzClockHandle* ClockHandle);


// Function  AudioMixer.QuartzClockHandle.SubscribeToAllQuantizationEvents
// Offset::0x57BAA80;
void FQuartzClockHandle::SubscribeToAllQuantizationEvents(FObject* WorldContextObject,FDelegate OnQuantizationEvent,FQuartzClockHandle* ClockHandle);


// Function  AudioMixer.QuartzClockHandle.SubscribeToQuantizationEvent
// Offset::0x57BABF0;
void FQuartzClockHandle::SubscribeToQuantizationEvent(FObject* WorldContextObject,enum class EQuartzCommandQuantization InQuantizationBoundary,FDelegate OnQuantizationEvent,FQuartzClockHandle* ClockHandle);


// Function  AudioMixer.QuartzClockHandle.UnsubscribeFromAllTimeDivisions
// Offset::0x57BA850;
void FQuartzClockHandle::UnsubscribeFromAllTimeDivisions(FObject* WorldContextObject,FQuartzClockHandle* ClockHandle);


// Function  AudioMixer.QuartzClockHandle.UnsubscribeFromTimeDivision
// Offset::0x57BA940;
void FQuartzClockHandle::UnsubscribeFromTimeDivision(FObject* WorldContextObject,enum class EQuartzCommandQuantization InQuantizationBoundary,FQuartzClockHandle* ClockHandle);


// Function  AudioMixer.SubmixEffectDynamicsProcessorPreset.ResetKey
// Offset::0x57BE4D0;
void FSubmixEffectDynamicsProcessorPreset::ResetKey();


// Function  AudioMixer.SubmixEffectDynamicsProcessorPreset.SetAudioBus
// Offset::0x57BE430;
void FSubmixEffectDynamicsProcessorPreset::SetAudioBus(FAudioBus* AudioBus);


// Function  AudioMixer.SubmixEffectDynamicsProcessorPreset.SetExternalSubmix
// Offset::0x57BE390;
void FSubmixEffectDynamicsProcessorPreset::SetExternalSubmix(FSoundSubmix* Submix);


// Function  AudioMixer.SubmixEffectDynamicsProcessorPreset.SetSettings
// Offset::0x57BE270;
void FSubmixEffectDynamicsProcessorPreset::SetSettings(FSubmixEffectDynamicsProcessorSettings Settings);


// Function  AudioMixer.SubmixEffectSubmixEQPreset.SetSettings
// Offset::0x2B26E50;
void FSubmixEffectSubmixEQPreset::SetSettings(FSubmixEffectSubmixEQSettings InSettings);


// Function  AudioMixer.SubmixEffectReverbPreset.SetSettings
// Offset::0x57BEF10;
void FSubmixEffectReverbPreset::SetSettings(FSubmixEffectReverbSettings InSettings);


// Function  AudioMixer.SubmixEffectReverbPreset.SetSettingsWithReverbEffect
// Offset::0x57BEDE0;
void FSubmixEffectReverbPreset::SetSettingsWithReverbEffect(FReverbEffect* InReverbEffect,float WetLevel,float DryLevel);


// Function  AudioMixer.QuartzSubsystem.CreateNewClock
// Offset::0x57C0040;
FQuartzClockHandle* FQuartzSubsystem::CreateNewClock(FObject* WorldContextObject,FName ClockName,FQuartzClockSettings InSettings,bool bOverrideSettingsIfClockExists,bool bUseAudioEngineClockManager);


// Function  AudioMixer.QuartzSubsystem.DeleteClockByHandle
// Offset::0x57BFE70;
void FQuartzSubsystem::DeleteClockByHandle(FObject* WorldContextObject,FQuartzClockHandle* InClockHandle);


// Function  AudioMixer.QuartzSubsystem.DeleteClockByName
// Offset::0x57BFF60;
void FQuartzSubsystem::DeleteClockByName(FObject* WorldContextObject,FName ClockName);


// Function  AudioMixer.QuartzSubsystem.DoesClockExist
// Offset::0x57BFC90;
bool FQuartzSubsystem::DoesClockExist(FObject* WorldContextObject,FName ClockName);


// Function  AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadAverageLatency
// Offset::0x57BF690;
float FQuartzSubsystem::GetAudioRenderThreadToGameThreadAverageLatency();


// Function  AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadMaxLatency
// Offset::0x57BF630;
float FQuartzSubsystem::GetAudioRenderThreadToGameThreadMaxLatency();


// Function  AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadMinLatency
// Offset::0x57BF660;
float FQuartzSubsystem::GetAudioRenderThreadToGameThreadMinLatency();


// Function  AudioMixer.QuartzSubsystem.GetCurrentClockTimestamp
// Offset::0x57BF900;
FQuartzTransportTimeStamp FQuartzSubsystem::GetCurrentClockTimestamp(FObject* WorldContextObject,FName InClockName);


// Function  AudioMixer.QuartzSubsystem.GetDurationOfQuantizationTypeInSeconds
// Offset::0x57BFA00;
float FQuartzSubsystem::GetDurationOfQuantizationTypeInSeconds(FObject* WorldContextObject,FName ClockName,enum class EQuartzCommandQuantization QuantizationType,float Multiplier);


// Function  AudioMixer.QuartzSubsystem.GetEstimatedClockRunTime
// Offset::0x57BF800;
float FQuartzSubsystem::GetEstimatedClockRunTime(FObject* WorldContextObject,FName InClockName);


// Function  AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadAverageLatency
// Offset::0x57BF760;
float FQuartzSubsystem::GetGameThreadToAudioRenderThreadAverageLatency(FObject* WorldContextObject);


// Function  AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadMaxLatency
// Offset::0x57BF6C0;
float FQuartzSubsystem::GetGameThreadToAudioRenderThreadMaxLatency(FObject* WorldContextObject);


// Function  AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadMinLatency
// Offset::0x57BF6C0;
float FQuartzSubsystem::GetGameThreadToAudioRenderThreadMinLatency(FObject* WorldContextObject);


// Function  AudioMixer.QuartzSubsystem.GetHandleForClock
// Offset::0x57BFD80;
FQuartzClockHandle* FQuartzSubsystem::GetHandleForClock(FObject* WorldContextObject,FName ClockName);


// Function  AudioMixer.QuartzSubsystem.GetRoundTripAverageLatency
// Offset::0x57BF590;
float FQuartzSubsystem::GetRoundTripAverageLatency(FObject* WorldContextObject);


// Function  AudioMixer.QuartzSubsystem.GetRoundTripMaxLatency
// Offset::0x57BF450;
float FQuartzSubsystem::GetRoundTripMaxLatency(FObject* WorldContextObject);


// Function  AudioMixer.QuartzSubsystem.GetRoundTripMinLatency
// Offset::0x57BF4F0;
float FQuartzSubsystem::GetRoundTripMinLatency(FObject* WorldContextObject);


// Function  AudioMixer.QuartzSubsystem.IsClockRunning
// Offset::0x57BFBA0;
bool FQuartzSubsystem::IsClockRunning(FObject* WorldContextObject,FName ClockName);


// Function  AudioMixer.QuartzSubsystem.IsQuartzEnabled
// Offset::0x20074E0;
bool FQuartzSubsystem::IsQuartzEnabled();


// Function  AssetRegistry.AssetRegistryHelpers.CreateAssetData
// Offset::0x583B630;
FAssetData FAssetRegistryHelpers::CreateAssetData(FObject* InAsset,bool bAllowBlueprintClass);


// Function  AssetRegistry.AssetRegistryHelpers.GetAsset
// Offset::0x583ADC0;
FObject* FAssetRegistryHelpers::GetAsset(FAssetData InAssetData);


// Function  AssetRegistry.AssetRegistryHelpers.GetAssetRegistry
// Offset::0x583B860;
TScriptInterface<IAssetRegistry> FAssetRegistryHelpers::GetAssetRegistry();


// Function  AssetRegistry.AssetRegistryHelpers.GetClass
// Offset::0x583AEE0;
FObject* FAssetRegistryHelpers::GetClass(FAssetData InAssetData);


// Function  AssetRegistry.AssetRegistryHelpers.GetExportTextName
// Offset::0x583AB40;
FString FAssetRegistryHelpers::GetExportTextName(FAssetData InAssetData);


// Function  AssetRegistry.AssetRegistryHelpers.GetFullName
// Offset::0x583B170;
FString FAssetRegistryHelpers::GetFullName(FAssetData InAssetData);


// Function  AssetRegistry.AssetRegistryHelpers.GetTagValue
// Offset::0x583A940;
bool FAssetRegistryHelpers::GetTagValue(FAssetData InAssetData,FName InTagName,FString OutTagValue);


// Function  AssetRegistry.AssetRegistryHelpers.IsAssetLoaded
// Offset::0x583ACA0;
bool FAssetRegistryHelpers::IsAssetLoaded(FAssetData InAssetData);


// Function  AssetRegistry.AssetRegistryHelpers.IsRedirector
// Offset::0x583B2D0;
bool FAssetRegistryHelpers::IsRedirector(FAssetData InAssetData);


// Function  AssetRegistry.AssetRegistryHelpers.IsUAsset
// Offset::0x583B3F0;
bool FAssetRegistryHelpers::IsUAsset(FAssetData InAssetData);


// Function  AssetRegistry.AssetRegistryHelpers.IsValid
// Offset::0x583B510;
bool FAssetRegistryHelpers::IsValid(FAssetData InAssetData);


// Function  AssetRegistry.AssetRegistryHelpers.SetFilterTagsAndValues
// Offset::0x583A5A0;
FARFilter FAssetRegistryHelpers::SetFilterTagsAndValues(FARFilter InFilter,TArray<FTagAndValue> InTagsAndValues);


// Function  AssetRegistry.AssetRegistryHelpers.ToSoftObjectPath
// Offset::0x583B000;
FSoftObjectPath FAssetRegistryHelpers::ToSoftObjectPath(FAssetData InAssetData);


// Function  AssetRegistry.AssetRegistry.GetAllAssets
// Offset::0x583D240;
bool FAssetRegistry::GetAllAssets(TArray<FAssetData> OutAssetData,bool bIncludeOnlyOnDiskAssets);


// Function  AssetRegistry.AssetRegistry.GetAllCachedPaths
// Offset::0x583CE70;
void FAssetRegistry::GetAllCachedPaths(TArray<FString> OutPathList);


// Function  AssetRegistry.AssetRegistry.GetAssetByObjectPath
// Offset::0x583D3C0;
FAssetData FAssetRegistry::GetAssetByObjectPath(FName ObjectPath,bool bIncludeOnlyOnDiskAssets);


// Function  AssetRegistry.AssetRegistry.GetAssets
// Offset::0x583D600;
bool FAssetRegistry::GetAssets(FARFilter Filter,TArray<FAssetData> OutAssetData);


// Function  AssetRegistry.AssetRegistry.GetAssetsByClass
// Offset::0x583D840;
bool FAssetRegistry::GetAssetsByClass(FName ClassName,TArray<FAssetData> OutAssetData,bool bSearchSubClasses);


// Function  AssetRegistry.AssetRegistry.GetAssetsByPackageName
// Offset::0x583DEB0;
bool FAssetRegistry::GetAssetsByPackageName(FName PackageName,TArray<FAssetData> OutAssetData,bool bIncludeOnlyOnDiskAssets);


// Function  AssetRegistry.AssetRegistry.GetAssetsByPath
// Offset::0x583DC90;
bool FAssetRegistry::GetAssetsByPath(FName PackagePath,TArray<FAssetData> OutAssetData,bool bRecursive,bool bIncludeOnlyOnDiskAssets);


// Function  AssetRegistry.AssetRegistry.GetAssetsByPaths
// Offset::0x583DA10;
bool FAssetRegistry::GetAssetsByPaths(TArray<FName> PackagePaths,TArray<FAssetData> OutAssetData,bool bRecursive,bool bIncludeOnlyOnDiskAssets);


// Function  AssetRegistry.AssetRegistry.GetSubPaths
// Offset::0x583CCD0;
void FAssetRegistry::GetSubPaths(FString InBasePath,TArray<FString> OutPathList,bool bInRecurse);


// Function  AssetRegistry.AssetRegistry.HasAssets
// Offset::0x583E080;
bool FAssetRegistry::HasAssets(FName PackagePath,bool bRecursive);


// Function  AssetRegistry.AssetRegistry.IsLoadingAssets
// Offset::0x583C1E0;
bool FAssetRegistry::IsLoadingAssets();


// Function  AssetRegistry.AssetRegistry.IsSearchAllAssets
// Offset::0x583C4B0;
bool FAssetRegistry::IsSearchAllAssets();


// Function  AssetRegistry.AssetRegistry.IsSearchAsync
// Offset::0x583C480;
bool FAssetRegistry::IsSearchAsync();


// Function  AssetRegistry.AssetRegistry.K2_GetDependencies
// Offset::0x583D0D0;
bool FAssetRegistry::K2_GetDependencies(FName PackageName,FAssetRegistryDependencyOptions DependencyOptions,TArray<FName> OutDependencies);


// Function  AssetRegistry.AssetRegistry.K2_GetReferencers
// Offset::0x583CF60;
bool FAssetRegistry::K2_GetReferencers(FName PackageName,FAssetRegistryDependencyOptions ReferenceOptions,TArray<FName> OutReferencers);


// Function  AssetRegistry.AssetRegistry.PrioritizeSearchPath
// Offset::0x583C300;
void FAssetRegistry::PrioritizeSearchPath(FString PathToPrioritize);


// Function  AssetRegistry.AssetRegistry.RunAssetsThroughFilter
// Offset::0x583CAA0;
void FAssetRegistry::RunAssetsThroughFilter(TArray<FAssetData> AssetDataList,FARFilter Filter);


// Function  AssetRegistry.AssetRegistry.ScanFilesSynchronous
// Offset::0x583C580;
void FAssetRegistry::ScanFilesSynchronous(TArray<FString> InFilePaths,bool bForceRescan);


// Function  AssetRegistry.AssetRegistry.ScanModifiedAssetFiles
// Offset::0x583C210;
void FAssetRegistry::ScanModifiedAssetFiles(TArray<FString> InFilePaths);


// Function  AssetRegistry.AssetRegistry.ScanPathsSynchronous
// Offset::0x583C6D0;
void FAssetRegistry::ScanPathsSynchronous(TArray<FString> InPaths,bool bForceRescan,bool bIgnoreDenyListScanFilters);


// Function  AssetRegistry.AssetRegistry.SearchAllAssets
// Offset::0x583C4E0;
void FAssetRegistry::SearchAllAssets(bool bSynchronousSearch);


// Function  AssetRegistry.AssetRegistry.UseFilterToExcludeAssets
// Offset::0x583C870;
void FAssetRegistry::UseFilterToExcludeAssets(TArray<FAssetData> AssetDataList,FARFilter Filter);


// Function  AssetRegistry.AssetRegistry.WaitForCompletion
// Offset::0x583C460;
void FAssetRegistry::WaitForCompletion();


// Function  AssetRegistry.AssetRegistry.WaitForPackage
// Offset::0x583C3B0;
void FAssetRegistry::WaitForPackage(FString PackageName);


// Function  GameplayTags.BlueprintGameplayTagLibrary.AddGameplayTag
// Offset::0x58525A0;
void FBlueprintGameplayTagLibrary::AddGameplayTag(FGameplayTagContainer TagContainer,FGameplayTag Tag);


// Function  GameplayTags.BlueprintGameplayTagLibrary.AppendGameplayTagContainers
// Offset::0x5852340;
void FBlueprintGameplayTagLibrary::AppendGameplayTagContainers(FGameplayTagContainer InOutTagContainer,FGameplayTagContainer InTagContainer);


// Function  GameplayTags.BlueprintGameplayTagLibrary.BreakGameplayTagContainer
// Offset::0x5851CB0;
void FBlueprintGameplayTagLibrary::BreakGameplayTagContainer(FGameplayTagContainer GameplayTagContainer,TArray<FGameplayTag> GameplayTags);


// Function  GameplayTags.BlueprintGameplayTagLibrary.DoesContainerMatchTagQuery
// Offset::0x1A75030;
bool FBlueprintGameplayTagLibrary::DoesContainerMatchTagQuery(FGameplayTagContainer TagContainer,FGameplayTagQuery TagQuery);


// Function  GameplayTags.BlueprintGameplayTagLibrary.DoesTagAssetInterfaceHaveTag
// Offset::0x5851940;
bool FBlueprintGameplayTagLibrary::DoesTagAssetInterfaceHaveTag(TScriptInterface<IGameplayTagAssetInterface> TagContainerInterface,FGameplayTag Tag);


// Function  GameplayTags.BlueprintGameplayTagLibrary.EqualEqual_GameplayTag
// Offset::0x1FF3A20;
bool FBlueprintGameplayTagLibrary::EqualEqual_GameplayTag(FGameplayTag A,FGameplayTag B);


// Function  GameplayTags.BlueprintGameplayTagLibrary.EqualEqual_GameplayTagContainer
// Offset::0x58521F0;
bool FBlueprintGameplayTagLibrary::EqualEqual_GameplayTagContainer(FGameplayTagContainer A,FGameplayTagContainer B);


// Function  GameplayTags.BlueprintGameplayTagLibrary.GetAllActorsOfClassMatchingTagQuery
// Offset::0x58526B0;
void FBlueprintGameplayTagLibrary::GetAllActorsOfClassMatchingTagQuery(FObject* WorldContextObject,FActor* ActorClass,FGameplayTagQuery GameplayTagQuery,TArray<FActor*> OutActors);


// Function  GameplayTags.BlueprintGameplayTagLibrary.GetDebugStringFromGameplayTag
// Offset::0x1FF3B00;
FString FBlueprintGameplayTagLibrary::GetDebugStringFromGameplayTag(FGameplayTag GameplayTag);


// Function  GameplayTags.BlueprintGameplayTagLibrary.GetDebugStringFromGameplayTagContainer
// Offset::0x5851570;
FString FBlueprintGameplayTagLibrary::GetDebugStringFromGameplayTagContainer(FGameplayTagContainer TagContainer);


// Function  GameplayTags.BlueprintGameplayTagLibrary.GetNumGameplayTagsInContainer
// Offset::0x5852D60;
int32_t FBlueprintGameplayTagLibrary::GetNumGameplayTagsInContainer(FGameplayTagContainer TagContainer);


// Function  GameplayTags.BlueprintGameplayTagLibrary.GetTagName
// Offset::0x5852ED0;
FName FBlueprintGameplayTagLibrary::GetTagName(FGameplayTag GameplayTag);


// Function  GameplayTags.BlueprintGameplayTagLibrary.HasAllMatchingGameplayTags
// Offset::0x5851A30;
bool FBlueprintGameplayTagLibrary::HasAllMatchingGameplayTags(TScriptInterface<IGameplayTagAssetInterface> TagContainerInterface,FGameplayTagContainer OtherContainer);


// Function  GameplayTags.BlueprintGameplayTagLibrary.HasAllTags
// Offset::0x58528B0;
bool FBlueprintGameplayTagLibrary::HasAllTags(FGameplayTagContainer TagContainer,FGameplayTagContainer OtherContainer,bool bExactMatch);


// Function  GameplayTags.BlueprintGameplayTagLibrary.HasAnyTags
// Offset::0x5852A50;
bool FBlueprintGameplayTagLibrary::HasAnyTags(FGameplayTagContainer TagContainer,FGameplayTagContainer OtherContainer,bool bExactMatch);


// Function  GameplayTags.BlueprintGameplayTagLibrary.HasTag
// Offset::0x5852BF0;
bool FBlueprintGameplayTagLibrary::HasTag(FGameplayTagContainer TagContainer,FGameplayTag Tag,bool bExactMatch);


// Function  GameplayTags.BlueprintGameplayTagLibrary.IsGameplayTagValid
// Offset::0x1FF3BD0;
bool FBlueprintGameplayTagLibrary::IsGameplayTagValid(FGameplayTag GameplayTag);


// Function  GameplayTags.BlueprintGameplayTagLibrary.IsTagQueryEmpty
// Offset::0x1A78880;
bool FBlueprintGameplayTagLibrary::IsTagQueryEmpty(FGameplayTagQuery TagQuery);


// Function  GameplayTags.BlueprintGameplayTagLibrary.MakeGameplayTagContainerFromArray
// Offset::0x5851EB0;
FGameplayTagContainer FBlueprintGameplayTagLibrary::MakeGameplayTagContainerFromArray(TArray<FGameplayTag> GameplayTags);


// Function  GameplayTags.BlueprintGameplayTagLibrary.MakeGameplayTagContainerFromTag
// Offset::0x5851DE0;
FGameplayTagContainer FBlueprintGameplayTagLibrary::MakeGameplayTagContainerFromTag(FGameplayTag SingleTag);


// Function  GameplayTags.BlueprintGameplayTagLibrary.MakeGameplayTagQuery
// Offset::0x5851B50;
FGameplayTagQuery FBlueprintGameplayTagLibrary::MakeGameplayTagQuery(FGameplayTagQuery TagQuery);


// Function  GameplayTags.BlueprintGameplayTagLibrary.MakeLiteralGameplayTag
// Offset::0x5852E30;
FGameplayTag FBlueprintGameplayTagLibrary::MakeLiteralGameplayTag(FGameplayTag Value);


// Function  GameplayTags.BlueprintGameplayTagLibrary.MakeLiteralGameplayTagContainer
// Offset::0x5851F90;
FGameplayTagContainer FBlueprintGameplayTagLibrary::MakeLiteralGameplayTagContainer(FGameplayTagContainer Value);


// Function  GameplayTags.BlueprintGameplayTagLibrary.MatchesAnyTags
// Offset::0x5852F80;
bool FBlueprintGameplayTagLibrary::MatchesAnyTags(FGameplayTag TagOne,FGameplayTagContainer OtherContainer,bool bExactMatch);


// Function  GameplayTags.BlueprintGameplayTagLibrary.MatchesTag
// Offset::0x58530F0;
bool FBlueprintGameplayTagLibrary::MatchesTag(FGameplayTag TagOne,FGameplayTag TagTwo,bool bExactMatch);


// Function  GameplayTags.BlueprintGameplayTagLibrary.NotEqual_GameplayTag
// Offset::0x1FF3940;
bool FBlueprintGameplayTagLibrary::NotEqual_GameplayTag(FGameplayTag A,FGameplayTag B);


// Function  GameplayTags.BlueprintGameplayTagLibrary.NotEqual_GameplayTagContainer
// Offset::0x58520A0;
bool FBlueprintGameplayTagLibrary::NotEqual_GameplayTagContainer(FGameplayTagContainer A,FGameplayTagContainer B);


// Function  GameplayTags.BlueprintGameplayTagLibrary.NotEqual_TagContainerTagContainer
// Offset::0x5851670;
bool FBlueprintGameplayTagLibrary::NotEqual_TagContainerTagContainer(FGameplayTagContainer A,FString B);


// Function  GameplayTags.BlueprintGameplayTagLibrary.NotEqual_TagTag
// Offset::0x5851800;
bool FBlueprintGameplayTagLibrary::NotEqual_TagTag(FGameplayTag A,FString B);


// Function  GameplayTags.BlueprintGameplayTagLibrary.RemoveGameplayTag
// Offset::0x5852480;
bool FBlueprintGameplayTagLibrary::RemoveGameplayTag(FGameplayTagContainer TagContainer,FGameplayTag Tag);


// Function  GameplayTags.GameplayTagAssetInterface.GetOwnedGameplayTags
// Offset::0x5854750;
void FGameplayTagAssetInterface::GetOwnedGameplayTags(FGameplayTagContainer TagContainer);


// Function  GameplayTags.GameplayTagAssetInterface.HasAllMatchingGameplayTags
// Offset::0x58545E0;
bool FGameplayTagAssetInterface::HasAllMatchingGameplayTags(FGameplayTagContainer TagContainer);


// Function  GameplayTags.GameplayTagAssetInterface.HasAnyMatchingGameplayTags
// Offset::0x5854510;
bool FGameplayTagAssetInterface::HasAnyMatchingGameplayTags(FGameplayTagContainer TagContainer);


// Function  GameplayTags.GameplayTagAssetInterface.HasMatchingGameplayTag
// Offset::0x58546B0;
bool FGameplayTagAssetInterface::HasMatchingGameplayTag(FGameplayTag TagToCheck);


// Function  MeshDescription.MeshDescriptionBase.ComputePolygonTriangulation
// Offset::0x588DF40;
void FMeshDescriptionBase::ComputePolygonTriangulation(FPolygonID PolygonID);


// Function  MeshDescription.MeshDescriptionBase.CreateEdge
// Offset::0x5891DB0;
FEdgeID FMeshDescriptionBase::CreateEdge(FVertexID VertexID0,FVertexID VertexID1);


// Function  MeshDescription.MeshDescriptionBase.CreateEdgeWithID
// Offset::0x5891C80;
void FMeshDescriptionBase::CreateEdgeWithID(FEdgeID EdgeID,FVertexID VertexID0,FVertexID VertexID1);


// Function  MeshDescription.MeshDescriptionBase.CreatePolygon
// Offset::0x58911C0;
FPolygonID FMeshDescriptionBase::CreatePolygon(FPolygonGroupID PolygonGroupID,TArray<FVertexInstanceID> VertexInstanceIDs,TArray<FEdgeID> NewEdgeIDs);


// Function  MeshDescription.MeshDescriptionBase.CreatePolygonGroup
// Offset::0x5890C40;
FPolygonGroupID FMeshDescriptionBase::CreatePolygonGroup();


// Function  MeshDescription.MeshDescriptionBase.CreatePolygonGroupWithID
// Offset::0x5890BA0;
void FMeshDescriptionBase::CreatePolygonGroupWithID(FPolygonGroupID PolygonGroupID);


// Function  MeshDescription.MeshDescriptionBase.CreatePolygonWithID
// Offset::0x5891000;
void FMeshDescriptionBase::CreatePolygonWithID(FPolygonID PolygonID,FPolygonGroupID PolygonGroupID,TArray<FVertexInstanceID> VertexInstanceIDs,TArray<FEdgeID> NewEdgeIDs);


// Function  MeshDescription.MeshDescriptionBase.CreateTriangle
// Offset::0x5891870;
FTriangleID FMeshDescriptionBase::CreateTriangle(FPolygonGroupID PolygonGroupID,TArray<FVertexInstanceID> VertexInstanceIDs,TArray<FEdgeID> NewEdgeIDs);


// Function  MeshDescription.MeshDescriptionBase.CreateTriangleWithID
// Offset::0x58916B0;
void FMeshDescriptionBase::CreateTriangleWithID(FTriangleID TriangleID,FPolygonGroupID PolygonGroupID,TArray<FVertexInstanceID> VertexInstanceIDs,TArray<FEdgeID> NewEdgeIDs);


// Function  MeshDescription.MeshDescriptionBase.CreateVertex
// Offset::0x58924F0;
FVertexID FMeshDescriptionBase::CreateVertex();


// Function  MeshDescription.MeshDescriptionBase.CreateVertexInstance
// Offset::0x5892210;
FVertexInstanceID FMeshDescriptionBase::CreateVertexInstance(FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.CreateVertexInstanceWithID
// Offset::0x5892130;
void FMeshDescriptionBase::CreateVertexInstanceWithID(FVertexInstanceID VertexInstanceID,FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.CreateVertexWithID
// Offset::0x5892450;
void FMeshDescriptionBase::CreateVertexWithID(FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.DeleteEdge
// Offset::0x5891B80;
void FMeshDescriptionBase::DeleteEdge(FEdgeID EdgeID,TArray<FVertexID> OrphanedVertices);


// Function  MeshDescription.MeshDescriptionBase.DeletePolygon
// Offset::0x5890E20;
void FMeshDescriptionBase::DeletePolygon(FPolygonID PolygonID,TArray<FEdgeID> OrphanedEdges,TArray<FVertexInstanceID> OrphanedVertexInstances,TArray<FPolygonGroupID> OrphanedPolygonGroups);


// Function  MeshDescription.MeshDescriptionBase.DeletePolygonGroup
// Offset::0x5890B00;
void FMeshDescriptionBase::DeletePolygonGroup(FPolygonGroupID PolygonGroupID);


// Function  MeshDescription.MeshDescriptionBase.DeleteTriangle
// Offset::0x58914D0;
void FMeshDescriptionBase::DeleteTriangle(FTriangleID TriangleID,TArray<FEdgeID> OrphanedEdges,TArray<FVertexInstanceID> OrphanedVertexInstances,TArray<FPolygonGroupID> OrphanedPolygonGroupsPtr);


// Function  MeshDescription.MeshDescriptionBase.DeleteVertex
// Offset::0x58923B0;
void FMeshDescriptionBase::DeleteVertex(FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.DeleteVertexInstance
// Offset::0x5892030;
void FMeshDescriptionBase::DeleteVertexInstance(FVertexInstanceID VertexInstanceID,TArray<FVertexID> OrphanedVertices);


// Function  MeshDescription.MeshDescriptionBase.Empty
// Offset::0x5892610;
void FMeshDescriptionBase::Empty();


// Function  MeshDescription.MeshDescriptionBase.GetEdgeConnectedPolygons
// Offset::0x588F650;
void FMeshDescriptionBase::GetEdgeConnectedPolygons(FEdgeID EdgeID,TArray<FPolygonID> OutConnectedPolygonIDs);


// Function  MeshDescription.MeshDescriptionBase.GetEdgeConnectedTriangles
// Offset::0x588F7F0;
void FMeshDescriptionBase::GetEdgeConnectedTriangles(FEdgeID EdgeID,TArray<FTriangleID> OutConnectedTriangleIDs);


// Function  MeshDescription.MeshDescriptionBase.GetEdgeCount
// Offset::0x5891A90;
int32_t FMeshDescriptionBase::GetEdgeCount();


// Function  MeshDescription.MeshDescriptionBase.GetEdgeVertex
// Offset::0x588F4C0;
FVertexID FMeshDescriptionBase::GetEdgeVertex(FEdgeID EdgeID,int32_t VertexNumber);


// Function  MeshDescription.MeshDescriptionBase.GetEdgeVertices
// Offset::0x588F3C0;
void FMeshDescriptionBase::GetEdgeVertices(FEdgeID EdgeID,TArray<FVertexID> OutVertexIDs);


// Function  MeshDescription.MeshDescriptionBase.GetNumEdgeConnectedPolygons
// Offset::0x588F5B0;
int32_t FMeshDescriptionBase::GetNumEdgeConnectedPolygons(FEdgeID EdgeID);


// Function  MeshDescription.MeshDescriptionBase.GetNumEdgeConnectedTriangles
// Offset::0x588F750;
int32_t FMeshDescriptionBase::GetNumEdgeConnectedTriangles(FEdgeID EdgeID);


// Function  MeshDescription.MeshDescriptionBase.GetNumPolygonGroupPolygons
// Offset::0x588DDA0;
int32_t FMeshDescriptionBase::GetNumPolygonGroupPolygons(FPolygonGroupID PolygonGroupID);


// Function  MeshDescription.MeshDescriptionBase.GetNumPolygonInternalEdges
// Offset::0x588E500;
int32_t FMeshDescriptionBase::GetNumPolygonInternalEdges(FPolygonID PolygonID);


// Function  MeshDescription.MeshDescriptionBase.GetNumPolygonTriangles
// Offset::0x588EA40;
int32_t FMeshDescriptionBase::GetNumPolygonTriangles(FPolygonID PolygonID);


// Function  MeshDescription.MeshDescriptionBase.GetNumPolygonVertices
// Offset::0x588E8A0;
int32_t FMeshDescriptionBase::GetNumPolygonVertices(FPolygonID PolygonID);


// Function  MeshDescription.MeshDescriptionBase.GetNumVertexConnectedEdges
// Offset::0x58906E0;
int32_t FMeshDescriptionBase::GetNumVertexConnectedEdges(FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.GetNumVertexConnectedPolygons
// Offset::0x5890200;
int32_t FMeshDescriptionBase::GetNumVertexConnectedPolygons(FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.GetNumVertexConnectedTriangles
// Offset::0x58903A0;
int32_t FMeshDescriptionBase::GetNumVertexConnectedTriangles(FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.GetNumVertexInstanceConnectedPolygons
// Offset::0x588FA80;
int32_t FMeshDescriptionBase::GetNumVertexInstanceConnectedPolygons(FVertexInstanceID VertexInstanceID);


// Function  MeshDescription.MeshDescriptionBase.GetNumVertexInstanceConnectedTriangles
// Offset::0x588FC20;
int32_t FMeshDescriptionBase::GetNumVertexInstanceConnectedTriangles(FVertexInstanceID VertexInstanceID);


// Function  MeshDescription.MeshDescriptionBase.GetNumVertexVertexInstances
// Offset::0x5890540;
int32_t FMeshDescriptionBase::GetNumVertexVertexInstances(FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.GetPolygonAdjacentPolygons
// Offset::0x588E400;
void FMeshDescriptionBase::GetPolygonAdjacentPolygons(FPolygonID PolygonID,TArray<FPolygonID> OutPolygonIDs);


// Function  MeshDescription.MeshDescriptionBase.GetPolygonCount
// Offset::0x5890D30;
int32_t FMeshDescriptionBase::GetPolygonCount();


// Function  MeshDescription.MeshDescriptionBase.GetPolygonGroupCount
// Offset::0x5890A10;
int32_t FMeshDescriptionBase::GetPolygonGroupCount();


// Function  MeshDescription.MeshDescriptionBase.GetPolygonGroupPolygons
// Offset::0x588DE40;
void FMeshDescriptionBase::GetPolygonGroupPolygons(FPolygonGroupID PolygonGroupID,TArray<FPolygonID> OutPolygonIDs);


// Function  MeshDescription.MeshDescriptionBase.GetPolygonInternalEdges
// Offset::0x588E5A0;
void FMeshDescriptionBase::GetPolygonInternalEdges(FPolygonID PolygonID,TArray<FEdgeID> OutEdgeIDs);


// Function  MeshDescription.MeshDescriptionBase.GetPolygonPerimeterEdges
// Offset::0x588E6A0;
void FMeshDescriptionBase::GetPolygonPerimeterEdges(FPolygonID PolygonID,TArray<FEdgeID> OutEdgeIDs);


// Function  MeshDescription.MeshDescriptionBase.GetPolygonPolygonGroup
// Offset::0x588E350;
FPolygonGroupID FMeshDescriptionBase::GetPolygonPolygonGroup(FPolygonID PolygonID);


// Function  MeshDescription.MeshDescriptionBase.GetPolygonTriangles
// Offset::0x588EAE0;
void FMeshDescriptionBase::GetPolygonTriangles(FPolygonID PolygonID,TArray<FTriangleID> OutTriangleIDs);


// Function  MeshDescription.MeshDescriptionBase.GetPolygonVertexInstances
// Offset::0x588E940;
void FMeshDescriptionBase::GetPolygonVertexInstances(FPolygonID PolygonID,TArray<FVertexInstanceID> OutVertexInstanceIDs);


// Function  MeshDescription.MeshDescriptionBase.GetPolygonVertices
// Offset::0x588E7A0;
void FMeshDescriptionBase::GetPolygonVertices(FPolygonID PolygonID,TArray<FVertexID> OutVertexIDs);


// Function  MeshDescription.MeshDescriptionBase.GetTriangleAdjacentTriangles
// Offset::0x588ECD0;
void FMeshDescriptionBase::GetTriangleAdjacentTriangles(FTriangleID TriangleID,TArray<FTriangleID> OutTriangleIDs);


// Function  MeshDescription.MeshDescriptionBase.GetTriangleCount
// Offset::0x58913E0;
int32_t FMeshDescriptionBase::GetTriangleCount();


// Function  MeshDescription.MeshDescriptionBase.GetTriangleEdges
// Offset::0x588EDD0;
void FMeshDescriptionBase::GetTriangleEdges(FTriangleID TriangleID,TArray<FEdgeID> OutEdgeIDs);


// Function  MeshDescription.MeshDescriptionBase.GetTrianglePolygon
// Offset::0x588F310;
FPolygonID FMeshDescriptionBase::GetTrianglePolygon(FTriangleID TriangleID);


// Function  MeshDescription.MeshDescriptionBase.GetTrianglePolygonGroup
// Offset::0x588F260;
FPolygonGroupID FMeshDescriptionBase::GetTrianglePolygonGroup(FTriangleID TriangleID);


// Function  MeshDescription.MeshDescriptionBase.GetTriangleVertexInstance
// Offset::0x588EFD0;
FVertexInstanceID FMeshDescriptionBase::GetTriangleVertexInstance(FTriangleID TriangleID,int32_t Index);


// Function  MeshDescription.MeshDescriptionBase.GetTriangleVertexInstances
// Offset::0x588F0C0;
void FMeshDescriptionBase::GetTriangleVertexInstances(FTriangleID TriangleID,TArray<FVertexInstanceID> OutVertexInstanceIDs);


// Function  MeshDescription.MeshDescriptionBase.GetTriangleVertices
// Offset::0x588EED0;
void FMeshDescriptionBase::GetTriangleVertices(FTriangleID TriangleID,TArray<FVertexID> OutVertexIDs);


// Function  MeshDescription.MeshDescriptionBase.GetVertexAdjacentVertices
// Offset::0x5890100;
void FMeshDescriptionBase::GetVertexAdjacentVertices(FVertexID VertexID,TArray<FVertexID> OutAdjacentVertexIDs);


// Function  MeshDescription.MeshDescriptionBase.GetVertexConnectedEdges
// Offset::0x5890780;
void FMeshDescriptionBase::GetVertexConnectedEdges(FVertexID VertexID,TArray<FEdgeID> OutEdgeIDs);


// Function  MeshDescription.MeshDescriptionBase.GetVertexConnectedPolygons
// Offset::0x58902A0;
void FMeshDescriptionBase::GetVertexConnectedPolygons(FVertexID VertexID,TArray<FPolygonID> OutConnectedPolygonIDs);


// Function  MeshDescription.MeshDescriptionBase.GetVertexConnectedTriangles
// Offset::0x5890440;
void FMeshDescriptionBase::GetVertexConnectedTriangles(FVertexID VertexID,TArray<FTriangleID> OutConnectedTriangleIDs);


// Function  MeshDescription.MeshDescriptionBase.GetVertexCount
// Offset::0x58922C0;
int32_t FMeshDescriptionBase::GetVertexCount();


// Function  MeshDescription.MeshDescriptionBase.GetVertexInstanceConnectedPolygons
// Offset::0x588FB20;
void FMeshDescriptionBase::GetVertexInstanceConnectedPolygons(FVertexInstanceID VertexInstanceID,TArray<FPolygonID> OutConnectedPolygonIDs);


// Function  MeshDescription.MeshDescriptionBase.GetVertexInstanceConnectedTriangles
// Offset::0x588FCC0;
void FMeshDescriptionBase::GetVertexInstanceConnectedTriangles(FVertexInstanceID VertexInstanceID,TArray<FTriangleID> OutConnectedTriangleIDs);


// Function  MeshDescription.MeshDescriptionBase.GetVertexInstanceCount
// Offset::0x5891F40;
int32_t FMeshDescriptionBase::GetVertexInstanceCount();


// Function  MeshDescription.MeshDescriptionBase.GetVertexInstanceForPolygonVertex
// Offset::0x588E260;
FVertexInstanceID FMeshDescriptionBase::GetVertexInstanceForPolygonVertex(FPolygonID PolygonID,FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.GetVertexInstanceForTriangleVertex
// Offset::0x588EBE0;
FVertexInstanceID FMeshDescriptionBase::GetVertexInstanceForTriangleVertex(FTriangleID TriangleID,FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.GetVertexInstancePairEdge
// Offset::0x588FDC0;
FEdgeID FMeshDescriptionBase::GetVertexInstancePairEdge(FVertexInstanceID VertexInstanceID0,FVertexInstanceID VertexInstanceID1);


// Function  MeshDescription.MeshDescriptionBase.GetVertexInstanceVertex
// Offset::0x588FEB0;
FVertexID FMeshDescriptionBase::GetVertexInstanceVertex(FVertexInstanceID VertexInstanceID);


// Function  MeshDescription.MeshDescriptionBase.GetVertexPairEdge
// Offset::0x5890880;
FEdgeID FMeshDescriptionBase::GetVertexPairEdge(FVertexID VertexID0,FVertexID VertexID1);


// Function  MeshDescription.MeshDescriptionBase.GetVertexPosition
// Offset::0x5890050;
FVector FMeshDescriptionBase::GetVertexPosition(FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.GetVertexVertexInstances
// Offset::0x58905E0;
void FMeshDescriptionBase::GetVertexVertexInstances(FVertexID VertexID,TArray<FVertexInstanceID> OutVertexInstanceIDs);


// Function  MeshDescription.MeshDescriptionBase.IsEdgeInternal
// Offset::0x588F9E0;
bool FMeshDescriptionBase::IsEdgeInternal(FEdgeID EdgeID);


// Function  MeshDescription.MeshDescriptionBase.IsEdgeInternalToPolygon
// Offset::0x588F8F0;
bool FMeshDescriptionBase::IsEdgeInternalToPolygon(FEdgeID EdgeID,FPolygonID PolygonID);


// Function  MeshDescription.MeshDescriptionBase.IsEdgeValid
// Offset::0x5891AE0;
bool FMeshDescriptionBase::IsEdgeValid(FEdgeID EdgeID);


// Function  MeshDescription.MeshDescriptionBase.IsEmpty
// Offset::0x58925E0;
bool FMeshDescriptionBase::IsEmpty();


// Function  MeshDescription.MeshDescriptionBase.IsPolygonGroupValid
// Offset::0x5890A60;
bool FMeshDescriptionBase::IsPolygonGroupValid(FPolygonGroupID PolygonGroupID);


// Function  MeshDescription.MeshDescriptionBase.IsPolygonValid
// Offset::0x5890D80;
bool FMeshDescriptionBase::IsPolygonValid(FPolygonID PolygonID);


// Function  MeshDescription.MeshDescriptionBase.IsTrianglePartOfNgon
// Offset::0x588F1C0;
bool FMeshDescriptionBase::IsTrianglePartOfNgon(FTriangleID TriangleID);


// Function  MeshDescription.MeshDescriptionBase.IsTriangleValid
// Offset::0x5891430;
bool FMeshDescriptionBase::IsTriangleValid(FTriangleID TriangleID);


// Function  MeshDescription.MeshDescriptionBase.IsVertexInstanceValid
// Offset::0x5891F90;
bool FMeshDescriptionBase::IsVertexInstanceValid(FVertexInstanceID VertexInstanceID);


// Function  MeshDescription.MeshDescriptionBase.IsVertexOrphaned
// Offset::0x5890970;
bool FMeshDescriptionBase::IsVertexOrphaned(FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.IsVertexValid
// Offset::0x5892310;
bool FMeshDescriptionBase::IsVertexValid(FVertexID VertexID);


// Function  MeshDescription.MeshDescriptionBase.ReserveNewEdges
// Offset::0x5891EA0;
void FMeshDescriptionBase::ReserveNewEdges(int32_t NumberOfNewEdges);


// Function  MeshDescription.MeshDescriptionBase.ReserveNewPolygonGroups
// Offset::0x5890C90;
void FMeshDescriptionBase::ReserveNewPolygonGroups(int32_t NumberOfNewPolygonGroups);


// Function  MeshDescription.MeshDescriptionBase.ReserveNewPolygons
// Offset::0x5891340;
void FMeshDescriptionBase::ReserveNewPolygons(int32_t NumberOfNewPolygons);


// Function  MeshDescription.MeshDescriptionBase.ReserveNewTriangles
// Offset::0x58919F0;
void FMeshDescriptionBase::ReserveNewTriangles(int32_t NumberOfNewTriangles);


// Function  MeshDescription.MeshDescriptionBase.ReserveNewVertexInstances
// Offset::0x5891EA0;
void FMeshDescriptionBase::ReserveNewVertexInstances(int32_t NumberOfNewVertexInstances);


// Function  MeshDescription.MeshDescriptionBase.ReserveNewVertices
// Offset::0x5892540;
void FMeshDescriptionBase::ReserveNewVertices(int32_t NumberOfNewVertices);


// Function  MeshDescription.MeshDescriptionBase.ReversePolygonFacing
// Offset::0x588DFE0;
void FMeshDescriptionBase::ReversePolygonFacing(FPolygonID PolygonID);


// Function  MeshDescription.MeshDescriptionBase.SetPolygonPolygonGroup
// Offset::0x588E080;
void FMeshDescriptionBase::SetPolygonPolygonGroup(FPolygonID PolygonID,FPolygonGroupID PolygonGroupID);


// Function  MeshDescription.MeshDescriptionBase.SetPolygonVertexInstances
// Offset::0x588E160;
void FMeshDescriptionBase::SetPolygonVertexInstances(FPolygonID PolygonID,TArray<FVertexInstanceID> VertexInstanceIDs);


// Function  MeshDescription.MeshDescriptionBase.SetVertexPosition
// Offset::0x588FF60;
void FMeshDescriptionBase::SetVertexPosition(FVertexID VertexID,FVector Position);


// Function  StaticMeshDescription.StaticMeshDescription.CreateCube
// Offset::0x589E0E0;
void FStaticMeshDescription::CreateCube(FVector Center,FVector HalfExtents,FPolygonGroupID PolygonGroup,FPolygonID PolygonID_PlusX,FPolygonID PolygonID_MinusX,FPolygonID PolygonID_PlusY,FPolygonID PolygonID_MinusY,FPolygonID PolygonID_PlusZ,FPolygonID PolygonID_MinusZ);


// Function  StaticMeshDescription.StaticMeshDescription.GetVertexInstanceUV
// Offset::0x589E620;
FVector2D FStaticMeshDescription::GetVertexInstanceUV(FVertexInstanceID VertexInstanceID,int32_t UVIndex);


// Function  StaticMeshDescription.StaticMeshDescription.SetPolygonGroupMaterialSlotName
// Offset::0x589DFF0;
void FStaticMeshDescription::SetPolygonGroupMaterialSlotName(FPolygonGroupID PolygonGroupID,FName SlotName);


// Function  StaticMeshDescription.StaticMeshDescription.SetVertexInstanceUV
// Offset::0x589E4F0;
void FStaticMeshDescription::SetVertexInstanceUV(FVertexInstanceID VertexInstanceID,FVector2D UV,int32_t UVIndex);


// Function  MediaAssets.FileMediaSource.SetFilePath
// Offset::0x58F6960;
void FFileMediaSource::SetFilePath(FString Path);


// Function  MediaAssets.MediaBlueprintFunctionLibrary.EnumerateAudioCaptureDevices
// Offset::0x58F7250;
void FMediaBlueprintFunctionLibrary::EnumerateAudioCaptureDevices(TArray<FMediaCaptureDevice> OutDevices,int32_t Filter);


// Function  MediaAssets.MediaBlueprintFunctionLibrary.EnumerateVideoCaptureDevices
// Offset::0x58F70F0;
void FMediaBlueprintFunctionLibrary::EnumerateVideoCaptureDevices(TArray<FMediaCaptureDevice> OutDevices,int32_t Filter);


// Function  MediaAssets.MediaBlueprintFunctionLibrary.EnumerateWebcamCaptureDevices
// Offset::0x58F6F90;
void FMediaBlueprintFunctionLibrary::EnumerateWebcamCaptureDevices(TArray<FMediaCaptureDevice> OutDevices,int32_t Filter);


// Function  MediaAssets.MediaComponent.GetMediaPlayer
// Offset::0x58F7760;
FMediaPlayer* FMediaComponent::GetMediaPlayer();


// Function  MediaAssets.MediaComponent.GetMediaTexture
// Offset::0x58F7730;
FMediaTexture* FMediaComponent::GetMediaTexture();


// Function  MediaAssets.MediaPlayer.CanPause
// Offset::0x58FA7A0;
bool FMediaPlayer::CanPause();


// Function  MediaAssets.MediaPlayer.CanPlaySource
// Offset::0x58FA700;
bool FMediaPlayer::CanPlaySource(FMediaSource* MediaSource);


// Function  MediaAssets.MediaPlayer.CanPlayUrl
// Offset::0x58FA650;
bool FMediaPlayer::CanPlayUrl(FString URL);


// Function  MediaAssets.MediaPlayer.Close
// Offset::0x58FA630;
void FMediaPlayer::Close();


// Function  MediaAssets.MediaPlayer.GetAudioTrackChannels
// Offset::0x58FA540;
int32_t FMediaPlayer::GetAudioTrackChannels(int32_t TrackIndex,int32_t FormatIndex);


// Function  MediaAssets.MediaPlayer.GetAudioTrackSampleRate
// Offset::0x58FA450;
int32_t FMediaPlayer::GetAudioTrackSampleRate(int32_t TrackIndex,int32_t FormatIndex);


// Function  MediaAssets.MediaPlayer.GetAudioTrackType
// Offset::0x58FA330;
FString FMediaPlayer::GetAudioTrackType(int32_t TrackIndex,int32_t FormatIndex);


// Function  MediaAssets.MediaPlayer.GetDesiredPlayerName
// Offset::0x58FA2E0;
FName FMediaPlayer::GetDesiredPlayerName();


// Function  MediaAssets.MediaPlayer.GetDuration
// Offset::0x58FA290;
FTimespan FMediaPlayer::GetDuration();


// Function  MediaAssets.MediaPlayer.GetHorizontalFieldOfView
// Offset::0x58FA260;
float FMediaPlayer::GetHorizontalFieldOfView();


// Function  MediaAssets.MediaPlayer.GetMediaName
// Offset::0x58FA1C0;
FText FMediaPlayer::GetMediaName();


// Function  MediaAssets.MediaPlayer.GetNumTrackFormats
// Offset::0x58FA030;
int32_t FMediaPlayer::GetNumTrackFormats(enum class EMediaPlayerTrack TrackType,int32_t TrackIndex);


// Function  MediaAssets.MediaPlayer.GetNumTracks
// Offset::0x58FA120;
int32_t FMediaPlayer::GetNumTracks(enum class EMediaPlayerTrack TrackType);


// Function  MediaAssets.MediaPlayer.GetPlayerName
// Offset::0x58F9FE0;
FName FMediaPlayer::GetPlayerName();


// Function  MediaAssets.MediaPlayer.GetPlaylist
// Offset::0x58F9F80;
FMediaPlaylist* FMediaPlayer::GetPlaylist();


// Function  MediaAssets.MediaPlayer.GetPlaylistIndex
// Offset::0x58F9F60;
int32_t FMediaPlayer::GetPlaylistIndex();


// Function  MediaAssets.MediaPlayer.GetRate
// Offset::0x58F9F30;
float FMediaPlayer::GetRate();


// Function  MediaAssets.MediaPlayer.GetSelectedTrack
// Offset::0x58F9E90;
int32_t FMediaPlayer::GetSelectedTrack(enum class EMediaPlayerTrack TrackType);


// Function  MediaAssets.MediaPlayer.GetSupportedRates
// Offset::0x58F9D80;
void FMediaPlayer::GetSupportedRates(TArray<FFloatRange> OutRates,bool Unthinned);


// Function  MediaAssets.MediaPlayer.GetTime
// Offset::0x58F9D30;
FTimespan FMediaPlayer::GetTime();


// Function  MediaAssets.MediaPlayer.GetTimeDelay
// Offset::0x58F9390;
FTimespan FMediaPlayer::GetTimeDelay();


// Function  MediaAssets.MediaPlayer.GetTimeStamp
// Offset::0x58F9D00;
FMediaTimeStampInfo* FMediaPlayer::GetTimeStamp();


// Function  MediaAssets.MediaPlayer.GetTrackDisplayName
// Offset::0x58F9BD0;
FText FMediaPlayer::GetTrackDisplayName(enum class EMediaPlayerTrack TrackType,int32_t TrackIndex);


// Function  MediaAssets.MediaPlayer.GetTrackFormat
// Offset::0x58F9AE0;
int32_t FMediaPlayer::GetTrackFormat(enum class EMediaPlayerTrack TrackType,int32_t TrackIndex);


// Function  MediaAssets.MediaPlayer.GetTrackLanguage
// Offset::0x58F99C0;
FString FMediaPlayer::GetTrackLanguage(enum class EMediaPlayerTrack TrackType,int32_t TrackIndex);


// Function  MediaAssets.MediaPlayer.GetUrl
// Offset::0x58F9950;
FString FMediaPlayer::GetUrl();


// Function  MediaAssets.MediaPlayer.GetVerticalFieldOfView
// Offset::0x58F9920;
float FMediaPlayer::GetVerticalFieldOfView();


// Function  MediaAssets.MediaPlayer.GetVideoTrackAspectRatio
// Offset::0x58F9830;
float FMediaPlayer::GetVideoTrackAspectRatio(int32_t TrackIndex,int32_t FormatIndex);


// Function  MediaAssets.MediaPlayer.GetVideoTrackDimensions
// Offset::0x58F9740;
FIntPoint FMediaPlayer::GetVideoTrackDimensions(int32_t TrackIndex,int32_t FormatIndex);


// Function  MediaAssets.MediaPlayer.GetVideoTrackFrameRate
// Offset::0x58F9650;
float FMediaPlayer::GetVideoTrackFrameRate(int32_t TrackIndex,int32_t FormatIndex);


// Function  MediaAssets.MediaPlayer.GetVideoTrackFrameRates
// Offset::0x58F9560;
FFloatRange FMediaPlayer::GetVideoTrackFrameRates(int32_t TrackIndex,int32_t FormatIndex);


// Function  MediaAssets.MediaPlayer.GetVideoTrackType
// Offset::0x58F9440;
FString FMediaPlayer::GetVideoTrackType(int32_t TrackIndex,int32_t FormatIndex);


// Function  MediaAssets.MediaPlayer.GetViewRotation
// Offset::0x58F93E0;
FRotator FMediaPlayer::GetViewRotation();


// Function  MediaAssets.MediaPlayer.HasError
// Offset::0x58F9360;
bool FMediaPlayer::HasError();


// Function  MediaAssets.MediaPlayer.IsBuffering
// Offset::0x58F9330;
bool FMediaPlayer::IsBuffering();


// Function  MediaAssets.MediaPlayer.IsClosed
// Offset::0x58F9210;
bool FMediaPlayer::IsClosed();


// Function  MediaAssets.MediaPlayer.IsConnecting
// Offset::0x58F9300;
bool FMediaPlayer::IsConnecting();


// Function  MediaAssets.MediaPlayer.IsLooping
// Offset::0x58F92D0;
bool FMediaPlayer::IsLooping();


// Function  MediaAssets.MediaPlayer.IsPaused
// Offset::0x58F92A0;
bool FMediaPlayer::IsPaused();


// Function  MediaAssets.MediaPlayer.IsPlaying
// Offset::0x58F9270;
bool FMediaPlayer::IsPlaying();


// Function  MediaAssets.MediaPlayer.IsPreparing
// Offset::0x58F9240;
bool FMediaPlayer::IsPreparing();


// Function  MediaAssets.MediaPlayer.IsReady
// Offset::0x58F91E0;
bool FMediaPlayer::IsReady();


// Function  MediaAssets.MediaPlayer.Next
// Offset::0x58F91B0;
bool FMediaPlayer::Next();


// Function  MediaAssets.MediaPlayer.OpenFile
// Offset::0x58F9100;
bool FMediaPlayer::OpenFile(FString FilePath);


// Function  MediaAssets.MediaPlayer.OpenPlaylist
// Offset::0x58F9050;
bool FMediaPlayer::OpenPlaylist(FMediaPlaylist* InPlaylist);


// Function  MediaAssets.MediaPlayer.OpenPlaylistIndex
// Offset::0x58F8F60;
bool FMediaPlayer::OpenPlaylistIndex(FMediaPlaylist* InPlaylist,int32_t Index);


// Function  MediaAssets.MediaPlayer.OpenSource
// Offset::0x58F8EC0;
bool FMediaPlayer::OpenSource(FMediaSource* MediaSource);


// Function  MediaAssets.MediaPlayer.OpenSourceLatent
// Offset::0x58F8B40;
void FMediaPlayer::OpenSourceLatent(FObject* WorldContextObject,FLatentActionInfo LatentInfo,FMediaSource* MediaSource,FMediaPlayerOptions Options,bool bSuccess);


// Function  MediaAssets.MediaPlayer.OpenSourceWithOptions
// Offset::0x58F8DA0;
bool FMediaPlayer::OpenSourceWithOptions(FMediaSource* MediaSource,FMediaPlayerOptions Options);


// Function  MediaAssets.MediaPlayer.OpenUrl
// Offset::0x58F8A90;
bool FMediaPlayer::OpenUrl(FString URL);


// Function  MediaAssets.MediaPlayer.Pause
// Offset::0x58F8A60;
bool FMediaPlayer::Pause();


// Function  MediaAssets.MediaPlayer.Play
// Offset::0x58F8A30;
bool FMediaPlayer::Play();


// Function  MediaAssets.MediaPlayer.PlayAndSeek
// Offset::0x58F8A10;
void FMediaPlayer::PlayAndSeek();


// Function  MediaAssets.MediaPlayer.Previous
// Offset::0x58F89E0;
bool FMediaPlayer::Previous();


// Function  MediaAssets.MediaPlayer.Reopen
// Offset::0x58F89B0;
bool FMediaPlayer::Reopen();


// Function  MediaAssets.MediaPlayer.Rewind
// Offset::0x58F8980;
bool FMediaPlayer::Rewind();


// Function  MediaAssets.MediaPlayer.Seek
// Offset::0x58F88D0;
bool FMediaPlayer::Seek(FTimespan Time);


// Function  MediaAssets.MediaPlayer.SelectTrack
// Offset::0x58F87E0;
bool FMediaPlayer::SelectTrack(enum class EMediaPlayerTrack TrackType,int32_t TrackIndex);


// Function  MediaAssets.MediaPlayer.SetBlockOnTime
// Offset::0x58F8730;
void FMediaPlayer::SetBlockOnTime(FTimespan Time);


// Function  MediaAssets.MediaPlayer.SetDesiredPlayerName
// Offset::0x58F8690;
void FMediaPlayer::SetDesiredPlayerName(FName PlayerName);


// Function  MediaAssets.MediaPlayer.SetLooping
// Offset::0x58F85F0;
bool FMediaPlayer::SetLooping(bool Looping);


// Function  MediaAssets.MediaPlayer.SetMediaOptions
// Offset::0x58F8550;
void FMediaPlayer::SetMediaOptions(FMediaSource* Options);


// Function  MediaAssets.MediaPlayer.SetNativeVolume
// Offset::0x58F8410;
bool FMediaPlayer::SetNativeVolume(float Volume);


// Function  MediaAssets.MediaPlayer.SetRate
// Offset::0x58F84B0;
bool FMediaPlayer::SetRate(float Rate);


// Function  MediaAssets.MediaPlayer.SetTimeDelay
// Offset::0x58F7ED0;
void FMediaPlayer::SetTimeDelay(FTimespan TimeDelay);


// Function  MediaAssets.MediaPlayer.SetTrackFormat
// Offset::0x58F82E0;
bool FMediaPlayer::SetTrackFormat(enum class EMediaPlayerTrack TrackType,int32_t TrackIndex,int32_t FormatIndex);


// Function  MediaAssets.MediaPlayer.SetVideoTrackFrameRate
// Offset::0x58F81B0;
bool FMediaPlayer::SetVideoTrackFrameRate(int32_t TrackIndex,int32_t FormatIndex,float FrameRate);


// Function  MediaAssets.MediaPlayer.SetViewField
// Offset::0x58F8070;
bool FMediaPlayer::SetViewField(float Horizontal,float Vertical,bool Absolute);


// Function  MediaAssets.MediaPlayer.SetViewRotation
// Offset::0x58F7F70;
bool FMediaPlayer::SetViewRotation(FRotator Rotation,bool Absolute);


// Function  MediaAssets.MediaPlayer.SupportsRate
// Offset::0x58F7DE0;
bool FMediaPlayer::SupportsRate(float Rate,bool Unthinned);


// Function  MediaAssets.MediaPlayer.SupportsScrubbing
// Offset::0x58F7DB0;
bool FMediaPlayer::SupportsScrubbing();


// Function  MediaAssets.MediaPlayer.SupportsSeeking
// Offset::0x58F7D80;
bool FMediaPlayer::SupportsSeeking();


// Function  MediaAssets.MediaPlaylist.Add
// Offset::0x58FD640;
bool FMediaPlaylist::Add(FMediaSource* MediaSource);


// Function  MediaAssets.MediaPlaylist.AddFile
// Offset::0x58FD590;
bool FMediaPlaylist::AddFile(FString FilePath);


// Function  MediaAssets.MediaPlaylist.AddUrl
// Offset::0x58FD4E0;
bool FMediaPlaylist::AddUrl(FString URL);


// Function  MediaAssets.MediaPlaylist.Get
// Offset::0x58FD440;
FMediaSource* FMediaPlaylist::Get(int32_t Index);


// Function  MediaAssets.MediaPlaylist.GetNext
// Offset::0x58FD390;
FMediaSource* FMediaPlaylist::GetNext(int32_t InOutIndex);


// Function  MediaAssets.MediaPlaylist.GetPrevious
// Offset::0x58FD2E0;
FMediaSource* FMediaPlaylist::GetPrevious(int32_t InOutIndex);


// Function  MediaAssets.MediaPlaylist.GetRandom
// Offset::0x58FD230;
FMediaSource* FMediaPlaylist::GetRandom(int32_t OutIndex);


// Function  MediaAssets.MediaPlaylist.Insert
// Offset::0x58FD150;
void FMediaPlaylist::Insert(FMediaSource* MediaSource,int32_t Index);


// Function  MediaAssets.MediaPlaylist.Num
// Offset::0x58FD130;
int32_t FMediaPlaylist::Num();


// Function  MediaAssets.MediaPlaylist.Remove
// Offset::0x58FD090;
bool FMediaPlaylist::Remove(FMediaSource* MediaSource);


// Function  MediaAssets.MediaPlaylist.RemoveAt
// Offset::0x58FCFF0;
bool FMediaPlaylist::RemoveAt(int32_t Index);


// Function  MediaAssets.MediaPlaylist.Replace
// Offset::0x58FCF00;
bool FMediaPlaylist::Replace(int32_t Index,FMediaSource* Replacement);


// Function  MediaAssets.MediaSoundComponent.BP_GetAttenuationSettingsToApply
// Offset::0x58FE530;
bool FMediaSoundComponent::BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings OutAttenuationSettings);


// Function  MediaAssets.MediaSoundComponent.GetEnvelopeValue
// Offset::0x58FDFD0;
float FMediaSoundComponent::GetEnvelopeValue();


// Function  MediaAssets.MediaSoundComponent.GetMediaPlayer
// Offset::0x58FE500;
FMediaPlayer* FMediaSoundComponent::GetMediaPlayer();


// Function  MediaAssets.MediaSoundComponent.GetNormalizedSpectralData
// Offset::0x58FE180;
TArray<FMediaSoundComponentSpectralData> FMediaSoundComponent::GetNormalizedSpectralData();


// Function  MediaAssets.MediaSoundComponent.GetSpectralData
// Offset::0x58FE200;
TArray<FMediaSoundComponentSpectralData> FMediaSoundComponent::GetSpectralData();


// Function  MediaAssets.MediaSoundComponent.SetEnableEnvelopeFollowing
// Offset::0x58FE0E0;
void FMediaSoundComponent::SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing);


// Function  MediaAssets.MediaSoundComponent.SetEnableSpectralAnalysis
// Offset::0x58FE3C0;
void FMediaSoundComponent::SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled);


// Function  MediaAssets.MediaSoundComponent.SetEnvelopeFollowingsettings
// Offset::0x58FE000;
void FMediaSoundComponent::SetEnvelopeFollowingsettings(int32_t AttackTimeMsec,int32_t ReleaseTimeMsec);


// Function  MediaAssets.MediaSoundComponent.SetMediaPlayer
// Offset::0x58FE460;
void FMediaSoundComponent::SetMediaPlayer(FMediaPlayer* NewMediaPlayer);


// Function  MediaAssets.MediaSoundComponent.SetSpectralAnalysisSettings
// Offset::0x58FE280;
void FMediaSoundComponent::SetSpectralAnalysisSettings(TArray<float> InFrequenciesToAnalyze,enum class EMediaSoundComponentFFTSize InFFTSize);


// Function  MediaAssets.MediaTexture.GetAspectRatio
// Offset::0x58FF800;
float FMediaTexture::GetAspectRatio();


// Function  MediaAssets.MediaTexture.GetHeight
// Offset::0x58FF7D0;
int32_t FMediaTexture::GetHeight();


// Function  MediaAssets.MediaTexture.GetMediaPlayer
// Offset::0x58FF740;
FMediaPlayer* FMediaTexture::GetMediaPlayer();


// Function  MediaAssets.MediaTexture.GetTextureNumMips
// Offset::0x58FF770;
int32_t FMediaTexture::GetTextureNumMips();


// Function  MediaAssets.MediaTexture.GetWidth
// Offset::0x58FF7A0;
int32_t FMediaTexture::GetWidth();


// Function  MediaAssets.MediaTexture.SetMediaPlayer
// Offset::0x58FF6A0;
void FMediaTexture::SetMediaPlayer(FMediaPlayer* NewMediaPlayer);


// Function  MediaAssets.MediaTexture.UpdateResource
// Offset::0x5717730;
void FMediaTexture::UpdateResource();


// Function  LevelSequence.LevelSequenceBurnInOptions.SetBurnIn
// Offset::0x590F7A0;
void FLevelSequenceBurnInOptions::SetBurnIn(FSoftClassPath InBurnInClass);


// Function  LevelSequence.LevelSequenceBurnIn.GetSettingsClass
// Offset::0x5911800;
FLevelSequenceBurnInInitSettings* FLevelSequenceBurnIn::GetSettingsClass();


// Function  LevelSequence.LevelSequenceBurnIn.SetSettings
// Offset::0x3D30810;
void FLevelSequenceBurnIn::SetSettings(FObject* InSettings);


// Function  LevelSequence.LevelSequenceDirector.GetBoundActor
// Offset::0x5911F00;
FActor* FLevelSequenceDirector::GetBoundActor(FMovieSceneObjectBindingID ObjectBinding);


// Function  LevelSequence.LevelSequenceDirector.GetBoundActors
// Offset::0x5911FD0;
TArray<FActor*> FLevelSequenceDirector::GetBoundActors(FMovieSceneObjectBindingID ObjectBinding);


// Function  LevelSequence.LevelSequenceDirector.GetBoundObject
// Offset::0x59120D0;
FObject* FLevelSequenceDirector::GetBoundObject(FMovieSceneObjectBindingID ObjectBinding);


// Function  LevelSequence.LevelSequenceDirector.GetBoundObjects
// Offset::0x59121A0;
TArray<FObject*> FLevelSequenceDirector::GetBoundObjects(FMovieSceneObjectBindingID ObjectBinding);


// Function  LevelSequence.LevelSequenceDirector.GetSequence
// Offset::0x5911ED0;
FMovieSceneSequence* FLevelSequenceDirector::GetSequence();


// Function  LevelSequence.LevelSequenceDirector.OnCreated
// Offset::0x3D30810;
void FLevelSequenceDirector::OnCreated();


// Function  LevelSequence.LevelSequencePlayer.CreateLevelSequencePlayer
// Offset::0x5912DF0;
FLevelSequencePlayer* FLevelSequencePlayer::CreateLevelSequencePlayer(FObject* WorldContextObject,FLevelSequence* LevelSequence,FMovieSceneSequencePlaybackSettings Settings,FLevelSequenceActor* OutActor);


// Function  LevelSequence.LevelSequencePlayer.GetActiveCameraComponent
// Offset::0x5912DB0;
FCameraComponent* FLevelSequencePlayer::GetActiveCameraComponent();


// Function  LevelSequence.LevelSequenceMediaController.GetMediaComponent
// Offset::0x3826FC0;
FMediaComponent* FLevelSequenceMediaController::GetMediaComponent();


// Function  LevelSequence.LevelSequenceMediaController.GetSequence
// Offset::0x59133B0;
FLevelSequenceActor* FLevelSequenceMediaController::GetSequence();


// Function  LevelSequence.LevelSequenceMediaController.OnRep_ServerStartTimeSeconds
// Offset::0x59132F0;
void FLevelSequenceMediaController::OnRep_ServerStartTimeSeconds();


// Function  LevelSequence.LevelSequenceMediaController.Play
// Offset::0x59133E0;
void FLevelSequenceMediaController::Play();


// Function  LevelSequence.LevelSequenceMediaController.SynchronizeToServer
// Offset::0x5913310;
void FLevelSequenceMediaController::SynchronizeToServer(float DesyncThresholdSeconds);


// Function  MovieSceneCapture.MovieSceneCapture.GetAudioCaptureProtocol
// Offset::0x5925AC0;
FMovieSceneCaptureProtocolBase* FMovieSceneCapture::GetAudioCaptureProtocol();


// Function  MovieSceneCapture.MovieSceneCapture.GetImageCaptureProtocol
// Offset::0x2BA42B0;
FMovieSceneCaptureProtocolBase* FMovieSceneCapture::GetImageCaptureProtocol();


// Function  MovieSceneCapture.MovieSceneCapture.SetAudioCaptureProtocolType
// Offset::0x5925980;
void FMovieSceneCapture::SetAudioCaptureProtocolType(FMovieSceneCaptureProtocolBase* ProtocolType);


// Function  MovieSceneCapture.MovieSceneCapture.SetImageCaptureProtocolType
// Offset::0x5925A20;
void FMovieSceneCapture::SetImageCaptureProtocolType(FMovieSceneCaptureProtocolBase* ProtocolType);


// Function  MovieSceneCapture.MovieSceneCaptureEnvironment.FindAudioCaptureProtocol
// Offset::0x5925EF0;
FMovieSceneAudioCaptureProtocolBase* FMovieSceneCaptureEnvironment::FindAudioCaptureProtocol();


// Function  MovieSceneCapture.MovieSceneCaptureEnvironment.FindImageCaptureProtocol
// Offset::0x5925F20;
FMovieSceneImageCaptureProtocolBase* FMovieSceneCaptureEnvironment::FindImageCaptureProtocol();


// Function  MovieSceneCapture.MovieSceneCaptureEnvironment.GetCaptureElapsedTime
// Offset::0x5925F80;
float FMovieSceneCaptureEnvironment::GetCaptureElapsedTime();


// Function  MovieSceneCapture.MovieSceneCaptureEnvironment.GetCaptureFrameNumber
// Offset::0x5925FB0;
int32_t FMovieSceneCaptureEnvironment::GetCaptureFrameNumber();


// Function  MovieSceneCapture.MovieSceneCaptureEnvironment.IsCaptureInProgress
// Offset::0x5925F50;
bool FMovieSceneCaptureEnvironment::IsCaptureInProgress();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.GenerateFilename
// Offset::0x5926A50;
FString FUserDefinedCaptureProtocol::GenerateFilename(FFrameMetrics InFrameMetrics);


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.GetCurrentFrameMetrics
// Offset::0x5926A20;
FFrameMetrics FUserDefinedCaptureProtocol::GetCurrentFrameMetrics();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnBeginFinalize
// Offset::0x3D30810;
void FUserDefinedCaptureProtocol::OnBeginFinalize();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnCanFinalize
// Offset::0x1BAB160;
bool FUserDefinedCaptureProtocol::OnCanFinalize();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnCaptureFrame
// Offset::0x3D30810;
void FUserDefinedCaptureProtocol::OnCaptureFrame();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnFinalize
// Offset::0x3D30810;
void FUserDefinedCaptureProtocol::OnFinalize();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnPauseCapture
// Offset::0x3D30810;
void FUserDefinedCaptureProtocol::OnPauseCapture();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnPixelsReceived
// Offset::0x3D30810;
void FUserDefinedCaptureProtocol::OnPixelsReceived(FCapturedPixels Pixels,FCapturedPixelsID ID,FFrameMetrics FrameMetrics);


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnPreTick
// Offset::0x3D30810;
void FUserDefinedCaptureProtocol::OnPreTick();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnSetup
// Offset::0x26ED070;
bool FUserDefinedCaptureProtocol::OnSetup();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnStartCapture
// Offset::0x3D30810;
void FUserDefinedCaptureProtocol::OnStartCapture();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnTick
// Offset::0x3D30810;
void FUserDefinedCaptureProtocol::OnTick();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.OnWarmUp
// Offset::0x3D30810;
void FUserDefinedCaptureProtocol::OnWarmUp();


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.ResolveBuffer
// Offset::0x5926CB0;
void FUserDefinedCaptureProtocol::ResolveBuffer(FTexture* Buffer,FCapturedPixelsID BufferID);


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.StartCapturingFinalPixels
// Offset::0x5926B60;
void FUserDefinedCaptureProtocol::StartCapturingFinalPixels(FCapturedPixelsID StreamID);


// Function  MovieSceneCapture.UserDefinedCaptureProtocol.StopCapturingFinalPixels
// Offset::0x5926B40;
void FUserDefinedCaptureProtocol::StopCapturingFinalPixels();


// Function  MovieSceneCapture.UserDefinedImageCaptureProtocol.GenerateFilenameForBuffer
// Offset::0x5928E80;
FString FUserDefinedImageCaptureProtocol::GenerateFilenameForBuffer(FTexture* Buffer,FCapturedPixelsID StreamID);


// Function  MovieSceneCapture.UserDefinedImageCaptureProtocol.GenerateFilenameForCurrentFrame
// Offset::0x5928E00;
FString FUserDefinedImageCaptureProtocol::GenerateFilenameForCurrentFrame();


// Function  MovieSceneCapture.UserDefinedImageCaptureProtocol.WriteImageToDisk
// Offset::0x5928B50;
void FUserDefinedImageCaptureProtocol::WriteImageToDisk(FCapturedPixels PixelData,FCapturedPixelsID StreamID,FFrameMetrics FrameMetrics,bool bCopyImageData);


// Function  Engine.ActorSoundParameterInterface.GetActorSoundParams
// Offset::0x3D30810;
void FActorSoundParameterInterface::GetActorSoundParams(TArray<FAudioParameter> Params);


// Function  Engine.AmbientSound.AdjustVolume
// Offset::0x62FEBF0;
void FAmbientSound::AdjustVolume(float AdjustVolumeDuration,float AdjustVolumeLevel);


// Function  Engine.AmbientSound.FadeIn
// Offset::0x62FEDB0;
void FAmbientSound::FadeIn(float FadeInDuration,float FadeVolumeLevel);


// Function  Engine.AmbientSound.FadeOut
// Offset::0x62FECD0;
void FAmbientSound::FadeOut(float FadeOutDuration,float FadeVolumeLevel);


// Function  Engine.AmbientSound.Play
// Offset::0x62FEB50;
void FAmbientSound::Play(float StartTime);


// Function  Engine.AmbientSound.Stop
// Offset::0x62FEB30;
void FAmbientSound::Stop();


// Function  Engine.AnimationSettings.GetBoneCustomAttributeNamesToImport
// Offset::0x6300F70;
TArray<FString> FAnimationSettings::GetBoneCustomAttributeNamesToImport();


// Function  Engine.AnimDataModel.GetAnimationSequence
// Offset::0x6305C50;
FAnimSequence* FAnimDataModel::GetAnimationSequence();


// Function  Engine.AnimDataModel.GetBoneAnimationTracks
// Offset::0x6306330;
TArray<FBoneAnimationTrack> FAnimDataModel::GetBoneAnimationTracks();


// Function  Engine.AnimDataModel.GetBoneTrackByIndex
// Offset::0x63061B0;
FBoneAnimationTrack FAnimDataModel::GetBoneTrackByIndex(int32_t TrackIndex);


// Function  Engine.AnimDataModel.GetBoneTrackByName
// Offset::0x6306000;
FBoneAnimationTrack FAnimDataModel::GetBoneTrackByName(FName TrackName);


// Function  Engine.AnimDataModel.GetBoneTrackIndex
// Offset::0x6305F00;
int32_t FAnimDataModel::GetBoneTrackIndex(FBoneAnimationTrack Track);


// Function  Engine.AnimDataModel.GetBoneTrackIndexByName
// Offset::0x6305E60;
int32_t FAnimDataModel::GetBoneTrackIndexByName(FName TrackName);


// Function  Engine.AnimDataModel.GetBoneTrackNames
// Offset::0x6305CE0;
void FAnimDataModel::GetBoneTrackNames(TArray<FName> OutNames);


// Function  Engine.AnimDataModel.GetFrameRate
// Offset::0x63063F0;
FFrameRate FAnimDataModel::GetFrameRate();


// Function  Engine.AnimDataModel.GetNumberOfFloatCurves
// Offset::0x6305C80;
int32_t FAnimDataModel::GetNumberOfFloatCurves();


// Function  Engine.AnimDataModel.GetNumberOfFrames
// Offset::0x6306450;
int32_t FAnimDataModel::GetNumberOfFrames();


// Function  Engine.AnimDataModel.GetNumberOfKeys
// Offset::0x6306420;
int32_t FAnimDataModel::GetNumberOfKeys();


// Function  Engine.AnimDataModel.GetNumberOfTransformCurves
// Offset::0x6305CB0;
int32_t FAnimDataModel::GetNumberOfTransformCurves();


// Function  Engine.AnimDataModel.GetNumBoneTracks
// Offset::0x6305D90;
int32_t FAnimDataModel::GetNumBoneTracks();


// Function  Engine.AnimDataModel.GetPlayLength
// Offset::0x6306480;
float FAnimDataModel::GetPlayLength();


// Function  Engine.AnimDataModel.IsValidBoneTrackIndex
// Offset::0x6305DC0;
bool FAnimDataModel::IsValidBoneTrackIndex(int32_t TrackIndex);


// Function  Engine.AnimMontage.CreateSlotAnimationAsDynamicMontage_WithBlendSettings
// Offset::0x6315980;
FAnimMontage* FAnimMontage::CreateSlotAnimationAsDynamicMontage_WithBlendSettings(FAnimSequenceBase* Asset,FName SlotNodeName,FMontageBlendSettings BlendInSettings,FMontageBlendSettings BlendOutSettings,float InPlayRate,int32_t LoopCount,float InBlendOutTriggerTime);


// Function  Engine.AnimMontage.GetBlendInArgs
// Offset::0x6315DA0;
FAlphaBlendArgs FAnimMontage::GetBlendInArgs();


// Function  Engine.AnimMontage.GetBlendOutArgs
// Offset::0x6315D20;
FAlphaBlendArgs FAnimMontage::GetBlendOutArgs();


// Function  Engine.AnimMontage.GetDefaultBlendInTime
// Offset::0x6315D00;
float FAnimMontage::GetDefaultBlendInTime();


// Function  Engine.AnimMontage.GetDefaultBlendOutTime
// Offset::0x6315CE0;
float FAnimMontage::GetDefaultBlendOutTime();


// Function  Engine.AnimMontage.IsValidSectionName
// Offset::0x6315C40;
bool FAnimMontage::IsValidSectionName(FName InSectionName);


// Function  Engine.AnimNotifyMirrorInspectionLibrary.GetMirrorDataTable
// Offset::0x631ACF0;
FMirrorDataTable* FAnimNotifyMirrorInspectionLibrary::GetMirrorDataTable(FAnimNotifyEventReference EventReference);


// Function  Engine.AnimNotifyMirrorInspectionLibrary.IsTriggeredByMirroredAnimation
// Offset::0x631ADD0;
bool FAnimNotifyMirrorInspectionLibrary::IsTriggeredByMirroredAnimation(FAnimNotifyEventReference EventReference);


// Function  Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByState
// Offset::0x631C2F0;
bool FAnimNotifyStateMachineInspectionLibrary::IsTriggeredByState(FAnimNotifyEventReference EventReference,FAnimInstance* AnimInstance,FName StateName);


// Function  Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByStateInStateMachine
// Offset::0x631C470;
bool FAnimNotifyStateMachineInspectionLibrary::IsTriggeredByStateInStateMachine(FAnimNotifyEventReference EventReference,FAnimInstance* AnimInstance,FName StateMachineName,FName StateName);


// Function  Engine.AnimNotifyStateMachineInspectionLibrary.IsTriggeredByStateMachine
// Offset::0x631C640;
bool FAnimNotifyStateMachineInspectionLibrary::IsTriggeredByStateMachine(FAnimNotifyEventReference EventReference,FAnimInstance* AnimInstance,FName StateMachineName);


// Function  Engine.AnimNotifyState_Trail.OverridePSTemplate
// Offset::0x3D30810;
FParticleSystem* FAnimNotifyState_Trail::OverridePSTemplate(FSkeletalMeshComponent* MeshComp,FAnimSequenceBase* Animation);


// Function  Engine.AnimSingleNodeInstance.GetAnimationAsset
// Offset::0x1795690;
FAnimationAsset* FAnimSingleNodeInstance::GetAnimationAsset();


// Function  Engine.AnimSingleNodeInstance.GetLength
// Offset::0x63216B0;
float FAnimSingleNodeInstance::GetLength();


// Function  Engine.AnimSingleNodeInstance.GetMirrorDataTable
// Offset::0x6321C20;
FMirrorDataTable* FAnimSingleNodeInstance::GetMirrorDataTable();


// Function  Engine.AnimSingleNodeInstance.PlayAnim
// Offset::0x6321570;
void FAnimSingleNodeInstance::PlayAnim(bool bIsLooping,float InPlayRate,float InStartPosition);


// Function  Engine.AnimSingleNodeInstance.SetAnimationAsset
// Offset::0x6321410;
void FAnimSingleNodeInstance::SetAnimationAsset(FAnimationAsset* NewAsset,bool bIsLooping,float InPlayRate);


// Function  Engine.AnimSingleNodeInstance.SetBlendSpacePosition
// Offset::0x6321780;
void FAnimSingleNodeInstance::SetBlendSpacePosition(FVector InPosition);


// Function  Engine.AnimSingleNodeInstance.SetLooping
// Offset::0x6321B80;
void FAnimSingleNodeInstance::SetLooping(bool bIsLooping);


// Function  Engine.AnimSingleNodeInstance.SetMirrorDataTable
// Offset::0x6321C50;
void FAnimSingleNodeInstance::SetMirrorDataTable(FMirrorDataTable* MirrorDataTable);


// Function  Engine.AnimSingleNodeInstance.SetPlaying
// Offset::0x63216E0;
void FAnimSingleNodeInstance::SetPlaying(bool bIsPlaying);


// Function  Engine.AnimSingleNodeInstance.SetPlayRate
// Offset::0x6321AE0;
void FAnimSingleNodeInstance::SetPlayRate(float InPlayRate);


// Function  Engine.AnimSingleNodeInstance.SetPosition
// Offset::0x6321950;
void FAnimSingleNodeInstance::SetPosition(float InPosition,bool bFireNotifies);


// Function  Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
// Offset::0x6321820;
void FAnimSingleNodeInstance::SetPositionWithPreviousTime(float InPosition,float InPreviousTime,bool bFireNotifies);


// Function  Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
// Offset::0x63212D0;
void FAnimSingleNodeInstance::SetPreviewCurveOverride(FName PoseName,float Value,bool bRemoveIfZero);


// Function  Engine.AnimSingleNodeInstance.SetReverse
// Offset::0x6321A40;
void FAnimSingleNodeInstance::SetReverse(bool bInReverse);


// Function  Engine.AnimSingleNodeInstance.StopAnim
// Offset::0x6321550;
void FAnimSingleNodeInstance::StopAnim();


// Function  Engine.RawAnimSequenceTrackExtensions.GetPositionalKeys
// Offset::0x6324140;
TArray<FVector> FRawAnimSequenceTrackExtensions::GetPositionalKeys(FRawAnimSequenceTrack Track);


// Function  Engine.RawAnimSequenceTrackExtensions.GetRotationalKeys
// Offset::0x6323F00;
TArray<FQuat> FRawAnimSequenceTrackExtensions::GetRotationalKeys(FRawAnimSequenceTrack Track);


// Function  Engine.RawAnimSequenceTrackExtensions.GetScaleKeys
// Offset::0x6323CB0;
TArray<FVector> FRawAnimSequenceTrackExtensions::GetScaleKeys(FRawAnimSequenceTrack Track);


// Function  Engine.ArrowComponent.SetArrowColor
// Offset::0x6327480;
void FArrowComponent::SetArrowColor(FLinearColor NewColor);


// Function  Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
// Offset::0x6328470;
FAsyncActionHandleSaveGame* FAsyncActionHandleSaveGame::AsyncLoadGameFromSlot(FObject* WorldContextObject,FString SlotName,int32_t UserIndex);


// Function  Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
// Offset::0x63285B0;
FAsyncActionHandleSaveGame* FAsyncActionHandleSaveGame::AsyncSaveGameToSlot(FObject* WorldContextObject,FSaveGame* SaveGameObject,FString SlotName,int32_t UserIndex);


// Function  Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
// Offset::0x6328BC0;
FAsyncActionLoadPrimaryAsset* FAsyncActionLoadPrimaryAsset::AsyncLoadPrimaryAsset(FObject* WorldContextObject,FPrimaryAssetId PrimaryAsset,TArray<FName> LoadBundles);


// Function  Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
// Offset::0x6329010;
FAsyncActionLoadPrimaryAssetClass* FAsyncActionLoadPrimaryAssetClass::AsyncLoadPrimaryAssetClass(FObject* WorldContextObject,FPrimaryAssetId PrimaryAsset,TArray<FName> LoadBundles);


// Function  Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
// Offset::0x6329460;
FAsyncActionLoadPrimaryAssetList* FAsyncActionLoadPrimaryAssetList::AsyncLoadPrimaryAssetList(FObject* WorldContextObject,TArray<FPrimaryAssetId> PrimaryAssetList,TArray<FName> LoadBundles);


// Function  Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
// Offset::0x63298C0;
FAsyncActionLoadPrimaryAssetClassList* FAsyncActionLoadPrimaryAssetClassList::AsyncLoadPrimaryAssetClassList(FObject* WorldContextObject,TArray<FPrimaryAssetId> PrimaryAssetList,TArray<FName> LoadBundles);


// Function  Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
// Offset::0x6329F00;
FAsyncActionChangePrimaryAssetBundles* FAsyncActionChangePrimaryAssetBundles::AsyncChangeBundleStateForMatchingPrimaryAssets(FObject* WorldContextObject,TArray<FName> NewBundles,TArray<FName> OldBundles);


// Function  Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
// Offset::0x6329D20;
FAsyncActionChangePrimaryAssetBundles* FAsyncActionChangePrimaryAssetBundles::AsyncChangeBundleStateForPrimaryAssetList(FObject* WorldContextObject,TArray<FPrimaryAssetId> PrimaryAssetList,TArray<FName> AddBundles,TArray<FName> RemoveBundles);


// Function  Engine.SkyAtmosphereComponent.GetAtmosphereTransmitanceOnGroundAtPlanetTop
// Offset::0x651ED30;
FLinearColor FSkyAtmosphereComponent::GetAtmosphereTransmitanceOnGroundAtPlanetTop(FDirectionalLightComponent* DirectionalLight);


// Function  Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
// Offset::0x651F6A0;
void FSkyAtmosphereComponent::OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex,FVector LightDirection);


// Function  Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
// Offset::0x651EE80;
void FSkyAtmosphereComponent::SetAerialPespectiveViewDistanceScale(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetAtmosphereHeight
// Offset::0x651F600;
void FSkyAtmosphereComponent::SetAtmosphereHeight(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetHeightFogContribution
// Offset::0x651EDE0;
void FSkyAtmosphereComponent::SetHeightFogContribution(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetMieAbsorption
// Offset::0x651F100;
void FSkyAtmosphereComponent::SetMieAbsorption(FLinearColor NewValue);


// Function  Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
// Offset::0x651F1A0;
void FSkyAtmosphereComponent::SetMieAbsorptionScale(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetMieAnisotropy
// Offset::0x651F060;
void FSkyAtmosphereComponent::SetMieAnisotropy(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
// Offset::0x6471180;
void FSkyAtmosphereComponent::SetMieExponentialDistribution(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetMieScattering
// Offset::0x651F240;
void FSkyAtmosphereComponent::SetMieScattering(FLinearColor NewValue);


// Function  Engine.SkyAtmosphereComponent.SetMieScatteringScale
// Offset::0x651F2E0;
void FSkyAtmosphereComponent::SetMieScatteringScale(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetMultiScatteringFactor
// Offset::0x651F560;
void FSkyAtmosphereComponent::SetMultiScatteringFactor(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetOtherAbsorption
// Offset::0x651EFC0;
void FSkyAtmosphereComponent::SetOtherAbsorption(FLinearColor NewValue);


// Function  Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
// Offset::0x64710E0;
void FSkyAtmosphereComponent::SetOtherAbsorptionScale(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
// Offset::0x651F380;
void FSkyAtmosphereComponent::SetRayleighExponentialDistribution(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetRayleighScattering
// Offset::0x651F420;
void FSkyAtmosphereComponent::SetRayleighScattering(FLinearColor NewValue);


// Function  Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
// Offset::0x651F4C0;
void FSkyAtmosphereComponent::SetRayleighScatteringScale(float NewValue);


// Function  Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
// Offset::0x651EF20;
void FSkyAtmosphereComponent::SetSkyLuminanceFactor(FLinearColor NewValue);


// Function  Engine.AtmosphericFogComponent.DisableGroundScattering
// Offset::0x5045200;
void FAtmosphericFogComponent::DisableGroundScattering(bool NewGroundScattering);


// Function  Engine.AtmosphericFogComponent.DisableSunDisk
// Offset::0x5045200;
void FAtmosphericFogComponent::DisableSunDisk(bool NewSunDisk);


// Function  Engine.AtmosphericFogComponent.SetAltitudeScale
// Offset::0x632BA60;
void FAtmosphericFogComponent::SetAltitudeScale(float NewAltitudeScale);


// Function  Engine.AtmosphericFogComponent.SetDefaultBrightness
// Offset::0x632BA60;
void FAtmosphericFogComponent::SetDefaultBrightness(float NewBrightness);


// Function  Engine.AtmosphericFogComponent.SetDefaultLightColor
// Offset::0x632BAF0;
void FAtmosphericFogComponent::SetDefaultLightColor(FLinearColor NewLightColor);


// Function  Engine.AtmosphericFogComponent.SetDensityMultiplier
// Offset::0x632BA60;
void FAtmosphericFogComponent::SetDensityMultiplier(float NewDensityMultiplier);


// Function  Engine.AtmosphericFogComponent.SetDensityOffset
// Offset::0x632BA60;
void FAtmosphericFogComponent::SetDensityOffset(float NewDensityOffset);


// Function  Engine.AtmosphericFogComponent.SetDistanceOffset
// Offset::0x632BA60;
void FAtmosphericFogComponent::SetDistanceOffset(float NewDistanceOffset);


// Function  Engine.AtmosphericFogComponent.SetDistanceScale
// Offset::0x632BA60;
void FAtmosphericFogComponent::SetDistanceScale(float NewDistanceScale);


// Function  Engine.AtmosphericFogComponent.SetFogMultiplier
// Offset::0x632BA60;
void FAtmosphericFogComponent::SetFogMultiplier(float NewFogMultiplier);


// Function  Engine.AtmosphericFogComponent.SetPrecomputeParams
// Offset::0x632B950;
void FAtmosphericFogComponent::SetPrecomputeParams(float DensityHeight,int32_t MaxScatteringOrder,int32_t InscatterAltitudeSampleNum);


// Function  Engine.AtmosphericFogComponent.SetStartDistance
// Offset::0x632BA60;
void FAtmosphericFogComponent::SetStartDistance(float NewStartDistance);


// Function  Engine.AtmosphericFogComponent.SetSunMultiplier
// Offset::0x632BA60;
void FAtmosphericFogComponent::SetSunMultiplier(float NewSunMultiplier);


// Function  Engine.AnimationAttributeIdentifierExtensions.IsValid
// Offset::0x632C750;
bool FAnimationAttributeIdentifierExtensions::IsValid(FAnimationAttributeIdentifier Identifier);


// Function  Engine.AudioPanelWidgetInterface.GetEditorName
// Offset::0x3D30810;
FText FAudioPanelWidgetInterface::GetEditorName();


// Function  Engine.AudioPanelWidgetInterface.GetIconBrushName
// Offset::0x3D30810;
FName FAudioPanelWidgetInterface::GetIconBrushName();


// Function  Engine.AudioVolume.OnRep_bEnabled
// Offset::0x6331B50;
void FAudioVolume::OnRep_bEnabled();


// Function  Engine.AudioVolume.SetEnabled
// Offset::0x6331F00;
void FAudioVolume::SetEnabled(bool bNewEnabled);


// Function  Engine.AudioVolume.SetInteriorSettings
// Offset::0x6331D90;
void FAudioVolume::SetInteriorSettings(FInteriorSettings NewInteriorSettings);


// Function  Engine.AudioVolume.SetPriority
// Offset::0x6331FA0;
void FAudioVolume::SetPriority(float NewPriority);


// Function  Engine.AudioVolume.SetReverbSettings
// Offset::0x6331E40;
void FAudioVolume::SetReverbSettings(FReverbSettings NewReverbSettings);


// Function  Engine.AudioVolume.SetSubmixOverrideSettings
// Offset::0x6331B70;
void FAudioVolume::SetSubmixOverrideSettings(TArray<FAudioVolumeSubmixOverrideSettings> NewSubmixOverrideSettings);


// Function  Engine.AudioVolume.SetSubmixSendSettings
// Offset::0x6331C50;
void FAudioVolume::SetSubmixSendSettings(TArray<FAudioVolumeSubmixSendSettings> NewSubmixSendSettings);


// Function  Engine.AutoDestroySubsystem.OnActorEndPlay
// Offset::0x63327B0;
void FAutoDestroySubsystem::OnActorEndPlay(FActor* Actor,enum class EEndPlayReason EndPlayReason);


// Function  Engine.BillboardComponent.SetOpacityMaskRefVal
// Offset::0x6335BA0;
void FBillboardComponent::SetOpacityMaskRefVal(float RefVal);


// Function  Engine.BillboardComponent.SetSprite
// Offset::0x2D46730;
void FBillboardComponent::SetSprite(FTexture2D* NewSprite);


// Function  Engine.BillboardComponent.SetSpriteAndUV
// Offset::0x6335C40;
void FBillboardComponent::SetSpriteAndUV(FTexture2D* NewSprite,int32_t NewU,int32_t NewUL,int32_t NewV,int32_t NewVL);


// Function  Engine.BillboardComponent.SetUV
// Offset::0x6335E10;
void FBillboardComponent::SetUV(int32_t NewU,int32_t NewUL,int32_t NewV,int32_t NewVL);


// Function  Engine.BlueprintMapLibrary.Map_Add
// Offset::0x6339BD0;
void FBlueprintMapLibrary::Map_Add(TMap<int32_t,int32_t> TargetMap,int32_t Key,int32_t Value);


// Function  Engine.BlueprintMapLibrary.Map_Clear
// Offset::0x6339E90;
void FBlueprintMapLibrary::Map_Clear(TMap<int32_t,int32_t> TargetMap);


// Function  Engine.BlueprintMapLibrary.Map_Contains
// Offset::0x6339F30;
bool FBlueprintMapLibrary::Map_Contains(TMap<int32_t,int32_t> TargetMap,int32_t Key);


// Function  Engine.BlueprintMapLibrary.Map_Find
// Offset::0x633A110;
bool FBlueprintMapLibrary::Map_Find(TMap<int32_t,int32_t> TargetMap,int32_t Key,int32_t Value);


// Function  Engine.BlueprintMapLibrary.Map_IsEmpty
// Offset::0x633A410;
bool FBlueprintMapLibrary::Map_IsEmpty(TMap<int32_t,int32_t> TargetMap);


// Function  Engine.BlueprintMapLibrary.Map_IsNotEmpty
// Offset::0x633A4A0;
bool FBlueprintMapLibrary::Map_IsNotEmpty(TMap<int32_t,int32_t> TargetMap);


// Function  Engine.BlueprintMapLibrary.Map_Keys
// Offset::0x633A530;
void FBlueprintMapLibrary::Map_Keys(TMap<int32_t,int32_t> TargetMap,TArray<int32_t> Keys);


// Function  Engine.BlueprintMapLibrary.Map_Length
// Offset::0x633A640;
int32_t FBlueprintMapLibrary::Map_Length(TMap<int32_t,int32_t> TargetMap);


// Function  Engine.BlueprintMapLibrary.Map_Remove
// Offset::0x633A6D0;
bool FBlueprintMapLibrary::Map_Remove(TMap<int32_t,int32_t> TargetMap,int32_t Key);


// Function  Engine.BlueprintMapLibrary.Map_Values
// Offset::0x633A890;
void FBlueprintMapLibrary::Map_Values(TMap<int32_t,int32_t> TargetMap,TArray<int32_t> Values);


// Function  Engine.BlueprintMapLibrary.SetMapPropertyByName
// Offset::0x633A980;
void FBlueprintMapLibrary::SetMapPropertyByName(FObject* Object,FName PropertyName,TMap<int32_t,int32_t> Value);


// Function  Engine.BlueprintPathsLibrary.AutomationDir
// Offset::0x633D340;
FString FBlueprintPathsLibrary::AutomationDir();


// Function  Engine.BlueprintPathsLibrary.AutomationLogDir
// Offset::0x633D240;
FString FBlueprintPathsLibrary::AutomationLogDir();


// Function  Engine.BlueprintPathsLibrary.AutomationTransientDir
// Offset::0x633D2C0;
FString FBlueprintPathsLibrary::AutomationTransientDir();


// Function  Engine.BlueprintPathsLibrary.BugItDir
// Offset::0x633D4C0;
FString FBlueprintPathsLibrary::BugItDir();


// Function  Engine.BlueprintPathsLibrary.ChangeExtension
// Offset::0x633C5C0;
FString FBlueprintPathsLibrary::ChangeExtension(FString InPath,FString InNewExtension);


// Function  Engine.BlueprintPathsLibrary.CloudDir
// Offset::0x633D1C0;
FString FBlueprintPathsLibrary::CloudDir();


// Function  Engine.BlueprintPathsLibrary.CollapseRelativeDirectories
// Offset::0x633BD90;
bool FBlueprintPathsLibrary::CollapseRelativeDirectories(FString InPath,FString OutPath);


// Function  Engine.BlueprintPathsLibrary.Combine
// Offset::0x633ACE0;
FString FBlueprintPathsLibrary::Combine(TArray<FString> InPaths);


// Function  Engine.BlueprintPathsLibrary.ConvertFromSandboxPath
// Offset::0x633B530;
FString FBlueprintPathsLibrary::ConvertFromSandboxPath(FString InPath,FString InSandboxName);


// Function  Engine.BlueprintPathsLibrary.ConvertRelativePathToFull
// Offset::0x633B7B0;
FString FBlueprintPathsLibrary::ConvertRelativePathToFull(FString InPath,FString InBasePath);


// Function  Engine.BlueprintPathsLibrary.ConvertToSandboxPath
// Offset::0x633B670;
FString FBlueprintPathsLibrary::ConvertToSandboxPath(FString InPath,FString InSandboxName);


// Function  Engine.BlueprintPathsLibrary.CreateTempFilename
// Offset::0x633B3A0;
FString FBlueprintPathsLibrary::CreateTempFilename(FString Path,FString Prefix,FString Extension);


// Function  Engine.BlueprintPathsLibrary.DiffDir
// Offset::0x633D040;
FString FBlueprintPathsLibrary::DiffDir();


// Function  Engine.BlueprintPathsLibrary.DirectoryExists
// Offset::0x633C320;
bool FBlueprintPathsLibrary::DirectoryExists(FString InPath);


// Function  Engine.BlueprintPathsLibrary.EngineConfigDir
// Offset::0x633DFF0;
FString FBlueprintPathsLibrary::EngineConfigDir();


// Function  Engine.BlueprintPathsLibrary.EngineContentDir
// Offset::0x633E070;
FString FBlueprintPathsLibrary::EngineContentDir();


// Function  Engine.BlueprintPathsLibrary.EngineDir
// Offset::0x633E1F0;
FString FBlueprintPathsLibrary::EngineDir();


// Function  Engine.BlueprintPathsLibrary.EngineIntermediateDir
// Offset::0x633DF70;
FString FBlueprintPathsLibrary::EngineIntermediateDir();


// Function  Engine.BlueprintPathsLibrary.EnginePluginsDir
// Offset::0x633DE70;
FString FBlueprintPathsLibrary::EnginePluginsDir();


// Function  Engine.BlueprintPathsLibrary.EngineSavedDir
// Offset::0x633DEF0;
FString FBlueprintPathsLibrary::EngineSavedDir();


// Function  Engine.BlueprintPathsLibrary.EngineSourceDir
// Offset::0x633CD70;
FString FBlueprintPathsLibrary::EngineSourceDir();


// Function  Engine.BlueprintPathsLibrary.EngineUserDir
// Offset::0x633E170;
FString FBlueprintPathsLibrary::EngineUserDir();


// Function  Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir
// Offset::0x633E0F0;
FString FBlueprintPathsLibrary::EngineVersionAgnosticUserDir();


// Function  Engine.BlueprintPathsLibrary.EnterpriseDir
// Offset::0x633DDF0;
FString FBlueprintPathsLibrary::EnterpriseDir();


// Function  Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir
// Offset::0x633DCF0;
FString FBlueprintPathsLibrary::EnterpriseFeaturePackDir();


// Function  Engine.BlueprintPathsLibrary.EnterprisePluginsDir
// Offset::0x633DD70;
FString FBlueprintPathsLibrary::EnterprisePluginsDir();


// Function  Engine.BlueprintPathsLibrary.FeaturePackDir
// Offset::0x633CC70;
FString FBlueprintPathsLibrary::FeaturePackDir();


// Function  Engine.BlueprintPathsLibrary.FileExists
// Offset::0x633C3D0;
bool FBlueprintPathsLibrary::FileExists(FString InPath);


// Function  Engine.BlueprintPathsLibrary.GameAgnosticSavedDir
// Offset::0x633CDF0;
FString FBlueprintPathsLibrary::GameAgnosticSavedDir();


// Function  Engine.BlueprintPathsLibrary.GameDevelopersDir
// Offset::0x633D140;
FString FBlueprintPathsLibrary::GameDevelopersDir();


// Function  Engine.BlueprintPathsLibrary.GameSourceDir
// Offset::0x633CCF0;
FString FBlueprintPathsLibrary::GameSourceDir();


// Function  Engine.BlueprintPathsLibrary.GameUserDeveloperDir
// Offset::0x633D0C0;
FString FBlueprintPathsLibrary::GameUserDeveloperDir();


// Function  Engine.BlueprintPathsLibrary.GeneratedConfigDir
// Offset::0x633D6C0;
FString FBlueprintPathsLibrary::GeneratedConfigDir();


// Function  Engine.BlueprintPathsLibrary.GetBaseFilename
// Offset::0x633C7E0;
FString FBlueprintPathsLibrary::GetBaseFilename(FString InPath,bool bRemovePath);


// Function  Engine.BlueprintPathsLibrary.GetCleanFilename
// Offset::0x633C910;
FString FBlueprintPathsLibrary::GetCleanFilename(FString InPath);


// Function  Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths
// Offset::0x633CFE0;
TArray<FString> FBlueprintPathsLibrary::GetEditorLocalizationPaths();


// Function  Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths
// Offset::0x633D010;
TArray<FString> FBlueprintPathsLibrary::GetEngineLocalizationPaths();


// Function  Engine.BlueprintPathsLibrary.GetExtension
// Offset::0x633C9F0;
FString FBlueprintPathsLibrary::GetExtension(FString InPath,bool bIncludeDot);


// Function  Engine.BlueprintPathsLibrary.GetGameLocalizationPaths
// Offset::0x633CF50;
TArray<FString> FBlueprintPathsLibrary::GetGameLocalizationPaths();


// Function  Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars
// Offset::0x633B320;
FString FBlueprintPathsLibrary::GetInvalidFileSystemChars();


// Function  Engine.BlueprintPathsLibrary.GetPath
// Offset::0x633C700;
FString FBlueprintPathsLibrary::GetPath(FString InPath);


// Function  Engine.BlueprintPathsLibrary.GetProjectFilePath
// Offset::0x633CBC0;
FString FBlueprintPathsLibrary::GetProjectFilePath();


// Function  Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths
// Offset::0x633CFB0;
TArray<FString> FBlueprintPathsLibrary::GetPropertyNameLocalizationPaths();


// Function  Engine.BlueprintPathsLibrary.GetRelativePathToRoot
// Offset::0x633AE10;
FString FBlueprintPathsLibrary::GetRelativePathToRoot();


// Function  Engine.BlueprintPathsLibrary.GetRestrictedFolderNames
// Offset::0x633CF20;
TArray<FString> FBlueprintPathsLibrary::GetRestrictedFolderNames();


// Function  Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths
// Offset::0x633CF80;
TArray<FString> FBlueprintPathsLibrary::GetToolTipLocalizationPaths();


// Function  Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir
// Offset::0x633D840;
bool FBlueprintPathsLibrary::HasProjectPersistentDownloadDir();


// Function  Engine.BlueprintPathsLibrary.IsDrive
// Offset::0x633C270;
bool FBlueprintPathsLibrary::IsDrive(FString InPath);


// Function  Engine.BlueprintPathsLibrary.IsProjectFilePathSet
// Offset::0x633CC40;
bool FBlueprintPathsLibrary::IsProjectFilePathSet();


// Function  Engine.BlueprintPathsLibrary.IsRelative
// Offset::0x633C1C0;
bool FBlueprintPathsLibrary::IsRelative(FString InPath);


// Function  Engine.BlueprintPathsLibrary.IsRestrictedPath
// Offset::0x633CE70;
bool FBlueprintPathsLibrary::IsRestrictedPath(FString InPath);


// Function  Engine.BlueprintPathsLibrary.IsSamePath
// Offset::0x633BFB0;
bool FBlueprintPathsLibrary::IsSamePath(FString PathA,FString PathB);


// Function  Engine.BlueprintPathsLibrary.LaunchDir
// Offset::0x633E270;
FString FBlueprintPathsLibrary::LaunchDir();


// Function  Engine.BlueprintPathsLibrary.MakePathRelativeTo
// Offset::0x633B8F0;
bool FBlueprintPathsLibrary::MakePathRelativeTo(FString InPath,FString InRelativeTo,FString OutPath);


// Function  Engine.BlueprintPathsLibrary.MakePlatformFilename
// Offset::0x633BA60;
void FBlueprintPathsLibrary::MakePlatformFilename(FString InPath,FString OutPath);


// Function  Engine.BlueprintPathsLibrary.MakeStandardFilename
// Offset::0x633BB70;
void FBlueprintPathsLibrary::MakeStandardFilename(FString InPath,FString OutPath);


// Function  Engine.BlueprintPathsLibrary.MakeValidFileName
// Offset::0x633B1E0;
FString FBlueprintPathsLibrary::MakeValidFileName(FString InString,FString InReplacementChar);


// Function  Engine.BlueprintPathsLibrary.NormalizeDirectoryName
// Offset::0x633BEA0;
void FBlueprintPathsLibrary::NormalizeDirectoryName(FString InPath,FString OutPath);


// Function  Engine.BlueprintPathsLibrary.NormalizeFilename
// Offset::0x633C0B0;
void FBlueprintPathsLibrary::NormalizeFilename(FString InPath,FString OutPath);


// Function  Engine.BlueprintPathsLibrary.ProfilingDir
// Offset::0x633D5C0;
FString FBlueprintPathsLibrary::ProfilingDir();


// Function  Engine.BlueprintPathsLibrary.ProjectConfigDir
// Offset::0x633D740;
FString FBlueprintPathsLibrary::ProjectConfigDir();


// Function  Engine.BlueprintPathsLibrary.ProjectContentDir
// Offset::0x633DAF0;
FString FBlueprintPathsLibrary::ProjectContentDir();


// Function  Engine.BlueprintPathsLibrary.ProjectDir
// Offset::0x633DBF0;
FString FBlueprintPathsLibrary::ProjectDir();


// Function  Engine.BlueprintPathsLibrary.ProjectIntermediateDir
// Offset::0x633D9F0;
FString FBlueprintPathsLibrary::ProjectIntermediateDir();


// Function  Engine.BlueprintPathsLibrary.ProjectLogDir
// Offset::0x633D3C0;
FString FBlueprintPathsLibrary::ProjectLogDir();


// Function  Engine.BlueprintPathsLibrary.ProjectModsDir
// Offset::0x633D870;
FString FBlueprintPathsLibrary::ProjectModsDir();


// Function  Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir
// Offset::0x633D7C0;
FString FBlueprintPathsLibrary::ProjectPersistentDownloadDir();


// Function  Engine.BlueprintPathsLibrary.ProjectPluginsDir
// Offset::0x633D8F0;
FString FBlueprintPathsLibrary::ProjectPluginsDir();


// Function  Engine.BlueprintPathsLibrary.ProjectSavedDir
// Offset::0x633DA70;
FString FBlueprintPathsLibrary::ProjectSavedDir();


// Function  Engine.BlueprintPathsLibrary.ProjectUserDir
// Offset::0x633DB70;
FString FBlueprintPathsLibrary::ProjectUserDir();


// Function  Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes
// Offset::0x633BC80;
void FBlueprintPathsLibrary::RemoveDuplicateSlashes(FString InPath,FString OutPath);


// Function  Engine.BlueprintPathsLibrary.RootDir
// Offset::0x633DC70;
FString FBlueprintPathsLibrary::RootDir();


// Function  Engine.BlueprintPathsLibrary.SandboxesDir
// Offset::0x633D640;
FString FBlueprintPathsLibrary::SandboxesDir();


// Function  Engine.BlueprintPathsLibrary.ScreenShotDir
// Offset::0x633D540;
FString FBlueprintPathsLibrary::ScreenShotDir();


// Function  Engine.BlueprintPathsLibrary.SetExtension
// Offset::0x633C480;
FString FBlueprintPathsLibrary::SetExtension(FString InPath,FString InNewExtension);


// Function  Engine.BlueprintPathsLibrary.SetProjectFilePath
// Offset::0x633CB20;
void FBlueprintPathsLibrary::SetProjectFilePath(FString NewGameProjectFilePath);


// Function  Engine.BlueprintPathsLibrary.ShaderWorkingDir
// Offset::0x633D970;
FString FBlueprintPathsLibrary::ShaderWorkingDir();


// Function  Engine.BlueprintPathsLibrary.ShouldSaveToUserDir
// Offset::0x633E2F0;
bool FBlueprintPathsLibrary::ShouldSaveToUserDir();


// Function  Engine.BlueprintPathsLibrary.SourceConfigDir
// Offset::0x633D740;
FString FBlueprintPathsLibrary::SourceConfigDir();


// Function  Engine.BlueprintPathsLibrary.Split
// Offset::0x633AE80;
void FBlueprintPathsLibrary::Split(FString InPath,FString PathPart,FString FilenamePart,FString ExtensionPart);


// Function  Engine.BlueprintPathsLibrary.ValidatePath
// Offset::0x633B060;
void FBlueprintPathsLibrary::ValidatePath(FString InPath,bool bDidSucceed,FText OutReason);


// Function  Engine.BlueprintPathsLibrary.VideoCaptureDir
// Offset::0x633D440;
FString FBlueprintPathsLibrary::VideoCaptureDir();


// Function  Engine.BlueprintPlatformLibrary.CancelLocalNotification
// Offset::0x6342540;
void FBlueprintPlatformLibrary::CancelLocalNotification(FString ActivationEvent);


// Function  Engine.BlueprintPlatformLibrary.CancelLocalNotificationById
// Offset::0x63424B0;
void FBlueprintPlatformLibrary::CancelLocalNotificationById(int32_t NotificationId);


// Function  Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications
// Offset::0x6342E00;
void FBlueprintPlatformLibrary::ClearAllLocalNotifications();


// Function  Engine.BlueprintPlatformLibrary.GetDeviceOrientation
// Offset::0x6342310;
enum class EScreenOrientation FBlueprintPlatformLibrary::GetDeviceOrientation();


// Function  Engine.BlueprintPlatformLibrary.GetLaunchNotification
// Offset::0x6342340;
void FBlueprintPlatformLibrary::GetLaunchNotification(bool NotificationLaunchedApp,FString ActivationEvent,int32_t FireDate);


// Function  Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime
// Offset::0x6342AE0;
int32_t FBlueprintPlatformLibrary::ScheduleLocalNotificationAtTime(FDateTime FireDateTime,bool LocalTime,FText Title,FText Body,FText Action,FString ActivationEvent);


// Function  Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime
// Offset::0x63426D0;
int32_t FBlueprintPlatformLibrary::ScheduleLocalNotificationBadgeAtTime(FDateTime FireDateTime,bool LocalTime,FString ActivationEvent);


// Function  Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow
// Offset::0x63425E0;
void FBlueprintPlatformLibrary::ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow,FString ActivationEvent);


// Function  Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow
// Offset::0x6342830;
int32_t FBlueprintPlatformLibrary::ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow,FText Title,FText Body,FText Action,FString ActivationEvent);


// Function  Engine.BlueprintSetLibrary.Set_Add
// Offset::0x6343650;
void FBlueprintSetLibrary::Set_Add(TSet<int32_t> TargetSet,int32_t NewItem);


// Function  Engine.BlueprintSetLibrary.Set_AddItems
// Offset::0x6343810;
void FBlueprintSetLibrary::Set_AddItems(TSet<int32_t> TargetSet,TArray<int32_t> NewItems);


// Function  Engine.BlueprintSetLibrary.Set_Clear
// Offset::0x6343920;
void FBlueprintSetLibrary::Set_Clear(TSet<int32_t> TargetSet);


// Function  Engine.BlueprintSetLibrary.Set_Contains
// Offset::0x63439B0;
bool FBlueprintSetLibrary::Set_Contains(TSet<int32_t> TargetSet,int32_t ItemToFind);


// Function  Engine.BlueprintSetLibrary.Set_Difference
// Offset::0x6343B70;
void FBlueprintSetLibrary::Set_Difference(TSet<int32_t> A,TSet<int32_t> B,TSet<int32_t> Result);


// Function  Engine.BlueprintSetLibrary.Set_Intersection
// Offset::0x6343CE0;
void FBlueprintSetLibrary::Set_Intersection(TSet<int32_t> A,TSet<int32_t> B,TSet<int32_t> Result);


// Function  Engine.BlueprintSetLibrary.Set_IsEmpty
// Offset::0x6343E50;
bool FBlueprintSetLibrary::Set_IsEmpty(TSet<int32_t> TargetSet);


// Function  Engine.BlueprintSetLibrary.Set_IsNotEmpty
// Offset::0x6343EE0;
bool FBlueprintSetLibrary::Set_IsNotEmpty(TSet<int32_t> TargetSet);


// Function  Engine.BlueprintSetLibrary.Set_Length
// Offset::0x6343F70;
int32_t FBlueprintSetLibrary::Set_Length(TSet<int32_t> TargetSet);


// Function  Engine.BlueprintSetLibrary.Set_Remove
// Offset::0x6344000;
bool FBlueprintSetLibrary::Set_Remove(TSet<int32_t> TargetSet,int32_t Item);


// Function  Engine.BlueprintSetLibrary.Set_RemoveItems
// Offset::0x63441D0;
void FBlueprintSetLibrary::Set_RemoveItems(TSet<int32_t> TargetSet,TArray<int32_t> Items);


// Function  Engine.BlueprintSetLibrary.Set_ToArray
// Offset::0x63442C0;
void FBlueprintSetLibrary::Set_ToArray(TSet<int32_t> A,TArray<int32_t> Result);


// Function  Engine.BlueprintSetLibrary.Set_Union
// Offset::0x63443D0;
void FBlueprintSetLibrary::Set_Union(TSet<int32_t> A,TSet<int32_t> B,TSet<int32_t> Result);


// Function  Engine.BlueprintSetLibrary.SetSetPropertyByName
// Offset::0x6344540;
void FBlueprintSetLibrary::SetSetPropertyByName(FObject* Object,FName PropertyName,TSet<int32_t> Value);


// Function  Engine.CachedAnimDataLibrary.StateMachine_GetGlobalWeight
// Offset::0x6347770;
float FCachedAnimDataLibrary::StateMachine_GetGlobalWeight(FAnimInstance* InAnimInstance,FCachedAnimStateData CachedAnimStateData);


// Function  Engine.CachedAnimDataLibrary.StateMachine_GetLocalWeight
// Offset::0x6347870;
float FCachedAnimDataLibrary::StateMachine_GetLocalWeight(FAnimInstance* InAnimInstance,FCachedAnimStateData CachedAnimStateData);


// Function  Engine.CachedAnimDataLibrary.StateMachine_IsStateRelevant
// Offset::0x6347970;
bool FCachedAnimDataLibrary::StateMachine_IsStateRelevant(FAnimInstance* InAnimInstance,FCachedAnimStateData CachedAnimStateData);


// Function  Engine.CameraAnimInst.SetDuration
// Offset::0x6348300;
void FCameraAnimInst::SetDuration(float NewDuration);


// Function  Engine.CameraAnimInst.SetScale
// Offset::0x6348260;
void FCameraAnimInst::SetScale(float NewDuration);


// Function  Engine.CameraAnimInst.Stop
// Offset::0x63483A0;
void FCameraAnimInst::Stop(bool bImmediate);


// Function  Engine.CameraLensEffectInterface.GetParticleComponents
// Offset::0x63499F0;
TArray<FFXSystemComponent*> FCameraLensEffectInterface::GetParticleComponents();


// Function  Engine.CameraLensEffectInterface.GetPrimaryParticleComponent
// Offset::0x63499C0;
FFXSystemComponent* FCameraLensEffectInterface::GetPrimaryParticleComponent();


// Function  Engine.CameraLensEffectInterfaceClassSupportLibrary.GetInterfaceClass
// Offset::0x634A190;
FActor* FCameraLensEffectInterfaceClassSupportLibrary::GetInterfaceClass(FCameraLensInterfaceClassSupport CameraLens);


// Function  Engine.CameraLensEffectInterfaceClassSupportLibrary.IsInterfaceClassValid
// Offset::0x634A090;
void FCameraLensEffectInterfaceClassSupportLibrary::IsInterfaceClassValid(FCameraLensInterfaceClassSupport CameraLens,enum class EInterfaceValidResult Result);


// Function  Engine.CameraLensEffectInterfaceClassSupportLibrary.IsInterfaceValid
// Offset::0x6349F90;
void FCameraLensEffectInterfaceClassSupportLibrary::IsInterfaceValid(TScriptInterface<ICameraLensEffectInterface> CameraLens,enum class EInterfaceValidResult Result);


// Function  Engine.CameraLensEffectInterfaceClassSupportLibrary.SetInterfaceClass
// Offset::0x6349E50;
void FCameraLensEffectInterfaceClassSupportLibrary::SetInterfaceClass(FActor* Class,FCameraLensInterfaceClassSupport Var,enum class EInterfaceValidResult Result);


// Function  Engine.CameraShakeSourceComponent.GetAttenuationFactor
// Offset::0x634CB90;
float FCameraShakeSourceComponent::GetAttenuationFactor(FVector Location);


// Function  Engine.CameraShakeSourceComponent.Start
// Offset::0x634CF60;
void FCameraShakeSourceComponent::Start();


// Function  Engine.CameraShakeSourceComponent.StartCameraShake
// Offset::0x634CDD0;
void FCameraShakeSourceComponent::StartCameraShake(FCameraShakeBase* InCameraShake,float Scale,enum class ECameraShakePlaySpace PlaySpace,FRotator UserPlaySpaceRot);


// Function  Engine.CameraShakeSourceComponent.StopAllCameraShakes
// Offset::0x634CC40;
void FCameraShakeSourceComponent::StopAllCameraShakes(bool bImmediately);


// Function  Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType
// Offset::0x634CCE0;
void FCameraShakeSourceComponent::StopAllCameraShakesOfType(FCameraShakeBase* InCameraShake,bool bImmediately);


// Function  Engine.Canvas.K2_Deproject
// Offset::0x634DBA0;
void FCanvas::K2_Deproject(FVector2D ScreenPosition,FVector WorldOrigin,FVector WorldDirection);


// Function  Engine.Canvas.K2_DrawBorder
// Offset::0x634E3B0;
void FCanvas::K2_DrawBorder(FTexture* BorderTexture,FTexture* BackgroundTexture,FTexture* LeftBorderTexture,FTexture* RightBorderTexture,FTexture* TopBorderTexture,FTexture* BottomBorderTexture,FVector2D ScreenPosition,FVector2D ScreenSize,FVector2D CoordinatePosition,FVector2D CoordinateSize,FLinearColor RenderColor,FVector2D BorderScale,FVector2D BackgroundScale,float Rotation,FVector2D PivotPoint,FVector2D CornerSize);


// Function  Engine.Canvas.K2_DrawBox
// Offset::0x634E210;
void FCanvas::K2_DrawBox(FVector2D ScreenPosition,FVector2D ScreenSize,float Thickness,FLinearColor RenderColor);


// Function  Engine.Canvas.K2_DrawLine
// Offset::0x634F520;
void FCanvas::K2_DrawLine(FVector2D ScreenPositionA,FVector2D ScreenPositionB,float Thickness,FLinearColor RenderColor);


// Function  Engine.Canvas.K2_DrawMaterial
// Offset::0x634EEC0;
void FCanvas::K2_DrawMaterial(FMaterialInterface* RenderMaterial,FVector2D ScreenPosition,FVector2D ScreenSize,FVector2D CoordinatePosition,FVector2D CoordinateSize,float Rotation,FVector2D PivotPoint);


// Function  Engine.Canvas.K2_DrawMaterialTriangle
// Offset::0x634DF90;
void FCanvas::K2_DrawMaterialTriangle(FMaterialInterface* RenderMaterial,TArray<FCanvasUVTri> Triangles);


// Function  Engine.Canvas.K2_DrawPolygon
// Offset::0x634DDA0;
void FCanvas::K2_DrawPolygon(FTexture* RenderTexture,FVector2D ScreenPosition,FVector2D Radius,int32_t NumberOfSides,FLinearColor RenderColor);


// Function  Engine.Canvas.K2_DrawText
// Offset::0x634E9F0;
void FCanvas::K2_DrawText(FFont* RenderFont,FString RenderText,FVector2D ScreenPosition,FVector2D Scale,FLinearColor RenderColor,float Kerning,FLinearColor ShadowColor,FVector2D ShadowOffset,bool bCentreX,bool bCentreY,bool bOutlined,FLinearColor OutlineColor);


// Function  Engine.Canvas.K2_DrawTexture
// Offset::0x634F190;
void FCanvas::K2_DrawTexture(FTexture* RenderTexture,FVector2D ScreenPosition,FVector2D ScreenSize,FVector2D CoordinatePosition,FVector2D CoordinateSize,FLinearColor RenderColor,enum class EBlendMode BlendMode,float Rotation,FVector2D PivotPoint);


// Function  Engine.Canvas.K2_DrawTriangle
// Offset::0x634E0D0;
void FCanvas::K2_DrawTriangle(FTexture* RenderTexture,TArray<FCanvasUVTri> Triangles);


// Function  Engine.Canvas.K2_Project
// Offset::0x634DCE0;
FVector FCanvas::K2_Project(FVector WorldLocation);


// Function  Engine.Canvas.K2_StrLen
// Offset::0x634DAA0;
FVector2D FCanvas::K2_StrLen(FFont* RenderFont,FString RenderText);


// Function  Engine.Canvas.K2_TextSize
// Offset::0x634D940;
FVector2D FCanvas::K2_TextSize(FFont* RenderFont,FString RenderText,FVector2D Scale);


// Function  Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
// Offset::0x63500C0;
FCanvasRenderTarget2D* FCanvasRenderTarget2D::CreateCanvasRenderTarget2D(FObject* WorldContextObject,FCanvasRenderTarget2D* CanvasRenderTarget2DClass,int32_t Width,int32_t Height);


// Function  Engine.CanvasRenderTarget2D.GetSize
// Offset::0x634FFC0;
void FCanvasRenderTarget2D::GetSize(int32_t Width,int32_t Height);


// Function  Engine.CanvasRenderTarget2D.ReceiveUpdate
// Offset::0x3D30810;
void FCanvasRenderTarget2D::ReceiveUpdate(FCanvas* Canvas,int32_t Width,int32_t Height);


// Function  Engine.CanvasRenderTarget2D.UpdateResource
// Offset::0x5717730;
void FCanvasRenderTarget2D::UpdateResource();


// Function  Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
// Offset::0x6352610;
float FCapsuleComponent::GetScaledCapsuleHalfHeight();


// Function  Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
// Offset::0x6352580;
float FCapsuleComponent::GetScaledCapsuleHalfHeight_WithoutHemisphere();


// Function  Engine.CapsuleComponent.GetScaledCapsuleRadius
// Offset::0x6352660;
float FCapsuleComponent::GetScaledCapsuleRadius();


// Function  Engine.CapsuleComponent.GetScaledCapsuleSize
// Offset::0x6352410;
void FCapsuleComponent::GetScaledCapsuleSize(float OutRadius,float OutHalfHeight);


// Function  Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
// Offset::0x6352260;
void FCapsuleComponent::GetScaledCapsuleSize_WithoutHemisphere(float OutRadius,float OutHalfHeightWithoutHemisphere);


// Function  Engine.CapsuleComponent.GetShapeScale
// Offset::0x6351EA0;
float FCapsuleComponent::GetShapeScale();


// Function  Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
// Offset::0x6352200;
float FCapsuleComponent::GetUnscaledCapsuleHalfHeight();


// Function  Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
// Offset::0x63521B0;
float FCapsuleComponent::GetUnscaledCapsuleHalfHeight_WithoutHemisphere();


// Function  Engine.CapsuleComponent.GetUnscaledCapsuleRadius
// Offset::0x6352230;
float FCapsuleComponent::GetUnscaledCapsuleRadius();


// Function  Engine.CapsuleComponent.GetUnscaledCapsuleSize
// Offset::0x6352080;
void FCapsuleComponent::GetUnscaledCapsuleSize(float OutRadius,float OutHalfHeight);


// Function  Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
// Offset::0x6351F30;
void FCapsuleComponent::GetUnscaledCapsuleSize_WithoutHemisphere(float OutRadius,float OutHalfHeightWithoutHemisphere);


// Function  Engine.CapsuleComponent.SetCapsuleHalfHeight
// Offset::0x63526C0;
void FCapsuleComponent::SetCapsuleHalfHeight(float HalfHeight,bool bUpdateOverlaps);


// Function  Engine.CapsuleComponent.SetCapsuleRadius
// Offset::0x63527D0;
void FCapsuleComponent::SetCapsuleRadius(float Radius,bool bUpdateOverlaps);


// Function  Engine.CapsuleComponent.SetCapsuleSize
// Offset::0x63528D0;
void FCapsuleComponent::SetCapsuleSize(float InRadius,float InHalfHeight,bool bUpdateOverlaps);


// Function  Engine.CheatManagerExtension.GetPlayerController
// Offset::0x1F7F230;
FPlayerController* FCheatManagerExtension::GetPlayerController();


// Function  Engine.ChildActorComponent.SetChildActorClass
// Offset::0x6365850;
void FChildActorComponent::SetChildActorClass(FActor* InClass);


// Function  Engine.ConstraintInstanceBlueprintLibrary.CopyParams
// Offset::0x6368710;
void FConstraintInstanceBlueprintLibrary::CopyParams(FConstraintInstanceAccessor Accessor,FConstraintInstanceAccessor SourceAccessor,bool bKeepPosition,bool bKeepRotation);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularBreakable
// Offset::0x636AC40;
void FConstraintInstanceBlueprintLibrary::GetAngularBreakable(FConstraintInstanceAccessor Accessor,bool bAngularBreakable,float AngularBreakThreshold);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularDriveMode
// Offset::0x6369020;
void FConstraintInstanceBlueprintLibrary::GetAngularDriveMode(FConstraintInstanceAccessor Accessor,enum class EAngularDriveMode OutDriveMode);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularDriveParams
// Offset::0x63688D0;
void FConstraintInstanceBlueprintLibrary::GetAngularDriveParams(FConstraintInstanceAccessor Accessor,float OutPositionStrength,float OutVelocityStrength,float OutForceLimit);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularLimits
// Offset::0x636B870;
void FConstraintInstanceBlueprintLibrary::GetAngularLimits(FConstraintInstanceAccessor Accessor,enum class EAngularConstraintMotion Swing1MotionType,float Swing1LimitAngle,enum class EAngularConstraintMotion Swing2MotionType,float Swing2LimitAngle,enum class EAngularConstraintMotion TwistMotionType,float TwistLimitAngle);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularOrientationTarget
// Offset::0x6368E20;
void FConstraintInstanceBlueprintLibrary::GetAngularOrientationTarget(FConstraintInstanceAccessor Accessor,FRotator OutPosTarget);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularPlasticity
// Offset::0x636A990;
void FConstraintInstanceBlueprintLibrary::GetAngularPlasticity(FConstraintInstanceAccessor Accessor,bool bAngularPlasticity,float AngularPlasticityThreshold);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularSoftSwingLimitParams
// Offset::0x636B3B0;
void FConstraintInstanceBlueprintLibrary::GetAngularSoftSwingLimitParams(FConstraintInstanceAccessor Accessor,bool bSoftSwingLimit,float SwingLimitStiffness,float SwingLimitDamping,float SwingLimitRestitution,float SwingLimitContactDistance);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularSoftTwistLimitParams
// Offset::0x636AEF0;
void FConstraintInstanceBlueprintLibrary::GetAngularSoftTwistLimitParams(FConstraintInstanceAccessor Accessor,bool bSoftTwistLimit,float TwistLimitStiffness,float TwistLimitDamping,float TwistLimitRestitution,float TwistLimitContactDistance);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityDriveSLERP
// Offset::0x6369220;
void FConstraintInstanceBlueprintLibrary::GetAngularVelocityDriveSLERP(FConstraintInstanceAccessor Accessor,bool bOutEnableSLERP);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityDriveTwistAndSwing
// Offset::0x6369420;
void FConstraintInstanceBlueprintLibrary::GetAngularVelocityDriveTwistAndSwing(FConstraintInstanceAccessor Accessor,bool bOutEnableTwistDrive,bool bOutEnableSwingDrive);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAngularVelocityTarget
// Offset::0x6368C20;
void FConstraintInstanceBlueprintLibrary::GetAngularVelocityTarget(FConstraintInstanceAccessor Accessor,FVector OutVelTarget);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetAttachedBodyNames
// Offset::0x636D560;
void FConstraintInstanceBlueprintLibrary::GetAttachedBodyNames(FConstraintInstanceAccessor Accessor,FName ParentBody,FName ChildBody);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetContactTransferScale
// Offset::0x636BED0;
void FConstraintInstanceBlueprintLibrary::GetContactTransferScale(FConstraintInstanceAccessor Accessor,float ContactTransferScale);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetDisableCollsion
// Offset::0x636D3B0;
bool FConstraintInstanceBlueprintLibrary::GetDisableCollsion(FConstraintInstanceAccessor Accessor);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetLinearBreakable
// Offset::0x636C330;
void FConstraintInstanceBlueprintLibrary::GetLinearBreakable(FConstraintInstanceAccessor Accessor,bool bLinearBreakable,float LinearBreakThreshold);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetLinearDriveParams
// Offset::0x6369B80;
void FConstraintInstanceBlueprintLibrary::GetLinearDriveParams(FConstraintInstanceAccessor Accessor,float OutPositionStrength,float OutVelocityStrength,float OutForceLimit);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetLinearLimits
// Offset::0x636CAA0;
void FConstraintInstanceBlueprintLibrary::GetLinearLimits(FConstraintInstanceAccessor Accessor,enum class ELinearConstraintMotion XMotion,enum class ELinearConstraintMotion YMotion,enum class ELinearConstraintMotion ZMotion,float Limit);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetLinearPlasticity
// Offset::0x636BFE0;
void FConstraintInstanceBlueprintLibrary::GetLinearPlasticity(FConstraintInstanceAccessor Accessor,bool bLinearPlasticity,float LinearPlasticityThreshold,enum class EConstraintPlasticityType PlasticityType);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetLinearPositionDrive
// Offset::0x636A630;
void FConstraintInstanceBlueprintLibrary::GetLinearPositionDrive(FConstraintInstanceAccessor Accessor,bool bOutEnableDriveX,bool bOutEnableDriveY,bool bOutEnableDriveZ);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetLinearPositionTarget
// Offset::0x636A0D0;
void FConstraintInstanceBlueprintLibrary::GetLinearPositionTarget(FConstraintInstanceAccessor Accessor,FVector OutPosTarget);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetLinearSoftLimitParams
// Offset::0x636C5E0;
void FConstraintInstanceBlueprintLibrary::GetLinearSoftLimitParams(FConstraintInstanceAccessor Accessor,bool bSoftLinearLimit,float LinearLimitStiffness,float LinearLimitDamping,float LinearLimitRestitution,float LinearLimitContactDistance);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetLinearVelocityDrive
// Offset::0x636A2D0;
void FConstraintInstanceBlueprintLibrary::GetLinearVelocityDrive(FConstraintInstanceAccessor Accessor,bool bOutEnableDriveX,bool bOutEnableDriveY,bool bOutEnableDriveZ);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetLinearVelocityTarget
// Offset::0x6369ED0;
void FConstraintInstanceBlueprintLibrary::GetLinearVelocityTarget(FConstraintInstanceAccessor Accessor,FVector OutVelTarget);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetOrientationDriveSLERP
// Offset::0x63696D0;
void FConstraintInstanceBlueprintLibrary::GetOrientationDriveSLERP(FConstraintInstanceAccessor Accessor,bool bOutEnableSLERP);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetOrientationDriveTwistAndSwing
// Offset::0x63698D0;
void FConstraintInstanceBlueprintLibrary::GetOrientationDriveTwistAndSwing(FConstraintInstanceAccessor Accessor,bool bOutEnableTwistDrive,bool bOutEnableSwingDrive);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetParentDominates
// Offset::0x636CEA0;
bool FConstraintInstanceBlueprintLibrary::GetParentDominates(FConstraintInstanceAccessor Accessor);


// Function  Engine.ConstraintInstanceBlueprintLibrary.GetProjectionParams
// Offset::0x636D050;
void FConstraintInstanceBlueprintLibrary::GetProjectionParams(FConstraintInstanceAccessor Accessor,bool bEnableProjection,float ProjectionLinearAlpha,float ProjectionAngularAlpha);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularBreakable
// Offset::0x636ADA0;
void FConstraintInstanceBlueprintLibrary::SetAngularBreakable(FConstraintInstanceAccessor Accessor,bool bAngularBreakable,float AngularBreakThreshold);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularDriveMode
// Offset::0x6369120;
void FConstraintInstanceBlueprintLibrary::SetAngularDriveMode(FConstraintInstanceAccessor Accessor,enum class EAngularDriveMode DriveMode);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularDriveParams
// Offset::0x6368A90;
void FConstraintInstanceBlueprintLibrary::SetAngularDriveParams(FConstraintInstanceAccessor Accessor,float PositionStrength,float VelocityStrength,float InForceLimit);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularLimits
// Offset::0x636BB50;
void FConstraintInstanceBlueprintLibrary::SetAngularLimits(FConstraintInstanceAccessor Accessor,enum class EAngularConstraintMotion Swing1MotionType,float Swing1LimitAngle,enum class EAngularConstraintMotion Swing2MotionType,float Swing2LimitAngle,enum class EAngularConstraintMotion TwistMotionType,float TwistLimitAngle);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularOrientationTarget
// Offset::0x6368F20;
void FConstraintInstanceBlueprintLibrary::SetAngularOrientationTarget(FConstraintInstanceAccessor Accessor,FRotator InPosTarget);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularPlasticity
// Offset::0x636AAF0;
void FConstraintInstanceBlueprintLibrary::SetAngularPlasticity(FConstraintInstanceAccessor Accessor,bool bAngularPlasticity,float AngularPlasticityThreshold);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularSoftSwingLimitParams
// Offset::0x636B630;
void FConstraintInstanceBlueprintLibrary::SetAngularSoftSwingLimitParams(FConstraintInstanceAccessor Accessor,bool bSoftSwingLimit,float SwingLimitStiffness,float SwingLimitDamping,float SwingLimitRestitution,float SwingLimitContactDistance);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularSoftTwistLimitParams
// Offset::0x636B170;
void FConstraintInstanceBlueprintLibrary::SetAngularSoftTwistLimitParams(FConstraintInstanceAccessor Accessor,bool bSoftTwistLimit,float TwistLimitStiffness,float TwistLimitDamping,float TwistLimitRestitution,float TwistLimitContactDistance);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularVelocityDriveSLERP
// Offset::0x6369320;
void FConstraintInstanceBlueprintLibrary::SetAngularVelocityDriveSLERP(FConstraintInstanceAccessor Accessor,bool bEnableSLERP);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularVelocityDriveTwistAndSwing
// Offset::0x6369580;
void FConstraintInstanceBlueprintLibrary::SetAngularVelocityDriveTwistAndSwing(FConstraintInstanceAccessor Accessor,bool bEnableTwistDrive,bool bEnableSwingDrive);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetAngularVelocityTarget
// Offset::0x6368D20;
void FConstraintInstanceBlueprintLibrary::SetAngularVelocityTarget(FConstraintInstanceAccessor Accessor,FVector InVelTarget);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetContactTransferScale
// Offset::0x636BDD0;
void FConstraintInstanceBlueprintLibrary::SetContactTransferScale(FConstraintInstanceAccessor Accessor,float ContactTransferScale);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetDisableCollision
// Offset::0x636D460;
void FConstraintInstanceBlueprintLibrary::SetDisableCollision(FConstraintInstanceAccessor Accessor,bool bDisableCollision);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetLinearBreakable
// Offset::0x636C490;
void FConstraintInstanceBlueprintLibrary::SetLinearBreakable(FConstraintInstanceAccessor Accessor,bool bLinearBreakable,float LinearBreakThreshold);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetLinearDriveParams
// Offset::0x6369D40;
void FConstraintInstanceBlueprintLibrary::SetLinearDriveParams(FConstraintInstanceAccessor Accessor,float PositionStrength,float VelocityStrength,float InForceLimit);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetLinearLimits
// Offset::0x636CCC0;
void FConstraintInstanceBlueprintLibrary::SetLinearLimits(FConstraintInstanceAccessor Accessor,enum class ELinearConstraintMotion XMotion,enum class ELinearConstraintMotion YMotion,enum class ELinearConstraintMotion ZMotion,float Limit);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetLinearPlasticity
// Offset::0x636C1A0;
void FConstraintInstanceBlueprintLibrary::SetLinearPlasticity(FConstraintInstanceAccessor Accessor,bool bLinearPlasticity,float LinearPlasticityThreshold,enum class EConstraintPlasticityType PlasticityType);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetLinearPositionDrive
// Offset::0x636A7F0;
void FConstraintInstanceBlueprintLibrary::SetLinearPositionDrive(FConstraintInstanceAccessor Accessor,bool bEnableDriveX,bool bEnableDriveY,bool bEnableDriveZ);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetLinearPositionTarget
// Offset::0x636A1D0;
void FConstraintInstanceBlueprintLibrary::SetLinearPositionTarget(FConstraintInstanceAccessor Accessor,FVector InPosTarget);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetLinearSoftLimitParams
// Offset::0x636C860;
void FConstraintInstanceBlueprintLibrary::SetLinearSoftLimitParams(FConstraintInstanceAccessor Accessor,bool bSoftLinearLimit,float LinearLimitStiffness,float LinearLimitDamping,float LinearLimitRestitution,float LinearLimitContactDistance);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetLinearVelocityDrive
// Offset::0x636A490;
void FConstraintInstanceBlueprintLibrary::SetLinearVelocityDrive(FConstraintInstanceAccessor Accessor,bool bEnableDriveX,bool bEnableDriveY,bool bEnableDriveZ);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetLinearVelocityTarget
// Offset::0x6369FD0;
void FConstraintInstanceBlueprintLibrary::SetLinearVelocityTarget(FConstraintInstanceAccessor Accessor,FVector InVelTarget);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetOrientationDriveSLERP
// Offset::0x63697D0;
void FConstraintInstanceBlueprintLibrary::SetOrientationDriveSLERP(FConstraintInstanceAccessor Accessor,bool bEnableSLERP);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetOrientationDriveTwistAndSwing
// Offset::0x6369A30;
void FConstraintInstanceBlueprintLibrary::SetOrientationDriveTwistAndSwing(FConstraintInstanceAccessor Accessor,bool bEnableTwistDrive,bool bEnableSwingDrive);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetParentDominates
// Offset::0x636CF50;
void FConstraintInstanceBlueprintLibrary::SetParentDominates(FConstraintInstanceAccessor Accessor,bool bParentDominates);


// Function  Engine.ConstraintInstanceBlueprintLibrary.SetProjectionParams
// Offset::0x636D210;
void FConstraintInstanceBlueprintLibrary::SetProjectionParams(FConstraintInstanceAccessor Accessor,bool bEnableProjection,float ProjectionLinearAlpha,float ProjectionAngularAlpha);


// Function  Engine.CurveFloat.GetFloatValue
// Offset::0x63735A0;
float FCurveFloat::GetFloatValue(float InTime);


// Function  Engine.AnimationCurveIdentifierExtensions.GetName
// Offset::0x6373A60;
FName FAnimationCurveIdentifierExtensions::GetName(FAnimationCurveIdentifier Identifier);


// Function  Engine.AnimationCurveIdentifierExtensions.GetType
// Offset::0x63739A0;
enum class ERawCurveTrackTypes FAnimationCurveIdentifierExtensions::GetType(FAnimationCurveIdentifier Identifier);


// Function  Engine.AnimationCurveIdentifierExtensions.IsValid
// Offset::0x6373B20;
bool FAnimationCurveIdentifierExtensions::IsValid(FAnimationCurveIdentifier Identifier);


// Function  Engine.CurveLinearColor.GetClampedLinearColorValue
// Offset::0x6374180;
FLinearColor FCurveLinearColor::GetClampedLinearColorValue(float InTime);


// Function  Engine.CurveLinearColor.GetLinearColorValue
// Offset::0x6374230;
FLinearColor FCurveLinearColor::GetLinearColorValue(float InTime);


// Function  Engine.CurveLinearColor.GetUnadjustedLinearColorValue
// Offset::0x63740D0;
FLinearColor FCurveLinearColor::GetUnadjustedLinearColorValue(float InTime);


// Function  Engine.Texture2D.Blueprint_GetSizeX
// Offset::0x6548200;
int32_t FTexture2D::Blueprint_GetSizeX();


// Function  Engine.Texture2D.Blueprint_GetSizeY
// Offset::0x65481D0;
int32_t FTexture2D::Blueprint_GetSizeY();


// Function  Engine.CurveLinearColorAtlas.GetCurvePosition
// Offset::0x6375720;
bool FCurveLinearColorAtlas::GetCurvePosition(FCurveLinearColor* InCurve,float Position);


// Function  Engine.CurveSourceInterface.GetBindingName
// Offset::0x6375C90;
FName FCurveSourceInterface::GetBindingName();


// Function  Engine.CurveSourceInterface.GetCurves
// Offset::0x6375B40;
void FCurveSourceInterface::GetCurves(TArray<FNamedCurveValue> OutValues);


// Function  Engine.CurveSourceInterface.GetCurveValue
// Offset::0x6375BF0;
float FCurveSourceInterface::GetCurveValue(FName CurveName);


// Function  Engine.CurveVector.GetVectorValue
// Offset::0x6376A90;
FVector FCurveVector::GetVectorValue(float InTime);


// Function  Engine.DataLayer.Equals
// Offset::0x6377A00;
bool FDataLayer::Equals(FActorDataLayer ActorDataLayer);


// Function  Engine.DataLayer.GetDataLayerLabel
// Offset::0x63779E0;
FName FDataLayer::GetDataLayerLabel();


// Function  Engine.DataLayer.GetDebugColor
// Offset::0x6377980;
FColor FDataLayer::GetDebugColor();


// Function  Engine.DataLayer.GetInitialRuntimeState
// Offset::0x63779B0;
enum class EDataLayerRuntimeState FDataLayer::GetInitialRuntimeState();


// Function  Engine.DataLayer.GetInitialState
// Offset::0x63778D0;
enum class EDataLayerState FDataLayer::GetInitialState();


// Function  Engine.DataLayer.IsDynamicallyLoaded
// Offset::0x6377960;
bool FDataLayer::IsDynamicallyLoaded();


// Function  Engine.DataLayer.IsEffectiveVisible
// Offset::0x243E320;
bool FDataLayer::IsEffectiveVisible();


// Function  Engine.DataLayer.IsInitiallyActive
// Offset::0x6377910;
bool FDataLayer::IsInitiallyActive();


// Function  Engine.DataLayer.IsInitiallyVisible
// Offset::0x243E320;
bool FDataLayer::IsInitiallyVisible();


// Function  Engine.DataLayer.IsRuntime
// Offset::0x6377960;
bool FDataLayer::IsRuntime();


// Function  Engine.DataLayer.IsVisible
// Offset::0x243E320;
bool FDataLayer::IsVisible();


// Function  Engine.DataLayerSubsystem.GetActiveDataLayerNames
// Offset::0x63782F0;
TSet<FName> FDataLayerSubsystem::GetActiveDataLayerNames();


// Function  Engine.DataLayerSubsystem.GetDataLayer
// Offset::0x6378BD0;
FDataLayer* FDataLayerSubsystem::GetDataLayer(FActorDataLayer InDataLayer);


// Function  Engine.DataLayerSubsystem.GetDataLayerEffectiveRuntimeState
// Offset::0x6378760;
enum class EDataLayerRuntimeState FDataLayerSubsystem::GetDataLayerEffectiveRuntimeState(FActorDataLayer InDataLayer);


// Function  Engine.DataLayerSubsystem.GetDataLayerEffectiveRuntimeStateByLabel
// Offset::0x63786B0;
enum class EDataLayerRuntimeState FDataLayerSubsystem::GetDataLayerEffectiveRuntimeStateByLabel(FName InDataLayerLabel);


// Function  Engine.DataLayerSubsystem.GetDataLayerFromLabel
// Offset::0x6378B30;
FDataLayer* FDataLayerSubsystem::GetDataLayerFromLabel(FName InDataLayerLabel);


// Function  Engine.DataLayerSubsystem.GetDataLayerFromName
// Offset::0x6378A90;
FDataLayer* FDataLayerSubsystem::GetDataLayerFromName(FName InDataLayerName);


// Function  Engine.DataLayerSubsystem.GetDataLayerRuntimeState
// Offset::0x63783F0;
enum class EDataLayerRuntimeState FDataLayerSubsystem::GetDataLayerRuntimeState(FActorDataLayer InDataLayer);


// Function  Engine.DataLayerSubsystem.GetDataLayerRuntimeStateByLabel
// Offset::0x6378330;
enum class EDataLayerRuntimeState FDataLayerSubsystem::GetDataLayerRuntimeStateByLabel(FName InDataLayerLabel);


// Function  Engine.DataLayerSubsystem.GetDataLayerState
// Offset::0x63783F0;
enum class EDataLayerState FDataLayerSubsystem::GetDataLayerState(FActorDataLayer InDataLayer);


// Function  Engine.DataLayerSubsystem.GetDataLayerStateByLabel
// Offset::0x6378330;
enum class EDataLayerState FDataLayerSubsystem::GetDataLayerStateByLabel(FName InDataLayerLabel);


// Function  Engine.DataLayerSubsystem.GetLoadedDataLayerNames
// Offset::0x63782B0;
TSet<FName> FDataLayerSubsystem::GetLoadedDataLayerNames();


// Function  Engine.DataLayerSubsystem.SetDataLayerRuntimeState
// Offset::0x6378950;
void FDataLayerSubsystem::SetDataLayerRuntimeState(FActorDataLayer InDataLayer,enum class EDataLayerRuntimeState InState,bool bInIsRecursive);


// Function  Engine.DataLayerSubsystem.SetDataLayerRuntimeStateByLabel
// Offset::0x6378810;
void FDataLayerSubsystem::SetDataLayerRuntimeStateByLabel(FName InDataLayerLabel,enum class EDataLayerRuntimeState InState,bool bInIsRecursive);


// Function  Engine.DataLayerSubsystem.SetDataLayerState
// Offset::0x63785B0;
void FDataLayerSubsystem::SetDataLayerState(FActorDataLayer InDataLayer,enum class EDataLayerState InState);


// Function  Engine.DataLayerSubsystem.SetDataLayerStateByLabel
// Offset::0x63784B0;
void FDataLayerSubsystem::SetDataLayerStateByLabel(FName InDataLayerLabel,enum class EDataLayerState InState);


// Function  Engine.DataTableFunctionLibrary.DoesDataTableRowExist
// Offset::0x637AF00;
bool FDataTableFunctionLibrary::DoesDataTableRowExist(FDataTable* Table,FName RowName);


// Function  Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
// Offset::0x637AFE0;
void FDataTableFunctionLibrary::EvaluateCurveTableRow(FCurveTable* CurveTable,FName RowName,float InXY,enum class EEvaluateCurveTableResult OutResult,float OutXY,FString ContextString);


// Function  Engine.DataTableFunctionLibrary.GetDataTableColumnAsString
// Offset::0x637AC70;
TArray<FString> FDataTableFunctionLibrary::GetDataTableColumnAsString(FDataTable* DataTable,FName PropertyName);


// Function  Engine.DataTableFunctionLibrary.GetDataTableRowFromName
// Offset::0x637B580;
bool FDataTableFunctionLibrary::GetDataTableRowFromName(FDataTable* Table,FName RowName,FTableRowBase OutRow);


// Function  Engine.DataTableFunctionLibrary.GetDataTableRowNames
// Offset::0x637AE00;
void FDataTableFunctionLibrary::GetDataTableRowNames(FDataTable* Table,TArray<FName> OutRowNames);


// Function  Engine.DebugCameraController.GetSelectedActor
// Offset::0x637B9D0;
FActor* FDebugCameraController::GetSelectedActor();


// Function  Engine.DebugCameraController.ReceiveOnActivate
// Offset::0x3D30810;
void FDebugCameraController::ReceiveOnActivate(FPlayerController* OriginalPC);


// Function  Engine.DebugCameraController.ReceiveOnActorSelected
// Offset::0x3D30810;
void FDebugCameraController::ReceiveOnActorSelected(FActor* NewSelectedActor,FVector SelectHitLocation,FVector SelectHitNormal,FHitResult Hit);


// Function  Engine.DebugCameraController.ReceiveOnDeactivate
// Offset::0x3D30810;
void FDebugCameraController::ReceiveOnDeactivate(FPlayerController* RestoredPC);


// Function  Engine.DebugCameraController.SetPawnMovementSpeedScale
// Offset::0x637B930;
void FDebugCameraController::SetPawnMovementSpeedScale(float NewSpeedScale);


// Function  Engine.DebugCameraController.ShowDebugSelectedInfo
// Offset::0x637BA20;
void FDebugCameraController::ShowDebugSelectedInfo();


// Function  Engine.DebugCameraController.ToggleDisplay
// Offset::0x637BA00;
void FDebugCameraController::ToggleDisplay();


// Function  Engine.DecalActor.CreateDynamicMaterialInstance
// Offset::0x637CCC0;
FMaterialInstanceDynamic* FDecalActor::CreateDynamicMaterialInstance();


// Function  Engine.DecalActor.GetDecalMaterial
// Offset::0x637CCF0;
FMaterialInterface* FDecalActor::GetDecalMaterial();


// Function  Engine.DecalActor.SetDecalMaterial
// Offset::0x637CD20;
void FDecalActor::SetDecalMaterial(FMaterialInterface* NewDecalMaterial);


// Function  Engine.Light.GetBrightness
// Offset::0x6470260;
float FLight::GetBrightness();


// Function  Engine.Light.GetLightColor
// Offset::0x6470170;
FLinearColor FLight::GetLightColor();


// Function  Engine.Light.IsEnabled
// Offset::0x6470350;
bool FLight::IsEnabled();


// Function  Engine.Light.OnRep_bEnabled
// Offset::0x21D6F30;
void FLight::OnRep_bEnabled();


// Function  Engine.Light.SetAffectTranslucentLighting
// Offset::0x646FE50;
void FLight::SetAffectTranslucentLighting(bool bNewValue);


// Function  Engine.Light.SetBrightness
// Offset::0x6470290;
void FLight::SetBrightness(float NewBrightness);


// Function  Engine.Light.SetCastShadows
// Offset::0x646FEF0;
void FLight::SetCastShadows(bool bNewValue);


// Function  Engine.Light.SetEnabled
// Offset::0x6470380;
void FLight::SetEnabled(bool bSetEnabled);


// Function  Engine.Light.SetLightColor
// Offset::0x64701C0;
void FLight::SetLightColor(FLinearColor NewLightColor);


// Function  Engine.Light.SetLightFunctionFadeDistance
// Offset::0x646FF90;
void FLight::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);


// Function  Engine.Light.SetLightFunctionMaterial
// Offset::0x64700D0;
void FLight::SetLightFunctionMaterial(FMaterialInterface* NewLightFunctionMaterial);


// Function  Engine.Light.SetLightFunctionScale
// Offset::0x6470030;
void FLight::SetLightFunctionScale(FVector NewLightFunctionScale);


// Function  Engine.Light.ToggleEnabled
// Offset::0x6470330;
void FLight::ToggleEnabled();


// Function  Engine.LightComponentBase.GetLightColor
// Offset::0x6474360;
FLinearColor FLightComponentBase::GetLightColor();


// Function  Engine.LightComponentBase.SetAffectGlobalIllumination
// Offset::0x64740E0;
void FLightComponentBase::SetAffectGlobalIllumination(bool bNewValue);


// Function  Engine.LightComponentBase.SetAffectReflection
// Offset::0x6474180;
void FLightComponentBase::SetAffectReflection(bool bNewValue);


// Function  Engine.LightComponentBase.SetCastDeepShadow
// Offset::0x6474220;
void FLightComponentBase::SetCastDeepShadow(bool bNewValue);


// Function  Engine.LightComponentBase.SetCastRaytracedShadow
// Offset::0x6474040;
void FLightComponentBase::SetCastRaytracedShadow(bool bNewValue);


// Function  Engine.LightComponentBase.SetCastRaytracedShadows
// Offset::0x6473FB0;
void FLightComponentBase::SetCastRaytracedShadows(enum class ECastRayTracedShadow bNewValue);


// Function  Engine.LightComponentBase.SetCastShadows
// Offset::0x64743B0;
void FLightComponentBase::SetCastShadows(bool bNewValue);


// Function  Engine.LightComponentBase.SetCastVolumetricShadow
// Offset::0x64742C0;
void FLightComponentBase::SetCastVolumetricShadow(bool bNewValue);


// Function  Engine.LightComponentBase.SetSamplesPerPixel
// Offset::0x6473F10;
void FLightComponentBase::SetSamplesPerPixel(int32_t NewValue);


// Function  Engine.LightComponent.SetAffectDynamicIndirectLighting
// Offset::0x6471850;
void FLightComponent::SetAffectDynamicIndirectLighting(bool bNewValue);


// Function  Engine.LightComponent.SetAffectTranslucentLighting
// Offset::0x64717B0;
void FLightComponent::SetAffectTranslucentLighting(bool bNewValue);


// Function  Engine.LightComponent.SetBloomMaxBrightness
// Offset::0x6471490;
void FLightComponent::SetBloomMaxBrightness(float NewValue);


// Function  Engine.LightComponent.SetBloomScale
// Offset::0x64715D0;
void FLightComponent::SetBloomScale(float NewValue);


// Function  Engine.LightComponent.SetBloomThreshold
// Offset::0x6471530;
void FLightComponent::SetBloomThreshold(float NewValue);


// Function  Engine.LightComponent.SetBloomTint
// Offset::0x6471400;
void FLightComponent::SetBloomTint(FColor NewValue);


// Function  Engine.LightComponent.SetEnableLightShaftBloom
// Offset::0x6471670;
void FLightComponent::SetEnableLightShaftBloom(bool bNewValue);


// Function  Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
// Offset::0x6470FA0;
void FLightComponent::SetForceCachedShadowsForMovablePrimitives(bool bNewValue);


// Function  Engine.LightComponent.SetIESBrightnessScale
// Offset::0x6471220;
void FLightComponent::SetIESBrightnessScale(float NewValue);


// Function  Engine.LightComponent.SetIESTexture
// Offset::0x6471360;
void FLightComponent::SetIESTexture(FTextureLightProfile* NewValue);


// Function  Engine.LightComponent.SetIndirectLightingIntensity
// Offset::0x6471E40;
void FLightComponent::SetIndirectLightingIntensity(float NewIntensity);


// Function  Engine.LightComponent.SetIntensity
// Offset::0x6471EE0;
void FLightComponent::SetIntensity(float NewIntensity);


// Function  Engine.LightComponent.SetLightColor
// Offset::0x6471CB0;
void FLightComponent::SetLightColor(FLinearColor NewLightColor,bool bSRGB);


// Function  Engine.LightComponent.SetLightFunctionDisabledBrightness
// Offset::0x64718F0;
void FLightComponent::SetLightFunctionDisabledBrightness(float NewValue);


// Function  Engine.LightComponent.SetLightFunctionFadeDistance
// Offset::0x6471990;
void FLightComponent::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);


// Function  Engine.LightComponent.SetLightFunctionMaterial
// Offset::0x6471AD0;
void FLightComponent::SetLightFunctionMaterial(FMaterialInterface* NewLightFunctionMaterial);


// Function  Engine.LightComponent.SetLightFunctionScale
// Offset::0x6471A30;
void FLightComponent::SetLightFunctionScale(FVector NewLightFunctionScale);


// Function  Engine.LightComponent.SetLightingChannels
// Offset::0x6470E60;
void FLightComponent::SetLightingChannels(bool bChannel0,bool bChannel1,bool bChannel2);


// Function  Engine.LightComponent.SetShadowBias
// Offset::0x6471180;
void FLightComponent::SetShadowBias(float NewValue);


// Function  Engine.LightComponent.SetShadowSlopeBias
// Offset::0x64710E0;
void FLightComponent::SetShadowSlopeBias(float NewValue);


// Function  Engine.LightComponent.SetSpecularScale
// Offset::0x6471040;
void FLightComponent::SetSpecularScale(float NewValue);


// Function  Engine.LightComponent.SetTemperature
// Offset::0x6471C10;
void FLightComponent::SetTemperature(float NewTemperature);


// Function  Engine.LightComponent.SetTransmission
// Offset::0x6471710;
void FLightComponent::SetTransmission(bool bNewValue);


// Function  Engine.LightComponent.SetUseIESBrightness
// Offset::0x64712C0;
void FLightComponent::SetUseIESBrightness(bool bNewValue);


// Function  Engine.LightComponent.SetUseTemperature
// Offset::0x6471B70;
void FLightComponent::SetUseTemperature(bool bNewValue);


// Function  Engine.LightComponent.SetVolumetricScatteringIntensity
// Offset::0x6471DA0;
void FLightComponent::SetVolumetricScatteringIntensity(float NewIntensity);


// Function  Engine.DirectionalLightComponent.SetAtmosphereSunLight
// Offset::0x6382370;
void FDirectionalLightComponent::SetAtmosphereSunLight(bool bNewValue);


// Function  Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex
// Offset::0x63822D0;
void FDirectionalLightComponent::SetAtmosphereSunLightIndex(int32_t NewValue);


// Function  Engine.DirectionalLightComponent.SetCascadeDistributionExponent
// Offset::0x6382AF0;
void FDirectionalLightComponent::SetCascadeDistributionExponent(float NewValue);


// Function  Engine.DirectionalLightComponent.SetCascadeTransitionFraction
// Offset::0x6382A50;
void FDirectionalLightComponent::SetCascadeTransitionFraction(float NewValue);


// Function  Engine.DirectionalLightComponent.SetDynamicShadowCascades
// Offset::0x6382B90;
void FDirectionalLightComponent::SetDynamicShadowCascades(int32_t NewValue);


// Function  Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
// Offset::0x6382CD0;
void FDirectionalLightComponent::SetDynamicShadowDistanceMovableLight(float NewValue);


// Function  Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
// Offset::0x6382C30;
void FDirectionalLightComponent::SetDynamicShadowDistanceStationaryLight(float NewValue);


// Function  Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
// Offset::0x6382870;
void FDirectionalLightComponent::SetEnableLightShaftOcclusion(bool bNewValue);


// Function  Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
// Offset::0x6382690;
void FDirectionalLightComponent::SetLightShaftOverrideDirection(FVector NewValue);


// Function  Engine.DirectionalLightComponent.SetLightSourceAngle
// Offset::0x63825F0;
void FDirectionalLightComponent::SetLightSourceAngle(float NewValue);


// Function  Engine.DirectionalLightComponent.SetLightSourceSoftAngle
// Offset::0x6382550;
void FDirectionalLightComponent::SetLightSourceSoftAngle(float NewValue);


// Function  Engine.DirectionalLightComponent.SetOcclusionDepthRange
// Offset::0x6382730;
void FDirectionalLightComponent::SetOcclusionDepthRange(float NewValue);


// Function  Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
// Offset::0x63827D0;
void FDirectionalLightComponent::SetOcclusionMaskDarkness(float NewValue);


// Function  Engine.DirectionalLightComponent.SetShadowAmount
// Offset::0x6382410;
void FDirectionalLightComponent::SetShadowAmount(float NewValue);


// Function  Engine.DirectionalLightComponent.SetShadowCascadeBiasDistribution
// Offset::0x6382910;
void FDirectionalLightComponent::SetShadowCascadeBiasDistribution(float NewValue);


// Function  Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
// Offset::0x63829B0;
void FDirectionalLightComponent::SetShadowDistanceFadeoutFraction(float NewValue);


// Function  Engine.DirectionalLightComponent.SetShadowSourceAngleFactor
// Offset::0x63824B0;
void FDirectionalLightComponent::SetShadowSourceAngleFactor(float NewValue);


// Function  Engine.SphereComponent.GetScaledSphereRadius
// Offset::0x652D350;
float FSphereComponent::GetScaledSphereRadius();


// Function  Engine.SphereComponent.GetShapeScale
// Offset::0x652D2F0;
float FSphereComponent::GetShapeScale();


// Function  Engine.SphereComponent.GetUnscaledSphereRadius
// Offset::0x6352200;
float FSphereComponent::GetUnscaledSphereRadius();


// Function  Engine.SphereComponent.SetSphereRadius
// Offset::0x652D400;
void FSphereComponent::SetSphereRadius(float InSphereRadius,bool bUpdateOverlaps);


// Function  Engine.Emitter.Activate
// Offset::0x6387020;
void FEmitter::Activate();


// Function  Engine.Emitter.Deactivate
// Offset::0x6387000;
void FEmitter::Deactivate();


// Function  Engine.Emitter.IsActive
// Offset::0x6386FB0;
bool FEmitter::IsActive();


// Function  Engine.Emitter.OnParticleSystemFinished
// Offset::0x6387040;
void FEmitter::OnParticleSystemFinished(FParticleSystemComponent* FinishedComponent);


// Function  Engine.Emitter.OnRep_bCurrentlyActive
// Offset::0x1A802D0;
void FEmitter::OnRep_bCurrentlyActive();


// Function  Engine.Emitter.SetActorParameter
// Offset::0x6386C10;
void FEmitter::SetActorParameter(FName ParameterName,FActor* Param);


// Function  Engine.Emitter.SetColorParameter
// Offset::0x6386CF0;
void FEmitter::SetColorParameter(FName ParameterName,FLinearColor Param);


// Function  Engine.Emitter.SetFloatParameter
// Offset::0x6386ED0;
void FEmitter::SetFloatParameter(FName ParameterName,float Param);


// Function  Engine.Emitter.SetMaterialParameter
// Offset::0x6386B30;
void FEmitter::SetMaterialParameter(FName ParameterName,FMaterialInterface* Param);


// Function  Engine.Emitter.SetTemplate
// Offset::0x2AE5560;
void FEmitter::SetTemplate(FParticleSystem* NewTemplate);


// Function  Engine.Emitter.SetVectorParameter
// Offset::0x6386DE0;
void FEmitter::SetVectorParameter(FName ParameterName,FVector Param);


// Function  Engine.Emitter.ToggleActive
// Offset::0x6386FE0;
void FEmitter::ToggleActive();


// Function  Engine.ExponentialHeightFog.OnRep_bEnabled
// Offset::0x21D6F30;
void FExponentialHeightFog::OnRep_bEnabled();


// Function  Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
// Offset::0x6390EC0;
void FExponentialHeightFogComponent::SetDirectionalInscatteringColor(FLinearColor Value);


// Function  Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
// Offset::0x6391000;
void FExponentialHeightFogComponent::SetDirectionalInscatteringExponent(float Value);


// Function  Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
// Offset::0x6390F60;
void FExponentialHeightFogComponent::SetDirectionalInscatteringStartDistance(float Value);


// Function  Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
// Offset::0x6390C40;
void FExponentialHeightFogComponent::SetFogCutoffDistance(float Value);


// Function  Engine.ExponentialHeightFogComponent.SetFogDensity
// Offset::0x6391460;
void FExponentialHeightFogComponent::SetFogDensity(float Value);


// Function  Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
// Offset::0x6390E20;
void FExponentialHeightFogComponent::SetFogHeightFalloff(float Value);


// Function  Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
// Offset::0x63913C0;
void FExponentialHeightFogComponent::SetFogInscatteringColor(FLinearColor Value);


// Function  Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
// Offset::0x6390D80;
void FExponentialHeightFogComponent::SetFogMaxOpacity(float Value);


// Function  Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
// Offset::0x63911E0;
void FExponentialHeightFogComponent::SetFullyDirectionalInscatteringColorDistance(float Value);


// Function  Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
// Offset::0x6391320;
void FExponentialHeightFogComponent::SetInscatteringColorCubemap(FTextureCube* Value);


// Function  Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
// Offset::0x6391280;
void FExponentialHeightFogComponent::SetInscatteringColorCubemapAngle(float Value);


// Function  Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
// Offset::0x63910A0;
void FExponentialHeightFogComponent::SetInscatteringTextureTint(FLinearColor Value);


// Function  Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
// Offset::0x6391140;
void FExponentialHeightFogComponent::SetNonDirectionalInscatteringColorDistance(float Value);


// Function  Engine.ExponentialHeightFogComponent.SetStartDistance
// Offset::0x6390CE0;
void FExponentialHeightFogComponent::SetStartDistance(float Value);


// Function  Engine.ExponentialHeightFogComponent.SetVolumetricFog
// Offset::0x6390BA0;
void FExponentialHeightFogComponent::SetVolumetricFog(bool bNewValue);


// Function  Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
// Offset::0x63909D0;
void FExponentialHeightFogComponent::SetVolumetricFogAlbedo(FColor NewValue);


// Function  Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
// Offset::0x6390890;
void FExponentialHeightFogComponent::SetVolumetricFogDistance(float NewValue);


// Function  Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
// Offset::0x6390930;
void FExponentialHeightFogComponent::SetVolumetricFogEmissive(FLinearColor NewValue);


// Function  Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
// Offset::0x6390A60;
void FExponentialHeightFogComponent::SetVolumetricFogExtinctionScale(float NewValue);


// Function  Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
// Offset::0x6390B00;
void FExponentialHeightFogComponent::SetVolumetricFogScatteringDistribution(float NewValue);


// Function  Engine.Exporter.RunAssetExportTask
// Offset::0x2E3F350;
bool FExporter::RunAssetExportTask(FAssetExportTask* Task);


// Function  Engine.Exporter.RunAssetExportTasks
// Offset::0x63920C0;
bool FExporter::RunAssetExportTasks(TArray<FAssetExportTask*> ExportTasks);


// Function  Engine.Exporter.ScriptRunAssetExportTask
// Offset::0x3D30810;
bool FExporter::ScriptRunAssetExportTask(FAssetExportTask* Task);


// Function  Engine.ForceFeedbackComponent.AdjustAttenuation
// Offset::0x6393070;
void FForceFeedbackComponent::AdjustAttenuation(FForceFeedbackAttenuationSettings InAttenuationSettings);


// Function  Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
// Offset::0x6392F70;
bool FForceFeedbackComponent::BP_GetAttenuationSettingsToApply(FForceFeedbackAttenuationSettings OutAttenuationSettings);


// Function  Engine.ForceFeedbackComponent.Play
// Offset::0x57C10B0;
void FForceFeedbackComponent::Play(float StartTime);


// Function  Engine.ForceFeedbackComponent.SetForceFeedbackEffect
// Offset::0x6393230;
void FForceFeedbackComponent::SetForceFeedbackEffect(FForceFeedbackEffect* NewForceFeedbackEffect);


// Function  Engine.ForceFeedbackComponent.SetIntensityMultiplier
// Offset::0x6393170;
void FForceFeedbackComponent::SetIntensityMultiplier(float NewIntensityMultiplier);


// Function  Engine.ForceFeedbackComponent.Stop
// Offset::0x6393210;
void FForceFeedbackComponent::Stop();


// Function  Engine.GameplayStatics.ActivateReverbEffect
// Offset::0x63A0670;
void FGameplayStatics::ActivateReverbEffect(FObject* WorldContextObject,FReverbEffect* ReverbEffect,FName TagName,float Priority,float Volume,float FadeTime);


// Function  Engine.GameplayStatics.AnnounceAccessibleString
// Offset::0x639B1D0;
void FGameplayStatics::AnnounceAccessibleString(FString AnnouncementString);


// Function  Engine.GameplayStatics.ApplyDamage
// Offset::0x63A5570;
float FGameplayStatics::ApplyDamage(FActor* DamagedActor,float BaseDamage,FController* EventInstigator,FActor* DamageCauser,FDamageType* DamageTypeClass);


// Function  Engine.GameplayStatics.ApplyPointDamage
// Offset::0x63A5740;
float FGameplayStatics::ApplyPointDamage(FActor* DamagedActor,float BaseDamage,FVector HitFromDirection,FHitResult HitInfo,FController* EventInstigator,FActor* DamageCauser,FDamageType* DamageTypeClass);


// Function  Engine.GameplayStatics.ApplyRadialDamage
// Offset::0x63A5F70;
bool FGameplayStatics::ApplyRadialDamage(FObject* WorldContextObject,float BaseDamage,FVector Origin,float DamageRadius,FDamageType* DamageTypeClass,TArray<FActor*> IgnoreActors,FActor* DamageCauser,FController* InstigatedByController,bool bDoFullDamage,enum class ECollisionChannel DamagePreventionChannel);


// Function  Engine.GameplayStatics.ApplyRadialDamageWithFalloff
// Offset::0x63A5AD0;
bool FGameplayStatics::ApplyRadialDamageWithFalloff(FObject* WorldContextObject,float BaseDamage,float MinimumDamage,FVector Origin,float DamageInnerRadius,float DamageOuterRadius,float DamageFalloff,FDamageType* DamageTypeClass,TArray<FActor*> IgnoreActors,FActor* DamageCauser,FController* InstigatedByController,enum class ECollisionChannel DamagePreventionChannel);


// Function  Engine.GameplayStatics.AreAnyListenersWithinRange
// Offset::0x63A4A20;
bool FGameplayStatics::AreAnyListenersWithinRange(FObject* WorldContextObject,FVector Location,float MaximumRange);


// Function  Engine.GameplayStatics.AreSubtitlesEnabled
// Offset::0x63A1150;
bool FGameplayStatics::AreSubtitlesEnabled();


// Function  Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
// Offset::0x63A9530;
FActor* FGameplayStatics::BeginDeferredActorSpawnFromClass(FObject* WorldContextObject,FActor* ActorClass,FTransform SpawnTransform,enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride,FActor* Owner);


// Function  Engine.GameplayStatics.BeginSpawningActorFromBlueprint
// Offset::0x63A9770;
FActor* FGameplayStatics::BeginSpawningActorFromBlueprint(FObject* WorldContextObject,FBlueprint* Blueprint,FTransform SpawnTransform,bool bNoCollisionFail);


// Function  Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced
// Offset::0x639C6D0;
bool FGameplayStatics::Blueprint_PredictProjectilePath_Advanced(FObject* WorldContextObject,FPredictProjectilePathParams PredictParams,FPredictProjectilePathResult PredictResult);


// Function  Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType
// Offset::0x639D170;
bool FGameplayStatics::Blueprint_PredictProjectilePath_ByObjectType(FObject* WorldContextObject,FHitResult OutHit,TArray<FVector> OutPathPositions,FVector OutLastTraceDestination,FVector StartPos,FVector LaunchVelocity,bool bTracePath,float ProjectileRadius,TArray<enum class EObjectTypeQuery> ObjectTypes,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,float DrawDebugTime,float SimFrequency,float MaxSimTime,float OverrideGravityZ);


// Function  Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel
// Offset::0x639CA00;
bool FGameplayStatics::Blueprint_PredictProjectilePath_ByTraceChannel(FObject* WorldContextObject,FHitResult OutHit,TArray<FVector> OutPathPositions,FVector OutLastTraceDestination,FVector StartPos,FVector LaunchVelocity,bool bTracePath,float ProjectileRadius,enum class ECollisionChannel TraceChannel,bool bTraceComplex,TArray<FActor*> ActorsToIgnore,enum class EDrawDebugTrace DrawDebugType,float DrawDebugTime,float SimFrequency,float MaxSimTime,float OverrideGravityZ);


// Function  Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
// Offset::0x639D910;
bool FGameplayStatics::BlueprintSuggestProjectileVelocity(FObject* WorldContextObject,FVector TossVelocity,FVector StartLocation,FVector EndLocation,float LaunchSpeed,float OverrideGravityZ,enum class ESuggestProjVelocityTraceOption TraceOption,float CollisionRadius,bool bFavorHighArc,bool bDrawDebug);


// Function  Engine.GameplayStatics.BreakHitResult
// Offset::0x639F3B0;
void FGameplayStatics::BreakHitResult(FHitResult Hit,bool bBlockingHit,bool bInitialOverlap,float Time,float Distance,FVector Location,FVector ImpactPoint,FVector Normal,FVector ImpactNormal,FPhysicalMaterial* PhysMat,FActor* HitActor,FPrimitiveComponent* HitComponent,FName HitBoneName,FName BoneName,int32_t HitItem,int32_t ElementIndex,int32_t FaceIndex,FVector TraceStart,FVector TraceEnd);


// Function  Engine.GameplayStatics.CancelAsyncLoading
// Offset::0x63A7270;
void FGameplayStatics::CancelAsyncLoading();


// Function  Engine.GameplayStatics.ClearSoundMixClassOverride
// Offset::0x63A0AE0;
void FGameplayStatics::ClearSoundMixClassOverride(FObject* WorldContextObject,FSoundMix* InSoundMixModifier,FSoundClass* InSoundClass,float FadeOutTime);


// Function  Engine.GameplayStatics.ClearSoundMixModifiers
// Offset::0x63A0890;
void FGameplayStatics::ClearSoundMixModifiers(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.CreatePlayer
// Offset::0x63A7F90;
FPlayerController* FGameplayStatics::CreatePlayer(FObject* WorldContextObject,int32_t ControllerId,bool bSpawnPlayerController);


// Function  Engine.GameplayStatics.CreateSaveGameObject
// Offset::0x639E800;
FSaveGame* FGameplayStatics::CreateSaveGameObject(FSaveGame* SaveGameClass);


// Function  Engine.GameplayStatics.CreateSound2D
// Offset::0x63A3A10;
FAudioComponent* FGameplayStatics::CreateSound2D(FObject* WorldContextObject,FSoundBase* Sound,float VolumeMultiplier,float PitchMultiplier,float StartTime,FSoundConcurrency* ConcurrencySettings,bool bPersistAcrossLevelTransition,bool bAutoDestroy);


// Function  Engine.GameplayStatics.DeactivateReverbEffect
// Offset::0x63A0590;
void FGameplayStatics::DeactivateReverbEffect(FObject* WorldContextObject,FName TagName);


// Function  Engine.GameplayStatics.DeleteGameInSlot
// Offset::0x639E240;
bool FGameplayStatics::DeleteGameInSlot(FString SlotName,int32_t UserIndex);


// Function  Engine.GameplayStatics.DeprojectScreenToWorld
// Offset::0x639BDA0;
bool FGameplayStatics::DeprojectScreenToWorld(FPlayerController* Player,FVector2D ScreenPosition,FVector WorldPosition,FVector WorldDirection);


// Function  Engine.GameplayStatics.DoesSaveGameExist
// Offset::0x639E4D0;
bool FGameplayStatics::DoesSaveGameExist(FString SlotName,int32_t UserIndex);


// Function  Engine.GameplayStatics.EnableLiveStreaming
// Offset::0x639DD90;
void FGameplayStatics::EnableLiveStreaming(bool Enable);


// Function  Engine.GameplayStatics.FindCollisionUV
// Offset::0x639E8A0;
bool FGameplayStatics::FindCollisionUV(FHitResult Hit,int32_t UVChannel,FVector2D UV);


// Function  Engine.GameplayStatics.FindNearestActor
// Offset::0x63A89D0;
FActor* FGameplayStatics::FindNearestActor(FVector Origin,TArray<FActor*> ActorsToCheck,float Distance);


// Function  Engine.GameplayStatics.FinishSpawningActor
// Offset::0x63A93F0;
FActor* FGameplayStatics::FinishSpawningActor(FActor* Actor,FTransform SpawnTransform);


// Function  Engine.GameplayStatics.FlushLevelStreaming
// Offset::0x63A7290;
void FGameplayStatics::FlushLevelStreaming(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetAccurateRealTime
// Offset::0x639DE20;
void FGameplayStatics::GetAccurateRealTime(int32_t Seconds,float PartialSeconds);


// Function  Engine.GameplayStatics.GetActorArrayAverageLocation
// Offset::0x63A9320;
FVector FGameplayStatics::GetActorArrayAverageLocation(TArray<FActor*> Actors);


// Function  Engine.GameplayStatics.GetActorArrayBounds
// Offset::0x63A9170;
void FGameplayStatics::GetActorArrayBounds(TArray<FActor*> Actors,bool bOnlyCollidingComponents,FVector Center,FVector BoxExtent);


// Function  Engine.GameplayStatics.GetActorOfClass
// Offset::0x63A9090;
FActor* FGameplayStatics::GetActorOfClass(FObject* WorldContextObject,FActor* ActorClass);


// Function  Engine.GameplayStatics.GetAllActorsOfClass
// Offset::0x63A8F50;
void FGameplayStatics::GetAllActorsOfClass(FObject* WorldContextObject,FActor* ActorClass,TArray<FActor*> OutActors);


// Function  Engine.GameplayStatics.GetAllActorsOfClassWithTag
// Offset::0x63A8B40;
void FGameplayStatics::GetAllActorsOfClassWithTag(FObject* WorldContextObject,FActor* ActorClass,FName Tag,TArray<FActor*> OutActors);


// Function  Engine.GameplayStatics.GetAllActorsWithInterface
// Offset::0x63A8E10;
void FGameplayStatics::GetAllActorsWithInterface(FObject* WorldContextObject,FInterface* Interface,TArray<FActor*> OutActors);


// Function  Engine.GameplayStatics.GetAllActorsWithTag
// Offset::0x63A8CD0;
void FGameplayStatics::GetAllActorsWithTag(FObject* WorldContextObject,FName Tag,TArray<FActor*> OutActors);


// Function  Engine.GameplayStatics.GetAudioTimeSeconds
// Offset::0x639DF20;
float FGameplayStatics::GetAudioTimeSeconds(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetClosestListenerLocation
// Offset::0x63A4840;
bool FGameplayStatics::GetClosestListenerLocation(FObject* WorldContextObject,FVector Location,float MaximumRange,bool bAllowAttenuationOverride,FVector ListenerPosition);


// Function  Engine.GameplayStatics.GetCurrentLevelName
// Offset::0x63A6CB0;
FString FGameplayStatics::GetCurrentLevelName(FObject* WorldContextObject,bool bRemovePrefixString);


// Function  Engine.GameplayStatics.GetCurrentReverbEffect
// Offset::0x63A04F0;
FReverbEffect* FGameplayStatics::GetCurrentReverbEffect(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetEnableWorldRendering
// Offset::0x63A64C0;
bool FGameplayStatics::GetEnableWorldRendering(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetGameInstance
// Offset::0x63A8930;
FGameInstance* FGameplayStatics::GetGameInstance(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetGameMode
// Offset::0x63A6C10;
FGameModeBase* FGameplayStatics::GetGameMode(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetGameState
// Offset::0x63A6B70;
FGameStateBase* FGameplayStatics::GetGameState(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetGlobalTimeDilation
// Offset::0x63A6A30;
float FGameplayStatics::GetGlobalTimeDilation(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetIntOption
// Offset::0x639B320;
int32_t FGameplayStatics::GetIntOption(FString Options,FString Key,int32_t DefaultValue);


// Function  Engine.GameplayStatics.GetKeyValue
// Offset::0x639B740;
void FGameplayStatics::GetKeyValue(FString Pair,FString Key,FString Value);


// Function  Engine.GameplayStatics.GetMaxAudioChannelCount
// Offset::0x63A0370;
int32_t FGameplayStatics::GetMaxAudioChannelCount(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetNumLocalPlayerControllers
// Offset::0x63A8520;
int32_t FGameplayStatics::GetNumLocalPlayerControllers(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetNumPlayerControllers
// Offset::0x63A85C0;
int32_t FGameplayStatics::GetNumPlayerControllers(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetNumPlayerStates
// Offset::0x63A8890;
int32_t FGameplayStatics::GetNumPlayerStates(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetObjectClass
// Offset::0x63A6AD0;
FObject* FGameplayStatics::GetObjectClass(FObject* Object);


// Function  Engine.GameplayStatics.GetPlatformName
// Offset::0x639DD10;
FString FGameplayStatics::GetPlatformName();


// Function  Engine.GameplayStatics.GetPlayerCameraManager
// Offset::0x63A81A0;
FPlayerCameraManager* FGameplayStatics::GetPlayerCameraManager(FObject* WorldContextObject,int32_t PlayerIndex);


// Function  Engine.GameplayStatics.GetPlayerCharacter
// Offset::0x63A8280;
FCharacter* FGameplayStatics::GetPlayerCharacter(FObject* WorldContextObject,int32_t PlayerIndex);


// Function  Engine.GameplayStatics.GetPlayerController
// Offset::0x63A8440;
FPlayerController* FGameplayStatics::GetPlayerController(FObject* WorldContextObject,int32_t PlayerIndex);


// Function  Engine.GameplayStatics.GetPlayerControllerFromID
// Offset::0x63A80C0;
FPlayerController* FGameplayStatics::GetPlayerControllerFromID(FObject* WorldContextObject,int32_t ControllerId);


// Function  Engine.GameplayStatics.GetPlayerControllerID
// Offset::0x63A7E10;
int32_t FGameplayStatics::GetPlayerControllerID(FPlayerController* Player);


// Function  Engine.GameplayStatics.GetPlayerPawn
// Offset::0x63A8360;
FPawn* FGameplayStatics::GetPlayerPawn(FObject* WorldContextObject,int32_t PlayerIndex);


// Function  Engine.GameplayStatics.GetPlayerState
// Offset::0x63A87B0;
FPlayerState* FGameplayStatics::GetPlayerState(FObject* WorldContextObject,int32_t PlayerStateIndex);


// Function  Engine.GameplayStatics.GetPlayerStateFromUniqueNetId
// Offset::0x63A8660;
FPlayerState* FGameplayStatics::GetPlayerStateFromUniqueNetId(FObject* WorldContextObject,FUniqueNetIdRepl UniqueId);


// Function  Engine.GameplayStatics.GetRealTimeSeconds
// Offset::0x639DFC0;
float FGameplayStatics::GetRealTimeSeconds(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetStreamingLevel
// Offset::0x63A7320;
FLevelStreaming* FGameplayStatics::GetStreamingLevel(FObject* WorldContextObject,FName PackageName);


// Function  Engine.GameplayStatics.GetSurfaceType
// Offset::0x639EAC0;
enum class EPhysicalSurface FGameplayStatics::GetSurfaceType(FHitResult Hit);


// Function  Engine.GameplayStatics.GetTimeSeconds
// Offset::0x639E100;
float FGameplayStatics::GetTimeSeconds(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetUnpausedTimeSeconds
// Offset::0x639E060;
float FGameplayStatics::GetUnpausedTimeSeconds(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetViewportMouseCaptureMode
// Offset::0x63A6420;
enum class EMouseCaptureMode FGameplayStatics::GetViewportMouseCaptureMode(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetViewProjectionMatrix
// Offset::0x639B8B0;
void FGameplayStatics::GetViewProjectionMatrix(FMinimalViewInfo DesiredView,FMatrix ViewMatrix,FMatrix ProjectionMatrix,FMatrix ViewProjectionMatrix);


// Function  Engine.GameplayStatics.GetWorldDeltaSeconds
// Offset::0x639E1A0;
float FGameplayStatics::GetWorldDeltaSeconds(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GetWorldOriginLocation
// Offset::0x639C3B0;
FIntVector FGameplayStatics::GetWorldOriginLocation(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.GrassOverlappingSphereCount
// Offset::0x639BF30;
int32_t FGameplayStatics::GrassOverlappingSphereCount(FObject* WorldContextObject,FStaticMesh* StaticMesh,FVector CenterPosition,float Radius);


// Function  Engine.GameplayStatics.HasLaunchOption
// Offset::0x639B270;
bool FGameplayStatics::HasLaunchOption(FString OptionToCheck);


// Function  Engine.GameplayStatics.HasOption
// Offset::0x639B470;
bool FGameplayStatics::HasOption(FString Options,FString InKey);


// Function  Engine.GameplayStatics.IsGamePaused
// Offset::0x63A67C0;
bool FGameplayStatics::IsGamePaused(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.IsSplitscreenForceDisabled
// Offset::0x63A6640;
bool FGameplayStatics::IsSplitscreenForceDisabled(FObject* WorldContextObject);


// Function  Engine.GameplayStatics.LoadGameFromMemory
// Offset::0x639E420;
FSaveGame* FGameplayStatics::LoadGameFromMemory(TArray<char> InSaveData);


// Function  Engine.GameplayStatics.LoadGameFromSlot
// Offset::0x639E330;
FSaveGame* FGameplayStatics::LoadGameFromSlot(FString SlotName,int32_t UserIndex);


// Function  Engine.GameplayStatics.LoadStreamLevel
// Offset::0x63A7B40;
void FGameplayStatics::LoadStreamLevel(FObject* WorldContextObject,FName LevelName,bool bMakeVisibleAfterLoad,bool bShouldBlockOnLoad,FLatentActionInfo LatentInfo);


// Function  Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr
// Offset::0x63A7830;
void FGameplayStatics::LoadStreamLevelBySoftObjectPtr(FObject* WorldContextObject,TSoftObjectPtr<FWorld> Level,bool bMakeVisibleAfterLoad,bool bShouldBlockOnLoad,FLatentActionInfo LatentInfo);


// Function  Engine.GameplayStatics.MakeHitResult
// Offset::0x639EC30;
FHitResult FGameplayStatics::MakeHitResult(bool bBlockingHit,bool bInitialOverlap,float Time,float Distance,FVector Location,FVector ImpactPoint,FVector Normal,FVector ImpactNormal,FPhysicalMaterial* PhysMat,FActor* HitActor,FPrimitiveComponent* HitComponent,FName HitBoneName,FName BoneName,int32_t HitItem,int32_t ElementIndex,int32_t FaceIndex,FVector TraceStart,FVector TraceEnd);


// Function  Engine.GameplayStatics.OpenLevel
// Offset::0x63A70A0;
void FGameplayStatics::OpenLevel(FObject* WorldContextObject,FName LevelName,bool bAbsolute,FString Options);


// Function  Engine.GameplayStatics.OpenLevelBySoftObjectPtr
// Offset::0x63A6DD0;
void FGameplayStatics::OpenLevelBySoftObjectPtr(FObject* WorldContextObject,TSoftObjectPtr<FWorld> Level,bool bAbsolute,FString Options);


// Function  Engine.GameplayStatics.ParseOption
// Offset::0x639B5C0;
FString FGameplayStatics::ParseOption(FString Options,FString Key);


// Function  Engine.GameplayStatics.PlayDialogue2D
// Offset::0x63A2A50;
void FGameplayStatics::PlayDialogue2D(FObject* WorldContextObject,FDialogueWave* Dialogue,FDialogueContext Context,float VolumeMultiplier,float PitchMultiplier,float StartTime);


// Function  Engine.GameplayStatics.PlayDialogueAtLocation
// Offset::0x63A23F0;
void FGameplayStatics::PlayDialogueAtLocation(FObject* WorldContextObject,FDialogueWave* Dialogue,FDialogueContext Context,FVector Location,FRotator Rotation,float VolumeMultiplier,float PitchMultiplier,float StartTime,FSoundAttenuation* AttenuationSettings);


// Function  Engine.GameplayStatics.PlaySound2D
// Offset::0x63A3FB0;
void FGameplayStatics::PlaySound2D(FObject* WorldContextObject,FSoundBase* Sound,float VolumeMultiplier,float PitchMultiplier,float StartTime,FSoundConcurrency* ConcurrencySettings,FActor* OwningActor,bool bIsUISound);


// Function  Engine.GameplayStatics.PlaySoundAtLocation
// Offset::0x63A35B0;
void FGameplayStatics::PlaySoundAtLocation(FObject* WorldContextObject,FSoundBase* Sound,FVector Location,FRotator Rotation,float VolumeMultiplier,float PitchMultiplier,float StartTime,FSoundAttenuation* AttenuationSettings,FSoundConcurrency* ConcurrencySettings,FActor* OwningActor,FInitialActiveSoundParams* InitialParams);


// Function  Engine.GameplayStatics.PlayWorldCameraShake
// Offset::0x63A52D0;
void FGameplayStatics::PlayWorldCameraShake(FObject* WorldContextObject,FCameraShakeBase* Shake,FVector Epicenter,float InnerRadius,float OuterRadius,float Falloff,bool bOrientShakeTowardsEpicenter);


// Function  Engine.GameplayStatics.PopSoundMixModifier
// Offset::0x63A0920;
void FGameplayStatics::PopSoundMixModifier(FObject* WorldContextObject,FSoundMix* InSoundMixModifier);


// Function  Engine.GameplayStatics.PrimeAllSoundsInSoundClass
// Offset::0x63A0F50;
void FGameplayStatics::PrimeAllSoundsInSoundClass(FSoundClass* InSoundClass);


// Function  Engine.GameplayStatics.PrimeSound
// Offset::0x63A0FE0;
void FGameplayStatics::PrimeSound(FSoundBase* InSound);


// Function  Engine.GameplayStatics.ProjectWorldToScreen
// Offset::0x639BC10;
bool FGameplayStatics::ProjectWorldToScreen(FPlayerController* Player,FVector WorldPosition,FVector2D ScreenPosition,bool bPlayerViewportRelative);


// Function  Engine.GameplayStatics.PushSoundMixModifier
// Offset::0x63A0A00;
void FGameplayStatics::PushSoundMixModifier(FObject* WorldContextObject,FSoundMix* InSoundMixModifier);


// Function  Engine.GameplayStatics.RebaseLocalOriginOntoZero
// Offset::0x639C1C0;
FVector FGameplayStatics::RebaseLocalOriginOntoZero(FObject* WorldContextObject,FVector WorldLocation);


// Function  Engine.GameplayStatics.RebaseZeroOriginOntoLocal
// Offset::0x639C0C0;
FVector FGameplayStatics::RebaseZeroOriginOntoLocal(FObject* WorldContextObject,FVector WorldLocation);


// Function  Engine.GameplayStatics.RemovePlayer
// Offset::0x63A7EB0;
void FGameplayStatics::RemovePlayer(FPlayerController* Player,bool bDestroyPawn);


// Function  Engine.GameplayStatics.SaveGameToMemory
// Offset::0x639E700;
bool FGameplayStatics::SaveGameToMemory(FSaveGame* SaveGameObject,TArray<char> OutSaveData);


// Function  Engine.GameplayStatics.SaveGameToSlot
// Offset::0x639E5C0;
bool FGameplayStatics::SaveGameToSlot(FSaveGame* SaveGameObject,FString SlotName,int32_t UserIndex);


// Function  Engine.GameplayStatics.SetBaseSoundMix
// Offset::0x63A1070;
void FGameplayStatics::SetBaseSoundMix(FObject* WorldContextObject,FSoundMix* InSoundMix);


// Function  Engine.GameplayStatics.SetEnableWorldRendering
// Offset::0x63A6560;
void FGameplayStatics::SetEnableWorldRendering(FObject* WorldContextObject,bool bEnable);


// Function  Engine.GameplayStatics.SetForceDisableSplitscreen
// Offset::0x63A66E0;
void FGameplayStatics::SetForceDisableSplitscreen(FObject* WorldContextObject,bool bDisable);


// Function  Engine.GameplayStatics.SetGamePaused
// Offset::0x63A6860;
bool FGameplayStatics::SetGamePaused(FObject* WorldContextObject,bool bPaused);


// Function  Engine.GameplayStatics.SetGlobalListenerFocusParameters
// Offset::0x63A4270;
void FGameplayStatics::SetGlobalListenerFocusParameters(FObject* WorldContextObject,float FocusAzimuthScale,float NonFocusAzimuthScale,float FocusDistanceScale,float NonFocusDistanceScale,float FocusVolumeScale,float NonFocusVolumeScale,float FocusPriorityScale,float NonFocusPriorityScale);


// Function  Engine.GameplayStatics.SetGlobalPitchModulation
// Offset::0x63A4710;
void FGameplayStatics::SetGlobalPitchModulation(FObject* WorldContextObject,float PitchModulation,float TimeSec);


// Function  Engine.GameplayStatics.SetGlobalTimeDilation
// Offset::0x63A6950;
void FGameplayStatics::SetGlobalTimeDilation(FObject* WorldContextObject,float TimeDilation);


// Function  Engine.GameplayStatics.SetMaxAudioChannelsScaled
// Offset::0x63A0410;
void FGameplayStatics::SetMaxAudioChannelsScaled(FObject* WorldContextObject,float MaxChannelCountScale);


// Function  Engine.GameplayStatics.SetPlayerControllerID
// Offset::0x63A7D30;
void FGameplayStatics::SetPlayerControllerID(FPlayerController* Player,int32_t ControllerId);


// Function  Engine.GameplayStatics.SetSoundClassDistanceScale
// Offset::0x63A45A0;
void FGameplayStatics::SetSoundClassDistanceScale(FObject* WorldContextObject,FSoundClass* SoundClass,float DistanceAttenuationScale,float TimeSec);


// Function  Engine.GameplayStatics.SetSoundMixClassOverride
// Offset::0x63A0C50;
void FGameplayStatics::SetSoundMixClassOverride(FObject* WorldContextObject,FSoundMix* InSoundMixModifier,FSoundClass* InSoundClass,float Volume,float Pitch,float FadeInTime,bool bApplyToChildren);


// Function  Engine.GameplayStatics.SetSubtitlesEnabled
// Offset::0x63A1180;
void FGameplayStatics::SetSubtitlesEnabled(bool bEnabled);


// Function  Engine.GameplayStatics.SetViewportMouseCaptureMode
// Offset::0x63A6340;
void FGameplayStatics::SetViewportMouseCaptureMode(FObject* WorldContextObject,enum class EMouseCaptureMode MouseCaptureMode);


// Function  Engine.GameplayStatics.SetWorldOriginLocation
// Offset::0x639C2C0;
void FGameplayStatics::SetWorldOriginLocation(FObject* WorldContextObject,FIntVector NewLocation);


// Function  Engine.GameplayStatics.SpawnDecalAtLocation
// Offset::0x63A00D0;
FDecalComponent* FGameplayStatics::SpawnDecalAtLocation(FObject* WorldContextObject,FMaterialInterface* DecalMaterial,FVector DecalSize,FVector Location,FRotator Rotation,float LifeSpan);


// Function  Engine.GameplayStatics.SpawnDecalAttached
// Offset::0x639FD80;
FDecalComponent* FGameplayStatics::SpawnDecalAttached(FMaterialInterface* DecalMaterial,FVector DecalSize,FSceneComponent* AttachToComponent,FName AttachPointName,FVector Location,FRotator Rotation,enum class EAttachLocation LocationType,float LifeSpan);


// Function  Engine.GameplayStatics.SpawnDialogue2D
// Offset::0x63A27B0;
FAudioComponent* FGameplayStatics::SpawnDialogue2D(FObject* WorldContextObject,FDialogueWave* Dialogue,FDialogueContext Context,float VolumeMultiplier,float PitchMultiplier,float StartTime,bool bAutoDestroy);


// Function  Engine.GameplayStatics.SpawnDialogueAtLocation
// Offset::0x63A1FC0;
FAudioComponent* FGameplayStatics::SpawnDialogueAtLocation(FObject* WorldContextObject,FDialogueWave* Dialogue,FDialogueContext Context,FVector Location,FRotator Rotation,float VolumeMultiplier,float PitchMultiplier,float StartTime,FSoundAttenuation* AttenuationSettings,bool bAutoDestroy);


// Function  Engine.GameplayStatics.SpawnDialogueAttached
// Offset::0x63A1A80;
FAudioComponent* FGameplayStatics::SpawnDialogueAttached(FDialogueWave* Dialogue,FDialogueContext Context,FSceneComponent* AttachToComponent,FName AttachPointName,FVector Location,FRotator Rotation,enum class EAttachLocation LocationType,bool bStopWhenAttachedToDestroyed,float VolumeMultiplier,float PitchMultiplier,float StartTime,FSoundAttenuation* AttenuationSettings,bool bAutoDestroy);


// Function  Engine.GameplayStatics.SpawnEmitterAtLocation
// Offset::0x63A4F70;
FParticleSystemComponent* FGameplayStatics::SpawnEmitterAtLocation(FObject* WorldContextObject,FParticleSystem* EmitterTemplate,FVector Location,FRotator Rotation,FVector Scale,bool bAutoDestroy,enum class EPSCPoolMethod PoolingMethod,bool bAutoActivateSystem);


// Function  Engine.GameplayStatics.SpawnEmitterAttached
// Offset::0x63A4B60;
FParticleSystemComponent* FGameplayStatics::SpawnEmitterAttached(FParticleSystem* EmitterTemplate,FSceneComponent* AttachToComponent,FName AttachPointName,FVector Location,FRotator Rotation,FVector Scale,enum class EAttachLocation LocationType,bool bAutoDestroy,enum class EPSCPoolMethod PoolingMethod,bool bAutoActivate);


// Function  Engine.GameplayStatics.SpawnForceFeedbackAtLocation
// Offset::0x63A16D0;
FForceFeedbackComponent* FGameplayStatics::SpawnForceFeedbackAtLocation(FObject* WorldContextObject,FForceFeedbackEffect* ForceFeedbackEffect,FVector Location,FRotator Rotation,bool bLooping,float IntensityMultiplier,float StartTime,FForceFeedbackAttenuation* AttenuationSettings,bool bAutoDestroy);


// Function  Engine.GameplayStatics.SpawnForceFeedbackAttached
// Offset::0x63A1210;
FForceFeedbackComponent* FGameplayStatics::SpawnForceFeedbackAttached(FForceFeedbackEffect* ForceFeedbackEffect,FSceneComponent* AttachToComponent,FName AttachPointName,FVector Location,FRotator Rotation,enum class EAttachLocation LocationType,bool bStopWhenAttachedToDestroyed,bool bLooping,float IntensityMultiplier,float StartTime,FForceFeedbackAttenuation* AttenuationSettings,bool bAutoDestroy);


// Function  Engine.GameplayStatics.SpawnObject
// Offset::0x63A9960;
FObject* FGameplayStatics::SpawnObject(FObject* ObjectClass,FObject* Outer);


// Function  Engine.GameplayStatics.SpawnSound2D
// Offset::0x63A3CE0;
FAudioComponent* FGameplayStatics::SpawnSound2D(FObject* WorldContextObject,FSoundBase* Sound,float VolumeMultiplier,float PitchMultiplier,float StartTime,FSoundConcurrency* ConcurrencySettings,bool bPersistAcrossLevelTransition,bool bAutoDestroy);


// Function  Engine.GameplayStatics.SpawnSoundAtLocation
// Offset::0x63A31B0;
FAudioComponent* FGameplayStatics::SpawnSoundAtLocation(FObject* WorldContextObject,FSoundBase* Sound,FVector Location,FRotator Rotation,float VolumeMultiplier,float PitchMultiplier,float StartTime,FSoundAttenuation* AttenuationSettings,FSoundConcurrency* ConcurrencySettings,bool bAutoDestroy);


// Function  Engine.GameplayStatics.SpawnSoundAttached
// Offset::0x63A2C90;
FAudioComponent* FGameplayStatics::SpawnSoundAttached(FSoundBase* Sound,FSceneComponent* AttachToComponent,FName AttachPointName,FVector Location,FRotator Rotation,enum class EAttachLocation LocationType,bool bStopWhenAttachedToDestroyed,float VolumeMultiplier,float PitchMultiplier,float StartTime,FSoundAttenuation* AttenuationSettings,FSoundConcurrency* ConcurrencySettings,bool bAutoDestroy);


// Function  Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc
// Offset::0x639C460;
bool FGameplayStatics::SuggestProjectileVelocity_CustomArc(FObject* WorldContextObject,FVector OutLaunchVelocity,FVector StartPos,FVector EndPos,float OverrideGravityZ,float ArcParam);


// Function  Engine.GameplayStatics.UnloadStreamLevel
// Offset::0x63A76A0;
void FGameplayStatics::UnloadStreamLevel(FObject* WorldContextObject,FName LevelName,FLatentActionInfo LatentInfo,bool bShouldBlockOnUnload);


// Function  Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr
// Offset::0x63A7400;
void FGameplayStatics::UnloadStreamLevelBySoftObjectPtr(FObject* WorldContextObject,TSoftObjectPtr<FWorld> Level,FLatentActionInfo LatentInfo,bool bShouldBlockOnUnload);


// Function  Engine.GameplayStatics.UnRetainAllSoundsInSoundClass
// Offset::0x63A0EC0;
void FGameplayStatics::UnRetainAllSoundsInSoundClass(FSoundClass* InSoundClass);


// Function  Engine.SpotLight.SetInnerConeAngle
// Offset::0x653BD60;
void FSpotLight::SetInnerConeAngle(float NewInnerConeAngle);


// Function  Engine.SpotLight.SetOuterConeAngle
// Offset::0x653BCC0;
void FSpotLight::SetOuterConeAngle(float NewOuterConeAngle);


// Function  Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot
// Offset::0x63B7670;
void FHealthSnapshotBlueprintLibrary::LogPerformanceSnapshot(FString SnapshotTitle,bool bResetStats);


// Function  Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots
// Offset::0x63B77D0;
void FHealthSnapshotBlueprintLibrary::StartPerformanceSnapshots();


// Function  Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots
// Offset::0x63B77B0;
void FHealthSnapshotBlueprintLibrary::StopPerformanceSnapshots();


// Function  Engine.AnimationDataController.AddAttribute
// Offset::0x63BF2D0;
bool FAnimationDataController::AddAttribute(FAnimationAttributeIdentifier AttributeIdentifier,bool bShouldTransact);


// Function  Engine.AnimationDataController.AddBoneTrack
// Offset::0x63C1230;
int32_t FAnimationDataController::AddBoneTrack(FName BoneName,bool bShouldTransact);


// Function  Engine.AnimationDataController.AddCurve
// Offset::0x63C0BB0;
bool FAnimationDataController::AddCurve(FAnimationCurveIdentifier CurveId,int32_t CurveFlags,bool bShouldTransact);


// Function  Engine.AnimationDataController.CloseBracket
// Offset::0x63C1800;
void FAnimationDataController::CloseBracket(bool bShouldTransact);


// Function  Engine.AnimationDataController.DuplicateAttribute
// Offset::0x63BECC0;
bool FAnimationDataController::DuplicateAttribute(FAnimationAttributeIdentifier AttributeIdentifier,FAnimationAttributeIdentifier NewAttributeIdentifier,bool bShouldTransact);


// Function  Engine.AnimationDataController.DuplicateCurve
// Offset::0x63C0A20;
bool FAnimationDataController::DuplicateCurve(FAnimationCurveIdentifier CopyCurveId,FAnimationCurveIdentifier NewCurveId,bool bShouldTransact);


// Function  Engine.AnimationDataController.FindOrAddCurveNamesOnSkeleton
// Offset::0x63BF400;
void FAnimationDataController::FindOrAddCurveNamesOnSkeleton(FSkeleton* Skeleton,enum class ERawCurveTrackTypes SupportedCurveType,bool bShouldTransact);


// Function  Engine.AnimationDataController.GetModel
// Offset::0x63C19D0;
FAnimDataModel* FAnimationDataController::GetModel();


// Function  Engine.AnimationDataController.InsertBoneTrack
// Offset::0x63C10F0;
int32_t FAnimationDataController::InsertBoneTrack(FName BoneName,int32_t DesiredIndex,bool bShouldTransact);


// Function  Engine.AnimationDataController.OpenBracket
// Offset::0x63C18A0;
void FAnimationDataController::OpenBracket(FText InTitle,bool bShouldTransact);


// Function  Engine.AnimationDataController.RemoveAllAttributes
// Offset::0x63BEFF0;
int32_t FAnimationDataController::RemoveAllAttributes(bool bShouldTransact);


// Function  Engine.AnimationDataController.RemoveAllAttributesForBone
// Offset::0x63BF0A0;
int32_t FAnimationDataController::RemoveAllAttributesForBone(FName BoneName,bool bShouldTransact);


// Function  Engine.AnimationDataController.RemoveAllBoneTracks
// Offset::0x63C0F60;
void FAnimationDataController::RemoveAllBoneTracks(bool bShouldTransact);


// Function  Engine.AnimationDataController.RemoveAllCurvesOfType
// Offset::0x63C0810;
void FAnimationDataController::RemoveAllCurvesOfType(enum class ERawCurveTrackTypes SupportedCurveType,bool bShouldTransact);


// Function  Engine.AnimationDataController.RemoveAttribute
// Offset::0x63BF1A0;
bool FAnimationDataController::RemoveAttribute(FAnimationAttributeIdentifier AttributeIdentifier,bool bShouldTransact);


// Function  Engine.AnimationDataController.RemoveAttributeKey
// Offset::0x63BEE80;
bool FAnimationDataController::RemoveAttributeKey(FAnimationAttributeIdentifier AttributeIdentifier,float Time,bool bShouldTransact);


// Function  Engine.AnimationDataController.RemoveBoneTrack
// Offset::0x63C1000;
bool FAnimationDataController::RemoveBoneTrack(FName BoneName,bool bShouldTransact);


// Function  Engine.AnimationDataController.RemoveCurve
// Offset::0x63C0900;
bool FAnimationDataController::RemoveCurve(FAnimationCurveIdentifier CurveId,bool bShouldTransact);


// Function  Engine.AnimationDataController.RemoveCurveKey
// Offset::0x63BF7F0;
bool FAnimationDataController::RemoveCurveKey(FAnimationCurveIdentifier CurveId,float Time,bool bShouldTransact);


// Function  Engine.AnimationDataController.RemoveTransformCurveKey
// Offset::0x63BFF80;
bool FAnimationDataController::RemoveTransformCurveKey(FAnimationCurveIdentifier CurveId,float Time,bool bShouldTransact);


// Function  Engine.AnimationDataController.RenameCurve
// Offset::0x63BFDF0;
bool FAnimationDataController::RenameCurve(FAnimationCurveIdentifier CurveToRenameId,FAnimationCurveIdentifier NewCurveId,bool bShouldTransact);


// Function  Engine.AnimationDataController.Resize
// Offset::0x63C1410;
void FAnimationDataController::Resize(float Length,float T0,float T1,bool bShouldTransact);


// Function  Engine.AnimationDataController.ResizePlayLength
// Offset::0x63C1590;
void FAnimationDataController::ResizePlayLength(float NewLength,float T0,float T1,bool bShouldTransact);


// Function  Engine.AnimationDataController.ScaleCurve
// Offset::0x63BFAE0;
bool FAnimationDataController::ScaleCurve(FAnimationCurveIdentifier CurveId,float Origin,float Factor,bool bShouldTransact);


// Function  Engine.AnimationDataController.SetBoneTrackKeys
// Offset::0x63C0D10;
bool FAnimationDataController::SetBoneTrackKeys(FName BoneName,TArray<FVector> PositionalKeys,TArray<FQuat> RotationalKeys,TArray<FVector> ScalingKeys,bool bShouldTransact);


// Function  Engine.AnimationDataController.SetCurveColor
// Offset::0x63BFC90;
bool FAnimationDataController::SetCurveColor(FAnimationCurveIdentifier CurveId,FLinearColor Color,bool bShouldTransact);


// Function  Engine.AnimationDataController.SetCurveFlag
// Offset::0x63C0660;
bool FAnimationDataController::SetCurveFlag(FAnimationCurveIdentifier CurveId,enum class EAnimAssetCurveFlags Flag,bool bState,bool bShouldTransact);


// Function  Engine.AnimationDataController.SetCurveFlags
// Offset::0x63C0500;
bool FAnimationDataController::SetCurveFlags(FAnimationCurveIdentifier CurveId,int32_t Flags,bool bShouldTransact);


// Function  Engine.AnimationDataController.SetCurveKey
// Offset::0x63BF950;
bool FAnimationDataController::SetCurveKey(FAnimationCurveIdentifier CurveId,FRichCurveKey Key,bool bShouldTransact);


// Function  Engine.AnimationDataController.SetCurveKeys
// Offset::0x63BF660;
bool FAnimationDataController::SetCurveKeys(FAnimationCurveIdentifier CurveId,TArray<FRichCurveKey> CurveKeys,bool bShouldTransact);


// Function  Engine.AnimationDataController.SetFrameRate
// Offset::0x63C1320;
void FAnimationDataController::SetFrameRate(FFrameRate FrameRate,bool bShouldTransact);


// Function  Engine.AnimationDataController.SetModel
// Offset::0x576BD10;
void FAnimationDataController::SetModel(FAnimDataModel* InModel);


// Function  Engine.AnimationDataController.SetPlayLength
// Offset::0x63C1710;
void FAnimationDataController::SetPlayLength(float Length,bool bShouldTransact);


// Function  Engine.AnimationDataController.SetTransformCurveKey
// Offset::0x63C00E0;
bool FAnimationDataController::SetTransformCurveKey(FAnimationCurveIdentifier CurveId,float Time,FTransform Value,bool bShouldTransact);


// Function  Engine.AnimationDataController.SetTransformCurveKeys
// Offset::0x63C0300;
bool FAnimationDataController::SetTransformCurveKeys(FAnimationCurveIdentifier CurveId,TArray<FTransform> TransformValues,TArray<float> TimeKeys,bool bShouldTransact);


// Function  Engine.AnimationDataController.UpdateCurveNamesFromSkeleton
// Offset::0x63BF530;
void FAnimationDataController::UpdateCurveNamesFromSkeleton(FSkeleton* Skeleton,enum class ERawCurveTrackTypes SupportedCurveType,bool bShouldTransact);


// Function  Engine.ImportanceSamplingLibrary.BreakImportanceTexture
// Offset::0x63C33C0;
void FImportanceSamplingLibrary::BreakImportanceTexture(FImportanceTexture ImportanceTexture,FTexture2D* Texture,enum class EImportanceWeight WeightingFunc);


// Function  Engine.ImportanceSamplingLibrary.ImportanceSample
// Offset::0x63C3030;
void FImportanceSamplingLibrary::ImportanceSample(FImportanceTexture Texture,FVector2D Rand,int32_t Samples,float Intensity,FVector2D SamplePosition,FLinearColor SampleColor,float SampleIntensity,float SampleSize);


// Function  Engine.ImportanceSamplingLibrary.MakeImportanceTexture
// Offset::0x63C3580;
FImportanceTexture FImportanceSamplingLibrary::MakeImportanceTexture(FTexture2D* Texture,enum class EImportanceWeight WeightingFunc);


// Function  Engine.ImportanceSamplingLibrary.NextSobolCell2D
// Offset::0x63C3AB0;
FVector2D FImportanceSamplingLibrary::NextSobolCell2D(int32_t Index,int32_t NumCells,FVector2D PreviousValue);


// Function  Engine.ImportanceSamplingLibrary.NextSobolCell3D
// Offset::0x63C3770;
FVector FImportanceSamplingLibrary::NextSobolCell3D(int32_t Index,int32_t NumCells,FVector PreviousValue);


// Function  Engine.ImportanceSamplingLibrary.NextSobolFloat
// Offset::0x63C3DA0;
float FImportanceSamplingLibrary::NextSobolFloat(int32_t Index,int32_t Dimension,float PreviousValue);


// Function  Engine.ImportanceSamplingLibrary.RandomSobolCell2D
// Offset::0x63C3BF0;
FVector2D FImportanceSamplingLibrary::RandomSobolCell2D(int32_t Index,int32_t NumCells,FVector2D Cell,FVector2D Seed);


// Function  Engine.ImportanceSamplingLibrary.RandomSobolCell3D
// Offset::0x63C38C0;
FVector FImportanceSamplingLibrary::RandomSobolCell3D(int32_t Index,int32_t NumCells,FVector Cell,FVector Seed);


// Function  Engine.ImportanceSamplingLibrary.RandomSobolFloat
// Offset::0x63C3ED0;
float FImportanceSamplingLibrary::RandomSobolFloat(int32_t Index,int32_t Dimension,float Seed);


// Function  Engine.InputComponent.GetControllerAnalogKeyState
// Offset::0x63C6830;
float FInputComponent::GetControllerAnalogKeyState(FKey Key);


// Function  Engine.InputComponent.GetControllerAnalogStickState
// Offset::0x63C65E0;
void FInputComponent::GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick,float StickX,float StickY);


// Function  Engine.InputComponent.GetControllerKeyTimeDown
// Offset::0x63C6830;
float FInputComponent::GetControllerKeyTimeDown(FKey Key);


// Function  Engine.InputComponent.GetControllerMouseDelta
// Offset::0x63C6730;
void FInputComponent::GetControllerMouseDelta(float DeltaX,float DeltaY);


// Function  Engine.InputComponent.GetControllerVectorKeyState
// Offset::0x63C6AD0;
FVector FInputComponent::GetControllerVectorKeyState(FKey Key);


// Function  Engine.InputComponent.GetTouchState
// Offset::0x63C6920;
void FInputComponent::GetTouchState(int32_t FingerIndex,float LocationX,float LocationY,bool bIsCurrentlyPressed);


// Function  Engine.InputComponent.IsControllerKeyDown
// Offset::0x63C6BD0;
bool FInputComponent::IsControllerKeyDown(FKey Key);


// Function  Engine.InputComponent.OnInputOwnerEndPlayed
// Offset::0x63C6CC0;
void FInputComponent::OnInputOwnerEndPlayed(FActor* InOwner,enum class EEndPlayReason EndPlayReason);


// Function  Engine.InputComponent.WasControllerKeyJustPressed
// Offset::0x63C6BD0;
bool FInputComponent::WasControllerKeyJustPressed(FKey Key);


// Function  Engine.InputComponent.WasControllerKeyJustReleased
// Offset::0x63C6BD0;
bool FInputComponent::WasControllerKeyJustReleased(FKey Key);


// Function  Engine.InputSettings.AddActionMapping
// Offset::0x63C8530;
void FInputSettings::AddActionMapping(FInputActionKeyMapping KeyMapping,bool bForceRebuildKeymaps);


// Function  Engine.InputSettings.AddAxisMapping
// Offset::0x63C8090;
void FInputSettings::AddAxisMapping(FInputAxisKeyMapping KeyMapping,bool bForceRebuildKeymaps);


// Function  Engine.InputSettings.ForceRebuildKeymaps
// Offset::0x63C7BF0;
void FInputSettings::ForceRebuildKeymaps();


// Function  Engine.InputSettings.GetActionMappingByName
// Offset::0x63C83E0;
void FInputSettings::GetActionMappingByName(FName InActionName,TArray<FInputActionKeyMapping> OutMappings);


// Function  Engine.InputSettings.GetActionNames
// Offset::0x63C7CC0;
void FInputSettings::GetActionNames(TArray<FName> ActionNames);


// Function  Engine.InputSettings.GetAxisMappingByName
// Offset::0x63C7F40;
void FInputSettings::GetAxisMappingByName(FName InAxisName,TArray<FInputAxisKeyMapping> OutMappings);


// Function  Engine.InputSettings.GetAxisNames
// Offset::0x63C7C10;
void FInputSettings::GetAxisNames(TArray<FName> AxisNames);


// Function  Engine.InputSettings.GetInputSettings
// Offset::0x63C86D0;
FInputSettings* FInputSettings::GetInputSettings();


// Function  Engine.InputSettings.RemoveActionMapping
// Offset::0x63C8240;
void FInputSettings::RemoveActionMapping(FInputActionKeyMapping KeyMapping,bool bForceRebuildKeymaps);


// Function  Engine.InputSettings.RemoveAxisMapping
// Offset::0x63C7D90;
void FInputSettings::RemoveAxisMapping(FInputAxisKeyMapping KeyMapping,bool bForceRebuildKeymaps);


// Function  Engine.InputSettings.SaveKeyMappings
// Offset::0x63C7D70;
void FInputSettings::SaveKeyMappings();


// Function  Engine.KismetArrayLibrary.Array_Add
// Offset::0x63D5750;
int32_t FKismetArrayLibrary::Array_Add(TArray<int32_t> TargetArray,int32_t NewItem);


// Function  Engine.KismetArrayLibrary.Array_AddUnique
// Offset::0x63D5910;
int32_t FKismetArrayLibrary::Array_AddUnique(TArray<int32_t> TargetArray,int32_t NewItem);


// Function  Engine.KismetArrayLibrary.Array_Append
// Offset::0x63D5AD0;
void FKismetArrayLibrary::Array_Append(TArray<int32_t> TargetArray,TArray<int32_t> SourceArray);


// Function  Engine.KismetArrayLibrary.Array_Clear
// Offset::0x63D5BC0;
void FKismetArrayLibrary::Array_Clear(TArray<int32_t> TargetArray);


// Function  Engine.KismetArrayLibrary.Array_Contains
// Offset::0x63D5C50;
bool FKismetArrayLibrary::Array_Contains(TArray<int32_t> TargetArray,int32_t ItemToFind);


// Function  Engine.KismetArrayLibrary.Array_Find
// Offset::0x63D5E20;
int32_t FKismetArrayLibrary::Array_Find(TArray<int32_t> TargetArray,int32_t ItemToFind);


// Function  Engine.KismetArrayLibrary.Array_Get
// Offset::0x63D5FF0;
void FKismetArrayLibrary::Array_Get(TArray<int32_t> TargetArray,int32_t Index,int32_t Item);


// Function  Engine.KismetArrayLibrary.Array_Identical
// Offset::0x63D6250;
bool FKismetArrayLibrary::Array_Identical(TArray<int32_t> ArrayA,TArray<int32_t> ArrayB);


// Function  Engine.KismetArrayLibrary.Array_Insert
// Offset::0x63D6340;
void FKismetArrayLibrary::Array_Insert(TArray<int32_t> TargetArray,int32_t NewItem,int32_t Index);


// Function  Engine.KismetArrayLibrary.Array_IsEmpty
// Offset::0x63D6560;
bool FKismetArrayLibrary::Array_IsEmpty(TArray<int32_t> TargetArray);


// Function  Engine.KismetArrayLibrary.Array_IsNotEmpty
// Offset::0x63D65F0;
bool FKismetArrayLibrary::Array_IsNotEmpty(TArray<int32_t> TargetArray);


// Function  Engine.KismetArrayLibrary.Array_IsValidIndex
// Offset::0x63D6680;
bool FKismetArrayLibrary::Array_IsValidIndex(TArray<int32_t> TargetArray,int32_t IndexToTest);


// Function  Engine.KismetArrayLibrary.Array_LastIndex
// Offset::0x63D6780;
int32_t FKismetArrayLibrary::Array_LastIndex(TArray<int32_t> TargetArray);


// Function  Engine.KismetArrayLibrary.Array_Length
// Offset::0x63D6810;
int32_t FKismetArrayLibrary::Array_Length(TArray<int32_t> TargetArray);


// Function  Engine.KismetArrayLibrary.Array_Random
// Offset::0x63D68A0;
void FKismetArrayLibrary::Array_Random(TArray<int32_t> TargetArray,int32_t OutItem,int32_t OutIndex);


// Function  Engine.KismetArrayLibrary.Array_RandomFromStream
// Offset::0x63D69D0;
void FKismetArrayLibrary::Array_RandomFromStream(TArray<int32_t> TargetArray,FRandomStream RandomStream,int32_t OutItem,int32_t OutIndex);


// Function  Engine.KismetArrayLibrary.Array_Remove
// Offset::0x63D6B50;
void FKismetArrayLibrary::Array_Remove(TArray<int32_t> TargetArray,int32_t IndexToRemove);


// Function  Engine.KismetArrayLibrary.Array_RemoveItem
// Offset::0x63D6C50;
bool FKismetArrayLibrary::Array_RemoveItem(TArray<int32_t> TargetArray,int32_t Item);


// Function  Engine.KismetArrayLibrary.Array_Resize
// Offset::0x63D6E20;
void FKismetArrayLibrary::Array_Resize(TArray<int32_t> TargetArray,int32_t Size);


// Function  Engine.KismetArrayLibrary.Array_Reverse
// Offset::0x63D6F20;
void FKismetArrayLibrary::Array_Reverse(TArray<int32_t> TargetArray);


// Function  Engine.KismetArrayLibrary.Array_Set
// Offset::0x63D6FC0;
void FKismetArrayLibrary::Array_Set(TArray<int32_t> TargetArray,int32_t Index,int32_t Item,bool bSizeToFit);


// Function  Engine.KismetArrayLibrary.Array_Shuffle
// Offset::0x63D7240;
void FKismetArrayLibrary::Array_Shuffle(TArray<int32_t> TargetArray);


// Function  Engine.KismetArrayLibrary.Array_Swap
// Offset::0x63D72D0;
void FKismetArrayLibrary::Array_Swap(TArray<int32_t> TargetArray,int32_t FirstIndex,int32_t SecondIndex);


// Function  Engine.KismetArrayLibrary.FilterArray
// Offset::0x63D4E20;
void FKismetArrayLibrary::FilterArray(TArray<FActor*> TargetArray,FActor* FilterClass,TArray<FActor*> FilteredArray);


// Function  Engine.KismetArrayLibrary.SetArrayPropertyByName
// Offset::0x63D7420;
void FKismetArrayLibrary::SetArrayPropertyByName(FObject* Object,FName PropertyName,TArray<int32_t> Value);


// Function  Engine.KismetGuidLibrary.Conv_GuidToString
// Offset::0x63D7B80;
FString FKismetGuidLibrary::Conv_GuidToString(FGuid InGuid);


// Function  Engine.KismetGuidLibrary.EqualEqual_GuidGuid
// Offset::0x63D7EF0;
bool FKismetGuidLibrary::EqualEqual_GuidGuid(FGuid A,FGuid B);


// Function  Engine.KismetGuidLibrary.Invalidate_Guid
// Offset::0x63D7CB0;
void FKismetGuidLibrary::Invalidate_Guid(FGuid InGuid);


// Function  Engine.KismetGuidLibrary.IsValid_Guid
// Offset::0x63D7D50;
bool FKismetGuidLibrary::IsValid_Guid(FGuid InGuid);


// Function  Engine.KismetGuidLibrary.NewGuid
// Offset::0x63D7C60;
FGuid FKismetGuidLibrary::NewGuid();


// Function  Engine.KismetGuidLibrary.NotEqual_GuidGuid
// Offset::0x63D7DF0;
bool FKismetGuidLibrary::NotEqual_GuidGuid(FGuid A,FGuid B);


// Function  Engine.KismetGuidLibrary.Parse_StringToGuid
// Offset::0x63D7A30;
void FKismetGuidLibrary::Parse_StringToGuid(FString GuidString,FGuid OutGuid,bool Success);


// Function  Engine.KismetInputLibrary.CalibrateTilt
// Offset::0x63DBB10;
void FKismetInputLibrary::CalibrateTilt();


// Function  Engine.KismetInputLibrary.EqualEqual_InputChordInputChord
// Offset::0x63DB760;
bool FKismetInputLibrary::EqualEqual_InputChordInputChord(FInputChord A,FInputChord B);


// Function  Engine.KismetInputLibrary.EqualEqual_KeyKey
// Offset::0x63DB970;
bool FKismetInputLibrary::EqualEqual_KeyKey(FKey A,FKey B);


// Function  Engine.KismetInputLibrary.GetAnalogValue
// Offset::0x63D9820;
float FKismetInputLibrary::GetAnalogValue(FAnalogInputEvent Input);


// Function  Engine.KismetInputLibrary.GetKey
// Offset::0x63D9A40;
FKey FKismetInputLibrary::GetKey(FKeyEvent Input);


// Function  Engine.KismetInputLibrary.GetUserIndex
// Offset::0x63D9930;
int32_t FKismetInputLibrary::GetUserIndex(FKeyEvent Input);


// Function  Engine.KismetInputLibrary.InputChord_GetDisplayName
// Offset::0x63D9BE0;
FText FKismetInputLibrary::InputChord_GetDisplayName(FInputChord Key);


// Function  Engine.KismetInputLibrary.InputEvent_IsAltDown
// Offset::0x63DA130;
bool FKismetInputLibrary::InputEvent_IsAltDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsCommandDown
// Offset::0x63D9EC0;
bool FKismetInputLibrary::InputEvent_IsCommandDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsControlDown
// Offset::0x63DA3A0;
bool FKismetInputLibrary::InputEvent_IsControlDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
// Offset::0x63DA060;
bool FKismetInputLibrary::InputEvent_IsLeftAltDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
// Offset::0x63D9DF0;
bool FKismetInputLibrary::InputEvent_IsLeftCommandDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
// Offset::0x63DA2D0;
bool FKismetInputLibrary::InputEvent_IsLeftControlDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
// Offset::0x63DA540;
bool FKismetInputLibrary::InputEvent_IsLeftShiftDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsRepeat
// Offset::0x63DA6E0;
bool FKismetInputLibrary::InputEvent_IsRepeat(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsRightAltDown
// Offset::0x63D9F90;
bool FKismetInputLibrary::InputEvent_IsRightAltDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
// Offset::0x63D9D20;
bool FKismetInputLibrary::InputEvent_IsRightCommandDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsRightControlDown
// Offset::0x63DA200;
bool FKismetInputLibrary::InputEvent_IsRightControlDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
// Offset::0x63DA470;
bool FKismetInputLibrary::InputEvent_IsRightShiftDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.InputEvent_IsShiftDown
// Offset::0x63DA610;
bool FKismetInputLibrary::InputEvent_IsShiftDown(FInputEvent Input);


// Function  Engine.KismetInputLibrary.Key_GetDisplayName
// Offset::0x63DA7B0;
FText FKismetInputLibrary::Key_GetDisplayName(FKey Key);


// Function  Engine.KismetInputLibrary.Key_GetNavigationAction
// Offset::0x63DAC00;
enum class EUINavigationAction FKismetInputLibrary::Key_GetNavigationAction(FKey InKey);


// Function  Engine.KismetInputLibrary.Key_GetNavigationActionFromKey
// Offset::0x63DAAF0;
enum class EUINavigationAction FKismetInputLibrary::Key_GetNavigationActionFromKey(FKeyEvent InKeyEvent);


// Function  Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog
// Offset::0x63DA8D0;
enum class EUINavigation FKismetInputLibrary::Key_GetNavigationDirectionFromAnalog(FAnalogInputEvent InAnalogEvent);


// Function  Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey
// Offset::0x63DA9E0;
enum class EUINavigation FKismetInputLibrary::Key_GetNavigationDirectionFromKey(FKeyEvent InKeyEvent);


// Function  Engine.KismetInputLibrary.Key_IsAnalog
// Offset::0x63DAEA0;
bool FKismetInputLibrary::Key_IsAnalog(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsAxis1D
// Offset::0x63DB220;
bool FKismetInputLibrary::Key_IsAxis1D(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsAxis2D
// Offset::0x63DB140;
bool FKismetInputLibrary::Key_IsAxis2D(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsAxis3D
// Offset::0x63DB060;
bool FKismetInputLibrary::Key_IsAxis3D(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsButtonAxis
// Offset::0x63DAF80;
bool FKismetInputLibrary::Key_IsButtonAxis(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsDigital
// Offset::0x63DADC0;
bool FKismetInputLibrary::Key_IsDigital(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsGamepadKey
// Offset::0x63DB5A0;
bool FKismetInputLibrary::Key_IsGamepadKey(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsKeyboardKey
// Offset::0x63DB3E0;
bool FKismetInputLibrary::Key_IsKeyboardKey(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsModifierKey
// Offset::0x63DB680;
bool FKismetInputLibrary::Key_IsModifierKey(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsMouseButton
// Offset::0x63DB4C0;
bool FKismetInputLibrary::Key_IsMouseButton(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsValid
// Offset::0x63DACE0;
bool FKismetInputLibrary::Key_IsValid(FKey Key);


// Function  Engine.KismetInputLibrary.Key_IsVectorAxis
// Offset::0x63DB300;
bool FKismetInputLibrary::Key_IsVectorAxis(FKey Key);


// Function  Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
// Offset::0x63D93D0;
FVector2D FKismetInputLibrary::PointerEvent_GetCursorDelta(FPointerEvent Input);


// Function  Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
// Offset::0x63D8FB0;
FKey FKismetInputLibrary::PointerEvent_GetEffectingButton(FPointerEvent Input);


// Function  Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
// Offset::0x63D8600;
FVector2D FKismetInputLibrary::PointerEvent_GetGestureDelta(FPointerEvent Input);


// Function  Engine.KismetInputLibrary.PointerEvent_GetGestureType
// Offset::0x63D8770;
enum class ESlateGesture FKismetInputLibrary::PointerEvent_GetGestureType(FPointerEvent Input);


// Function  Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
// Offset::0x63D9540;
FVector2D FKismetInputLibrary::PointerEvent_GetLastScreenSpacePosition(FPointerEvent Input);


// Function  Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
// Offset::0x63D8B90;
int32_t FKismetInputLibrary::PointerEvent_GetPointerIndex(FPointerEvent Input);


// Function  Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
// Offset::0x63D96B0;
FVector2D FKismetInputLibrary::PointerEvent_GetScreenSpacePosition(FPointerEvent Input);


// Function  Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
// Offset::0x63D8A30;
int32_t FKismetInputLibrary::PointerEvent_GetTouchpadIndex(FPointerEvent Input);


// Function  Engine.KismetInputLibrary.PointerEvent_GetUserIndex
// Offset::0x63D8CF0;
int32_t FKismetInputLibrary::PointerEvent_GetUserIndex(FPointerEvent Input);


// Function  Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
// Offset::0x63D8E50;
float FKismetInputLibrary::PointerEvent_GetWheelDelta(FPointerEvent Input);


// Function  Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
// Offset::0x63D91B0;
bool FKismetInputLibrary::PointerEvent_IsMouseButtonDown(FPointerEvent Input,FKey MouseButton);


// Function  Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
// Offset::0x63D88D0;
bool FKismetInputLibrary::PointerEvent_IsTouchEvent(FPointerEvent Input);


// Function  Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture
// Offset::0x63DF380;
void FKismetInternationalizationLibrary::ClearCurrentAssetGroupCulture(FName AssetGroup,bool SaveToConfig);


// Function  Engine.KismetInternationalizationLibrary.GetCultureDisplayName
// Offset::0x63DED70;
FString FKismetInternationalizationLibrary::GetCultureDisplayName(FString Culture,bool Localized);


// Function  Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture
// Offset::0x63DF460;
FString FKismetInternationalizationLibrary::GetCurrentAssetGroupCulture(FName AssetGroup);


// Function  Engine.KismetInternationalizationLibrary.GetCurrentCulture
// Offset::0x63DF8D0;
FString FKismetInternationalizationLibrary::GetCurrentCulture();


// Function  Engine.KismetInternationalizationLibrary.GetCurrentLanguage
// Offset::0x63DF8D0;
FString FKismetInternationalizationLibrary::GetCurrentLanguage();


// Function  Engine.KismetInternationalizationLibrary.GetCurrentLocale
// Offset::0x63DF760;
FString FKismetInternationalizationLibrary::GetCurrentLocale();


// Function  Engine.KismetInternationalizationLibrary.GetLocalizedCultures
// Offset::0x63DF080;
TArray<FString> FKismetInternationalizationLibrary::GetLocalizedCultures(bool IncludeGame,bool IncludeEngine,bool IncludeEditor,bool IncludeAdditional);


// Function  Engine.KismetInternationalizationLibrary.GetNativeCulture
// Offset::0x63DF2B0;
FString FKismetInternationalizationLibrary::GetNativeCulture(enum class ELocalizedTextSourceCategory TextCategory);


// Function  Engine.KismetInternationalizationLibrary.GetSuitableCulture
// Offset::0x63DEEA0;
FString FKismetInternationalizationLibrary::GetSuitableCulture(TArray<FString> AvailableCultures,FString CultureToMatch,FString FallbackCulture);


// Function  Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture
// Offset::0x63DF530;
bool FKismetInternationalizationLibrary::SetCurrentAssetGroupCulture(FName AssetGroup,FString Culture,bool SaveToConfig);


// Function  Engine.KismetInternationalizationLibrary.SetCurrentCulture
// Offset::0x63DFA40;
bool FKismetInternationalizationLibrary::SetCurrentCulture(FString Culture,bool SaveToConfig);


// Function  Engine.KismetInternationalizationLibrary.SetCurrentLanguage
// Offset::0x63DF950;
bool FKismetInternationalizationLibrary::SetCurrentLanguage(FString Culture,bool SaveToConfig);


// Function  Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale
// Offset::0x63DF670;
bool FKismetInternationalizationLibrary::SetCurrentLanguageAndLocale(FString Culture,bool SaveToConfig);


// Function  Engine.KismetInternationalizationLibrary.SetCurrentLocale
// Offset::0x63DF7E0;
bool FKismetInternationalizationLibrary::SetCurrentLocale(FString Culture,bool SaveToConfig);


// Function  Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
// Offset::0x63E04D0;
FMaterialInstanceDynamic* FKismetMaterialLibrary::CreateDynamicMaterialInstance(FObject* WorldContextObject,FMaterialInterface* Parent,FName OptionalName,enum class EMIDCreationFlags CreationFlags);


// Function  Engine.KismetMaterialLibrary.GetScalarParameterValue
// Offset::0x63E0790;
float FKismetMaterialLibrary::GetScalarParameterValue(FObject* WorldContextObject,FMaterialParameterCollection* Collection,FName ParameterName);


// Function  Engine.KismetMaterialLibrary.GetVectorParameterValue
// Offset::0x63E0650;
FLinearColor FKismetMaterialLibrary::GetVectorParameterValue(FObject* WorldContextObject,FMaterialParameterCollection* Collection,FName ParameterName);


// Function  Engine.KismetMaterialLibrary.SetScalarParameterValue
// Offset::0x63E0A40;
void FKismetMaterialLibrary::SetScalarParameterValue(FObject* WorldContextObject,FMaterialParameterCollection* Collection,FName ParameterName,float ParameterValue);


// Function  Engine.KismetMaterialLibrary.SetVectorParameterValue
// Offset::0x63E08C0;
void FKismetMaterialLibrary::SetVectorParameterValue(FObject* WorldContextObject,FMaterialParameterCollection* Collection,FName ParameterName,FLinearColor ParameterValue);


// Function  Engine.KismetMathLibrary.Abs
// Offset::0x6412950;
double FKismetMathLibrary::Abs(double A);


// Function  Engine.KismetMathLibrary.Abs_Int
// Offset::0x64151A0;
int32_t FKismetMathLibrary::Abs_Int(int32_t A);


// Function  Engine.KismetMathLibrary.Abs_Int64
// Offset::0x6413B80;
int64_t FKismetMathLibrary::Abs_Int64(int64_t A);


// Function  Engine.KismetMathLibrary.Acos
// Offset::0x6412690;
double FKismetMathLibrary::Acos(double A);


// Function  Engine.KismetMathLibrary.Add_ByteByte
// Offset::0x64170F0;
char FKismetMathLibrary::Add_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.Add_DateTimeDateTime
// Offset::0x63ED310;
FDateTime FKismetMathLibrary::Add_DateTimeDateTime(FDateTime A,FDateTime B);


// Function  Engine.KismetMathLibrary.Add_DateTimeTimespan
// Offset::0x63ED310;
FDateTime FKismetMathLibrary::Add_DateTimeTimespan(FDateTime A,FTimespan B);


// Function  Engine.KismetMathLibrary.Add_DoubleDouble
// Offset::0x6413800;
double FKismetMathLibrary::Add_DoubleDouble(double A,double B);


// Function  Engine.KismetMathLibrary.Add_Int64Int64
// Offset::0x6414E80;
int64_t FKismetMathLibrary::Add_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.Add_IntInt
// Offset::0x6416470;
int32_t FKismetMathLibrary::Add_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.Add_IntPointInt
// Offset::0x640EE20;
FIntPoint FKismetMathLibrary::Add_IntPointInt(FIntPoint A,int32_t B);


// Function  Engine.KismetMathLibrary.Add_IntPointIntPoint
// Offset::0x640EF20;
FIntPoint FKismetMathLibrary::Add_IntPointIntPoint(FIntPoint A,FIntPoint B);


// Function  Engine.KismetMathLibrary.Add_LinearColorLinearColor
// Offset::0x63EF870;
FLinearColor FKismetMathLibrary::Add_LinearColorLinearColor(FLinearColor A,FLinearColor B);


// Function  Engine.KismetMathLibrary.Add_MatrixMatrix
// Offset::0x63FB530;
FMatrix FKismetMathLibrary::Add_MatrixMatrix(FMatrix A,FMatrix B);


// Function  Engine.KismetMathLibrary.Add_QuatQuat
// Offset::0x63F5460;
FQuat FKismetMathLibrary::Add_QuatQuat(FQuat A,FQuat B);


// Function  Engine.KismetMathLibrary.Add_TimespanTimespan
// Offset::0x63ED310;
FTimespan FKismetMathLibrary::Add_TimespanTimespan(FTimespan A,FTimespan B);


// Function  Engine.KismetMathLibrary.Add_Vector2DFloat
// Offset::0x640DEA0;
FVector2D FKismetMathLibrary::Add_Vector2DFloat(FVector2D A,double B);


// Function  Engine.KismetMathLibrary.Add_Vector2DVector2D
// Offset::0x640DFA0;
FVector2D FKismetMathLibrary::Add_Vector2DVector2D(FVector2D A,FVector2D B);


// Function  Engine.KismetMathLibrary.Add_Vector4Vector4
// Offset::0x6401AC0;
FVector4 FKismetMathLibrary::Add_Vector4Vector4(FVector4 A,FVector4 B);


// Function  Engine.KismetMathLibrary.Add_VectorFloat
// Offset::0x640A650;
FVector FKismetMathLibrary::Add_VectorFloat(FVector A,double B);


// Function  Engine.KismetMathLibrary.Add_VectorInt
// Offset::0x640A530;
FVector FKismetMathLibrary::Add_VectorInt(FVector A,int32_t B);


// Function  Engine.KismetMathLibrary.Add_VectorVector
// Offset::0x640A760;
FVector FKismetMathLibrary::Add_VectorVector(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.And_Int64Int64
// Offset::0x6414590;
int64_t FKismetMathLibrary::And_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.And_IntInt
// Offset::0x6415C00;
int32_t FKismetMathLibrary::And_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.Asin
// Offset::0x64127F0;
double FKismetMathLibrary::Asin(double A);


// Function  Engine.KismetMathLibrary.Atan
// Offset::0x6412550;
double FKismetMathLibrary::Atan(double A);


// Function  Engine.KismetMathLibrary.Atan2
// Offset::0x6412450;
double FKismetMathLibrary::Atan2(double Y,double X);


// Function  Engine.KismetMathLibrary.BMax
// Offset::0x6416E20;
char FKismetMathLibrary::BMax(char A,char B);


// Function  Engine.KismetMathLibrary.BMin
// Offset::0x6416F10;
char FKismetMathLibrary::BMin(char A,char B);


// Function  Engine.KismetMathLibrary.BooleanAND
// Offset::0x64178C0;
bool FKismetMathLibrary::BooleanAND(bool A,bool B);


// Function  Engine.KismetMathLibrary.BooleanNAND
// Offset::0x64177C0;
bool FKismetMathLibrary::BooleanNAND(bool A,bool B);


// Function  Engine.KismetMathLibrary.BooleanNOR
// Offset::0x64174E0;
bool FKismetMathLibrary::BooleanNOR(bool A,bool B);


// Function  Engine.KismetMathLibrary.BooleanOR
// Offset::0x64176D0;
bool FKismetMathLibrary::BooleanOR(bool A,bool B);


// Function  Engine.KismetMathLibrary.BooleanXOR
// Offset::0x64175D0;
bool FKismetMathLibrary::BooleanXOR(bool A,bool B);


// Function  Engine.KismetMathLibrary.BreakBoxSphereBounds
// Offset::0x63E9FE0;
void FKismetMathLibrary::BreakBoxSphereBounds(FBoxSphereBounds InBoxSphereBounds,FVector Origin,FVector BoxExtent,float SphereRadius);


// Function  Engine.KismetMathLibrary.BreakColor
// Offset::0x63F1F80;
void FKismetMathLibrary::BreakColor(FLinearColor InColor,float R,float G,float B,float A);


// Function  Engine.KismetMathLibrary.BreakDateTime
// Offset::0x63EEDD0;
void FKismetMathLibrary::BreakDateTime(FDateTime InDateTime,int32_t Year,int32_t Month,int32_t Day,int32_t Hour,int32_t Minute,int32_t Second,int32_t Millisecond);


// Function  Engine.KismetMathLibrary.BreakFrameRate
// Offset::0x63EB590;
void FKismetMathLibrary::BreakFrameRate(FFrameRate InFrameRate,int32_t Numerator,int32_t Denominator);


// Function  Engine.KismetMathLibrary.BreakQualifiedFrameTime
// Offset::0x63EB7E0;
void FKismetMathLibrary::BreakQualifiedFrameTime(FQualifiedFrameTime InFrameTime,FFrameNumber Frame,FFrameRate FrameRate,float SubFrame);


// Function  Engine.KismetMathLibrary.BreakQuat
// Offset::0x63F4F00;
void FKismetMathLibrary::BreakQuat(FQuat InQuat,float X,float Y,float Z,float W);


// Function  Engine.KismetMathLibrary.BreakRandomStream
// Offset::0x63E9E40;
void FKismetMathLibrary::BreakRandomStream(FRandomStream InRandomStream,int32_t InitialSeed);


// Function  Engine.KismetMathLibrary.BreakRotator
// Offset::0x63FD720;
void FKismetMathLibrary::BreakRotator(FRotator InRot,float Roll,float Pitch,float Yaw);


// Function  Engine.KismetMathLibrary.BreakRotIntoAxes
// Offset::0x63FD580;
void FKismetMathLibrary::BreakRotIntoAxes(FRotator InRot,FVector X,FVector Y,FVector Z);


// Function  Engine.KismetMathLibrary.BreakTimespan
// Offset::0x63ED660;
void FKismetMathLibrary::BreakTimespan(FTimespan InTimespan,int32_t Days,int32_t Hours,int32_t Minutes,int32_t Seconds,int32_t Milliseconds);


// Function  Engine.KismetMathLibrary.BreakTimespan2
// Offset::0x63ED400;
void FKismetMathLibrary::BreakTimespan2(FTimespan InTimespan,int32_t Days,int32_t Hours,int32_t Minutes,int32_t Seconds,int32_t FractionNano);


// Function  Engine.KismetMathLibrary.BreakTransform
// Offset::0x63E8950;
void FKismetMathLibrary::BreakTransform(FTransform InTransform,FVector Location,FRotator Rotation,FVector Scale);


// Function  Engine.KismetMathLibrary.BreakVector
// Offset::0x63E1340;
void FKismetMathLibrary::BreakVector(FVector InVec,double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.BreakVector2D
// Offset::0x640E290;
void FKismetMathLibrary::BreakVector2D(FVector2D InVec,double X,double Y);


// Function  Engine.KismetMathLibrary.BreakVector3f
// Offset::0x640AD50;
void FKismetMathLibrary::BreakVector3f(FVector3f InVec,float X,float Y,float Z);


// Function  Engine.KismetMathLibrary.BreakVector4
// Offset::0x6401F00;
void FKismetMathLibrary::BreakVector4(FVector4 InVec,double X,double Y,double Z,double W);


// Function  Engine.KismetMathLibrary.BreakVector_NetQuantize
// Offset::0x63E1340;
void FKismetMathLibrary::BreakVector_NetQuantize(FVector_NetQuantize InVec,double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.BreakVector_NetQuantize10
// Offset::0x63E1340;
void FKismetMathLibrary::BreakVector_NetQuantize10(FVector_NetQuantize10 InVec,double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.BreakVector_NetQuantize100
// Offset::0x63E1340;
void FKismetMathLibrary::BreakVector_NetQuantize100(FVector_NetQuantize100 InVec,double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.BreakVector_NetQuantizeNormal
// Offset::0x63E1340;
void FKismetMathLibrary::BreakVector_NetQuantizeNormal(FVector_NetQuantizeNormal InVec,double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.CInterpTo
// Offset::0x63EFF90;
FLinearColor FKismetMathLibrary::CInterpTo(FLinearColor Current,FLinearColor Target,float DeltaTime,float InterpSpeed);


// Function  Engine.KismetMathLibrary.Clamp
// Offset::0x6415420;
int32_t FKismetMathLibrary::Clamp(int32_t Value,int32_t Min,int32_t Max);


// Function  Engine.KismetMathLibrary.ClampAngle
// Offset::0x64115B0;
double FKismetMathLibrary::ClampAngle(double AngleDegrees,double MinAngleDegrees,double MaxAngleDegrees);


// Function  Engine.KismetMathLibrary.ClampAxes2D
// Offset::0x640CF90;
FVector2D FKismetMathLibrary::ClampAxes2D(FVector2D A,double MinAxisVal,double MaxAxisVal);


// Function  Engine.KismetMathLibrary.ClampAxis
// Offset::0x63FBC50;
float FKismetMathLibrary::ClampAxis(float Angle);


// Function  Engine.KismetMathLibrary.ClampInt64
// Offset::0x6413C30;
int64_t FKismetMathLibrary::ClampInt64(int64_t Value,int64_t Min,int64_t Max);


// Function  Engine.KismetMathLibrary.ClampVectorSize
// Offset::0x64089B0;
FVector FKismetMathLibrary::ClampVectorSize(FVector A,double Min,double Max);


// Function  Engine.KismetMathLibrary.ClassIsChildOf
// Offset::0x63E9030;
bool FKismetMathLibrary::ClassIsChildOf(FObject* TestClass,FObject* ParentClass);


// Function  Engine.KismetMathLibrary.ComposeRotators
// Offset::0x63FCA90;
FRotator FKismetMathLibrary::ComposeRotators(FRotator A,FRotator B);


// Function  Engine.KismetMathLibrary.ComposeTransforms
// Offset::0x63E7A90;
FTransform FKismetMathLibrary::ComposeTransforms(FTransform A,FTransform B);


// Function  Engine.KismetMathLibrary.Conv_BoolToByte
// Offset::0x63EAA30;
char FKismetMathLibrary::Conv_BoolToByte(bool InBool);


// Function  Engine.KismetMathLibrary.Conv_BoolToFloat
// Offset::0x63EAAC0;
float FKismetMathLibrary::Conv_BoolToFloat(bool InBool);


// Function  Engine.KismetMathLibrary.Conv_BoolToInt
// Offset::0x63EAB80;
int32_t FKismetMathLibrary::Conv_BoolToInt(bool InBool);


// Function  Engine.KismetMathLibrary.Conv_ByteToDouble
// Offset::0x63EB450;
double FKismetMathLibrary::Conv_ByteToDouble(char InByte);


// Function  Engine.KismetMathLibrary.Conv_ByteToFloat
// Offset::0x63EB4F0;
float FKismetMathLibrary::Conv_ByteToFloat(char InByte);


// Function  Engine.KismetMathLibrary.Conv_ByteToInt
// Offset::0x63EA9A0;
int32_t FKismetMathLibrary::Conv_ByteToInt(char InByte);


// Function  Engine.KismetMathLibrary.Conv_ByteToInt64
// Offset::0x63EA910;
int64_t FKismetMathLibrary::Conv_ByteToInt64(char InByte);


// Function  Engine.KismetMathLibrary.Conv_ColorToLinearColor
// Offset::0x63EA830;
FLinearColor FKismetMathLibrary::Conv_ColorToLinearColor(FColor InColor);


// Function  Engine.KismetMathLibrary.Conv_DoubleToFloat
// Offset::0x63EB0C0;
float FKismetMathLibrary::Conv_DoubleToFloat(double InDouble);


// Function  Engine.KismetMathLibrary.Conv_DoubleToInt64
// Offset::0x63EAED0;
int64_t FKismetMathLibrary::Conv_DoubleToInt64(double InDouble);


// Function  Engine.KismetMathLibrary.Conv_DoubleToLinearColor
// Offset::0x63F1410;
FLinearColor FKismetMathLibrary::Conv_DoubleToLinearColor(double InDouble);


// Function  Engine.KismetMathLibrary.Conv_DoubleToVector
// Offset::0x63EA5E0;
FVector FKismetMathLibrary::Conv_DoubleToVector(double InDouble);


// Function  Engine.KismetMathLibrary.Conv_FloatToDouble
// Offset::0x63EB010;
double FKismetMathLibrary::Conv_FloatToDouble(float InFloat);


// Function  Engine.KismetMathLibrary.Conv_FloatToLinearColor
// Offset::0x63F14E0;
FLinearColor FKismetMathLibrary::Conv_FloatToLinearColor(float InFloat);


// Function  Engine.KismetMathLibrary.Conv_FloatToVector
// Offset::0x63EA6A0;
FVector FKismetMathLibrary::Conv_FloatToVector(float InFloat);


// Function  Engine.KismetMathLibrary.Conv_Int64ToByte
// Offset::0x63EAF80;
char FKismetMathLibrary::Conv_Int64ToByte(int64_t inInt);


// Function  Engine.KismetMathLibrary.Conv_Int64ToDouble
// Offset::0x63EAE30;
double FKismetMathLibrary::Conv_Int64ToDouble(int64_t inInt);


// Function  Engine.KismetMathLibrary.Conv_Int64ToInt
// Offset::0x63EB170;
int32_t FKismetMathLibrary::Conv_Int64ToInt(int64_t inInt);


// Function  Engine.KismetMathLibrary.Conv_IntPointToVector2D
// Offset::0x640F040;
FVector2D FKismetMathLibrary::Conv_IntPointToVector2D(FIntPoint InIntPoint);


// Function  Engine.KismetMathLibrary.Conv_IntToBool
// Offset::0x63EAC20;
bool FKismetMathLibrary::Conv_IntToBool(int32_t inInt);


// Function  Engine.KismetMathLibrary.Conv_IntToByte
// Offset::0x63EB200;
char FKismetMathLibrary::Conv_IntToByte(int32_t inInt);


// Function  Engine.KismetMathLibrary.Conv_IntToDouble
// Offset::0x63EB330;
double FKismetMathLibrary::Conv_IntToDouble(int32_t inInt);


// Function  Engine.KismetMathLibrary.Conv_IntToFloat
// Offset::0x63EB3C0;
float FKismetMathLibrary::Conv_IntToFloat(int32_t inInt);


// Function  Engine.KismetMathLibrary.Conv_IntToInt64
// Offset::0x63EB290;
int64_t FKismetMathLibrary::Conv_IntToInt64(int32_t inInt);


// Function  Engine.KismetMathLibrary.Conv_IntToIntVector
// Offset::0x63EAD80;
FIntVector FKismetMathLibrary::Conv_IntToIntVector(int32_t inInt);


// Function  Engine.KismetMathLibrary.Conv_IntToVector
// Offset::0x63EACC0;
FVector FKismetMathLibrary::Conv_IntToVector(int32_t inInt);


// Function  Engine.KismetMathLibrary.Conv_IntVectorToVector
// Offset::0x63EA760;
FVector FKismetMathLibrary::Conv_IntVectorToVector(FIntVector InIntVector);


// Function  Engine.KismetMathLibrary.Conv_LinearColorToColor
// Offset::0x63F08D0;
FColor FKismetMathLibrary::Conv_LinearColorToColor(FLinearColor InLinearColor,bool InUseSRGB);


// Function  Engine.KismetMathLibrary.Conv_LinearColorToVector
// Offset::0x63F0AC0;
FVector FKismetMathLibrary::Conv_LinearColorToVector(FLinearColor InLinearColor);


// Function  Engine.KismetMathLibrary.Conv_MatrixToRotator
// Offset::0x63F6FA0;
FRotator FKismetMathLibrary::Conv_MatrixToRotator(FMatrix InMatrix);


// Function  Engine.KismetMathLibrary.Conv_MatrixToTransform
// Offset::0x63FBAA0;
FTransform FKismetMathLibrary::Conv_MatrixToTransform(FMatrix InMatrix);


// Function  Engine.KismetMathLibrary.Conv_RotatorToQuaternion
// Offset::0x63F2CD0;
FQuat FKismetMathLibrary::Conv_RotatorToQuaternion(FRotator InRot);


// Function  Engine.KismetMathLibrary.Conv_RotatorToTransform
// Offset::0x63FC570;
FTransform FKismetMathLibrary::Conv_RotatorToTransform(FRotator InRotator);


// Function  Engine.KismetMathLibrary.Conv_RotatorToVector
// Offset::0x63FC6B0;
FVector FKismetMathLibrary::Conv_RotatorToVector(FRotator InRot);


// Function  Engine.KismetMathLibrary.Conv_TransformToMatrix
// Offset::0x21D6680;
FMatrix FKismetMathLibrary::Conv_TransformToMatrix(FTransform Transform);


// Function  Engine.KismetMathLibrary.Conv_Vector2DToIntPoint
// Offset::0x640E090;
FIntPoint FKismetMathLibrary::Conv_Vector2DToIntPoint(FVector2D InVector2D);


// Function  Engine.KismetMathLibrary.Conv_Vector2DToVector
// Offset::0x640E190;
FVector FKismetMathLibrary::Conv_Vector2DToVector(FVector2D InVector2D,float Z);


// Function  Engine.KismetMathLibrary.Conv_Vector4ToQuaternion
// Offset::0x6401C30;
FQuat FKismetMathLibrary::Conv_Vector4ToQuaternion(FVector4 InVec);


// Function  Engine.KismetMathLibrary.Conv_Vector4ToRotator
// Offset::0x6401D20;
FRotator FKismetMathLibrary::Conv_Vector4ToRotator(FVector4 InVec);


// Function  Engine.KismetMathLibrary.Conv_Vector4ToVector
// Offset::0x6401E10;
FVector FKismetMathLibrary::Conv_Vector4ToVector(FVector4 InVector4);


// Function  Engine.KismetMathLibrary.Conv_VectorToLinearColor
// Offset::0x640AC80;
FLinearColor FKismetMathLibrary::Conv_VectorToLinearColor(FVector InVec);


// Function  Engine.KismetMathLibrary.Conv_VectorToQuaternion
// Offset::0x640A870;
FQuat FKismetMathLibrary::Conv_VectorToQuaternion(FVector InVec);


// Function  Engine.KismetMathLibrary.Conv_VectorToRotator
// Offset::0x640AA30;
FRotator FKismetMathLibrary::Conv_VectorToRotator(FVector InVec);


// Function  Engine.KismetMathLibrary.Conv_VectorToTransform
// Offset::0x640AB80;
FTransform FKismetMathLibrary::Conv_VectorToTransform(FVector InLocation);


// Function  Engine.KismetMathLibrary.Conv_VectorToVector2D
// Offset::0x640AAF0;
FVector2D FKismetMathLibrary::Conv_VectorToVector2D(FVector InVector);


// Function  Engine.KismetMathLibrary.ConvertTransformToRelative
// Offset::0x63E6590;
FTransform FKismetMathLibrary::ConvertTransformToRelative(FTransform Transform,FTransform ParentTransform);


// Function  Engine.KismetMathLibrary.Cos
// Offset::0x6412750;
double FKismetMathLibrary::Cos(double A);


// Function  Engine.KismetMathLibrary.CreateVectorFromYawPitch
// Offset::0x640B1C0;
FVector FKismetMathLibrary::CreateVectorFromYawPitch(float Yaw,float Pitch,float Length);


// Function  Engine.KismetMathLibrary.Cross_VectorVector
// Offset::0x6409290;
FVector FKismetMathLibrary::Cross_VectorVector(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.CrossProduct2D
// Offset::0x640CEB0;
double FKismetMathLibrary::CrossProduct2D(FVector2D A,FVector2D B);


// Function  Engine.KismetMathLibrary.DateTimeFromIsoString
// Offset::0x63EDE50;
bool FKismetMathLibrary::DateTimeFromIsoString(FString IsoString,FDateTime Result);


// Function  Engine.KismetMathLibrary.DateTimeFromString
// Offset::0x63EDCC0;
bool FKismetMathLibrary::DateTimeFromString(FString DateTimeString,FDateTime Result);


// Function  Engine.KismetMathLibrary.DateTimeMaxValue
// Offset::0x63EE160;
FDateTime FKismetMathLibrary::DateTimeMaxValue();


// Function  Engine.KismetMathLibrary.DateTimeMinValue
// Offset::0x63EDC60;
FDateTime FKismetMathLibrary::DateTimeMinValue();


// Function  Engine.KismetMathLibrary.DaysInMonth
// Offset::0x63EE2E0;
int32_t FKismetMathLibrary::DaysInMonth(int32_t Year,int32_t Month);


// Function  Engine.KismetMathLibrary.DaysInYear
// Offset::0x63EE230;
int32_t FKismetMathLibrary::DaysInYear(int32_t Year);


// Function  Engine.KismetMathLibrary.DegAcos
// Offset::0x64119A0;
double FKismetMathLibrary::DegAcos(double A);


// Function  Engine.KismetMathLibrary.DegAsin
// Offset::0x6411B60;
double FKismetMathLibrary::DegAsin(double A);


// Function  Engine.KismetMathLibrary.DegAtan
// Offset::0x6411830;
double FKismetMathLibrary::DegAtan(double A);


// Function  Engine.KismetMathLibrary.DegAtan2
// Offset::0x6411720;
double FKismetMathLibrary::DegAtan2(double Y,double X);


// Function  Engine.KismetMathLibrary.DegCos
// Offset::0x6411AB0;
double FKismetMathLibrary::DegCos(double A);


// Function  Engine.KismetMathLibrary.DegreesToRadians
// Offset::0x6411DD0;
double FKismetMathLibrary::DegreesToRadians(double A);


// Function  Engine.KismetMathLibrary.DegSin
// Offset::0x6411C70;
double FKismetMathLibrary::DegSin(double A);


// Function  Engine.KismetMathLibrary.DegTan
// Offset::0x64118F0;
double FKismetMathLibrary::DegTan(double A);


// Function  Engine.KismetMathLibrary.Distance2D
// Offset::0x640CDB0;
double FKismetMathLibrary::Distance2D(FVector2D v1,FVector2D v2);


// Function  Engine.KismetMathLibrary.DistanceSquared2D
// Offset::0x640CCD0;
double FKismetMathLibrary::DistanceSquared2D(FVector2D v1,FVector2D v2);


// Function  Engine.KismetMathLibrary.Divide_ByteByte
// Offset::0x64172E0;
char FKismetMathLibrary::Divide_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.Divide_DoubleDouble
// Offset::0x64134E0;
double FKismetMathLibrary::Divide_DoubleDouble(double A,double B);


// Function  Engine.KismetMathLibrary.Divide_Int64Int64
// Offset::0x6414F70;
int64_t FKismetMathLibrary::Divide_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.Divide_IntInt
// Offset::0x6416680;
int32_t FKismetMathLibrary::Divide_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.Divide_IntPointInt
// Offset::0x640E730;
FIntPoint FKismetMathLibrary::Divide_IntPointInt(FIntPoint A,int32_t B);


// Function  Engine.KismetMathLibrary.Divide_IntPointIntPoint
// Offset::0x640E880;
FIntPoint FKismetMathLibrary::Divide_IntPointIntPoint(FIntPoint A,FIntPoint B);


// Function  Engine.KismetMathLibrary.Divide_LinearColorLinearColor
// Offset::0x63EF4A0;
FLinearColor FKismetMathLibrary::Divide_LinearColorLinearColor(FLinearColor A,FLinearColor B);


// Function  Engine.KismetMathLibrary.Divide_TimespanFloat
// Offset::0x63ED000;
FTimespan FKismetMathLibrary::Divide_TimespanFloat(FTimespan A,float Scalar);


// Function  Engine.KismetMathLibrary.Divide_Vector2DFloat
// Offset::0x640D810;
FVector2D FKismetMathLibrary::Divide_Vector2DFloat(FVector2D A,double B);


// Function  Engine.KismetMathLibrary.Divide_Vector2DVector2D
// Offset::0x640D960;
FVector2D FKismetMathLibrary::Divide_Vector2DVector2D(FVector2D A,FVector2D B);


// Function  Engine.KismetMathLibrary.Divide_Vector4Vector4
// Offset::0x6401670;
FVector4 FKismetMathLibrary::Divide_Vector4Vector4(FVector4 A,FVector4 B);


// Function  Engine.KismetMathLibrary.Divide_VectorFloat
// Offset::0x6409C90;
FVector FKismetMathLibrary::Divide_VectorFloat(FVector A,double B);


// Function  Engine.KismetMathLibrary.Divide_VectorInt
// Offset::0x6409B10;
FVector FKismetMathLibrary::Divide_VectorInt(FVector A,int32_t B);


// Function  Engine.KismetMathLibrary.Divide_VectorVector
// Offset::0x6409E20;
FVector FKismetMathLibrary::Divide_VectorVector(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.Dot_VectorVector
// Offset::0x64093A0;
double FKismetMathLibrary::Dot_VectorVector(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.DotProduct2D
// Offset::0x640CBF0;
double FKismetMathLibrary::DotProduct2D(FVector2D A,FVector2D B);


// Function  Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float
// Offset::0x63E1B10;
float FKismetMathLibrary::DynamicWeightedMovingAverage_Float(float CurrentSample,float PreviousSample,float MaxDistance,float MinWeight,float MaxWeight);


// Function  Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator
// Offset::0x63E1670;
FRotator FKismetMathLibrary::DynamicWeightedMovingAverage_FRotator(FRotator CurrentSample,FRotator PreviousSample,float MaxDistance,float MinWeight,float MaxWeight);


// Function  Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector
// Offset::0x63E18C0;
FVector FKismetMathLibrary::DynamicWeightedMovingAverage_FVector(FVector CurrentSample,FVector PreviousSample,float MaxDistance,float MinWeight,float MaxWeight);


// Function  Engine.KismetMathLibrary.Ease
// Offset::0x64103F0;
double FKismetMathLibrary::Ease(double A,double B,double Alpha,enum class EEasingFunc EasingFunc,double BlendExp,int32_t Steps);


// Function  Engine.KismetMathLibrary.Equal_IntPointIntPoint
// Offset::0x640E660;
bool FKismetMathLibrary::Equal_IntPointIntPoint(FIntPoint A,FIntPoint B);


// Function  Engine.KismetMathLibrary.EqualEqual_BoolBool
// Offset::0x64179C0;
bool FKismetMathLibrary::EqualEqual_BoolBool(bool A,bool B);


// Function  Engine.KismetMathLibrary.EqualEqual_ByteByte
// Offset::0x6416970;
bool FKismetMathLibrary::EqualEqual_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.EqualEqual_ClassClass
// Offset::0x63E91F0;
bool FKismetMathLibrary::EqualEqual_ClassClass(FObject* A,FObject* B);


// Function  Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
// Offset::0x63ECF20;
bool FKismetMathLibrary::EqualEqual_DateTimeDateTime(FDateTime A,FDateTime B);


// Function  Engine.KismetMathLibrary.EqualEqual_DoubleDouble
// Offset::0x6413020;
bool FKismetMathLibrary::EqualEqual_DoubleDouble(double A,double B);


// Function  Engine.KismetMathLibrary.EqualEqual_Int64Int64
// Offset::0x6414930;
bool FKismetMathLibrary::EqualEqual_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.EqualEqual_IntInt
// Offset::0x6415FB0;
bool FKismetMathLibrary::EqualEqual_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor
// Offset::0x63EFA80;
bool FKismetMathLibrary::EqualEqual_LinearColorLinearColor(FLinearColor A,FLinearColor B);


// Function  Engine.KismetMathLibrary.EqualEqual_MatrixMatrix
// Offset::0x63FB1C0;
bool FKismetMathLibrary::EqualEqual_MatrixMatrix(FMatrix A,FMatrix B,float Tolerance);


// Function  Engine.KismetMathLibrary.EqualEqual_NameName
// Offset::0x63E8F50;
bool FKismetMathLibrary::EqualEqual_NameName(FName A,FName B);


// Function  Engine.KismetMathLibrary.EqualEqual_ObjectObject
// Offset::0x63E91F0;
bool FKismetMathLibrary::EqualEqual_ObjectObject(FObject* A,FObject* B);


// Function  Engine.KismetMathLibrary.EqualEqual_QuatQuat
// Offset::0x63F5880;
bool FKismetMathLibrary::EqualEqual_QuatQuat(FQuat A,FQuat B,float Tolerance);


// Function  Engine.KismetMathLibrary.EqualEqual_RotatorRotator
// Offset::0x63FD1C0;
bool FKismetMathLibrary::EqualEqual_RotatorRotator(FRotator A,FRotator B,float ErrorTolerance);


// Function  Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
// Offset::0x63ECF20;
bool FKismetMathLibrary::EqualEqual_TimespanTimespan(FTimespan A,FTimespan B);


// Function  Engine.KismetMathLibrary.EqualEqual_TransformTransform
// Offset::0x63E8770;
bool FKismetMathLibrary::EqualEqual_TransformTransform(FTransform A,FTransform B);


// Function  Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
// Offset::0x640D5A0;
bool FKismetMathLibrary::EqualEqual_Vector2DVector2D(FVector2D A,FVector2D B,float ErrorTolerance);


// Function  Engine.KismetMathLibrary.EqualEqual_Vector4Vector4
// Offset::0x6401220;
bool FKismetMathLibrary::EqualEqual_Vector4Vector4(FVector4 A,FVector4 B,float ErrorTolerance);


// Function  Engine.KismetMathLibrary.EqualEqual_VectorVector
// Offset::0x6409790;
bool FKismetMathLibrary::EqualEqual_VectorVector(FVector A,FVector B,float ErrorTolerance);


// Function  Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D
// Offset::0x640D720;
bool FKismetMathLibrary::EqualExactly_Vector2DVector2D(FVector2D A,FVector2D B);


// Function  Engine.KismetMathLibrary.EqualExactly_Vector4Vector4
// Offset::0x64014C0;
bool FKismetMathLibrary::EqualExactly_Vector4Vector4(FVector4 A,FVector4 B);


// Function  Engine.KismetMathLibrary.EqualExactly_VectorVector
// Offset::0x6409950;
bool FKismetMathLibrary::EqualExactly_VectorVector(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.Exp
// Offset::0x64123B0;
double FKismetMathLibrary::Exp(double A);


// Function  Engine.KismetMathLibrary.FCeil
// Offset::0x6410150;
int32_t FKismetMathLibrary::FCeil(double A);


// Function  Engine.KismetMathLibrary.FCeil64
// Offset::0x640FF00;
int64_t FKismetMathLibrary::FCeil64(double A);


// Function  Engine.KismetMathLibrary.FClamp
// Offset::0x6411270;
double FKismetMathLibrary::FClamp(double Value,double Min,double Max);


// Function  Engine.KismetMathLibrary.FFloor
// Offset::0x6410290;
int32_t FKismetMathLibrary::FFloor(double A);


// Function  Engine.KismetMathLibrary.FFloor64
// Offset::0x640FFC0;
int64_t FKismetMathLibrary::FFloor64(double A);


// Function  Engine.KismetMathLibrary.FindClosestPointOnLine
// Offset::0x6402DE0;
FVector FKismetMathLibrary::FindClosestPointOnLine(FVector Point,FVector LineOrigin,FVector LineDirection);


// Function  Engine.KismetMathLibrary.FindClosestPointOnSegment
// Offset::0x6402F80;
FVector FKismetMathLibrary::FindClosestPointOnSegment(FVector Point,FVector SegmentStart,FVector SegmentEnd);


// Function  Engine.KismetMathLibrary.FindLookAtRotation
// Offset::0x63FDA60;
FRotator FKismetMathLibrary::FindLookAtRotation(FVector Start,FVector Target);


// Function  Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
// Offset::0x6403140;
void FKismetMathLibrary::FindNearestPointsOnLineSegments(FVector Segment1Start,FVector Segment1End,FVector Segment2Start,FVector Segment2End,FVector Segment1Point,FVector Segment2Point);


// Function  Engine.KismetMathLibrary.FindRelativeLookAtRotation
// Offset::0x63FD910;
FRotator FKismetMathLibrary::FindRelativeLookAtRotation(FTransform StartTransform,FVector TargetLocation);


// Function  Engine.KismetMathLibrary.FInterpEaseInOut
// Offset::0x640F4B0;
double FKismetMathLibrary::FInterpEaseInOut(double A,double B,double Alpha,double Exponent);


// Function  Engine.KismetMathLibrary.FInterpTo
// Offset::0x63E5470;
double FKismetMathLibrary::FInterpTo(double Current,double Target,double DeltaTime,double InterpSpeed);


// Function  Engine.KismetMathLibrary.FInterpTo_Constant
// Offset::0x63E52A0;
double FKismetMathLibrary::FInterpTo_Constant(double Current,double Target,double DeltaTime,double InterpSpeed);


// Function  Engine.KismetMathLibrary.FixedTurn
// Offset::0x640F240;
float FKismetMathLibrary::FixedTurn(float InCurrent,float InDesired,float InDeltaRate);


// Function  Engine.KismetMathLibrary.FloatSpringInterp
// Offset::0x63E49A0;
float FKismetMathLibrary::FloatSpringInterp(float Current,float Target,FFloatSpringState SpringState,float Stiffness,float CriticalDampingFactor,float DeltaTime,float Mass,float TargetVelocityAmount,bool bClamp,float MinValue,float MaxValue,bool bInitializeFromTarget);


// Function  Engine.KismetMathLibrary.FMax
// Offset::0x64113B0;
double FKismetMathLibrary::FMax(double A,double B);


// Function  Engine.KismetMathLibrary.FMin
// Offset::0x64114B0;
double FKismetMathLibrary::FMin(double A,double B);


// Function  Engine.KismetMathLibrary.FMod
// Offset::0x640FDC0;
int32_t FKismetMathLibrary::FMod(double Dividend,double Divisor,double Remainder);


// Function  Engine.KismetMathLibrary.FMod64
// Offset::0x640FC80;
int64_t FKismetMathLibrary::FMod64(double Dividend,double Divisor,double Remainder);


// Function  Engine.KismetMathLibrary.Fraction
// Offset::0x64138F0;
double FKismetMathLibrary::Fraction(double A);


// Function  Engine.KismetMathLibrary.FromDays
// Offset::0x63EC010;
FTimespan FKismetMathLibrary::FromDays(float Days);


// Function  Engine.KismetMathLibrary.FromHours
// Offset::0x63EBF70;
FTimespan FKismetMathLibrary::FromHours(float Hours);


// Function  Engine.KismetMathLibrary.FromMilliseconds
// Offset::0x63EBED0;
FTimespan FKismetMathLibrary::FromMilliseconds(float Milliseconds);


// Function  Engine.KismetMathLibrary.FromMinutes
// Offset::0x63EBE30;
FTimespan FKismetMathLibrary::FromMinutes(float Minutes);


// Function  Engine.KismetMathLibrary.FromSeconds
// Offset::0x63EBD90;
FTimespan FKismetMathLibrary::FromSeconds(float Seconds);


// Function  Engine.KismetMathLibrary.FTrunc
// Offset::0x6410200;
int32_t FKismetMathLibrary::FTrunc(double A);


// Function  Engine.KismetMathLibrary.FTrunc64
// Offset::0x63EAED0;
int64_t FKismetMathLibrary::FTrunc64(double A);


// Function  Engine.KismetMathLibrary.FTruncVector
// Offset::0x6406BE0;
FIntVector FKismetMathLibrary::FTruncVector(FVector InVector);


// Function  Engine.KismetMathLibrary.FWrap
// Offset::0x64110F0;
double FKismetMathLibrary::FWrap(double Value,double Min,double Max);


// Function  Engine.KismetMathLibrary.GetAbs2D
// Offset::0x640CB40;
FVector2D FKismetMathLibrary::GetAbs2D(FVector2D A);


// Function  Engine.KismetMathLibrary.GetAbsMax2D
// Offset::0x640CA90;
double FKismetMathLibrary::GetAbsMax2D(FVector2D A);


// Function  Engine.KismetMathLibrary.GetAxes
// Offset::0x63FC3C0;
void FKismetMathLibrary::GetAxes(FRotator A,FVector X,FVector Y,FVector Z);


// Function  Engine.KismetMathLibrary.GetAzimuthAndElevation
// Offset::0x6406D80;
void FKismetMathLibrary::GetAzimuthAndElevation(FVector InDirection,FTransform ReferenceFrame,float Azimuth,float Elevation);


// Function  Engine.KismetMathLibrary.GetDate
// Offset::0x63EECD0;
FDateTime FKismetMathLibrary::GetDate(FDateTime A);


// Function  Engine.KismetMathLibrary.GetDay
// Offset::0x63EEBF0;
int32_t FKismetMathLibrary::GetDay(FDateTime A);


// Function  Engine.KismetMathLibrary.GetDayOfYear
// Offset::0x63EEB10;
int32_t FKismetMathLibrary::GetDayOfYear(FDateTime A);


// Function  Engine.KismetMathLibrary.GetDays
// Offset::0x63EC9A0;
int32_t FKismetMathLibrary::GetDays(FTimespan A);


// Function  Engine.KismetMathLibrary.GetDirectionUnitVector
// Offset::0x64070D0;
FVector FKismetMathLibrary::GetDirectionUnitVector(FVector From,FVector To);


// Function  Engine.KismetMathLibrary.GetDuration
// Offset::0x63EC8E0;
FTimespan FKismetMathLibrary::GetDuration(FTimespan A);


// Function  Engine.KismetMathLibrary.GetForwardVector
// Offset::0x63FC8F0;
FVector FKismetMathLibrary::GetForwardVector(FRotator InRot);


// Function  Engine.KismetMathLibrary.GetHour
// Offset::0x63EC7D0;
int32_t FKismetMathLibrary::GetHour(FDateTime A);


// Function  Engine.KismetMathLibrary.GetHour12
// Offset::0x63EEA30;
int32_t FKismetMathLibrary::GetHour12(FDateTime A);


// Function  Engine.KismetMathLibrary.GetHours
// Offset::0x63EC7D0;
int32_t FKismetMathLibrary::GetHours(FTimespan A);


// Function  Engine.KismetMathLibrary.GetMax2D
// Offset::0x640C9E0;
double FKismetMathLibrary::GetMax2D(FVector2D A);


// Function  Engine.KismetMathLibrary.GetMaxElement
// Offset::0x6408180;
double FKismetMathLibrary::GetMaxElement(FVector A);


// Function  Engine.KismetMathLibrary.GetMillisecond
// Offset::0x63EE910;
int32_t FKismetMathLibrary::GetMillisecond(FDateTime A);


// Function  Engine.KismetMathLibrary.GetMilliseconds
// Offset::0x63EC6C0;
int32_t FKismetMathLibrary::GetMilliseconds(FTimespan A);


// Function  Engine.KismetMathLibrary.GetMin2D
// Offset::0x640C930;
double FKismetMathLibrary::GetMin2D(FVector2D A);


// Function  Engine.KismetMathLibrary.GetMinElement
// Offset::0x6408250;
double FKismetMathLibrary::GetMinElement(FVector A);


// Function  Engine.KismetMathLibrary.GetMinute
// Offset::0x63EC5A0;
int32_t FKismetMathLibrary::GetMinute(FDateTime A);


// Function  Engine.KismetMathLibrary.GetMinutes
// Offset::0x63EC5A0;
int32_t FKismetMathLibrary::GetMinutes(FTimespan A);


// Function  Engine.KismetMathLibrary.GetMonth
// Offset::0x63EE830;
int32_t FKismetMathLibrary::GetMonth(FDateTime A);


// Function  Engine.KismetMathLibrary.GetPI
// Offset::0x6411EB0;
double FKismetMathLibrary::GetPI();


// Function  Engine.KismetMathLibrary.GetPointDistanceToLine
// Offset::0x6402AC0;
float FKismetMathLibrary::GetPointDistanceToLine(FVector Point,FVector LineOrigin,FVector LineDirection);


// Function  Engine.KismetMathLibrary.GetPointDistanceToSegment
// Offset::0x6402C50;
float FKismetMathLibrary::GetPointDistanceToSegment(FVector Point,FVector SegmentStart,FVector SegmentEnd);


// Function  Engine.KismetMathLibrary.GetReflectionVector
// Offset::0x64043F0;
FVector FKismetMathLibrary::GetReflectionVector(FVector Direction,FVector SurfaceNormal);


// Function  Engine.KismetMathLibrary.GetRightVector
// Offset::0x63FC830;
FVector FKismetMathLibrary::GetRightVector(FRotator InRot);


// Function  Engine.KismetMathLibrary.GetRotated2D
// Offset::0x640C750;
FVector2D FKismetMathLibrary::GetRotated2D(FVector2D A,float AngleDeg);


// Function  Engine.KismetMathLibrary.GetSecond
// Offset::0x63EC470;
int32_t FKismetMathLibrary::GetSecond(FDateTime A);


// Function  Engine.KismetMathLibrary.GetSeconds
// Offset::0x63EC470;
int32_t FKismetMathLibrary::GetSeconds(FTimespan A);


// Function  Engine.KismetMathLibrary.GetSlopeDegreeAngles
// Offset::0x63E25C0;
void FKismetMathLibrary::GetSlopeDegreeAngles(FVector MyRightYAxis,FVector FloorNormal,FVector UpVector,float OutSlopePitchDegreeAngle,float OutSlopeRollDegreeAngle);


// Function  Engine.KismetMathLibrary.GetTAU
// Offset::0x6411E80;
double FKismetMathLibrary::GetTAU();


// Function  Engine.KismetMathLibrary.GetTimeOfDay
// Offset::0x63EE720;
FTimespan FKismetMathLibrary::GetTimeOfDay(FDateTime A);


// Function  Engine.KismetMathLibrary.GetTotalDays
// Offset::0x63EC3B0;
float FKismetMathLibrary::GetTotalDays(FTimespan A);


// Function  Engine.KismetMathLibrary.GetTotalHours
// Offset::0x63EC2F0;
float FKismetMathLibrary::GetTotalHours(FTimespan A);


// Function  Engine.KismetMathLibrary.GetTotalMilliseconds
// Offset::0x63EC230;
float FKismetMathLibrary::GetTotalMilliseconds(FTimespan A);


// Function  Engine.KismetMathLibrary.GetTotalMinutes
// Offset::0x63EC170;
float FKismetMathLibrary::GetTotalMinutes(FTimespan A);


// Function  Engine.KismetMathLibrary.GetTotalSeconds
// Offset::0x63EC0B0;
float FKismetMathLibrary::GetTotalSeconds(FTimespan A);


// Function  Engine.KismetMathLibrary.GetUpVector
// Offset::0x63FC770;
FVector FKismetMathLibrary::GetUpVector(FRotator InRot);


// Function  Engine.KismetMathLibrary.GetVectorArrayAverage
// Offset::0x6406CB0;
FVector FKismetMathLibrary::GetVectorArrayAverage(TArray<FVector> Vectors);


// Function  Engine.KismetMathLibrary.GetYawPitchFromVector
// Offset::0x6406F80;
void FKismetMathLibrary::GetYawPitchFromVector(FVector InVec,float Yaw,float Pitch);


// Function  Engine.KismetMathLibrary.GetYear
// Offset::0x63EE640;
int32_t FKismetMathLibrary::GetYear(FDateTime A);


// Function  Engine.KismetMathLibrary.Greater_ByteByte
// Offset::0x6416C40;
bool FKismetMathLibrary::Greater_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.Greater_DateTimeDateTime
// Offset::0x63ECD50;
bool FKismetMathLibrary::Greater_DateTimeDateTime(FDateTime A,FDateTime B);


// Function  Engine.KismetMathLibrary.Greater_DoubleDouble
// Offset::0x6413300;
bool FKismetMathLibrary::Greater_DoubleDouble(double A,double B);


// Function  Engine.KismetMathLibrary.Greater_Int64Int64
// Offset::0x6414BD0;
bool FKismetMathLibrary::Greater_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.Greater_IntInt
// Offset::0x25DDA20;
bool FKismetMathLibrary::Greater_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.Greater_TimespanTimespan
// Offset::0x63ECD50;
bool FKismetMathLibrary::Greater_TimespanTimespan(FTimespan A,FTimespan B);


// Function  Engine.KismetMathLibrary.GreaterEqual_ByteByte
// Offset::0x6416A60;
bool FKismetMathLibrary::GreaterEqual_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
// Offset::0x63ECC60;
bool FKismetMathLibrary::GreaterEqual_DateTimeDateTime(FDateTime A,FDateTime B);


// Function  Engine.KismetMathLibrary.GreaterEqual_DoubleDouble
// Offset::0x6413120;
bool FKismetMathLibrary::GreaterEqual_DoubleDouble(double A,double B);


// Function  Engine.KismetMathLibrary.GreaterEqual_Int64Int64
// Offset::0x6414A10;
bool FKismetMathLibrary::GreaterEqual_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.GreaterEqual_IntInt
// Offset::0x64160A0;
bool FKismetMathLibrary::GreaterEqual_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
// Offset::0x63ECC60;
bool FKismetMathLibrary::GreaterEqual_TimespanTimespan(FTimespan A,FTimespan B);


// Function  Engine.KismetMathLibrary.GreaterGreater_VectorRotator
// Offset::0x6409130;
FVector FKismetMathLibrary::GreaterGreater_VectorRotator(FVector A,FRotator B);


// Function  Engine.KismetMathLibrary.GridSnap_Float
// Offset::0x64129F0;
double FKismetMathLibrary::GridSnap_Float(double Location,double GridSize);


// Function  Engine.KismetMathLibrary.HSVToRGB
// Offset::0x63F1210;
FLinearColor FKismetMathLibrary::HSVToRGB(float H,float S,float V,float A);


// Function  Engine.KismetMathLibrary.HSVToRGB_Vector
// Offset::0x63F10E0;
void FKismetMathLibrary::HSVToRGB_Vector(FLinearColor HSV,FLinearColor RGB);


// Function  Engine.KismetMathLibrary.HSVToRGBLinear
// Offset::0x63F1020;
FLinearColor FKismetMathLibrary::HSVToRGBLinear(FLinearColor HSV);


// Function  Engine.KismetMathLibrary.Hypotenuse
// Offset::0x6412B10;
double FKismetMathLibrary::Hypotenuse(double Width,double Height);


// Function  Engine.KismetMathLibrary.InRange_FloatFloat
// Offset::0x6412C00;
bool FKismetMathLibrary::InRange_FloatFloat(double Value,double Min,double Max,bool InclusiveMin,bool InclusiveMax);


// Function  Engine.KismetMathLibrary.InRange_Int64Int64
// Offset::0x6414680;
bool FKismetMathLibrary::InRange_Int64Int64(int64_t Value,int64_t Min,int64_t Max,bool InclusiveMin,bool InclusiveMax);


// Function  Engine.KismetMathLibrary.InRange_IntInt
// Offset::0x6415CF0;
bool FKismetMathLibrary::InRange_IntInt(int32_t Value,int32_t Min,int32_t Max,bool InclusiveMin,bool InclusiveMax);


// Function  Engine.KismetMathLibrary.IntPoint_Down
// Offset::0x640F100;
FIntPoint FKismetMathLibrary::IntPoint_Down();


// Function  Engine.KismetMathLibrary.IntPoint_Left
// Offset::0x640F170;
FIntPoint FKismetMathLibrary::IntPoint_Left();


// Function  Engine.KismetMathLibrary.IntPoint_One
// Offset::0x640F1E0;
FIntPoint FKismetMathLibrary::IntPoint_One();


// Function  Engine.KismetMathLibrary.IntPoint_Right
// Offset::0x640F140;
FIntPoint FKismetMathLibrary::IntPoint_Right();


// Function  Engine.KismetMathLibrary.IntPoint_Up
// Offset::0x640F1A0;
FIntPoint FKismetMathLibrary::IntPoint_Up();


// Function  Engine.KismetMathLibrary.IntPoint_Zero
// Offset::0x640F220;
FIntPoint FKismetMathLibrary::IntPoint_Zero();


// Function  Engine.KismetMathLibrary.InverseTransformDirection
// Offset::0x63E6B20;
FVector FKismetMathLibrary::InverseTransformDirection(FTransform T,FVector Direction);


// Function  Engine.KismetMathLibrary.InverseTransformLocation
// Offset::0x63E6E70;
FVector FKismetMathLibrary::InverseTransformLocation(FTransform T,FVector Location);


// Function  Engine.KismetMathLibrary.InverseTransformRotation
// Offset::0x63E69C0;
FRotator FKismetMathLibrary::InverseTransformRotation(FTransform T,FRotator Rotation);


// Function  Engine.KismetMathLibrary.InvertTransform
// Offset::0x63E5FD0;
FTransform FKismetMathLibrary::InvertTransform(FTransform T);


// Function  Engine.KismetMathLibrary.IsAfternoon
// Offset::0x63EE520;
bool FKismetMathLibrary::IsAfternoon(FDateTime A);


// Function  Engine.KismetMathLibrary.IsLeapYear
// Offset::0x63EE180;
bool FKismetMathLibrary::IsLeapYear(int32_t Year);


// Function  Engine.KismetMathLibrary.IsMorning
// Offset::0x63EE400;
bool FKismetMathLibrary::IsMorning(FDateTime A);


// Function  Engine.KismetMathLibrary.IsNearlyZero2D
// Offset::0x640C5F0;
bool FKismetMathLibrary::IsNearlyZero2D(FVector2D A,float Tolerance);


// Function  Engine.KismetMathLibrary.IsPointInBox
// Offset::0x63E2970;
bool FKismetMathLibrary::IsPointInBox(FVector Point,FVector BoxOrigin,FVector BoxExtent);


// Function  Engine.KismetMathLibrary.IsPointInBoxWithTransform
// Offset::0x63E27C0;
bool FKismetMathLibrary::IsPointInBoxWithTransform(FVector Point,FTransform BoxWorldTransform,FVector BoxExtent);


// Function  Engine.KismetMathLibrary.IsZero2D
// Offset::0x640C500;
bool FKismetMathLibrary::IsZero2D(FVector2D A);


// Function  Engine.KismetMathLibrary.Lerp
// Offset::0x6410610;
double FKismetMathLibrary::Lerp(double A,double B,double Alpha);


// Function  Engine.KismetMathLibrary.Less_ByteByte
// Offset::0x6416D30;
bool FKismetMathLibrary::Less_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.Less_DateTimeDateTime
// Offset::0x63ECB70;
bool FKismetMathLibrary::Less_DateTimeDateTime(FDateTime A,FDateTime B);


// Function  Engine.KismetMathLibrary.Less_DoubleDouble
// Offset::0x64133F0;
bool FKismetMathLibrary::Less_DoubleDouble(double A,double B);


// Function  Engine.KismetMathLibrary.Less_Int64Int64
// Offset::0x6414CB0;
bool FKismetMathLibrary::Less_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.Less_IntInt
// Offset::0x6416290;
bool FKismetMathLibrary::Less_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.Less_TimespanTimespan
// Offset::0x63ECB70;
bool FKismetMathLibrary::Less_TimespanTimespan(FTimespan A,FTimespan B);


// Function  Engine.KismetMathLibrary.LessEqual_ByteByte
// Offset::0x6416B50;
bool FKismetMathLibrary::LessEqual_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
// Offset::0x63ECA80;
bool FKismetMathLibrary::LessEqual_DateTimeDateTime(FDateTime A,FDateTime B);


// Function  Engine.KismetMathLibrary.LessEqual_DoubleDouble
// Offset::0x6413210;
bool FKismetMathLibrary::LessEqual_DoubleDouble(double A,double B);


// Function  Engine.KismetMathLibrary.LessEqual_Int64Int64
// Offset::0x6414AF0;
bool FKismetMathLibrary::LessEqual_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.LessEqual_IntInt
// Offset::0x6416190;
bool FKismetMathLibrary::LessEqual_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.LessEqual_TimespanTimespan
// Offset::0x63ECA80;
bool FKismetMathLibrary::LessEqual_TimespanTimespan(FTimespan A,FTimespan B);


// Function  Engine.KismetMathLibrary.LessLess_VectorRotator
// Offset::0x6408E50;
FVector FKismetMathLibrary::LessLess_VectorRotator(FVector A,FRotator B);


// Function  Engine.KismetMathLibrary.LinearColor_Black
// Offset::0x63F2440;
FLinearColor FKismetMathLibrary::LinearColor_Black();


// Function  Engine.KismetMathLibrary.LinearColor_Blue
// Offset::0x63F23B0;
FLinearColor FKismetMathLibrary::LinearColor_Blue();


// Function  Engine.KismetMathLibrary.LinearColor_Desaturated
// Offset::0x63F0640;
FLinearColor FKismetMathLibrary::LinearColor_Desaturated(FLinearColor InColor,float InDesaturation);


// Function  Engine.KismetMathLibrary.LinearColor_Distance
// Offset::0x63F04E0;
float FKismetMathLibrary::LinearColor_Distance(FLinearColor C1,FLinearColor C2);


// Function  Engine.KismetMathLibrary.LinearColor_GetLuminance
// Offset::0x63F0320;
float FKismetMathLibrary::LinearColor_GetLuminance(FLinearColor InColor);


// Function  Engine.KismetMathLibrary.LinearColor_GetMax
// Offset::0x63F0240;
float FKismetMathLibrary::LinearColor_GetMax(FLinearColor InColor);


// Function  Engine.KismetMathLibrary.LinearColor_GetMin
// Offset::0x63F0160;
float FKismetMathLibrary::LinearColor_GetMin(FLinearColor InColor);


// Function  Engine.KismetMathLibrary.LinearColor_Gray
// Offset::0x63F2470;
FLinearColor FKismetMathLibrary::LinearColor_Gray();


// Function  Engine.KismetMathLibrary.LinearColor_Green
// Offset::0x63F23E0;
FLinearColor FKismetMathLibrary::LinearColor_Green();


// Function  Engine.KismetMathLibrary.LinearColor_IsNearEqual
// Offset::0x63EFB60;
bool FKismetMathLibrary::LinearColor_IsNearEqual(FLinearColor A,FLinearColor B,float Tolerance);


// Function  Engine.KismetMathLibrary.LinearColor_Quantize
// Offset::0x63F0810;
FColor FKismetMathLibrary::LinearColor_Quantize(FLinearColor InColor);


// Function  Engine.KismetMathLibrary.LinearColor_QuantizeRound
// Offset::0x63F0750;
FColor FKismetMathLibrary::LinearColor_QuantizeRound(FLinearColor InColor);


// Function  Engine.KismetMathLibrary.LinearColor_Red
// Offset::0x63F2410;
FLinearColor FKismetMathLibrary::LinearColor_Red();


// Function  Engine.KismetMathLibrary.LinearColor_Set
// Offset::0x63F1E70;
void FKismetMathLibrary::LinearColor_Set(FLinearColor InOutColor,FLinearColor InColor);


// Function  Engine.KismetMathLibrary.LinearColor_SetFromHSV
// Offset::0x63F1A30;
void FKismetMathLibrary::LinearColor_SetFromHSV(FLinearColor InOutColor,float H,float S,float V,float A);


// Function  Engine.KismetMathLibrary.LinearColor_SetFromPow22
// Offset::0x63F17B0;
void FKismetMathLibrary::LinearColor_SetFromPow22(FLinearColor InOutColor,FColor InColor);


// Function  Engine.KismetMathLibrary.LinearColor_SetFromSRGB
// Offset::0x63F18F0;
void FKismetMathLibrary::LinearColor_SetFromSRGB(FLinearColor InOutColor,FColor InSRGB);


// Function  Engine.KismetMathLibrary.LinearColor_SetRandomHue
// Offset::0x63F15A0;
void FKismetMathLibrary::LinearColor_SetRandomHue(FLinearColor InOutColor);


// Function  Engine.KismetMathLibrary.LinearColor_SetRGBA
// Offset::0x63F1C90;
void FKismetMathLibrary::LinearColor_SetRGBA(FLinearColor InOutColor,float R,float G,float B,float A);


// Function  Engine.KismetMathLibrary.LinearColor_SetTemperature
// Offset::0x63F1680;
void FKismetMathLibrary::LinearColor_SetTemperature(FLinearColor InOutColor,float InTemperature);


// Function  Engine.KismetMathLibrary.LinearColor_ToNewOpacity
// Offset::0x63F03E0;
FLinearColor FKismetMathLibrary::LinearColor_ToNewOpacity(FLinearColor InColor,float InOpacity);


// Function  Engine.KismetMathLibrary.LinearColor_ToRGBE
// Offset::0x63F0A00;
FColor FKismetMathLibrary::LinearColor_ToRGBE(FLinearColor InLinearColor);


// Function  Engine.KismetMathLibrary.LinearColor_Transparent
// Offset::0x63F2350;
FLinearColor FKismetMathLibrary::LinearColor_Transparent();


// Function  Engine.KismetMathLibrary.LinearColor_White
// Offset::0x63F24A0;
FLinearColor FKismetMathLibrary::LinearColor_White();


// Function  Engine.KismetMathLibrary.LinearColor_Yellow
// Offset::0x63F2380;
FLinearColor FKismetMathLibrary::LinearColor_Yellow();


// Function  Engine.KismetMathLibrary.LinearColorLerp
// Offset::0x63EFE40;
FLinearColor FKismetMathLibrary::LinearColorLerp(FLinearColor A,FLinearColor B,float Alpha);


// Function  Engine.KismetMathLibrary.LinearColorLerpUsingHSV
// Offset::0x63EFCD0;
FLinearColor FKismetMathLibrary::LinearColorLerpUsingHSV(FLinearColor A,FLinearColor B,float Alpha);


// Function  Engine.KismetMathLibrary.LinePlaneIntersection
// Offset::0x63E23B0;
bool FKismetMathLibrary::LinePlaneIntersection(FVector LineStart,FVector LineEnd,FPlane APlane,float T,FVector Intersection);


// Function  Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
// Offset::0x63E2110;
bool FKismetMathLibrary::LinePlaneIntersection_OriginNormal(FVector LineStart,FVector LineEnd,FVector PlaneOrigin,FVector PlaneNormal,float T,FVector Intersection);


// Function  Engine.KismetMathLibrary.Log
// Offset::0x64122C0;
double FKismetMathLibrary::Log(double A,double Base);


// Function  Engine.KismetMathLibrary.Loge
// Offset::0x6412220;
double FKismetMathLibrary::Loge(double A);


// Function  Engine.KismetMathLibrary.MakeBox
// Offset::0x63EA490;
FBox FKismetMathLibrary::MakeBox(FVector Min,FVector Max);


// Function  Engine.KismetMathLibrary.MakeBox2D
// Offset::0x63EA390;
FBox2D FKismetMathLibrary::MakeBox2D(FVector2D Min,FVector2D Max);


// Function  Engine.KismetMathLibrary.MakeBoxSphereBounds
// Offset::0x63EA1F0;
FBoxSphereBounds FKismetMathLibrary::MakeBoxSphereBounds(FVector Origin,FVector BoxExtent,float SphereRadius);


// Function  Engine.KismetMathLibrary.MakeColor
// Offset::0x63F21C0;
FLinearColor FKismetMathLibrary::MakeColor(float R,float G,float B,float A);


// Function  Engine.KismetMathLibrary.MakeDateTime
// Offset::0x63EF100;
FDateTime FKismetMathLibrary::MakeDateTime(int32_t Year,int32_t Month,int32_t Day,int32_t Hour,int32_t Minute,int32_t Second,int32_t Millisecond);


// Function  Engine.KismetMathLibrary.MakeFrameRate
// Offset::0x63EB6F0;
FFrameRate FKismetMathLibrary::MakeFrameRate(int32_t Numerator,int32_t Denominator);


// Function  Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
// Offset::0x63EF370;
FPlane FKismetMathLibrary::MakePlaneFromPointAndNormal(FVector Point,FVector Normal);


// Function  Engine.KismetMathLibrary.MakePulsatingValue
// Offset::0x640F380;
float FKismetMathLibrary::MakePulsatingValue(float InCurrentTime,float InPulsesPerSecond,float InPhase);


// Function  Engine.KismetMathLibrary.MakeQualifiedFrameTime
// Offset::0x63EB9A0;
FQualifiedFrameTime FKismetMathLibrary::MakeQualifiedFrameTime(FFrameNumber Frame,FFrameRate FrameRate,float SubFrame);


// Function  Engine.KismetMathLibrary.MakeQuat
// Offset::0x63F5180;
FQuat FKismetMathLibrary::MakeQuat(float X,float Y,float Z,float W);


// Function  Engine.KismetMathLibrary.MakeRandomStream
// Offset::0x63E9F40;
FRandomStream FKismetMathLibrary::MakeRandomStream(int32_t InitialSeed);


// Function  Engine.KismetMathLibrary.MakeRelativeTransform
// Offset::0x63E67B0;
FTransform FKismetMathLibrary::MakeRelativeTransform(FTransform A,FTransform RelativeTo);


// Function  Engine.KismetMathLibrary.MakeRotationFromAxes
// Offset::0x63FDE10;
FRotator FKismetMathLibrary::MakeRotationFromAxes(FVector Forward,FVector Right,FVector Up);


// Function  Engine.KismetMathLibrary.MakeRotator
// Offset::0x63FF000;
FRotator FKismetMathLibrary::MakeRotator(float Roll,float Pitch,float Yaw);


// Function  Engine.KismetMathLibrary.MakeRotFromX
// Offset::0x63FECD0;
FRotator FKismetMathLibrary::MakeRotFromX(FVector X);


// Function  Engine.KismetMathLibrary.MakeRotFromXY
// Offset::0x63FE550;
FRotator FKismetMathLibrary::MakeRotFromXY(FVector X,FVector Y);


// Function  Engine.KismetMathLibrary.MakeRotFromXZ
// Offset::0x63FE430;
FRotator FKismetMathLibrary::MakeRotFromXZ(FVector X,FVector Z);


// Function  Engine.KismetMathLibrary.MakeRotFromY
// Offset::0x63FE9A0;
FRotator FKismetMathLibrary::MakeRotFromY(FVector Y);


// Function  Engine.KismetMathLibrary.MakeRotFromYX
// Offset::0x63FE310;
FRotator FKismetMathLibrary::MakeRotFromYX(FVector Y,FVector X);


// Function  Engine.KismetMathLibrary.MakeRotFromYZ
// Offset::0x63FE1F0;
FRotator FKismetMathLibrary::MakeRotFromYZ(FVector Y,FVector Z);


// Function  Engine.KismetMathLibrary.MakeRotFromZ
// Offset::0x63FE670;
FRotator FKismetMathLibrary::MakeRotFromZ(FVector Z);


// Function  Engine.KismetMathLibrary.MakeRotFromZX
// Offset::0x63FE0D0;
FRotator FKismetMathLibrary::MakeRotFromZX(FVector Z,FVector X);


// Function  Engine.KismetMathLibrary.MakeRotFromZY
// Offset::0x63FDFB0;
FRotator FKismetMathLibrary::MakeRotFromZY(FVector Z,FVector Y);


// Function  Engine.KismetMathLibrary.MakeTimespan
// Offset::0x63EDA90;
FTimespan FKismetMathLibrary::MakeTimespan(int32_t Days,int32_t Hours,int32_t Minutes,int32_t Seconds,int32_t Milliseconds);


// Function  Engine.KismetMathLibrary.MakeTimespan2
// Offset::0x63ED8C0;
FTimespan FKismetMathLibrary::MakeTimespan2(int32_t Days,int32_t Hours,int32_t Minutes,int32_t Seconds,int32_t FractionNano);


// Function  Engine.KismetMathLibrary.MakeTransform
// Offset::0x63E8C30;
FTransform FKismetMathLibrary::MakeTransform(FVector Location,FRotator Rotation,FVector Scale);


// Function  Engine.KismetMathLibrary.MakeVector
// Offset::0x63E1510;
FVector FKismetMathLibrary::MakeVector(double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.MakeVector2D
// Offset::0x640E400;
FVector2D FKismetMathLibrary::MakeVector2D(double X,double Y);


// Function  Engine.KismetMathLibrary.MakeVector4
// Offset::0x6402180;
FVector4 FKismetMathLibrary::MakeVector4(double X,double Y,double Z,double W);


// Function  Engine.KismetMathLibrary.MakeVector_NetQuantize
// Offset::0x63E1510;
FVector_NetQuantize FKismetMathLibrary::MakeVector_NetQuantize(double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.MakeVector_NetQuantize10
// Offset::0x63E1510;
FVector_NetQuantize10 FKismetMathLibrary::MakeVector_NetQuantize10(double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.MakeVector_NetQuantize100
// Offset::0x63E1510;
FVector_NetQuantize100 FKismetMathLibrary::MakeVector_NetQuantize100(double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.MakeVector_NetQuantizeNormal
// Offset::0x63E1510;
FVector_NetQuantizeNormal FKismetMathLibrary::MakeVector_NetQuantizeNormal(double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.MapRangeClamped
// Offset::0x640F6E0;
double FKismetMathLibrary::MapRangeClamped(double Value,double InRangeA,double InRangeB,double OutRangeA,double OutRangeB);


// Function  Engine.KismetMathLibrary.MapRangeUnclamped
// Offset::0x640F8B0;
double FKismetMathLibrary::MapRangeUnclamped(double Value,double InRangeA,double InRangeB,double OutRangeA,double OutRangeB);


// Function  Engine.KismetMathLibrary.Matrix_ApplyScale
// Offset::0x63F81F0;
FMatrix FKismetMathLibrary::Matrix_ApplyScale(FMatrix M,float Scale);


// Function  Engine.KismetMathLibrary.Matrix_ConcatenateTranslation
// Offset::0x63F88F0;
FMatrix FKismetMathLibrary::Matrix_ConcatenateTranslation(FMatrix M,FVector Translation);


// Function  Engine.KismetMathLibrary.Matrix_ContainsNaN
// Offset::0x63F8830;
bool FKismetMathLibrary::Matrix_ContainsNaN(FMatrix M);


// Function  Engine.KismetMathLibrary.Matrix_GetColumn
// Offset::0x63F7200;
FVector FKismetMathLibrary::Matrix_GetColumn(FMatrix M,enum class EMatrixColumns Column);


// Function  Engine.KismetMathLibrary.Matrix_GetDeterminant
// Offset::0x63F9EC0;
float FKismetMathLibrary::Matrix_GetDeterminant(FMatrix M);


// Function  Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane
// Offset::0x63F60E0;
bool FKismetMathLibrary::Matrix_GetFrustumBottomPlane(FMatrix M,FPlane OutPlane);


// Function  Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane
// Offset::0x63F6A40;
bool FKismetMathLibrary::Matrix_GetFrustumFarPlane(FMatrix M,FPlane OutPlane);


// Function  Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane
// Offset::0x63F67E0;
bool FKismetMathLibrary::Matrix_GetFrustumLeftPlane(FMatrix M,FPlane OutPlane);


// Function  Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane
// Offset::0x63F6C70;
bool FKismetMathLibrary::Matrix_GetFrustumNearPlane(FMatrix M,FPlane OutPlane);


// Function  Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane
// Offset::0x63F6580;
bool FKismetMathLibrary::Matrix_GetFrustumRightPlane(FMatrix M,FPlane OutPlane);


// Function  Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane
// Offset::0x63F6330;
bool FKismetMathLibrary::Matrix_GetFrustumTopPlane(FMatrix M,FPlane OutPlane);


// Function  Engine.KismetMathLibrary.Matrix_GetInverse
// Offset::0x63F9C20;
FMatrix FKismetMathLibrary::Matrix_GetInverse(FMatrix M);


// Function  Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale
// Offset::0x63F8FD0;
FMatrix FKismetMathLibrary::Matrix_GetMatrixWithoutScale(FMatrix M,float Tolerance);


// Function  Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale
// Offset::0x63F8450;
float FKismetMathLibrary::Matrix_GetMaximumAxisScale(FMatrix M);


// Function  Engine.KismetMathLibrary.Matrix_GetOrigin
// Offset::0x63FB9D0;
FVector FKismetMathLibrary::Matrix_GetOrigin(FMatrix InMatrix);


// Function  Engine.KismetMathLibrary.Matrix_GetRotator
// Offset::0x63F6FA0;
FRotator FKismetMathLibrary::Matrix_GetRotator(FMatrix M);


// Function  Engine.KismetMathLibrary.Matrix_GetRotDeterminant
// Offset::0x63F9D20;
float FKismetMathLibrary::Matrix_GetRotDeterminant(FMatrix M);


// Function  Engine.KismetMathLibrary.Matrix_GetScaledAxes
// Offset::0x63F7DA0;
void FKismetMathLibrary::Matrix_GetScaledAxes(FMatrix M,FVector X,FVector Y,FVector Z);


// Function  Engine.KismetMathLibrary.Matrix_GetScaledAxis
// Offset::0x63F7FF0;
FVector FKismetMathLibrary::Matrix_GetScaledAxis(FMatrix M,enum class EAxis Axis);


// Function  Engine.KismetMathLibrary.Matrix_GetScaleVector
// Offset::0x63F8C70;
FVector FKismetMathLibrary::Matrix_GetScaleVector(FMatrix M,float Tolerance);


// Function  Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint
// Offset::0x63F98E0;
FMatrix FKismetMathLibrary::Matrix_GetTransposeAdjoint(FMatrix M);


// Function  Engine.KismetMathLibrary.Matrix_GetTransposed
// Offset::0x63FA360;
FMatrix FKismetMathLibrary::Matrix_GetTransposed(FMatrix M);


// Function  Engine.KismetMathLibrary.Matrix_GetUnitAxes
// Offset::0x63F75C0;
void FKismetMathLibrary::Matrix_GetUnitAxes(FMatrix M,FVector X,FVector Y,FVector Z);


// Function  Engine.KismetMathLibrary.Matrix_GetUnitAxis
// Offset::0x63F7AB0;
FVector FKismetMathLibrary::Matrix_GetUnitAxis(FMatrix M,enum class EAxis Axis);


// Function  Engine.KismetMathLibrary.Matrix_Identity
// Offset::0x63FB8E0;
FMatrix FKismetMathLibrary::Matrix_Identity();


// Function  Engine.KismetMathLibrary.Matrix_InverseTransformPosition
// Offset::0x63FAA50;
FVector FKismetMathLibrary::Matrix_InverseTransformPosition(FMatrix M,FVector V);


// Function  Engine.KismetMathLibrary.Matrix_InverseTransformVector
// Offset::0x63FA610;
FVector FKismetMathLibrary::Matrix_InverseTransformVector(FMatrix M,FVector V);


// Function  Engine.KismetMathLibrary.Matrix_Mirror
// Offset::0x63F5BC0;
FMatrix FKismetMathLibrary::Matrix_Mirror(FMatrix M,enum class EAxis MirrorAxis,enum class EAxis FlipAxis);


// Function  Engine.KismetMathLibrary.Matrix_RemoveScaling
// Offset::0x63F9470;
void FKismetMathLibrary::Matrix_RemoveScaling(FMatrix M,float Tolerance);


// Function  Engine.KismetMathLibrary.Matrix_RemoveTranslation
// Offset::0x63F8AC0;
FMatrix FKismetMathLibrary::Matrix_RemoveTranslation(FMatrix M);


// Function  Engine.KismetMathLibrary.Matrix_ScaleTranslation
// Offset::0x63F8650;
FMatrix FKismetMathLibrary::Matrix_ScaleTranslation(FMatrix M,FVector Scale3D);


// Function  Engine.KismetMathLibrary.Matrix_SetAxis
// Offset::0x63F7450;
void FKismetMathLibrary::Matrix_SetAxis(FMatrix M,enum class EAxis Axis,FVector AxisVector);


// Function  Engine.KismetMathLibrary.Matrix_SetColumn
// Offset::0x63F7080;
void FKismetMathLibrary::Matrix_SetColumn(FMatrix M,enum class EMatrixColumns Column,FVector Value);


// Function  Engine.KismetMathLibrary.Matrix_SetOrigin
// Offset::0x63F7340;
void FKismetMathLibrary::Matrix_SetOrigin(FMatrix M,FVector NewOrigin);


// Function  Engine.KismetMathLibrary.Matrix_ToQuat
// Offset::0x63F6EC0;
FQuat FKismetMathLibrary::Matrix_ToQuat(FMatrix M);


// Function  Engine.KismetMathLibrary.Matrix_TransformPosition
// Offset::0x63FAC90;
FVector4 FKismetMathLibrary::Matrix_TransformPosition(FMatrix M,FVector V);


// Function  Engine.KismetMathLibrary.Matrix_TransformVector
// Offset::0x63FA870;
FVector4 FKismetMathLibrary::Matrix_TransformVector(FMatrix M,FVector V);


// Function  Engine.KismetMathLibrary.Matrix_TransformVector4
// Offset::0x63FAE50;
FVector4 FKismetMathLibrary::Matrix_TransformVector4(FMatrix M,FVector4 V);


// Function  Engine.KismetMathLibrary.Max
// Offset::0x6415550;
int32_t FKismetMathLibrary::Max(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.MaxInt64
// Offset::0x6413D90;
int64_t FKismetMathLibrary::MaxInt64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.MaxOfByteArray
// Offset::0x64108D0;
void FKismetMathLibrary::MaxOfByteArray(TArray<char> ByteArray,int32_t IndexOfMaxValue,char MaxValue);


// Function  Engine.KismetMathLibrary.MaxOfFloatArray
// Offset::0x6410BB0;
void FKismetMathLibrary::MaxOfFloatArray(TArray<float> FloatArray,int32_t IndexOfMaxValue,float MaxValue);


// Function  Engine.KismetMathLibrary.MaxOfIntArray
// Offset::0x6410E90;
void FKismetMathLibrary::MaxOfIntArray(TArray<int32_t> IntArray,int32_t IndexOfMaxValue,int32_t MaxValue);


// Function  Engine.KismetMathLibrary.Min
// Offset::0x6415630;
int32_t FKismetMathLibrary::Min(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.MinAreaRectangle
// Offset::0x63E2C00;
void FKismetMathLibrary::MinAreaRectangle(FObject* WorldContextObject,TArray<FVector> InPoints,FVector SampleSurfaceNormal,FVector OutRectCenter,FRotator OutRectRotation,float OutRectLengthX,float OutRectLengthY,bool bDebugDraw);


// Function  Engine.KismetMathLibrary.MinimumAreaRectangle
// Offset::0x63E2F50;
void FKismetMathLibrary::MinimumAreaRectangle(FObject* WorldContextObject,TArray<FVector> InVerts,FVector SampleSurfaceNormal,FVector OutRectCenter,FRotator OutRectRotation,float OutSideLengthX,float OutSideLengthY,bool bDebugDraw);


// Function  Engine.KismetMathLibrary.MinInt64
// Offset::0x6413E90;
int64_t FKismetMathLibrary::MinInt64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.MinOfByteArray
// Offset::0x6410760;
void FKismetMathLibrary::MinOfByteArray(TArray<char> ByteArray,int32_t IndexOfMinValue,char MinValue);


// Function  Engine.KismetMathLibrary.MinOfFloatArray
// Offset::0x6410A40;
void FKismetMathLibrary::MinOfFloatArray(TArray<float> FloatArray,int32_t IndexOfMinValue,float MinValue);


// Function  Engine.KismetMathLibrary.MinOfIntArray
// Offset::0x6410D20;
void FKismetMathLibrary::MinOfIntArray(TArray<int32_t> IntArray,int32_t IndexOfMinValue,int32_t MinValue);


// Function  Engine.KismetMathLibrary.MirrorVectorByNormal
// Offset::0x64043F0;
FVector FKismetMathLibrary::MirrorVectorByNormal(FVector InVect,FVector InNormal);


// Function  Engine.KismetMathLibrary.Multiply_ByteByte
// Offset::0x64173F0;
char FKismetMathLibrary::Multiply_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.Multiply_DoubleDouble
// Offset::0x6413620;
double FKismetMathLibrary::Multiply_DoubleDouble(double A,double B);


// Function  Engine.KismetMathLibrary.Multiply_Int64Int64
// Offset::0x64150B0;
int64_t FKismetMathLibrary::Multiply_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.Multiply_IntFloat
// Offset::0x64139A0;
double FKismetMathLibrary::Multiply_IntFloat(int32_t A,double B);


// Function  Engine.KismetMathLibrary.Multiply_IntInt
// Offset::0x6416790;
int32_t FKismetMathLibrary::Multiply_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.Multiply_IntPointInt
// Offset::0x640E9E0;
FIntPoint FKismetMathLibrary::Multiply_IntPointInt(FIntPoint A,int32_t B);


// Function  Engine.KismetMathLibrary.Multiply_IntPointIntPoint
// Offset::0x640EAE0;
FIntPoint FKismetMathLibrary::Multiply_IntPointIntPoint(FIntPoint A,FIntPoint B);


// Function  Engine.KismetMathLibrary.Multiply_LinearColorFloat
// Offset::0x63EF590;
FLinearColor FKismetMathLibrary::Multiply_LinearColorFloat(FLinearColor A,float B);


// Function  Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
// Offset::0x63EF690;
FLinearColor FKismetMathLibrary::Multiply_LinearColorLinearColor(FLinearColor A,FLinearColor B);


// Function  Engine.KismetMathLibrary.Multiply_MatrixFloat
// Offset::0x63FB330;
FMatrix FKismetMathLibrary::Multiply_MatrixFloat(FMatrix A,double B);


// Function  Engine.KismetMathLibrary.Multiply_MatrixMatrix
// Offset::0x63FB760;
FMatrix FKismetMathLibrary::Multiply_MatrixMatrix(FMatrix A,FMatrix B);


// Function  Engine.KismetMathLibrary.Multiply_QuatQuat
// Offset::0x63F4C90;
FQuat FKismetMathLibrary::Multiply_QuatQuat(FQuat A,FQuat B);


// Function  Engine.KismetMathLibrary.Multiply_RotatorFloat
// Offset::0x63FCCE0;
FRotator FKismetMathLibrary::Multiply_RotatorFloat(FRotator A,float B);


// Function  Engine.KismetMathLibrary.Multiply_RotatorInt
// Offset::0x63FCBC0;
FRotator FKismetMathLibrary::Multiply_RotatorInt(FRotator A,int32_t B);


// Function  Engine.KismetMathLibrary.Multiply_TimespanFloat
// Offset::0x63ED110;
FTimespan FKismetMathLibrary::Multiply_TimespanFloat(FTimespan A,float Scalar);


// Function  Engine.KismetMathLibrary.Multiply_Vector2DFloat
// Offset::0x640DAC0;
FVector2D FKismetMathLibrary::Multiply_Vector2DFloat(FVector2D A,double B);


// Function  Engine.KismetMathLibrary.Multiply_Vector2DVector2D
// Offset::0x640DBC0;
FVector2D FKismetMathLibrary::Multiply_Vector2DVector2D(FVector2D A,FVector2D B);


// Function  Engine.KismetMathLibrary.Multiply_Vector4Vector4
// Offset::0x64017E0;
FVector4 FKismetMathLibrary::Multiply_Vector4Vector4(FVector4 A,FVector4 B);


// Function  Engine.KismetMathLibrary.Multiply_VectorFloat
// Offset::0x6409FC0;
FVector FKismetMathLibrary::Multiply_VectorFloat(FVector A,double B);


// Function  Engine.KismetMathLibrary.Multiply_VectorInt
// Offset::0x63FCBC0;
FVector FKismetMathLibrary::Multiply_VectorInt(FVector A,int32_t B);


// Function  Engine.KismetMathLibrary.Multiply_VectorVector
// Offset::0x640A0D0;
FVector FKismetMathLibrary::Multiply_VectorVector(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.MultiplyByPi
// Offset::0x640F630;
double FKismetMathLibrary::MultiplyByPi(double Value);


// Function  Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
// Offset::0x6413A90;
double FKismetMathLibrary::MultiplyMultiply_FloatFloat(double Base,double Exp);


// Function  Engine.KismetMathLibrary.NearlyEqual_FloatFloat
// Offset::0x6412EE0;
bool FKismetMathLibrary::NearlyEqual_FloatFloat(double A,double B,double ErrorTolerance);


// Function  Engine.KismetMathLibrary.NearlyEqual_TransformTransform
// Offset::0x63E84E0;
bool FKismetMathLibrary::NearlyEqual_TransformTransform(FTransform A,FTransform B,float LocationTolerance,float RotationTolerance,float Scale3DTolerance);


// Function  Engine.KismetMathLibrary.Negated2D
// Offset::0x640D240;
FVector2D FKismetMathLibrary::Negated2D(FVector2D A);


// Function  Engine.KismetMathLibrary.NegateRotator
// Offset::0x63FC9B0;
FRotator FKismetMathLibrary::NegateRotator(FRotator A);


// Function  Engine.KismetMathLibrary.NegateVector
// Offset::0x6409A50;
FVector FKismetMathLibrary::NegateVector(FVector A);


// Function  Engine.KismetMathLibrary.Normal
// Offset::0x6405BD0;
FVector FKismetMathLibrary::Normal(FVector A,float Tolerance);


// Function  Engine.KismetMathLibrary.Normal2D
// Offset::0x640BE60;
FVector2D FKismetMathLibrary::Normal2D(FVector2D A);


// Function  Engine.KismetMathLibrary.Normalize2D
// Offset::0x640BCB0;
void FKismetMathLibrary::Normalize2D(FVector2D A,float Tolerance);


// Function  Engine.KismetMathLibrary.NormalizeAxis
// Offset::0x63FBBB0;
float FKismetMathLibrary::NormalizeAxis(float Angle);


// Function  Engine.KismetMathLibrary.NormalizedDeltaRotator
// Offset::0x63FBCF0;
FRotator FKismetMathLibrary::NormalizedDeltaRotator(FRotator A,FRotator B);


// Function  Engine.KismetMathLibrary.NormalizeToRange
// Offset::0x640FA80;
double FKismetMathLibrary::NormalizeToRange(double Value,double RangeMin,double RangeMax);


// Function  Engine.KismetMathLibrary.NormalSafe2D
// Offset::0x640BFC0;
FVector2D FKismetMathLibrary::NormalSafe2D(FVector2D A,float Tolerance);


// Function  Engine.KismetMathLibrary.Not_Int
// Offset::0x6415990;
int32_t FKismetMathLibrary::Not_Int(int32_t A);


// Function  Engine.KismetMathLibrary.Not_Int64
// Offset::0x6414300;
int64_t FKismetMathLibrary::Not_Int64(int64_t A);


// Function  Engine.KismetMathLibrary.Not_PreBool
// Offset::0x6417AC0;
bool FKismetMathLibrary::Not_PreBool(bool A);


// Function  Engine.KismetMathLibrary.NotEqual_BoolBool
// Offset::0x64175D0;
bool FKismetMathLibrary::NotEqual_BoolBool(bool A,bool B);


// Function  Engine.KismetMathLibrary.NotEqual_ByteByte
// Offset::0x6416880;
bool FKismetMathLibrary::NotEqual_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.NotEqual_ClassClass
// Offset::0x63E9110;
bool FKismetMathLibrary::NotEqual_ClassClass(FObject* A,FObject* B);


// Function  Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
// Offset::0x63ECE40;
bool FKismetMathLibrary::NotEqual_DateTimeDateTime(FDateTime A,FDateTime B);


// Function  Engine.KismetMathLibrary.NotEqual_DoubleDouble
// Offset::0x6412DE0;
bool FKismetMathLibrary::NotEqual_DoubleDouble(double A,double B);


// Function  Engine.KismetMathLibrary.NotEqual_Int64Int64
// Offset::0x6414850;
bool FKismetMathLibrary::NotEqual_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.NotEqual_IntInt
// Offset::0x6415EC0;
bool FKismetMathLibrary::NotEqual_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.NotEqual_IntPointIntPoint
// Offset::0x640E590;
bool FKismetMathLibrary::NotEqual_IntPointIntPoint(FIntPoint A,FIntPoint B);


// Function  Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor
// Offset::0x63EF960;
bool FKismetMathLibrary::NotEqual_LinearColorLinearColor(FLinearColor A,FLinearColor B);


// Function  Engine.KismetMathLibrary.NotEqual_MatrixMatrix
// Offset::0x63FB040;
bool FKismetMathLibrary::NotEqual_MatrixMatrix(FMatrix A,FMatrix B,float Tolerance);


// Function  Engine.KismetMathLibrary.NotEqual_NameName
// Offset::0x63E8E70;
bool FKismetMathLibrary::NotEqual_NameName(FName A,FName B);


// Function  Engine.KismetMathLibrary.NotEqual_ObjectObject
// Offset::0x63E9110;
bool FKismetMathLibrary::NotEqual_ObjectObject(FObject* A,FObject* B);


// Function  Engine.KismetMathLibrary.NotEqual_QuatQuat
// Offset::0x63F5590;
bool FKismetMathLibrary::NotEqual_QuatQuat(FQuat A,FQuat B,float ErrorTolerance);


// Function  Engine.KismetMathLibrary.NotEqual_RotatorRotator
// Offset::0x63FCE00;
bool FKismetMathLibrary::NotEqual_RotatorRotator(FRotator A,FRotator B,float ErrorTolerance);


// Function  Engine.KismetMathLibrary.NotEqual_TimespanTimespan
// Offset::0x63ECE40;
bool FKismetMathLibrary::NotEqual_TimespanTimespan(FTimespan A,FTimespan B);


// Function  Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
// Offset::0x640D300;
bool FKismetMathLibrary::NotEqual_Vector2DVector2D(FVector2D A,FVector2D B,float ErrorTolerance);


// Function  Engine.KismetMathLibrary.NotEqual_Vector4Vector4
// Offset::0x6400D90;
bool FKismetMathLibrary::NotEqual_Vector4Vector4(FVector4 A,FVector4 B,float ErrorTolerance);


// Function  Engine.KismetMathLibrary.NotEqual_VectorVector
// Offset::0x6409490;
bool FKismetMathLibrary::NotEqual_VectorVector(FVector A,FVector B,float ErrorTolerance);


// Function  Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D
// Offset::0x640D480;
bool FKismetMathLibrary::NotEqualExactly_Vector2DVector2D(FVector2D A,FVector2D B);


// Function  Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4
// Offset::0x6401030;
bool FKismetMathLibrary::NotEqualExactly_Vector4Vector4(FVector4 A,FVector4 B);


// Function  Engine.KismetMathLibrary.NotEqualExactly_VectorVector
// Offset::0x6409640;
bool FKismetMathLibrary::NotEqualExactly_VectorVector(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.Now
// Offset::0x63EE0F0;
FDateTime FKismetMathLibrary::Now();


// Function  Engine.KismetMathLibrary.Or_Int64Int64
// Offset::0x64143B0;
int64_t FKismetMathLibrary::Or_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.Or_IntInt
// Offset::0x6415A30;
int32_t FKismetMathLibrary::Or_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.Percent_ByteByte
// Offset::0x64171D0;
char FKismetMathLibrary::Percent_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.Percent_FloatFloat
// Offset::0x6426770;
double FKismetMathLibrary::Percent_FloatFloat(double A,double B);


// Function  Engine.KismetMathLibrary.Percent_IntInt
// Offset::0x6416560;
int32_t FKismetMathLibrary::Percent_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.PerlinNoise1D
// Offset::0x63E32A0;
float FKismetMathLibrary::PerlinNoise1D(float Value);


// Function  Engine.KismetMathLibrary.PointsAreCoplanar
// Offset::0x63E2AF0;
bool FKismetMathLibrary::PointsAreCoplanar(TArray<FVector> Points,float Tolerance);


// Function  Engine.KismetMathLibrary.ProjectPointOnToPlane
// Offset::0x64035B0;
FVector FKismetMathLibrary::ProjectPointOnToPlane(FVector Point,FVector PlaneBase,FVector PlaneNormal);


// Function  Engine.KismetMathLibrary.ProjectVectorOntoPlane
// Offset::0x6403490;
FVector FKismetMathLibrary::ProjectVectorOntoPlane(FVector V,FVector PlaneNormal);


// Function  Engine.KismetMathLibrary.ProjectVectorOnToVector
// Offset::0x6403740;
FVector FKismetMathLibrary::ProjectVectorOnToVector(FVector V,FVector Target);


// Function  Engine.KismetMathLibrary.Quat_AngularDistance
// Offset::0x63F4500;
float FKismetMathLibrary::Quat_AngularDistance(FQuat A,FQuat B);


// Function  Engine.KismetMathLibrary.Quat_EnforceShortestArcWith
// Offset::0x63F4390;
void FKismetMathLibrary::Quat_EnforceShortestArcWith(FQuat A,FQuat B);


// Function  Engine.KismetMathLibrary.Quat_Euler
// Offset::0x63F42C0;
FVector FKismetMathLibrary::Quat_Euler(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_Exp
// Offset::0x63F41F0;
FQuat FKismetMathLibrary::Quat_Exp(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_GetAngle
// Offset::0x63F40E0;
float FKismetMathLibrary::Quat_GetAngle(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_GetAxisX
// Offset::0x63F3EA0;
FVector FKismetMathLibrary::Quat_GetAxisX(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_GetAxisY
// Offset::0x63F3C20;
FVector FKismetMathLibrary::Quat_GetAxisY(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_GetAxisZ
// Offset::0x63F39D0;
FVector FKismetMathLibrary::Quat_GetAxisZ(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_GetRotationAxis
// Offset::0x63F3470;
FVector FKismetMathLibrary::Quat_GetRotationAxis(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_Identity
// Offset::0x63F5B70;
FQuat FKismetMathLibrary::Quat_Identity();


// Function  Engine.KismetMathLibrary.Quat_Inversed
// Offset::0x63F3390;
FQuat FKismetMathLibrary::Quat_Inversed(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_IsFinite
// Offset::0x63F47E0;
bool FKismetMathLibrary::Quat_IsFinite(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_IsIdentity
// Offset::0x63F4A10;
bool FKismetMathLibrary::Quat_IsIdentity(FQuat Q,float Tolerance);


// Function  Engine.KismetMathLibrary.Quat_IsNonFinite
// Offset::0x63F46E0;
bool FKismetMathLibrary::Quat_IsNonFinite(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_IsNormalized
// Offset::0x63F4930;
bool FKismetMathLibrary::Quat_IsNormalized(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_Log
// Offset::0x63F32C0;
FQuat FKismetMathLibrary::Quat_Log(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_MakeFromEuler
// Offset::0x63F2E80;
FQuat FKismetMathLibrary::Quat_MakeFromEuler(FVector Euler);


// Function  Engine.KismetMathLibrary.Quat_Normalize
// Offset::0x63F3800;
void FKismetMathLibrary::Quat_Normalize(FQuat Q,float Tolerance);


// Function  Engine.KismetMathLibrary.Quat_Normalized
// Offset::0x63F3600;
FQuat FKismetMathLibrary::Quat_Normalized(FQuat Q,float Tolerance);


// Function  Engine.KismetMathLibrary.Quat_RotateVector
// Offset::0x63F27C0;
FVector FKismetMathLibrary::Quat_RotateVector(FQuat Q,FVector V);


// Function  Engine.KismetMathLibrary.Quat_Rotator
// Offset::0x63F2DB0;
FRotator FKismetMathLibrary::Quat_Rotator(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_SetComponents
// Offset::0x63F30B0;
void FKismetMathLibrary::Quat_SetComponents(FQuat Q,float X,float Y,float Z,float W);


// Function  Engine.KismetMathLibrary.Quat_SetFromEuler
// Offset::0x63F2F50;
void FKismetMathLibrary::Quat_SetFromEuler(FQuat Q,FVector Euler);


// Function  Engine.KismetMathLibrary.Quat_Size
// Offset::0x63F2B90;
float FKismetMathLibrary::Quat_Size(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_SizeSquared
// Offset::0x63F2A80;
float FKismetMathLibrary::Quat_SizeSquared(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_UnrotateVector
// Offset::0x63F24D0;
FVector FKismetMathLibrary::Quat_UnrotateVector(FQuat Q,FVector V);


// Function  Engine.KismetMathLibrary.Quat_VectorForward
// Offset::0x63F3EA0;
FVector FKismetMathLibrary::Quat_VectorForward(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_VectorRight
// Offset::0x63F3C20;
FVector FKismetMathLibrary::Quat_VectorRight(FQuat Q);


// Function  Engine.KismetMathLibrary.Quat_VectorUp
// Offset::0x63F39D0;
FVector FKismetMathLibrary::Quat_VectorUp(FQuat Q);


// Function  Engine.KismetMathLibrary.QuaternionSpringInterp
// Offset::0x64046A0;
FQuat FKismetMathLibrary::QuaternionSpringInterp(FQuat Current,FQuat Target,FQuaternionSpringState SpringState,float Stiffness,float CriticalDampingFactor,float DeltaTime,float Mass,float TargetVelocityAmount,bool bInitializeFromTarget);


// Function  Engine.KismetMathLibrary.RadiansToDegrees
// Offset::0x6411D20;
double FKismetMathLibrary::RadiansToDegrees(double A);


// Function  Engine.KismetMathLibrary.RandomBool
// Offset::0x6417CF0;
bool FKismetMathLibrary::RandomBool();


// Function  Engine.KismetMathLibrary.RandomBoolFromStream
// Offset::0x63E4140;
bool FKismetMathLibrary::RandomBoolFromStream(FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomBoolWithWeight
// Offset::0x6417C50;
bool FKismetMathLibrary::RandomBoolWithWeight(float Weight);


// Function  Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
// Offset::0x6417B60;
bool FKismetMathLibrary::RandomBoolWithWeightFromStream(float Weight,FRandomStream RandomStream);


// Function  Engine.KismetMathLibrary.RandomFloat
// Offset::0x6412000;
double FKismetMathLibrary::RandomFloat();


// Function  Engine.KismetMathLibrary.RandomFloatFromStream
// Offset::0x63E4090;
float FKismetMathLibrary::RandomFloatFromStream(FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomFloatInRange
// Offset::0x6411EE0;
double FKismetMathLibrary::RandomFloatInRange(double Min,double Max);


// Function  Engine.KismetMathLibrary.RandomFloatInRangeFromStream
// Offset::0x63E3F50;
float FKismetMathLibrary::RandomFloatInRangeFromStream(float Min,float Max,FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomInteger
// Offset::0x6415820;
int32_t FKismetMathLibrary::RandomInteger(int32_t Max);


// Function  Engine.KismetMathLibrary.RandomInteger64
// Offset::0x6414110;
int64_t FKismetMathLibrary::RandomInteger64(int64_t Max);


// Function  Engine.KismetMathLibrary.RandomInteger64InRange
// Offset::0x6413F90;
int64_t FKismetMathLibrary::RandomInteger64InRange(int64_t Min,int64_t Max);


// Function  Engine.KismetMathLibrary.RandomIntegerFromStream
// Offset::0x63E4330;
int32_t FKismetMathLibrary::RandomIntegerFromStream(int32_t Max,FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomIntegerInRange
// Offset::0x6415710;
int32_t FKismetMathLibrary::RandomIntegerInRange(int32_t Min,int32_t Max);


// Function  Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
// Offset::0x63E41F0;
int32_t FKismetMathLibrary::RandomIntegerInRangeFromStream(int32_t Min,int32_t Max,FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomPointInBoundingBox
// Offset::0x6402910;
FVector FKismetMathLibrary::RandomPointInBoundingBox(FVector Center,FVector HalfSize);


// Function  Engine.KismetMathLibrary.RandomPointInBoundingBoxFromStream
// Offset::0x63E3D00;
FVector FKismetMathLibrary::RandomPointInBoundingBoxFromStream(FVector Center,FVector HalfSize,FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomRotator
// Offset::0x63FC310;
FRotator FKismetMathLibrary::RandomRotator(bool bRoll);


// Function  Engine.KismetMathLibrary.RandomRotatorFromStream
// Offset::0x63E3BF0;
FRotator FKismetMathLibrary::RandomRotatorFromStream(bool bRoll,FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomUnitVector
// Offset::0x6402A60;
FVector FKismetMathLibrary::RandomUnitVector();


// Function  Engine.KismetMathLibrary.RandomUnitVectorFromStream
// Offset::0x63E3E90;
FVector FKismetMathLibrary::RandomUnitVectorFromStream(FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees
// Offset::0x6402680;
FVector FKismetMathLibrary::RandomUnitVectorInConeInDegrees(FVector ConeDir,float ConeHalfAngleInDegrees);


// Function  Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream
// Offset::0x63E36E0;
FVector FKismetMathLibrary::RandomUnitVectorInConeInDegreesFromStream(FVector ConeDir,float ConeHalfAngleInDegrees,FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians
// Offset::0x64027F0;
FVector FKismetMathLibrary::RandomUnitVectorInConeInRadians(FVector ConeDir,float ConeHalfAngleInRadians);


// Function  Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream
// Offset::0x63E3860;
FVector FKismetMathLibrary::RandomUnitVectorInConeInRadiansFromStream(FVector ConeDir,float ConeHalfAngleInRadians,FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees
// Offset::0x6402360;
FVector FKismetMathLibrary::RandomUnitVectorInEllipticalConeInDegrees(FVector ConeDir,float MaxYawInDegrees,float MaxPitchInDegrees);


// Function  Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream
// Offset::0x63E3340;
FVector FKismetMathLibrary::RandomUnitVectorInEllipticalConeInDegreesFromStream(FVector ConeDir,float MaxYawInDegrees,float MaxPitchInDegrees,FRandomStream Stream);


// Function  Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians
// Offset::0x6402530;
FVector FKismetMathLibrary::RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir,float MaxYawInRadians,float MaxPitchInRadians);


// Function  Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream
// Offset::0x63E3530;
FVector FKismetMathLibrary::RandomUnitVectorInEllipticalConeInRadiansFromStream(FVector ConeDir,float MaxYawInRadians,float MaxPitchInRadians,FRandomStream Stream);


// Function  Engine.KismetMathLibrary.REase
// Offset::0x63FBE20;
FRotator FKismetMathLibrary::REase(FRotator A,FRotator B,float Alpha,bool bShortestPath,enum class EEasingFunc EasingFunc,float BlendExp,int32_t Steps);


// Function  Engine.KismetMathLibrary.ResetFloatSpringState
// Offset::0x63E4900;
void FKismetMathLibrary::ResetFloatSpringState(FFloatSpringState SpringState);


// Function  Engine.KismetMathLibrary.ResetQuaternionSpringState
// Offset::0x63E4770;
void FKismetMathLibrary::ResetQuaternionSpringState(FQuaternionSpringState SpringState);


// Function  Engine.KismetMathLibrary.ResetRandomStream
// Offset::0x63E3B50;
void FKismetMathLibrary::ResetRandomStream(FRandomStream Stream);


// Function  Engine.KismetMathLibrary.ResetVectorSpringState
// Offset::0x63E4840;
void FKismetMathLibrary::ResetVectorSpringState(FVectorSpringState SpringState);


// Function  Engine.KismetMathLibrary.RGBLinearToHSV
// Offset::0x63F0B80;
FLinearColor FKismetMathLibrary::RGBLinearToHSV(FLinearColor RGB);


// Function  Engine.KismetMathLibrary.RGBtoHSV
// Offset::0x63F0D70;
void FKismetMathLibrary::RGBtoHSV(FLinearColor InColor,float H,float S,float V,float A);


// Function  Engine.KismetMathLibrary.RGBToHSV_Vector
// Offset::0x63F0C40;
void FKismetMathLibrary::RGBToHSV_Vector(FLinearColor RGB,FLinearColor HSV);


// Function  Engine.KismetMathLibrary.RInterpTo
// Offset::0x63E5080;
FRotator FKismetMathLibrary::RInterpTo(FRotator Current,FRotator Target,float DeltaTime,float InterpSpeed);


// Function  Engine.KismetMathLibrary.RInterpTo_Constant
// Offset::0x63E4E60;
FRotator FKismetMathLibrary::RInterpTo_Constant(FRotator Current,FRotator Target,float DeltaTime,float InterpSpeed);


// Function  Engine.KismetMathLibrary.RLerp
// Offset::0x63FC120;
FRotator FKismetMathLibrary::RLerp(FRotator A,FRotator B,float Alpha,bool bShortestPath);


// Function  Engine.KismetMathLibrary.RotateAngleAxis
// Offset::0x6408FB0;
FVector FKismetMathLibrary::RotateAngleAxis(FVector InVect,float AngleDeg,FVector Axis);


// Function  Engine.KismetMathLibrary.RotatorFromAxisAndAngle
// Offset::0x640A930;
FRotator FKismetMathLibrary::RotatorFromAxisAndAngle(FVector Axis,float Angle);


// Function  Engine.KismetMathLibrary.Round
// Offset::0x6410340;
int32_t FKismetMathLibrary::Round(double A);


// Function  Engine.KismetMathLibrary.Round64
// Offset::0x6410080;
int64_t FKismetMathLibrary::Round64(double A);


// Function  Engine.KismetMathLibrary.SafeDivide
// Offset::0x6411000;
double FKismetMathLibrary::SafeDivide(double A,double B);


// Function  Engine.KismetMathLibrary.SeedRandomStream
// Offset::0x63E3AB0;
void FKismetMathLibrary::SeedRandomStream(FRandomStream Stream);


// Function  Engine.KismetMathLibrary.SelectClass
// Offset::0x63E92D0;
FObject* FKismetMathLibrary::SelectClass(FObject* A,FObject* B,bool bSelectA);


// Function  Engine.KismetMathLibrary.SelectColor
// Offset::0x63E96C0;
FLinearColor FKismetMathLibrary::SelectColor(FLinearColor A,FLinearColor B,bool bPickA);


// Function  Engine.KismetMathLibrary.SelectFloat
// Offset::0x63E9990;
double FKismetMathLibrary::SelectFloat(double A,double B,bool bPickA);


// Function  Engine.KismetMathLibrary.SelectInt
// Offset::0x63E9AD0;
int32_t FKismetMathLibrary::SelectInt(int32_t A,int32_t B,bool bPickA);


// Function  Engine.KismetMathLibrary.SelectObject
// Offset::0x63E92D0;
FObject* FKismetMathLibrary::SelectObject(FObject* A,FObject* B,bool bSelectA);


// Function  Engine.KismetMathLibrary.SelectRotator
// Offset::0x63E9810;
FRotator FKismetMathLibrary::SelectRotator(FRotator A,FRotator B,bool bPickA);


// Function  Engine.KismetMathLibrary.SelectString
// Offset::0x63E9C10;
FString FKismetMathLibrary::SelectString(FString A,FString B,bool bPickA);


// Function  Engine.KismetMathLibrary.SelectTransform
// Offset::0x63E9410;
FTransform FKismetMathLibrary::SelectTransform(FTransform A,FTransform B,bool bPickA);


// Function  Engine.KismetMathLibrary.SelectVector
// Offset::0x63E9810;
FVector FKismetMathLibrary::SelectVector(FVector A,FVector B,bool bPickA);


// Function  Engine.KismetMathLibrary.Set2D
// Offset::0x640D100;
void FKismetMathLibrary::Set2D(FVector2D A,double X,double Y);


// Function  Engine.KismetMathLibrary.SetFloatSpringStateVelocity
// Offset::0x63E4680;
void FKismetMathLibrary::SetFloatSpringStateVelocity(FFloatSpringState SpringState,float Velocity);


// Function  Engine.KismetMathLibrary.SetQuaternionSpringStateAngularVelocity
// Offset::0x63E4420;
void FKismetMathLibrary::SetQuaternionSpringStateAngularVelocity(FQuaternionSpringState SpringState,FVector AngularVelocity);


// Function  Engine.KismetMathLibrary.SetRandomStreamSeed
// Offset::0x63E39C0;
void FKismetMathLibrary::SetRandomStreamSeed(FRandomStream Stream,int32_t NewSeed);


// Function  Engine.KismetMathLibrary.SetVectorSpringStateVelocity
// Offset::0x63E4560;
void FKismetMathLibrary::SetVectorSpringStateVelocity(FVectorSpringState SpringState,FVector Velocity);


// Function  Engine.KismetMathLibrary.SignOfFloat
// Offset::0x640FBB0;
double FKismetMathLibrary::SignOfFloat(double A);


// Function  Engine.KismetMathLibrary.SignOfInteger
// Offset::0x64158F0;
int32_t FKismetMathLibrary::SignOfInteger(int32_t A);


// Function  Engine.KismetMathLibrary.SignOfInteger64
// Offset::0x6414230;
int64_t FKismetMathLibrary::SignOfInteger64(int64_t A);


// Function  Engine.KismetMathLibrary.Sin
// Offset::0x64128B0;
double FKismetMathLibrary::Sin(double A);


// Function  Engine.KismetMathLibrary.Spherical2DToUnitCartesian
// Offset::0x640BB20;
FVector FKismetMathLibrary::Spherical2DToUnitCartesian(FVector2D A);


// Function  Engine.KismetMathLibrary.Sqrt
// Offset::0x6412120;
double FKismetMathLibrary::Sqrt(double A);


// Function  Engine.KismetMathLibrary.Square
// Offset::0x6412080;
double FKismetMathLibrary::Square(double A);


// Function  Engine.KismetMathLibrary.Subtract_ByteByte
// Offset::0x6417000;
char FKismetMathLibrary::Subtract_ByteByte(char A,char B);


// Function  Engine.KismetMathLibrary.Subtract_DateTimeDateTime
// Offset::0x63ED220;
FTimespan FKismetMathLibrary::Subtract_DateTimeDateTime(FDateTime A,FDateTime B);


// Function  Engine.KismetMathLibrary.Subtract_DateTimeTimespan
// Offset::0x63ED220;
FDateTime FKismetMathLibrary::Subtract_DateTimeTimespan(FDateTime A,FTimespan B);


// Function  Engine.KismetMathLibrary.Subtract_DoubleDouble
// Offset::0x6413710;
double FKismetMathLibrary::Subtract_DoubleDouble(double A,double B);


// Function  Engine.KismetMathLibrary.Subtract_Int64Int64
// Offset::0x6414D90;
int64_t FKismetMathLibrary::Subtract_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.Subtract_IntInt
// Offset::0x6416380;
int32_t FKismetMathLibrary::Subtract_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetMathLibrary.Subtract_IntPointInt
// Offset::0x640EC00;
FIntPoint FKismetMathLibrary::Subtract_IntPointInt(FIntPoint A,int32_t B);


// Function  Engine.KismetMathLibrary.Subtract_IntPointIntPoint
// Offset::0x640ED00;
FIntPoint FKismetMathLibrary::Subtract_IntPointIntPoint(FIntPoint A,FIntPoint B);


// Function  Engine.KismetMathLibrary.Subtract_LinearColorLinearColor
// Offset::0x63EF780;
FLinearColor FKismetMathLibrary::Subtract_LinearColorLinearColor(FLinearColor A,FLinearColor B);


// Function  Engine.KismetMathLibrary.Subtract_QuatQuat
// Offset::0x63F5330;
FQuat FKismetMathLibrary::Subtract_QuatQuat(FQuat A,FQuat B);


// Function  Engine.KismetMathLibrary.Subtract_TimespanTimespan
// Offset::0x63ED220;
FTimespan FKismetMathLibrary::Subtract_TimespanTimespan(FTimespan A,FTimespan B);


// Function  Engine.KismetMathLibrary.Subtract_Vector2DFloat
// Offset::0x640DCB0;
FVector2D FKismetMathLibrary::Subtract_Vector2DFloat(FVector2D A,double B);


// Function  Engine.KismetMathLibrary.Subtract_Vector2DVector2D
// Offset::0x640DDB0;
FVector2D FKismetMathLibrary::Subtract_Vector2DVector2D(FVector2D A,FVector2D B);


// Function  Engine.KismetMathLibrary.Subtract_Vector4Vector4
// Offset::0x6401950;
FVector4 FKismetMathLibrary::Subtract_Vector4Vector4(FVector4 A,FVector4 B);


// Function  Engine.KismetMathLibrary.Subtract_VectorFloat
// Offset::0x640A300;
FVector FKismetMathLibrary::Subtract_VectorFloat(FVector A,double B);


// Function  Engine.KismetMathLibrary.Subtract_VectorInt
// Offset::0x640A1E0;
FVector FKismetMathLibrary::Subtract_VectorInt(FVector A,int32_t B);


// Function  Engine.KismetMathLibrary.Subtract_VectorVector
// Offset::0x640A420;
FVector FKismetMathLibrary::Subtract_VectorVector(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.Tan
// Offset::0x64125F0;
double FKismetMathLibrary::Tan(double A);


// Function  Engine.KismetMathLibrary.TEase
// Offset::0x63E59D0;
FTransform FKismetMathLibrary::TEase(FTransform A,FTransform B,float Alpha,enum class EEasingFunc EasingFunc,float BlendExp,int32_t Steps);


// Function  Engine.KismetMathLibrary.TimespanFromString
// Offset::0x63EBAE0;
bool FKismetMathLibrary::TimespanFromString(FString TimespanString,FTimespan Result);


// Function  Engine.KismetMathLibrary.TimespanMaxValue
// Offset::0x63EDCA0;
FTimespan FKismetMathLibrary::TimespanMaxValue();


// Function  Engine.KismetMathLibrary.TimespanMinValue
// Offset::0x63EDC80;
FTimespan FKismetMathLibrary::TimespanMinValue();


// Function  Engine.KismetMathLibrary.TimespanRatio
// Offset::0x63EBC70;
float FKismetMathLibrary::TimespanRatio(FTimespan A,FTimespan B);


// Function  Engine.KismetMathLibrary.TimespanZeroValue
// Offset::0x63EDC60;
FTimespan FKismetMathLibrary::TimespanZeroValue();


// Function  Engine.KismetMathLibrary.TInterpTo
// Offset::0x63E5720;
FTransform FKismetMathLibrary::TInterpTo(FTransform Current,FTransform Target,float DeltaTime,float InterpSpeed);


// Function  Engine.KismetMathLibrary.TLerp
// Offset::0x63E5D30;
FTransform FKismetMathLibrary::TLerp(FTransform A,FTransform B,float Alpha,enum class ELerpInterpolationMode InterpMode);


// Function  Engine.KismetMathLibrary.Today
// Offset::0x63EE070;
FDateTime FKismetMathLibrary::Today();


// Function  Engine.KismetMathLibrary.ToDirectionAndLength2D
// Offset::0x640B8E0;
void FKismetMathLibrary::ToDirectionAndLength2D(FVector2D A,FVector2D OutDir,double OutLength);


// Function  Engine.KismetMathLibrary.ToRounded2D
// Offset::0x640B7B0;
FVector2D FKismetMathLibrary::ToRounded2D(FVector2D A);


// Function  Engine.KismetMathLibrary.ToSign2D
// Offset::0x640B6D0;
FVector2D FKismetMathLibrary::ToSign2D(FVector2D A);


// Function  Engine.KismetMathLibrary.Transform_Determinant
// Offset::0x63E5640;
float FKismetMathLibrary::Transform_Determinant(FTransform Transform);


// Function  Engine.KismetMathLibrary.TransformDirection
// Offset::0x63E7430;
FVector FKismetMathLibrary::TransformDirection(FTransform T,FVector Direction);


// Function  Engine.KismetMathLibrary.TransformLocation
// Offset::0x63E7740;
FVector FKismetMathLibrary::TransformLocation(FTransform T,FVector Location);


// Function  Engine.KismetMathLibrary.TransformRotation
// Offset::0x63E72D0;
FRotator FKismetMathLibrary::TransformRotation(FTransform T,FRotator Rotation);


// Function  Engine.KismetMathLibrary.TransformVector4
// Offset::0x63FF160;
FVector4 FKismetMathLibrary::TransformVector4(FMatrix Matrix,FVector4 Vec4);


// Function  Engine.KismetMathLibrary.UtcNow
// Offset::0x63EE000;
FDateTime FKismetMathLibrary::UtcNow();


// Function  Engine.KismetMathLibrary.VEase
// Offset::0x6405450;
FVector FKismetMathLibrary::VEase(FVector A,FVector B,float Alpha,enum class EEasingFunc EasingFunc,float BlendExp,int32_t Steps);


// Function  Engine.KismetMathLibrary.Vector2D_One
// Offset::0x640E560;
FVector2D FKismetMathLibrary::Vector2D_One();


// Function  Engine.KismetMathLibrary.Vector2D_Unit45Deg
// Offset::0x640E530;
FVector2D FKismetMathLibrary::Vector2D_Unit45Deg();


// Function  Engine.KismetMathLibrary.Vector2D_Zero
// Offset::0x640E500;
FVector2D FKismetMathLibrary::Vector2D_Zero();


// Function  Engine.KismetMathLibrary.Vector2DInterpTo
// Offset::0x640C330;
FVector2D FKismetMathLibrary::Vector2DInterpTo(FVector2D Current,FVector2D Target,float DeltaTime,float InterpSpeed);


// Function  Engine.KismetMathLibrary.Vector2DInterpTo_Constant
// Offset::0x640C160;
FVector2D FKismetMathLibrary::Vector2DInterpTo_Constant(FVector2D Current,FVector2D Target,float DeltaTime,float InterpSpeed);


// Function  Engine.KismetMathLibrary.Vector4_Assign
// Offset::0x6400B70;
void FKismetMathLibrary::Vector4_Assign(FVector4 A,FVector4 InVector);


// Function  Engine.KismetMathLibrary.Vector4_CrossProduct3
// Offset::0x64007A0;
FVector4 FKismetMathLibrary::Vector4_CrossProduct3(FVector4 A,FVector4 B);


// Function  Engine.KismetMathLibrary.Vector4_DotProduct
// Offset::0x6400600;
double FKismetMathLibrary::Vector4_DotProduct(FVector4 A,FVector4 B);


// Function  Engine.KismetMathLibrary.Vector4_DotProduct3
// Offset::0x64004B0;
double FKismetMathLibrary::Vector4_DotProduct3(FVector4 A,FVector4 B);


// Function  Engine.KismetMathLibrary.Vector4_IsNAN
// Offset::0x6400390;
bool FKismetMathLibrary::Vector4_IsNAN(FVector4 A);


// Function  Engine.KismetMathLibrary.Vector4_IsNearlyZero3
// Offset::0x64001E0;
bool FKismetMathLibrary::Vector4_IsNearlyZero3(FVector4 A,float Tolerance);


// Function  Engine.KismetMathLibrary.Vector4_IsNormal3
// Offset::0x63FFA50;
bool FKismetMathLibrary::Vector4_IsNormal3(FVector4 A);


// Function  Engine.KismetMathLibrary.Vector4_IsUnit3
// Offset::0x63FFB50;
bool FKismetMathLibrary::Vector4_IsUnit3(FVector4 A,float SquaredLenthTolerance);


// Function  Engine.KismetMathLibrary.Vector4_IsZero
// Offset::0x64000A0;
bool FKismetMathLibrary::Vector4_IsZero(FVector4 A);


// Function  Engine.KismetMathLibrary.Vector4_MirrorByVector3
// Offset::0x63FF2E0;
FVector4 FKismetMathLibrary::Vector4_MirrorByVector3(FVector4 Direction,FVector4 SurfaceNormal);


// Function  Engine.KismetMathLibrary.Vector4_Negated
// Offset::0x6400CA0;
FVector4 FKismetMathLibrary::Vector4_Negated(FVector4 A);


// Function  Engine.KismetMathLibrary.Vector4_Normal3
// Offset::0x63FF840;
FVector4 FKismetMathLibrary::Vector4_Normal3(FVector4 A,float Tolerance);


// Function  Engine.KismetMathLibrary.Vector4_Normalize3
// Offset::0x63FF4B0;
void FKismetMathLibrary::Vector4_Normalize3(FVector4 A,float Tolerance);


// Function  Engine.KismetMathLibrary.Vector4_NormalUnsafe3
// Offset::0x63FF6D0;
FVector4 FKismetMathLibrary::Vector4_NormalUnsafe3(FVector4 A);


// Function  Engine.KismetMathLibrary.Vector4_Set
// Offset::0x6400970;
void FKismetMathLibrary::Vector4_Set(FVector4 A,double X,double Y,double Z,double W);


// Function  Engine.KismetMathLibrary.Vector4_Size
// Offset::0x63FFFA0;
double FKismetMathLibrary::Vector4_Size(FVector4 A);


// Function  Engine.KismetMathLibrary.Vector4_Size3
// Offset::0x63FFDC0;
double FKismetMathLibrary::Vector4_Size3(FVector4 A);


// Function  Engine.KismetMathLibrary.Vector4_SizeSquared
// Offset::0x63FFEB0;
double FKismetMathLibrary::Vector4_SizeSquared(FVector4 A);


// Function  Engine.KismetMathLibrary.Vector4_SizeSquared3
// Offset::0x63FFCE0;
double FKismetMathLibrary::Vector4_SizeSquared3(FVector4 A);


// Function  Engine.KismetMathLibrary.Vector4_Zero
// Offset::0x6402330;
FVector4 FKismetMathLibrary::Vector4_Zero();


// Function  Engine.KismetMathLibrary.Vector_AddBounded
// Offset::0x6403C10;
void FKismetMathLibrary::Vector_AddBounded(FVector A,FVector InAddVect,float InRadius);


// Function  Engine.KismetMathLibrary.Vector_Assign
// Offset::0x640B0D0;
void FKismetMathLibrary::Vector_Assign(FVector A,FVector InVector);


// Function  Engine.KismetMathLibrary.Vector_Backward
// Offset::0x640B440;
FVector FKismetMathLibrary::Vector_Backward();


// Function  Engine.KismetMathLibrary.Vector_BoundedToBox
// Offset::0x6403A50;
FVector FKismetMathLibrary::Vector_BoundedToBox(FVector InVect,FVector InBoxMin,FVector InBoxMax);


// Function  Engine.KismetMathLibrary.Vector_BoundedToCube
// Offset::0x6403E40;
FVector FKismetMathLibrary::Vector_BoundedToCube(FVector InVect,float InRadius);


// Function  Engine.KismetMathLibrary.Vector_ClampSize2D
// Offset::0x64086F0;
FVector FKismetMathLibrary::Vector_ClampSize2D(FVector A,double Min,double Max);


// Function  Engine.KismetMathLibrary.Vector_ClampSizeMax
// Offset::0x64084F0;
FVector FKismetMathLibrary::Vector_ClampSizeMax(FVector A,double Max);


// Function  Engine.KismetMathLibrary.Vector_ClampSizeMax2D
// Offset::0x6408320;
FVector FKismetMathLibrary::Vector_ClampSizeMax2D(FVector A,double Max);


// Function  Engine.KismetMathLibrary.Vector_ComponentMax
// Offset::0x6407C60;
FVector FKismetMathLibrary::Vector_ComponentMax(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.Vector_ComponentMin
// Offset::0x6407DC0;
FVector FKismetMathLibrary::Vector_ComponentMin(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.Vector_CosineAngle2D
// Offset::0x6407670;
double FKismetMathLibrary::Vector_CosineAngle2D(FVector A,FVector B);


// Function  Engine.KismetMathLibrary.Vector_Distance
// Offset::0x6406A70;
double FKismetMathLibrary::Vector_Distance(FVector v1,FVector v2);


// Function  Engine.KismetMathLibrary.Vector_Distance2D
// Offset::0x6406830;
double FKismetMathLibrary::Vector_Distance2D(FVector v1,FVector v2);


// Function  Engine.KismetMathLibrary.Vector_Distance2DSquared
// Offset::0x6406750;
double FKismetMathLibrary::Vector_Distance2DSquared(FVector v1,FVector v2);


// Function  Engine.KismetMathLibrary.Vector_DistanceSquared
// Offset::0x6406930;
double FKismetMathLibrary::Vector_DistanceSquared(FVector v1,FVector v2);


// Function  Engine.KismetMathLibrary.Vector_Down
// Offset::0x640B3A0;
FVector FKismetMathLibrary::Vector_Down();


// Function  Engine.KismetMathLibrary.Vector_Forward
// Offset::0x640B490;
FVector FKismetMathLibrary::Vector_Forward();


// Function  Engine.KismetMathLibrary.Vector_GetAbs
// Offset::0x6407F20;
FVector FKismetMathLibrary::Vector_GetAbs(FVector A);


// Function  Engine.KismetMathLibrary.Vector_GetAbsMax
// Offset::0x64080B0;
double FKismetMathLibrary::Vector_GetAbsMax(FVector A);


// Function  Engine.KismetMathLibrary.Vector_GetAbsMin
// Offset::0x6407FE0;
double FKismetMathLibrary::Vector_GetAbsMin(FVector A);


// Function  Engine.KismetMathLibrary.Vector_GetProjection
// Offset::0x6407A40;
FVector FKismetMathLibrary::Vector_GetProjection(FVector A);


// Function  Engine.KismetMathLibrary.Vector_GetSignVector
// Offset::0x6407B20;
FVector FKismetMathLibrary::Vector_GetSignVector(FVector A);


// Function  Engine.KismetMathLibrary.Vector_HeadingAngle
// Offset::0x64078F0;
double FKismetMathLibrary::Vector_HeadingAngle(FVector A);


// Function  Engine.KismetMathLibrary.Vector_IsNAN
// Offset::0x6406170;
bool FKismetMathLibrary::Vector_IsNAN(FVector A);


// Function  Engine.KismetMathLibrary.Vector_IsNearlyZero
// Offset::0x6406350;
bool FKismetMathLibrary::Vector_IsNearlyZero(FVector A,float Tolerance);


// Function  Engine.KismetMathLibrary.Vector_IsNormal
// Offset::0x6405DC0;
bool FKismetMathLibrary::Vector_IsNormal(FVector A);


// Function  Engine.KismetMathLibrary.Vector_IsUniform
// Offset::0x6405FC0;
bool FKismetMathLibrary::Vector_IsUniform(FVector A,float Tolerance);


// Function  Engine.KismetMathLibrary.Vector_IsUnit
// Offset::0x6405EA0;
bool FKismetMathLibrary::Vector_IsUnit(FVector A,float SquaredLenthTolerance);


// Function  Engine.KismetMathLibrary.Vector_IsZero
// Offset::0x6406250;
bool FKismetMathLibrary::Vector_IsZero(FVector A);


// Function  Engine.KismetMathLibrary.Vector_Left
// Offset::0x640B300;
FVector FKismetMathLibrary::Vector_Left();


// Function  Engine.KismetMathLibrary.Vector_MirrorByPlane
// Offset::0x6404250;
FVector FKismetMathLibrary::Vector_MirrorByPlane(FVector A,FPlane InPlane);


// Function  Engine.KismetMathLibrary.Vector_Normal2D
// Offset::0x64059F0;
FVector FKismetMathLibrary::Vector_Normal2D(FVector A,float Tolerance);


// Function  Engine.KismetMathLibrary.Vector_Normalize
// Offset::0x64056F0;
void FKismetMathLibrary::Vector_Normalize(FVector A,float Tolerance);


// Function  Engine.KismetMathLibrary.Vector_NormalUnsafe
// Offset::0x64058A0;
FVector FKismetMathLibrary::Vector_NormalUnsafe(FVector A);


// Function  Engine.KismetMathLibrary.Vector_One
// Offset::0x640B4E0;
FVector FKismetMathLibrary::Vector_One();


// Function  Engine.KismetMathLibrary.Vector_ProjectOnToNormal
// Offset::0x6403940;
FVector FKismetMathLibrary::Vector_ProjectOnToNormal(FVector V,FVector InNormal);


// Function  Engine.KismetMathLibrary.Vector_Reciprocal
// Offset::0x6404540;
FVector FKismetMathLibrary::Vector_Reciprocal(FVector A);


// Function  Engine.KismetMathLibrary.Vector_Right
// Offset::0x640B350;
FVector FKismetMathLibrary::Vector_Right();


// Function  Engine.KismetMathLibrary.Vector_Set
// Offset::0x640AF40;
void FKismetMathLibrary::Vector_Set(FVector A,double X,double Y,double Z);


// Function  Engine.KismetMathLibrary.Vector_SnappedToGrid
// Offset::0x6403FE0;
FVector FKismetMathLibrary::Vector_SnappedToGrid(FVector InVect,float InGridSize);


// Function  Engine.KismetMathLibrary.Vector_ToDegrees
// Offset::0x64074B0;
FVector FKismetMathLibrary::Vector_ToDegrees(FVector A);


// Function  Engine.KismetMathLibrary.Vector_ToRadians
// Offset::0x6407590;
FVector FKismetMathLibrary::Vector_ToRadians(FVector A);


// Function  Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical
// Offset::0x64072C0;
FVector2D FKismetMathLibrary::Vector_UnitCartesianToSpherical(FVector A);


// Function  Engine.KismetMathLibrary.Vector_UnwindEuler
// Offset::0x6408CA0;
void FKismetMathLibrary::Vector_UnwindEuler(FVector A);


// Function  Engine.KismetMathLibrary.Vector_Up
// Offset::0x640B3F0;
FVector FKismetMathLibrary::Vector_Up();


// Function  Engine.KismetMathLibrary.Vector_Zero
// Offset::0x640B530;
FVector FKismetMathLibrary::Vector_Zero();


// Function  Engine.KismetMathLibrary.VectorSpringInterp
// Offset::0x6404AC0;
FVector FKismetMathLibrary::VectorSpringInterp(FVector Current,FVector Target,FVectorSpringState SpringState,float Stiffness,float CriticalDampingFactor,float DeltaTime,float Mass,float TargetVelocityAmount,bool bClamp,FVector MinValue,FVector MaxValue,bool bInitializeFromTarget);


// Function  Engine.KismetMathLibrary.VInterpTo
// Offset::0x6405230;
FVector FKismetMathLibrary::VInterpTo(FVector Current,FVector Target,float DeltaTime,float InterpSpeed);


// Function  Engine.KismetMathLibrary.VInterpTo_Constant
// Offset::0x6405010;
FVector FKismetMathLibrary::VInterpTo_Constant(FVector Current,FVector Target,float DeltaTime,float InterpSpeed);


// Function  Engine.KismetMathLibrary.VLerp
// Offset::0x24017E0;
FVector FKismetMathLibrary::VLerp(FVector A,FVector B,float Alpha);


// Function  Engine.KismetMathLibrary.VSize
// Offset::0x6406690;
double FKismetMathLibrary::VSize(FVector A);


// Function  Engine.KismetMathLibrary.VSize2D
// Offset::0x640B620;
double FKismetMathLibrary::VSize2D(FVector2D A);


// Function  Engine.KismetMathLibrary.VSize2DSquared
// Offset::0x640B580;
double FKismetMathLibrary::VSize2DSquared(FVector2D A);


// Function  Engine.KismetMathLibrary.VSizeSquared
// Offset::0x64065E0;
double FKismetMathLibrary::VSizeSquared(FVector A);


// Function  Engine.KismetMathLibrary.VSizeXY
// Offset::0x6406530;
double FKismetMathLibrary::VSizeXY(FVector A);


// Function  Engine.KismetMathLibrary.VSizeXYSquared
// Offset::0x6406490;
double FKismetMathLibrary::VSizeXYSquared(FVector A);


// Function  Engine.KismetMathLibrary.WeightedMovingAverage_Float
// Offset::0x63E1FE0;
float FKismetMathLibrary::WeightedMovingAverage_Float(float CurrentSample,float PreviousSample,float Weight);


// Function  Engine.KismetMathLibrary.WeightedMovingAverage_FRotator
// Offset::0x63E1CE0;
FRotator FKismetMathLibrary::WeightedMovingAverage_FRotator(FRotator CurrentSample,FRotator PreviousSample,float Weight);


// Function  Engine.KismetMathLibrary.WeightedMovingAverage_FVector
// Offset::0x63E1E60;
FVector FKismetMathLibrary::WeightedMovingAverage_FVector(FVector CurrentSample,FVector PreviousSample,float Weight);


// Function  Engine.KismetMathLibrary.Wrap
// Offset::0x6415240;
int32_t FKismetMathLibrary::Wrap(int32_t Value,int32_t Min,int32_t Max);


// Function  Engine.KismetMathLibrary.Xor_Int64Int64
// Offset::0x64144A0;
int64_t FKismetMathLibrary::Xor_Int64Int64(int64_t A,int64_t B);


// Function  Engine.KismetMathLibrary.Xor_IntInt
// Offset::0x6415B10;
int32_t FKismetMathLibrary::Xor_IntInt(int32_t A,int32_t B);


// Function  Engine.KismetNodeHelperLibrary.BitIsMarked
// Offset::0x6433200;
bool FKismetNodeHelperLibrary::BitIsMarked(int32_t Data,int32_t Index);


// Function  Engine.KismetNodeHelperLibrary.ClearAllBits
// Offset::0x6432F80;
void FKismetNodeHelperLibrary::ClearAllBits(int32_t Data);


// Function  Engine.KismetNodeHelperLibrary.ClearBit
// Offset::0x6433020;
void FKismetNodeHelperLibrary::ClearBit(int32_t Data,int32_t Index);


// Function  Engine.KismetNodeHelperLibrary.GetEnumeratorName
// Offset::0x64328F0;
FName FKismetNodeHelperLibrary::GetEnumeratorName(FEnum* Enum,char EnumeratorValue);


// Function  Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
// Offset::0x64327D0;
FString FKismetNodeHelperLibrary::GetEnumeratorUserFriendlyName(FEnum* Enum,char EnumeratorValue);


// Function  Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex
// Offset::0x6432610;
char FKismetNodeHelperLibrary::GetEnumeratorValueFromIndex(FEnum* Enum,char EnumeratorIndex);


// Function  Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
// Offset::0x64329E0;
int32_t FKismetNodeHelperLibrary::GetFirstUnmarkedBit(int32_t Data,int32_t StartIdx,int32_t NumBits);


// Function  Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
// Offset::0x6432B10;
int32_t FKismetNodeHelperLibrary::GetRandomUnmarkedBit(int32_t Data,int32_t StartIdx,int32_t NumBits);


// Function  Engine.KismetNodeHelperLibrary.GetUnmarkedBit
// Offset::0x6432C40;
int32_t FKismetNodeHelperLibrary::GetUnmarkedBit(int32_t Data,int32_t StartIdx,int32_t NumBits,bool bRandom);


// Function  Engine.KismetNodeHelperLibrary.GetValidValue
// Offset::0x64326F0;
char FKismetNodeHelperLibrary::GetValidValue(FEnum* Enum,char EnumeratorValue);


// Function  Engine.KismetNodeHelperLibrary.HasMarkedBit
// Offset::0x6432DC0;
bool FKismetNodeHelperLibrary::HasMarkedBit(int32_t Data,int32_t NumBits);


// Function  Engine.KismetNodeHelperLibrary.HasUnmarkedBit
// Offset::0x6432EA0;
bool FKismetNodeHelperLibrary::HasUnmarkedBit(int32_t Data,int32_t NumBits);


// Function  Engine.KismetNodeHelperLibrary.MarkBit
// Offset::0x6433110;
void FKismetNodeHelperLibrary::MarkBit(int32_t Data,int32_t Index);


// Function  Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
// Offset::0x64346A0;
void FKismetRenderingLibrary::BeginDrawCanvasToRenderTarget(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,FCanvas* Canvas,FVector2D Size,FDrawToRenderTargetContext Context);


// Function  Engine.KismetRenderingLibrary.BreakSkinWeightInfo
// Offset::0x6433EE0;
void FKismetRenderingLibrary::BreakSkinWeightInfo(FSkelMeshSkinWeightInfo InWeight,int32_t Bone0,char Weight0,int32_t Bone1,char Weight1,int32_t Bone2,char Weight2,int32_t Bone3,char Weight3);


// Function  Engine.KismetRenderingLibrary.CalculateProjectionMatrix
// Offset::0x6433C00;
FMatrix FKismetRenderingLibrary::CalculateProjectionMatrix(FMinimalViewInfo MinimalViewInfo);


// Function  Engine.KismetRenderingLibrary.ClearRenderTarget2D
// Offset::0x6436840;
void FKismetRenderingLibrary::ClearRenderTarget2D(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,FLinearColor ClearColor);


// Function  Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly
// Offset::0x6435C70;
void FKismetRenderingLibrary::ConvertRenderTargetToTexture2DEditorOnly(FObject* WorldContextObject,FTextureRenderTarget2D* RenderTarget,FTexture2D* Texture);


// Function  Engine.KismetRenderingLibrary.CreateRenderTarget2D
// Offset::0x64365B0;
FTextureRenderTarget2D* FKismetRenderingLibrary::CreateRenderTarget2D(FObject* WorldContextObject,FName TextureName,int32_t Width,int32_t Height,enum class ETextureRenderTargetFormat Format,FLinearColor ClearColor,bool bAutoGenerateMipMaps);


// Function  Engine.KismetRenderingLibrary.CreateRenderTarget2DArray
// Offset::0x6436330;
FTextureRenderTarget2DArray* FKismetRenderingLibrary::CreateRenderTarget2DArray(FObject* WorldContextObject,int32_t Width,int32_t Height,int32_t Slices,enum class ETextureRenderTargetFormat Format,FLinearColor ClearColor,bool bAutoGenerateMipMaps);


// Function  Engine.KismetRenderingLibrary.CreateRenderTargetVolume
// Offset::0x64360B0;
FTextureRenderTargetVolume* FKismetRenderingLibrary::CreateRenderTargetVolume(FObject* WorldContextObject,int32_t Width,int32_t Height,int32_t Depth,enum class ETextureRenderTargetFormat Format,FLinearColor ClearColor,bool bAutoGenerateMipMaps);


// Function  Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
// Offset::0x6435F80;
void FKismetRenderingLibrary::DrawMaterialToRenderTarget(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,FMaterialInterface* Material);


// Function  Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
// Offset::0x64345B0;
void FKismetRenderingLibrary::EndDrawCanvasToRenderTarget(FObject* WorldContextObject,FDrawToRenderTargetContext Context);


// Function  Engine.KismetRenderingLibrary.ExportRenderTarget
// Offset::0x6435AE0;
void FKismetRenderingLibrary::ExportRenderTarget(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,FString FilePath,FString Filename);


// Function  Engine.KismetRenderingLibrary.ExportTexture2D
// Offset::0x6434A80;
void FKismetRenderingLibrary::ExportTexture2D(FObject* WorldContextObject,FTexture2D* Texture,FString FilePath,FString Filename);


// Function  Engine.KismetRenderingLibrary.ImportBufferAsTexture2D
// Offset::0x6434890;
FTexture2D* FKismetRenderingLibrary::ImportBufferAsTexture2D(FObject* WorldContextObject,TArray<char> Buffer);


// Function  Engine.KismetRenderingLibrary.ImportFileAsTexture2D
// Offset::0x6434990;
FTexture2D* FKismetRenderingLibrary::ImportFileAsTexture2D(FObject* WorldContextObject,FString Filename);


// Function  Engine.KismetRenderingLibrary.MakeSkinWeightInfo
// Offset::0x64342C0;
FSkelMeshSkinWeightInfo FKismetRenderingLibrary::MakeSkinWeightInfo(int32_t Bone0,char Weight0,int32_t Bone1,char Weight1,int32_t Bone2,char Weight2,int32_t Bone3,char Weight3);


// Function  Engine.KismetRenderingLibrary.ReadRenderTarget
// Offset::0x6435620;
bool FKismetRenderingLibrary::ReadRenderTarget(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,TArray<FColor> OutSamples,bool bNormalize);


// Function  Engine.KismetRenderingLibrary.ReadRenderTargetPixel
// Offset::0x6435950;
FColor FKismetRenderingLibrary::ReadRenderTargetPixel(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,int32_t X,int32_t Y);


// Function  Engine.KismetRenderingLibrary.ReadRenderTargetRaw
// Offset::0x6434E10;
bool FKismetRenderingLibrary::ReadRenderTargetRaw(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,TArray<FLinearColor> OutLinearSamples,bool bNormalize);


// Function  Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel
// Offset::0x6435440;
FLinearColor FKismetRenderingLibrary::ReadRenderTargetRawPixel(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,int32_t X,int32_t Y,bool bNormalize);


// Function  Engine.KismetRenderingLibrary.ReadRenderTargetRawPixelArea
// Offset::0x6435190;
TArray<FLinearColor> FKismetRenderingLibrary::ReadRenderTargetRawPixelArea(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,int32_t MinX,int32_t MinY,int32_t MaxX,int32_t MaxY,bool bNormalize);


// Function  Engine.KismetRenderingLibrary.ReadRenderTargetRawUV
// Offset::0x6434FB0;
FLinearColor FKismetRenderingLibrary::ReadRenderTargetRawUV(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,float U,float V,bool bNormalize);


// Function  Engine.KismetRenderingLibrary.ReadRenderTargetRawUVArea
// Offset::0x6434C10;
TArray<FLinearColor> FKismetRenderingLibrary::ReadRenderTargetRawUVArea(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,FBox2D Area,bool bNormalize);


// Function  Engine.KismetRenderingLibrary.ReadRenderTargetUV
// Offset::0x64357C0;
FColor FKismetRenderingLibrary::ReadRenderTargetUV(FObject* WorldContextObject,FTextureRenderTarget2D* TextureRenderTarget,float U,float V);


// Function  Engine.KismetRenderingLibrary.ReleaseRenderTarget2D
// Offset::0x22FAAB0;
void FKismetRenderingLibrary::ReleaseRenderTarget2D(FTextureRenderTarget2D* TextureRenderTarget);


// Function  Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly
// Offset::0x6435DA0;
FTexture2D* FKismetRenderingLibrary::RenderTargetCreateStaticTexture2DEditorOnly(FTextureRenderTarget2D* RenderTarget,FString Name,enum class TextureCompressionSettings CompressionSettings,enum class TextureMipGenSettings MipSettings);


// Function  Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments
// Offset::0x6433DB0;
void FKismetRenderingLibrary::SetCastInsetShadowForAllAttachments(FPrimitiveComponent* PrimitiveComponent,bool bCastInsetShadow,bool bLightAttachmentsAsGroup);


// Function  Engine.KismetStringLibrary.BuildString_Bool
// Offset::0x643B100;
FString FKismetStringLibrary::BuildString_Bool(FString AppendTo,FString Prefix,bool InBool,FString Suffix);


// Function  Engine.KismetStringLibrary.BuildString_Color
// Offset::0x643A4C0;
FString FKismetStringLibrary::BuildString_Color(FString AppendTo,FString Prefix,FLinearColor InColor,FString Suffix);


// Function  Engine.KismetStringLibrary.BuildString_Double
// Offset::0x643B4E0;
FString FKismetStringLibrary::BuildString_Double(FString AppendTo,FString Prefix,double InDouble,FString Suffix);


// Function  Engine.KismetStringLibrary.BuildString_Int
// Offset::0x643B2F0;
FString FKismetStringLibrary::BuildString_Int(FString AppendTo,FString Prefix,int32_t inInt,FString Suffix);


// Function  Engine.KismetStringLibrary.BuildString_IntVector
// Offset::0x643ACD0;
FString FKismetStringLibrary::BuildString_IntVector(FString AppendTo,FString Prefix,FIntVector InIntVector,FString Suffix);


// Function  Engine.KismetStringLibrary.BuildString_Name
// Offset::0x643A2D0;
FString FKismetStringLibrary::BuildString_Name(FString AppendTo,FString Prefix,FName InName,FString Suffix);


// Function  Engine.KismetStringLibrary.BuildString_Object
// Offset::0x643A6C0;
FString FKismetStringLibrary::BuildString_Object(FString AppendTo,FString Prefix,FObject* InObj,FString Suffix);


// Function  Engine.KismetStringLibrary.BuildString_Rotator
// Offset::0x643A8B0;
FString FKismetStringLibrary::BuildString_Rotator(FString AppendTo,FString Prefix,FRotator InRot,FString Suffix);


// Function  Engine.KismetStringLibrary.BuildString_Vector
// Offset::0x643AEE0;
FString FKismetStringLibrary::BuildString_Vector(FString AppendTo,FString Prefix,FVector InVector,FString Suffix);


// Function  Engine.KismetStringLibrary.BuildString_Vector2d
// Offset::0x643AAD0;
FString FKismetStringLibrary::BuildString_Vector2d(FString AppendTo,FString Prefix,FVector2D InVector2D,FString Suffix);


// Function  Engine.KismetStringLibrary.Concat_StrStr
// Offset::0x643A190;
FString FKismetStringLibrary::Concat_StrStr(FString A,FString B);


// Function  Engine.KismetStringLibrary.Contains
// Offset::0x64398A0;
bool FKismetStringLibrary::Contains(FString SearchIn,FString Substring,bool bUseCase,bool bSearchFromEnd);


// Function  Engine.KismetStringLibrary.Conv_BoolToString
// Offset::0x643C9B0;
FString FKismetStringLibrary::Conv_BoolToString(bool InBool);


// Function  Engine.KismetStringLibrary.Conv_ByteToString
// Offset::0x643CA80;
FString FKismetStringLibrary::Conv_ByteToString(char InByte);


// Function  Engine.KismetStringLibrary.Conv_ColorToString
// Offset::0x643C1D0;
FString FKismetStringLibrary::Conv_ColorToString(FLinearColor InColor);


// Function  Engine.KismetStringLibrary.Conv_DoubleToString
// Offset::0x643CCF0;
FString FKismetStringLibrary::Conv_DoubleToString(double InDouble);


// Function  Engine.KismetStringLibrary.Conv_Int64ToString
// Offset::0x643CB50;
FString FKismetStringLibrary::Conv_Int64ToString(int64_t inInt);


// Function  Engine.KismetStringLibrary.Conv_IntPointToString
// Offset::0x643C640;
FString FKismetStringLibrary::Conv_IntPointToString(FIntPoint InIntPoint);


// Function  Engine.KismetStringLibrary.Conv_IntToString
// Offset::0x643CC20;
FString FKismetStringLibrary::Conv_IntToString(int32_t inInt);


// Function  Engine.KismetStringLibrary.Conv_IntVectorToString
// Offset::0x643C710;
FString FKismetStringLibrary::Conv_IntVectorToString(FIntVector InIntVec);


// Function  Engine.KismetStringLibrary.Conv_MatrixToString
// Offset::0x643C020;
FString FKismetStringLibrary::Conv_MatrixToString(FMatrix InMatrix);


// Function  Engine.KismetStringLibrary.Conv_NameToString
// Offset::0x643C100;
FString FKismetStringLibrary::Conv_NameToString(FName InName);


// Function  Engine.KismetStringLibrary.Conv_ObjectToString
// Offset::0x643C2A0;
FString FKismetStringLibrary::Conv_ObjectToString(FObject* InObj);


// Function  Engine.KismetStringLibrary.Conv_RotatorToString
// Offset::0x643C490;
FString FKismetStringLibrary::Conv_RotatorToString(FRotator InRot);


// Function  Engine.KismetStringLibrary.Conv_StringToColor
// Offset::0x643B6D0;
void FKismetStringLibrary::Conv_StringToColor(FString InString,FLinearColor OutConvertedColor,bool OutIsValid);


// Function  Engine.KismetStringLibrary.Conv_StringToDouble
// Offset::0x643BD60;
double FKismetStringLibrary::Conv_StringToDouble(FString InString);


// Function  Engine.KismetStringLibrary.Conv_StringToInt
// Offset::0x643BEC0;
int32_t FKismetStringLibrary::Conv_StringToInt(FString InString);


// Function  Engine.KismetStringLibrary.Conv_StringToInt64
// Offset::0x643BE10;
int64_t FKismetStringLibrary::Conv_StringToInt64(FString InString);


// Function  Engine.KismetStringLibrary.Conv_StringToName
// Offset::0x643BF70;
FName FKismetStringLibrary::Conv_StringToName(FString InString);


// Function  Engine.KismetStringLibrary.Conv_StringToRotator
// Offset::0x643B820;
void FKismetStringLibrary::Conv_StringToRotator(FString InString,FRotator OutConvertedRotator,bool OutIsValid);


// Function  Engine.KismetStringLibrary.Conv_StringToVector
// Offset::0x643BC10;
void FKismetStringLibrary::Conv_StringToVector(FString InString,FVector OutConvertedVector,bool OutIsValid);


// Function  Engine.KismetStringLibrary.Conv_StringToVector2D
// Offset::0x643B970;
void FKismetStringLibrary::Conv_StringToVector2D(FString InString,FVector2D OutConvertedVector2D,bool OutIsValid);


// Function  Engine.KismetStringLibrary.Conv_StringToVector3f
// Offset::0x643BAC0;
void FKismetStringLibrary::Conv_StringToVector3f(FString InString,FVector3f OutConvertedVector,bool OutIsValid);


// Function  Engine.KismetStringLibrary.Conv_TransformToString
// Offset::0x643C370;
FString FKismetStringLibrary::Conv_TransformToString(FTransform InTrans);


// Function  Engine.KismetStringLibrary.Conv_Vector2dToString
// Offset::0x643C570;
FString FKismetStringLibrary::Conv_Vector2dToString(FVector2D InVec);


// Function  Engine.KismetStringLibrary.Conv_Vector3fToString
// Offset::0x643C7F0;
FString FKismetStringLibrary::Conv_Vector3fToString(FVector3f InVec);


// Function  Engine.KismetStringLibrary.Conv_VectorToString
// Offset::0x643C8D0;
FString FKismetStringLibrary::Conv_VectorToString(FVector InVec);


// Function  Engine.KismetStringLibrary.CullArray
// Offset::0x6438710;
int32_t FKismetStringLibrary::CullArray(FString SourceString,TArray<FString> inArray);


// Function  Engine.KismetStringLibrary.EndsWith
// Offset::0x6438B70;
bool FKismetStringLibrary::EndsWith(FString SourceString,FString InSuffix,enum class ESearchCase SearchCase);


// Function  Engine.KismetStringLibrary.EqualEqual_StriStri
// Offset::0x6439F90;
bool FKismetStringLibrary::EqualEqual_StriStri(FString A,FString B);


// Function  Engine.KismetStringLibrary.EqualEqual_StrStr
// Offset::0x643A090;
bool FKismetStringLibrary::EqualEqual_StrStr(FString A,FString B);


// Function  Engine.KismetStringLibrary.FindSubstring
// Offset::0x6439A40;
int32_t FKismetStringLibrary::FindSubstring(FString SearchIn,FString Substring,bool bUseCase,bool bSearchFromEnd,int32_t StartPosition);


// Function  Engine.KismetStringLibrary.GetCharacterArrayFromString
// Offset::0x64392E0;
TArray<FString> FKismetStringLibrary::GetCharacterArrayFromString(FString SourceString);


// Function  Engine.KismetStringLibrary.GetCharacterAsNumber
// Offset::0x64397B0;
int32_t FKismetStringLibrary::GetCharacterAsNumber(FString SourceString,int32_t Index);


// Function  Engine.KismetStringLibrary.GetSubstring
// Offset::0x64379E0;
FString FKismetStringLibrary::GetSubstring(FString SourceString,int32_t StartIndex,int32_t Length);


// Function  Engine.KismetStringLibrary.IsEmpty
// Offset::0x6439C30;
bool FKismetStringLibrary::IsEmpty(FString InString);


// Function  Engine.KismetStringLibrary.IsNumeric
// Offset::0x6438E10;
bool FKismetStringLibrary::IsNumeric(FString SourceString);


// Function  Engine.KismetStringLibrary.JoinStringArray
// Offset::0x6439430;
FString FKismetStringLibrary::JoinStringArray(TArray<FString> SourceArray,FString Separator);


// Function  Engine.KismetStringLibrary.Left
// Offset::0x6437EE0;
FString FKismetStringLibrary::Left(FString SourceString,int32_t Count);


// Function  Engine.KismetStringLibrary.LeftChop
// Offset::0x6437DB0;
FString FKismetStringLibrary::LeftChop(FString SourceString,int32_t Count);


// Function  Engine.KismetStringLibrary.LeftPad
// Offset::0x6438FF0;
FString FKismetStringLibrary::LeftPad(FString SourceString,int32_t ChCount);


// Function  Engine.KismetStringLibrary.Len
// Offset::0x6439CE0;
int32_t FKismetStringLibrary::Len(FString S);


// Function  Engine.KismetStringLibrary.MatchesWildcard
// Offset::0x6438A20;
bool FKismetStringLibrary::MatchesWildcard(FString SourceString,FString Wildcard,enum class ESearchCase SearchCase);


// Function  Engine.KismetStringLibrary.Mid
// Offset::0x64379E0;
FString FKismetStringLibrary::Mid(FString SourceString,int32_t Start,int32_t Count);


// Function  Engine.KismetStringLibrary.NotEqual_StriStri
// Offset::0x6439D90;
bool FKismetStringLibrary::NotEqual_StriStri(FString A,FString B);


// Function  Engine.KismetStringLibrary.NotEqual_StrStr
// Offset::0x6439E90;
bool FKismetStringLibrary::NotEqual_StrStr(FString A,FString B);


// Function  Engine.KismetStringLibrary.ParseIntoArray
// Offset::0x64395C0;
TArray<FString> FKismetStringLibrary::ParseIntoArray(FString SourceString,FString Delimiter,bool CullEmptyStrings);


// Function  Engine.KismetStringLibrary.Replace
// Offset::0x6438450;
FString FKismetStringLibrary::Replace(FString SourceString,FString From,FString To,enum class ESearchCase SearchCase);


// Function  Engine.KismetStringLibrary.ReplaceInline
// Offset::0x6438290;
int32_t FKismetStringLibrary::ReplaceInline(FString SourceString,FString SearchText,FString ReplacementText,enum class ESearchCase SearchCase);


// Function  Engine.KismetStringLibrary.Reverse
// Offset::0x6438630;
FString FKismetStringLibrary::Reverse(FString SourceString);


// Function  Engine.KismetStringLibrary.Right
// Offset::0x6437C80;
FString FKismetStringLibrary::Right(FString SourceString,int32_t Count);


// Function  Engine.KismetStringLibrary.RightChop
// Offset::0x6437B50;
FString FKismetStringLibrary::RightChop(FString SourceString,int32_t Count);


// Function  Engine.KismetStringLibrary.RightPad
// Offset::0x6438EC0;
FString FKismetStringLibrary::RightPad(FString SourceString,int32_t ChCount);


// Function  Engine.KismetStringLibrary.Split
// Offset::0x6438010;
bool FKismetStringLibrary::Split(FString SourceString,FString InStr,FString LeftS,FString RightS,enum class ESearchCase SearchCase,enum class ESearchDir SearchDir);


// Function  Engine.KismetStringLibrary.StartsWith
// Offset::0x6438CC0;
bool FKismetStringLibrary::StartsWith(FString SourceString,FString InPrefix,enum class ESearchCase SearchCase);


// Function  Engine.KismetStringLibrary.TimeSecondsToString
// Offset::0x6437910;
FString FKismetStringLibrary::TimeSecondsToString(float InSeconds);


// Function  Engine.KismetStringLibrary.ToLower
// Offset::0x6439120;
FString FKismetStringLibrary::ToLower(FString SourceString);


// Function  Engine.KismetStringLibrary.ToUpper
// Offset::0x6439200;
FString FKismetStringLibrary::ToUpper(FString SourceString);


// Function  Engine.KismetStringLibrary.Trim
// Offset::0x6438940;
FString FKismetStringLibrary::Trim(FString SourceString);


// Function  Engine.KismetStringLibrary.TrimTrailing
// Offset::0x6438860;
FString FKismetStringLibrary::TrimTrailing(FString SourceString);


// Function  Engine.KismetStringTableLibrary.GetKeysFromStringTable
// Offset::0x6440BA0;
TArray<FString> FKismetStringTableLibrary::GetKeysFromStringTable(FName TableId);


// Function  Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry
// Offset::0x6440A70;
TArray<FName> FKismetStringTableLibrary::GetMetaDataIdsFromStringTableEntry(FName TableId,FString Key);


// Function  Engine.KismetStringTableLibrary.GetRegisteredStringTables
// Offset::0x6440CE0;
TArray<FName> FKismetStringTableLibrary::GetRegisteredStringTables();


// Function  Engine.KismetStringTableLibrary.GetTableEntryMetaData
// Offset::0x6440D60;
FString FKismetStringTableLibrary::GetTableEntryMetaData(FName TableId,FString Key,FName MetaDataId);


// Function  Engine.KismetStringTableLibrary.GetTableEntrySourceString
// Offset::0x6440EE0;
FString FKismetStringTableLibrary::GetTableEntrySourceString(FName TableId,FString Key);


// Function  Engine.KismetStringTableLibrary.GetTableNamespace
// Offset::0x6441010;
FString FKismetStringTableLibrary::GetTableNamespace(FName TableId);


// Function  Engine.KismetStringTableLibrary.IsRegisteredTableEntry
// Offset::0x64410E0;
bool FKismetStringTableLibrary::IsRegisteredTableEntry(FName TableId,FString Key);


// Function  Engine.KismetStringTableLibrary.IsRegisteredTableId
// Offset::0x64411D0;
bool FKismetStringTableLibrary::IsRegisteredTableId(FName TableId);


// Function  Engine.KismetTextLibrary.AsCurrency_Float
// Offset::0x6466440;
FText FKismetTextLibrary::AsCurrency_Float(float Value,enum class ERoundingMode RoundingMode,bool bAlwaysSign,bool bUseGrouping,int32_t MinimumIntegralDigits,int32_t MaximumIntegralDigits,int32_t MinimumFractionalDigits,int32_t MaximumFractionalDigits,FString CurrencyCode);


// Function  Engine.KismetTextLibrary.AsCurrency_Integer
// Offset::0x6466810;
FText FKismetTextLibrary::AsCurrency_Integer(int32_t Value,enum class ERoundingMode RoundingMode,bool bAlwaysSign,bool bUseGrouping,int32_t MinimumIntegralDigits,int32_t MaximumIntegralDigits,int32_t MinimumFractionalDigits,int32_t MaximumFractionalDigits,FString CurrencyCode);


// Function  Engine.KismetTextLibrary.AsCurrencyBase
// Offset::0x6466BE0;
FText FKismetTextLibrary::AsCurrencyBase(int32_t BaseValue,FString CurrencyCode);


// Function  Engine.KismetTextLibrary.AsDate_DateTime
// Offset::0x6466000;
FText FKismetTextLibrary::AsDate_DateTime(FDateTime InDateTime);


// Function  Engine.KismetTextLibrary.AsDateTime_DateTime
// Offset::0x6465DC0;
FText FKismetTextLibrary::AsDateTime_DateTime(FDateTime In);


// Function  Engine.KismetTextLibrary.AsPercent_Float
// Offset::0x64660F0;
FText FKismetTextLibrary::AsPercent_Float(float Value,enum class ERoundingMode RoundingMode,bool bAlwaysSign,bool bUseGrouping,int32_t MinimumIntegralDigits,int32_t MaximumIntegralDigits,int32_t MinimumFractionalDigits,int32_t MaximumFractionalDigits);


// Function  Engine.KismetTextLibrary.AsTime_DateTime
// Offset::0x6465B80;
FText FKismetTextLibrary::AsTime_DateTime(FDateTime In);


// Function  Engine.KismetTextLibrary.AsTimespan_Timespan
// Offset::0x6465940;
FText FKismetTextLibrary::AsTimespan_Timespan(FTimespan InTimespan);


// Function  Engine.KismetTextLibrary.AsTimeZoneDate_DateTime
// Offset::0x6465EB0;
FText FKismetTextLibrary::AsTimeZoneDate_DateTime(FDateTime InDateTime,FString InTimeZone);


// Function  Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime
// Offset::0x6465C70;
FText FKismetTextLibrary::AsTimeZoneDateTime_DateTime(FDateTime InDateTime,FString InTimeZone);


// Function  Engine.KismetTextLibrary.AsTimeZoneTime_DateTime
// Offset::0x6465A30;
FText FKismetTextLibrary::AsTimeZoneTime_DateTime(FDateTime InDateTime,FString InTimeZone);


// Function  Engine.KismetTextLibrary.Conv_BoolToText
// Offset::0x64678D0;
FText FKismetTextLibrary::Conv_BoolToText(bool InBool);


// Function  Engine.KismetTextLibrary.Conv_ByteToText
// Offset::0x64677F0;
FText FKismetTextLibrary::Conv_ByteToText(char Value);


// Function  Engine.KismetTextLibrary.Conv_ColorToText
// Offset::0x6468C70;
FText FKismetTextLibrary::Conv_ColorToText(FLinearColor InColor);


// Function  Engine.KismetTextLibrary.Conv_DoubleToText
// Offset::0x6467070;
FText FKismetTextLibrary::Conv_DoubleToText(double InDouble,enum class ERoundingMode RoundingMode,bool bAlwaysSign,bool bUseGrouping,int32_t MinimumIntegralDigits,int32_t MaximumIntegralDigits,int32_t MinimumFractionalDigits,int32_t MaximumFractionalDigits);


// Function  Engine.KismetTextLibrary.Conv_FloatToText
// Offset::0x6466D20;
FText FKismetTextLibrary::Conv_FloatToText(float Value,enum class ERoundingMode RoundingMode,bool bAlwaysSign,bool bUseGrouping,int32_t MinimumIntegralDigits,int32_t MaximumIntegralDigits,int32_t MinimumFractionalDigits,int32_t MaximumFractionalDigits);


// Function  Engine.KismetTextLibrary.Conv_Int64ToText
// Offset::0x64673B0;
FText FKismetTextLibrary::Conv_Int64ToText(int64_t Value,bool bAlwaysSign,bool bUseGrouping,int32_t MinimumIntegralDigits,int32_t MaximumIntegralDigits);


// Function  Engine.KismetTextLibrary.Conv_IntToText
// Offset::0x64675D0;
FText FKismetTextLibrary::Conv_IntToText(int32_t Value,bool bAlwaysSign,bool bUseGrouping,int32_t MinimumIntegralDigits,int32_t MaximumIntegralDigits);


// Function  Engine.KismetTextLibrary.Conv_NameToText
// Offset::0x6468990;
FText FKismetTextLibrary::Conv_NameToText(FName InName);


// Function  Engine.KismetTextLibrary.Conv_ObjectToText
// Offset::0x6468D50;
FText FKismetTextLibrary::Conv_ObjectToText(FObject* InObj);


// Function  Engine.KismetTextLibrary.Conv_RotatorToText
// Offset::0x6468F60;
FText FKismetTextLibrary::Conv_RotatorToText(FRotator InRot);


// Function  Engine.KismetTextLibrary.Conv_StringToText
// Offset::0x6468A70;
FText FKismetTextLibrary::Conv_StringToText(FString InString);


// Function  Engine.KismetTextLibrary.Conv_TextToString
// Offset::0x6468B60;
FString FKismetTextLibrary::Conv_TextToString(FText InText);


// Function  Engine.KismetTextLibrary.Conv_TransformToText
// Offset::0x6468E30;
FText FKismetTextLibrary::Conv_TransformToText(FTransform InTrans);


// Function  Engine.KismetTextLibrary.Conv_Vector2dToText
// Offset::0x6469050;
FText FKismetTextLibrary::Conv_Vector2dToText(FVector2D InVec);


// Function  Engine.KismetTextLibrary.Conv_VectorToText
// Offset::0x6469130;
FText FKismetTextLibrary::Conv_VectorToText(FVector InVec);


// Function  Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
// Offset::0x6467C70;
bool FKismetTextLibrary::EqualEqual_IgnoreCase_TextText(FText A,FText B);


// Function  Engine.KismetTextLibrary.EqualEqual_TextText
// Offset::0x6467DD0;
bool FKismetTextLibrary::EqualEqual_TextText(FText A,FText B);


// Function  Engine.KismetTextLibrary.FindTextInLocalizationTable
// Offset::0x6467F30;
bool FKismetTextLibrary::FindTextInLocalizationTable(FString Namespace,FString Key,FText OutText);


// Function  Engine.KismetTextLibrary.Format
// Offset::0x6465620;
FText FKismetTextLibrary::Format(FText InPattern,TArray<FFormatArgumentData> InArgs);


// Function  Engine.KismetTextLibrary.GetEmptyText
// Offset::0x64680C0;
FText FKismetTextLibrary::GetEmptyText();


// Function  Engine.KismetTextLibrary.IsPolyglotDataValid
// Offset::0x6465040;
void FKismetTextLibrary::IsPolyglotDataValid(FPolyglotTextData PolyglotData,bool IsValid,FText ErrorMessage);


// Function  Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
// Offset::0x64679B0;
bool FKismetTextLibrary::NotEqual_IgnoreCase_TextText(FText A,FText B);


// Function  Engine.KismetTextLibrary.NotEqual_TextText
// Offset::0x6467B10;
bool FKismetTextLibrary::NotEqual_TextText(FText A,FText B);


// Function  Engine.KismetTextLibrary.PolyglotDataToText
// Offset::0x6464EE0;
FText FKismetTextLibrary::PolyglotDataToText(FPolyglotTextData PolyglotData);


// Function  Engine.KismetTextLibrary.StringTableIdAndKeyFromText
// Offset::0x6465240;
bool FKismetTextLibrary::StringTableIdAndKeyFromText(FText Text,FName OutTableId,FString OutKey);


// Function  Engine.KismetTextLibrary.TextFromStringTable
// Offset::0x6465400;
FText FKismetTextLibrary::TextFromStringTable(FName TableId,FString Key);


// Function  Engine.KismetTextLibrary.TextIsCultureInvariant
// Offset::0x64686F0;
bool FKismetTextLibrary::TextIsCultureInvariant(FText InText);


// Function  Engine.KismetTextLibrary.TextIsEmpty
// Offset::0x64688B0;
bool FKismetTextLibrary::TextIsEmpty(FText InText);


// Function  Engine.KismetTextLibrary.TextIsFromStringTable
// Offset::0x6465540;
bool FKismetTextLibrary::TextIsFromStringTable(FText Text);


// Function  Engine.KismetTextLibrary.TextIsTransient
// Offset::0x64687D0;
bool FKismetTextLibrary::TextIsTransient(FText InText);


// Function  Engine.KismetTextLibrary.TextToLower
// Offset::0x64685D0;
FText FKismetTextLibrary::TextToLower(FText InText);


// Function  Engine.KismetTextLibrary.TextToUpper
// Offset::0x64684B0;
FText FKismetTextLibrary::TextToUpper(FText InText);


// Function  Engine.KismetTextLibrary.TextTrimPreceding
// Offset::0x6468390;
FText FKismetTextLibrary::TextTrimPreceding(FText InText);


// Function  Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
// Offset::0x6468150;
FText FKismetTextLibrary::TextTrimPrecedingAndTrailing(FText InText);


// Function  Engine.KismetTextLibrary.TextTrimTrailing
// Offset::0x6468270;
FText FKismetTextLibrary::TextTrimTrailing(FText InText);


// Function  Engine.LevelStreaming.CreateInstance
// Offset::0x646E330;
FLevelStreaming* FLevelStreaming::CreateInstance(FString UniqueInstanceName);


// Function  Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval
// Offset::0x646E590;
bool FLevelStreaming::GetIsRequestingUnloadAndRemoval();


// Function  Engine.LevelStreaming.GetLevelScriptActor
// Offset::0x646E300;
FLevelScriptActor* FLevelStreaming::GetLevelScriptActor();


// Function  Engine.LevelStreaming.GetLoadedLevel
// Offset::0x646E470;
FLevel* FLevelStreaming::GetLoadedLevel();


// Function  Engine.LevelStreaming.GetWorldAssetPackageFName
// Offset::0x646E490;
FName FLevelStreaming::GetWorldAssetPackageFName();


// Function  Engine.LevelStreaming.IsLevelLoaded
// Offset::0x646E410;
bool FLevelStreaming::IsLevelLoaded();


// Function  Engine.LevelStreaming.IsLevelVisible
// Offset::0x646E440;
bool FLevelStreaming::IsLevelVisible();


// Function  Engine.LevelStreaming.IsStreamingStatePending
// Offset::0x646E3E0;
bool FLevelStreaming::IsStreamingStatePending();


// Function  Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval
// Offset::0x646E4F0;
void FLevelStreaming::SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);


// Function  Engine.LevelStreaming.SetLevelLODIndex
// Offset::0x646E660;
void FLevelStreaming::SetLevelLODIndex(int32_t LODIndex);


// Function  Engine.LevelStreaming.SetPriority
// Offset::0x646E5C0;
void FLevelStreaming::SetPriority(int32_t NewPriority);


// Function  Engine.LevelStreaming.SetShouldBeLoaded
// Offset::0x573CF50;
void FLevelStreaming::SetShouldBeLoaded(bool bInShouldBeLoaded);


// Function  Engine.LevelStreaming.SetShouldBeVisible
// Offset::0x646E700;
void FLevelStreaming::SetShouldBeVisible(bool bInShouldBeVisible);


// Function  Engine.LevelStreaming.ShouldBeLoaded
// Offset::0x2876320;
bool FLevelStreaming::ShouldBeLoaded();


// Function  Engine.LevelStreamingDynamic.LoadLevelInstance
// Offset::0x646F680;
FLevelStreamingDynamic* FLevelStreamingDynamic::LoadLevelInstance(FObject* WorldContextObject,FString LevelName,FVector Location,FRotator Rotation,bool bOutSuccess,FString OptionalLevelNameOverride,FLevelStreamingDynamic* OptionalLevelStreamingClass,bool bLoadAsTempPackage);


// Function  Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
// Offset::0x646F230;
FLevelStreamingDynamic* FLevelStreamingDynamic::LoadLevelInstanceBySoftObjectPtr(FObject* WorldContextObject,TSoftObjectPtr<FWorld> Level,FVector Location,FRotator Rotation,bool bOutSuccess,FString OptionalLevelNameOverride,FLevelStreamingDynamic* OptionalLevelStreamingClass,bool bLoadAsTempPackage);


// Function  Engine.LevelScriptActor.LevelReset
// Offset::0x3D30810;
void FLevelScriptActor::LevelReset();


// Function  Engine.LevelScriptActor.RemoteEvent
// Offset::0x646D980;
bool FLevelScriptActor::RemoteEvent(FName EventName);


// Function  Engine.LevelScriptActor.SetCinematicMode
// Offset::0x646D790;
void FLevelScriptActor::SetCinematicMode(bool bCinematicMode,bool bHidePlayer,bool bAffectsHUD,bool bAffectsMovement,bool bAffectsTurning);


// Function  Engine.LevelScriptActor.WorldOriginLocationChanged
// Offset::0x3D30810;
void FLevelScriptActor::WorldOriginLocationChanged(FIntVector OldOriginLocation,FIntVector NewOriginLocation);


// Function  Engine.LightWeightInstanceBlueprintFunctionLibrary.ConvertActorToLightWeightInstance
// Offset::0x6475340;
FActorInstanceHandle FLightWeightInstanceBlueprintFunctionLibrary::ConvertActorToLightWeightInstance(FActor* Actor);


// Function  Engine.LightWeightInstanceBlueprintFunctionLibrary.CreateNewLightWeightInstance
// Offset::0x64753F0;
FActorInstanceHandle FLightWeightInstanceBlueprintFunctionLibrary::CreateNewLightWeightInstance(FObject* ActorClass,FTransform Transform,FDataLayer* Layer,FWorld* World);


// Function  Engine.LightWeightInstanceManager.OnRep_Transforms
// Offset::0x1BBB1D0;
void FLightWeightInstanceManager::OnRep_Transforms();


// Function  Engine.LightWeightInstanceStaticMeshManager.OnRep_StaticMesh
// Offset::0x6475FF0;
void FLightWeightInstanceStaticMeshManager::OnRep_StaticMesh();


// Function  Engine.LocalLightComponent.GetUnitsConversionFactor
// Offset::0x64766E0;
float FLocalLightComponent::GetUnitsConversionFactor(enum class ELightUnits SrcUnits,enum class ELightUnits TargetUnits,float CosHalfConeAngle);


// Function  Engine.LocalLightComponent.SetAttenuationRadius
// Offset::0x64768A0;
void FLocalLightComponent::SetAttenuationRadius(float NewRadius);


// Function  Engine.LocalLightComponent.SetIntensityUnits
// Offset::0x6476810;
void FLocalLightComponent::SetIntensityUnits(enum class ELightUnits NewIntensityUnits);


// Function  Engine.LODSyncComponent.GetLODSyncDebugText
// Offset::0x6477370;
FString FLODSyncComponent::GetLODSyncDebugText();


// Function  Engine.MaterialBillboardComponent.AddElement
// Offset::0x6478FC0;
void FMaterialBillboardComponent::AddElement(FMaterialInterface* Material,FCurveFloat* DistanceToOpacityCurve,bool bSizeIsInScreenSpace,float BaseSizeX,float BaseSizeY,FCurveFloat* DistanceToSizeCurve);


// Function  Engine.MaterialBillboardComponent.SetElements
// Offset::0x64791F0;
void FMaterialBillboardComponent::SetElements(TArray<FMaterialSpriteElement> NewElements);


// Function  Engine.MaterialInstanceDynamic.CopyInterpParameters
// Offset::0x648EE50;
void FMaterialInstanceDynamic::CopyInterpParameters(FMaterialInstance* Source);


// Function  Engine.MaterialInstanceDynamic.CopyParameterOverrides
// Offset::0x648EDB0;
void FMaterialInstanceDynamic::CopyParameterOverrides(FMaterialInstance* MaterialInstance);


// Function  Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
// Offset::0x648EEF0;
void FMaterialInstanceDynamic::K2_CopyMaterialInstanceParameters(FMaterialInterface* Source,bool bQuickParametersOnly);


// Function  Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
// Offset::0x648E980;
float FMaterialInstanceDynamic::K2_GetScalarParameterValue(FName ParameterName);


// Function  Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo
// Offset::0x648FA40;
float FMaterialInstanceDynamic::K2_GetScalarParameterValueByInfo(FMaterialParameterInfo ParameterInfo);


// Function  Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
// Offset::0x648E8E0;
FTexture* FMaterialInstanceDynamic::K2_GetTextureParameterValue(FName ParameterName);


// Function  Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo
// Offset::0x648F570;
FTexture* FMaterialInstanceDynamic::K2_GetTextureParameterValueByInfo(FMaterialParameterInfo ParameterInfo);


// Function  Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
// Offset::0x648F1E0;
FLinearColor FMaterialInstanceDynamic::K2_GetVectorParameterValue(FName ParameterName);


// Function  Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo
// Offset::0x648F110;
FLinearColor FMaterialInstanceDynamic::K2_GetVectorParameterValueByInfo(FMaterialParameterInfo ParameterInfo);


// Function  Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
// Offset::0x648EFE0;
void FMaterialInstanceDynamic::K2_InterpolateMaterialInstanceParams(FMaterialInstance* SourceA,FMaterialInstance* SourceB,float Alpha);


// Function  Engine.MaterialInstanceDynamic.SetDoubleVectorParameterValue
// Offset::0x648F390;
void FMaterialInstanceDynamic::SetDoubleVectorParameterValue(FName ParameterName,FVector Value);


// Function  Engine.MaterialInstanceDynamic.SetRuntimeVirtualTextureParameterValue
// Offset::0x648F730;
void FMaterialInstanceDynamic::SetRuntimeVirtualTextureParameterValue(FName ParameterName,FRuntimeVirtualTexture* Value);


// Function  Engine.MaterialInstanceDynamic.SetRuntimeVirtualTextureParameterValueByInfo
// Offset::0x648F630;
void FMaterialInstanceDynamic::SetRuntimeVirtualTextureParameterValueByInfo(FMaterialParameterInfo ParameterInfo,FRuntimeVirtualTexture* Value);


// Function  Engine.MaterialInstanceDynamic.SetScalarParameterValue
// Offset::0x648FC00;
void FMaterialInstanceDynamic::SetScalarParameterValue(FName ParameterName,float Value);


// Function  Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo
// Offset::0x648FB00;
void FMaterialInstanceDynamic::SetScalarParameterValueByInfo(FMaterialParameterInfo ParameterInfo,float Value);


// Function  Engine.MaterialInstanceDynamic.SetTextureParameterValue
// Offset::0x648F910;
void FMaterialInstanceDynamic::SetTextureParameterValue(FName ParameterName,FTexture* Value,bool bAlwaysUpdate);


// Function  Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo
// Offset::0x648F810;
void FMaterialInstanceDynamic::SetTextureParameterValueByInfo(FMaterialParameterInfo ParameterInfo,FTexture* Value);


// Function  Engine.MaterialInstanceDynamic.SetVectorParameterValue
// Offset::0x648F480;
void FMaterialInstanceDynamic::SetVectorParameterValue(FName ParameterName,FLinearColor Value);


// Function  Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo
// Offset::0x648F290;
void FMaterialInstanceDynamic::SetVectorParameterValueByInfo(FMaterialParameterInfo ParameterInfo,FLinearColor Value);


// Function  Engine.MaterialParameterCollection.GetScalarParameterDefaultValue
// Offset::0x6492730;
float FMaterialParameterCollection::GetScalarParameterDefaultValue(FName ParameterName,bool bParameterFound);


// Function  Engine.MaterialParameterCollection.GetScalarParameterNames
// Offset::0x64928B0;
TArray<FName> FMaterialParameterCollection::GetScalarParameterNames();


// Function  Engine.MaterialParameterCollection.GetVectorParameterDefaultValue
// Offset::0x6492630;
FLinearColor FMaterialParameterCollection::GetVectorParameterDefaultValue(FName ParameterName,bool bParameterFound);


// Function  Engine.MaterialParameterCollection.GetVectorParameterNames
// Offset::0x6492830;
TArray<FName> FMaterialParameterCollection::GetVectorParameterNames();


// Function  Engine.MatineeActor.ChangePlaybackDirection
// Offset::0x6331B50;
void FMatineeActor::ChangePlaybackDirection();


// Function  Engine.MatineeActor.EnableGroupByName
// Offset::0x6493230;
void FMatineeActor::EnableGroupByName(FString GroupName,bool bEnable);


// Function  Engine.MatineeActor.Pause
// Offset::0x1BB4100;
void FMatineeActor::Pause();


// Function  Engine.MatineeActor.Play
// Offset::0x1A802D0;
void FMatineeActor::Play();


// Function  Engine.MatineeActor.Reverse
// Offset::0x1A80310;
void FMatineeActor::Reverse();


// Function  Engine.MatineeActor.SetLoopingState
// Offset::0x2D4D8D0;
void FMatineeActor::SetLoopingState(bool bNewLooping);


// Function  Engine.MatineeActor.SetPosition
// Offset::0x6493370;
void FMatineeActor::SetPosition(float NewPosition,bool bJump);


// Function  Engine.MatineeActor.Stop
// Offset::0x1A802F0;
void FMatineeActor::Stop();


// Function  Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis
// Offset::0x6497D20;
void FMeshVertexPainterKismetLibrary::PaintVerticesLerpAlongAxis(FStaticMeshComponent* StaticMeshComponent,FLinearColor StartColor,FLinearColor EndColor,enum class EVertexPaintAxis Axis,bool bConvertToSRGB);


// Function  Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor
// Offset::0x6497EF0;
void FMeshVertexPainterKismetLibrary::PaintVerticesSingleColor(FStaticMeshComponent* StaticMeshComponent,FLinearColor FillColor,bool bConvertToSRGB);


// Function  Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices
// Offset::0x6497C90;
void FMeshVertexPainterKismetLibrary::RemovePaintedVertices(FStaticMeshComponent* StaticMeshComponent);


// Function  Engine.NetPushModelHelpers.MarkPropertyDirty
// Offset::0x649E160;
void FNetPushModelHelpers::MarkPropertyDirty(FObject* Object,FName PropertyName);


// Function  Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex
// Offset::0x649E030;
void FNetPushModelHelpers::MarkPropertyDirtyFromRepIndex(FObject* Object,int32_t RepIndex,FName PropertyName);


// Function  Engine.ParticleSystem.ContainsEmitterType
// Offset::0x64ACC50;
bool FParticleSystem::ContainsEmitterType(FObject* TypeData);


// Function  Engine.ParticleSystemComponent.BeginTrails
// Offset::0x64AEA20;
void FParticleSystemComponent::BeginTrails(FName InFirstSocketName,FName InSecondSocketName,enum class ETrailWidthMode InWidthMode,float InWidth);


// Function  Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
// Offset::0x64AE790;
FMaterialInstanceDynamic* FParticleSystemComponent::CreateNamedDynamicMaterialInstance(FName InName,FMaterialInterface* SourceMaterial);


// Function  Engine.ParticleSystemComponent.EndTrails
// Offset::0x64AEA00;
void FParticleSystemComponent::EndTrails();


// Function  Engine.ParticleSystemComponent.GenerateParticleEvent
// Offset::0x64AE4B0;
void FParticleSystemComponent::GenerateParticleEvent(FName InEventName,float InEmitterTime,FVector InLocation,FVector InDirection,FVector InVelocity);


// Function  Engine.ParticleSystemComponent.GetBeamEndPoint
// Offset::0x64AF4F0;
bool FParticleSystemComponent::GetBeamEndPoint(int32_t EmitterIndex,FVector OutEndPoint);


// Function  Engine.ParticleSystemComponent.GetBeamSourcePoint
// Offset::0x64AF3B0;
bool FParticleSystemComponent::GetBeamSourcePoint(int32_t EmitterIndex,int32_t SourceIndex,FVector OutSourcePoint);


// Function  Engine.ParticleSystemComponent.GetBeamSourceStrength
// Offset::0x64AF120;
bool FParticleSystemComponent::GetBeamSourceStrength(int32_t EmitterIndex,int32_t SourceIndex,float OutSourceStrength);


// Function  Engine.ParticleSystemComponent.GetBeamSourceTangent
// Offset::0x64AF270;
bool FParticleSystemComponent::GetBeamSourceTangent(int32_t EmitterIndex,int32_t SourceIndex,FVector OutTangentPoint);


// Function  Engine.ParticleSystemComponent.GetBeamTargetPoint
// Offset::0x64AEFE0;
bool FParticleSystemComponent::GetBeamTargetPoint(int32_t EmitterIndex,int32_t TargetIndex,FVector OutTargetPoint);


// Function  Engine.ParticleSystemComponent.GetBeamTargetStrength
// Offset::0x64AED50;
bool FParticleSystemComponent::GetBeamTargetStrength(int32_t EmitterIndex,int32_t TargetIndex,float OutTargetStrength);


// Function  Engine.ParticleSystemComponent.GetBeamTargetTangent
// Offset::0x64AEEA0;
bool FParticleSystemComponent::GetBeamTargetTangent(int32_t EmitterIndex,int32_t TargetIndex,FVector OutTangentPoint);


// Function  Engine.ParticleSystemComponent.GetNamedMaterial
// Offset::0x64AE6F0;
FMaterialInterface* FParticleSystemComponent::GetNamedMaterial(FName InName);


// Function  Engine.ParticleSystemComponent.GetNumActiveParticles
// Offset::0x64AEBA0;
int32_t FParticleSystemComponent::GetNumActiveParticles();


// Function  Engine.ParticleSystemComponent.SetAutoAttachParams
// Offset::0x64AFE30;
void FParticleSystemComponent::SetAutoAttachParams(FSceneComponent* Parent,FName SocketName,enum class EAttachLocation LocationType);


// Function  Engine.ParticleSystemComponent.SetBeamEndPoint
// Offset::0x64AFD40;
void FParticleSystemComponent::SetBeamEndPoint(int32_t EmitterIndex,FVector NewEndPoint);


// Function  Engine.ParticleSystemComponent.SetBeamSourcePoint
// Offset::0x64AFC00;
void FParticleSystemComponent::SetBeamSourcePoint(int32_t EmitterIndex,FVector NewSourcePoint,int32_t SourceIndex);


// Function  Engine.ParticleSystemComponent.SetBeamSourceStrength
// Offset::0x64AF990;
void FParticleSystemComponent::SetBeamSourceStrength(int32_t EmitterIndex,float NewSourceStrength,int32_t SourceIndex);


// Function  Engine.ParticleSystemComponent.SetBeamSourceTangent
// Offset::0x64AFAC0;
void FParticleSystemComponent::SetBeamSourceTangent(int32_t EmitterIndex,FVector NewTangentPoint,int32_t SourceIndex);


// Function  Engine.ParticleSystemComponent.SetBeamTargetPoint
// Offset::0x64AF850;
void FParticleSystemComponent::SetBeamTargetPoint(int32_t EmitterIndex,FVector NewTargetPoint,int32_t TargetIndex);


// Function  Engine.ParticleSystemComponent.SetBeamTargetStrength
// Offset::0x64AF5E0;
void FParticleSystemComponent::SetBeamTargetStrength(int32_t EmitterIndex,float NewTargetStrength,int32_t TargetIndex);


// Function  Engine.ParticleSystemComponent.SetBeamTargetTangent
// Offset::0x64AF710;
void FParticleSystemComponent::SetBeamTargetTangent(int32_t EmitterIndex,FVector NewTangentPoint,int32_t TargetIndex);


// Function  Engine.ParticleSystemComponent.SetMaterialParameter
// Offset::0x64AEC70;
void FParticleSystemComponent::SetMaterialParameter(FName ParameterName,FMaterialInterface* Param);


// Function  Engine.ParticleSystemComponent.SetTemplate
// Offset::0x64AEBD0;
void FParticleSystemComponent::SetTemplate(FParticleSystem* NewTemplate);


// Function  Engine.ParticleSystemComponent.SetTrailSourceData
// Offset::0x64AE880;
void FParticleSystemComponent::SetTrailSourceData(FName InFirstSocketName,FName InSecondSocketName,enum class ETrailWidthMode InWidthMode,float InWidth);


// Function  Engine.PawnNoiseEmitterComponent.MakeNoise
// Offset::0x64B4C60;
void FPawnNoiseEmitterComponent::MakeNoise(FActor* NoiseMaker,float Loudness,FVector NoiseLocation);


// Function  Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
// Offset::0x64B55B0;
void FPhysicalAnimationComponent::ApplyPhysicalAnimationProfileBelow(FName BodyName,FName ProfileName,bool bIncludeSelf,bool bClearNotFound);


// Function  Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
// Offset::0x64B5940;
void FPhysicalAnimationComponent::ApplyPhysicalAnimationSettings(FName BodyName,FPhysicalAnimationData PhysicalAnimationData);


// Function  Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
// Offset::0x64B57E0;
void FPhysicalAnimationComponent::ApplyPhysicalAnimationSettingsBelow(FName BodyName,FPhysicalAnimationData PhysicalAnimationData,bool bIncludeSelf);


// Function  Engine.PhysicalAnimationComponent.GetBodyTargetTransform
// Offset::0x64B54C0;
FTransform FPhysicalAnimationComponent::GetBodyTargetTransform(FName BodyName);


// Function  Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
// Offset::0x64B5A50;
void FPhysicalAnimationComponent::SetSkeletalMeshComponent(FSkeletalMeshComponent* InSkeletalMeshComponent);


// Function  Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
// Offset::0x64B5740;
void FPhysicalAnimationComponent::SetStrengthMultiplyer(float InStrengthMultiplyer);


// Function  Engine.PhysicsAsset.ClearConstraintsAndBodySetups
// Offset::0x64B6370;
void FPhysicsAsset::ClearConstraintsAndBodySetups();


// Function  Engine.PhysicsAsset.Combine
// Offset::0x64B62C0;
void FPhysicsAsset::Combine(TArray<FPhysicsAsset*> Others);


// Function  Engine.PhysicsConstraintComponent.BreakConstraint
// Offset::0x64B9A20;
void FPhysicsConstraintComponent::BreakConstraint();


// Function  Engine.PhysicsConstraintComponent.GetConstrainedComponents
// Offset::0x64B9A40;
void FPhysicsConstraintComponent::GetConstrainedComponents(FPrimitiveComponent* OutComponent1,FName OutBoneName1,FPrimitiveComponent* OutComponent2,FName OutBoneName2);


// Function  Engine.PhysicsConstraintComponent.GetConstraint
// Offset::0x64B7D10;
FConstraintInstanceAccessor FPhysicsConstraintComponent::GetConstraint();


// Function  Engine.PhysicsConstraintComponent.GetConstraintForce
// Offset::0x64B7DA0;
void FPhysicsConstraintComponent::GetConstraintForce(FVector OutLinearForce,FVector OutAngularForce);


// Function  Engine.PhysicsConstraintComponent.GetCurrentSwing1
// Offset::0x64B82D0;
float FPhysicsConstraintComponent::GetCurrentSwing1();


// Function  Engine.PhysicsConstraintComponent.GetCurrentSwing2
// Offset::0x64B82A0;
float FPhysicsConstraintComponent::GetCurrentSwing2();


// Function  Engine.PhysicsConstraintComponent.GetCurrentTwist
// Offset::0x64B8300;
float FPhysicsConstraintComponent::GetCurrentTwist();


// Function  Engine.PhysicsConstraintComponent.IsBroken
// Offset::0x64B7D70;
bool FPhysicsConstraintComponent::IsBroken();


// Function  Engine.PhysicsConstraintComponent.SetAngularBreakable
// Offset::0x64B84C0;
void FPhysicsConstraintComponent::SetAngularBreakable(bool bAngularBreakable,float AngularBreakThreshold);


// Function  Engine.PhysicsConstraintComponent.SetAngularDriveMode
// Offset::0x64B91F0;
void FPhysicsConstraintComponent::SetAngularDriveMode(enum class EAngularDriveMode DriveMode);


// Function  Engine.PhysicsConstraintComponent.SetAngularDriveParams
// Offset::0x64B8D10;
void FPhysicsConstraintComponent::SetAngularDriveParams(float PositionStrength,float VelocityStrength,float InForceLimit);


// Function  Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
// Offset::0x64B96A0;
void FPhysicsConstraintComponent::SetAngularOrientationDrive(bool bEnableSwingDrive,bool bEnableTwistDrive);


// Function  Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
// Offset::0x64B8EE0;
void FPhysicsConstraintComponent::SetAngularOrientationTarget(FRotator InPosTarget);


// Function  Engine.PhysicsConstraintComponent.SetAngularPlasticity
// Offset::0x64B83D0;
void FPhysicsConstraintComponent::SetAngularPlasticity(bool bAngularPlasticity,float AngularPlasticityThreshold);


// Function  Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
// Offset::0x64B8990;
void FPhysicsConstraintComponent::SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType,float Swing1LimitAngle);


// Function  Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
// Offset::0x64B88B0;
void FPhysicsConstraintComponent::SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType,float Swing2LimitAngle);


// Function  Engine.PhysicsConstraintComponent.SetAngularTwistLimit
// Offset::0x64B87D0;
void FPhysicsConstraintComponent::SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType,float TwistLimitAngle);


// Function  Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
// Offset::0x64B9410;
void FPhysicsConstraintComponent::SetAngularVelocityDrive(bool bEnableSwingDrive,bool bEnableTwistDrive);


// Function  Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
// Offset::0x64B9280;
void FPhysicsConstraintComponent::SetAngularVelocityDriveSLERP(bool bEnableSLERP);


// Function  Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
// Offset::0x64B9320;
void FPhysicsConstraintComponent::SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive,bool bEnableSwingDrive);


// Function  Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
// Offset::0x64B8E40;
void FPhysicsConstraintComponent::SetAngularVelocityTarget(FVector InVelTarget);


// Function  Engine.PhysicsConstraintComponent.SetConstrainedComponents
// Offset::0x64B9C00;
void FPhysicsConstraintComponent::SetConstrainedComponents(FPrimitiveComponent* Component1,FName BoneName1,FPrimitiveComponent* Component2,FName BoneName2);


// Function  Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
// Offset::0x64B8160;
void FPhysicsConstraintComponent::SetConstraintReferenceFrame(enum class EConstraintFrame Frame,FTransform RefFrame);


// Function  Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
// Offset::0x64B7F30;
void FPhysicsConstraintComponent::SetConstraintReferenceOrientation(enum class EConstraintFrame Frame,FVector PriAxis,FVector SecAxis);


// Function  Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
// Offset::0x64B8070;
void FPhysicsConstraintComponent::SetConstraintReferencePosition(enum class EConstraintFrame Frame,FVector RefPosition);


// Function  Engine.PhysicsConstraintComponent.SetContactTransferScale
// Offset::0x64B8330;
void FPhysicsConstraintComponent::SetContactTransferScale(float ContactTransferScale);


// Function  Engine.PhysicsConstraintComponent.SetDisableCollision
// Offset::0x64B7E90;
void FPhysicsConstraintComponent::SetDisableCollision(bool bDisableCollision);


// Function  Engine.PhysicsConstraintComponent.SetLinearBreakable
// Offset::0x64B86E0;
void FPhysicsConstraintComponent::SetLinearBreakable(bool bLinearBreakable,float LinearBreakThreshold);


// Function  Engine.PhysicsConstraintComponent.SetLinearDriveParams
// Offset::0x64B8F80;
void FPhysicsConstraintComponent::SetLinearDriveParams(float PositionStrength,float VelocityStrength,float InForceLimit);


// Function  Engine.PhysicsConstraintComponent.SetLinearPlasticity
// Offset::0x64B85B0;
void FPhysicsConstraintComponent::SetLinearPlasticity(bool bLinearPlasticity,float LinearPlasticityThreshold,enum class EConstraintPlasticityType PlasticityType);


// Function  Engine.PhysicsConstraintComponent.SetLinearPositionDrive
// Offset::0x64B98E0;
void FPhysicsConstraintComponent::SetLinearPositionDrive(bool bEnableDriveX,bool bEnableDriveY,bool bEnableDriveZ);


// Function  Engine.PhysicsConstraintComponent.SetLinearPositionTarget
// Offset::0x64B9150;
void FPhysicsConstraintComponent::SetLinearPositionTarget(FVector InPosTarget);


// Function  Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
// Offset::0x64B97A0;
void FPhysicsConstraintComponent::SetLinearVelocityDrive(bool bEnableDriveX,bool bEnableDriveY,bool bEnableDriveZ);


// Function  Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
// Offset::0x64B90B0;
void FPhysicsConstraintComponent::SetLinearVelocityTarget(FVector InVelTarget);


// Function  Engine.PhysicsConstraintComponent.SetLinearXLimit
// Offset::0x64B8C30;
void FPhysicsConstraintComponent::SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType,float LimitSize);


// Function  Engine.PhysicsConstraintComponent.SetLinearYLimit
// Offset::0x64B8B50;
void FPhysicsConstraintComponent::SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType,float LimitSize);


// Function  Engine.PhysicsConstraintComponent.SetLinearZLimit
// Offset::0x64B8A70;
void FPhysicsConstraintComponent::SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType,float LimitSize);


// Function  Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
// Offset::0x64B9510;
void FPhysicsConstraintComponent::SetOrientationDriveSLERP(bool bEnableSLERP);


// Function  Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
// Offset::0x64B95B0;
void FPhysicsConstraintComponent::SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive,bool bEnableSwingDrive);


// Function  Engine.PhysicsHandleComponent.GetGrabbedComponent
// Offset::0x58F7730;
FPrimitiveComponent* FPhysicsHandleComponent::GetGrabbedComponent();


// Function  Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
// Offset::0x64BB8C0;
void FPhysicsHandleComponent::GetTargetLocationAndRotation(FVector TargetLocation,FRotator TargetRotation);


// Function  Engine.PhysicsHandleComponent.GrabComponent
// Offset::0x64BBF10;
void FPhysicsHandleComponent::GrabComponent(FPrimitiveComponent* Component,FName InBoneName,FVector GrabLocation,bool bConstrainRotation);


// Function  Engine.PhysicsHandleComponent.GrabComponentAtLocation
// Offset::0x64BBDD0;
void FPhysicsHandleComponent::GrabComponentAtLocation(FPrimitiveComponent* Component,FName InBoneName,FVector GrabLocation);


// Function  Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
// Offset::0x64BBC00;
void FPhysicsHandleComponent::GrabComponentAtLocationWithRotation(FPrimitiveComponent* Component,FName InBoneName,FVector Location,FRotator Rotation);


// Function  Engine.PhysicsHandleComponent.ReleaseComponent
// Offset::0x25DD550;
void FPhysicsHandleComponent::ReleaseComponent();


// Function  Engine.PhysicsHandleComponent.SetAngularDamping
// Offset::0x64BB6E0;
void FPhysicsHandleComponent::SetAngularDamping(float NewAngularDamping);


// Function  Engine.PhysicsHandleComponent.SetAngularStiffness
// Offset::0x64BB640;
void FPhysicsHandleComponent::SetAngularStiffness(float NewAngularStiffness);


// Function  Engine.PhysicsHandleComponent.SetInterpolationSpeed
// Offset::0x64BB5A0;
void FPhysicsHandleComponent::SetInterpolationSpeed(float NewInterpolationSpeed);


// Function  Engine.PhysicsHandleComponent.SetLinearDamping
// Offset::0x64BB820;
void FPhysicsHandleComponent::SetLinearDamping(float NewLinearDamping);


// Function  Engine.PhysicsHandleComponent.SetLinearStiffness
// Offset::0x64BB780;
void FPhysicsHandleComponent::SetLinearStiffness(float NewLinearStiffness);


// Function  Engine.PhysicsHandleComponent.SetTargetLocation
// Offset::0x64BBB60;
void FPhysicsHandleComponent::SetTargetLocation(FVector NewLocation);


// Function  Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
// Offset::0x64BB9B0;
void FPhysicsHandleComponent::SetTargetLocationAndRotation(FVector NewLocation,FRotator NewRotation);


// Function  Engine.PhysicsHandleComponent.SetTargetRotation
// Offset::0x64BBAC0;
void FPhysicsHandleComponent::SetTargetRotation(FRotator NewRotation);


// Function  Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
// Offset::0x64BD860;
float FPhysicsSpringComponent::GetNormalizedCompressionScalar();


// Function  Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
// Offset::0x64BD7A0;
FVector FPhysicsSpringComponent::GetSpringCurrentEndPoint();


// Function  Engine.PhysicsSpringComponent.GetSpringDirection
// Offset::0x64BD740;
FVector FPhysicsSpringComponent::GetSpringDirection();


// Function  Engine.PhysicsSpringComponent.GetSpringRestingPoint
// Offset::0x64BD800;
FVector FPhysicsSpringComponent::GetSpringRestingPoint();


// Function  Engine.PlanarReflection.OnInterpToggle
// Offset::0x64BDF90;
void FPlanarReflection::OnInterpToggle(bool bEnable);


// Function  Engine.SceneCaptureComponent.ClearHiddenComponents
// Offset::0x64FD2F0;
void FSceneCaptureComponent::ClearHiddenComponents();


// Function  Engine.SceneCaptureComponent.ClearShowOnlyComponents
// Offset::0x64FD310;
void FSceneCaptureComponent::ClearShowOnlyComponents();


// Function  Engine.SceneCaptureComponent.HideActorComponents
// Offset::0x64FD650;
void FSceneCaptureComponent::HideActorComponents(FActor* InActor,bool bIncludeFromChildActors);


// Function  Engine.SceneCaptureComponent.HideComponent
// Offset::0x64FD740;
void FSceneCaptureComponent::HideComponent(FPrimitiveComponent* InComponent);


// Function  Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
// Offset::0x64FD330;
void FSceneCaptureComponent::RemoveShowOnlyActorComponents(FActor* InActor,bool bIncludeFromChildActors);


// Function  Engine.SceneCaptureComponent.RemoveShowOnlyComponent
// Offset::0x64FD420;
void FSceneCaptureComponent::RemoveShowOnlyComponent(FPrimitiveComponent* InComponent);


// Function  Engine.SceneCaptureComponent.SetCaptureSortPriority
// Offset::0x64FD250;
void FSceneCaptureComponent::SetCaptureSortPriority(int32_t NewCaptureSortPriority);


// Function  Engine.SceneCaptureComponent.ShowOnlyActorComponents
// Offset::0x64FD4C0;
void FSceneCaptureComponent::ShowOnlyActorComponents(FActor* InActor,bool bIncludeFromChildActors);


// Function  Engine.SceneCaptureComponent.ShowOnlyComponent
// Offset::0x64FD5B0;
void FSceneCaptureComponent::ShowOnlyComponent(FPrimitiveComponent* InComponent);


// Function  Engine.PlatformInterfaceWebResponse.GetHeader
// Offset::0x64BEE60;
void FPlatformInterfaceWebResponse::GetHeader(int32_t HeaderIndex,FString Header,FString Value);


// Function  Engine.PlatformInterfaceWebResponse.GetHeaderValue
// Offset::0x64BED70;
FString FPlatformInterfaceWebResponse::GetHeaderValue(FString HeaderName);


// Function  Engine.PlatformInterfaceWebResponse.GetNumHeaders
// Offset::0x1F81A20;
int32_t FPlatformInterfaceWebResponse::GetNumHeaders();


// Function  Engine.PlayerInput.ClearSmoothing
// Offset::0x64DCA90;
void FPlayerInput::ClearSmoothing();


// Function  Engine.PlayerInput.InvertAxis
// Offset::0x64DCAB0;
void FPlayerInput::InvertAxis(FName AxisName);


// Function  Engine.PlayerInput.InvertAxisKey
// Offset::0x64DCB50;
void FPlayerInput::InvertAxisKey(FKey AxisKey);


// Function  Engine.PlayerInput.SetBind
// Offset::0x64DCC40;
void FPlayerInput::SetBind(FName BindName,FString Command);


// Function  Engine.PlayerInput.SetMouseSensitivity
// Offset::0x64DCD30;
void FPlayerInput::SetMouseSensitivity(float Sensitivity);


// Function  Engine.PointLight.SetLightFalloffExponent
// Offset::0x64DEE20;
void FPointLight::SetLightFalloffExponent(float NewLightFalloffExponent);


// Function  Engine.PointLight.SetRadius
// Offset::0x64DEEC0;
void FPointLight::SetRadius(float NewRadius);


// Function  Engine.PointLightComponent.SetInverseExposureBlend
// Offset::0x64DF500;
void FPointLightComponent::SetInverseExposureBlend(float NewInverseExposureBlend);


// Function  Engine.PointLightComponent.SetLightFalloffExponent
// Offset::0x64DF5A0;
void FPointLightComponent::SetLightFalloffExponent(float NewLightFalloffExponent);


// Function  Engine.PointLightComponent.SetSoftSourceRadius
// Offset::0x64DF3C0;
void FPointLightComponent::SetSoftSourceRadius(float bNewValue);


// Function  Engine.PointLightComponent.SetSourceLength
// Offset::0x64DF320;
void FPointLightComponent::SetSourceLength(float NewValue);


// Function  Engine.PointLightComponent.SetSourceRadius
// Offset::0x64DF460;
void FPointLightComponent::SetSourceRadius(float bNewValue);


// Function  Engine.PostProcessComponent.AddOrUpdateBlendable
// Offset::0x64E1320;
void FPostProcessComponent::AddOrUpdateBlendable(TScriptInterface<IBlendableInterface> InBlendableObject,float InWeight);


// Function  Engine.PostProcessVolume.AddOrUpdateBlendable
// Offset::0x64E2E10;
void FPostProcessVolume::AddOrUpdateBlendable(TScriptInterface<IBlendableInterface> InBlendableObject,float InWeight);


// Function  Engine.RadialForceActor.DisableForce
// Offset::0x1A802F0;
void FRadialForceActor::DisableForce();


// Function  Engine.RadialForceActor.EnableForce
// Offset::0x1A802D0;
void FRadialForceActor::EnableForce();


// Function  Engine.RadialForceActor.FireImpulse
// Offset::0x21D6F30;
void FRadialForceActor::FireImpulse();


// Function  Engine.RadialForceActor.ToggleForce
// Offset::0x1A80310;
void FRadialForceActor::ToggleForce();


// Function  Engine.RadialForceComponent.AddObjectTypeToAffect
// Offset::0x64F3040;
void FRadialForceComponent::AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType);


// Function  Engine.RadialForceComponent.FireImpulse
// Offset::0x5010D70;
void FRadialForceComponent::FireImpulse();


// Function  Engine.RadialForceComponent.RemoveObjectTypeToAffect
// Offset::0x64F2FA0;
void FRadialForceComponent::RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType);


// Function  Engine.RectLightComponent.SetBarnDoorAngle
// Offset::0x64F37A0;
void FRectLightComponent::SetBarnDoorAngle(float NewValue);


// Function  Engine.RectLightComponent.SetBarnDoorLength
// Offset::0x64F3700;
void FRectLightComponent::SetBarnDoorLength(float NewValue);


// Function  Engine.RectLightComponent.SetSourceHeight
// Offset::0x64DF5A0;
void FRectLightComponent::SetSourceHeight(float NewValue);


// Function  Engine.RectLightComponent.SetSourceTexture
// Offset::0x64F38E0;
void FRectLightComponent::SetSourceTexture(FTexture* bNewValue);


// Function  Engine.RectLightComponent.SetSourceWidth
// Offset::0x64F3840;
void FRectLightComponent::SetSourceWidth(float bNewValue);


// Function  Engine.ReplaySubsystem.GetActiveReplayName
// Offset::0x64F5CD0;
FString FReplaySubsystem::GetActiveReplayName();


// Function  Engine.ReplaySubsystem.GetReplayCurrentTime
// Offset::0x64F5CA0;
float FReplaySubsystem::GetReplayCurrentTime();


// Function  Engine.ReplaySubsystem.IsPlaying
// Offset::0x64F5C40;
bool FReplaySubsystem::IsPlaying();


// Function  Engine.ReplaySubsystem.IsRecording
// Offset::0x64F5C70;
bool FReplaySubsystem::IsRecording();


// Function  Engine.ReplaySubsystem.RequestCheckpoint
// Offset::0x64F5C20;
void FReplaySubsystem::RequestCheckpoint();


// Function  Engine.RuntimeVirtualTexture.GetPageTableSize
// Offset::0x64F8A40;
int32_t FRuntimeVirtualTexture::GetPageTableSize();


// Function  Engine.RuntimeVirtualTexture.GetSize
// Offset::0x64F8A70;
int32_t FRuntimeVirtualTexture::GetSize();


// Function  Engine.RuntimeVirtualTexture.GetTileBorderSize
// Offset::0x64F8B40;
int32_t FRuntimeVirtualTexture::GetTileBorderSize();


// Function  Engine.RuntimeVirtualTexture.GetTileCount
// Offset::0x64F8BE0;
int32_t FRuntimeVirtualTexture::GetTileCount();


// Function  Engine.RuntimeVirtualTexture.GetTileSize
// Offset::0x64F8B90;
int32_t FRuntimeVirtualTexture::GetTileSize();


// Function  Engine.RuntimeVirtualTextureComponent.Invalidate
// Offset::0x64F90F0;
void FRuntimeVirtualTextureComponent::Invalidate(FBoxSphereBounds WorldBounds);


// Function  Engine.SceneCapture2D.OnInterpToggle
// Offset::0x64BDF90;
void FSceneCapture2D::OnInterpToggle(bool bEnable);


// Function  Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
// Offset::0x64FE020;
void FSceneCaptureComponent2D::AddOrUpdateBlendable(TScriptInterface<IBlendableInterface> InBlendableObject,float InWeight);


// Function  Engine.SceneCaptureComponent2D.CaptureScene
// Offset::0x64FDEE0;
void FSceneCaptureComponent2D::CaptureScene();


// Function  Engine.SceneCaptureComponent2D.RemoveBlendable
// Offset::0x64FDF00;
void FSceneCaptureComponent2D::RemoveBlendable(TScriptInterface<IBlendableInterface> InBlendableObject);


// Function  Engine.SceneCaptureComponentCube.CaptureScene
// Offset::0x64FE4C0;
void FSceneCaptureComponentCube::CaptureScene();


// Function  Engine.SceneCaptureCube.OnInterpToggle
// Offset::0x64BDF90;
void FSceneCaptureCube::OnInterpToggle(bool bEnable);


// Function  Engine.SkeletalMesh.FindSocket
// Offset::0x650A130;
FSkeletalMeshSocket* FSkeletalMesh::FindSocket(FName InSocketName);


// Function  Engine.SkeletalMesh.FindSocketAndIndex
// Offset::0x650A030;
FSkeletalMeshSocket* FSkeletalMesh::FindSocketAndIndex(FName InSocketName,int32_t OutIndex);


// Function  Engine.SkeletalMesh.FindSocketInfo
// Offset::0x6509E20;
FSkeletalMeshSocket* FSkeletalMesh::FindSocketInfo(FName InSocketName,FTransform OutTransform,int32_t OutBoneIndex,int32_t OutIndex);


// Function  Engine.SkeletalMesh.GetBounds
// Offset::0x650ACD0;
FBoxSphereBounds FSkeletalMesh::GetBounds();


// Function  Engine.SkeletalMesh.GetDefaultAnimatingRig
// Offset::0x650A840;
TSoftObjectPtr<FObject> FSkeletalMesh::GetDefaultAnimatingRig();


// Function  Engine.SkeletalMesh.GetImportedBounds
// Offset::0x650AC60;
FBoxSphereBounds FSkeletalMesh::GetImportedBounds();


// Function  Engine.SkeletalMesh.GetLODSettings
// Offset::0x63EDC60;
FSkeletalMeshLODSettings* FSkeletalMesh::GetLODSettings();


// Function  Engine.SkeletalMesh.GetMaterials
// Offset::0x650ABE0;
TArray<FSkeletalMaterial> FSkeletalMesh::GetMaterials();


// Function  Engine.SkeletalMesh.GetMeshClothingAssets
// Offset::0x650A340;
TArray<FClothingAssetBase*> FSkeletalMesh::GetMeshClothingAssets();


// Function  Engine.SkeletalMesh.GetMorphTargets
// Offset::0x650A650;
TArray<FMorphTarget*> FSkeletalMesh::GetMorphTargets();


// Function  Engine.SkeletalMesh.GetNodeMappingContainer
// Offset::0x650A6D0;
FNodeMappingContainer* FSkeletalMesh::GetNodeMappingContainer(FBlueprint* SourceAsset);


// Function  Engine.SkeletalMesh.GetNodeMappingData
// Offset::0x650A770;
TArray<FNodeMappingContainer*> FSkeletalMesh::GetNodeMappingData();


// Function  Engine.SkeletalMesh.GetPhysicsAsset
// Offset::0x650A810;
FPhysicsAsset* FSkeletalMesh::GetPhysicsAsset();


// Function  Engine.SkeletalMesh.GetShadowPhysicsAsset
// Offset::0x650A7F0;
FPhysicsAsset* FSkeletalMesh::GetShadowPhysicsAsset();


// Function  Engine.SkeletalMesh.GetSkeleton
// Offset::0x650ADE0;
FSkeleton* FSkeletalMesh::GetSkeleton();


// Function  Engine.SkeletalMesh.GetSocketByIndex
// Offset::0x6509D50;
FSkeletalMeshSocket* FSkeletalMesh::GetSocketByIndex(int32_t Index);


// Function  Engine.SkeletalMesh.IsSectionUsingCloth
// Offset::0x6509C60;
bool FSkeletalMesh::IsSectionUsingCloth(int32_t InSectionIndex,bool bCheckCorrespondingSections);


// Function  Engine.SkeletalMesh.K2_GetAllMorphTargetNames
// Offset::0x650A3C0;
TArray<FString> FSkeletalMesh::K2_GetAllMorphTargetNames();


// Function  Engine.SkeletalMesh.NumSockets
// Offset::0x6509DF0;
int32_t FSkeletalMesh::NumSockets();


// Function  Engine.SkeletalMesh.SetDefaultAnimatingRig
// Offset::0x650A900;
void FSkeletalMesh::SetDefaultAnimatingRig(TSoftObjectPtr<FObject> InAnimatingRig);


// Function  Engine.SkeletalMesh.SetLODSettings
// Offset::0x33C4200;
void FSkeletalMesh::SetLODSettings(FSkeletalMeshLODSettings* InLODSettings);


// Function  Engine.SkeletalMesh.SetMaterials
// Offset::0x650AA60;
void FSkeletalMesh::SetMaterials(TArray<FSkeletalMaterial> InMaterials);


// Function  Engine.SkeletalMesh.SetMeshClothingAssets
// Offset::0x650A1D0;
void FSkeletalMesh::SetMeshClothingAssets(TArray<FClothingAssetBase*> InMeshClothingAssets);


// Function  Engine.SkeletalMesh.SetMorphTargets
// Offset::0x650A4B0;
void FSkeletalMesh::SetMorphTargets(TArray<FMorphTarget*> InMorphTargets);


// Function  Engine.SkeletalMesh.SetSkeleton
// Offset::0x650AD40;
void FSkeletalMesh::SetSkeleton(FSkeleton* InSkeleton);


// Function  Engine.SkeletalMesh.UpdateBoneTree
// Offset::0x650AE00;
void FSkeletalMesh::UpdateBoneTree();


// Function  Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
// Offset::0x1A802F0;
void FSkeletalMeshActor::OnRep_ReplicatedMaterial0();


// Function  Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
// Offset::0x1A80310;
void FSkeletalMeshActor::OnRep_ReplicatedMaterial1();


// Function  Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
// Offset::0x21D6F30;
void FSkeletalMeshActor::OnRep_ReplicatedMesh();


// Function  Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
// Offset::0x1A802D0;
void FSkeletalMeshActor::OnRep_ReplicatedPhysAsset();


// Function  Engine.SkeletalMeshSocket.GetSocketLocation
// Offset::0x65183F0;
FVector FSkeletalMeshSocket::GetSocketLocation(FSkeletalMeshComponent* SkelComp);


// Function  Engine.SkeletalMeshSocket.InitializeSocketFromLocation
// Offset::0x6518290;
void FSkeletalMeshSocket::InitializeSocketFromLocation(FSkeletalMeshComponent* SkelComp,FVector WorldLocation,FVector WorldNormal);


// Function  Engine.Skeleton.AddCompatibleSkeleton
// Offset::0x6518C70;
void FSkeleton::AddCompatibleSkeleton(FSkeleton* SourceSkeleton);


// Function  Engine.Skeleton.GetBlendProfile
// Offset::0x6518D10;
FBlendProfile* FSkeleton::GetBlendProfile(FName InProfileName);


// Function  Engine.SkyLightComponent.RecaptureSky
// Offset::0x6520830;
void FSkyLightComponent::RecaptureSky();


// Function  Engine.SkyLightComponent.SetCubemap
// Offset::0x6520CA0;
void FSkyLightComponent::SetCubemap(FTextureCube* NewCubemap);


// Function  Engine.SkyLightComponent.SetCubemapBlend
// Offset::0x6520B70;
void FSkyLightComponent::SetCubemapBlend(FTextureCube* SourceCubemap,FTextureCube* DestinationCubemap,float InBlendFraction);


// Function  Engine.SkyLightComponent.SetIndirectLightingIntensity
// Offset::0x6520E80;
void FSkyLightComponent::SetIndirectLightingIntensity(float NewIntensity);


// Function  Engine.SkyLightComponent.SetIntensity
// Offset::0x6520F20;
void FSkyLightComponent::SetIntensity(float NewIntensity);


// Function  Engine.SkyLightComponent.SetLightColor
// Offset::0x6520D40;
void FSkyLightComponent::SetLightColor(FLinearColor NewLightColor);


// Function  Engine.SkyLightComponent.SetLowerHemisphereColor
// Offset::0x6520AD0;
void FSkyLightComponent::SetLowerHemisphereColor(FLinearColor InLowerHemisphereColor);


// Function  Engine.SkyLightComponent.SetMinOcclusion
// Offset::0x6520850;
void FSkyLightComponent::SetMinOcclusion(float InMinOcclusion);


// Function  Engine.SkyLightComponent.SetOcclusionContrast
// Offset::0x6520990;
void FSkyLightComponent::SetOcclusionContrast(float InOcclusionContrast);


// Function  Engine.SkyLightComponent.SetOcclusionExponent
// Offset::0x65208F0;
void FSkyLightComponent::SetOcclusionExponent(float InOcclusionExponent);


// Function  Engine.SkyLightComponent.SetOcclusionTint
// Offset::0x6520A30;
void FSkyLightComponent::SetOcclusionTint(FColor InTint);


// Function  Engine.SkyLightComponent.SetVolumetricScatteringIntensity
// Offset::0x6520DE0;
void FSkyLightComponent::SetVolumetricScatteringIntensity(float NewIntensity);


// Function  Engine.SoundEffectPresetWidgetInterface.GetClass
// Offset::0x3D30810;
FSoundEffectPreset* FSoundEffectPresetWidgetInterface::GetClass();


// Function  Engine.SoundEffectPresetWidgetInterface.OnConstructed
// Offset::0x3D30810;
void FSoundEffectPresetWidgetInterface::OnConstructed(FSoundEffectPreset* Preset);


// Function  Engine.SoundEffectPresetWidgetInterface.OnPropertyChanged
// Offset::0x3D30810;
void FSoundEffectPresetWidgetInterface::OnPropertyChanged(FSoundEffectPreset* Preset,FName PropertyName);


// Function  Engine.AudioParameterConversionStatics.BooleanArrayToAudioParameter
// Offset::0x6528020;
FAudioParameter FAudioParameterConversionStatics::BooleanArrayToAudioParameter(FName Name,TArray<bool> Bools);


// Function  Engine.AudioParameterConversionStatics.BooleanToAudioParameter
// Offset::0x6528680;
FAudioParameter FAudioParameterConversionStatics::BooleanToAudioParameter(FName Name,bool Bool);


// Function  Engine.AudioParameterConversionStatics.FloatArrayToAudioParameter
// Offset::0x6527EA0;
FAudioParameter FAudioParameterConversionStatics::FloatArrayToAudioParameter(FName Name,TArray<float> Floats);


// Function  Engine.AudioParameterConversionStatics.FloatToAudioParameter
// Offset::0x6528560;
FAudioParameter FAudioParameterConversionStatics::FloatToAudioParameter(FName Name,float Float);


// Function  Engine.AudioParameterConversionStatics.IntegerArrayToAudioParameter
// Offset::0x6527D20;
FAudioParameter FAudioParameterConversionStatics::IntegerArrayToAudioParameter(FName Name,TArray<int32_t> Integers);


// Function  Engine.AudioParameterConversionStatics.IntegerToAudioParameter
// Offset::0x6528440;
FAudioParameter FAudioParameterConversionStatics::IntegerToAudioParameter(FName Name,int32_t Integer);


// Function  Engine.AudioParameterConversionStatics.ObjectArrayToAudioParameter
// Offset::0x6527980;
FAudioParameter FAudioParameterConversionStatics::ObjectArrayToAudioParameter(FName Name,TArray<FObject*> Objects);


// Function  Engine.AudioParameterConversionStatics.ObjectToAudioParameter
// Offset::0x65281A0;
FAudioParameter FAudioParameterConversionStatics::ObjectToAudioParameter(FName Name,FObject* Object);


// Function  Engine.AudioParameterConversionStatics.StringArrayToAudioParameter
// Offset::0x6527B00;
FAudioParameter FAudioParameterConversionStatics::StringArrayToAudioParameter(FName Name,TArray<FString> Strings);


// Function  Engine.AudioParameterConversionStatics.StringToAudioParameter
// Offset::0x65282C0;
FAudioParameter FAudioParameterConversionStatics::StringToAudioParameter(FName Name,FString String);


// Function  Engine.SoundSubmix.AddEnvelopeFollowerDelegate
// Offset::0x652A000;
void FSoundSubmix::AddEnvelopeFollowerDelegate(FObject* WorldContextObject,FDelegate OnSubmixEnvelopeBP);


// Function  Engine.SoundSubmix.AddSpectralAnalysisDelegate
// Offset::0x6529C60;
void FSoundSubmix::AddSpectralAnalysisDelegate(FObject* WorldContextObject,TArray<FSoundSubmixSpectralAnalysisBandSettings> InBandSettings,FDelegate OnSubmixSpectralAnalysisBP,float UpdateRate,float DecibelNoiseFloor,bool bDoNormalize,bool bDoAutoRange,float AutoRangeAttackTime,float AutoRangeReleaseTime);


// Function  Engine.SoundSubmix.RemoveSpectralAnalysisDelegate
// Offset::0x6529B50;
void FSoundSubmix::RemoveSpectralAnalysisDelegate(FObject* WorldContextObject,FDelegate OnSubmixSpectralAnalysisBP);


// Function  Engine.SoundSubmix.SetSubmixDryLevel
// Offset::0x6529600;
void FSoundSubmix::SetSubmixDryLevel(FObject* WorldContextObject,float InDryLevel);


// Function  Engine.SoundSubmix.SetSubmixOutputVolume
// Offset::0x65297C0;
void FSoundSubmix::SetSubmixOutputVolume(FObject* WorldContextObject,float InOutputVolume);


// Function  Engine.SoundSubmix.SetSubmixWetLevel
// Offset::0x65296E0;
void FSoundSubmix::SetSubmixWetLevel(FObject* WorldContextObject,float InWetLevel);


// Function  Engine.SoundSubmix.StartEnvelopeFollowing
// Offset::0x652A1B0;
void FSoundSubmix::StartEnvelopeFollowing(FObject* WorldContextObject);


// Function  Engine.SoundSubmix.StartRecordingOutput
// Offset::0x652A4A0;
void FSoundSubmix::StartRecordingOutput(FObject* WorldContextObject,float ExpectedDuration);


// Function  Engine.SoundSubmix.StartSpectralAnalysis
// Offset::0x6529940;
void FSoundSubmix::StartSpectralAnalysis(FObject* WorldContextObject,enum class EFFTSize FFTSize,enum class EFFTPeakInterpolationMethod InterpolationMethod,enum class EFFTWindowType WindowType,float HopSize,enum class EAudioSpectrumType SpectrumType);


// Function  Engine.SoundSubmix.StopEnvelopeFollowing
// Offset::0x652A110;
void FSoundSubmix::StopEnvelopeFollowing(FObject* WorldContextObject);


// Function  Engine.SoundSubmix.StopRecordingOutput
// Offset::0x652A250;
void FSoundSubmix::StopRecordingOutput(FObject* WorldContextObject,enum class EAudioRecordingExportType ExportType,FString Name,FString Path,FSoundWave* ExistingSoundWaveToOverwrite);


// Function  Engine.SoundSubmix.StopSpectralAnalysis
// Offset::0x65298A0;
void FSoundSubmix::StopSpectralAnalysis(FObject* WorldContextObject);


// Function  Engine.SoundSubmixWidgetInterface.OnConstructed
// Offset::0x3D30810;
void FSoundSubmixWidgetInterface::OnConstructed(FSoundSubmixBase* SoundSubmix);


// Function  Engine.SplineComponent.AddPoint
// Offset::0x65333B0;
void FSplineComponent::AddPoint(FSplinePoint Point,bool bUpdateSpline);


// Function  Engine.SplineComponent.AddPoints
// Offset::0x65332A0;
void FSplineComponent::AddPoints(TArray<FSplinePoint> Points,bool bUpdateSpline);


// Function  Engine.SplineComponent.AddSplineLocalPoint
// Offset::0x6532D80;
void FSplineComponent::AddSplineLocalPoint(FVector Position);


// Function  Engine.SplineComponent.AddSplinePoint
// Offset::0x6533160;
void FSplineComponent::AddSplinePoint(FVector Position,enum class ESplineCoordinateSpace CoordinateSpace,bool bUpdateSpline);


// Function  Engine.SplineComponent.AddSplinePointAtIndex
// Offset::0x6532FE0;
void FSplineComponent::AddSplinePointAtIndex(FVector Position,int32_t Index,enum class ESplineCoordinateSpace CoordinateSpace,bool bUpdateSpline);


// Function  Engine.SplineComponent.AddSplineWorldPoint
// Offset::0x6532E30;
void FSplineComponent::AddSplineWorldPoint(FVector Position);


// Function  Engine.SplineComponent.ClearSplinePoints
// Offset::0x6533500;
void FSplineComponent::ClearSplinePoints(bool bUpdateSpline);


// Function  Engine.SplineComponent.ConvertSplineSegmentToPolyLine
// Offset::0x652E080;
bool FSplineComponent::ConvertSplineSegmentToPolyLine(int32_t SplinePointStartIndex,enum class ESplineCoordinateSpace CoordinateSpace,float MaxSquareDistanceFromSpline,TArray<FVector> OutPoints);


// Function  Engine.SplineComponent.ConvertSplineToPolyLine
// Offset::0x652DF30;
bool FSplineComponent::ConvertSplineToPolyLine(enum class ESplineCoordinateSpace CoordinateSpace,float MaxSquareDistanceFromSpline,TArray<FVector> OutPoints);


// Function  Engine.SplineComponent.DivideSplineIntoPolylineRecursive
// Offset::0x652E220;
bool FSplineComponent::DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline,float EndDistanceAlongSpline,enum class ESplineCoordinateSpace CoordinateSpace,float MaxSquareDistanceFromSpline,TArray<FVector> OutPoints);


// Function  Engine.SplineComponent.FindDirectionClosestToWorldLocation
// Offset::0x652EBB0;
FVector FSplineComponent::FindDirectionClosestToWorldLocation(FVector WorldLocation,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.FindInputKeyClosestToWorldLocation
// Offset::0x652EDD0;
float FSplineComponent::FindInputKeyClosestToWorldLocation(FVector WorldLocation);


// Function  Engine.SplineComponent.FindLocationClosestToWorldLocation
// Offset::0x652ECC0;
FVector FSplineComponent::FindLocationClosestToWorldLocation(FVector WorldLocation,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.FindRightVectorClosestToWorldLocation
// Offset::0x652E770;
FVector FSplineComponent::FindRightVectorClosestToWorldLocation(FVector WorldLocation,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.FindRollClosestToWorldLocation
// Offset::0x652E680;
float FSplineComponent::FindRollClosestToWorldLocation(FVector WorldLocation,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.FindRotationClosestToWorldLocation
// Offset::0x652E990;
FRotator FSplineComponent::FindRotationClosestToWorldLocation(FVector WorldLocation,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.FindScaleClosestToWorldLocation
// Offset::0x652E5C0;
FVector FSplineComponent::FindScaleClosestToWorldLocation(FVector WorldLocation);


// Function  Engine.SplineComponent.FindTangentClosestToWorldLocation
// Offset::0x652EAA0;
FVector FSplineComponent::FindTangentClosestToWorldLocation(FVector WorldLocation,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.FindTransformClosestToWorldLocation
// Offset::0x652E410;
FTransform FSplineComponent::FindTransformClosestToWorldLocation(FVector WorldLocation,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseScale);


// Function  Engine.SplineComponent.FindUpVectorClosestToWorldLocation
// Offset::0x652E880;
FVector FSplineComponent::FindUpVectorClosestToWorldLocation(FVector WorldLocation,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetArriveTangentAtSplinePoint
// Offset::0x6531A50;
FVector FSplineComponent::GetArriveTangentAtSplinePoint(int32_t PointIndex,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetDefaultUpVector
// Offset::0x6530BC0;
FVector FSplineComponent::GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
// Offset::0x6530840;
FVector FSplineComponent::GetDirectionAtDistanceAlongSpline(float Distance,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetDirectionAtSplineInputKey
// Offset::0x6534210;
FVector FSplineComponent::GetDirectionAtSplineInputKey(float InKey,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetDirectionAtSplinePoint
// Offset::0x6531B50;
FVector FSplineComponent::GetDirectionAtSplinePoint(int32_t PointIndex,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetDirectionAtTime
// Offset::0x652FA80;
FVector FSplineComponent::GetDirectionAtTime(float Time,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey
// Offset::0x6533B30;
float FSplineComponent::GetDistanceAlongSplineAtSplineInputKey(float InKey);


// Function  Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
// Offset::0x6530F80;
float FSplineComponent::GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex);


// Function  Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
// Offset::0x6533A40;
float FSplineComponent::GetFloatPropertyAtSplineInputKey(float InKey,FName PropertyName);


// Function  Engine.SplineComponent.GetFloatPropertyAtSplinePoint
// Offset::0x6530E90;
float FSplineComponent::GetFloatPropertyAtSplinePoint(int32_t Index,FName PropertyName);


// Function  Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
// Offset::0x6530B20;
float FSplineComponent::GetInputKeyAtDistanceAlongSpline(float Distance);


// Function  Engine.SplineComponent.GetLeaveTangentAtSplinePoint
// Offset::0x6531950;
FVector FSplineComponent::GetLeaveTangentAtSplinePoint(int32_t PointIndex,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
// Offset::0x6531020;
void FSplineComponent::GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex,FVector LocalLocation,FVector LocalTangent);


// Function  Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
// Offset::0x6531180;
void FSplineComponent::GetLocationAndTangentAtSplinePoint(int32_t PointIndex,FVector Location,FVector Tangent,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetLocationAtDistanceAlongSpline
// Offset::0x6530A20;
FVector FSplineComponent::GetLocationAtDistanceAlongSpline(float Distance,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetLocationAtSplineInputKey
// Offset::0x6534410;
FVector FSplineComponent::GetLocationAtSplineInputKey(float InKey,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetLocationAtSplinePoint
// Offset::0x6531D30;
FVector FSplineComponent::GetLocationAtSplinePoint(int32_t PointIndex,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetLocationAtTime
// Offset::0x652FD10;
FVector FSplineComponent::GetLocationAtTime(float Time,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetNumberOfSplinePoints
// Offset::0x6531E60;
int32_t FSplineComponent::GetNumberOfSplinePoints();


// Function  Engine.SplineComponent.GetNumberOfSplineSegments
// Offset::0x6531E30;
int32_t FSplineComponent::GetNumberOfSplineSegments();


// Function  Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
// Offset::0x65301A0;
FVector FSplineComponent::GetRightVectorAtDistanceAlongSpline(float Distance,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetRightVectorAtSplineInputKey
// Offset::0x6533F10;
FVector FSplineComponent::GetRightVectorAtSplineInputKey(float InKey,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetRightVectorAtSplinePoint
// Offset::0x6531650;
FVector FSplineComponent::GetRightVectorAtSplinePoint(int32_t PointIndex,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetRightVectorAtTime
// Offset::0x652F2C0;
FVector FSplineComponent::GetRightVectorAtTime(float Time,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetRollAtDistanceAlongSpline
// Offset::0x65300B0;
float FSplineComponent::GetRollAtDistanceAlongSpline(float Distance,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetRollAtSplineInputKey
// Offset::0x6533C80;
float FSplineComponent::GetRollAtSplineInputKey(float InKey,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetRollAtSplinePoint
// Offset::0x6531560;
float FSplineComponent::GetRollAtSplinePoint(int32_t PointIndex,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetRollAtTime
// Offset::0x652EF80;
float FSplineComponent::GetRollAtTime(float Time,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetRotationAtDistanceAlongSpline
// Offset::0x6530480;
FRotator FSplineComponent::GetRotationAtDistanceAlongSpline(float Distance,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetRotationAtSplineInputKey
// Offset::0x6534110;
FRotator FSplineComponent::GetRotationAtSplineInputKey(float InKey,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetRotationAtSplinePoint
// Offset::0x6531850;
FRotator FSplineComponent::GetRotationAtSplinePoint(int32_t PointIndex,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetRotationAtTime
// Offset::0x652F6A0;
FRotator FSplineComponent::GetRotationAtTime(float Time,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetScaleAtDistanceAlongSpline
// Offset::0x6530000;
FVector FSplineComponent::GetScaleAtDistanceAlongSpline(float Distance);


// Function  Engine.SplineComponent.GetScaleAtSplineInputKey
// Offset::0x6533BD0;
FVector FSplineComponent::GetScaleAtSplineInputKey(float InKey);


// Function  Engine.SplineComponent.GetScaleAtSplinePoint
// Offset::0x65314B0;
FVector FSplineComponent::GetScaleAtSplinePoint(int32_t PointIndex);


// Function  Engine.SplineComponent.GetScaleAtTime
// Offset::0x652EE80;
FVector FSplineComponent::GetScaleAtTime(float Time,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetSplineLength
// Offset::0x6530D60;
float FSplineComponent::GetSplineLength();


// Function  Engine.SplineComponent.GetSplinePointType
// Offset::0x6531FC0;
enum class ESplinePointType FSplineComponent::GetSplinePointType(int32_t PointIndex);


// Function  Engine.SplineComponent.GetTangentAtDistanceAlongSpline
// Offset::0x6530660;
FVector FSplineComponent::GetTangentAtDistanceAlongSpline(float Distance,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetTangentAtSplineInputKey
// Offset::0x6534310;
FVector FSplineComponent::GetTangentAtSplineInputKey(float InKey,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetTangentAtSplinePoint
// Offset::0x6531950;
FVector FSplineComponent::GetTangentAtSplinePoint(int32_t PointIndex,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetTangentAtTime
// Offset::0x652F7F0;
FVector FSplineComponent::GetTangentAtTime(float Time,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetTransformAtDistanceAlongSpline
// Offset::0x652FE60;
FTransform FSplineComponent::GetTransformAtDistanceAlongSpline(float Distance,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseScale);


// Function  Engine.SplineComponent.GetTransformAtSplineInputKey
// Offset::0x6533D70;
FTransform FSplineComponent::GetTransformAtSplineInputKey(float InKey,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseScale);


// Function  Engine.SplineComponent.GetTransformAtSplinePoint
// Offset::0x6531310;
FTransform FSplineComponent::GetTransformAtSplinePoint(int32_t PointIndex,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseScale);


// Function  Engine.SplineComponent.GetTransformAtTime
// Offset::0x652F0C0;
FTransform FSplineComponent::GetTransformAtTime(float Time,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseConstantVelocity,bool bUseScale);


// Function  Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
// Offset::0x65302A0;
FVector FSplineComponent::GetUpVectorAtDistanceAlongSpline(float Distance,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetUpVectorAtSplineInputKey
// Offset::0x6534010;
FVector FSplineComponent::GetUpVectorAtSplineInputKey(float InKey,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetUpVectorAtSplinePoint
// Offset::0x6531750;
FVector FSplineComponent::GetUpVectorAtSplinePoint(int32_t PointIndex,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.GetUpVectorAtTime
// Offset::0x652F410;
FVector FSplineComponent::GetUpVectorAtTime(float Time,enum class ESplineCoordinateSpace CoordinateSpace,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
// Offset::0x6533940;
FVector FSplineComponent::GetVectorPropertyAtSplineInputKey(float InKey,FName PropertyName);


// Function  Engine.SplineComponent.GetVectorPropertyAtSplinePoint
// Offset::0x6530D90;
FVector FSplineComponent::GetVectorPropertyAtSplinePoint(int32_t Index,FName PropertyName);


// Function  Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
// Offset::0x6530760;
FVector FSplineComponent::GetWorldDirectionAtDistanceAlongSpline(float Distance);


// Function  Engine.SplineComponent.GetWorldDirectionAtTime
// Offset::0x652F940;
FVector FSplineComponent::GetWorldDirectionAtTime(float Time,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
// Offset::0x6530940;
FVector FSplineComponent::GetWorldLocationAtDistanceAlongSpline(float Distance);


// Function  Engine.SplineComponent.GetWorldLocationAtSplinePoint
// Offset::0x6531C50;
FVector FSplineComponent::GetWorldLocationAtSplinePoint(int32_t PointIndex);


// Function  Engine.SplineComponent.GetWorldLocationAtTime
// Offset::0x652FBD0;
FVector FSplineComponent::GetWorldLocationAtTime(float Time,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
// Offset::0x65303A0;
FRotator FSplineComponent::GetWorldRotationAtDistanceAlongSpline(float Distance);


// Function  Engine.SplineComponent.GetWorldRotationAtTime
// Offset::0x652F560;
FRotator FSplineComponent::GetWorldRotationAtTime(float Time,bool bUseConstantVelocity);


// Function  Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
// Offset::0x6530580;
FVector FSplineComponent::GetWorldTangentAtDistanceAlongSpline(float Distance);


// Function  Engine.SplineComponent.IsClosedLoop
// Offset::0x65335A0;
bool FSplineComponent::IsClosedLoop();


// Function  Engine.SplineComponent.RemoveSplinePoint
// Offset::0x6532EF0;
void FSplineComponent::RemoveSplinePoint(int32_t Index,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetClosedLoop
// Offset::0x6533710;
void FSplineComponent::SetClosedLoop(bool bInClosedLoop,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetClosedLoopAtPosition
// Offset::0x65335D0;
void FSplineComponent::SetClosedLoopAtPosition(bool bInClosedLoop,float Key,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetDefaultUpVector
// Offset::0x6530C70;
void FSplineComponent::SetDefaultUpVector(FVector UpVector,enum class ESplineCoordinateSpace CoordinateSpace);


// Function  Engine.SplineComponent.SetDrawDebug
// Offset::0x6533800;
void FSplineComponent::SetDrawDebug(bool bShow);


// Function  Engine.SplineComponent.SetLocationAtSplinePoint
// Offset::0x6532910;
void FSplineComponent::SetLocationAtSplinePoint(int32_t PointIndex,FVector InLocation,enum class ESplineCoordinateSpace CoordinateSpace,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetRotationAtSplinePoint
// Offset::0x65321A0;
void FSplineComponent::SetRotationAtSplinePoint(int32_t PointIndex,FRotator InRotation,enum class ESplineCoordinateSpace CoordinateSpace,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetScaleAtSplinePoint
// Offset::0x6532060;
void FSplineComponent::SetScaleAtSplinePoint(int32_t PointIndex,FVector InScaleVector,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetSelectedSplineSegmentColor
// Offset::0x65338A0;
void FSplineComponent::SetSelectedSplineSegmentColor(FLinearColor SegmentColor);


// Function  Engine.SplineComponent.SetSplineLocalPoints
// Offset::0x6532A90;
void FSplineComponent::SetSplineLocalPoints(TArray<FVector> Points);


// Function  Engine.SplineComponent.SetSplinePoints
// Offset::0x6532C30;
void FSplineComponent::SetSplinePoints(TArray<FVector> Points,enum class ESplineCoordinateSpace CoordinateSpace,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetSplinePointType
// Offset::0x6531E90;
void FSplineComponent::SetSplinePointType(int32_t PointIndex,enum class ESplinePointType Type,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetSplineWorldPoints
// Offset::0x6532B60;
void FSplineComponent::SetSplineWorldPoints(TArray<FVector> Points);


// Function  Engine.SplineComponent.SetTangentAtSplinePoint
// Offset::0x6532680;
void FSplineComponent::SetTangentAtSplinePoint(int32_t PointIndex,FVector InTangent,enum class ESplineCoordinateSpace CoordinateSpace,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetTangentColor
// Offset::0x65338A0;
void FSplineComponent::SetTangentColor(FLinearColor TangentColor);


// Function  Engine.SplineComponent.SetTangentsAtSplinePoint
// Offset::0x65324A0;
void FSplineComponent::SetTangentsAtSplinePoint(int32_t PointIndex,FVector InArriveTangent,FVector InLeaveTangent,enum class ESplineCoordinateSpace CoordinateSpace,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetUnselectedSplineSegmentColor
// Offset::0x65338A0;
void FSplineComponent::SetUnselectedSplineSegmentColor(FLinearColor SegmentColor);


// Function  Engine.SplineComponent.SetUpVectorAtSplinePoint
// Offset::0x6532320;
void FSplineComponent::SetUpVectorAtSplinePoint(int32_t PointIndex,FVector InUpVector,enum class ESplineCoordinateSpace CoordinateSpace,bool bUpdateSpline);


// Function  Engine.SplineComponent.SetWorldLocationAtSplinePoint
// Offset::0x6532800;
void FSplineComponent::SetWorldLocationAtSplinePoint(int32_t PointIndex,FVector InLocation);


// Function  Engine.SplineComponent.UpdateSpline
// Offset::0x64C6480;
void FSplineComponent::UpdateSpline();


// Function  Engine.SplineMeshComponent.GetBoundaryMax
// Offset::0x65398A0;
float FSplineMeshComponent::GetBoundaryMax();


// Function  Engine.SplineMeshComponent.GetBoundaryMin
// Offset::0x65399C0;
float FSplineMeshComponent::GetBoundaryMin();


// Function  Engine.SplineMeshComponent.GetEndOffset
// Offset::0x6539D40;
FVector2D FSplineMeshComponent::GetEndOffset();


// Function  Engine.SplineMeshComponent.GetEndPosition
// Offset::0x653A820;
FVector FSplineMeshComponent::GetEndPosition();


// Function  Engine.SplineMeshComponent.GetEndRoll
// Offset::0x6539E80;
float FSplineMeshComponent::GetEndRoll();


// Function  Engine.SplineMeshComponent.GetEndScale
// Offset::0x6539FA0;
FVector2D FSplineMeshComponent::GetEndScale();


// Function  Engine.SplineMeshComponent.GetEndTangent
// Offset::0x653A6D0;
FVector FSplineMeshComponent::GetEndTangent();


// Function  Engine.SplineMeshComponent.GetForwardAxis
// Offset::0x6539C20;
enum class ESplineMeshAxis FSplineMeshComponent::GetForwardAxis();


// Function  Engine.SplineMeshComponent.GetSplineUpDir
// Offset::0x6539AE0;
FVector FSplineMeshComponent::GetSplineUpDir();


// Function  Engine.SplineMeshComponent.GetStartOffset
// Offset::0x653A0E0;
FVector2D FSplineMeshComponent::GetStartOffset();


// Function  Engine.SplineMeshComponent.GetStartPosition
// Offset::0x653AAC0;
FVector FSplineMeshComponent::GetStartPosition();


// Function  Engine.SplineMeshComponent.GetStartRoll
// Offset::0x653A220;
float FSplineMeshComponent::GetStartRoll();


// Function  Engine.SplineMeshComponent.GetStartScale
// Offset::0x653A340;
FVector2D FSplineMeshComponent::GetStartScale();


// Function  Engine.SplineMeshComponent.GetStartTangent
// Offset::0x653A970;
FVector FSplineMeshComponent::GetStartTangent();


// Function  Engine.SplineMeshComponent.SetBoundaryMax
// Offset::0x65397B0;
void FSplineMeshComponent::SetBoundaryMax(float InBoundaryMax,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetBoundaryMin
// Offset::0x65398D0;
void FSplineMeshComponent::SetBoundaryMin(float InBoundaryMin,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetEndOffset
// Offset::0x6539C50;
void FSplineMeshComponent::SetEndOffset(FVector2D EndOffset,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetEndPosition
// Offset::0x653A730;
void FSplineMeshComponent::SetEndPosition(FVector EndPos,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetEndRoll
// Offset::0x6539D90;
void FSplineMeshComponent::SetEndRoll(float EndRoll,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetEndScale
// Offset::0x6539EB0;
void FSplineMeshComponent::SetEndScale(FVector2D EndScale,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetEndTangent
// Offset::0x653A5E0;
void FSplineMeshComponent::SetEndTangent(FVector EndTangent,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetForwardAxis
// Offset::0x6539B40;
void FSplineMeshComponent::SetForwardAxis(enum class ESplineMeshAxis InForwardAxis,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetSplineUpDir
// Offset::0x65399F0;
void FSplineMeshComponent::SetSplineUpDir(FVector InSplineUpDir,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetStartAndEnd
// Offset::0x653A390;
void FSplineMeshComponent::SetStartAndEnd(FVector StartPos,FVector StartTangent,FVector EndPos,FVector EndTangent,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetStartOffset
// Offset::0x6539FF0;
void FSplineMeshComponent::SetStartOffset(FVector2D StartOffset,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetStartPosition
// Offset::0x653A9D0;
void FSplineMeshComponent::SetStartPosition(FVector StartPos,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetStartRoll
// Offset::0x653A130;
void FSplineMeshComponent::SetStartRoll(float StartRoll,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetStartScale
// Offset::0x653A250;
void FSplineMeshComponent::SetStartScale(FVector2D StartScale,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.SetStartTangent
// Offset::0x653A880;
void FSplineMeshComponent::SetStartTangent(FVector StartTangent,bool bUpdateMesh);


// Function  Engine.SplineMeshComponent.UpdateMesh
// Offset::0x653AB20;
void FSplineMeshComponent::UpdateMesh();


// Function  Engine.SpotLightComponent.SetInnerConeAngle
// Offset::0x653C260;
void FSpotLightComponent::SetInnerConeAngle(float NewInnerConeAngle);


// Function  Engine.SpotLightComponent.SetOuterConeAngle
// Offset::0x653C1C0;
void FSpotLightComponent::SetOuterConeAngle(float NewOuterConeAngle);


// Function  Engine.StaticMesh.AddMaterial
// Offset::0x653D3C0;
FName FStaticMesh::AddMaterial(FMaterialInterface* Material);


// Function  Engine.StaticMesh.AddSocket
// Offset::0x653D280;
void FStaticMesh::AddSocket(FStaticMeshSocket* Socket);


// Function  Engine.StaticMesh.BuildFromStaticMeshDescriptions
// Offset::0x653D760;
void FStaticMesh::BuildFromStaticMeshDescriptions(TArray<FStaticMeshDescription*> StaticMeshDescriptions,bool bBuildSimpleCollision,bool bFastBuild);


// Function  Engine.StaticMesh.CreateStaticMeshDescription
// Offset::0x653D8C0;
FStaticMeshDescription* FStaticMesh::CreateStaticMeshDescription(FObject* Outer);


// Function  Engine.StaticMesh.FindSocket
// Offset::0x653D1E0;
FStaticMeshSocket* FStaticMesh::FindSocket(FName InSocketName);


// Function  Engine.StaticMesh.GetBoundingBox
// Offset::0x653D5B0;
FBox FStaticMesh::GetBoundingBox();


// Function  Engine.StaticMesh.GetBounds
// Offset::0x653D620;
FBoxSphereBounds FStaticMesh::GetBounds();


// Function  Engine.StaticMesh.GetMaterial
// Offset::0x653D470;
FMaterialInterface* FStaticMesh::GetMaterial(int32_t MaterialIndex);


// Function  Engine.StaticMesh.GetMaterialIndex
// Offset::0x653D320;
int32_t FStaticMesh::GetMaterialIndex(FName MaterialSlotName);


// Function  Engine.StaticMesh.GetMinimumLODForPlatform
// Offset::0x653DD90;
int32_t FStaticMesh::GetMinimumLODForPlatform(FName PlatformName);


// Function  Engine.StaticMesh.GetMinimumLODForPlatforms
// Offset::0x653DC60;
void FStaticMesh::GetMinimumLODForPlatforms(TMap<FName,int32_t> PlatformMinimumLODs);


// Function  Engine.StaticMesh.GetMinimumLODForQualityLevel
// Offset::0x653DD90;
int32_t FStaticMesh::GetMinimumLODForQualityLevel(FName QualityLevel);


// Function  Engine.StaticMesh.GetMinimumLODForQualityLevels
// Offset::0x653DC60;
void FStaticMesh::GetMinimumLODForQualityLevels(TMap<FName,int32_t> QualityLevelMinimumLODs);


// Function  Engine.StaticMesh.GetNumLODs
// Offset::0x653D690;
int32_t FStaticMesh::GetNumLODs();


// Function  Engine.StaticMesh.GetNumSections
// Offset::0x653D510;
int32_t FStaticMesh::GetNumSections(int32_t InLOD);


// Function  Engine.StaticMesh.GetStaticMaterials
// Offset::0x653DAE0;
TArray<FStaticMaterial> FStaticMesh::GetStaticMaterials();


// Function  Engine.StaticMesh.GetStaticMeshDescription
// Offset::0x653D6C0;
FStaticMeshDescription* FStaticMesh::GetStaticMeshDescription(int32_t LODIndex);


// Function  Engine.StaticMesh.RemoveSocket
// Offset::0x653D140;
void FStaticMesh::RemoveSocket(FStaticMeshSocket* Socket);


// Function  Engine.StaticMesh.SetMinimumLODForPlatform
// Offset::0x653DB90;
void FStaticMesh::SetMinimumLODForPlatform(FName PlatformName,int32_t InMinLOD);


// Function  Engine.StaticMesh.SetMinimumLODForPlatforms
// Offset::0x653DC60;
void FStaticMesh::SetMinimumLODForPlatforms(TMap<FName,int32_t> PlatformMinimumLODs);


// Function  Engine.StaticMesh.SetStaticMaterials
// Offset::0x653D960;
void FStaticMesh::SetStaticMaterials(TArray<FStaticMaterial> InStaticMaterials);


// Function  Engine.StereoLayerShapeCylinder.SetHeight
// Offset::0x6541630;
void FStereoLayerShapeCylinder::SetHeight(int32_t InHeight);


// Function  Engine.StereoLayerShapeCylinder.SetOverlayArc
// Offset::0x65416D0;
void FStereoLayerShapeCylinder::SetOverlayArc(float InOverlayArc);


// Function  Engine.StereoLayerShapeCylinder.SetRadius
// Offset::0x6541770;
void FStereoLayerShapeCylinder::SetRadius(float InRadius);


// Function  Engine.StereoLayerShapeEquirect.SetEquirectProps
// Offset::0x6541D80;
void FStereoLayerShapeEquirect::SetEquirectProps(FEquirectProps InScaleBiases);


// Function  Engine.StereoLayerComponent.GetLeftTexture
// Offset::0x6542570;
FTexture* FStereoLayerComponent::GetLeftTexture();


// Function  Engine.StereoLayerComponent.GetPriority
// Offset::0x65421A0;
int32_t FStereoLayerComponent::GetPriority();


// Function  Engine.StereoLayerComponent.GetQuadSize
// Offset::0x65424A0;
FVector2D FStereoLayerComponent::GetQuadSize();


// Function  Engine.StereoLayerComponent.GetTexture
// Offset::0x5404B90;
FTexture* FStereoLayerComponent::GetTexture();


// Function  Engine.StereoLayerComponent.GetUVRect
// Offset::0x6542380;
FBox2D FStereoLayerComponent::GetUVRect();


// Function  Engine.StereoLayerComponent.MarkTextureForUpdate
// Offset::0x6542180;
void FStereoLayerComponent::MarkTextureForUpdate();


// Function  Engine.StereoLayerComponent.SetEquirectProps
// Offset::0x6542270;
void FStereoLayerComponent::SetEquirectProps(FEquirectProps InScaleBiases);


// Function  Engine.StereoLayerComponent.SetLeftTexture
// Offset::0x65425A0;
void FStereoLayerComponent::SetLeftTexture(FTexture* InTexture);


// Function  Engine.StereoLayerComponent.SetPriority
// Offset::0x65421D0;
void FStereoLayerComponent::SetPriority(int32_t InPriority);


// Function  Engine.StereoLayerComponent.SetQuadSize
// Offset::0x65424D0;
void FStereoLayerComponent::SetQuadSize(FVector2D InQuadSize);


// Function  Engine.StereoLayerComponent.SetTexture
// Offset::0x6542640;
void FStereoLayerComponent::SetTexture(FTexture* InTexture);


// Function  Engine.StereoLayerComponent.SetUVRect
// Offset::0x65423F0;
void FStereoLayerComponent::SetUVRect(FBox2D InUVRect);


// Function  Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen
// Offset::0x6542F30;
void FStereoLayerFunctionLibrary::EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);


// Function  Engine.StereoLayerFunctionLibrary.HideSplashScreen
// Offset::0x6542FC0;
void FStereoLayerFunctionLibrary::HideSplashScreen();


// Function  Engine.StereoLayerFunctionLibrary.SetSplashScreen
// Offset::0x6543000;
void FStereoLayerFunctionLibrary::SetSplashScreen(FTexture* Texture,FVector2D Scale,FVector Offset,bool bShowLoadingMovie,bool bShowOnSet);


// Function  Engine.StereoLayerFunctionLibrary.ShowSplashScreen
// Offset::0x6542FE0;
void FStereoLayerFunctionLibrary::ShowSplashScreen();


// Function  Engine.SubsystemBlueprintLibrary.GetAudioEngineSubsystem
// Offset::0x6544EA0;
FAudioEngineSubsystem* FSubsystemBlueprintLibrary::GetAudioEngineSubsystem(FObject* ContextObject,FAudioEngineSubsystem* Class);


// Function  Engine.SubsystemBlueprintLibrary.GetEngineSubsystem
// Offset::0x1A88740;
FEngineSubsystem* FSubsystemBlueprintLibrary::GetEngineSubsystem(FEngineSubsystem* Class);


// Function  Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem
// Offset::0x1A88650;
FGameInstanceSubsystem* FSubsystemBlueprintLibrary::GetGameInstanceSubsystem(FObject* ContextObject,FGameInstanceSubsystem* Class);


// Function  Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem
// Offset::0x1A88560;
FLocalPlayerSubsystem* FSubsystemBlueprintLibrary::GetLocalPlayerSubsystem(FObject* ContextObject,FLocalPlayerSubsystem* Class);


// Function  Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystemFromPlayerController
// Offset::0x1A88380;
FLocalPlayerSubsystem* FSubsystemBlueprintLibrary::GetLocalPlayerSubsystemFromPlayerController(FPlayerController* PlayerController,FLocalPlayerSubsystem* Class);


// Function  Engine.SubsystemBlueprintLibrary.GetWorldSubsystem
// Offset::0x1A88470;
FWorldSubsystem* FSubsystemBlueprintLibrary::GetWorldSubsystem(FObject* ContextObject,FWorldSubsystem* Class);


// Function  Engine.TextRenderComponent.GetTextLocalSize
// Offset::0x6545D30;
FVector FTextRenderComponent::GetTextLocalSize();


// Function  Engine.TextRenderComponent.GetTextWorldSize
// Offset::0x6545CD0;
FVector FTextRenderComponent::GetTextWorldSize();


// Function  Engine.TextRenderComponent.K2_SetText
// Offset::0x65463A0;
void FTextRenderComponent::K2_SetText(FText Value);


// Function  Engine.TextRenderComponent.SetFont
// Offset::0x6546260;
void FTextRenderComponent::SetFont(FFont* Value);


// Function  Engine.TextRenderComponent.SetHorizontalAlignment
// Offset::0x65461D0;
void FTextRenderComponent::SetHorizontalAlignment(enum class EHorizTextAligment Value);


// Function  Engine.TextRenderComponent.SetHorizSpacingAdjust
// Offset::0x6545ED0;
void FTextRenderComponent::SetHorizSpacingAdjust(float Value);


// Function  Engine.TextRenderComponent.SetTextMaterial
// Offset::0x6546300;
void FTextRenderComponent::SetTextMaterial(FMaterialInterface* Material);


// Function  Engine.TextRenderComponent.SetTextRenderColor
// Offset::0x65460B0;
void FTextRenderComponent::SetTextRenderColor(FColor Value);


// Function  Engine.TextRenderComponent.SetVerticalAlignment
// Offset::0x6546140;
void FTextRenderComponent::SetVerticalAlignment(enum class EVerticalTextAligment Value);


// Function  Engine.TextRenderComponent.SetVertSpacingAdjust
// Offset::0x6545E30;
void FTextRenderComponent::SetVertSpacingAdjust(float Value);


// Function  Engine.TextRenderComponent.SetWorldSize
// Offset::0x6545D90;
void FTextRenderComponent::SetWorldSize(float Value);


// Function  Engine.TextRenderComponent.SetXScale
// Offset::0x6546010;
void FTextRenderComponent::SetXScale(float Value);


// Function  Engine.TextRenderComponent.SetYScale
// Offset::0x6545F70;
void FTextRenderComponent::SetYScale(float Value);


// Function  Engine.Texture2DArray.Blueprint_UpdateTextureFromSourceTextures
// Offset::0x1B91E70;
void FTexture2DArray::Blueprint_UpdateTextureFromSourceTextures();


// Function  Engine.TimelineComponent.GetIgnoreTimeDilation
// Offset::0x654B050;
bool FTimelineComponent::GetIgnoreTimeDilation();


// Function  Engine.TimelineComponent.GetPlaybackPosition
// Offset::0x208AC60;
float FTimelineComponent::GetPlaybackPosition();


// Function  Engine.TimelineComponent.GetPlayRate
// Offset::0x654B350;
float FTimelineComponent::GetPlayRate();


// Function  Engine.TimelineComponent.GetScaledTimelineLength
// Offset::0x654B250;
float FTimelineComponent::GetScaledTimelineLength();


// Function  Engine.TimelineComponent.GetTimelineLength
// Offset::0x654B280;
float FTimelineComponent::GetTimelineLength();


// Function  Engine.TimelineComponent.IsLooping
// Offset::0x654B420;
bool FTimelineComponent::IsLooping();


// Function  Engine.TimelineComponent.IsPlaying
// Offset::0x654B660;
bool FTimelineComponent::IsPlaying();


// Function  Engine.TimelineComponent.IsReversing
// Offset::0x654B630;
bool FTimelineComponent::IsReversing();


// Function  Engine.TimelineComponent.OnRep_Timeline
// Offset::0x654AD90;
void FTimelineComponent::OnRep_Timeline();


// Function  Engine.TimelineComponent.Play
// Offset::0x654B710;
void FTimelineComponent::Play();


// Function  Engine.TimelineComponent.PlayFromStart
// Offset::0x654B6F0;
void FTimelineComponent::PlayFromStart();


// Function  Engine.TimelineComponent.Reverse
// Offset::0x654B6D0;
void FTimelineComponent::Reverse();


// Function  Engine.TimelineComponent.ReverseFromEnd
// Offset::0x654B6B0;
void FTimelineComponent::ReverseFromEnd();


// Function  Engine.TimelineComponent.SetFloatCurve
// Offset::0x654AF70;
void FTimelineComponent::SetFloatCurve(FCurveFloat* NewFloatCurve,FName FloatTrackName);


// Function  Engine.TimelineComponent.SetIgnoreTimeDilation
// Offset::0x654B080;
void FTimelineComponent::SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);


// Function  Engine.TimelineComponent.SetLinearColorCurve
// Offset::0x654ADB0;
void FTimelineComponent::SetLinearColorCurve(FCurveLinearColor* NewLinearColorCurve,FName LinearColorTrackName);


// Function  Engine.TimelineComponent.SetLooping
// Offset::0x654B450;
void FTimelineComponent::SetLooping(bool bNewLooping);


// Function  Engine.TimelineComponent.SetNewTime
// Offset::0x654B2B0;
void FTimelineComponent::SetNewTime(float NewTime);


// Function  Engine.TimelineComponent.SetPlaybackPosition
// Offset::0x654B4F0;
void FTimelineComponent::SetPlaybackPosition(float NewPosition,bool bFireEvents,bool bFireUpdate);


// Function  Engine.TimelineComponent.SetPlayRate
// Offset::0x654B380;
void FTimelineComponent::SetPlayRate(float NewRate);


// Function  Engine.TimelineComponent.SetTimelineLength
// Offset::0x654B1B0;
void FTimelineComponent::SetTimelineLength(float NewLength);


// Function  Engine.TimelineComponent.SetTimelineLengthMode
// Offset::0x654B120;
void FTimelineComponent::SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode);


// Function  Engine.TimelineComponent.SetVectorCurve
// Offset::0x654AE90;
void FTimelineComponent::SetVectorCurve(FCurveVector* NewVectorCurve,FName VectorTrackName);


// Function  Engine.TimelineComponent.Stop
// Offset::0x654B690;
void FTimelineComponent::Stop();


// Function  Engine.TwitterIntegrationBase.AuthorizeAccounts
// Offset::0x2876320;
bool FTwitterIntegrationBase::AuthorizeAccounts();


// Function  Engine.TwitterIntegrationBase.CanShowTweetUI
// Offset::0x17AF4E0;
bool FTwitterIntegrationBase::CanShowTweetUI();


// Function  Engine.TwitterIntegrationBase.GetAccountName
// Offset::0x654E8C0;
FString FTwitterIntegrationBase::GetAccountName(int32_t AccountIndex);


// Function  Engine.TwitterIntegrationBase.GetNumAccounts
// Offset::0x2876350;
int32_t FTwitterIntegrationBase::GetNumAccounts();


// Function  Engine.TwitterIntegrationBase.Init
// Offset::0x179D370;
void FTwitterIntegrationBase::Init();


// Function  Engine.TwitterIntegrationBase.ShowTweetUI
// Offset::0x654E9A0;
bool FTwitterIntegrationBase::ShowTweetUI(FString InitialMessage,FString URL,FString Picture);


// Function  Engine.TwitterIntegrationBase.TwitterRequest
// Offset::0x654E6D0;
bool FTwitterIntegrationBase::TwitterRequest(FString URL,TArray<FString> ParamKeysAndValues,enum class ETwitterRequestMethod RequestMethod,int32_t AccountIndex);


// Function  Engine.TypedElementCommonActions.DeleteNormalizedElements
// Offset::0x654F530;
bool FTypedElementCommonActions::DeleteNormalizedElements(FScriptTypedElementListProxy ElementList,FWorld* World,FTypedElementSelectionSet* InSelectionSet,FTypedElementDeletionOptions DeletionOptions);


// Function  Engine.TypedElementCommonActions.DeleteSelectedElements
// Offset::0x654F710;
bool FTypedElementCommonActions::DeleteSelectedElements(FTypedElementSelectionSet* SelectionSet,FWorld* World,FTypedElementDeletionOptions DeletionOptions);


// Function  Engine.TypedElementCommonActions.DuplicateNormalizedElements
// Offset::0x654F0C0;
TArray<FScriptTypedElementHandle> FTypedElementCommonActions::DuplicateNormalizedElements(FScriptTypedElementListProxy ElementList,FWorld* World,FVector LocationOffset);


// Function  Engine.TypedElementCommonActions.K2_DuplicateSelectedElements
// Offset::0x654F320;
TArray<FScriptTypedElementHandle> FTypedElementCommonActions::K2_DuplicateSelectedElements(FTypedElementSelectionSet* SelectionSet,FWorld* World,FVector LocationOffset);


// Function  Engine.TypedElementWorldInterface.CanDeleteElement
// Offset::0x65501F0;
bool FTypedElementWorldInterface::CanDeleteElement(FScriptTypedElementHandle InElementHandle);


// Function  Engine.TypedElementWorldInterface.CanDuplicateElement
// Offset::0x654FF50;
bool FTypedElementWorldInterface::CanDuplicateElement(FScriptTypedElementHandle InElementHandle);


// Function  Engine.TypedElementWorldInterface.CanEditElement
// Offset::0x65510B0;
bool FTypedElementWorldInterface::CanEditElement(FScriptTypedElementHandle InElementHandle);


// Function  Engine.TypedElementWorldInterface.CanMoveElement
// Offset::0x6550D00;
bool FTypedElementWorldInterface::CanMoveElement(FScriptTypedElementHandle InElementHandle,enum class ETypedElementWorldType InWorldType);


// Function  Engine.TypedElementWorldInterface.DeleteElement
// Offset::0x6550020;
bool FTypedElementWorldInterface::DeleteElement(FScriptTypedElementHandle InElementHandle,FWorld* InWorld,FTypedElementSelectionSet* InSelectionSet,FTypedElementDeletionOptions InDeletionOptions);


// Function  Engine.TypedElementWorldInterface.DuplicateElement
// Offset::0x654FDD0;
FScriptTypedElementHandle FTypedElementWorldInterface::DuplicateElement(FScriptTypedElementHandle InElementHandle,FWorld* InWorld,FVector InLocationOffset);


// Function  Engine.TypedElementWorldInterface.GetBounds
// Offset::0x6550E10;
bool FTypedElementWorldInterface::GetBounds(FScriptTypedElementHandle InElementHandle,FBoxSphereBounds OutBounds);


// Function  Engine.TypedElementWorldInterface.GetOwnerLevel
// Offset::0x6550FF0;
FLevel* FTypedElementWorldInterface::GetOwnerLevel(FScriptTypedElementHandle InElementHandle);


// Function  Engine.TypedElementWorldInterface.GetOwnerWorld
// Offset::0x6550F30;
FWorld* FTypedElementWorldInterface::GetOwnerWorld(FScriptTypedElementHandle InElementHandle);


// Function  Engine.TypedElementWorldInterface.GetPivotOffset
// Offset::0x6550620;
bool FTypedElementWorldInterface::GetPivotOffset(FScriptTypedElementHandle InElementHandle,FVector OutPivotOffset);


// Function  Engine.TypedElementWorldInterface.GetRelativeTransform
// Offset::0x65508B0;
bool FTypedElementWorldInterface::GetRelativeTransform(FScriptTypedElementHandle InElementHandle,FTransform OutTransform);


// Function  Engine.TypedElementWorldInterface.GetWorldTransform
// Offset::0x6550B90;
bool FTypedElementWorldInterface::GetWorldTransform(FScriptTypedElementHandle InElementHandle,FTransform OutTransform);


// Function  Engine.TypedElementWorldInterface.IsTemplateElement
// Offset::0x52E7480;
bool FTypedElementWorldInterface::IsTemplateElement(FScriptTypedElementHandle InElementHandle);


// Function  Engine.TypedElementWorldInterface.NotifyMovementEnded
// Offset::0x65502C0;
void FTypedElementWorldInterface::NotifyMovementEnded(FScriptTypedElementHandle InElementHandle);


// Function  Engine.TypedElementWorldInterface.NotifyMovementOngoing
// Offset::0x6550380;
void FTypedElementWorldInterface::NotifyMovementOngoing(FScriptTypedElementHandle InElementHandle);


// Function  Engine.TypedElementWorldInterface.NotifyMovementStarted
// Offset::0x6550440;
void FTypedElementWorldInterface::NotifyMovementStarted(FScriptTypedElementHandle InElementHandle);


// Function  Engine.TypedElementWorldInterface.SetPivotOffset
// Offset::0x6550500;
bool FTypedElementWorldInterface::SetPivotOffset(FScriptTypedElementHandle InElementHandle,FVector InPivotOffset);


// Function  Engine.TypedElementWorldInterface.SetRelativeTransform
// Offset::0x6550740;
bool FTypedElementWorldInterface::SetRelativeTransform(FScriptTypedElementHandle InElementHandle,FTransform InTransform);


// Function  Engine.TypedElementWorldInterface.SetWorldTransform
// Offset::0x6550A20;
bool FTypedElementWorldInterface::SetWorldTransform(FScriptTypedElementHandle InElementHandle,FTransform InTransform);


// Function  Engine.VectorFieldComponent.SetIntensity
// Offset::0x6553980;
void FVectorFieldComponent::SetIntensity(float NewIntensity);


// Function  Engine.ViewportStatsSubsystem.AddDisplayDelegate
// Offset::0x6553EC0;
int32_t FViewportStatsSubsystem::AddDisplayDelegate(FDelegate Delegate);


// Function  Engine.ViewportStatsSubsystem.AddTimedDisplay
// Offset::0x6553F90;
void FViewportStatsSubsystem::AddTimedDisplay(FText Text,FLinearColor Color,float Duration,FVector2D DisplayOffset);


// Function  Engine.ViewportStatsSubsystem.RemoveDisplayDelegate
// Offset::0x6553E20;
void FViewportStatsSubsystem::RemoveDisplayDelegate(int32_t IndexToRemove);


// Function  Engine.VisualLoggerKismetLibrary.EnableRecording
// Offset::0x64438A0;
void FVisualLoggerKismetLibrary::EnableRecording(bool bEnabled);


// Function  Engine.VisualLoggerKismetLibrary.LogBox
// Offset::0x65552D0;
void FVisualLoggerKismetLibrary::LogBox(FObject* WorldContextObject,FBox BoxShape,FString Text,FLinearColor ObjectColor,FName LogCategory,bool bAddToMessageLog);


// Function  Engine.VisualLoggerKismetLibrary.LogLocation
// Offset::0x65555D0;
void FVisualLoggerKismetLibrary::LogLocation(FObject* WorldContextObject,FVector Location,FString Text,FLinearColor ObjectColor,float Radius,FName LogCategory,bool bAddToMessageLog);


// Function  Engine.VisualLoggerKismetLibrary.LogSegment
// Offset::0x6554F10;
void FVisualLoggerKismetLibrary::LogSegment(FObject* WorldContextObject,FVector SegmentStart,FVector SegmentEnd,FString Text,FLinearColor ObjectColor,float Thickness,FName CategoryName,bool bAddToMessageLog);


// Function  Engine.VisualLoggerKismetLibrary.LogText
// Offset::0x6555910;
void FVisualLoggerKismetLibrary::LogText(FObject* WorldContextObject,FString Text,FName LogCategory,bool bAddToMessageLog);


// Function  Engine.VisualLoggerKismetLibrary.RedirectVislog
// Offset::0x6555AF0;
void FVisualLoggerKismetLibrary::RedirectVislog(FObject* SourceOwner,FObject* DestinationOwner);


// Function  Engine.VOIPTalker.BPOnTalkingBegin
// Offset::0x65562B0;
void FVOIPTalker::BPOnTalkingBegin(FAudioComponent* AudioComponent);


// Function  Engine.VOIPTalker.BPOnTalkingEnd
// Offset::0x1A7E2F0;
void FVOIPTalker::BPOnTalkingEnd();


// Function  Engine.VOIPTalker.CreateTalkerForPlayer
// Offset::0x6556420;
FVOIPTalker* FVOIPTalker::CreateTalkerForPlayer(FPlayerState* OwningState);


// Function  Engine.VOIPTalker.GetVoiceLevel
// Offset::0x6556350;
float FVOIPTalker::GetVoiceLevel();


// Function  Engine.VOIPTalker.RegisterWithPlayerState
// Offset::0x6556380;
void FVOIPTalker::RegisterWithPlayerState(FPlayerState* OwningState);


// Function  Engine.VOIPStatics.SetMicThreshold
// Offset::0x6556D70;
void FVOIPStatics::SetMicThreshold(float InThreshold);


// Function  Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance
// Offset::0x6557730;
void FVolumetricCloudComponent::SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);


// Function  Engine.VolumetricCloudComponent.SetGroundAlbedo
// Offset::0x65577D0;
void FVolumetricCloudComponent::SetGroundAlbedo(FColor NewValue);


// Function  Engine.VolumetricCloudComponent.SetLayerBottomAltitude
// Offset::0x65579A0;
void FVolumetricCloudComponent::SetLayerBottomAltitude(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetLayerHeight
// Offset::0x6557900;
void FVolumetricCloudComponent::SetLayerHeight(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetMaterial
// Offset::0x6557370;
void FVolumetricCloudComponent::SetMaterial(FMaterialInterface* NewValue);


// Function  Engine.VolumetricCloudComponent.SetPlanetRadius
// Offset::0x651F560;
void FVolumetricCloudComponent::SetPlanetRadius(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetReflectionSampleCountScale
// Offset::0x65572D0;
void FVolumetricCloudComponent::SetReflectionSampleCountScale(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetReflectionViewSampleCountScale
// Offset::0x651F380;
void FVolumetricCloudComponent::SetReflectionViewSampleCountScale(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale
// Offset::0x6557230;
void FVolumetricCloudComponent::SetShadowReflectionSampleCountScale(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetShadowReflectionViewSampleCountScale
// Offset::0x65574B0;
void FVolumetricCloudComponent::SetShadowReflectionViewSampleCountScale(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetShadowTracingDistance
// Offset::0x6557410;
void FVolumetricCloudComponent::SetShadowTracingDistance(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale
// Offset::0x6557550;
void FVolumetricCloudComponent::SetShadowViewSampleCountScale(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion
// Offset::0x6557690;
void FVolumetricCloudComponent::SetSkyLightCloudBottomOcclusion(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetStopTracingTransmittanceThreshold
// Offset::0x651F1A0;
void FVolumetricCloudComponent::SetStopTracingTransmittanceThreshold(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetTracingMaxDistance
// Offset::0x651F600;
void FVolumetricCloudComponent::SetTracingMaxDistance(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetTracingStartMaxDistance
// Offset::0x6557860;
void FVolumetricCloudComponent::SetTracingStartMaxDistance(float NewValue);


// Function  Engine.VolumetricCloudComponent.SetViewSampleCountScale
// Offset::0x65575F0;
void FVolumetricCloudComponent::SetViewSampleCountScale(float NewValue);


// Function  Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
// Offset::0x6559A60;
void FWindDirectionalSourceComponent::SetMaximumGustAmount(float InNewMaxGust);


// Function  Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
// Offset::0x6559B00;
void FWindDirectionalSourceComponent::SetMinimumGustAmount(float InNewMinGust);


// Function  Engine.WindDirectionalSourceComponent.SetRadius
// Offset::0x65599C0;
void FWindDirectionalSourceComponent::SetRadius(float InNewRadius);


// Function  Engine.WindDirectionalSourceComponent.SetSpeed
// Offset::0x6559BA0;
void FWindDirectionalSourceComponent::SetSpeed(float InNewSpeed);


// Function  Engine.WindDirectionalSourceComponent.SetStrength
// Offset::0x6559C40;
void FWindDirectionalSourceComponent::SetStrength(float InNewStrength);


// Function  Engine.WindDirectionalSourceComponent.SetWindType
// Offset::0x6559930;
void FWindDirectionalSourceComponent::SetWindType(enum class EWindSourceType InNewType);


// Function  Engine.World.HandleTimelineScrubbed
// Offset::0x655A530;
void FWorld::HandleTimelineScrubbed();


// Function  Engine.World.K2_GetWorldSettings
// Offset::0x655A500;
FWorldSettings* FWorld::K2_GetWorldSettings();


// Function  Engine.WorldDataLayers.OnDataLayerRuntimeStateChanged
// Offset::0x655AA30;
void FWorldDataLayers::OnDataLayerRuntimeStateChanged(FDataLayer* InDataLayer,enum class EDataLayerRuntimeState InState);


// Function  Engine.WorldDataLayers.OnRep_ActiveDataLayerNames
// Offset::0x655AA10;
void FWorldDataLayers::OnRep_ActiveDataLayerNames();


// Function  Engine.WorldDataLayers.OnRep_EffectiveActiveDataLayerNames
// Offset::0x655A9D0;
void FWorldDataLayers::OnRep_EffectiveActiveDataLayerNames();


// Function  Engine.WorldDataLayers.OnRep_EffectiveLoadedDataLayerNames
// Offset::0x655A9B0;
void FWorldDataLayers::OnRep_EffectiveLoadedDataLayerNames();


// Function  Engine.WorldDataLayers.OnRep_LoadedDataLayerNames
// Offset::0x655A9F0;
void FWorldDataLayers::OnRep_LoadedDataLayerNames();


// Function  Engine.WorldPartitionRuntimeLevelStreamingCell.OnLevelHidden
// Offset::0x655C2F0;
void FWorldPartitionRuntimeLevelStreamingCell::OnLevelHidden();


// Function  Engine.WorldPartitionRuntimeLevelStreamingCell.OnLevelShown
// Offset::0x655C310;
void FWorldPartitionRuntimeLevelStreamingCell::OnLevelShown();


// Function  Engine.WorldPartitionStreamingSourceComponent.DisableStreamingSource
// Offset::0x655D9E0;
void FWorldPartitionStreamingSourceComponent::DisableStreamingSource();


// Function  Engine.WorldPartitionStreamingSourceComponent.EnableStreamingSource
// Offset::0x655DA10;
void FWorldPartitionStreamingSourceComponent::EnableStreamingSource();


// Function  Engine.WorldPartitionStreamingSourceComponent.IsStreamingCompleted
// Offset::0x655D980;
bool FWorldPartitionStreamingSourceComponent::IsStreamingCompleted();


// Function  Engine.WorldPartitionStreamingSourceComponent.IsStreamingSourceEnabled
// Offset::0x655D9B0;
bool FWorldPartitionStreamingSourceComponent::IsStreamingSourceEnabled();


// Function  Engine.WorldPartitionSubsystem.IsStreamingCompleted
// Offset::0x655DE40;
bool FWorldPartitionSubsystem::IsStreamingCompleted(enum class EWorldPartitionRuntimeCellState QueryState,TArray<FWorldPartitionStreamingQuerySource> QuerySources,bool bExactState);


// Function  ClothingSystemRuntimeNv.ClothingSimulationInteractorNv.SetAnimDriveDamperStiffness
// Offset::0x67FABE0;
void FClothingSimulationInteractorNv::SetAnimDriveDamperStiffness(float InStiffness);


// Function  GameplayTasks.GameplayTask_ClaimResource.ClaimResource
// Offset::0x6861400;
FGameplayTask_ClaimResource* FGameplayTask_ClaimResource::ClaimResource(TScriptInterface<IGameplayTaskOwnerInterface> InTaskOwner,FGameplayTaskResource* ResourceClass,char Priority,FName TaskInstanceName);


// Function  GameplayTasks.GameplayTask_ClaimResource.ClaimResources
// Offset::0x6861210;
FGameplayTask_ClaimResource* FGameplayTask_ClaimResource::ClaimResources(TScriptInterface<IGameplayTaskOwnerInterface> InTaskOwner,TArray<FGameplayTaskResource*> ResourceClasses,char Priority,FName TaskInstanceName);


// Function  GameplayTasks.GameplayTask_SpawnActor.BeginSpawningActor
// Offset::0x6861880;
bool FGameplayTask_SpawnActor::BeginSpawningActor(FObject* WorldContextObject,FActor* SpawnedActor);


// Function  GameplayTasks.GameplayTask_SpawnActor.FinishSpawningActor
// Offset::0x6861790;
void FGameplayTask_SpawnActor::FinishSpawningActor(FObject* WorldContextObject,FActor* SpawnedActor);


// Function  GameplayTasks.GameplayTask_SpawnActor.SpawnActor
// Offset::0x6861980;
FGameplayTask_SpawnActor* FGameplayTask_SpawnActor::SpawnActor(TScriptInterface<IGameplayTaskOwnerInterface> TaskOwner,FVector SpawnLocation,FRotator SpawnRotation,FActor* Class,bool bSpawnOnlyOnAuthority);


// Function  NavigationSystem.NavigationPath.EnableDebugDrawing
// Offset::0x68D0170;
void FNavigationPath::EnableDebugDrawing(bool bShouldDrawDebugData,FLinearColor PathColor);


// Function  NavigationSystem.NavigationPath.EnableRecalculationOnInvalidation
// Offset::0x68D00E0;
void FNavigationPath::EnableRecalculationOnInvalidation(enum class ENavigationOptionFlag DoRecalculation);


// Function  NavigationSystem.NavigationPath.GetDebugString
// Offset::0x68D0260;
FString FNavigationPath::GetDebugString();


// Function  NavigationSystem.NavigationPath.GetPathCost
// Offset::0x68D0080;
float FNavigationPath::GetPathCost();


// Function  NavigationSystem.NavigationPath.GetPathLength
// Offset::0x68D00B0;
float FNavigationPath::GetPathLength();


// Function  NavigationSystem.NavigationPath.IsPartial
// Offset::0x68D0050;
bool FNavigationPath::IsPartial();


// Function  NavigationSystem.NavigationPath.IsStringPulled
// Offset::0x243E320;
bool FNavigationPath::IsStringPulled();


// Function  NavigationSystem.NavigationPath.IsValid
// Offset::0x68D0020;
bool FNavigationPath::IsValid();


// Function  NavigationSystem.NavigationSystemV1.FindPathToActorSynchronously
// Offset::0x68D1C20;
FNavigationPath* FNavigationSystemV1::FindPathToActorSynchronously(FObject* WorldContextObject,FVector PathStart,FActor* GoalActor,float TetherDistance,FActor* PathfindingContext,FNavigationQueryFilter* FilterClass);


// Function  NavigationSystem.NavigationSystemV1.FindPathToLocationSynchronously
// Offset::0x68D1E50;
FNavigationPath* FNavigationSystemV1::FindPathToLocationSynchronously(FObject* WorldContextObject,FVector PathStart,FVector PathEnd,FActor* PathfindingContext,FNavigationQueryFilter* FilterClass);


// Function  NavigationSystem.NavigationSystemV1.GetNavigationSystem
// Offset::0x68D2D10;
FNavigationSystemV1* FNavigationSystemV1::GetNavigationSystem(FObject* WorldContextObject);


// Function  NavigationSystem.NavigationSystemV1.GetPathCost
// Offset::0x68D23D0;
enum class ENavigationQueryResult FNavigationSystemV1::GetPathCost(FObject* WorldContextObject,FVector PathStart,FVector PathEnd,float PathCost,FNavigationData* NavData,FNavigationQueryFilter* FilterClass);


// Function  NavigationSystem.NavigationSystemV1.GetPathLength
// Offset::0x68D2170;
enum class ENavigationQueryResult FNavigationSystemV1::GetPathLength(FObject* WorldContextObject,FVector PathStart,FVector PathEnd,float PathLength,FNavigationData* NavData,FNavigationQueryFilter* FilterClass);


// Function  NavigationSystem.NavigationSystemV1.GetRandomPointInNavigableRadius
// Offset::0x68D0EB0;
FVector FNavigationSystemV1::GetRandomPointInNavigableRadius(FObject* WorldContextObject,FVector Origin,float Radius,FNavigationData* NavData,FNavigationQueryFilter* FilterClass);


// Function  NavigationSystem.NavigationSystemV1.GetRandomReachablePointInRadius
// Offset::0x68D10B0;
FVector FNavigationSystemV1::GetRandomReachablePointInRadius(FObject* WorldContextObject,FVector Origin,float Radius,FNavigationData* NavData,FNavigationQueryFilter* FilterClass);


// Function  NavigationSystem.NavigationSystemV1.IsNavigationBeingBuilt
// Offset::0x68D20D0;
bool FNavigationSystemV1::IsNavigationBeingBuilt(FObject* WorldContextObject);


// Function  NavigationSystem.NavigationSystemV1.IsNavigationBeingBuiltOrLocked
// Offset::0x68D2030;
bool FNavigationSystemV1::IsNavigationBeingBuiltOrLocked(FObject* WorldContextObject);


// Function  NavigationSystem.NavigationSystemV1.K2_GetRandomLocationInNavigableRadius
// Offset::0x68D2630;
bool FNavigationSystemV1::K2_GetRandomLocationInNavigableRadius(FObject* WorldContextObject,FVector Origin,FVector RandomLocation,float Radius,FNavigationData* NavData,FNavigationQueryFilter* FilterClass);


// Function  NavigationSystem.NavigationSystemV1.K2_GetRandomPointInNavigableRadius
// Offset::0x68D0B90;
bool FNavigationSystemV1::K2_GetRandomPointInNavigableRadius(FObject* WorldContextObject,FVector Origin,FVector RandomLocation,float Radius,FNavigationData* NavData,FNavigationQueryFilter* FilterClass);


// Function  NavigationSystem.NavigationSystemV1.K2_GetRandomReachablePointInRadius
// Offset::0x68D2870;
bool FNavigationSystemV1::K2_GetRandomReachablePointInRadius(FObject* WorldContextObject,FVector Origin,FVector RandomLocation,float Radius,FNavigationData* NavData,FNavigationQueryFilter* FilterClass);


// Function  NavigationSystem.NavigationSystemV1.K2_ProjectPointToNavigation
// Offset::0x68D2AB0;
bool FNavigationSystemV1::K2_ProjectPointToNavigation(FObject* WorldContextObject,FVector Point,FVector ProjectedLocation,FNavigationData* NavData,FNavigationQueryFilter* FilterClass,FVector QueryExtent);


// Function  NavigationSystem.NavigationSystemV1.K2_ReplaceAreaInOctreeData
// Offset::0x68D1570;
bool FNavigationSystemV1::K2_ReplaceAreaInOctreeData(FObject* Object,FNavArea* OldArea,FNavArea* NewArea);


// Function  NavigationSystem.NavigationSystemV1.NavigationRaycast
// Offset::0x68D19D0;
bool FNavigationSystemV1::NavigationRaycast(FObject* WorldContextObject,FVector RayStart,FVector RayEnd,FVector HitLocation,FNavigationQueryFilter* FilterClass,FController* Querier);


// Function  NavigationSystem.NavigationSystemV1.OnNavigationBoundsUpdated
// Offset::0x68D14D0;
void FNavigationSystemV1::OnNavigationBoundsUpdated(FNavMeshBoundsVolume* NavVolume);


// Function  NavigationSystem.NavigationSystemV1.ProjectPointToNavigation
// Offset::0x68D12B0;
FVector FNavigationSystemV1::ProjectPointToNavigation(FObject* WorldContextObject,FVector Point,FNavigationData* NavData,FNavigationQueryFilter* FilterClass,FVector QueryExtent);


// Function  NavigationSystem.NavigationSystemV1.RegisterNavigationInvoker
// Offset::0x68D17E0;
void FNavigationSystemV1::RegisterNavigationInvoker(FActor* Invoker,float TileGenerationRadius,float TileRemovalRadius);


// Function  NavigationSystem.NavigationSystemV1.ResetMaxSimultaneousTileGenerationJobsCount
// Offset::0x68D1910;
void FNavigationSystemV1::ResetMaxSimultaneousTileGenerationJobsCount();


// Function  NavigationSystem.NavigationSystemV1.SetGeometryGatheringMode
// Offset::0x68D16B0;
void FNavigationSystemV1::SetGeometryGatheringMode(enum class ENavDataGatheringModeConfig NewMode);


// Function  NavigationSystem.NavigationSystemV1.SetMaxSimultaneousTileGenerationJobsCount
// Offset::0x68D1930;
void FNavigationSystemV1::SetMaxSimultaneousTileGenerationJobsCount(int32_t MaxNumberOfJobs);


// Function  NavigationSystem.NavigationSystemV1.SimpleMoveToActor
// Offset::0x6555AF0;
void FNavigationSystemV1::SimpleMoveToActor(FController* Controller,FActor* Goal);


// Function  NavigationSystem.NavigationSystemV1.SimpleMoveToLocation
// Offset::0x68D0DD0;
void FNavigationSystemV1::SimpleMoveToLocation(FController* Controller,FVector Goal);


// Function  NavigationSystem.NavigationSystemV1.UnregisterNavigationInvoker
// Offset::0x68D1740;
void FNavigationSystemV1::UnregisterNavigationInvoker(FActor* Invoker);


// Function  NavigationSystem.NavRelevantComponent.SetNavigationRelevancy
// Offset::0x68D5DE0;
void FNavRelevantComponent::SetNavigationRelevancy(bool bRelevant);


// Function  NavigationSystem.NavModifierComponent.SetAreaClass
// Offset::0x68D5690;
void FNavModifierComponent::SetAreaClass(FNavArea* NewAreaClass);


// Function  NavigationSystem.NavModifierVolume.SetAreaClass
// Offset::0x68D59C0;
void FNavModifierVolume::SetAreaClass(FNavArea* NewAreaClass);


// Function  NavigationSystem.RecastNavMesh.K2_ReplaceAreaInTileBounds
// Offset::0x68D65F0;
bool FRecastNavMesh::K2_ReplaceAreaInTileBounds(FBox Bounds,FNavArea* OldArea,FNavArea* NewArea,bool ReplaceLinks);


// Function  AIModule.AIAsyncTaskBlueprintProxy.OnMoveCompleted
// Offset::0x696F970;
void FAIAsyncTaskBlueprintProxy::OnMoveCompleted(FAIRequestID RequestID,enum class EPathFollowingResult MovementResult);


// Function  AIModule.AIBlueprintHelperLibrary.CreateMoveToProxyObject
// Offset::0x6970B50;
FAIAsyncTaskBlueprintProxy* FAIBlueprintHelperLibrary::CreateMoveToProxyObject(FObject* WorldContextObject,FPawn* Pawn,FVector Destination,FActor* TargetActor,float AcceptanceRadius,bool bStopOnOverlap);


// Function  AIModule.AIBlueprintHelperLibrary.GetAIController
// Offset::0x6970640;
FAIController* FAIBlueprintHelperLibrary::GetAIController(FActor* ControlledActor);


// Function  AIModule.AIBlueprintHelperLibrary.GetBlackboard
// Offset::0x69705A0;
FBlackboardComponent* FAIBlueprintHelperLibrary::GetBlackboard(FActor* Target);


// Function  AIModule.AIBlueprintHelperLibrary.GetCurrentPath
// Offset::0x69700C0;
FNavigationPath* FAIBlueprintHelperLibrary::GetCurrentPath(FController* Controller);


// Function  AIModule.AIBlueprintHelperLibrary.GetCurrentPathIndex
// Offset::0x696FF30;
int32_t FAIBlueprintHelperLibrary::GetCurrentPathIndex(FController* Controller);


// Function  AIModule.AIBlueprintHelperLibrary.GetCurrentPathPoints
// Offset::0x696FFD0;
TArray<FVector> FAIBlueprintHelperLibrary::GetCurrentPathPoints(FController* Controller);


// Function  AIModule.AIBlueprintHelperLibrary.GetNextNavLinkIndex
// Offset::0x696FE90;
int32_t FAIBlueprintHelperLibrary::GetNextNavLinkIndex(FController* Controller);


// Function  AIModule.AIBlueprintHelperLibrary.IsValidAIDirection
// Offset::0x6970200;
bool FAIBlueprintHelperLibrary::IsValidAIDirection(FVector DirectionVector);


// Function  AIModule.AIBlueprintHelperLibrary.IsValidAILocation
// Offset::0x69702A0;
bool FAIBlueprintHelperLibrary::IsValidAILocation(FVector Location);


// Function  AIModule.AIBlueprintHelperLibrary.IsValidAIRotation
// Offset::0x6970160;
bool FAIBlueprintHelperLibrary::IsValidAIRotation(FRotator Rotation);


// Function  AIModule.AIBlueprintHelperLibrary.LockAIResourcesWithAnimation
// Offset::0x6970470;
void FAIBlueprintHelperLibrary::LockAIResourcesWithAnimation(FAnimInstance* AnimInstance,bool bLockMovement,bool LockAILogic);


// Function  AIModule.AIBlueprintHelperLibrary.SendAIMessage
// Offset::0x69709D0;
void FAIBlueprintHelperLibrary::SendAIMessage(FPawn* Target,FName Message,FObject* MessageSource,bool bSuccess);


// Function  AIModule.AIBlueprintHelperLibrary.SimpleMoveToActor
// Offset::0x696FDB0;
void FAIBlueprintHelperLibrary::SimpleMoveToActor(FController* Controller,FActor* Goal);


// Function  AIModule.AIBlueprintHelperLibrary.SimpleMoveToLocation
// Offset::0x696FCD0;
void FAIBlueprintHelperLibrary::SimpleMoveToLocation(FController* Controller,FVector Goal);


// Function  AIModule.AIBlueprintHelperLibrary.SpawnAIFromClass
// Offset::0x69706E0;
FPawn* FAIBlueprintHelperLibrary::SpawnAIFromClass(FObject* WorldContextObject,FPawn* PawnClass,FBehaviorTree* BehaviorTree,FVector Location,FRotator Rotation,bool bNoCollisionFail,FActor* Owner);


// Function  AIModule.AIBlueprintHelperLibrary.UnlockAIResourcesWithAnimation
// Offset::0x6970340;
void FAIBlueprintHelperLibrary::UnlockAIResourcesWithAnimation(FAnimInstance* AnimInstance,bool bUnlockMovement,bool UnlockAILogic);


// Function  AIModule.AIPerceptionComponent.ForgetAll
// Offset::0x69746D0;
void FAIPerceptionComponent::ForgetAll();


// Function  AIModule.AIPerceptionComponent.GetActorsPerception
// Offset::0x6974110;
bool FAIPerceptionComponent::GetActorsPerception(FActor* Actor,FActorPerceptionBlueprintInfo Info);


// Function  AIModule.AIPerceptionComponent.GetCurrentlyPerceivedActors
// Offset::0x6974420;
void FAIPerceptionComponent::GetCurrentlyPerceivedActors(FAISense* SenseToUse,TArray<FActor*> OutActors);


// Function  AIModule.AIPerceptionComponent.GetKnownPerceivedActors
// Offset::0x6974320;
void FAIPerceptionComponent::GetKnownPerceivedActors(FAISense* SenseToUse,TArray<FActor*> OutActors);


// Function  AIModule.AIPerceptionComponent.GetPerceivedActors
// Offset::0x6974220;
void FAIPerceptionComponent::GetPerceivedActors(FAISense* SenseToUse,TArray<FActor*> OutActors);


// Function  AIModule.AIPerceptionComponent.GetPerceivedHostileActors
// Offset::0x6974620;
void FAIPerceptionComponent::GetPerceivedHostileActors(TArray<FActor*> OutActors);


// Function  AIModule.AIPerceptionComponent.GetPerceivedHostileActorsBySense
// Offset::0x6974520;
void FAIPerceptionComponent::GetPerceivedHostileActorsBySense(FAISense* SenseToUse,TArray<FActor*> OutActors);


// Function  AIModule.AIPerceptionComponent.OnOwnerEndPlay
// Offset::0x6974710;
void FAIPerceptionComponent::OnOwnerEndPlay(FActor* Actor,enum class EEndPlayReason EndPlayReason);


// Function  AIModule.AIPerceptionComponent.RequestStimuliListenerUpdate
// Offset::0x69746F0;
void FAIPerceptionComponent::RequestStimuliListenerUpdate();


// Function  AIModule.AIPerceptionComponent.SetSenseEnabled
// Offset::0x6974020;
void FAIPerceptionComponent::SetSenseEnabled(FAISense* SenseClass,bool bEnable);


// Function  AIModule.AIPerceptionStimuliSourceComponent.RegisterForSense
// Offset::0x6974F60;
void FAIPerceptionStimuliSourceComponent::RegisterForSense(FAISense* SenseClass);


// Function  AIModule.AIPerceptionStimuliSourceComponent.RegisterWithPerceptionSystem
// Offset::0x6975000;
void FAIPerceptionStimuliSourceComponent::RegisterWithPerceptionSystem();


// Function  AIModule.AIPerceptionStimuliSourceComponent.UnregisterFromPerceptionSystem
// Offset::0x6974F40;
void FAIPerceptionStimuliSourceComponent::UnregisterFromPerceptionSystem();


// Function  AIModule.AIPerceptionStimuliSourceComponent.UnregisterFromSense
// Offset::0x6974EA0;
void FAIPerceptionStimuliSourceComponent::UnregisterFromSense(FAISense* SenseClass);


// Function  AIModule.AISense_Blueprint.GetAllListenerActors
// Offset::0x6978520;
void FAISense_Blueprint::GetAllListenerActors(TArray<FActor*> ListenerActors);


// Function  AIModule.AISense_Blueprint.GetAllListenerComponents
// Offset::0x6978470;
void FAISense_Blueprint::GetAllListenerComponents(TArray<FAIPerceptionComponent*> ListenerComponents);


// Function  AIModule.AISense_Blueprint.K2_OnNewPawn
// Offset::0x3D30810;
void FAISense_Blueprint::K2_OnNewPawn(FPawn* NewPawn);


// Function  AIModule.AISense_Blueprint.OnListenerRegistered
// Offset::0x3D30810;
void FAISense_Blueprint::OnListenerRegistered(FActor* ActorListener,FAIPerceptionComponent* PerceptionComponent);


// Function  AIModule.AISense_Blueprint.OnListenerUnregistered
// Offset::0x3D30810;
void FAISense_Blueprint::OnListenerUnregistered(FActor* ActorListener,FAIPerceptionComponent* PerceptionComponent);


// Function  AIModule.AISense_Blueprint.OnListenerUpdated
// Offset::0x3D30810;
void FAISense_Blueprint::OnListenerUpdated(FActor* ActorListener,FAIPerceptionComponent* PerceptionComponent);


// Function  AIModule.AISense_Blueprint.OnUpdate
// Offset::0x3D30810;
float FAISense_Blueprint::OnUpdate(TArray<FAISenseEvent*> EventsToProcess);


// Function  AIModule.AISense_Damage.ReportDamageEvent
// Offset::0x69794A0;
void FAISense_Damage::ReportDamageEvent(FObject* WorldContextObject,FActor* DamagedActor,FActor* Instigator,float DamageAmount,FVector EventLocation,FVector HitLocation,FName Tag);


// Function  AIModule.AISense_Hearing.ReportNoiseEvent
// Offset::0x69799D0;
void FAISense_Hearing::ReportNoiseEvent(FObject* WorldContextObject,FVector NoiseLocation,float Loudness,FActor* Instigator,float MaxRange,FName Tag);


// Function  AIModule.AISense_Prediction.RequestControllerPredictionEvent
// Offset::0x6979FC0;
void FAISense_Prediction::RequestControllerPredictionEvent(FAIController* Requestor,FActor* PredictedActor,float PredictionTime);


// Function  AIModule.AISense_Prediction.RequestPawnPredictionEvent
// Offset::0x6979E90;
void FAISense_Prediction::RequestPawnPredictionEvent(FPawn* Requestor,FActor* PredictedActor,float PredictionTime);


// Function  AIModule.AISystem.AIIgnorePlayers
// Offset::0x17AA8C0;
void FAISystem::AIIgnorePlayers();


// Function  AIModule.AISystem.AILoggingVerbose
// Offset::0x179DEB0;
void FAISystem::AILoggingVerbose();


// Function  AIModule.AITask_MoveTo.AIMoveTo
// Offset::0x697AEB0;
FAITask_MoveTo* FAITask_MoveTo::AIMoveTo(FAIController* Controller,FVector GoalLocation,FActor* GoalActor,float AcceptanceRadius,enum class EAIOptionFlag StopOnOverlap,enum class EAIOptionFlag AcceptPartialPath,bool bUsePathfinding,bool bLockAILogic,bool bUseContinuosGoalTracking,enum class EAIOptionFlag ProjectGoalOnNavigation);


// Function  AIModule.AITask_RunEQS.RunEQS
// Offset::0x697C4E0;
FAITask_RunEQS* FAITask_RunEQS::RunEQS(FAIController* Controller,FEnvQuery* QueryTemplate);


// Function  AIModule.BlackboardAssetProvider.GetBlackboardAsset
// Offset::0x697DCB0;
FBlackboardData* FBlackboardAssetProvider::GetBlackboardAsset();


// Function  AIModule.BlackboardComponent.ClearValue
// Offset::0x697DEB0;
void FBlackboardComponent::ClearValue(FName KeyName);


// Function  AIModule.BlackboardComponent.GetLocationFromEntry
// Offset::0x697E060;
bool FBlackboardComponent::GetLocationFromEntry(FName KeyName,FVector ResultLocation);


// Function  AIModule.BlackboardComponent.GetRotationFromEntry
// Offset::0x697DF60;
bool FBlackboardComponent::GetRotationFromEntry(FName KeyName,FRotator ResultRotation);


// Function  AIModule.BlackboardComponent.GetValueAsBool
// Offset::0x697EF30;
bool FBlackboardComponent::GetValueAsBool(FName KeyName);


// Function  AIModule.BlackboardComponent.GetValueAsClass
// Offset::0x697F1F0;
FObject* FBlackboardComponent::GetValueAsClass(FName KeyName);


// Function  AIModule.BlackboardComponent.GetValueAsEnum
// Offset::0x697F140;
char FBlackboardComponent::GetValueAsEnum(FName KeyName);


// Function  AIModule.BlackboardComponent.GetValueAsFloat
// Offset::0x697EFE0;
float FBlackboardComponent::GetValueAsFloat(FName KeyName);


// Function  AIModule.BlackboardComponent.GetValueAsInt
// Offset::0x697F090;
int32_t FBlackboardComponent::GetValueAsInt(FName KeyName);


// Function  AIModule.BlackboardComponent.GetValueAsName
// Offset::0x697ED80;
FName FBlackboardComponent::GetValueAsName(FName KeyName);


// Function  AIModule.BlackboardComponent.GetValueAsObject
// Offset::0x697F2A0;
FObject* FBlackboardComponent::GetValueAsObject(FName KeyName);


// Function  AIModule.BlackboardComponent.GetValueAsRotator
// Offset::0x697EC00;
FRotator FBlackboardComponent::GetValueAsRotator(FName KeyName);


// Function  AIModule.BlackboardComponent.GetValueAsString
// Offset::0x697EE40;
FString FBlackboardComponent::GetValueAsString(FName KeyName);


// Function  AIModule.BlackboardComponent.GetValueAsVector
// Offset::0x697ECC0;
FVector FBlackboardComponent::GetValueAsVector(FName KeyName);


// Function  AIModule.BlackboardComponent.IsVectorValueSet
// Offset::0x697E160;
bool FBlackboardComponent::IsVectorValueSet(FName KeyName);


// Function  AIModule.BlackboardComponent.SetValueAsBool
// Offset::0x697E650;
void FBlackboardComponent::SetValueAsBool(FName KeyName,bool BoolValue);


// Function  AIModule.BlackboardComponent.SetValueAsClass
// Offset::0x697EA20;
void FBlackboardComponent::SetValueAsClass(FName KeyName,FObject* ClassValue);


// Function  AIModule.BlackboardComponent.SetValueAsEnum
// Offset::0x697E930;
void FBlackboardComponent::SetValueAsEnum(FName KeyName,char EnumValue);


// Function  AIModule.BlackboardComponent.SetValueAsFloat
// Offset::0x697E750;
void FBlackboardComponent::SetValueAsFloat(FName KeyName,float FloatValue);


// Function  AIModule.BlackboardComponent.SetValueAsInt
// Offset::0x697E840;
void FBlackboardComponent::SetValueAsInt(FName KeyName,int32_t IntValue);


// Function  AIModule.BlackboardComponent.SetValueAsName
// Offset::0x697E410;
void FBlackboardComponent::SetValueAsName(FName KeyName,FName NameValue);


// Function  AIModule.BlackboardComponent.SetValueAsObject
// Offset::0x697EB10;
void FBlackboardComponent::SetValueAsObject(FName KeyName,FObject* ObjectValue);


// Function  AIModule.BlackboardComponent.SetValueAsRotator
// Offset::0x697E210;
void FBlackboardComponent::SetValueAsRotator(FName KeyName,FRotator VectorValue);


// Function  AIModule.BlackboardComponent.SetValueAsString
// Offset::0x697E500;
void FBlackboardComponent::SetValueAsString(FName KeyName,FString StringValue);


// Function  AIModule.BlackboardComponent.SetValueAsVector
// Offset::0x697E310;
void FBlackboardComponent::SetValueAsVector(FName KeyName,FVector VectorValue);


// Function  AIModule.BTDecorator_BlueprintBase.IsDecoratorExecutionActive
// Offset::0x6982A80;
bool FBTDecorator_BlueprintBase::IsDecoratorExecutionActive();


// Function  AIModule.BTDecorator_BlueprintBase.IsDecoratorObserverActive
// Offset::0x6982A50;
bool FBTDecorator_BlueprintBase::IsDecoratorObserverActive();


// Function  AIModule.BTDecorator_BlueprintBase.PerformConditionCheck
// Offset::0x3D30810;
bool FBTDecorator_BlueprintBase::PerformConditionCheck(FActor* OwnerActor);


// Function  AIModule.BTDecorator_BlueprintBase.PerformConditionCheckAI
// Offset::0x3D30810;
bool FBTDecorator_BlueprintBase::PerformConditionCheckAI(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  AIModule.BTDecorator_BlueprintBase.ReceiveExecutionFinish
// Offset::0x3D30810;
void FBTDecorator_BlueprintBase::ReceiveExecutionFinish(FActor* OwnerActor,enum class EBTNodeResult NodeResult);


// Function  AIModule.BTDecorator_BlueprintBase.ReceiveExecutionFinishAI
// Offset::0x3D30810;
void FBTDecorator_BlueprintBase::ReceiveExecutionFinishAI(FAIController* OwnerController,FPawn* ControlledPawn,enum class EBTNodeResult NodeResult);


// Function  AIModule.BTDecorator_BlueprintBase.ReceiveExecutionStart
// Offset::0x3D30810;
void FBTDecorator_BlueprintBase::ReceiveExecutionStart(FActor* OwnerActor);


// Function  AIModule.BTDecorator_BlueprintBase.ReceiveExecutionStartAI
// Offset::0x3D30810;
void FBTDecorator_BlueprintBase::ReceiveExecutionStartAI(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  AIModule.BTDecorator_BlueprintBase.ReceiveObserverActivated
// Offset::0x3D30810;
void FBTDecorator_BlueprintBase::ReceiveObserverActivated(FActor* OwnerActor);


// Function  AIModule.BTDecorator_BlueprintBase.ReceiveObserverActivatedAI
// Offset::0x3D30810;
void FBTDecorator_BlueprintBase::ReceiveObserverActivatedAI(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  AIModule.BTDecorator_BlueprintBase.ReceiveObserverDeactivated
// Offset::0x3D30810;
void FBTDecorator_BlueprintBase::ReceiveObserverDeactivated(FActor* OwnerActor);


// Function  AIModule.BTDecorator_BlueprintBase.ReceiveObserverDeactivatedAI
// Offset::0x3D30810;
void FBTDecorator_BlueprintBase::ReceiveObserverDeactivatedAI(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  AIModule.BTDecorator_BlueprintBase.ReceiveTick
// Offset::0x3D30810;
void FBTDecorator_BlueprintBase::ReceiveTick(FActor* OwnerActor,float DeltaSeconds);


// Function  AIModule.BTDecorator_BlueprintBase.ReceiveTickAI
// Offset::0x3D30810;
void FBTDecorator_BlueprintBase::ReceiveTickAI(FAIController* OwnerController,FPawn* ControlledPawn,float DeltaSeconds);


// Function  AIModule.BTFunctionLibrary.ClearBlackboardValue
// Offset::0x69858C0;
void FBTFunctionLibrary::ClearBlackboardValue(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.ClearBlackboardValueAsVector
// Offset::0x69858C0;
void FBTFunctionLibrary::ClearBlackboardValueAsVector(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsActor
// Offset::0x6987230;
FActor* FBTFunctionLibrary::GetBlackboardValueAsActor(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsBool
// Offset::0x6986CE0;
bool FBTFunctionLibrary::GetBlackboardValueAsBool(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsClass
// Offset::0x6987120;
FObject* FBTFunctionLibrary::GetBlackboardValueAsClass(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsEnum
// Offset::0x6987010;
char FBTFunctionLibrary::GetBlackboardValueAsEnum(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsFloat
// Offset::0x6986DF0;
float FBTFunctionLibrary::GetBlackboardValueAsFloat(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsInt
// Offset::0x6986F00;
int32_t FBTFunctionLibrary::GetBlackboardValueAsInt(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsName
// Offset::0x6986A70;
FName FBTFunctionLibrary::GetBlackboardValueAsName(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsObject
// Offset::0x6987340;
FObject* FBTFunctionLibrary::GetBlackboardValueAsObject(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsRotator
// Offset::0x6986810;
FRotator FBTFunctionLibrary::GetBlackboardValueAsRotator(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsString
// Offset::0x6986B90;
FString FBTFunctionLibrary::GetBlackboardValueAsString(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetBlackboardValueAsVector
// Offset::0x6986940;
FVector FBTFunctionLibrary::GetBlackboardValueAsVector(FBTNode* NodeOwner,FBlackboardKeySelector Key);


// Function  AIModule.BTFunctionLibrary.GetOwnerComponent
// Offset::0x6987450;
FBehaviorTreeComponent* FBTFunctionLibrary::GetOwnerComponent(FBTNode* NodeOwner);


// Function  AIModule.BTFunctionLibrary.GetOwnersBlackboard
// Offset::0x69874F0;
FBlackboardComponent* FBTFunctionLibrary::GetOwnersBlackboard(FBTNode* NodeOwner);


// Function  AIModule.BTFunctionLibrary.SetBlackboardValueAsBool
// Offset::0x6985FD0;
void FBTFunctionLibrary::SetBlackboardValueAsBool(FBTNode* NodeOwner,FBlackboardKeySelector Key,bool Value);


// Function  AIModule.BTFunctionLibrary.SetBlackboardValueAsClass
// Offset::0x6986550;
void FBTFunctionLibrary::SetBlackboardValueAsClass(FBTNode* NodeOwner,FBlackboardKeySelector Key,FObject* Value);


// Function  AIModule.BTFunctionLibrary.SetBlackboardValueAsEnum
// Offset::0x69863F0;
void FBTFunctionLibrary::SetBlackboardValueAsEnum(FBTNode* NodeOwner,FBlackboardKeySelector Key,char Value);


// Function  AIModule.BTFunctionLibrary.SetBlackboardValueAsFloat
// Offset::0x6986130;
void FBTFunctionLibrary::SetBlackboardValueAsFloat(FBTNode* NodeOwner,FBlackboardKeySelector Key,float Value);


// Function  AIModule.BTFunctionLibrary.SetBlackboardValueAsInt
// Offset::0x6986290;
void FBTFunctionLibrary::SetBlackboardValueAsInt(FBTNode* NodeOwner,FBlackboardKeySelector Key,int32_t Value);


// Function  AIModule.BTFunctionLibrary.SetBlackboardValueAsName
// Offset::0x6985CB0;
void FBTFunctionLibrary::SetBlackboardValueAsName(FBTNode* NodeOwner,FBlackboardKeySelector Key,FName Value);


// Function  AIModule.BTFunctionLibrary.SetBlackboardValueAsObject
// Offset::0x69866B0;
void FBTFunctionLibrary::SetBlackboardValueAsObject(FBTNode* NodeOwner,FBlackboardKeySelector Key,FObject* Value);


// Function  AIModule.BTFunctionLibrary.SetBlackboardValueAsRotator
// Offset::0x69859D0;
void FBTFunctionLibrary::SetBlackboardValueAsRotator(FBTNode* NodeOwner,FBlackboardKeySelector Key,FRotator Value);


// Function  AIModule.BTFunctionLibrary.SetBlackboardValueAsString
// Offset::0x6985E10;
void FBTFunctionLibrary::SetBlackboardValueAsString(FBTNode* NodeOwner,FBlackboardKeySelector Key,FString Value);


// Function  AIModule.BTFunctionLibrary.SetBlackboardValueAsVector
// Offset::0x6985B40;
void FBTFunctionLibrary::SetBlackboardValueAsVector(FBTNode* NodeOwner,FBlackboardKeySelector Key,FVector Value);


// Function  AIModule.BTFunctionLibrary.StartUsingExternalEvent
// Offset::0x6555AF0;
void FBTFunctionLibrary::StartUsingExternalEvent(FBTNode* NodeOwner,FActor* OwningActor);


// Function  AIModule.BTFunctionLibrary.StopUsingExternalEvent
// Offset::0x64429B0;
void FBTFunctionLibrary::StopUsingExternalEvent(FBTNode* NodeOwner);


// Function  AIModule.BTService_BlueprintBase.IsServiceActive
// Offset::0x69895F0;
bool FBTService_BlueprintBase::IsServiceActive();


// Function  AIModule.BTService_BlueprintBase.ReceiveActivation
// Offset::0x3D30810;
void FBTService_BlueprintBase::ReceiveActivation(FActor* OwnerActor);


// Function  AIModule.BTService_BlueprintBase.ReceiveActivationAI
// Offset::0x3D30810;
void FBTService_BlueprintBase::ReceiveActivationAI(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  AIModule.BTService_BlueprintBase.ReceiveDeactivation
// Offset::0x3D30810;
void FBTService_BlueprintBase::ReceiveDeactivation(FActor* OwnerActor);


// Function  AIModule.BTService_BlueprintBase.ReceiveDeactivationAI
// Offset::0x3D30810;
void FBTService_BlueprintBase::ReceiveDeactivationAI(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  AIModule.BTService_BlueprintBase.ReceiveSearchStart
// Offset::0x3D30810;
void FBTService_BlueprintBase::ReceiveSearchStart(FActor* OwnerActor);


// Function  AIModule.BTService_BlueprintBase.ReceiveSearchStartAI
// Offset::0x3D30810;
void FBTService_BlueprintBase::ReceiveSearchStartAI(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  AIModule.BTService_BlueprintBase.ReceiveTick
// Offset::0x3D30810;
void FBTService_BlueprintBase::ReceiveTick(FActor* OwnerActor,float DeltaSeconds);


// Function  AIModule.BTService_BlueprintBase.ReceiveTickAI
// Offset::0x3D30810;
void FBTService_BlueprintBase::ReceiveTickAI(FAIController* OwnerController,FPawn* ControlledPawn,float DeltaSeconds);


// Function  AIModule.BTTask_BlueprintBase.FinishAbort
// Offset::0x698B130;
void FBTTask_BlueprintBase::FinishAbort();


// Function  AIModule.BTTask_BlueprintBase.FinishExecute
// Offset::0x698B150;
void FBTTask_BlueprintBase::FinishExecute(bool bSuccess);


// Function  AIModule.BTTask_BlueprintBase.IsTaskAborting
// Offset::0x698AF50;
bool FBTTask_BlueprintBase::IsTaskAborting();


// Function  AIModule.BTTask_BlueprintBase.IsTaskExecuting
// Offset::0x698AF80;
bool FBTTask_BlueprintBase::IsTaskExecuting();


// Function  AIModule.BTTask_BlueprintBase.ReceiveAbort
// Offset::0x3D30810;
void FBTTask_BlueprintBase::ReceiveAbort(FActor* OwnerActor);


// Function  AIModule.BTTask_BlueprintBase.ReceiveAbortAI
// Offset::0x3D30810;
void FBTTask_BlueprintBase::ReceiveAbortAI(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  AIModule.BTTask_BlueprintBase.ReceiveExecute
// Offset::0x3D30810;
void FBTTask_BlueprintBase::ReceiveExecute(FActor* OwnerActor);


// Function  AIModule.BTTask_BlueprintBase.ReceiveExecuteAI
// Offset::0x3D30810;
void FBTTask_BlueprintBase::ReceiveExecuteAI(FAIController* OwnerController,FPawn* ControlledPawn);


// Function  AIModule.BTTask_BlueprintBase.ReceiveTick
// Offset::0x3D30810;
void FBTTask_BlueprintBase::ReceiveTick(FActor* OwnerActor,float DeltaSeconds);


// Function  AIModule.BTTask_BlueprintBase.ReceiveTickAI
// Offset::0x3D30810;
void FBTTask_BlueprintBase::ReceiveTickAI(FAIController* OwnerController,FPawn* ControlledPawn,float DeltaSeconds);


// Function  AIModule.BTTask_BlueprintBase.SetFinishOnMessage
// Offset::0x698B090;
void FBTTask_BlueprintBase::SetFinishOnMessage(FName MessageName);


// Function  AIModule.BTTask_BlueprintBase.SetFinishOnMessageWithId
// Offset::0x698AFB0;
void FBTTask_BlueprintBase::SetFinishOnMessageWithId(FName MessageName,int32_t RequestID);


// Function  AIModule.CrowdFollowingComponent.SuspendCrowdSteering
// Offset::0x698D5F0;
void FCrowdFollowingComponent::SuspendCrowdSteering(bool bSuspend);


// Function  AIModule.EnvQueryContext_BlueprintBase.ProvideActorsSet
// Offset::0x3D30810;
void FEnvQueryContext_BlueprintBase::ProvideActorsSet(FObject* QuerierObject,FActor* QuerierActor,TArray<FActor*> ResultingActorsSet);


// Function  AIModule.EnvQueryContext_BlueprintBase.ProvideLocationsSet
// Offset::0x3D30810;
void FEnvQueryContext_BlueprintBase::ProvideLocationsSet(FObject* QuerierObject,FActor* QuerierActor,TArray<FVector> ResultingLocationSet);


// Function  AIModule.EnvQueryContext_BlueprintBase.ProvideSingleActor
// Offset::0x3D30810;
void FEnvQueryContext_BlueprintBase::ProvideSingleActor(FObject* QuerierObject,FActor* QuerierActor,FActor* ResultingActor);


// Function  AIModule.EnvQueryContext_BlueprintBase.ProvideSingleLocation
// Offset::0x3D30810;
void FEnvQueryContext_BlueprintBase::ProvideSingleLocation(FObject* QuerierObject,FActor* QuerierActor,FVector ResultingLocation);


// Function  AIModule.EnvQueryGenerator_BlueprintBase.AddGeneratedActor
// Offset::0x698FDE0;
void FEnvQueryGenerator_BlueprintBase::AddGeneratedActor(FActor* GeneratedActor);


// Function  AIModule.EnvQueryGenerator_BlueprintBase.AddGeneratedVector
// Offset::0x698FE80;
void FEnvQueryGenerator_BlueprintBase::AddGeneratedVector(FVector GeneratedVector);


// Function  AIModule.EnvQueryGenerator_BlueprintBase.DoItemGeneration
// Offset::0x3D30810;
void FEnvQueryGenerator_BlueprintBase::DoItemGeneration(TArray<FVector> ContextLocations);


// Function  AIModule.EnvQueryGenerator_BlueprintBase.GetQuerier
// Offset::0x698FDB0;
FObject* FEnvQueryGenerator_BlueprintBase::GetQuerier();


// Function  AIModule.EnvQueryManager.RunEQSQuery
// Offset::0x6991E90;
FEnvQueryInstanceBlueprintWrapper* FEnvQueryManager::RunEQSQuery(FObject* WorldContextObject,FEnvQuery* QueryTemplate,FObject* Querier,enum class EEnvQueryRunMode RunMode,FEnvQueryInstanceBlueprintWrapper* WrapperClass);


// Function  AIModule.NavLinkProxy.HasMovingAgents
// Offset::0x6995570;
bool FNavLinkProxy::HasMovingAgents();


// Function  AIModule.NavLinkProxy.IsSmartLinkEnabled
// Offset::0x6995640;
bool FNavLinkProxy::IsSmartLinkEnabled();


// Function  AIModule.NavLinkProxy.ReceiveSmartLinkReached
// Offset::0x3D30810;
void FNavLinkProxy::ReceiveSmartLinkReached(FActor* Agent,FVector Destination);


// Function  AIModule.NavLinkProxy.ResumePathFollowing
// Offset::0x6995670;
void FNavLinkProxy::ResumePathFollowing(FActor* Agent);


// Function  AIModule.NavLinkProxy.SetSmartLinkEnabled
// Offset::0x69955A0;
void FNavLinkProxy::SetSmartLinkEnabled(bool bEnabled);


// Function  AIModule.NavLocalGridManager.AddLocalNavigationGridForBox
// Offset::0x69962E0;
int32_t FNavLocalGridManager::AddLocalNavigationGridForBox(FObject* WorldContextObject,FVector Location,FVector Extent,FRotator Rotation,int32_t Radius2D,float Height,bool bRebuildGrids);


// Function  AIModule.NavLocalGridManager.AddLocalNavigationGridForCapsule
// Offset::0x6996060;
int32_t FNavLocalGridManager::AddLocalNavigationGridForCapsule(FObject* WorldContextObject,FVector Location,float CapsuleRadius,float CapsuleHalfHeight,int32_t Radius2D,float Height,bool bRebuildGrids);


// Function  AIModule.NavLocalGridManager.AddLocalNavigationGridForPoint
// Offset::0x69967B0;
int32_t FNavLocalGridManager::AddLocalNavigationGridForPoint(FObject* WorldContextObject,FVector Location,int32_t Radius2D,float Height,bool bRebuildGrids);


// Function  AIModule.NavLocalGridManager.AddLocalNavigationGridForPoints
// Offset::0x69965C0;
int32_t FNavLocalGridManager::AddLocalNavigationGridForPoints(FObject* WorldContextObject,TArray<FVector> Locations,int32_t Radius2D,float Height,bool bRebuildGrids);


// Function  AIModule.NavLocalGridManager.FindLocalNavigationGridPath
// Offset::0x6995D80;
bool FNavLocalGridManager::FindLocalNavigationGridPath(FObject* WorldContextObject,FVector Start,FVector End,TArray<FVector> PathPoints);


// Function  AIModule.NavLocalGridManager.RemoveLocalNavigationGrid
// Offset::0x6995F30;
void FNavLocalGridManager::RemoveLocalNavigationGrid(FObject* WorldContextObject,int32_t GridId,bool bRebuildGrids);


// Function  AIModule.NavLocalGridManager.SetLocalNavigationGridDensity
// Offset::0x6996980;
bool FNavLocalGridManager::SetLocalNavigationGridDensity(FObject* WorldContextObject,float CellSize);


// Function  AIModule.PawnAction.CreateActionInstance
// Offset::0x6998AD0;
FPawnAction* FPawnAction::CreateActionInstance(FObject* WorldContextObject,FPawnAction* ActionClass);


// Function  AIModule.PawnAction.Finish
// Offset::0x6998A30;
void FPawnAction::Finish(enum class EPawnActionResult WithResult);


// Function  AIModule.PawnAction.GetActionPriority
// Offset::0x62F2220;
enum class EAIRequestPriority FPawnAction::GetActionPriority();


// Function  AIModule.PawnActionsComponent.K2_AbortAction
// Offset::0x69991A0;
enum class EPawnActionAbortState FPawnActionsComponent::K2_AbortAction(FPawnAction* ActionToAbort);


// Function  AIModule.PawnActionsComponent.K2_ForceAbortAction
// Offset::0x6999100;
enum class EPawnActionAbortState FPawnActionsComponent::K2_ForceAbortAction(FPawnAction* ActionToAbort);


// Function  AIModule.PawnActionsComponent.K2_PerformAction
// Offset::0x6999370;
bool FPawnActionsComponent::K2_PerformAction(FPawn* Pawn,FPawnAction* Action,enum class EAIRequestPriority Priority);


// Function  AIModule.PawnActionsComponent.K2_PushAction
// Offset::0x6999240;
bool FPawnActionsComponent::K2_PushAction(FPawnAction* NewAction,enum class EAIRequestPriority Priority,FObject* Instigator);


// Function  AIModule.PawnAction_BlueprintBase.ActionFinished
// Offset::0x3D30810;
void FPawnAction_BlueprintBase::ActionFinished(FPawn* ControlledPawn,enum class EPawnActionResult WithResult);


// Function  AIModule.PawnAction_BlueprintBase.ActionPause
// Offset::0x3D30810;
void FPawnAction_BlueprintBase::ActionPause(FPawn* ControlledPawn);


// Function  AIModule.PawnAction_BlueprintBase.ActionResume
// Offset::0x3D30810;
void FPawnAction_BlueprintBase::ActionResume(FPawn* ControlledPawn);


// Function  AIModule.PawnAction_BlueprintBase.ActionStart
// Offset::0x3D30810;
void FPawnAction_BlueprintBase::ActionStart(FPawn* ControlledPawn);


// Function  AIModule.PawnAction_BlueprintBase.ActionTick
// Offset::0x3D30810;
void FPawnAction_BlueprintBase::ActionTick(FPawn* ControlledPawn,float DeltaSeconds);


// Function  EmbarkServerEvents.EmbarkServerEventsSubsystem.GetTelemetryRoundId
// Offset::0x6A4FDC0;
FString FEmbarkServerEventsSubsystem::GetTelemetryRoundId();


// Function  EmbarkServerEvents.EmbarkServerEventsSubsystem.IsReady
// Offset::0x6A4FE40;
bool FEmbarkServerEventsSubsystem::IsReady();


// Function  EmbarkServerEvents.EmbarkServerEventUtil.FlushEvents
// Offset::0x6A50430;
void FEmbarkServerEventUtil::FlushEvents(FObject* WorldContextObject);


// Function  EmbarkServerEvents.EmbarkServerEventUtil.RoundCompleted
// Offset::0x6A503A0;
void FEmbarkServerEventUtil::RoundCompleted(FObject* WorldContextObject);


// Function  EmbarkServerEvents.EmbarkServerEventUtil.ServerShutdown
// Offset::0x6A502B0;
void FEmbarkServerEventUtil::ServerShutdown(FObject* WorldContextObject,FString ShutdownMessage);


// Function  EmbarkServerEvents.EventAPI.ActivatedAbility
// Offset::0x6A6D230;
void FEventAPI::ActivatedAbility(FObject* WorldContextObject,int64_t Player,FString Ability,FVector Location);


// Function  EmbarkServerEvents.EventAPI.AddPersistedItem
// Offset::0x6A6CF60;
void FEventAPI::AddPersistedItem(FObject* WorldContextObject,int64_t Player,FString Source,int64_t GameAssetId,FString AssetType,int64_t Amount,TArray<int64_t> Breakthroughs);


// Function  EmbarkServerEvents.EventAPI.AddQuestProgress2
// Offset::0x6A6CD90;
void FEventAPI::AddQuestProgress2(FObject* WorldContextObject,int64_t Player,FString QuestInstanceId,int64_t Amount,int64_t QuestAssetId);


// Function  EmbarkServerEvents.EventAPI.AimBasedForceApplication
// Offset::0x6A6CB50;
void FEventAPI::AimBasedForceApplication(FObject* WorldContextObject,int64_t Player,float ForceMagnitude,FVector Location,FString Target,int64_t TargetId);


// Function  EmbarkServerEvents.EventAPI.AimingValidationFailed
// Offset::0x6A6C970;
void FEventAPI::AimingValidationFailed(FObject* WorldContextObject,int64_t Player,float PlayerPing,FVector ClientAimingLocation,FString Reason);


// Function  EmbarkServerEvents.EventAPI.AngelscriptServerError
// Offset::0x6A6C830;
void FEventAPI::AngelscriptServerError(FObject* WorldContextObject,FString Source,FString Message);


// Function  EmbarkServerEvents.EventAPI.AntiCheatAuthIntegrity
// Offset::0x6A6C6F0;
void FEventAPI::AntiCheatAuthIntegrity(FObject* WorldContextObject,int64_t Player,FString Details);


// Function  EmbarkServerEvents.EventAPI.AntiCheatHardwareID2
// Offset::0x6A6C570;
void FEventAPI::AntiCheatHardwareID2(FObject* WorldContextObject,int64_t Player,int32_t Vendor,FString HardwareId);


// Function  EmbarkServerEvents.EventAPI.AntiCheatPlayerActionRequiredServer
// Offset::0x6A6C370;
void FEventAPI::AntiCheatPlayerActionRequiredServer(FObject* WorldContextObject,int64_t Player,FString ClientAction,FString Reason,FString Details);


// Function  EmbarkServerEvents.EventAPI.AntiCheatServerKick
// Offset::0x6A6C1F0;
void FEventAPI::AntiCheatServerKick(FObject* WorldContextObject,int64_t Player,int32_t Vendor,FString Details);


// Function  EmbarkServerEvents.EventAPI.AppInfo
// Offset::0x6A6C000;
void FEventAPI::AppInfo(FObject* WorldContextObject,FString AppId,FString BranchName,FString CountryCode,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.AttackDefendSquadAbandon
// Offset::0x6A6BF20;
void FEventAPI::AttackDefendSquadAbandon(FObject* WorldContextObject,int64_t SquadIndex);


// Function  EmbarkServerEvents.EventAPI.AttackDefendTeam
// Offset::0x6A6BD90;
void FEventAPI::AttackDefendTeam(FObject* WorldContextObject,int64_t Player,FString Team,FString SubroundId);


// Function  EmbarkServerEvents.EventAPI.AutobotSpawned
// Offset::0x6A6BC60;
void FEventAPI::AutobotSpawned(FObject* WorldContextObject,int64_t Player,bool bIsServerBot);


// Function  EmbarkServerEvents.EventAPI.DdosSeverityEscalation
// Offset::0x6A6BB70;
void FEventAPI::DdosSeverityEscalation(FObject* WorldContextObject,FString Severity);


// Function  EmbarkServerEvents.EventAPI.DefibReviveFailed
// Offset::0x6A6B860;
void FEventAPI::DefibReviveFailed(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t TargetPlayer,FVector TargetLocation,float PlayerPing,float TargetPlayerPing,FString Reason);


// Function  EmbarkServerEvents.EventAPI.DestructionBoneDestroyed
// Offset::0x6A6B780;
void FEventAPI::DestructionBoneDestroyed(FObject* WorldContextObject,FVector Location);


// Function  EmbarkServerEvents.EventAPI.DestructionCutConnection
// Offset::0x6A6B650;
void FEventAPI::DestructionCutConnection(FObject* WorldContextObject,int64_t StrainConnects,int64_t BrokenLinks);


// Function  EmbarkServerEvents.EventAPI.DestructionStartSimulate
// Offset::0x6A6B520;
void FEventAPI::DestructionStartSimulate(FObject* WorldContextObject,int64_t Size,FVector Location);


// Function  EmbarkServerEvents.EventAPI.DevInstanceKey
// Offset::0x6A6B430;
void FEventAPI::DevInstanceKey(FObject* WorldContextObject,FString DevInstanceKey);


// Function  EmbarkServerEvents.EventAPI.DiedInventorySlot2
// Offset::0x6A6B190;
void FEventAPI::DiedInventorySlot2(FObject* WorldContextObject,int64_t Player,int64_t Amount,int64_t GameAssetId,FString InstanceId,FString Container,int64_t Value);


// Function  EmbarkServerEvents.EventAPI.DiscoAddRankBucketRewardXp
// Offset::0x6A6B020;
void FEventAPI::DiscoAddRankBucketRewardXp(FObject* WorldContextObject,int64_t Player,int64_t BucketId,int64_t Amount);


// Function  EmbarkServerEvents.EventAPI.DiscoArchetypeChanged
// Offset::0x6A6AE20;
void FEventAPI::DiscoArchetypeChanged(FObject* WorldContextObject,int64_t Player,FString OldArchetype,FString NewArchetype,FString LoadoutUpdateId);


// Function  EmbarkServerEvents.EventAPI.DiscoAssignPlayerSquad
// Offset::0x6A6ACA0;
void FEventAPI::DiscoAssignPlayerSquad(FObject* WorldContextObject,int64_t Player,int64_t SquadId,FString Squad);


// Function  EmbarkServerEvents.EventAPI.DiscoBankItTransferCompleted
// Offset::0x6A6AA10;
void FEventAPI::DiscoBankItTransferCompleted(FObject* WorldContextObject,int64_t Player,FVector Location,int32_t TransferPointId,FVector TransferPointLocation,int32_t Cash,int32_t SquadIndex);


// Function  EmbarkServerEvents.EventAPI.DiscoBankItTransferStarted
// Offset::0x6A6A780;
void FEventAPI::DiscoBankItTransferStarted(FObject* WorldContextObject,int64_t Player,FVector Location,int32_t TransferPointId,FVector TransferPointLocation,int32_t Cash,int32_t SquadIndex);


// Function  EmbarkServerEvents.EventAPI.DiscoCasePickup
// Offset::0x6A6A550;
void FEventAPI::DiscoCasePickup(FObject* WorldContextObject,int64_t Player,FVector Location,FVector CaseLocation,int32_t PreviousCash,int32_t CaseValue);


// Function  EmbarkServerEvents.EventAPI.DiscoCaseSpawned
// Offset::0x6A6A470;
void FEventAPI::DiscoCaseSpawned(FObject* WorldContextObject,FVector Location);


// Function  EmbarkServerEvents.EventAPI.DiscoCharacterCustomizationItem
// Offset::0x6A6A2F0;
void FEventAPI::DiscoCharacterCustomizationItem(FObject* WorldContextObject,int64_t Player,FString Item,int64_t ItemId);


// Function  EmbarkServerEvents.EventAPI.DiscoCloakedBackHit
// Offset::0x6A6A210;
void FEventAPI::DiscoCloakedBackHit(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.DiscoDefibRespawn
// Offset::0x6A6A040;
void FEventAPI::DiscoDefibRespawn(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t TargetPlayer,FVector TargetLocation);


// Function  EmbarkServerEvents.EventAPI.DiscoEnemyDamage7
// Offset::0x6A699F0;
void FEventAPI::DiscoEnemyDamage7(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t TargetPlayer,FVector TargetLocation,FString Causer,int64_t CauserId,float DamageTaken,float PreviousHealth,float CurrentHealth,int32_t DamageType,bool bIsDbno,FString DamageTypeTag,bool bIsHeadshot,FString SourceTag,float Distance);


// Function  EmbarkServerEvents.EventAPI.DiscoEnemyKilled
// Offset::0x6A69820;
void FEventAPI::DiscoEnemyKilled(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t TargetPlayer,FVector TargetLocation);


// Function  EmbarkServerEvents.EventAPI.DiscoEquipItem2
// Offset::0x6A69630;
void FEventAPI::DiscoEquipItem2(FObject* WorldContextObject,int64_t Player,FString ItemName,int64_t GameAssetId,FString DefaultInstigatorTag);


// Function  EmbarkServerEvents.EventAPI.DiscoGameModeRequest
// Offset::0x6A694F0;
void FEventAPI::DiscoGameModeRequest(FObject* WorldContextObject,FString DesiredGameMode,FString ResultingGameMode);


// Function  EmbarkServerEvents.EventAPI.DiscoGameModeStart2
// Offset::0x6A69100;
void FEventAPI::DiscoGameModeStart2(FObject* WorldContextObject,FString EnvironmentalCondition,FString VariantName,TArray<FString> RandomGameShowEvents,bool bIsPractice,bool bIsRanked,bool bIsCasual,FString GameModeName,FString MapName);


// Function  EmbarkServerEvents.EventAPI.DiscoHealthChanged2
// Offset::0x6A68D40;
void FEventAPI::DiscoHealthChanged2(FObject* WorldContextObject,int64_t Player,FVector Location,FString Causer,float DamageTaken,float PreviousHealth,float CurrentHealth,int32_t DamageType,bool bIsDbno,FString DamageTypeTag);


// Function  EmbarkServerEvents.EventAPI.DiscoItemUsageStat
// Offset::0x6A68AA0;
void FEventAPI::DiscoItemUsageStat(FObject* WorldContextObject,int64_t Player,int64_t ItemId,FString Tag,float Modifier,float Usage,FString Description);


// Function  EmbarkServerEvents.EventAPI.DiscoItemUse
// Offset::0x6A68800;
void FEventAPI::DiscoItemUse(FObject* WorldContextObject,int64_t Player,FVector Location,FString Name,int64_t ItemId,int32_t AmountBefore,int32_t AmountNow);


// Function  EmbarkServerEvents.EventAPI.DiscoItemUse2
// Offset::0x6A68500;
void FEventAPI::DiscoItemUse2(FObject* WorldContextObject,int64_t Player,FVector Location,FString Name,int64_t ItemId,int32_t AmountBefore,int32_t AmountNow,FString DefaultInstigatorTag);


// Function  EmbarkServerEvents.EventAPI.DiscoKillAssist
// Offset::0x6A683D0;
void FEventAPI::DiscoKillAssist(FObject* WorldContextObject,int64_t Player,int64_t TargetPlayer);


// Function  EmbarkServerEvents.EventAPI.DiscoLoadoutItem2
// Offset::0x6A68250;
void FEventAPI::DiscoLoadoutItem2(FObject* WorldContextObject,int64_t Player,FString Item,int64_t ItemId);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerAbandonedTournament
// Offset::0x6A68170;
void FEventAPI::DiscoPlayerAbandonedTournament(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerDepartedTournament
// Offset::0x6A68090;
void FEventAPI::DiscoPlayerDepartedTournament(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerDie
// Offset::0x6A67F60;
void FEventAPI::DiscoPlayerDie(FObject* WorldContextObject,int64_t Player,FVector Location);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerDisconnect
// Offset::0x6A67E20;
void FEventAPI::DiscoPlayerDisconnect(FObject* WorldContextObject,int64_t Player,FString Reason);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerEliminated
// Offset::0x6A67CF0;
void FEventAPI::DiscoPlayerEliminated(FObject* WorldContextObject,int64_t Player,FVector Location);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerFinishSteal
// Offset::0x6A67B80;
void FEventAPI::DiscoPlayerFinishSteal(FObject* WorldContextObject,int64_t Player,int32_t TransferPointId,int32_t Cash);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerHeal
// Offset::0x6A677C0;
void FEventAPI::DiscoPlayerHeal(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t TargetPlayer,FVector TargetLocation,FString Causer,float AmountHealed,float PreviousHealth,float CurrentHealth,bool bIsDbno);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerHealPlayer
// Offset::0x6A675F0;
void FEventAPI::DiscoPlayerHealPlayer(FObject* WorldContextObject,int64_t Player,int64_t TargetPlayer,int64_t GameAssetId,float AmountHealed);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerReconnect
// Offset::0x6A67510;
void FEventAPI::DiscoPlayerReconnect(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerSpawn2
// Offset::0x6A67160;
void FEventAPI::DiscoPlayerSpawn2(FObject* WorldContextObject,int64_t Player,int64_t SquadId,FString Squad,FVector Location,FString CharacterArchetype,FString GameMode,FString MapName,FString Deck);


// Function  EmbarkServerEvents.EventAPI.DiscoPlayerStartSteal
// Offset::0x6A66FF0;
void FEventAPI::DiscoPlayerStartSteal(FObject* WorldContextObject,int64_t Player,int32_t TransferPointId,int32_t Cash);


// Function  EmbarkServerEvents.EventAPI.DiscoPreLoginEvent
// Offset::0x6A66EC0;
void FEventAPI::DiscoPreLoginEvent(FObject* WorldContextObject,int64_t Player,bool bIsAllowedToConnect);


// Function  EmbarkServerEvents.EventAPI.DiscoQuestCompleted
// Offset::0x6A66D40;
void FEventAPI::DiscoQuestCompleted(FObject* WorldContextObject,int64_t Player,FString QuestInstanceId,int64_t QuestAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoReserveItem
// Offset::0x6A66BC0;
void FEventAPI::DiscoReserveItem(FObject* WorldContextObject,int64_t Player,FString Item,int64_t ItemId);


// Function  EmbarkServerEvents.EventAPI.DiscoRespawn
// Offset::0x6A66A40;
void FEventAPI::DiscoRespawn(FObject* WorldContextObject,int64_t Player,FVector Location,int32_t RemainingRespawnCredits);


// Function  EmbarkServerEvents.EventAPI.DiscoRoundCurrencyChanged
// Offset::0x6A66880;
void FEventAPI::DiscoRoundCurrencyChanged(FObject* WorldContextObject,int64_t Player,int32_t PreviousRoundCurrency,int32_t CurrentRoundCurrency,int32_t RoundCurrencyDelta);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedEmote
// Offset::0x6A66700;
void FEventAPI::DiscoSelectedEmote(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedEmoticon
// Offset::0x6A66580;
void FEventAPI::DiscoSelectedEmoticon(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedHandGesture
// Offset::0x6A66400;
void FEventAPI::DiscoSelectedHandGesture(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedPet
// Offset::0x6A66280;
void FEventAPI::DiscoSelectedPet(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedPose
// Offset::0x6A66090;
void FEventAPI::DiscoSelectedPose(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId,FString PoseType);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedSoundEffect
// Offset::0x6A65F10;
void FEventAPI::DiscoSelectedSoundEffect(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedSpray
// Offset::0x6A65D90;
void FEventAPI::DiscoSelectedSpray(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedWatch
// Offset::0x6A65C10;
void FEventAPI::DiscoSelectedWatch(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedWeaponAnimation
// Offset::0x6A65A90;
void FEventAPI::DiscoSelectedWeaponAnimation(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedWeaponCharm
// Offset::0x6A65910;
void FEventAPI::DiscoSelectedWeaponCharm(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedWeaponSkin
// Offset::0x6A65790;
void FEventAPI::DiscoSelectedWeaponSkin(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelectedWeaponSticker
// Offset::0x6A65610;
void FEventAPI::DiscoSelectedWeaponSticker(FObject* WorldContextObject,int64_t Player,FString Name,int64_t GameAssetId);


// Function  EmbarkServerEvents.EventAPI.DiscoSelfDamage2
// Offset::0x6A65150;
void FEventAPI::DiscoSelfDamage2(FObject* WorldContextObject,int64_t Player,FVector Location,FString Causer,int64_t CauserId,float DamageTaken,float PreviousHealth,float CurrentHealth,int32_t DamageType,bool bIsDbno,FString DamageTypeTag,FString SourceTag);


// Function  EmbarkServerEvents.EventAPI.DiscoSquadRoundCurrencyChanged
// Offset::0x6A64F90;
void FEventAPI::DiscoSquadRoundCurrencyChanged(FObject* WorldContextObject,int32_t SquadId,int32_t PreviousRoundCurrency,int32_t CurrentRoundCurrency,int32_t RoundCurrencyDelta);


// Function  EmbarkServerEvents.EventAPI.DiscoSquadWiped
// Offset::0x6A64EB0;
void FEventAPI::DiscoSquadWiped(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.DiscoTicketDrop2
// Offset::0x6A64D30;
void FEventAPI::DiscoTicketDrop2(FObject* WorldContextObject,int64_t Player,FVector Location,int32_t TicketIndex);


// Function  EmbarkServerEvents.EventAPI.DiscoTicketInserted2
// Offset::0x6A64B10;
void FEventAPI::DiscoTicketInserted2(FObject* WorldContextObject,int64_t Player,int32_t TicketIndex,FVector Location,int32_t TransferPointId,int32_t Cash);


// Function  EmbarkServerEvents.EventAPI.DiscoTicketPickup2
// Offset::0x6A64990;
void FEventAPI::DiscoTicketPickup2(FObject* WorldContextObject,int64_t Player,FVector Location,int32_t TicketIndex);


// Function  EmbarkServerEvents.EventAPI.DiscoTicketPosition2
// Offset::0x6A64860;
void FEventAPI::DiscoTicketPosition2(FObject* WorldContextObject,int32_t TicketIndex,FVector Location);


// Function  EmbarkServerEvents.EventAPI.DiscoTicketSpawn2
// Offset::0x6A646E0;
void FEventAPI::DiscoTicketSpawn2(FObject* WorldContextObject,int32_t TicketIndex,FVector Location,int32_t Cash);


// Function  EmbarkServerEvents.EventAPI.DiscoTombstoneRespawn
// Offset::0x6A64510;
void FEventAPI::DiscoTombstoneRespawn(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t TargetPlayer,FVector TargetLocation);


// Function  EmbarkServerEvents.EventAPI.DiscoTournamentWon
// Offset::0x6A64430;
void FEventAPI::DiscoTournamentWon(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.DiscoTransferCompleted
// Offset::0x6A64260;
void FEventAPI::DiscoTransferCompleted(FObject* WorldContextObject,FVector Location,int32_t TransferPointId,int32_t Cash,int32_t SquadIndex);


// Function  EmbarkServerEvents.EventAPI.DiscoTransferPointDespawned
// Offset::0x6A64130;
void FEventAPI::DiscoTransferPointDespawned(FObject* WorldContextObject,int32_t TransferPointId,FVector Location);


// Function  EmbarkServerEvents.EventAPI.DiscoTransferPointPosition
// Offset::0x6A64000;
void FEventAPI::DiscoTransferPointPosition(FObject* WorldContextObject,int32_t TransferPointId,FVector Location);


// Function  EmbarkServerEvents.EventAPI.DiscoTransferPointSpawned
// Offset::0x6A63ED0;
void FEventAPI::DiscoTransferPointSpawned(FObject* WorldContextObject,int32_t TransferPointId,FVector Location);


// Function  EmbarkServerEvents.EventAPI.DiscoTriggerRemoteItem
// Offset::0x6A63D40;
void FEventAPI::DiscoTriggerRemoteItem(FObject* WorldContextObject,int64_t Player,FString ProjectileName,FVector Location);


// Function  EmbarkServerEvents.EventAPI.DiscoUIRoundStateChange
// Offset::0x6A63C50;
void FEventAPI::DiscoUIRoundStateChange(FObject* WorldContextObject,FString State);


// Function  EmbarkServerEvents.EventAPI.DiscoUpdatedLoadoutItem
// Offset::0x6A63A60;
void FEventAPI::DiscoUpdatedLoadoutItem(FObject* WorldContextObject,int64_t Player,FString Item,int64_t ItemId,FString LoadoutUpdateId);


// Function  EmbarkServerEvents.EventAPI.DiscoUseRespawnCredit
// Offset::0x6A63930;
void FEventAPI::DiscoUseRespawnCredit(FObject* WorldContextObject,int64_t Player,int32_t RemainingRespawnCredits);


// Function  EmbarkServerEvents.EventAPI.DiscoVaultOpened
// Offset::0x6A63630;
void FEventAPI::DiscoVaultOpened(FObject* WorldContextObject,int32_t VaultIndex,FVector Location,int32_t CaseAmount);


// Function  EmbarkServerEvents.EventAPI.DiscoVaultOpenStarted
// Offset::0x6A637B0;
void FEventAPI::DiscoVaultOpenStarted(FObject* WorldContextObject,int64_t Player,FVector Location,int32_t VaultIndex);


// Function  EmbarkServerEvents.EventAPI.DiscoVaultSpawned2
// Offset::0x6A634B0;
void FEventAPI::DiscoVaultSpawned2(FObject* WorldContextObject,FVector Location,int32_t Cash,int64_t VaultIndex);


// Function  EmbarkServerEvents.EventAPI.DiscoViewSample
// Offset::0x6A63060;
void FEventAPI::DiscoViewSample(FObject* WorldContextObject,int64_t Player,TArray<float> MovementInputX,TArray<float> MovementInputY,TArray<float> MovementInputZ,TArray<float> LookDirDeltaX,TArray<float> LookDirDeltaY,TArray<float> LookDirDeltaZ,TArray<bool> IsUsingGamepad);


// Function  EmbarkServerEvents.EventAPI.DiscoViewSample2
// Offset::0x6A62CA0;
void FEventAPI::DiscoViewSample2(FObject* WorldContextObject,int64_t Player,TArray<float> MovementInputX,TArray<float> MovementInputY,TArray<float> MovementInputZ,TArray<float> LookRotationVelocityPitch,TArray<float> LookRotationVelocityYaw,TArray<bool> IsUsingGamepad);


// Function  EmbarkServerEvents.EventAPI.DiscoViewToKill4
// Offset::0x6A621A0;
void FEventAPI::DiscoViewToKill4(FObject* WorldContextObject,int64_t Player,int64_t TargetPlayer,TArray<float> KillerMovementInputX,TArray<float> KillerMovementInputY,TArray<float> KillerMovementInputZ,TArray<float> KillerLookDirDeltaX,TArray<float> KillerLookDirDeltaY,TArray<float> KillerLookDirDeltaZ,TArray<float> VictimPosInKillerFrustumX,TArray<float> VictimPosInKillerFrustumY,TArray<float> VictimPosInKillerFrustumZ,TArray<bool> IsUsingGamepad,TArray<bool> IsFiring,TArray<FString> EquippedItem,TArray<float> VictimVelocityInKillerFrustumX,TArray<float> VictimVelocityInKillerFrustumY,TArray<float> VictimVelocityInKillerFrustumZ,TArray<float> KillerVelocityInKillerFrustumX,TArray<float> KillerVelocityInKillerFrustumY,TArray<float> KillerVelocityInKillerFrustumZ);


// Function  EmbarkServerEvents.EventAPI.DiscoViewToKill5
// Offset::0x6A61790;
void FEventAPI::DiscoViewToKill5(FObject* WorldContextObject,int64_t Player,int64_t TargetPlayer,TArray<float> KillerMovementInputX,TArray<float> KillerMovementInputY,TArray<float> KillerMovementInputZ,TArray<float> KillerLookRotationVelocityPitch,TArray<float> KillerLookRotationVelocityYaw,TArray<float> VictimPosInKillerFrustumX,TArray<float> VictimPosInKillerFrustumY,TArray<float> VictimPosInKillerFrustumZ,TArray<bool> IsUsingGamepad,TArray<bool> IsFiring,TArray<float> VictimVelocityInKillerFrustumX,TArray<float> VictimVelocityInKillerFrustumY,TArray<float> VictimVelocityInKillerFrustumZ,TArray<float> KillerVelocityInKillerFrustumX,TArray<float> KillerVelocityInKillerFrustumY,TArray<float> KillerVelocityInKillerFrustumZ,float KillerLatency);


// Function  EmbarkServerEvents.EventAPI.DiscoWeaponHitPlayer3
// Offset::0x6A614A0;
void FEventAPI::DiscoWeaponHitPlayer3(FObject* WorldContextObject,int64_t Player,FString Weapon,int64_t WeaponId,int64_t TargetPlayer,FVector TargetLocation,bool bIsEnemy,bool bIsHeadshot);


// Function  EmbarkServerEvents.EventAPI.DiscoWeaponHitThing2
// Offset::0x6A61240;
void FEventAPI::DiscoWeaponHitThing2(FObject* WorldContextObject,int64_t Player,FString Weapon,int64_t WeaponId,FString Target,FVector TargetLocation);


// Function  EmbarkServerEvents.EventAPI.DiscoXpRewardTelemetry
// Offset::0x6A61010;
void FEventAPI::DiscoXpRewardTelemetry(FObject* WorldContextObject,int64_t Player,int64_t BucketId,int64_t Amount,FString EventTag,int64_t ItemId);


// Function  EmbarkServerEvents.EventAPI.DisqualifiedRespawnGroup
// Offset::0x6A60D50;
void FEventAPI::DisqualifiedRespawnGroup(FObject* WorldContextObject,int32_t GroupId,int32_t SquadIndex,FString Reason,FVector Location,float DistanceSquared,FString Ctx);


// Function  EmbarkServerEvents.EventAPI.DisqualifiedRespawnPoint2
// Offset::0x6A60A80;
void FEventAPI::DisqualifiedRespawnPoint2(FObject* WorldContextObject,int64_t Player,FString PointName,FString Reason,FVector Location,float DistanceSquared,FString Ctx);


// Function  EmbarkServerEvents.EventAPI.DisqualifiedRespawnPoint3
// Offset::0x6A608A0;
void FEventAPI::DisqualifiedRespawnPoint3(FObject* WorldContextObject,int32_t GroupId,int32_t SquadIndex,FString PointName,FString Reason);


// Function  EmbarkServerEvents.EventAPI.DisregardItem
// Offset::0x6A60660;
void FEventAPI::DisregardItem(FObject* WorldContextObject,int64_t PlayerId,int64_t GameAssetId,FString InstanceId,int32_t StackSize,FString LootContainer);


// Function  EmbarkServerEvents.EventAPI.DropItem
// Offset::0x6A603A0;
void FEventAPI::DropItem(FObject* WorldContextObject,int64_t Player,int64_t Amount,FVector Location,int64_t GameAssetId,FString InstanceId,FString Container);


// Function  EmbarkServerEvents.EventAPI.EnemyAbilityActivated
// Offset::0x6A60070;
void FEventAPI::EnemyAbilityActivated(FObject* WorldContextObject,FString Enemy,int64_t EnemyId,FString AbilityTag,FVector Location);


// Function  EmbarkServerEvents.EventAPI.EnemyAlert2
// Offset::0x6A5FCA0;
void FEventAPI::EnemyAlert2(FObject* WorldContextObject,FString Enemy,FString NewAlertness,FString OldAlertness,FString AlertnessSource,FString Sense,FString LastTag,FVector Location,int64_t EnemyId);


// Function  EmbarkServerEvents.EventAPI.EnemyDamage2
// Offset::0x6A5F2B0;
void FEventAPI::EnemyDamage2(FObject* WorldContextObject,int64_t Player,FVector Location,FString DamageCauser,int64_t WeaponId,FString Weapon,int64_t ProjectileId,FString Target,FVector TargetLocation,int64_t EnemyId,int64_t PartID,FString PartHit,float DamageTaken,bool bIsCriticalPart);


// Function  EmbarkServerEvents.EventAPI.EnemyDamagePlayer2
// Offset::0x6A5F840;
void FEventAPI::EnemyDamagePlayer2(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t GameAssetId,FString Enemy,FVector EnemyLocation,float HealthBefore,float HealthAfter,FString DamageCauser,bool bIsDbno,FString BoneHit);


// Function  EmbarkServerEvents.EventAPI.EnemyDestroyed
// Offset::0x6A5F0D0;
void FEventAPI::EnemyDestroyed(FObject* WorldContextObject,int64_t EnemySpawnId,int64_t EnemyId,FVector Location,FString Target);


// Function  EmbarkServerEvents.EventAPI.EnemyEvict2
// Offset::0x6A5EE10;
void FEventAPI::EnemyEvict2(FObject* WorldContextObject,FString Enemy,FVector Location,int64_t EnemyId,bool bInCombat,FString Reason,int64_t EnemySpawnId);


// Function  EmbarkServerEvents.EventAPI.EnemyKill2
// Offset::0x6A5EAF0;
void FEventAPI::EnemyKill2(FObject* WorldContextObject,int64_t Player,int64_t EnemyId,int64_t WeaponId,int64_t ProjectileId,FVector Location,FString DamageCauser,FString Target);


// Function  EmbarkServerEvents.EventAPI.EnemyPhysicsDamage
// Offset::0x6A5E7C0;
void FEventAPI::EnemyPhysicsDamage(FObject* WorldContextObject,int64_t EnemyId,float DamageTaken,FString PartHit,FVector Location,bool bIsCriticalPart,FString DamageCauser,FString Target);


// Function  EmbarkServerEvents.EventAPI.EnemyPhysicsKill
// Offset::0x6A5E5C0;
void FEventAPI::EnemyPhysicsKill(FObject* WorldContextObject,int64_t EnemyId,FVector Location,FString DamageCauser,FString Target);


// Function  EmbarkServerEvents.EventAPI.EnemyPosition
// Offset::0x6A5E300;
void FEventAPI::EnemyPosition(FObject* WorldContextObject,int64_t EnemySpawnId,FVector Location,FVector ForwardVector,FVector Velocity,FString Enemy,int64_t EnemyId);


// Function  EmbarkServerEvents.EventAPI.EnemyScavengeCreated
// Offset::0x6A5E210;
void FEventAPI::EnemyScavengeCreated(FObject* WorldContextObject,FString ScavengeName);


// Function  EmbarkServerEvents.EventAPI.EnemyScavengeLooted
// Offset::0x6A5E120;
void FEventAPI::EnemyScavengeLooted(FObject* WorldContextObject,FString ScavengeName);


// Function  EmbarkServerEvents.EventAPI.EnemySpawned3
// Offset::0x6A5DE70;
void FEventAPI::EnemySpawned3(FObject* WorldContextObject,FString Enemy,FVector Location,int64_t GroupId,int64_t EnemyId,int64_t EnemySpawnId,FString Alertness);


// Function  EmbarkServerEvents.EventAPI.EnemyWeaponFired2
// Offset::0x6A5DAF0;
void FEventAPI::EnemyWeaponFired2(FObject* WorldContextObject,FString Weapon,FString ProjectileClass,FVector Location,FVector Direction,FString Enemy,int64_t EnemyId,int64_t TargetPlayer,int64_t TargetGameAssetId);


// Function  EmbarkServerEvents.EventAPI.EOSProductUserId
// Offset::0x6A60260;
void FEventAPI::EOSProductUserId(FObject* WorldContextObject,int64_t Player,FString ProductUserId);


// Function  EmbarkServerEvents.EventAPI.EquipItemFailure
// Offset::0x6A5D8F0;
void FEventAPI::EquipItemFailure(FObject* WorldContextObject,int64_t Player,FString SlotName,FString ItemName,FString FailureReason);


// Function  EmbarkServerEvents.EventAPI.ExpectedPlayersProxy
// Offset::0x6A5D7B0;
void FEventAPI::ExpectedPlayersProxy(FObject* WorldContextObject,int64_t Amount,TArray<int64_t> ExpectedPlayerIds);


// Function  EmbarkServerEvents.EventAPI.ExtractedInventorySlot2
// Offset::0x6A5D510;
void FEventAPI::ExtractedInventorySlot2(FObject* WorldContextObject,int64_t Player,int64_t Amount,int64_t GameAssetId,FString InstanceId,FString Container,int64_t Value);


// Function  EmbarkServerEvents.EventAPI.ExtractionFinalized
// Offset::0x6A5D390;
void FEventAPI::ExtractionFinalized(FObject* WorldContextObject,FString Name,int32_t PlayerAmount,int32_t ExtractionCycle);


// Function  EmbarkServerEvents.EventAPI.ExtractionTimerStarted
// Offset::0x6A5D250;
void FEventAPI::ExtractionTimerStarted(FObject* WorldContextObject,FString Name,int32_t ExtractionCycle);


// Function  EmbarkServerEvents.EventAPI.FallDamage
// Offset::0x6A5D030;
void FEventAPI::FallDamage(FObject* WorldContextObject,int64_t Player,FVector Location,float DamageTaken,float HealthBefore,float HealthAfter);


// Function  EmbarkServerEvents.EventAPI.FoundStartGroup
// Offset::0x6A5CDB0;
void FEventAPI::FoundStartGroup(FObject* WorldContextObject,int32_t GroupId,int32_t SquadIndex,int32_t GroupSize,int32_t RequestSize,FString Reason,FString Ctx);


// Function  EmbarkServerEvents.EventAPI.FoundStartLocation2
// Offset::0x6A5CA90;
void FEventAPI::FoundStartLocation2(FObject* WorldContextObject,int64_t Player,FString PointName,FVector Location,float NearestEnemySquared,float NearestObjectiveSquared,FString SpawnContext,FString Selection);


// Function  EmbarkServerEvents.EventAPI.FoundStartLocation3
// Offset::0x6A5C910;
void FEventAPI::FoundStartLocation3(FObject* WorldContextObject,int32_t GroupId,int32_t SquadIndex,FString PointName);


// Function  EmbarkServerEvents.EventAPI.GameMode2
// Offset::0x6A5C620;
void FEventAPI::GameMode2(FObject* WorldContextObject,FString Mode,FString Difficulty,FString Severity,FString LocationTag);


// Function  EmbarkServerEvents.EventAPI.GameModeEnd
// Offset::0x6A5C820;
void FEventAPI::GameModeEnd(FObject* WorldContextObject,FString Reason);


// Function  EmbarkServerEvents.EventAPI.GameplayOver
// Offset::0x6A5C540;
void FEventAPI::GameplayOver(FObject* WorldContextObject,int64_t UnrealTime);


// Function  EmbarkServerEvents.EventAPI.GameshowEventStarted
// Offset::0x6A5C450;
void FEventAPI::GameshowEventStarted(FObject* WorldContextObject,FString Gameshow);


// Function  EmbarkServerEvents.EventAPI.GameshowEventStopped
// Offset::0x6A5C360;
void FEventAPI::GameshowEventStopped(FObject* WorldContextObject,FString Gameshow);


// Function  EmbarkServerEvents.EventAPI.HealthChange3
// Offset::0x6A5C050;
void FEventAPI::HealthChange3(FObject* WorldContextObject,int64_t Player,FVector Location,float HealthBefore,float HealthAfter,FString DamageCauser,bool bIsDbno,FString BoneHit);


// Function  EmbarkServerEvents.EventAPI.HitscanValidationFailed
// Offset::0x6A5BB30;
void FEventAPI::HitscanValidationFailed(FObject* WorldContextObject,int64_t Player,int64_t TargetPlayer,float PlayerPing,float TargetPlayerPing,FVector AimingLocation,FVector ActorLocation,FVector HitLocation,FVector PelvisLocation,bool bIsCrouching,FString Reason,float FailingValue,FString ExtraContext);


// Function  EmbarkServerEvents.EventAPI.InputBufferOverflow
// Offset::0x6A5BA50;
void FEventAPI::InputBufferOverflow(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.InputMethodChanged
// Offset::0x6A5B910;
void FEventAPI::InputMethodChanged(FObject* WorldContextObject,int64_t Player,FString InputDevice);


// Function  EmbarkServerEvents.EventAPI.ItemEquipped
// Offset::0x6A5B6B0;
void FEventAPI::ItemEquipped(FObject* WorldContextObject,int64_t Player,FString ItemName,FVector Location,FString EquipMethod,int64_t ItemId);


// Function  EmbarkServerEvents.EventAPI.ItemInventoryChange6
// Offset::0x6A5B090;
void FEventAPI::ItemInventoryChange6(FObject* WorldContextObject,int64_t Player,FString ItemType,FString Rarity,int32_t Tier,FString ItemSource,int32_t AmountBefore,int32_t AmountAfter,FVector Location,int64_t ItemId,FString InstanceId,FString Container,int32_t StackValue,int32_t ItemValue,TArray<int64_t> WeaponModAssets);


// Function  EmbarkServerEvents.EventAPI.ItemUsed
// Offset::0x6A5AEB0;
void FEventAPI::ItemUsed(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t GameAssetId,FString Name);


// Function  EmbarkServerEvents.EventAPI.KillBoxCarrier
// Offset::0x6A5AC20;
void FEventAPI::KillBoxCarrier(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t TargetPlayer,FVector TargetLocation,int32_t TicketIndex,int32_t Cash);


// Function  EmbarkServerEvents.EventAPI.KillStealer
// Offset::0x6A5A990;
void FEventAPI::KillStealer(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t TargetPlayer,FVector TargetLocation,int32_t TransferPointId,int32_t Cash);


// Function  EmbarkServerEvents.EventAPI.LaunchPadUse
// Offset::0x6A5A7C0;
void FEventAPI::LaunchPadUse(FObject* WorldContextObject,int64_t Player,FVector Location,bool bIsStatic,int64_t PlacingPlayer);


// Function  EmbarkServerEvents.EventAPI.LightingConditionSet
// Offset::0x6A5A680;
void FEventAPI::LightingConditionSet(FObject* WorldContextObject,FString LightingCondition,bool bOverridden);


// Function  EmbarkServerEvents.EventAPI.LootCrateOpen2
// Offset::0x6A5A4A0;
void FEventAPI::LootCrateOpen2(FObject* WorldContextObject,int64_t Player,int32_t Rarity,FVector Location,FString LootCrate);


// Function  EmbarkServerEvents.EventAPI.LootCrateSpawn
// Offset::0x6A5A310;
void FEventAPI::LootCrateSpawn(FObject* WorldContextObject,int32_t Rarity,FVector Location,FString LootCrate);


// Function  EmbarkServerEvents.EventAPI.MatchId
// Offset::0x6A59E60;
void FEventAPI::MatchId(FObject* WorldContextObject,FString MatchId);


// Function  EmbarkServerEvents.EventAPI.MatchmakingScenario
// Offset::0x6A59D70;
void FEventAPI::MatchmakingScenario(FObject* WorldContextObject,FString ScenarioId);


// Function  EmbarkServerEvents.EventAPI.MeleeHit2
// Offset::0x6A594C0;
void FEventAPI::MeleeHit2(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t TargetPlayer,FVector TargetLocation,FString Name,int64_t GameAssetId,FString SwingTag,FString AttackTag,float ClosestEnemyPlayer,FString HitType,FString HitAlliance);


// Function  EmbarkServerEvents.EventAPI.MeleeHitValidationFailed
// Offset::0x6A599A0;
void FEventAPI::MeleeHitValidationFailed(FObject* WorldContextObject,int64_t Player,int64_t TargetPlayer,float PlayerPing,float TargetPlayerPing,FVector SwingLocation,FVector HitLocation,bool bIsCrouching,FString Reason,float FailingValue);


// Function  EmbarkServerEvents.EventAPI.MeleeSwingEnd
// Offset::0x6A59270;
void FEventAPI::MeleeSwingEnd(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t GameAssetId,FString SwingTag,FString AttackTag);


// Function  EmbarkServerEvents.EventAPI.MeleeSwingStart3
// Offset::0x6A58F40;
void FEventAPI::MeleeSwingStart3(FObject* WorldContextObject,int64_t Player,FVector Location,FString WeaponName,int64_t GameAssetId,FString SwingTag,FString AttackTag,float ClosestEnemy);


// Function  EmbarkServerEvents.EventAPI.MissedInput
// Offset::0x6A58E60;
void FEventAPI::MissedInput(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.MLAgentMovement
// Offset::0x6A59F50;
void FEventAPI::MLAgentMovement(FObject* WorldContextObject,FString Enemy,FVector Location,FVector MoveToLocation,FVector FocusOnLocation,float MoveToDeltaAngle,float FocusOnDeltaAngle,float TargetSpeed,float TargetTurnSpeed,int64_t EnemyId);


// Function  EmbarkServerEvents.EventAPI.MoveItem
// Offset::0x6A58B30;
void FEventAPI::MoveItem(FObject* WorldContextObject,int64_t Player,int64_t Amount,FVector Location,int64_t GameAssetId,FString InstanceId,FString PreviousContainer,FString NewContainer);


// Function  EmbarkServerEvents.EventAPI.ObjectTransmuted
// Offset::0x6A58940;
void FEventAPI::ObjectTransmuted(FObject* WorldContextObject,int64_t Player,FString TargetClass,FString NewClass,FVector TargetLocation);


// Function  EmbarkServerEvents.EventAPI.OnlineTelemetry
// Offset::0x6A58800;
void FEventAPI::OnlineTelemetry(FObject* WorldContextObject,int64_t Player,FString Message);


// Function  EmbarkServerEvents.EventAPI.OvertimeEnded
// Offset::0x6A586D0;
void FEventAPI::OvertimeEnded(FObject* WorldContextObject,float ElapsedTime,float RemainingTime);


// Function  EmbarkServerEvents.EventAPI.OvertimeStarted
// Offset::0x6A585F0;
void FEventAPI::OvertimeStarted(FObject* WorldContextObject,float Duration);


// Function  EmbarkServerEvents.EventAPI.Pinging
// Offset::0x6A58390;
void FEventAPI::Pinging(FObject* WorldContextObject,int64_t Player,FString PingIntent,FString PingTagname,FVector Location,FVector PingLocation);


// Function  EmbarkServerEvents.EventAPI.PlayerBackfill
// Offset::0x6A582B0;
void FEventAPI::PlayerBackfill(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.PlayerCloseToCart
// Offset::0x6A58180;
void FEventAPI::PlayerCloseToCart(FObject* WorldContextObject,int64_t Player,FVector Location);


// Function  EmbarkServerEvents.EventAPI.PlayerConnect3
// Offset::0x6A57ED0;
void FEventAPI::PlayerConnect3(FObject* WorldContextObject,int64_t Player,int64_t ManifestId,FString ClientUuid,int64_t ClientPlatform);


// Function  EmbarkServerEvents.EventAPI.PlayerConnectTelemetry
// Offset::0x6A580A0;
void FEventAPI::PlayerConnectTelemetry(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.PlayerDamagePlayer2
// Offset::0x6A57A80;
void FEventAPI::PlayerDamagePlayer2(FObject* WorldContextObject,int64_t Player,FVector Location,int64_t TargetPlayer,FVector TargetLocation,float HealthBefore,float HealthAfter,FString DamageCauser,int64_t GameAssetId,bool bIsDbno,FString BoneHit);


// Function  EmbarkServerEvents.EventAPI.PlayerDie
// Offset::0x6A579A0;
void FEventAPI::PlayerDie(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.PlayerDisconnect
// Offset::0x6A578C0;
void FEventAPI::PlayerDisconnect(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.PlayerExtractionCanceled
// Offset::0x6A57660;
void FEventAPI::PlayerExtractionCanceled(FObject* WorldContextObject,int64_t Player,FVector Location,FString ExtractionPointName,FString ExtractionPointType,int32_t ExtractionCycle);


// Function  EmbarkServerEvents.EventAPI.PlayerExtractionFinalized
// Offset::0x6A57400;
void FEventAPI::PlayerExtractionFinalized(FObject* WorldContextObject,int64_t Player,FVector Location,FString ExtractionPointName,FString ExtractionPointType,int32_t ExtractionCycle);


// Function  EmbarkServerEvents.EventAPI.PlayerExtractionStarted
// Offset::0x6A571A0;
void FEventAPI::PlayerExtractionStarted(FObject* WorldContextObject,int64_t Player,FVector Location,FString ExtractionPointName,FString ExtractionPointType,int32_t ExtractionCycle);


// Function  EmbarkServerEvents.EventAPI.PlayerHeal2
// Offset::0x6A56E20;
void FEventAPI::PlayerHeal2(FObject* WorldContextObject,int64_t Player,int64_t TargetPlayer,int64_t ItemId,float HealTaken,float HealthAfter,FVector TargetLocation,FString ItemUsed,FVector Location);


// Function  EmbarkServerEvents.EventAPI.PlayerInitialized
// Offset::0x6A56D40;
void FEventAPI::PlayerInitialized(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.PlayerKickedByServer
// Offset::0x6A56C00;
void FEventAPI::PlayerKickedByServer(FObject* WorldContextObject,int64_t Player,FString Reason);


// Function  EmbarkServerEvents.EventAPI.PlayerNetworkLatency
// Offset::0x6A56AD0;
void FEventAPI::PlayerNetworkLatency(FObject* WorldContextObject,int64_t Player,float NetworkLatency);


// Function  EmbarkServerEvents.EventAPI.PlayerNotCloseToCart
// Offset::0x6A569A0;
void FEventAPI::PlayerNotCloseToCart(FObject* WorldContextObject,int64_t Player,FVector Location);


// Function  EmbarkServerEvents.EventAPI.PlayerPosition
// Offset::0x6A567B0;
void FEventAPI::PlayerPosition(FObject* WorldContextObject,int64_t Player,FVector Location,FVector ForwardVector,FVector Velocity);


// Function  EmbarkServerEvents.EventAPI.PlayerPosition5
// Offset::0x6A56100;
void FEventAPI::PlayerPosition5(FObject* WorldContextObject,int64_t Player,FVector Location,FString Stance,FString MovementMode,FVector ForwardVector,FVector Velocity,float Stamina,float Weight,float Health,float ArmorHealth,float ArmorMitigationValue,FString ArmorType,int32_t UsedLoadoutSlots,int32_t UsedBackpackSlots,int32_t UsedBeltSlots,int32_t UsedSafePocketSlots);


// Function  EmbarkServerEvents.EventAPI.PlayerRevive2
// Offset::0x6A55DF0;
void FEventAPI::PlayerRevive2(FObject* WorldContextObject,int64_t Player,int64_t TargetPlayer,FVector TargetLocation,float TargetHealTaken,float TargetDbnoHealth,FString ItemUsed,FVector Location);


// Function  EmbarkServerEvents.EventAPI.PlayerSpawn4
// Offset::0x6A55A50;
void FEventAPI::PlayerSpawn4(FObject* WorldContextObject,int64_t Player,int64_t SquadId,FString Squad,FVector Location,int64_t CharacterId,FString Difficulty,FString GameMap,FString MapLocation);


// Function  EmbarkServerEvents.EventAPI.PlayerStateChange
// Offset::0x6A558E0;
void FEventAPI::PlayerStateChange(FObject* WorldContextObject,int64_t Player,int32_t OldState,int32_t NewState);


// Function  EmbarkServerEvents.EventAPI.PlayerSurrender
// Offset::0x6A55800;
void FEventAPI::PlayerSurrender(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.PlayerTeleported
// Offset::0x6A55620;
void FEventAPI::PlayerTeleported(FObject* WorldContextObject,int64_t Player,FVector FromLocation,FVector ToLocation,bool bFriendlyPortal);


// Function  EmbarkServerEvents.EventAPI.PortalSpawned
// Offset::0x6A554F0;
void FEventAPI::PortalSpawned(FObject* WorldContextObject,int64_t Player,FVector Location);


// Function  EmbarkServerEvents.EventAPI.ProjectileValidationFailed
// Offset::0x6A55040;
void FEventAPI::ProjectileValidationFailed(FObject* WorldContextObject,int64_t Player,int64_t TargetPlayer,float PlayerPing,float TargetPlayerPing,FVector AimingLocation,FVector ActorLocation,FVector HitLocation,FVector PelvisLocation,bool bIsCrouching,FString Reason,float FailingValue);


// Function  EmbarkServerEvents.EventAPI.ReverseGravityZoneSpawned
// Offset::0x6A54F10;
void FEventAPI::ReverseGravityZoneSpawned(FObject* WorldContextObject,int64_t Player,FVector Location);


// Function  EmbarkServerEvents.EventAPI.RoundCompleted
// Offset::0x6A54E30;
void FEventAPI::RoundCompleted(FObject* WorldContextObject,int64_t UnrealTime);


// Function  EmbarkServerEvents.EventAPI.RoundDefeat
// Offset::0x6A54D00;
void FEventAPI::RoundDefeat(FObject* WorldContextObject,int64_t Player,int32_t DefeatReason);


// Function  EmbarkServerEvents.EventAPI.RoundStarted
// Offset::0x6A54C20;
void FEventAPI::RoundStarted(FObject* WorldContextObject,int64_t UnrealTime);


// Function  EmbarkServerEvents.EventAPI.RoundWin
// Offset::0x6A54AF0;
void FEventAPI::RoundWin(FObject* WorldContextObject,int64_t Player,int32_t WinReason);


// Function  EmbarkServerEvents.EventAPI.ServerAgonesReady
// Offset::0x6A54A10;
void FEventAPI::ServerAgonesReady(FObject* WorldContextObject,int64_t UnrealTime);


// Function  EmbarkServerEvents.EventAPI.ServerManifest
// Offset::0x6A54930;
void FEventAPI::ServerManifest(FObject* WorldContextObject,int64_t ServerManifestId);


// Function  EmbarkServerEvents.EventAPI.ServerPerformance2
// Offset::0x6A54730;
void FEventAPI::ServerPerformance2(FObject* WorldContextObject,TArray<char> Frametimes,TArray<char> TotalSaturatedConnections,int32_t NumBadFrams,int32_t StartingFrameNum);


// Function  EmbarkServerEvents.EventAPI.ServerShutdown
// Offset::0x6A54640;
void FEventAPI::ServerShutdown(FObject* WorldContextObject,FString Reason);


// Function  EmbarkServerEvents.EventAPI.SessionModifier
// Offset::0x6A54540;
void FEventAPI::SessionModifier(FObject* WorldContextObject,TArray<int64_t> ModifierIds);


// Function  EmbarkServerEvents.EventAPI.SoundTrapActivated
// Offset::0x6A54360;
void FEventAPI::SoundTrapActivated(FObject* WorldContextObject,int64_t Player,FVector Location,FString TrapName,float ElevationChangedTime);


// Function  EmbarkServerEvents.EventAPI.StaticSpawnerActivate2
// Offset::0x6A54100;
void FEventAPI::StaticSpawnerActivate2(FObject* WorldContextObject,FVector Location,int64_t Player,FVector PlayerLocation,FString Spawner,FString SpawnerUuid);


// Function  EmbarkServerEvents.EventAPI.StaticSpawnerCreated2
// Offset::0x6A53E90;
void FEventAPI::StaticSpawnerCreated2(FObject* WorldContextObject,FVector Location,FString Spawner,FString SpawnerParent,FString EnemyTable,FString SpawnerUuid);


// Function  EmbarkServerEvents.EventAPI.StaticSpawnerDeactivate2
// Offset::0x6A53CF0;
void FEventAPI::StaticSpawnerDeactivate2(FObject* WorldContextObject,FVector Location,FString Spawner,FString SpawnerUuid);


// Function  EmbarkServerEvents.EventAPI.StaticSpawnerDestroyEnemy2
// Offset::0x6A53AF0;
void FEventAPI::StaticSpawnerDestroyEnemy2(FObject* WorldContextObject,FString Enemy,FString Spawner,int64_t EnemySpawnId,FString SpawnerUuid);


// Function  EmbarkServerEvents.EventAPI.StaticSpawnerSpawnEnemy2
// Offset::0x6A538F0;
void FEventAPI::StaticSpawnerSpawnEnemy2(FObject* WorldContextObject,FString Enemy,FString Spawner,int64_t EnemySpawnId,FString SpawnerUuid);


// Function  EmbarkServerEvents.EventAPI.SteamApp
// Offset::0x6A53770;
void FEventAPI::SteamApp(FObject* WorldContextObject,int32_t SteamAppId,FString BranchName,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.SubroundEnded
// Offset::0x6A53630;
void FEventAPI::SubroundEnded(FObject* WorldContextObject,FString SubroundId,FString EndReason);


// Function  EmbarkServerEvents.EventAPI.SubroundLoss
// Offset::0x6A53430;
void FEventAPI::SubroundLoss(FObject* WorldContextObject,int64_t Player,FString SubroundId,FString EndReason,FString Team);


// Function  EmbarkServerEvents.EventAPI.SubroundStarted
// Offset::0x6A532F0;
void FEventAPI::SubroundStarted(FObject* WorldContextObject,FString SubroundId,FString RoundState);


// Function  EmbarkServerEvents.EventAPI.SubroundWin
// Offset::0x6A530F0;
void FEventAPI::SubroundWin(FObject* WorldContextObject,int64_t Player,FString SubroundId,FString EndReason,FString Team);


// Function  EmbarkServerEvents.EventAPI.TelemetryStartup
// Offset::0x6A53000;
void FEventAPI::TelemetryStartup(FObject* WorldContextObject,FString ServerSessionId);


// Function  EmbarkServerEvents.EventAPI.TournamentState
// Offset::0x6A52EC0;
void FEventAPI::TournamentState(FObject* WorldContextObject,FString TournamentId,FString MatchId);


// Function  EmbarkServerEvents.EventAPI.TryActivateAbility
// Offset::0x6A52D30;
void FEventAPI::TryActivateAbility(FObject* WorldContextObject,int64_t Player,FString Ability,FVector Location);


// Function  EmbarkServerEvents.EventAPI.TugOfWarCartActivationFinished
// Offset::0x6A52C00;
void FEventAPI::TugOfWarCartActivationFinished(FObject* WorldContextObject,int64_t Player,FVector CartLocation);


// Function  EmbarkServerEvents.EventAPI.TugOfWarCartActivationStarted
// Offset::0x6A52AD0;
void FEventAPI::TugOfWarCartActivationStarted(FObject* WorldContextObject,int64_t Player,FVector CartLocation);


// Function  EmbarkServerEvents.EventAPI.TugOfWarCartControlChange
// Offset::0x6A528B0;
void FEventAPI::TugOfWarCartControlChange(FObject* WorldContextObject,FVector CartLocation,int64_t PreviousSquadId,int64_t NewSquadId,int64_t PlayersSquad0,int64_t PlayersSquad1);


// Function  EmbarkServerEvents.EventAPI.TugOfWarCartDistancePushed
// Offset::0x6A52780;
void FEventAPI::TugOfWarCartDistancePushed(FObject* WorldContextObject,int64_t Player,int64_t Distance);


// Function  EmbarkServerEvents.EventAPI.TugOfWarCartStatus
// Offset::0x6A52480;
void FEventAPI::TugOfWarCartStatus(FObject* WorldContextObject,float Distance,float Speed,FVector CartLocation,FVector CartRotation,int64_t PlayersSquad0,int64_t PlayersSquad1,int64_t ControllingSquadId);


// Function  EmbarkServerEvents.EventAPI.TutorialCompleted
// Offset::0x6A523A0;
void FEventAPI::TutorialCompleted(FObject* WorldContextObject,int64_t Player);


// Function  EmbarkServerEvents.EventAPI.TutorialTagAdded
// Offset::0x6A52260;
void FEventAPI::TutorialTagAdded(FObject* WorldContextObject,int64_t Player,FString TutorialTag);


// Function  EmbarkServerEvents.EventAPI.UnrealServerTime2
// Offset::0x6A52180;
void FEventAPI::UnrealServerTime2(FObject* WorldContextObject,int64_t UnrealTime);


// Function  EmbarkServerEvents.EventAPI.UpdateFameAmount2
// Offset::0x6A51F40;
void FEventAPI::UpdateFameAmount2(FObject* WorldContextObject,int64_t Player,FString FameInstanceId,int64_t Amount,int64_t FameAssetId,FString Reason);


// Function  EmbarkServerEvents.EventAPI.WeaponFired
// Offset::0x6A51C30;
void FEventAPI::WeaponFired(FObject* WorldContextObject,int64_t Player,FString Weapon,FVector Location,FVector Direction,int64_t BulletsAfter,bool bUsingCamera,int64_t WeaponId);


// Function  EmbarkServerEvents.EventAPI.WeaponHit2
// Offset::0x6A517E0;
void FEventAPI::WeaponHit2(FObject* WorldContextObject,int64_t Player,FString Weapon,bool bIsImpactDamage,FString Target,FVector TargetLocation,int64_t WeaponId,int64_t EnemyId,int64_t EnemySpawnId,FString Payload,int64_t PayloadId);


// Function  EmbarkServerEvents.EventAPI.WeaponModRemoved2
// Offset::0x6A51540;
void FEventAPI::WeaponModRemoved2(FObject* WorldContextObject,int64_t Player,int64_t WeaponGameAssetId,FString WeaponName,int64_t ModGameAssetId,FString ModName,int32_t Value);


// Function  EmbarkServerEvents.EventAPI.WeaponModSet2
// Offset::0x6A512A0;
void FEventAPI::WeaponModSet2(FObject* WorldContextObject,int64_t Player,int64_t WeaponGameAssetId,FString WeaponName,int64_t ModGameAssetId,FString ModName,int32_t Value);


// Function  EmbarkServerEvents.EventAPI.WeaponReload
// Offset::0x6A51000;
void FEventAPI::WeaponReload(FObject* WorldContextObject,int64_t Player,FString Weapon,FVector Location,int64_t BulletsBefore,int64_t BulletsAfter,int64_t WeaponId);


// Function  EmbarkServerEvents.EventAPI.WorldActivityARCProbeLooted
// Offset::0x6A50E70;
void FEventAPI::WorldActivityARCProbeLooted(FObject* WorldContextObject,int64_t Player,FString AssetName,FVector Location);


// Function  EmbarkServerEvents.EventAPI.WorldActivityFinished
// Offset::0x6A50CE0;
void FEventAPI::WorldActivityFinished(FObject* WorldContextObject,int64_t Player,FString ActivityName,FVector Location);


// Function  EmbarkServerEvents.EventAPI.WorldActivitySpawned
// Offset::0x6A50BA0;
void FEventAPI::WorldActivitySpawned(FObject* WorldContextObject,FString ActivityName,FVector Location);


// Function  EmbarkServerEvents.EventAPI.WorldActivityStarted
// Offset::0x6A50A10;
void FEventAPI::WorldActivityStarted(FObject* WorldContextObject,int64_t Player,FString ActivityName,FVector Location);


// Function  EmbarkServerEvents.EventAPI.ZiplineUse
// Offset::0x6A50840;
void FEventAPI::ZiplineUse(FObject* WorldContextObject,int64_t Player,FVector Location,bool bIsStatic,int64_t PlacingPlayer);


// Function  RigVM.RigVM.AddRigVMFunction
// Offset::0x6A93C60;
int32_t FRigVM::AddRigVMFunction(FScriptStruct* InRigVMStruct,FName InMethodName);


// Function  RigVM.RigVM.Execute
// Offset::0x6A93D60;
bool FRigVM::Execute(FName InEntryName);


// Function  RigVM.RigVM.GetParameterValueBool
// Offset::0x6A93930;
bool FRigVM::GetParameterValueBool(FName InParameterName,int32_t InArrayIndex);


// Function  RigVM.RigVM.GetParameterValueDouble
// Offset::0x6A93490;
double FRigVM::GetParameterValueDouble(FName InParameterName,int32_t InArrayIndex);


// Function  RigVM.RigVM.GetParameterValueFloat
// Offset::0x6A936E0;
float FRigVM::GetParameterValueFloat(FName InParameterName,int32_t InArrayIndex);


// Function  RigVM.RigVM.GetParameterValueInt
// Offset::0x6A93240;
int32_t FRigVM::GetParameterValueInt(FName InParameterName,int32_t InArrayIndex);


// Function  RigVM.RigVM.GetParameterValueName
// Offset::0x6A92FD0;
FName FRigVM::GetParameterValueName(FName InParameterName,int32_t InArrayIndex);


// Function  RigVM.RigVM.GetParameterValueQuat
// Offset::0x6A92560;
FQuat FRigVM::GetParameterValueQuat(FName InParameterName,int32_t InArrayIndex);


// Function  RigVM.RigVM.GetParameterValueString
// Offset::0x6A92E30;
FString FRigVM::GetParameterValueString(FName InParameterName,int32_t InArrayIndex);


// Function  RigVM.RigVM.GetParameterValueTransform
// Offset::0x6A92110;
FTransform FRigVM::GetParameterValueTransform(FName InParameterName,int32_t InArrayIndex);


// Function  RigVM.RigVM.GetParameterValueVector
// Offset::0x6A92870;
FVector FRigVM::GetParameterValueVector(FName InParameterName,int32_t InArrayIndex);


// Function  RigVM.RigVM.GetParameterValueVector2D
// Offset::0x6A92B70;
FVector2D FRigVM::GetParameterValueVector2D(FName InParameterName,int32_t InArrayIndex);


// Function  RigVM.RigVM.GetRigVMFunctionName
// Offset::0x6A93B80;
FString FRigVM::GetRigVMFunctionName(int32_t InFunctionIndex);


// Function  RigVM.RigVM.GetStatistics
// Offset::0x6A904C0;
FRigVMStatistics FRigVM::GetStatistics();


// Function  RigVM.RigVM.SetParameterValueBool
// Offset::0x6A91E50;
void FRigVM::SetParameterValueBool(FName InParameterName,bool InValue,int32_t InArrayIndex);


// Function  RigVM.RigVM.SetParameterValueDouble
// Offset::0x6A918D0;
void FRigVM::SetParameterValueDouble(FName InParameterName,double InValue,int32_t InArrayIndex);


// Function  RigVM.RigVM.SetParameterValueFloat
// Offset::0x6A91B90;
void FRigVM::SetParameterValueFloat(FName InParameterName,float InValue,int32_t InArrayIndex);


// Function  RigVM.RigVM.SetParameterValueInt
// Offset::0x6A91600;
void FRigVM::SetParameterValueInt(FName InParameterName,int32_t InValue,int32_t InArrayIndex);


// Function  RigVM.RigVM.SetParameterValueName
// Offset::0x6A91360;
void FRigVM::SetParameterValueName(FName InParameterName,FName InValue,int32_t InArrayIndex);


// Function  RigVM.RigVM.SetParameterValueQuat
// Offset::0x6A90910;
void FRigVM::SetParameterValueQuat(FName InParameterName,FQuat InValue,int32_t InArrayIndex);


// Function  RigVM.RigVM.SetParameterValueString
// Offset::0x6A910C0;
void FRigVM::SetParameterValueString(FName InParameterName,FString InValue,int32_t InArrayIndex);


// Function  RigVM.RigVM.SetParameterValueTransform
// Offset::0x6A90620;
void FRigVM::SetParameterValueTransform(FName InParameterName,FTransform InValue,int32_t InArrayIndex);


// Function  RigVM.RigVM.SetParameterValueVector
// Offset::0x6A90BA0;
void FRigVM::SetParameterValueVector(FName InParameterName,FVector InValue,int32_t InArrayIndex);


// Function  RigVM.RigVM.SetParameterValueVector2D
// Offset::0x6A90E30;
void FRigVM::SetParameterValueVector2D(FName InParameterName,FVector2D InValue,int32_t InArrayIndex);


// Function  AdvancedWidgets.RadialSlider.GetCustomDefaultValue
// Offset::0x6AE2F60;
float FRadialSlider::GetCustomDefaultValue();


// Function  AdvancedWidgets.RadialSlider.GetNormalizedSliderHandlePosition
// Offset::0x6AE2F30;
float FRadialSlider::GetNormalizedSliderHandlePosition();


// Function  AdvancedWidgets.RadialSlider.GetValue
// Offset::0x6AE2F90;
float FRadialSlider::GetValue();


// Function  AdvancedWidgets.RadialSlider.SetAngularOffset
// Offset::0x6AE2A80;
void FRadialSlider::SetAngularOffset(float InValue);


// Function  AdvancedWidgets.RadialSlider.SetCenterBackgroundColor
// Offset::0x6AE2620;
void FRadialSlider::SetCenterBackgroundColor(FLinearColor InValue);


// Function  AdvancedWidgets.RadialSlider.SetCustomDefaultValue
// Offset::0x6AE2DF0;
void FRadialSlider::SetCustomDefaultValue(float InValue);


// Function  AdvancedWidgets.RadialSlider.SetHandStartEndRatio
// Offset::0x6AE29E0;
void FRadialSlider::SetHandStartEndRatio(FVector2D InValue);


// Function  AdvancedWidgets.RadialSlider.SetLocked
// Offset::0x6AE2940;
void FRadialSlider::SetLocked(bool InValue);


// Function  AdvancedWidgets.RadialSlider.SetShowSliderHand
// Offset::0x6AE2440;
void FRadialSlider::SetShowSliderHand(bool InShowSliderHand);


// Function  AdvancedWidgets.RadialSlider.SetShowSliderHandle
// Offset::0x6AE24E0;
void FRadialSlider::SetShowSliderHandle(bool InShowSliderHandle);


// Function  AdvancedWidgets.RadialSlider.SetSliderBarColor
// Offset::0x6AE2800;
void FRadialSlider::SetSliderBarColor(FLinearColor InValue);


// Function  AdvancedWidgets.RadialSlider.SetSliderHandleColor
// Offset::0x6AE26C0;
void FRadialSlider::SetSliderHandleColor(FLinearColor InValue);


// Function  AdvancedWidgets.RadialSlider.SetSliderHandleEndAngle
// Offset::0x6AE2B20;
void FRadialSlider::SetSliderHandleEndAngle(float InValue);


// Function  AdvancedWidgets.RadialSlider.SetSliderHandleStartAngle
// Offset::0x6AE2BC0;
void FRadialSlider::SetSliderHandleStartAngle(float InValue);


// Function  AdvancedWidgets.RadialSlider.SetSliderProgressColor
// Offset::0x6AE2760;
void FRadialSlider::SetSliderProgressColor(FLinearColor InValue);


// Function  AdvancedWidgets.RadialSlider.SetSliderRange
// Offset::0x6AE2D10;
void FRadialSlider::SetSliderRange(FRuntimeFloatCurve InSliderRange);


// Function  AdvancedWidgets.RadialSlider.SetStepSize
// Offset::0x6AE28A0;
void FRadialSlider::SetStepSize(float InValue);


// Function  AdvancedWidgets.RadialSlider.SetUseVerticalDrag
// Offset::0x6AE2580;
void FRadialSlider::SetUseVerticalDrag(bool InUseVerticalDrag);


// Function  AdvancedWidgets.RadialSlider.SetValue
// Offset::0x6AE2E90;
void FRadialSlider::SetValue(float InValue);


// Function  AdvancedWidgets.RadialSlider.SetValueTags
// Offset::0x6AE2C60;
void FRadialSlider::SetValueTags(TArray<float> InValueTags);


// Function  ChaosSolverEngine.ChaosSolverEngineBlueprintLibrary.ConvertPhysicsCollisionToHitResult
// Offset::0x6AE96D0;
FHitResult FChaosSolverEngineBlueprintLibrary::ConvertPhysicsCollisionToHitResult(FChaosPhysicsCollisionInfo PhysicsCollision);


// Function  ChaosSolverEngine.ChaosSolverActor.SetAsCurrentWorldSolver
// Offset::0x250C7B0;
void FChaosSolverActor::SetAsCurrentWorldSolver();


// Function  ChaosSolverEngine.ChaosSolverActor.SetSolverActive
// Offset::0x2D4DB10;
void FChaosSolverActor::SetSolverActive(bool bActive);


// Function  FieldSystemEngine.FieldSystemComponent.AddFieldCommand
// Offset::0x6AF0B70;
void FFieldSystemComponent::AddFieldCommand(bool Enabled,enum class EFieldPhysicsType Target,FFieldSystemMetaData* MetaData,FFieldNodeBase* Field);


// Function  FieldSystemEngine.FieldSystemComponent.AddPersistentField
// Offset::0x6AF0D10;
void FFieldSystemComponent::AddPersistentField(bool Enabled,enum class EFieldPhysicsType Target,FFieldSystemMetaData* MetaData,FFieldNodeBase* Field);


// Function  FieldSystemEngine.FieldSystemComponent.ApplyLinearForce
// Offset::0x6AF1840;
void FFieldSystemComponent::ApplyLinearForce(bool Enabled,FVector Direction,float Magnitude);


// Function  FieldSystemEngine.FieldSystemComponent.ApplyPhysicsField
// Offset::0x6AF0E90;
void FFieldSystemComponent::ApplyPhysicsField(bool Enabled,enum class EFieldPhysicsType Target,FFieldSystemMetaData* MetaData,FFieldNodeBase* Field);


// Function  FieldSystemEngine.FieldSystemComponent.ApplyRadialForce
// Offset::0x6AF15C0;
void FFieldSystemComponent::ApplyRadialForce(bool Enabled,FVector Position,float Magnitude);


// Function  FieldSystemEngine.FieldSystemComponent.ApplyRadialVectorFalloffForce
// Offset::0x6AF1420;
void FFieldSystemComponent::ApplyRadialVectorFalloffForce(bool Enabled,FVector Position,float Radius,float Magnitude);


// Function  FieldSystemEngine.FieldSystemComponent.ApplyStayDynamicField
// Offset::0x6AF1700;
void FFieldSystemComponent::ApplyStayDynamicField(bool Enabled,FVector Position,float Radius);


// Function  FieldSystemEngine.FieldSystemComponent.ApplyStrainField
// Offset::0x6AF1010;
void FFieldSystemComponent::ApplyStrainField(bool Enabled,FVector Position,float Radius,float Magnitude,int32_t Iterations);


// Function  FieldSystemEngine.FieldSystemComponent.ApplyUniformVectorFalloffForce
// Offset::0x6AF1200;
void FFieldSystemComponent::ApplyUniformVectorFalloffForce(bool Enabled,FVector Position,FVector Direction,float Radius,float Magnitude);


// Function  FieldSystemEngine.FieldSystemComponent.RemovePersistentFields
// Offset::0x6AF0CF0;
void FFieldSystemComponent::RemovePersistentFields();


// Function  FieldSystemEngine.FieldSystemComponent.ResetFieldSystem
// Offset::0x6AF0B50;
void FFieldSystemComponent::ResetFieldSystem();


// Function  FieldSystemEngine.FieldSystemMetaDataIteration.SetMetaDataIteration
// Offset::0x6AF2290;
FFieldSystemMetaDataIteration* FFieldSystemMetaDataIteration::SetMetaDataIteration(int32_t Iterations);


// Function  FieldSystemEngine.FieldSystemMetaDataProcessingResolution.SetMetaDataaProcessingResolutionType
// Offset::0x6AF25E0;
FFieldSystemMetaDataProcessingResolution* FFieldSystemMetaDataProcessingResolution::SetMetaDataaProcessingResolutionType(enum class EFieldResolutionType ResolutionType);


// Function  FieldSystemEngine.FieldSystemMetaDataFilter.SetMetaDataFilterType
// Offset::0x6AF2930;
FFieldSystemMetaDataFilter* FFieldSystemMetaDataFilter::SetMetaDataFilterType(enum class EFieldFilterType FilterType,enum class EFieldObjectType ObjectType,enum class EFieldPositionType PositionType);


// Function  FieldSystemEngine.UniformInteger.SetUniformInteger
// Offset::0x6AF2290;
FUniformInteger* FUniformInteger::SetUniformInteger(int32_t Magnitude);


// Function  FieldSystemEngine.RadialIntMask.SetRadialIntMask
// Offset::0x6AF3360;
FRadialIntMask* FRadialIntMask::SetRadialIntMask(float Radius,FVector Position,int32_t InteriorValue,int32_t ExteriorValue,enum class ESetMaskConditionType SetMaskConditionIn);


// Function  FieldSystemEngine.UniformScalar.SetUniformScalar
// Offset::0x6AF3830;
FUniformScalar* FUniformScalar::SetUniformScalar(float Magnitude);


// Function  FieldSystemEngine.WaveScalar.SetWaveScalar
// Offset::0x6AF3B90;
FWaveScalar* FWaveScalar::SetWaveScalar(float Magnitude,FVector Position,float Wavelength,float Period,float Time,enum class EWaveFunctionType Function,enum class EFieldFalloffType Falloff);


// Function  FieldSystemEngine.RadialFalloff.SetRadialFalloff
// Offset::0x6AF4120;
FRadialFalloff* FRadialFalloff::SetRadialFalloff(float Magnitude,float MinRange,float MaxRange,float Default,float Radius,FVector Position,enum class EFieldFalloffType Falloff);


// Function  FieldSystemEngine.PlaneFalloff.SetPlaneFalloff
// Offset::0x6AF46E0;
FPlaneFalloff* FPlaneFalloff::SetPlaneFalloff(float Magnitude,float MinRange,float MaxRange,float Default,float Distance,FVector Position,FVector Normal,enum class EFieldFalloffType Falloff);


// Function  FieldSystemEngine.BoxFalloff.SetBoxFalloff
// Offset::0x6AF4D30;
FBoxFalloff* FBoxFalloff::SetBoxFalloff(float Magnitude,float MinRange,float MaxRange,float Default,FTransform Transform,enum class EFieldFalloffType Falloff);


// Function  FieldSystemEngine.NoiseField.SetNoiseField
// Offset::0x6AF5360;
FNoiseField* FNoiseField::SetNoiseField(float MinRange,float MaxRange,FTransform Transform);


// Function  FieldSystemEngine.UniformVector.SetUniformVector
// Offset::0x6AF5860;
FUniformVector* FUniformVector::SetUniformVector(float Magnitude,FVector Direction);


// Function  FieldSystemEngine.RadialVector.SetRadialVector
// Offset::0x6AF5860;
FRadialVector* FRadialVector::SetRadialVector(float Magnitude,FVector Position);


// Function  FieldSystemEngine.RandomVector.SetRandomVector
// Offset::0x6AF3830;
FRandomVector* FRandomVector::SetRandomVector(float Magnitude);


// Function  FieldSystemEngine.OperatorField.SetOperatorField
// Offset::0x6AF61E0;
FOperatorField* FOperatorField::SetOperatorField(float Magnitude,FFieldNodeBase* LeftField,FFieldNodeBase* RightField,enum class EFieldOperationType Operation);


// Function  FieldSystemEngine.ToIntegerField.SetToIntegerField
// Offset::0x6AF6630;
FToIntegerField* FToIntegerField::SetToIntegerField(FFieldNodeFloat* FloatField);


// Function  FieldSystemEngine.ToFloatField.SetToFloatField
// Offset::0x6AF6630;
FToFloatField* FToFloatField::SetToFloatField(FFieldNodeInt* IntegerField);


// Function  FieldSystemEngine.CullingField.SetCullingField
// Offset::0x6AF6C50;
FCullingField* FCullingField::SetCullingField(FFieldNodeBase* Culling,FFieldNodeBase* Field,enum class EFieldCullingOperationType Operation);


// Function  FieldSystemEngine.ReturnResultsTerminal.SetReturnResultsTerminal
// Offset::0x6AF7060;
FReturnResultsTerminal* FReturnResultsTerminal::SetReturnResultsTerminal();


// Function  GeometryCollectionEngine.ChaosDestructionListener.AddChaosSolverActor
// Offset::0x33C4200;
void FChaosDestructionListener::AddChaosSolverActor(FChaosSolverActor* ChaosSolverActor);


// Function  GeometryCollectionEngine.ChaosDestructionListener.AddGeometryCollectionActor
// Offset::0x6B1A140;
void FChaosDestructionListener::AddGeometryCollectionActor(FGeometryCollectionActor* GeometryCollectionActor);


// Function  GeometryCollectionEngine.ChaosDestructionListener.IsEventListening
// Offset::0x6B19B30;
bool FChaosDestructionListener::IsEventListening();


// Function  GeometryCollectionEngine.ChaosDestructionListener.RemoveChaosSolverActor
// Offset::0x33C4200;
void FChaosDestructionListener::RemoveChaosSolverActor(FChaosSolverActor* ChaosSolverActor);


// Function  GeometryCollectionEngine.ChaosDestructionListener.RemoveGeometryCollectionActor
// Offset::0x6B1A0A0;
void FChaosDestructionListener::RemoveGeometryCollectionActor(FGeometryCollectionActor* GeometryCollectionActor);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SetBreakingEventEnabled
// Offset::0x6B19CA0;
void FChaosDestructionListener::SetBreakingEventEnabled(bool bIsEnabled);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SetBreakingEventRequestSettings
// Offset::0x6B19F40;
void FChaosDestructionListener::SetBreakingEventRequestSettings(FChaosBreakingEventRequestSettings InSettings);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SetCollisionEventEnabled
// Offset::0x6B19D40;
void FChaosDestructionListener::SetCollisionEventEnabled(bool bIsEnabled);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SetCollisionEventRequestSettings
// Offset::0x6B19FF0;
void FChaosDestructionListener::SetCollisionEventRequestSettings(FChaosCollisionEventRequestSettings InSettings);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SetRemovalEventEnabled
// Offset::0x6B19B60;
void FChaosDestructionListener::SetRemovalEventEnabled(bool bIsEnabled);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SetRemovalEventRequestSettings
// Offset::0x6B19DE0;
void FChaosDestructionListener::SetRemovalEventRequestSettings(FChaosRemovalEventRequestSettings InSettings);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SetTrailingEventEnabled
// Offset::0x6B19C00;
void FChaosDestructionListener::SetTrailingEventEnabled(bool bIsEnabled);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SetTrailingEventRequestSettings
// Offset::0x6B19E90;
void FChaosDestructionListener::SetTrailingEventRequestSettings(FChaosTrailingEventRequestSettings InSettings);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SortBreakingEvents
// Offset::0x6B19930;
void FChaosDestructionListener::SortBreakingEvents(TArray<FChaosBreakingEventData> BreakingEvents,enum class EChaosBreakingSortMethod SortMethod);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SortCollisionEvents
// Offset::0x6B19A30;
void FChaosDestructionListener::SortCollisionEvents(TArray<FChaosCollisionEventData> CollisionEvents,enum class EChaosCollisionSortMethod SortMethod);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SortRemovalEvents
// Offset::0x6B19730;
void FChaosDestructionListener::SortRemovalEvents(TArray<FChaosRemovalEventData> RemovalEvents,enum class EChaosRemovalSortMethod SortMethod);


// Function  GeometryCollectionEngine.ChaosDestructionListener.SortTrailingEvents
// Offset::0x6B19830;
void FChaosDestructionListener::SortTrailingEvents(TArray<FChaosTrailingEventData> TrailingEvents,enum class EChaosTrailingSortMethod SortMethod);


// Function  GeometryCollectionEngine.GeometryCollectionActor.RaycastSingle
// Offset::0x6B1B300;
bool FGeometryCollectionActor::RaycastSingle(FVector Start,FVector End,FHitResult OutHit);


// Function  GC_RocketBoost.GC_RocketBoost_C.OnExecute
// Offset::0x3D30810;
bool FGC_RocketBoost_C::OnExecute(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GC_ThrowTeammate.GC_ThrowTeammate_C.OnExecute
// Offset::0x3D30810;
bool FGC_ThrowTeammate_C::OnExecute(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GC_BashedDoor.GC_BashedDoor_C.OnExecute
// Offset::0x3D30810;
bool FGC_BashedDoor_C::OnExecute(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GC_GroundSlamFalling.GC_GroundSlamFalling_C.ExecuteUbergraph_GC_GroundSlamFalling
// Offset::0x3D30810;
void FGC_GroundSlamFalling_C::ExecuteUbergraph_GC_GroundSlamFalling(int32_t EntryPoint);


// Function  GC_GroundSlamFalling.GC_GroundSlamFalling_C.ReceiveBeginPlay
// Offset::0x3D30810;
void FGC_GroundSlamFalling_C::ReceiveBeginPlay();


// Function  GC_CancelPredatoryFocus.GC_CancelPredatoryFocus_C.OnExecute
// Offset::0x3D30810;
bool FGC_CancelPredatoryFocus_C::OnExecute(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GC_PredatoryFocus.GC_PredatoryFocus_C.OnActive
// Offset::0x3D30810;
bool FGC_PredatoryFocus_C::OnActive(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GC_GrappleHookCancel.GC_GrappleHookCancel_C.OnExecute
// Offset::0x3D30810;
bool FGC_GrappleHookCancel_C::OnExecute(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  GC_AbilityFullyCharged.GC_AbilityFullyCharged_C.OnExecute
// Offset::0x3D30810;
bool FGC_AbilityFullyCharged_C::OnExecute(FActor* MyTarget,FGameplayCueParameters Parameters);


// Function  BP_PresentationStage_Screen.BP_PresentationStage_Screen_C.CreateLightMaterialIfNeeded
// Offset::0x3D30810;
void FBP_PresentationStage_Screen_C::CreateLightMaterialIfNeeded();


// Function  BP_CircularDisplayLights.BP_CircularDisplayLights_C.UserConstructionScript
// Offset::0x3D30810;
void FBP_CircularDisplayLights_C::UserConstructionScript(int32_t Temp_int_Variable,FTransform CallFunc_GetLightTransform_Transform,FRectLightComponent* CallFunc_AddComponent_ReturnValue,int32_t CallFunc_Add_IntInt_ReturnValue,FTextureRenderTarget2D* CallFunc_Array_Get_Item,int32_t CallFunc_Array_Add_ReturnValue,bool CallFunc_Array_IsValidIndex_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,int32_t CallFunc_Subtract_IntInt_ReturnValue,FVector CallFunc_MakeVector_ReturnValue,bool CallFunc_LessEqual_IntInt_ReturnValue,FHitResult CallFunc_K2_AddLocalOffset_SweepHitResult);


// Function  BP_CircularDisplayLights.BP_CircularDisplayLights_C.SetLightProperties
// Offset::0x3D30810;
void FBP_CircularDisplayLights_C::SetLightProperties(FRectLightComponent* Light,float CallFunc_Conv_IntToFloat_ReturnValue,double CallFunc_MultiplyByPi_ReturnValue,double CallFunc_Divide_DoubleDouble_ReturnValue,float CallFunc_SetIntensity_NewIntensity_NarrowingCast,float CallFunc_SetSourceHeight_NewValue_NarrowingCast,double CallFunc_Divide_DoubleDouble_B_WideningCast,float CallFunc_SetSourceWidth_bNewValue_NarrowingCast);


// Function  BP_CircularDisplayLights.BP_CircularDisplayLights_C.Refresh Light Color
// Offset::0x3D30810;
void FBP_CircularDisplayLights_C::Refresh Light Color(int32_t Temp_int_Array_Index_Variable,int32_t Temp_int_Loop_Counter_Variable,int32_t CallFunc_Add_IntInt_ReturnValue,FRectLightComponent* CallFunc_Array_Get_Item,int32_t CallFunc_Array_Length_ReturnValue,bool CallFunc_Less_IntInt_ReturnValue);


// Function  BP_CircularDisplayLights.BP_CircularDisplayLights_C.GetLightTransform
// Offset::0x3D30810;
void FBP_CircularDisplayLights_C::GetLightTransform(int32_t LightIndex,FTransform Transform,FVector CallFunc_MakeVector_ReturnValue,float CallFunc_Conv_IntToFloat_ReturnValue,float CallFunc_Conv_IntToFloat_ReturnValue,double CallFunc_Divide_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,FRotator CallFunc_MakeRotator_ReturnValue,FTransform CallFunc_MakeTransform_ReturnValue,double CallFunc_Multiply_DoubleDouble_B_WideningCast,double CallFunc_Divide_DoubleDouble_B_WideningCast,float CallFunc_MakeRotator_Yaw_NarrowingCast);


// Function  BP_DomeShield_Bubble_01.BP_DomeShield_Bubble_01_C.BP_ActivateShield_Client
// Offset::0x3D30810;
void FBP_DomeShield_Bubble_01_C::BP_ActivateShield_Client();


// Function  BP_DomeShield_Bubble_01.BP_DomeShield_Bubble_01_C.BP_DeactivateShield_Client
// Offset::0x3D30810;
void FBP_DomeShield_Bubble_01_C::BP_DeactivateShield_Client();


// Function  BP_DomeShield_Bubble_01.BP_DomeShield_Bubble_01_C.Dissolve__FinishedFunc
// Offset::0x3D30810;
void FBP_DomeShield_Bubble_01_C::Dissolve__FinishedFunc();


// Function  BP_DomeShield_Bubble_01.BP_DomeShield_Bubble_01_C.Dissolve__UpdateFunc
// Offset::0x3D30810;
void FBP_DomeShield_Bubble_01_C::Dissolve__UpdateFunc();


// Function  BP_DomeShield_Bubble_01.BP_DomeShield_Bubble_01_C.ExecuteUbergraph_BP_DomeShield_Bubble_01
// Offset::0x3D30810;
void FBP_DomeShield_Bubble_01_C::ExecuteUbergraph_BP_DomeShield_Bubble_01(int32_t EntryPoint);


// Function  BP_DomeShield_Bubble_01.BP_DomeShield_Bubble_01_C.Initialize__FinishedFunc
// Offset::0x3D30810;
void FBP_DomeShield_Bubble_01_C::Initialize__FinishedFunc();


// Function  BP_DomeShield_Bubble_01.BP_DomeShield_Bubble_01_C.Initialize__UpdateFunc
// Offset::0x3D30810;
void FBP_DomeShield_Bubble_01_C::Initialize__UpdateFunc();


// Function  BP_DiscoveryTurret_Deployable.BP_DiscoveryTurret_Deployable_C.OnRep_bIsExploding
// Offset::0x3D30810;
void FBP_DiscoveryTurret_Deployable_C::OnRep_bIsExploding();


// Function  BP_DiscoveryGameInstance.BP_DiscoveryGameInstance_C.ExecuteUbergraph_BP_DiscoveryGameInstance
// Offset::0x3D30810;
void FBP_DiscoveryGameInstance_C::ExecuteUbergraph_BP_DiscoveryGameInstance(int32_t EntryPoint,FDelegate K2Node_CreateDelegate_OutputDelegate,FDelegate K2Node_CreateDelegate_OutputDelegate,FPlayerController* CallFunc_GetPlayerController_ReturnValue,FDestroySessionCallbackProxy* CallFunc_DestroySession_ReturnValue,bool CallFunc_IsValid_ReturnValue);


// Function  BP_DiscoveryGameInstance.BP_DiscoveryGameInstance_C.LeaveCurrentSession
// Offset::0x3D30810;
void FBP_DiscoveryGameInstance_C::LeaveCurrentSession();


// Function  BP_DiscoveryGameInstance.BP_DiscoveryGameInstance_C.OnFailure_7C51A29246145214228F94B2C6E7EFA0
// Offset::0x3D30810;
void FBP_DiscoveryGameInstance_C::OnFailure_7C51A29246145214228F94B2C6E7EFA0();


// Function  BP_DiscoveryGameInstance.BP_DiscoveryGameInstance_C.OnSuccess_7C51A29246145214228F94B2C6E7EFA0
// Offset::0x3D30810;
void FBP_DiscoveryGameInstance_C::OnSuccess_7C51A29246145214228F94B2C6E7EFA0();


// Function  BP_DiscoveryGameInstance.BP_DiscoveryGameInstance_C.SetCurrentSession
// Offset::0x3D30810;
void FBP_DiscoveryGameInstance_C::SetCurrentSession(FBlueprintSessionResult Session,bool IsSessionValid);


// Function  BP_DiscoveryGameInstance.BP_DiscoveryGameInstance_C.SetIsMatchmaking
// Offset::0x3D30810;
void FBP_DiscoveryGameInstance_C::SetIsMatchmaking(bool Value,bool CallFunc_Not_PreBool_ReturnValue);


// Function  WBP_CashoutTabBoardTeam.WBP_CashoutTabBoardTeam_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_CashoutTabBoardTeam_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_CashoutTabBoardTeam.WBP_CashoutTabBoardTeam_C.ExecuteUbergraph_WBP_CashoutTabBoardTeam
// Offset::0x3D30810;
void FWBP_CashoutTabBoardTeam_C::ExecuteUbergraph_WBP_CashoutTabBoardTeam(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_CashoutTabBoardTeam.WBP_CashoutTabBoardTeam_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_CashoutTabBoardTeam_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_CashoutTabBoardTeam.WBP_CashoutTabBoardTeam_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_CashoutTabBoardTeam_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_CashoutTabBoardTeam.WBP_CashoutTabBoardTeam_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_CashoutTabBoardTeam_C::BP_OnEntryReleased();


// Function  WBP_CashoutTabBoardTeamSmall.WBP_CashoutTabBoardTeamSmall_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_CashoutTabBoardTeamSmall_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_CashoutTabBoardTeamSmall.WBP_CashoutTabBoardTeamSmall_C.ExecuteUbergraph_WBP_CashoutTabBoardTeamSmall
// Offset::0x3D30810;
void FWBP_CashoutTabBoardTeamSmall_C::ExecuteUbergraph_WBP_CashoutTabBoardTeamSmall(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_CashoutTabBoardTeamSmall.WBP_CashoutTabBoardTeamSmall_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_CashoutTabBoardTeamSmall_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_CashoutTabBoardTeamSmall.WBP_CashoutTabBoardTeamSmall_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_CashoutTabBoardTeamSmall_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_CashoutTabBoardTeamSmall.WBP_CashoutTabBoardTeamSmall_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_CashoutTabBoardTeamSmall_C::BP_OnEntryReleased();


// Function  WBP_StageContractListEntry.WBP_StageContractListEntry_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_StageContractListEntry_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_StageContractListEntry.WBP_StageContractListEntry_C.ExecuteUbergraph_WBP_StageContractListEntry
// Offset::0x3D30810;
void FWBP_StageContractListEntry_C::ExecuteUbergraph_WBP_StageContractListEntry(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_StageContractListEntry.WBP_StageContractListEntry_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_StageContractListEntry_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_StageContractListEntry.WBP_StageContractListEntry_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_StageContractListEntry_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_StageContractListEntry.WBP_StageContractListEntry_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_StageContractListEntry_C::BP_OnEntryReleased();


// Function  WBP_Atom_TileListItem.WBP_Atom_TileListItem_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_Atom_TileListItem_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_Atom_TileListItem.WBP_Atom_TileListItem_C.ExecuteUbergraph_WBP_Atom_TileListItem
// Offset::0x3D30810;
void FWBP_Atom_TileListItem_C::ExecuteUbergraph_WBP_Atom_TileListItem(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_Atom_TileListItem.WBP_Atom_TileListItem_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_Atom_TileListItem_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_Atom_TileListItem.WBP_Atom_TileListItem_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_Atom_TileListItem_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_Atom_TileListItem.WBP_Atom_TileListItem_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_Atom_TileListItem_C::BP_OnEntryReleased();


// Function  WBP_CashoutTabBoardPlayerSmall.WBP_CashoutTabBoardPlayerSmall_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_CashoutTabBoardPlayerSmall_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_CashoutTabBoardPlayerSmall.WBP_CashoutTabBoardPlayerSmall_C.ExecuteUbergraph_WBP_CashoutTabBoardPlayerSmall
// Offset::0x3D30810;
void FWBP_CashoutTabBoardPlayerSmall_C::ExecuteUbergraph_WBP_CashoutTabBoardPlayerSmall(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_CashoutTabBoardPlayerSmall.WBP_CashoutTabBoardPlayerSmall_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_CashoutTabBoardPlayerSmall_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_CashoutTabBoardPlayerSmall.WBP_CashoutTabBoardPlayerSmall_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_CashoutTabBoardPlayerSmall_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_CashoutTabBoardPlayerSmall.WBP_CashoutTabBoardPlayerSmall_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_CashoutTabBoardPlayerSmall_C::BP_OnEntryReleased();


// Function  WBP_CashoutTabBoardPlayer.WBP_CashoutTabBoardPlayer_C.ExecuteUbergraph_WBP_CashoutTabBoardPlayer
// Offset::0x3D30810;
void FWBP_CashoutTabBoardPlayer_C::ExecuteUbergraph_WBP_CashoutTabBoardPlayer(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_CashoutTabBoardPlayer.WBP_CashoutTabBoardPlayer_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_CashoutTabBoardPlayer_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_CashoutTabBoardPlayer.WBP_CashoutTabBoardPlayer_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_CashoutTabBoardPlayer_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_CashoutTabBoardPlayer.WBP_CashoutTabBoardPlayer_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_CashoutTabBoardPlayer_C::BP_OnEntryReleased();


// Function  WBP_BankItSolo_TabBoardTeam.WBP_BankItSolo_TabBoardTeam_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_BankItSolo_TabBoardTeam_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_BankItSolo_TabBoardTeam.WBP_BankItSolo_TabBoardTeam_C.ExecuteUbergraph_WBP_BankItSolo_TabBoardTeam
// Offset::0x3D30810;
void FWBP_BankItSolo_TabBoardTeam_C::ExecuteUbergraph_WBP_BankItSolo_TabBoardTeam(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_BankItSolo_TabBoardTeam.WBP_BankItSolo_TabBoardTeam_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_BankItSolo_TabBoardTeam_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_BankItSolo_TabBoardTeam.WBP_BankItSolo_TabBoardTeam_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_BankItSolo_TabBoardTeam_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_BankItSolo_TabBoardTeam.WBP_BankItSolo_TabBoardTeam_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_BankItSolo_TabBoardTeam_C::BP_OnEntryReleased();


// Function  WBP_SocialWidget_PartyMemberWidget.WBP_SocialWidget_PartyMemberWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_SocialWidget_PartyMemberWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_SocialWidget_PartyMemberWidget.WBP_SocialWidget_PartyMemberWidget_C.ExecuteUbergraph_WBP_SocialWidget_PartyMemberWidget
// Offset::0x3D30810;
void FWBP_SocialWidget_PartyMemberWidget_C::ExecuteUbergraph_WBP_SocialWidget_PartyMemberWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_SocialWidget_PartyMemberWidget.WBP_SocialWidget_PartyMemberWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_SocialWidget_PartyMemberWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_SocialWidget_PartyMemberWidget.WBP_SocialWidget_PartyMemberWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_SocialWidget_PartyMemberWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_SocialWidget_PartyMemberWidget.WBP_SocialWidget_PartyMemberWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_SocialWidget_PartyMemberWidget_C::BP_OnEntryReleased();


// Function  WBP_Atom_NPXHighlightBorder.WBP_Atom_NPXHighlightBorder_C.ExecuteUbergraph_WBP_Atom_NPXHighlightBorder
// Offset::0x3D30810;
void FWBP_Atom_NPXHighlightBorder_C::ExecuteUbergraph_WBP_Atom_NPXHighlightBorder(int32_t EntryPoint);


// Function  WBP_Atom_NPXHighlightBorder.WBP_Atom_NPXHighlightBorder_C.Construct
// Offset::0x3D30810;
void FWBP_Atom_NPXHighlightBorder_C::Construct();


// Function  WBP_BankItSolo_TabBoardPlayer.WBP_BankItSolo_TabBoardPlayer_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_BankItSolo_TabBoardPlayer_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_BankItSolo_TabBoardPlayer.WBP_BankItSolo_TabBoardPlayer_C.ExecuteUbergraph_WBP_BankItSolo_TabBoardPlayer
// Offset::0x3D30810;
void FWBP_BankItSolo_TabBoardPlayer_C::ExecuteUbergraph_WBP_BankItSolo_TabBoardPlayer(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_BankItSolo_TabBoardPlayer.WBP_BankItSolo_TabBoardPlayer_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_BankItSolo_TabBoardPlayer_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_BankItSolo_TabBoardPlayer.WBP_BankItSolo_TabBoardPlayer_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_BankItSolo_TabBoardPlayer_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_BankItSolo_TabBoardPlayer.WBP_BankItSolo_TabBoardPlayer_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_BankItSolo_TabBoardPlayer_C::BP_OnEntryReleased();


// Function  WBP_Molecule_PromoteTile_1x2_S.WBP_Molecule_PromoteTile_1x2_S_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_Molecule_PromoteTile_1x2_S_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_Molecule_PromoteTile_1x2_S.WBP_Molecule_PromoteTile_1x2_S_C.ExecuteUbergraph_WBP_Molecule_PromoteTile_1x2_S
// Offset::0x3D30810;
void FWBP_Molecule_PromoteTile_1x2_S_C::ExecuteUbergraph_WBP_Molecule_PromoteTile_1x2_S(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_Molecule_PromoteTile_1x2_S.WBP_Molecule_PromoteTile_1x2_S_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_Molecule_PromoteTile_1x2_S_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_Molecule_PromoteTile_1x2_S.WBP_Molecule_PromoteTile_1x2_S_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_Molecule_PromoteTile_1x2_S_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_Molecule_PromoteTile_1x2_S.WBP_Molecule_PromoteTile_1x2_S_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_Molecule_PromoteTile_1x2_S_C::BP_OnEntryReleased();


// Function  WBP_Atom_CategoryMarker.WBP_Atom_CategoryMarker_C.PreConstruct
// Offset::0x3D30810;
void FWBP_Atom_CategoryMarker_C::PreConstruct(bool IsDesignTime);


// Function  WBP_Atom_CategoryMarker.WBP_Atom_CategoryMarker_C.ExecuteUbergraph_WBP_Atom_CategoryMarker
// Offset::0x3D30810;
void FWBP_Atom_CategoryMarker_C::ExecuteUbergraph_WBP_Atom_CategoryMarker(int32_t EntryPoint,bool K2Node_Event_IsDesignTime);


// Function  WBP_Atom_ItemStatsRow.WBP_Atom_ItemStatsRow_C.ExecuteUbergraph_WBP_Atom_ItemStatsRow
// Offset::0x3D30810;
void FWBP_Atom_ItemStatsRow_C::ExecuteUbergraph_WBP_Atom_ItemStatsRow(int32_t EntryPoint,bool K2Node_Event_bIsSelected,bool K2Node_Event_bIsExpanded);


// Function  WBP_Atom_ItemStatsRow.WBP_Atom_ItemStatsRow_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_Atom_ItemStatsRow_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_Atom_ItemStatsRow.WBP_Atom_ItemStatsRow_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_Atom_ItemStatsRow_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_Atom_ItemStatsRow.WBP_Atom_ItemStatsRow_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_Atom_ItemStatsRow_C::BP_OnEntryReleased();


// Function  WBP_FrontendStoreOffer.WBP_FrontendStoreOffer_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_FrontendStoreOffer_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_FrontendStoreOffer.WBP_FrontendStoreOffer_C.ExecuteUbergraph_WBP_FrontendStoreOffer
// Offset::0x3D30810;
void FWBP_FrontendStoreOffer_C::ExecuteUbergraph_WBP_FrontendStoreOffer(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_FrontendStoreOffer.WBP_FrontendStoreOffer_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_FrontendStoreOffer_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_FrontendStoreOffer.WBP_FrontendStoreOffer_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_FrontendStoreOffer_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_FrontendStoreOffer.WBP_FrontendStoreOffer_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_FrontendStoreOffer_C::BP_OnEntryReleased();


// Function  WBP_SocialScreen_PlayerWidget.WBP_SocialScreen_PlayerWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_SocialScreen_PlayerWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_SocialScreen_PlayerWidget.WBP_SocialScreen_PlayerWidget_C.ExecuteUbergraph_WBP_SocialScreen_PlayerWidget
// Offset::0x3D30810;
void FWBP_SocialScreen_PlayerWidget_C::ExecuteUbergraph_WBP_SocialScreen_PlayerWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_SocialScreen_PlayerWidget.WBP_SocialScreen_PlayerWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_SocialScreen_PlayerWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_SocialScreen_PlayerWidget.WBP_SocialScreen_PlayerWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_SocialScreen_PlayerWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_SocialScreen_PlayerWidget.WBP_SocialScreen_PlayerWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_SocialScreen_PlayerWidget_C::BP_OnEntryReleased();


// Function  WBP_ExtrasPageLinkEntry.WBP_ExtrasPageLinkEntry_C.ExecuteUbergraph_WBP_ExtrasPageLinkEntry
// Offset::0x3D30810;
void FWBP_ExtrasPageLinkEntry_C::ExecuteUbergraph_WBP_ExtrasPageLinkEntry(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_ExtrasPageLinkEntry.WBP_ExtrasPageLinkEntry_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_ExtrasPageLinkEntry_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_ExtrasPageLinkEntry.WBP_ExtrasPageLinkEntry_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_ExtrasPageLinkEntry_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_ExtrasPageLinkEntry.WBP_ExtrasPageLinkEntry_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_ExtrasPageLinkEntry_C::BP_OnEntryReleased();


// Function  WBP_UIOptionInputGamepadSelector.WBP_UIOptionInputGamepadSelector_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_UIOptionInputGamepadSelector_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_UIOptionInputGamepadSelector.WBP_UIOptionInputGamepadSelector_C.ExecuteUbergraph_WBP_UIOptionInputGamepadSelector
// Offset::0x3D30810;
void FWBP_UIOptionInputGamepadSelector_C::ExecuteUbergraph_WBP_UIOptionInputGamepadSelector(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_UIOptionInputGamepadSelector.WBP_UIOptionInputGamepadSelector_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_UIOptionInputGamepadSelector_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_UIOptionInputGamepadSelector.WBP_UIOptionInputGamepadSelector_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_UIOptionInputGamepadSelector_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_UIOptionInputGamepadSelector.WBP_UIOptionInputGamepadSelector_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_UIOptionInputGamepadSelector_C::BP_OnEntryReleased();


// Function  WBP_UIOptionInputKeySelector.WBP_UIOptionInputKeySelector_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_UIOptionInputKeySelector_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_UIOptionInputKeySelector.WBP_UIOptionInputKeySelector_C.ExecuteUbergraph_WBP_UIOptionInputKeySelector
// Offset::0x3D30810;
void FWBP_UIOptionInputKeySelector_C::ExecuteUbergraph_WBP_UIOptionInputKeySelector(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_UIOptionInputKeySelector.WBP_UIOptionInputKeySelector_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_UIOptionInputKeySelector_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_UIOptionInputKeySelector.WBP_UIOptionInputKeySelector_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_UIOptionInputKeySelector_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_UIOptionInputKeySelector.WBP_UIOptionInputKeySelector_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_UIOptionInputKeySelector_C::BP_OnEntryReleased();


// Function  WBP_Atom_CareerPlayerPerformanceDetail.WBP_Atom_CareerPlayerPerformanceDetail_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_Atom_CareerPlayerPerformanceDetail_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_Atom_CareerPlayerPerformanceDetail.WBP_Atom_CareerPlayerPerformanceDetail_C.ExecuteUbergraph_WBP_Atom_CareerPlayerPerformanceDetail
// Offset::0x3D30810;
void FWBP_Atom_CareerPlayerPerformanceDetail_C::ExecuteUbergraph_WBP_Atom_CareerPlayerPerformanceDetail(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_Atom_CareerPlayerPerformanceDetail.WBP_Atom_CareerPlayerPerformanceDetail_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_Atom_CareerPlayerPerformanceDetail_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_Atom_CareerPlayerPerformanceDetail.WBP_Atom_CareerPlayerPerformanceDetail_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_Atom_CareerPlayerPerformanceDetail_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_Atom_CareerPlayerPerformanceDetail.WBP_Atom_CareerPlayerPerformanceDetail_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_Atom_CareerPlayerPerformanceDetail_C::BP_OnEntryReleased();


// Function  WBP_Atom_TileItem.WBP_Atom_TileItem_C.ExecuteUbergraph_WBP_Atom_TileItem
// Offset::0x3D30810;
void FWBP_Atom_TileItem_C::ExecuteUbergraph_WBP_Atom_TileItem(int32_t EntryPoint);


// Function  WBP_Atom_TileItem.WBP_Atom_TileItem_C.BP_OnClaimReward
// Offset::0x3D30810;
void FWBP_Atom_TileItem_C::BP_OnClaimReward();


// Function  WBP_SeasonalCircuitListEntry.WBP_SeasonalCircuitListEntry_C.ExecuteUbergraph_WBP_SeasonalCircuitListEntry
// Offset::0x3D30810;
void FWBP_SeasonalCircuitListEntry_C::ExecuteUbergraph_WBP_SeasonalCircuitListEntry(int32_t EntryPoint,bool K2Node_Event_bIsSelected,bool K2Node_Event_bIsExpanded);


// Function  WBP_SeasonalCircuitListEntry.WBP_SeasonalCircuitListEntry_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_SeasonalCircuitListEntry_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_SeasonalCircuitListEntry.WBP_SeasonalCircuitListEntry_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_SeasonalCircuitListEntry_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_SeasonalCircuitListEntry.WBP_SeasonalCircuitListEntry_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_SeasonalCircuitListEntry_C::BP_OnEntryReleased();


// Function  WBP_Atom_CircuitTile.WBP_Atom_CircuitTile_C.SequenceEvent__ENTRYPOINTWBP_Atom_CircuitTile
// Offset::0x3D30810;
void FWBP_Atom_CircuitTile_C::SequenceEvent__ENTRYPOINTWBP_Atom_CircuitTile();


// Function  WBP_Atom_CircuitTile.WBP_Atom_CircuitTile_C.SequenceEvent
// Offset::0x3D30810;
void FWBP_Atom_CircuitTile_C::SequenceEvent();


// Function  WBP_Atom_CircuitTile.WBP_Atom_CircuitTile_C.ExecuteUbergraph_WBP_Atom_CircuitTile
// Offset::0x3D30810;
void FWBP_Atom_CircuitTile_C::ExecuteUbergraph_WBP_Atom_CircuitTile(int32_t EntryPoint);


// Function  WBP_Atom_PaginationMarker_Button.WBP_Atom_PaginationMarker_Button_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_Atom_PaginationMarker_Button_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_Atom_PaginationMarker_Button.WBP_Atom_PaginationMarker_Button_C.ExecuteUbergraph_WBP_Atom_PaginationMarker_Button
// Offset::0x3D30810;
void FWBP_Atom_PaginationMarker_Button_C::ExecuteUbergraph_WBP_Atom_PaginationMarker_Button(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_Atom_PaginationMarker_Button.WBP_Atom_PaginationMarker_Button_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_Atom_PaginationMarker_Button_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_Atom_PaginationMarker_Button.WBP_Atom_PaginationMarker_Button_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_Atom_PaginationMarker_Button_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_Atom_PaginationMarker_Button.WBP_Atom_PaginationMarker_Button_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_Atom_PaginationMarker_Button_C::BP_OnEntryReleased();


// Function  WBP_Atom_PaginationMarker.WBP_Atom_PaginationMarker_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_Atom_PaginationMarker_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_Atom_PaginationMarker.WBP_Atom_PaginationMarker_C.ExecuteUbergraph_WBP_Atom_PaginationMarker
// Offset::0x3D30810;
void FWBP_Atom_PaginationMarker_C::ExecuteUbergraph_WBP_Atom_PaginationMarker(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_Atom_PaginationMarker.WBP_Atom_PaginationMarker_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_Atom_PaginationMarker_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_Atom_PaginationMarker.WBP_Atom_PaginationMarker_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_Atom_PaginationMarker_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_Atom_PaginationMarker.WBP_Atom_PaginationMarker_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_Atom_PaginationMarker_C::BP_OnEntryReleased();


// Function  WBP_LeagueRewardTile.WBP_LeagueRewardTile_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_LeagueRewardTile_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_LeagueRewardTile.WBP_LeagueRewardTile_C.ExecuteUbergraph_WBP_LeagueRewardTile
// Offset::0x3D30810;
void FWBP_LeagueRewardTile_C::ExecuteUbergraph_WBP_LeagueRewardTile(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_LeagueRewardTile.WBP_LeagueRewardTile_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_LeagueRewardTile_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_LeagueRewardTile.WBP_LeagueRewardTile_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_LeagueRewardTile_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_LeagueRewardTile.WBP_LeagueRewardTile_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_LeagueRewardTile_C::BP_OnEntryReleased();


// Function  WBP_LeaguePlacementProgressWidget.WBP_LeaguePlacementProgressWidget_C.TriggerNextAnimation
// Offset::0x3D30810;
void FWBP_LeaguePlacementProgressWidget_C::TriggerNextAnimation();


// Function  WBP_LeaguePlacementProgressWidget.WBP_LeaguePlacementProgressWidget_C.SequenceEvent__ENTRYPOINTWBP_LeaguePlacementProgressWidget
// Offset::0x3D30810;
void FWBP_LeaguePlacementProgressWidget_C::SequenceEvent__ENTRYPOINTWBP_LeaguePlacementProgressWidget();


// Function  WBP_LeaguePlacementProgressWidget.WBP_LeaguePlacementProgressWidget_C.ExecuteUbergraph_WBP_LeaguePlacementProgressWidget
// Offset::0x3D30810;
void FWBP_LeaguePlacementProgressWidget_C::ExecuteUbergraph_WBP_LeaguePlacementProgressWidget(int32_t EntryPoint);


// Function  WBP_ContractTile.WBP_ContractTile_C.ExecuteUbergraph_WBP_ContractTile
// Offset::0x3D30810;
void FWBP_ContractTile_C::ExecuteUbergraph_WBP_ContractTile(int32_t EntryPoint,bool K2Node_Event_bIsSelected,bool K2Node_Event_bIsExpanded);


// Function  WBP_ContractTile.WBP_ContractTile_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_ContractTile_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_ContractTile.WBP_ContractTile_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_ContractTile_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_ContractTile.WBP_ContractTile_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_ContractTile_C::BP_OnEntryReleased();


// Function  WBP_RewardFlowGainedXP.WBP_RewardFlowGainedXP_C.SequenceEvent__ENTRYPOINTWBP_RewardFlowGainedXP
// Offset::0x3D30810;
void FWBP_RewardFlowGainedXP_C::SequenceEvent__ENTRYPOINTWBP_RewardFlowGainedXP();


// Function  WBP_RewardFlowGainedXP.WBP_RewardFlowGainedXP_C.ExecuteUbergraph_WBP_RewardFlowGainedXP
// Offset::0x3D30810;
void FWBP_RewardFlowGainedXP_C::ExecuteUbergraph_WBP_RewardFlowGainedXP(int32_t EntryPoint);


// Function  WBP_RewardFlowGainedXP.WBP_RewardFlowGainedXP_C.BPAnimationFinishedEvent
// Offset::0x3D30810;
void FWBP_RewardFlowGainedXP_C::BPAnimationFinishedEvent();


// Function  WBP_RewardFlowItemProgressionPromotionItem.WBP_RewardFlowItemProgressionPromotionItem_C.OnProgressAnimationStarted
// Offset::0x3D30810;
void FWBP_RewardFlowItemProgressionPromotionItem_C::OnProgressAnimationStarted();


// Function  WBP_RewardFlowItemProgressionPromotionItem.WBP_RewardFlowItemProgressionPromotionItem_C.ExecuteUbergraph_WBP_RewardFlowItemProgressionPromotionItem
// Offset::0x3D30810;
void FWBP_RewardFlowItemProgressionPromotionItem_C::ExecuteUbergraph_WBP_RewardFlowItemProgressionPromotionItem(int32_t EntryPoint);


// Function  WBP_EventContractEntryWidget.WBP_EventContractEntryWidget_C.ExecuteUbergraph_WBP_EventContractEntryWidget
// Offset::0x3D30810;
void FWBP_EventContractEntryWidget_C::ExecuteUbergraph_WBP_EventContractEntryWidget(int32_t EntryPoint,bool K2Node_Event_bIsSelected,bool K2Node_Event_bIsExpanded);


// Function  WBP_EventContractEntryWidget.WBP_EventContractEntryWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_EventContractEntryWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_EventContractEntryWidget.WBP_EventContractEntryWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_EventContractEntryWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_EventContractEntryWidget.WBP_EventContractEntryWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_EventContractEntryWidget_C::BP_OnEntryReleased();


// Function  WBP_Atom_Textbutton_VeryLarge.WBP_Atom_Textbutton_VeryLarge_C.Tick
// Offset::0x3D30810;
void FWBP_Atom_Textbutton_VeryLarge_C::Tick(FGeometry MyGeometry,float InDeltaTime);


// Function  WBP_Atom_Textbutton_VeryLarge.WBP_Atom_Textbutton_VeryLarge_C.ExecuteUbergraph_WBP_Atom_Textbutton_VeryLarge
// Offset::0x3D30810;
void FWBP_Atom_Textbutton_VeryLarge_C::ExecuteUbergraph_WBP_Atom_Textbutton_VeryLarge(int32_t EntryPoint,FGeometry K2Node_Event_MyGeometry,float K2Node_Event_InDeltaTime);


// Function  WBP_Atom_Textbutton_Large.WBP_Atom_Textbutton_Large_C.Tick
// Offset::0x3D30810;
void FWBP_Atom_Textbutton_Large_C::Tick(FGeometry MyGeometry,float InDeltaTime);


// Function  WBP_Atom_Textbutton_Large.WBP_Atom_Textbutton_Large_C.ExecuteUbergraph_WBP_Atom_Textbutton_Large
// Offset::0x3D30810;
void FWBP_Atom_Textbutton_Large_C::ExecuteUbergraph_WBP_Atom_Textbutton_Large(int32_t EntryPoint,FGeometry K2Node_Event_MyGeometry,float K2Node_Event_InDeltaTime);


// Function  WBP_CustomizationCollectionItemWidget.WBP_CustomizationCollectionItemWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_CustomizationCollectionItemWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_CustomizationCollectionItemWidget.WBP_CustomizationCollectionItemWidget_C.ExecuteUbergraph_WBP_CustomizationCollectionItemWidget
// Offset::0x3D30810;
void FWBP_CustomizationCollectionItemWidget_C::ExecuteUbergraph_WBP_CustomizationCollectionItemWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_CustomizationCollectionItemWidget.WBP_CustomizationCollectionItemWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_CustomizationCollectionItemWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_CustomizationCollectionItemWidget.WBP_CustomizationCollectionItemWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_CustomizationCollectionItemWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_CustomizationCollectionItemWidget.WBP_CustomizationCollectionItemWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_CustomizationCollectionItemWidget_C::BP_OnEntryReleased();


// Function  WBP_CustomizationCollectionListItemWidget.WBP_CustomizationCollectionListItemWidget_C.ExecuteUbergraph_WBP_CustomizationCollectionListItemWidget
// Offset::0x3D30810;
void FWBP_CustomizationCollectionListItemWidget_C::ExecuteUbergraph_WBP_CustomizationCollectionListItemWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_CustomizationCollectionListItemWidget.WBP_CustomizationCollectionListItemWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_CustomizationCollectionListItemWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_CustomizationCollectionListItemWidget.WBP_CustomizationCollectionListItemWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_CustomizationCollectionListItemWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_CustomizationCollectionListItemWidget.WBP_CustomizationCollectionListItemWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_CustomizationCollectionListItemWidget_C::BP_OnEntryReleased();


// Function  WBP_ItemProgression.WBP_ItemProgression_C.ExecuteUbergraph_WBP_ItemProgression
// Offset::0x3D30810;
void FWBP_ItemProgression_C::ExecuteUbergraph_WBP_ItemProgression(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_ItemProgression.WBP_ItemProgression_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_ItemProgression_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_ItemProgression.WBP_ItemProgression_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_ItemProgression_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_ItemProgression.WBP_ItemProgression_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_ItemProgression_C::BP_OnEntryReleased();


// Function  WBP_CustomizationCategoryButtonWidget.WBP_CustomizationCategoryButtonWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_CustomizationCategoryButtonWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_CustomizationCategoryButtonWidget.WBP_CustomizationCategoryButtonWidget_C.ExecuteUbergraph_WBP_CustomizationCategoryButtonWidget
// Offset::0x3D30810;
void FWBP_CustomizationCategoryButtonWidget_C::ExecuteUbergraph_WBP_CustomizationCategoryButtonWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_CustomizationCategoryButtonWidget.WBP_CustomizationCategoryButtonWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_CustomizationCategoryButtonWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_CustomizationCategoryButtonWidget.WBP_CustomizationCategoryButtonWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_CustomizationCategoryButtonWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_CustomizationCategoryButtonWidget.WBP_CustomizationCategoryButtonWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_CustomizationCategoryButtonWidget_C::BP_OnEntryReleased();


// Function  WBP_Atom_GameMode.WBP_Atom_GameMode_C.SequenceEvent__ENTRYPOINTWBP_Atom_GameMode
// Offset::0x3D30810;
void FWBP_Atom_GameMode_C::SequenceEvent__ENTRYPOINTWBP_Atom_GameMode();


// Function  WBP_Atom_GameMode.WBP_Atom_GameMode_C.SequenceEvent
// Offset::0x3D30810;
void FWBP_Atom_GameMode_C::SequenceEvent(FWidgetAnimation* InAnimation);


// Function  WBP_Atom_GameMode.WBP_Atom_GameMode_C.ExecuteUbergraph_WBP_Atom_GameMode
// Offset::0x3D30810;
void FWBP_Atom_GameMode_C::ExecuteUbergraph_WBP_Atom_GameMode(int32_t EntryPoint,bool K2Node_Event_bNewValue,FWidgetAnimation* K2Node_CustomEvent_InAnimation);


// Function  WBP_Atom_GameMode.WBP_Atom_GameMode_C.BP_OnHoveredChanged
// Offset::0x3D30810;
void FWBP_Atom_GameMode_C::BP_OnHoveredChanged(bool bNewValue);


// Function  WBP_PrivateMatchPlayerListEntryWidget.WBP_PrivateMatchPlayerListEntryWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_PrivateMatchPlayerListEntryWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_PrivateMatchPlayerListEntryWidget.WBP_PrivateMatchPlayerListEntryWidget_C.ExecuteUbergraph_WBP_PrivateMatchPlayerListEntryWidget
// Offset::0x3D30810;
void FWBP_PrivateMatchPlayerListEntryWidget_C::ExecuteUbergraph_WBP_PrivateMatchPlayerListEntryWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_PrivateMatchPlayerListEntryWidget.WBP_PrivateMatchPlayerListEntryWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_PrivateMatchPlayerListEntryWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_PrivateMatchPlayerListEntryWidget.WBP_PrivateMatchPlayerListEntryWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_PrivateMatchPlayerListEntryWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_PrivateMatchPlayerListEntryWidget.WBP_PrivateMatchPlayerListEntryWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_PrivateMatchPlayerListEntryWidget_C::BP_OnEntryReleased();


// Function  WBP_CircuitStageListEntry.WBP_CircuitStageListEntry_C.ExecuteUbergraph_WBP_CircuitStageListEntry
// Offset::0x3D30810;
void FWBP_CircuitStageListEntry_C::ExecuteUbergraph_WBP_CircuitStageListEntry(int32_t EntryPoint,bool K2Node_Event_bIsSelected,bool K2Node_Event_bIsExpanded);


// Function  WBP_CircuitStageListEntry.WBP_CircuitStageListEntry_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_CircuitStageListEntry_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_CircuitStageListEntry.WBP_CircuitStageListEntry_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_CircuitStageListEntry_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_CircuitStageListEntry.WBP_CircuitStageListEntry_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_CircuitStageListEntry_C::BP_OnEntryReleased();


// Function  WBP_CollectionItem.WBP_CollectionItem_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_CollectionItem_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_CollectionItem.WBP_CollectionItem_C.ExecuteUbergraph_WBP_CollectionItem
// Offset::0x3D30810;
void FWBP_CollectionItem_C::ExecuteUbergraph_WBP_CollectionItem(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_CollectionItem.WBP_CollectionItem_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_CollectionItem_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_CollectionItem.WBP_CollectionItem_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_CollectionItem_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_CollectionItem.WBP_CollectionItem_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_CollectionItem_C::BP_OnEntryReleased();


// Function  WBP_ContestantPackWidget.WBP_ContestantPackWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_ContestantPackWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_ContestantPackWidget.WBP_ContestantPackWidget_C.ExecuteUbergraph_WBP_ContestantPackWidget
// Offset::0x3D30810;
void FWBP_ContestantPackWidget_C::ExecuteUbergraph_WBP_ContestantPackWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_ContestantPackWidget.WBP_ContestantPackWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_ContestantPackWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_ContestantPackWidget.WBP_ContestantPackWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_ContestantPackWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_ContestantPackWidget.WBP_ContestantPackWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_ContestantPackWidget_C::BP_OnEntryReleased();


// Function  WBP_DeckBuildingSlotWidget.WBP_DeckBuildingSlotWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_DeckBuildingSlotWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_DeckBuildingSlotWidget.WBP_DeckBuildingSlotWidget_C.ExecuteUbergraph_WBP_DeckBuildingSlotWidget
// Offset::0x3D30810;
void FWBP_DeckBuildingSlotWidget_C::ExecuteUbergraph_WBP_DeckBuildingSlotWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_DeckBuildingSlotWidget.WBP_DeckBuildingSlotWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_DeckBuildingSlotWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_DeckBuildingSlotWidget.WBP_DeckBuildingSlotWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_DeckBuildingSlotWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_DeckBuildingSlotWidget.WBP_DeckBuildingSlotWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_DeckBuildingSlotWidget_C::BP_OnEntryReleased();


// Function  BP_DiscoveryDebugCameraController.BP_DiscoveryDebugCameraController_C.InpActEvt_ToggleFreeFlyDebugCamera_K2Node_InputActionEvent
// Offset::0x3D30810;
void FBP_DiscoveryDebugCameraController_C::InpActEvt_ToggleFreeFlyDebugCamera_K2Node_InputActionEvent(FKey Key);


// Function  BP_DiscoveryDebugCameraController.BP_DiscoveryDebugCameraController_C.ExecuteUbergraph_BP_DiscoveryDebugCameraController
// Offset::0x3D30810;
void FBP_DiscoveryDebugCameraController_C::ExecuteUbergraph_BP_DiscoveryDebugCameraController(int32_t EntryPoint,FKey K2Node_InputActionEvent_Key);


// Function  WBP_ItemMenu.WBP_ItemMenu_C.OnKeyDown
// Offset::0x3D30810;
FEventReply FWBP_ItemMenu_C::OnKeyDown(FGeometry MyGeometry,FKeyEvent InKeyEvent);


// Function  WBP_DebugCharts.WBP_DebugCharts_C.OnInitialized
// Offset::0x3D30810;
void FWBP_DebugCharts_C::OnInitialized();


// Function  WBP_DebugCharts.WBP_DebugCharts_C.ExecuteUbergraph_WBP_DebugCharts
// Offset::0x3D30810;
void FWBP_DebugCharts_C::ExecuteUbergraph_WBP_DebugCharts(int32_t EntryPoint);


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.ExecuteUbergraph_ABP_FrontEndMaster
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::ExecuteUbergraph_ABP_FrontEndMaster(int32_t EntryPoint,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,double Temp_real_Variable,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,enum class EArchetypeSize Temp_byte_Variable,double Temp_real_Variable,enum class EArchetypeSize Temp_byte_Variable,bool CallFunc_MatchesTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,double Temp_real_Variable,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,enum class EArchetypeSize Temp_byte_Variable,bool CallFunc_BooleanOR_ReturnValue,double Temp_real_Variable,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,enum class EArchetypeSize Temp_byte_Variable,bool CallFunc_BooleanOR_ReturnValue,double Temp_real_Variable,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,enum class EArchetypeSize Temp_byte_Variable,bool CallFunc_BooleanOR_ReturnValue,double Temp_real_Variable,enum class EArchetypeSize Temp_byte_Variable,double Temp_real_Variable,enum class EArchetypeSize Temp_byte_Variable,double Temp_real_Variable,bool CallFunc_IsAnimNotifyStateActive_ReturnValue,bool CallFunc_IsAnimNotifyStateActive_ReturnValue,enum class EArchetypeSize Temp_byte_Variable,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_IsAnimNotifyStateActive_ReturnValue,bool CallFunc_MakeLiteralBool_ReturnValue,bool CallFunc_MakeLiteralBool_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_MakeLiteralBool_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_MakeLiteralBool_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_MakeLiteralBool_ReturnValue,bool CallFunc_MakeLiteralBool_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,double Temp_real_Variable,enum class EArchetypeSize Temp_byte_Variable,double Temp_real_Variable,enum class EArchetypeSize Temp_byte_Variable,bool CallFunc_IsAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_IsAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_IsAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_IsAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_IsAnimNotifyStateActive_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_IsAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_IsAnimNotifyStateActive_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_IsAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_MakeLiteralBool_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,enum class EArchetypeSize Temp_byte_Variable,double K2Node_Select_Default,enum class EArchetypeSize Temp_byte_Variable,double K2Node_Select_Default,bool CallFunc_Not_PreBool_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,enum class EArchetypeSize Temp_byte_Variable,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,double K2Node_Select_Default,bool CallFunc_BooleanOR_ReturnValue,enum class EArchetypeSize Temp_byte_Variable,double K2Node_Select_Default,bool CallFunc_IsAnimNotifyStateActive_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_IsAnimNotifyStateActive_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_IsAnimNotifyStateActive_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_MakeLiteralBool_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,double K2Node_Select_Default,double K2Node_Select_Default,double K2Node_Select_Default,double K2Node_Select_Default,bool CallFunc_Not_PreBool_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,double K2Node_Select_Default,double K2Node_Select_Default,float K2Node_StructMemberSet___FloatProperty_49_NarrowingCast,float K2Node_StructMemberSet___FloatProperty_47_NarrowingCast,float K2Node_StructMemberSet___FloatProperty_23_NarrowingCast,float K2Node_StructMemberSet___FloatProperty_21_NarrowingCast);


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_FF66940E4BCB05CAAC515E92B274271C
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_FF66940E4BCB05CAAC515E92B274271C();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_FCD789D4412C4E29B5BD5CB54941DA08
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_FCD789D4412C4E29B5BD5CB54941DA08();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_F91D6566468D8B595C64229FA8C0BD3F
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_F91D6566468D8B595C64229FA8C0BD3F();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_EE5589A54588731D18B2018734D602B9
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_EE5589A54588731D18B2018734D602B9();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_ED6AA7ED423EF094EFEED28035B92FFD
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_ED6AA7ED423EF094EFEED28035B92FFD();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_E7168EA84721796BB46B0DA0E353CE30
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_E7168EA84721796BB46B0DA0E353CE30();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_E7118FF8422C95D4C3FE45A082F7B139
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_E7118FF8422C95D4C3FE45A082F7B139();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_E54F00AB462D5B4AA588B6BC27C3B7B1
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_E54F00AB462D5B4AA588B6BC27C3B7B1();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_E1D9B5A6460A67C52220C2A8FB106791
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_E1D9B5A6460A67C52220C2A8FB106791();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_D182CAF7434273EA285A759100EA933B
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_D182CAF7434273EA285A759100EA933B();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_D0824EE7490686C3D35A3C8799970CE9
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_D0824EE7490686C3D35A3C8799970CE9();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_CFED30D34368404720902E9BB7508F9D
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_CFED30D34368404720902E9BB7508F9D();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_C593EDFB4473671E3346899F390CEB24
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_C593EDFB4473671E3346899F390CEB24();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_C0344458452E81C63BD409AB2CB62B6E
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_C0344458452E81C63BD409AB2CB62B6E();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_AD442DDE48E44C1BD86D7B885CFD78FD
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_AD442DDE48E44C1BD86D7B885CFD78FD();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_9BD5648C4A5B5E23CFCCBBA62E6813A4
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_9BD5648C4A5B5E23CFCCBBA62E6813A4();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_9AD152B84EBC75B660FDC7890C5B74C0
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_9AD152B84EBC75B660FDC7890C5B74C0();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_94A8D84D40B850318266398C71458E4B
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_94A8D84D40B850318266398C71458E4B();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_90E32002416953F4442C2296E444A585
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_90E32002416953F4442C2296E444A585();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_828BE209404F06A3983AC6A374D7066B
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_828BE209404F06A3983AC6A374D7066B();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_79C07D2E47E2AFFACA4A3CB9803C2B70
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_79C07D2E47E2AFFACA4A3CB9803C2B70();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_72C1DE7C4AADE079F7D42D8BBC4D3B09
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_72C1DE7C4AADE079F7D42D8BBC4D3B09();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_723E5B974E02E6F44308319AA9A6AD2A
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_723E5B974E02E6F44308319AA9A6AD2A();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_6EACC21B46A24C72CEA53CBE5A9ADA99
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_6EACC21B46A24C72CEA53CBE5A9ADA99();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_6AEDD73B4EEDAB9D55268590722CBDDC
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_6AEDD73B4EEDAB9D55268590722CBDDC();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_6999AE7248D4144FCE1325B61221D49C
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_6999AE7248D4144FCE1325B61221D49C();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_64074EB446901E9039F86F95834D2DCE
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_64074EB446901E9039F86F95834D2DCE();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_5EF6264B48448193929B9C9160B07F69
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_5EF6264B48448193929B9C9160B07F69();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_4B3BE943408AF427297AF9B851D1B7A3
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_4B3BE943408AF427297AF9B851D1B7A3();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_4827BD054582D34E96A7E788F238DFB6
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_4827BD054582D34E96A7E788F238DFB6();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_47647673415AA6BCA0E9F994B30994E8
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_47647673415AA6BCA0E9F994B30994E8();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_359E045E4A98F70EB43E8F9636E2ADAA
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_359E045E4A98F70EB43E8F9636E2ADAA();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_35817E054CB77271F75D5395EA8EA6DC
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_35817E054CB77271F75D5395EA8EA6DC();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_3501AFDA4901B13C9700B595480957CB
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_3501AFDA4901B13C9700B595480957CB();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_2A217788462CB5C6F4141EA54988F85F
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_2A217788462CB5C6F4141EA54988F85F();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_23533A2941C0BB2C52DDEAB596576930
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_23533A2941C0BB2C52DDEAB596576930();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_1F6444EF4E3DC99D35B2BC80B03DF363
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_1F6444EF4E3DC99D35B2BC80B03DF363();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_1E6F1D514DF341211496FD9F415EA674
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_1E6F1D514DF341211496FD9F415EA674();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_1ABF4D694EAB6529CA3EA38DE7ED2433
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_1ABF4D694EAB6529CA3EA38DE7ED2433();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_176E27E64715295D8113BDBD31C18FCD
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_176E27E64715295D8113BDBD31C18FCD();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_16FAF3804CC43AA865B8F6BDB436EBD3
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_16FAF3804CC43AA865B8F6BDB436EBD3();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_0B4E47B34CEBA088865BE08C00ADFFA7
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_0B4E47B34CEBA088865BE08C00ADFFA7();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_045EA2F149FAE2BEF7CA689F3ADE8CE8
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_045EA2F149FAE2BEF7CA689F3ADE8CE8();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_045D59F94BE43E03097C818F5AAFF8A0
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_045D59F94BE43E03097C818F5AAFF8A0();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_03E2C69B4202C1C5758F439BD5CEEDE1
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_TransitionResult_03E2C69B4202C1C5758F439BD5CEEDE1();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_SequencePlayer_F617BF824FC400DBC74E23959BE37E37
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_SequencePlayer_F617BF824FC400DBC74E23959BE37E37();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_SequencePlayer_CEEEA17E48D0F401F1920CB17E6EAF81
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_SequencePlayer_CEEEA17E48D0F401F1920CB17E6EAF81();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_SequencePlayer_458CF0FD4580F1C87721FE8CDAEA7376
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_SequencePlayer_458CF0FD4580F1C87721FE8CDAEA7376();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_SequencePlayer_1E7ACDBA45DC143BB33FF6AD214BF5EF
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_SequencePlayer_1E7ACDBA45DC143BB33FF6AD214BF5EF();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_ControlRig_A75B74BC4D1CD592ECC7878E8CFAAACB
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_FrontEndMaster_AnimGraphNode_ControlRig_A75B74BC4D1CD592ECC7878E8CFAAACB();


// Function  ABP_FrontEndMaster.ABP_FrontEndMaster_C.AnimGraph
// Offset::0x3D30810;
void FABP_FrontEndMaster_C::AnimGraph(FPoseLink AnimGraph);


// Function  WBP_Atom_CategoryMarkerPlayer.WBP_Atom_CategoryMarkerPlayer_C.PreConstruct
// Offset::0x3D30810;
void FWBP_Atom_CategoryMarkerPlayer_C::PreConstruct(bool IsDesignTime);


// Function  WBP_Atom_CategoryMarkerPlayer.WBP_Atom_CategoryMarkerPlayer_C.ExecuteUbergraph_WBP_Atom_CategoryMarkerPlayer
// Offset::0x3D30810;
void FWBP_Atom_CategoryMarkerPlayer_C::ExecuteUbergraph_WBP_Atom_CategoryMarkerPlayer(int32_t EntryPoint,bool K2Node_Event_IsDesignTime);


// Function  WBP_RewardWheelEntry.WBP_RewardWheelEntry_C.ExecuteUbergraph_WBP_RewardWheelEntry
// Offset::0x3D30810;
void FWBP_RewardWheelEntry_C::ExecuteUbergraph_WBP_RewardWheelEntry(int32_t EntryPoint,bool K2Node_Event_bIsSelected,bool K2Node_Event_bIsExpanded);


// Function  WBP_RewardWheelEntry.WBP_RewardWheelEntry_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_RewardWheelEntry_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_RewardWheelEntry.WBP_RewardWheelEntry_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_RewardWheelEntry_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_RewardWheelEntry.WBP_RewardWheelEntry_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_RewardWheelEntry_C::BP_OnEntryReleased();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_StateEntryNode_417D11C541B6CCC481512CADC5CB83D2_Tag_Filter_8B6542684920BAC3F5E892A2A0DFE1E7
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_StateEntryNode_417D11C541B6CCC481512CADC5CB83D2_Tag_Filter_8B6542684920BAC3F5E892A2A0DFE1E7();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_StateEntryNode_417D11C541B6CCC481512CADC5CB83D2_PlayDialogue_63D60C8E4BDDF46B5E2324A7B4BAFD27
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_StateEntryNode_417D11C541B6CCC481512CADC5CB83D2_PlayDialogue_63D60C8E4BDDF46B5E2324A7B4BAFD27();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_StateEntryNode_417D11C541B6CCC481512CADC5CB83D2_Log_in_Backend_that_we_have_heard_the_intro_line_0ED2F75A4AF3070B97C750A6A486DF69
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_StateEntryNode_417D11C541B6CCC481512CADC5CB83D2_Log_in_Backend_that_we_have_heard_the_intro_line_0ED2F75A4AF3070B97C750A6A486DF69();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_F77922121F2FEF9C834B583F6A0AE21B
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_F77922121F2FEF9C834B583F6A0AE21B();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_4057407B20CE351278263AF71B7DBB45
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_4057407B20CE351278263AF71B7DBB45();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_20CD296683AA943F50FE295743EE81F2
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_20CD296683AA943F50FE295743EE81F2();


// Function  WABP_SmokeGrenade_Frontend.WABP_SmokeGrenade_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_SmokeGrenade_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_SmokeGrenade_Frontend.WABP_SmokeGrenade_Frontend_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_SmokeGrenade_Frontend_AnimGraphNode_ControlRig_098875714357249CFB7A3CA854A54018
// Offset::0x3D30810;
void FWABP_SmokeGrenade_Frontend_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_SmokeGrenade_Frontend_AnimGraphNode_ControlRig_098875714357249CFB7A3CA854A54018();


// Function  WABP_SmokeGrenade_Frontend.WABP_SmokeGrenade_Frontend_C.ExecuteUbergraph_WABP_SmokeGrenade_Frontend
// Offset::0x3D30810;
void FWABP_SmokeGrenade_Frontend_C::ExecuteUbergraph_WABP_SmokeGrenade_Frontend(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_SmokeGrenade.WABP_SmokeGrenade_C.AnimGraph
// Offset::0x3D30810;
void FWABP_SmokeGrenade_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_SmokeGrenade.WABP_SmokeGrenade_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_SmokeGrenade_AnimGraphNode_ControlRig_0BA952B94F079D8AE8C443AC063D0522
// Offset::0x3D30810;
void FWABP_SmokeGrenade_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_SmokeGrenade_AnimGraphNode_ControlRig_0BA952B94F079D8AE8C443AC063D0522();


// Function  WABP_SmokeGrenade.WABP_SmokeGrenade_C.ExecuteUbergraph_WABP_SmokeGrenade
// Offset::0x3D30810;
void FWABP_SmokeGrenade_C::ExecuteUbergraph_WABP_SmokeGrenade(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_GrenadeEMP_01_Frontend.WABP_GrenadeEMP_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GrenadeEMP_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GrenadeEMP_01_Frontend.WABP_GrenadeEMP_01_Frontend_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeEMP_01_Frontend_AnimGraphNode_ControlRig_8A873C7D4AB296B88A3C4E9C669BD9AA
// Offset::0x3D30810;
void FWABP_GrenadeEMP_01_Frontend_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeEMP_01_Frontend_AnimGraphNode_ControlRig_8A873C7D4AB296B88A3C4E9C669BD9AA();


// Function  WABP_GrenadeEMP_01_Frontend.WABP_GrenadeEMP_01_Frontend_C.ExecuteUbergraph_WABP_GrenadeEMP_01_Frontend
// Offset::0x3D30810;
void FWABP_GrenadeEMP_01_Frontend_C::ExecuteUbergraph_WABP_GrenadeEMP_01_Frontend(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_GrenadeEMP_01.WABP_GrenadeEMP_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GrenadeEMP_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GrenadeEMP_01.WABP_GrenadeEMP_01_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeEMP_01_AnimGraphNode_ControlRig_3DEA189541E48F65E6347D9072A9DAC5
// Offset::0x3D30810;
void FWABP_GrenadeEMP_01_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeEMP_01_AnimGraphNode_ControlRig_3DEA189541E48F65E6347D9072A9DAC5();


// Function  WABP_GrenadeEMP_01.WABP_GrenadeEMP_01_C.ExecuteUbergraph_WABP_GrenadeEMP_01
// Offset::0x3D30810;
void FWABP_GrenadeEMP_01_C::ExecuteUbergraph_WABP_GrenadeEMP_01(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_GrenadeGas_01_Frontend.WABP_GrenadeGas_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GrenadeGas_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GrenadeGas_01_Frontend.WABP_GrenadeGas_01_Frontend_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeGas_01_Frontend_AnimGraphNode_ControlRig_7707867A40FE6FA4120C4EA19C976E2E
// Offset::0x3D30810;
void FWABP_GrenadeGas_01_Frontend_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeGas_01_Frontend_AnimGraphNode_ControlRig_7707867A40FE6FA4120C4EA19C976E2E();


// Function  WABP_GrenadeGas_01_Frontend.WABP_GrenadeGas_01_Frontend_C.ExecuteUbergraph_WABP_GrenadeGas_01_Frontend
// Offset::0x3D30810;
void FWABP_GrenadeGas_01_Frontend_C::ExecuteUbergraph_WABP_GrenadeGas_01_Frontend(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_GrenadeGas_01.WABP_GrenadeGas_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GrenadeGas_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GrenadeGas_01.WABP_GrenadeGas_01_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeGas_01_AnimGraphNode_ControlRig_25D1839E43E27C6F39FEC4A0AF51311D
// Offset::0x3D30810;
void FWABP_GrenadeGas_01_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeGas_01_AnimGraphNode_ControlRig_25D1839E43E27C6F39FEC4A0AF51311D();


// Function  WABP_GrenadeGas_01.WABP_GrenadeGas_01_C.ExecuteUbergraph_WABP_GrenadeGas_01
// Offset::0x3D30810;
void FWABP_GrenadeGas_01_C::ExecuteUbergraph_WABP_GrenadeGas_01(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_Revolver_02_FoundStick_Frontend.WABP_Revolver_02_FoundStick_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Revolver_02_FoundStick_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Revolver_02_FoundStick.WABP_Revolver_02_FoundStick_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Revolver_02_FoundStick_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_BattleRifle_01_Legendary_05.WABP_BattleRifle_01_Legendary_05_C.AnimGraph
// Offset::0x3D30810;
void FWABP_BattleRifle_01_Legendary_05_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_BattleRifle_01_Legendary_05.WABP_BattleRifle_01_Legendary_05_C.ExecuteUbergraph_WABP_BattleRifle_01_Legendary_05
// Offset::0x3D30810;
void FWABP_BattleRifle_01_Legendary_05_C::ExecuteUbergraph_WABP_BattleRifle_01_Legendary_05(int32_t EntryPoint);


// Function  WABP_AssaultRifle_01_Legendary_03.WABP_AssaultRifle_01_Legendary_03_C.AnimGraph
// Offset::0x3D30810;
void FWABP_AssaultRifle_01_Legendary_03_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_AssaultRifle_01_Legendary_03.WABP_AssaultRifle_01_Legendary_03_C.ExecuteUbergraph_WABP_AssaultRifle_01_Legendary_03
// Offset::0x3D30810;
void FWABP_AssaultRifle_01_Legendary_03_C::ExecuteUbergraph_WABP_AssaultRifle_01_Legendary_03(int32_t EntryPoint);


// Function  WABP_Sledgehammer_01_Lollipop_Frontend.WABP_Sledgehammer_01_Lollipop_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_Lollipop_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Sledgehammer_01_Lollipop_Frontend.WABP_Sledgehammer_01_Lollipop_Frontend_C.ExecuteUbergraph_WABP_Sledgehammer_01_Lollipop_Frontend
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_Lollipop_Frontend_C::ExecuteUbergraph_WABP_Sledgehammer_01_Lollipop_Frontend(int32_t EntryPoint);


// Function  WABP_Sledgehammer_01_BambooStick_Frontend.WABP_Sledgehammer_01_BambooStick_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_BambooStick_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Sledgehammer_01_BambooStick_Frontend.WABP_Sledgehammer_01_BambooStick_Frontend_C.ExecuteUbergraph_WABP_Sledgehammer_01_BambooStick_Frontend
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_BambooStick_Frontend_C::ExecuteUbergraph_WABP_Sledgehammer_01_BambooStick_Frontend(int32_t EntryPoint);


// Function  WABP_ThrowingKnives_Frontend.WABP_ThrowingKnives_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_ThrowingKnives_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_ThrowingKnives_Frontend.WABP_ThrowingKnives_Frontend_C.ExecuteUbergraph_WABP_ThrowingKnives_Frontend
// Offset::0x3D30810;
void FWABP_ThrowingKnives_Frontend_C::ExecuteUbergraph_WABP_ThrowingKnives_Frontend(int32_t EntryPoint);


// Function  WABP_EMPTrap_01_Frontend.WABP_EMPTrap_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_EMPTrap_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_EMPTrap_01_Frontend.WABP_EMPTrap_01_Frontend_C.ExecuteUbergraph_WABP_EMPTrap_01_Frontend
// Offset::0x3D30810;
void FWABP_EMPTrap_01_Frontend_C::ExecuteUbergraph_WABP_EMPTrap_01_Frontend(int32_t EntryPoint);


// Function  BP_SingleDoor_01.BP_SingleDoor_01_C.UserConstructionScript
// Offset::0x3D30810;
void FBP_SingleDoor_01_C::UserConstructionScript(float CallFunc_Conv_IntToFloat_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,FVector CallFunc_MakeVector_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast);


// Function  WABP_BaseballBat.WABP_BaseballBat_C.AnimGraph
// Offset::0x3D30810;
void FWABP_BaseballBat_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_BaseballBat.WABP_BaseballBat_C.ExecuteUbergraph_WABP_BaseballBat
// Offset::0x3D30810;
void FWABP_BaseballBat_C::ExecuteUbergraph_WABP_BaseballBat(int32_t EntryPoint);


// Function  WABP_Sledgehammer_01_Spoon_01_Frontend.WABP_Sledgehammer_01_Spoon_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_Spoon_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Sledgehammer_01_Spoon_01_Frontend.WABP_Sledgehammer_01_Spoon_01_Frontend_C.ExecuteUbergraph_WABP_Sledgehammer_01_Spoon_01_Frontend
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_Spoon_01_Frontend_C::ExecuteUbergraph_WABP_Sledgehammer_01_Spoon_01_Frontend(int32_t EntryPoint);


// Function  BP_TrashBin_01_A.BP_TrashBin_01_A_C.UserConstructionScript
// Offset::0x3D30810;
void FBP_TrashBin_01_A_C::UserConstructionScript(int32_t Temp_int_Variable,FMaterialInterface* Temp_object_Variable,FMaterialInterface* Temp_object_Variable,FMaterialInterface* Temp_object_Variable,FMaterialInterface* Temp_object_Variable,FVector CallFunc_K2_GetComponentLocation_ReturnValue,double CallFunc_Dot_VectorVector_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Fraction_ReturnValue,double CallFunc_Abs_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,int32_t CallFunc_Round_ReturnValue,FMaterialInterface* K2Node_Select_Default);


// Function  BP_PotSet_01_P.BP_PotSet_01_P_C.UserConstructionScript
// Offset::0x3D30810;
void FBP_PotSet_01_P_C::UserConstructionScript(bool UseCables);


// Function  BP_PotSet_01_E.BP_PotSet_01_E_C.UserConstructionScript
// Offset::0x3D30810;
void FBP_PotSet_01_E_C::UserConstructionScript(bool UseCables);


// Function  WABP_Sledgehammer_01_Guitar_01_Frontend.WABP_Sledgehammer_01_Guitar_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_Guitar_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Sledgehammer_01_Guitar_01_Frontend.WABP_Sledgehammer_01_Guitar_01_Frontend_C.ExecuteUbergraph_WABP_Sledgehammer_01_Guitar_01_Frontend
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_Guitar_01_Frontend_C::ExecuteUbergraph_WABP_Sledgehammer_01_Guitar_01_Frontend(int32_t EntryPoint);


// Function  WABP_Launcher_02.WABP_Launcher_02_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Launcher_02_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Launcher_02.WABP_Launcher_02_C.ExecuteUbergraph_WABP_Launcher_02
// Offset::0x3D30810;
void FWABP_Launcher_02_C::ExecuteUbergraph_WABP_Launcher_02(int32_t EntryPoint);


// Function  WABP_SCAR_01.WABP_SCAR_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_SCAR_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_SCAR_01.WABP_SCAR_01_C.ExecuteUbergraph_WABP_SCAR_01
// Offset::0x3D30810;
void FWABP_SCAR_01_C::ExecuteUbergraph_WABP_SCAR_01(int32_t EntryPoint);


// Function  WABP_Shotgun_03.WABP_Shotgun_03_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Shotgun_03_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Shotgun_03.WABP_Shotgun_03_C.ExecuteUbergraph_WABP_Shotgun_03
// Offset::0x3D30810;
void FWABP_Shotgun_03_C::ExecuteUbergraph_WABP_Shotgun_03(int32_t EntryPoint);


// Function  WABP_ThrowingKnives.WABP_ThrowingKnives_C.AnimGraph
// Offset::0x3D30810;
void FWABP_ThrowingKnives_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_ThrowingKnives.WABP_ThrowingKnives_C.ExecuteUbergraph_WABP_ThrowingKnives
// Offset::0x3D30810;
void FWABP_ThrowingKnives_C::ExecuteUbergraph_WABP_ThrowingKnives(int32_t EntryPoint);


// Function  WABP_PlayingCards_01_Frontend.WABP_PlayingCards_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_PlayingCards_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_PlayingCards_01_Frontend.WABP_PlayingCards_01_Frontend_C.ExecuteUbergraph_WABP_PlayingCards_01_Frontend
// Offset::0x3D30810;
void FWABP_PlayingCards_01_Frontend_C::ExecuteUbergraph_WABP_PlayingCards_01_Frontend(int32_t EntryPoint);


// Function  WABP_FoxTacticalElementum_Frontend.WABP_FoxTacticalElementum_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_FoxTacticalElementum_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_FoxTacticalElementum_Frontend.WABP_FoxTacticalElementum_Frontend_C.ExecuteUbergraph_WABP_FoxTacticalElementum_Frontend
// Offset::0x3D30810;
void FWABP_FoxTacticalElementum_Frontend_C::ExecuteUbergraph_WABP_FoxTacticalElementum_Frontend(int32_t EntryPoint);


// Function  WABP_C4_Frontend.WABP_C4_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_C4_Frontend_C::AnimGraph(FPoseLink InPose,FPoseLink AnimGraph);


// Function  WABP_C4_Frontend.WABP_C4_Frontend_C.ExecuteUbergraph_WABP_C4_Frontend
// Offset::0x3D30810;
void FWABP_C4_Frontend_C::ExecuteUbergraph_WABP_C4_Frontend(int32_t EntryPoint);


// Function  WABP_SonarGrenade.WABP_SonarGrenade_C.AnimGraph
// Offset::0x3D30810;
void FWABP_SonarGrenade_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_SonarGrenade.WABP_SonarGrenade_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_SonarGrenade_AnimGraphNode_ControlRig_6565F6A24EDDC7572F4FFEA85FB947B2
// Offset::0x3D30810;
void FWABP_SonarGrenade_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_SonarGrenade_AnimGraphNode_ControlRig_6565F6A24EDDC7572F4FFEA85FB947B2();


// Function  WABP_SonarGrenade.WABP_SonarGrenade_C.ExecuteUbergraph_WABP_SonarGrenade
// Offset::0x3D30810;
void FWABP_SonarGrenade_C::ExecuteUbergraph_WABP_SonarGrenade(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_GrenadeSonar_01_Frontend.WABP_GrenadeSonar_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GrenadeSonar_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Defibrillator_01_Cable_Frontend.WABP_Defibrillator_01_Cable_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Defibrillator_01_Cable_Frontend_C::AnimGraph(FPoseLink InPose,FPoseLink AnimGraph);


// Function  WABP_Defibrillator_01_Cable_Frontend.WABP_Defibrillator_01_Cable_Frontend_C.ExecuteUbergraph_WABP_Defibrillator_01_Cable_Frontend
// Offset::0x3D30810;
void FWABP_Defibrillator_01_Cable_Frontend_C::ExecuteUbergraph_WABP_Defibrillator_01_Cable_Frontend(int32_t EntryPoint);


// Function  WABP_Defibrillator_01_Cable.WABP_Defibrillator_01_Cable_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Defibrillator_01_Cable_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Defibrillator_01_Cable.WABP_Defibrillator_01_Cable_C.ExecuteUbergraph_WABP_Defibrillator_01_Cable
// Offset::0x3D30810;
void FWABP_Defibrillator_01_Cable_C::ExecuteUbergraph_WABP_Defibrillator_01_Cable(int32_t EntryPoint);


// Function  WABP_Launcher_01.WABP_Launcher_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Launcher_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Launcher_01.WABP_Launcher_01_C.ExecuteUbergraph_WABP_Launcher_01
// Offset::0x3D30810;
void FWABP_Launcher_01_C::ExecuteUbergraph_WABP_Launcher_01(int32_t EntryPoint);


// Function  WABP_MultiDevice_01.WABP_MultiDevice_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_MultiDevice_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_MultiDevice_01.WABP_MultiDevice_01_C.ExecuteUbergraph_WABP_MultiDevice_01
// Offset::0x3D30810;
void FWABP_MultiDevice_01_C::ExecuteUbergraph_WABP_MultiDevice_01(int32_t EntryPoint);


// Function  WABP_MineGas_01_Frontend.WABP_MineGas_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_MineGas_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_MineGas_01_Frontend.WABP_MineGas_01_Frontend_C.ExecuteUbergraph_WABP_MineGas_01_Frontend
// Offset::0x3D30810;
void FWABP_MineGas_01_Frontend_C::ExecuteUbergraph_WABP_MineGas_01_Frontend(int32_t EntryPoint);


// Function  WABP_FragGrenade_FootballAmerican_Frontend.WABP_FragGrenade_FootballAmerican_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_FragGrenade_FootballAmerican_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_FragGrenade_FootballAmerican_Frontend.WABP_FragGrenade_FootballAmerican_Frontend_C.ExecuteUbergraph_WABP_FragGrenade_FootballAmerican_Frontend
// Offset::0x3D30810;
void FWABP_FragGrenade_FootballAmerican_Frontend_C::ExecuteUbergraph_WABP_FragGrenade_FootballAmerican_Frontend(int32_t EntryPoint);


// Function  WABP_VanishBomb_Frontend.WABP_VanishBomb_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_VanishBomb_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_VanishBomb_Frontend.WABP_VanishBomb_Frontend_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_VanishBomb_Frontend_AnimGraphNode_ControlRig_0B591A9741FE18EF34F8E8BE121E9C46
// Offset::0x3D30810;
void FWABP_VanishBomb_Frontend_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_VanishBomb_Frontend_AnimGraphNode_ControlRig_0B591A9741FE18EF34F8E8BE121E9C46();


// Function  WABP_VanishBomb_Frontend.WABP_VanishBomb_Frontend_C.ExecuteUbergraph_WABP_VanishBomb_Frontend
// Offset::0x3D30810;
void FWABP_VanishBomb_Frontend_C::ExecuteUbergraph_WABP_VanishBomb_Frontend(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_VanishBomb.WABP_VanishBomb_C.AnimGraph
// Offset::0x3D30810;
void FWABP_VanishBomb_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_VanishBomb.WABP_VanishBomb_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_VanishBomb_AnimGraphNode_ControlRig_222A721D4A238A2A62C9B496C0E57226
// Offset::0x3D30810;
void FWABP_VanishBomb_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_VanishBomb_AnimGraphNode_ControlRig_222A721D4A238A2A62C9B496C0E57226();


// Function  WABP_VanishBomb.WABP_VanishBomb_C.ExecuteUbergraph_WABP_VanishBomb
// Offset::0x3D30810;
void FWABP_VanishBomb_C::ExecuteUbergraph_WABP_VanishBomb(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_C4.WABP_C4_C.AnimGraph
// Offset::0x3D30810;
void FWABP_C4_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_TacticalBreach_Frontend.WABP_TacticalBreach_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_TacticalBreach_Frontend_C::AnimGraph(FPoseLink InPose,FPoseLink AnimGraph);


// Function  WABP_TacticalBreach_Frontend.WABP_TacticalBreach_Frontend_C.ExecuteUbergraph_WABP_TacticalBreach_Frontend
// Offset::0x3D30810;
void FWABP_TacticalBreach_Frontend_C::ExecuteUbergraph_WABP_TacticalBreach_Frontend(int32_t EntryPoint);


// Function  WABP_DomeShield_01_A.WABP_DomeShield_01_A_C.AnimGraph
// Offset::0x3D30810;
void FWABP_DomeShield_01_A_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_DomeShield_01_A.WABP_DomeShield_01_A_C.ExecuteUbergraph_WABP_DomeShield_01_A
// Offset::0x3D30810;
void FWABP_DomeShield_01_A_C::ExecuteUbergraph_WABP_DomeShield_01_A(int32_t EntryPoint);


// Function  WABP_ThrowingKnives_CD.WABP_ThrowingKnives_CD_C.AnimGraph
// Offset::0x3D30810;
void FWABP_ThrowingKnives_CD_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Spade_01_Frontend.WABP_Spade_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Spade_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Spade_01_Frontend.WABP_Spade_01_Frontend_C.ExecuteUbergraph_WABP_Spade_01_Frontend
// Offset::0x3D30810;
void FWABP_Spade_01_Frontend_C::ExecuteUbergraph_WABP_Spade_01_Frontend(int32_t EntryPoint);


// Function  WABP_LinkedPortals_Frontend.WABP_LinkedPortals_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_LinkedPortals_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_LinkedPortals_Frontend.WABP_LinkedPortals_Frontend_C.ExecuteUbergraph_WABP_LinkedPortals_Frontend
// Offset::0x3D30810;
void FWABP_LinkedPortals_Frontend_C::ExecuteUbergraph_WABP_LinkedPortals_Frontend(int32_t EntryPoint);


// Function  WABP_LinkedPortals.WABP_LinkedPortals_C.AnimGraph
// Offset::0x3D30810;
void FWABP_LinkedPortals_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_LinkedPortals.WABP_LinkedPortals_C.ExecuteUbergraph_WABP_LinkedPortals
// Offset::0x3D30810;
void FWABP_LinkedPortals_C::ExecuteUbergraph_WABP_LinkedPortals(int32_t EntryPoint);


// Function  WBP_PresentationStageScreen_BattlePass.WBP_PresentationStageScreen_BattlePass_C.Update
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_BattlePass_C::Update(FPresentationStageScreenViewModel InViewModel);


// Function  WABP_Sniper_Legendary_02.WABP_Sniper_Legendary_02_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Sniper_Legendary_02_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Sniper_Legendary_02.WABP_Sniper_Legendary_02_C.ExecuteUbergraph_WABP_Sniper_Legendary_02
// Offset::0x3D30810;
void FWABP_Sniper_Legendary_02_C::ExecuteUbergraph_WABP_Sniper_Legendary_02(int32_t EntryPoint);


// Function  WBP_PresentationStageScreen_BattlePass.WBP_PresentationStageScreen_BattlePass_C.TransitionIn
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_BattlePass_C::TransitionIn();


// Function  WABP_Beretta93R_01.WABP_Beretta93R_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Beretta93R_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Beretta93R_01.WABP_Beretta93R_01_C.ExecuteUbergraph_WABP_Beretta93R_01
// Offset::0x3D30810;
void FWABP_Beretta93R_01_C::ExecuteUbergraph_WABP_Beretta93R_01(int32_t EntryPoint);


// Function  WBP_PresentationStageScreen_BattlePass.WBP_PresentationStageScreen_BattlePass_C.RequestRefreshScreenLights
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_BattlePass_C::RequestRefreshScreenLights();


// Function  WABP_BattleRifle_01.WABP_BattleRifle_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_BattleRifle_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GooGun_01.WABP_GooGun_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GooGun_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GooGun_01.WABP_GooGun_01_C.ExecuteUbergraph_WABP_GooGun_01
// Offset::0x3D30810;
void FWABP_GooGun_01_C::ExecuteUbergraph_WABP_GooGun_01(int32_t EntryPoint);


// Function  WBP_PresentationStageScreen_BattlePass.WBP_PresentationStageScreen_BattlePass_C.GetSponsorLogoImageVisibility
// Offset::0x3D30810;
enum class ESlateVisibility FWBP_PresentationStageScreen_BattlePass_C::GetSponsorLogoImageVisibility();


// Function  WABP_GrenadeGoo_01_Frontend.WABP_GrenadeGoo_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GrenadeGoo_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GrenadeGoo_01_Frontend.WABP_GrenadeGoo_01_Frontend_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeGoo_01_Frontend_AnimGraphNode_ControlRig_EE12BFB34E1400F6BB1117A8DA9BF9B4
// Offset::0x3D30810;
void FWABP_GrenadeGoo_01_Frontend_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeGoo_01_Frontend_AnimGraphNode_ControlRig_EE12BFB34E1400F6BB1117A8DA9BF9B4();


// Function  WABP_GrenadeGoo_01_Frontend.WABP_GrenadeGoo_01_Frontend_C.ExecuteUbergraph_WABP_GrenadeGoo_01_Frontend
// Offset::0x3D30810;
void FWABP_GrenadeGoo_01_Frontend_C::ExecuteUbergraph_WABP_GrenadeGoo_01_Frontend(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WBP_PresentationStageScreen_BattlePass.WBP_PresentationStageScreen_BattlePass_C.Finished_2319BEFF4CFD9026C8036491105ECA40
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_BattlePass_C::Finished_2319BEFF4CFD9026C8036491105ECA40();


// Function  WABP_GrenadeGoo_01.WABP_GrenadeGoo_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GrenadeGoo_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GrenadeGoo_01.WABP_GrenadeGoo_01_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeGoo_01_AnimGraphNode_ControlRig_2AAD392D4E4C150556680EB36F76ACF5
// Offset::0x3D30810;
void FWABP_GrenadeGoo_01_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeGoo_01_AnimGraphNode_ControlRig_2AAD392D4E4C150556680EB36F76ACF5();


// Function  WABP_GrenadeGoo_01.WABP_GrenadeGoo_01_C.ExecuteUbergraph_WABP_GrenadeGoo_01
// Offset::0x3D30810;
void FWABP_GrenadeGoo_01_C::ExecuteUbergraph_WABP_GrenadeGoo_01(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WBP_PresentationStageScreen_BattlePass.WBP_PresentationStageScreen_BattlePass_C.ExecuteUbergraph_WBP_PresentationStageScreen_BattlePass
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_BattlePass_C::ExecuteUbergraph_WBP_PresentationStageScreen_BattlePass(int32_t EntryPoint,FDelegate K2Node_CreateDelegate_OutputDelegate,FPresentationStageScreenViewModel K2Node_Event_InViewModel,FUMGSequencePlayer* CallFunc_CreatePlayAnimationProxyObject_Result,FWidgetAnimationPlayCallbackProxy* CallFunc_CreatePlayAnimationProxyObject_ReturnValue,bool CallFunc_IsValid_ReturnValue,FPresentationStageScreenViewModel CallFunc_GetViewModel_ReturnValue);


// Function  WABP_PistolSuppressed_01_AlienZapper_Frontend.WABP_PistolSuppressed_01_AlienZapper_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_PistolSuppressed_01_AlienZapper_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_PistolSuppressed_01_AlienZapper_Frontend.WABP_PistolSuppressed_01_AlienZapper_Frontend_C.ExecuteUbergraph_WABP_PistolSuppressed_01_AlienZapper_Frontend
// Offset::0x3D30810;
void FWABP_PistolSuppressed_01_AlienZapper_Frontend_C::ExecuteUbergraph_WABP_PistolSuppressed_01_AlienZapper_Frontend(int32_t EntryPoint);


// Function  WABP_AlienZapper_01.WABP_AlienZapper_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_AlienZapper_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_AlienZapper_01.WABP_AlienZapper_01_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_AlienZapper_01_AnimGraphNode_ControlRig_FBACAA8B4E3E372B5A23C698FF72A5D2
// Offset::0x3D30810;
void FWABP_AlienZapper_01_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_AlienZapper_01_AnimGraphNode_ControlRig_FBACAA8B4E3E372B5A23C698FF72A5D2();


// Function  WABP_AlienZapper_01.WABP_AlienZapper_01_C.ExecuteUbergraph_WABP_AlienZapper_01
// Offset::0x3D30810;
void FWABP_AlienZapper_01_C::ExecuteUbergraph_WABP_AlienZapper_01(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WBP_PresentationStageScreen_CharacterCustomization.WBP_PresentationStageScreen_CharacterCustomization_C.Finished_AA02042A4DC622318E56FABFBA650446
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_CharacterCustomization_C::Finished_AA02042A4DC622318E56FABFBA650446();


// Function  WABP_GrenadeFlash_01_Frontend.WABP_GrenadeFlash_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GrenadeFlash_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GrenadeFlash_01_Frontend.WABP_GrenadeFlash_01_Frontend_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeFlash_01_Frontend_AnimGraphNode_ControlRig_309659214A7144D976E3AA99587E4B76
// Offset::0x3D30810;
void FWABP_GrenadeFlash_01_Frontend_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeFlash_01_Frontend_AnimGraphNode_ControlRig_309659214A7144D976E3AA99587E4B76();


// Function  WABP_GrenadeFlash_01_Frontend.WABP_GrenadeFlash_01_Frontend_C.ExecuteUbergraph_WABP_GrenadeFlash_01_Frontend
// Offset::0x3D30810;
void FWABP_GrenadeFlash_01_Frontend_C::ExecuteUbergraph_WABP_GrenadeFlash_01_Frontend(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WBP_PresentationStageScreen_CharacterCustomization.WBP_PresentationStageScreen_CharacterCustomization_C.ExecuteUbergraph_WBP_PresentationStageScreen_CharacterCustomization
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_CharacterCustomization_C::ExecuteUbergraph_WBP_PresentationStageScreen_CharacterCustomization(int32_t EntryPoint,FDelegate K2Node_CreateDelegate_OutputDelegate,FUMGSequencePlayer* CallFunc_CreatePlayAnimationProxyObject_Result,FWidgetAnimationPlayCallbackProxy* CallFunc_CreatePlayAnimationProxyObject_ReturnValue,bool CallFunc_IsValid_ReturnValue);


// Function  WABP_GrenadeFlash_01.WABP_GrenadeFlash_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GrenadeFlash_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GrenadeFlash_01.WABP_GrenadeFlash_01_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeFlash_01_AnimGraphNode_ControlRig_09A2F2374A2CFAEDD6E519818B4746E6
// Offset::0x3D30810;
void FWABP_GrenadeFlash_01_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeFlash_01_AnimGraphNode_ControlRig_09A2F2374A2CFAEDD6E519818B4746E6();


// Function  WABP_GrenadeFlash_01.WABP_GrenadeFlash_01_C.ExecuteUbergraph_WABP_GrenadeFlash_01
// Offset::0x3D30810;
void FWABP_GrenadeFlash_01_C::ExecuteUbergraph_WABP_GrenadeFlash_01(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_Shotgun_03_RetroComputer.WABP_Shotgun_03_RetroComputer_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Shotgun_03_RetroComputer_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Launcher_03.WABP_Launcher_03_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Launcher_03_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Launcher_03.WABP_Launcher_03_C.ExecuteUbergraph_WABP_Launcher_03
// Offset::0x3D30810;
void FWABP_Launcher_03_C::ExecuteUbergraph_WABP_Launcher_03(int32_t EntryPoint);


// Function  WBP_PresentationStageScreen_FinalsLogo.WBP_PresentationStageScreen_FinalsLogo_C.ExecuteUbergraph_WBP_PresentationStageScreen_FinalsLogo
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_FinalsLogo_C::ExecuteUbergraph_WBP_PresentationStageScreen_FinalsLogo(int32_t EntryPoint,FDelegate K2Node_CreateDelegate_OutputDelegate,FUMGSequencePlayer* CallFunc_CreatePlayAnimationProxyObject_Result,FWidgetAnimationPlayCallbackProxy* CallFunc_CreatePlayAnimationProxyObject_ReturnValue,bool CallFunc_IsValid_ReturnValue);


// Function  WABP_Tiny_Frontend.WABP_Tiny_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Tiny_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Tiny.WABP_Tiny_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Tiny_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Famas_01.WABP_Famas_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Famas_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Famas_01.WABP_Famas_01_C.ExecuteUbergraph_WABP_Famas_01
// Offset::0x3D30810;
void FWABP_Famas_01_C::ExecuteUbergraph_WABP_Famas_01(int32_t EntryPoint);


// Function  WABP_Revolver_02_Frontend.WABP_Revolver_02_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Revolver_02_Frontend_C::AnimGraph(FPoseLink InPose,FPoseLink AnimGraph);


// Function  WABP_Revolver_02_Frontend.WABP_Revolver_02_Frontend_C.ExecuteUbergraph_WABP_Revolver_02_Frontend
// Offset::0x3D30810;
void FWABP_Revolver_02_Frontend_C::ExecuteUbergraph_WABP_Revolver_02_Frontend(int32_t EntryPoint);


// Function  WBP_PresentationStageScreen_Neutral.WBP_PresentationStageScreen_Neutral_C.ExecuteUbergraph_WBP_PresentationStageScreen_Neutral
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Neutral_C::ExecuteUbergraph_WBP_PresentationStageScreen_Neutral(int32_t EntryPoint,FDelegate K2Node_CreateDelegate_OutputDelegate,FDelegate K2Node_CreateDelegate_OutputDelegate,FUMGSequencePlayer* CallFunc_CreatePlayAnimationProxyObject_Result,FWidgetAnimationPlayCallbackProxy* CallFunc_CreatePlayAnimationProxyObject_ReturnValue,float CallFunc_GetEndTime_ReturnValue,bool CallFunc_IsValid_ReturnValue,FUMGSequencePlayer* CallFunc_CreatePlayAnimationProxyObject_Result,FWidgetAnimationPlayCallbackProxy* CallFunc_CreatePlayAnimationProxyObject_ReturnValue,bool CallFunc_IsValid_ReturnValue);


// Function  WABP_Flamethrower_01_Frontend.WABP_Flamethrower_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Flamethrower_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Flamethrower_01_Frontend.WABP_Flamethrower_01_Frontend_C.ExecuteUbergraph_WABP_Flamethrower_01_Frontend
// Offset::0x3D30810;
void FWABP_Flamethrower_01_Frontend_C::ExecuteUbergraph_WABP_Flamethrower_01_Frontend(int32_t EntryPoint);


// Function  WBP_PresentationStageScreen_PackSelection.WBP_PresentationStageScreen_PackSelection_C.RequestRefreshScreenLights
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_PackSelection_C::RequestRefreshScreenLights();


// Function  WBP_PresentationStageScreen_PackSelection.WBP_PresentationStageScreen_PackSelection_C.ExecuteUbergraph_WBP_PresentationStageScreen_PackSelection
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_PackSelection_C::ExecuteUbergraph_WBP_PresentationStageScreen_PackSelection(int32_t EntryPoint);


// Function  WABP_Sniper_01.WABP_Sniper_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Sniper_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Sniper_01.WABP_Sniper_01_C.ExecuteUbergraph_WABP_Sniper_01
// Offset::0x3D30810;
void FWABP_Sniper_01_C::ExecuteUbergraph_WABP_Sniper_01(int32_t EntryPoint);


// Function  WABP_Launcher_02_Standalone.WABP_Launcher_02_Standalone_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Launcher_02_Standalone_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Launcher_02_Standalone.WABP_Launcher_02_Standalone_C.ExecuteUbergraph_WABP_Launcher_02_Standalone
// Offset::0x3D30810;
void FWABP_Launcher_02_Standalone_C::ExecuteUbergraph_WABP_Launcher_02_Standalone(int32_t EntryPoint);


// Function  WABP_Launcher_02_GiftWrapped_01.WABP_Launcher_02_GiftWrapped_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Launcher_02_GiftWrapped_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Sledgehammer_01.WABP_Sledgehammer_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Sledgehammer_01.WABP_Sledgehammer_01_C.ExecuteUbergraph_WABP_Sledgehammer_01
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_C::ExecuteUbergraph_WABP_Sledgehammer_01(int32_t EntryPoint);


// Function  WABP_Smg_01_Retro.WABP_Smg_01_Retro_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Smg_01_Retro_C::AnimGraph(FPoseLink AnimGraph);


// Function  WBP_PresentationStageScreen_RewardFlow.WBP_PresentationStageScreen_RewardFlow_C.Update
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_RewardFlow_C::Update(FPresentationStageScreenViewModel InViewModel);


// Function  WBP_PresentationStageScreen_RewardFlow.WBP_PresentationStageScreen_RewardFlow_C.RequestRefreshScreenLights
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_RewardFlow_C::RequestRefreshScreenLights();


// Function  WBP_PresentationStageScreen_RewardFlow.WBP_PresentationStageScreen_RewardFlow_C.ExecuteUbergraph_WBP_PresentationStageScreen_RewardFlow
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_RewardFlow_C::ExecuteUbergraph_WBP_PresentationStageScreen_RewardFlow(int32_t EntryPoint,FPresentationStageScreenViewModel K2Node_Event_InViewModel);


// Function  WBP_PresentationStageScreen_RewardFlowUnlocked.WBP_PresentationStageScreen_RewardFlowUnlocked_C.Update
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_RewardFlowUnlocked_C::Update(FPresentationStageScreenViewModel InViewModel);


// Function  WBP_PresentationStageScreen_RewardFlowUnlocked.WBP_PresentationStageScreen_RewardFlowUnlocked_C.RequestRefreshScreenLights
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_RewardFlowUnlocked_C::RequestRefreshScreenLights();


// Function  WBP_PresentationStageScreen_RewardFlowUnlocked.WBP_PresentationStageScreen_RewardFlowUnlocked_C.ExecuteUbergraph_WBP_PresentationStageScreen_RewardFlowUnlocked
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_RewardFlowUnlocked_C::ExecuteUbergraph_WBP_PresentationStageScreen_RewardFlowUnlocked(int32_t EntryPoint,FPresentationStageScreenViewModel K2Node_Event_InViewModel);


// Function  WABP_Mine_01_Frontend.WABP_Mine_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Mine_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Mine_01_Frontend.WABP_Mine_01_Frontend_C.ExecuteUbergraph_WABP_Mine_01_Frontend
// Offset::0x3D30810;
void FWABP_Mine_01_Frontend_C::ExecuteUbergraph_WABP_Mine_01_Frontend(int32_t EntryPoint);


// Function  WABP_MolotovCoctail_Frontend.WABP_MolotovCoctail_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_MolotovCoctail_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_MolotovCoctail_Frontend.WABP_MolotovCoctail_Frontend_C.ExecuteUbergraph_WABP_MolotovCoctail_Frontend
// Offset::0x3D30810;
void FWABP_MolotovCoctail_Frontend_C::ExecuteUbergraph_WABP_MolotovCoctail_Frontend(int32_t EntryPoint);


// Function  WABP_MolotovCoctail.WABP_MolotovCoctail_C.AnimGraph
// Offset::0x3D30810;
void FWABP_MolotovCoctail_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_MolotovCoctail.WABP_MolotovCoctail_C.ExecuteUbergraph_WABP_MolotovCoctail
// Offset::0x3D30810;
void FWABP_MolotovCoctail_C::ExecuteUbergraph_WABP_MolotovCoctail(int32_t EntryPoint);


// Function  WBP_PresentationStageScreen_Tunnel.WBP_PresentationStageScreen_Tunnel_C.TransitionOut
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Tunnel_C::TransitionOut();


// Function  WABP_GrenadeIncendinary_01_Fluid.WABP_GrenadeIncendinary_01_Fluid_C.AnimGraph
// Offset::0x3D30810;
void FWABP_GrenadeIncendinary_01_Fluid_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_GrenadeIncendinary_01_Fluid.WABP_GrenadeIncendinary_01_Fluid_C.ExecuteUbergraph_WABP_GrenadeIncendinary_01_Fluid
// Offset::0x3D30810;
void FWABP_GrenadeIncendinary_01_Fluid_C::ExecuteUbergraph_WABP_GrenadeIncendinary_01_Fluid(int32_t EntryPoint);


// Function  WBP_PresentationStageScreen_Tunnel.WBP_PresentationStageScreen_Tunnel_C.TransitionIn
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Tunnel_C::TransitionIn();


// Function  WBP_PresentationStageScreen_Tunnel.WBP_PresentationStageScreen_Tunnel_C.RequestRefreshScreenLights
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Tunnel_C::RequestRefreshScreenLights();


// Function  WBP_PresentationStageScreen_Tunnel.WBP_PresentationStageScreen_Tunnel_C.Finished_87ADD7EF43843308E2CC47ACB7E503E4
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Tunnel_C::Finished_87ADD7EF43843308E2CC47ACB7E503E4();


// Function  WBP_PresentationStageScreen_Tunnel.WBP_PresentationStageScreen_Tunnel_C.Finished_65F1A6054937F998936179A6AEFC1147
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Tunnel_C::Finished_65F1A6054937F998936179A6AEFC1147();


// Function  WBP_PresentationStageScreen_Tunnel.WBP_PresentationStageScreen_Tunnel_C.ExecuteUbergraph_WBP_PresentationStageScreen_Tunnel
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Tunnel_C::ExecuteUbergraph_WBP_PresentationStageScreen_Tunnel(int32_t EntryPoint,FDelegate K2Node_CreateDelegate_OutputDelegate,FDelegate K2Node_CreateDelegate_OutputDelegate,FUMGSequencePlayer* CallFunc_CreatePlayAnimationProxyObject_Result,FWidgetAnimationPlayCallbackProxy* CallFunc_CreatePlayAnimationProxyObject_ReturnValue,float CallFunc_GetEndTime_ReturnValue,bool CallFunc_IsValid_ReturnValue,FUMGSequencePlayer* CallFunc_CreatePlayAnimationProxyObject_Result,FWidgetAnimationPlayCallbackProxy* CallFunc_CreatePlayAnimationProxyObject_ReturnValue,bool CallFunc_IsValid_ReturnValue);


// Function  WABP_RifleDart01.WABP_RifleDart01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_RifleDart01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_RifleDart01.WABP_RifleDart01_C.ExecuteUbergraph_WABP_RifleDart01
// Offset::0x3D30810;
void FWABP_RifleDart01_C::ExecuteUbergraph_WABP_RifleDart01(int32_t EntryPoint);


// Function  WABP_Katana.WABP_Katana_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Katana_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Katana.WABP_Katana_C.ExecuteUbergraph_WABP_Katana
// Offset::0x3D30810;
void FWABP_Katana_C::ExecuteUbergraph_WABP_Katana(int32_t EntryPoint);


// Function  WABP_Sledgehammer_01_Frontend.WABP_Sledgehammer_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Sledgehammer_01_Frontend.WABP_Sledgehammer_01_Frontend_C.ExecuteUbergraph_WABP_Sledgehammer_01_Frontend
// Offset::0x3D30810;
void FWABP_Sledgehammer_01_Frontend_C::ExecuteUbergraph_WABP_Sledgehammer_01_Frontend(int32_t EntryPoint);


// Function  WABP_LewisGun_01.WABP_LewisGun_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_LewisGun_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_MP5.WABP_MP5_C.AnimGraph
// Offset::0x3D30810;
void FWABP_MP5_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_MP5.WABP_MP5_C.ExecuteUbergraph_WABP_MP5
// Offset::0x3D30810;
void FWABP_MP5_C::ExecuteUbergraph_WABP_MP5(int32_t EntryPoint);


// Function  WABP_Defibrillator_01_A_Frontend.WABP_Defibrillator_01_A_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Defibrillator_01_A_Frontend_C::AnimGraph(FPoseLink InPose,FPoseLink AnimGraph);


// Function  WABP_Defibrillator_01_A_Frontend.WABP_Defibrillator_01_A_Frontend_C.ExecuteUbergraph_WABP_Defibrillator_01_A_Frontend
// Offset::0x3D30810;
void FWABP_Defibrillator_01_A_Frontend_C::ExecuteUbergraph_WABP_Defibrillator_01_A_Frontend(int32_t EntryPoint);


// Function  WABP_Defibrillator_01_A.WABP_Defibrillator_01_A_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Defibrillator_01_A_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Flamethrower_01.WABP_Flamethrower_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Flamethrower_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_ProximitySensor_01_A.WABP_ProximitySensor_01_A_C.AnimGraph
// Offset::0x3D30810;
void FWABP_ProximitySensor_01_A_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_ProximitySensor_01_A.WABP_ProximitySensor_01_A_C.ExecuteUbergraph_WABP_ProximitySensor_01_A
// Offset::0x3D30810;
void FWABP_ProximitySensor_01_A_C::ExecuteUbergraph_WABP_ProximitySensor_01_A(int32_t EntryPoint);


// Function  WABP_HealingGun.WABP_HealingGun_C.AnimGraph
// Offset::0x3D30810;
void FWABP_HealingGun_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_HealingGun.WABP_HealingGun_C.ExecuteUbergraph_WABP_HealingGun
// Offset::0x3D30810;
void FWABP_HealingGun_C::ExecuteUbergraph_WABP_HealingGun(int32_t EntryPoint);


// Function  WABP_FragGrenade_Pink_01_Frontend.WABP_FragGrenade_Pink_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_FragGrenade_Pink_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_FragGrenade_Pink_01_Frontend.WABP_FragGrenade_Pink_01_Frontend_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_FragGrenade_Pink_01_Frontend_AnimGraphNode_ControlRig_DFF866CF45EC07BF64D9E7A82F27B827
// Offset::0x3D30810;
void FWABP_FragGrenade_Pink_01_Frontend_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_FragGrenade_Pink_01_Frontend_AnimGraphNode_ControlRig_DFF866CF45EC07BF64D9E7A82F27B827();


// Function  WABP_FragGrenade_Pink_01_Frontend.WABP_FragGrenade_Pink_01_Frontend_C.ExecuteUbergraph_WABP_FragGrenade_Pink_01_Frontend
// Offset::0x3D30810;
void FWABP_FragGrenade_Pink_01_Frontend_C::ExecuteUbergraph_WABP_FragGrenade_Pink_01_Frontend(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_ThrowingKnives_Scissors_Frontend.WABP_ThrowingKnives_Scissors_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_ThrowingKnives_Scissors_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_ThrowingKnives_Scissors.WABP_ThrowingKnives_Scissors_C.AnimGraph
// Offset::0x3D30810;
void FWABP_ThrowingKnives_Scissors_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Smg_01.WABP_Smg_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Smg_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Smg_01.WABP_Smg_01_C.ExecuteUbergraph_WABP_Smg_01
// Offset::0x3D30810;
void FWABP_Smg_01_C::ExecuteUbergraph_WABP_Smg_01(int32_t EntryPoint);


// Function  WABP_RemingtonModel1900.WABP_RemingtonModel1900_C.AnimGraph
// Offset::0x3D30810;
void FWABP_RemingtonModel1900_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_KS23_01.WABP_KS23_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_KS23_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_KS23_01.WABP_KS23_01_C.ExecuteUbergraph_WABP_KS23_01
// Offset::0x3D30810;
void FWABP_KS23_01_C::ExecuteUbergraph_WABP_KS23_01(int32_t EntryPoint);


// Function  WABP_AssaultRifle_01.WABP_AssaultRifle_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_AssaultRifle_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_RiotShield_Frontend.WABP_RiotShield_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_RiotShield_Frontend_C::AnimGraph(FPoseLink InPose,FPoseLink AnimGraph);


// Function  WABP_RiotShield_Frontend.WABP_RiotShield_Frontend_C.ExecuteUbergraph_WABP_RiotShield_Frontend
// Offset::0x3D30810;
void FWABP_RiotShield_Frontend_C::ExecuteUbergraph_WABP_RiotShield_Frontend(int32_t EntryPoint);


// Function  WABP_RiotShield.WABP_RiotShield_C.AnimGraph
// Offset::0x3D30810;
void FWABP_RiotShield_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_ReverseGravityZone_01.WABP_ReverseGravityZone_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_ReverseGravityZone_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_ReverseGravityZone_01.WABP_ReverseGravityZone_01_C.ExecuteUbergraph_WABP_ReverseGravityZone_01
// Offset::0x3D30810;
void FWABP_ReverseGravityZone_01_C::ExecuteUbergraph_WABP_ReverseGravityZone_01(int32_t EntryPoint);


// Function  WABP_PistolSuppressed_01.WABP_PistolSuppressed_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_PistolSuppressed_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_LMG_01.WABP_LMG_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_LMG_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_LMG_01.WABP_LMG_01_C.ExecuteUbergraph_WABP_LMG_01
// Offset::0x3D30810;
void FWABP_LMG_01_C::ExecuteUbergraph_WABP_LMG_01(int32_t EntryPoint);


// Function  WABP_FragGrenade_Frontend.WABP_FragGrenade_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_FragGrenade_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_FragGrenade_Frontend.WABP_FragGrenade_Frontend_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_FragGrenade_Frontend_AnimGraphNode_ControlRig_C9AC3BA94BFCD8C2B0AB2E8ED1415332
// Offset::0x3D30810;
void FWABP_FragGrenade_Frontend_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_FragGrenade_Frontend_AnimGraphNode_ControlRig_C9AC3BA94BFCD8C2B0AB2E8ED1415332();


// Function  WABP_FragGrenade_Frontend.WABP_FragGrenade_Frontend_C.ExecuteUbergraph_WABP_FragGrenade_Frontend
// Offset::0x3D30810;
void FWABP_FragGrenade_Frontend_C::ExecuteUbergraph_WABP_FragGrenade_Frontend(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_FragGrenade.WABP_FragGrenade_C.AnimGraph
// Offset::0x3D30810;
void FWABP_FragGrenade_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_FragGrenade.WABP_FragGrenade_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_FragGrenade_AnimGraphNode_ControlRig_6CDF2283444E2FEB64CFD28FFB9CB484
// Offset::0x3D30810;
void FWABP_FragGrenade_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_FragGrenade_AnimGraphNode_ControlRig_6CDF2283444E2FEB64CFD28FFB9CB484();


// Function  WABP_FragGrenade.WABP_FragGrenade_C.ExecuteUbergraph_WABP_FragGrenade
// Offset::0x3D30810;
void FWABP_FragGrenade_C::ExecuteUbergraph_WABP_FragGrenade(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_Shotgun_02.WABP_Shotgun_02_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Shotgun_02_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_FoxTacticalElementum_Legendary_01_Frontend.WABP_FoxTacticalElementum_Legendary_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_FoxTacticalElementum_Legendary_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_FoxTacticalElementum_Legendary_01_Frontend.WABP_FoxTacticalElementum_Legendary_01_Frontend_C.ExecuteUbergraph_WABP_FoxTacticalElementum_Legendary_01_Frontend
// Offset::0x3D30810;
void FWABP_FoxTacticalElementum_Legendary_01_Frontend_C::ExecuteUbergraph_WABP_FoxTacticalElementum_Legendary_01_Frontend(int32_t EntryPoint);


// Function  WABP_FoxTacticalElementum_Legendary_01.WABP_FoxTacticalElementum_Legendary_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_FoxTacticalElementum_Legendary_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_FoxTacticalElementum_Legendary_01.WABP_FoxTacticalElementum_Legendary_01_C.ExecuteUbergraph_WABP_FoxTacticalElementum_Legendary_01
// Offset::0x3D30810;
void FWABP_FoxTacticalElementum_Legendary_01_C::ExecuteUbergraph_WABP_FoxTacticalElementum_Legendary_01(int32_t EntryPoint);


// Function  WABP_FoxTacticalElementum_CheeseSlicer_Frontend.WABP_FoxTacticalElementum_CheeseSlicer_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_FoxTacticalElementum_CheeseSlicer_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_FoxTacticalElementum.WABP_FoxTacticalElementum_C.AnimGraph
// Offset::0x3D30810;
void FWABP_FoxTacticalElementum_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Revolver_02.WABP_Revolver_02_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Revolver_02_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_Mine_01.WABP_Mine_01_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Mine_01_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_MineIncendiary_01_Frontend.WABP_MineIncendiary_01_Frontend_C.AnimGraph
// Offset::0x3D30810;
void FWABP_MineIncendiary_01_Frontend_C::AnimGraph(FPoseLink AnimGraph);


// Function  WABP_MineIncendiary_01_Frontend.WABP_MineIncendiary_01_Frontend_C.ExecuteUbergraph_WABP_MineIncendiary_01_Frontend
// Offset::0x3D30810;
void FWABP_MineIncendiary_01_Frontend_C::ExecuteUbergraph_WABP_MineIncendiary_01_Frontend(int32_t EntryPoint);


// Function  WABP_Taser7.WABP_Taser7_C.AnimGraph
// Offset::0x3D30810;
void FWABP_Taser7_C::AnimGraph(FPoseLink AnimGraph);


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Wait_Round_Over_3EDAA1434405ECF7A1D74D9A1A417102
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Wait_Round_Over_3EDAA1434405ECF7A1D74D9A1A417102();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Wait_07614CBF4BD86DF69DA3C5A8804FE7D0
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Wait_07614CBF4BD86DF69DA3C5A8804FE7D0();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Set_Wait_Time_9ED1CB12436A652E1649BFBF37817788
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Set_Wait_Time_9ED1CB12436A652E1649BFBF37817788();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Set_Up_Intro_57DAD6F943C2B469A6F8ADBB514234BD
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Set_Up_Intro_57DAD6F943C2B469A6F8ADBB514234BD();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Set_up_First_Intro_2C6770D64F5C9782C9BDB19C4DED55C8
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Set_up_First_Intro_2C6770D64F5C9782C9BDB19C4DED55C8();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Scotty__4AAAA4CF41A9146ADBDBD88E6C838EAC
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Scotty__4AAAA4CF41A9146ADBDBD88E6C838EAC();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Round_Over__9DC4CA164F2BD904BC777BB734E509AB
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Round_Over__9DC4CA164F2BD904BC777BB734E509AB();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_Commentator_Round_Number_0B3C02AF4C7A2B436D48868CE09423A0
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_Commentator_Round_Number_0B3C02AF4C7A2B436D48868CE09423A0();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_Commentator_First_Intro_976AA13C42853E5932F8ECBC71866DD1
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_Commentator_First_Intro_976AA13C42853E5932F8ECBC71866DD1();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_Commentator_5EA3B3FA4A9F3A0E8447E688331171AD
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_Commentator_5EA3B3FA4A9F3A0E8447E688331171AD();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_CoHost_Intro_2F1EAE424A30322CF4762EA1FB0375D7
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_CoHost_Intro_2F1EAE424A30322CF4762EA1FB0375D7();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_CoHost_First_Intro_65111AA74F29A15BE326CCAF256A66DB
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_CoHost_First_Intro_65111AA74F29A15BE326CCAF256A66DB();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_CoHost_5E7F6E724B6DAD491DD184A9E2B77A4C
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Play_On_CoHost_5E7F6E724B6DAD491DD184A9E2B77A4C();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Map_one_off_bucket_71A8E9FE450B151179EDA79BE3918CB7
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Map_one_off_bucket_71A8E9FE450B151179EDA79BE3918CB7();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Wait_0E3F8F234AEEEE45118F638C5967AF77
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Wait_0E3F8F234AEEEE45118F638C5967AF77();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Play_On_CoHost_76A554594179EBFF388FC1AAAE80F5D6
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Play_On_CoHost_76A554594179EBFF388FC1AAAE80F5D6();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Mention_Special_Event__6F8039E84EDA5C215D73DDA60D69CF6D
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Mention_Special_Event__6F8039E84EDA5C215D73DDA60D69CF6D();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Is_Solo_Mode__4B540EA5472CD5E4BDDADF80B9A57E15
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Is_Solo_Mode__4B540EA5472CD5E4BDDADF80B9A57E15();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_is_Heist_C34FD08E4428E95D8BF40D97D087BA04
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_is_Heist_C34FD08E4428E95D8BF40D97D087BA04();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Get_Weather_Bucket_C829861F4DFEED1FD6D6DE994A3535C5
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Get_Weather_Bucket_C829861F4DFEED1FD6D6DE994A3535C5();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Get_Variant_Bucket_F6DDB0C04B2031DD9F16AF9512BD9D37
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Get_Variant_Bucket_F6DDB0C04B2031DD9F16AF9512BD9D37();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Get_Random_Intro_Variation_Buckets_7557478F4B8C72CEC9AAB0AA5B74ED9B
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Get_Random_Intro_Variation_Buckets_7557478F4B8C72CEC9AAB0AA5B74ED9B();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Commentator___Map_Variant_F5C59BCB41DBC7FBB0976EA477DA0A84
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Commentator___Map_Variant_F5C59BCB41DBC7FBB0976EA477DA0A84();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Commentator___Heist_Intro_Answer_9630CC09419C9FAF2AE9D788CFDC7FAB
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Commentator___Heist_Intro_Answer_9630CC09419C9FAF2AE9D788CFDC7FAB();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Commentator___Cashgrab_Solo_Intro_A816AE7944E3B9C63EEB40AD472A0B11
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_Commentator___Cashgrab_Solo_Intro_A816AE7944E3B9C63EEB40AD472A0B11();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_CoHost___Weather_2D6E1D95459313348D259892F29520F7
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_CoHost___Weather_2D6E1D95459313348D259892F29520F7();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_CoHost___Heist_Intro_D0DE9C8340D4EB31AEC4C5A7EA44EAC8
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_CoHost___Heist_Intro_D0DE9C8340D4EB31AEC4C5A7EA44EAC8();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_CoHost___Cashgrab_Solo_Answer_8FB92B5940A3118F42B04BAC349E3055
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_StateEntryNode_1D56120E4836F5CE918480A00FF9F52F_CoHost___Cashgrab_Solo_Answer_8FB92B5940A3118F42B04BAC349E3055();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Wait_690EB3984765CED4CC231891EC6E74C0
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Wait_690EB3984765CED4CC231891EC6E74C0();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Switch_on_all_cases_of_Final_and_FirstCashout_2E5AF22448507C30FB0F028012E6B440
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Switch_on_all_cases_of_Final_and_FirstCashout_2E5AF22448507C30FB0F028012E6B440();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_PlayDialogue___CoHost_or_Commentator_F5E14C0C4665DAB9142980A950AA7BE4
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_PlayDialogue___CoHost_or_Commentator_F5E14C0C4665DAB9142980A950AA7BE4();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Knockout_Round_Normal_Or_Deposits_In_A_Row_E446908245ED1A32F31FD5BEB237DEA8
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Knockout_Round_Normal_Or_Deposits_In_A_Row_E446908245ED1A32F31FD5BEB237DEA8();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Is_Quick_Cash_Tie__B3D73A1C4416D892329287AA15A844B9
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Is_Quick_Cash_Tie__B3D73A1C4416D892329287AA15A844B9();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Is_It_an_Equalizer_in_Final_Round__6EA1F8FE49E3A124751AC8A79AA72B97
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Is_It_an_Equalizer_in_Final_Round__6EA1F8FE49E3A124751AC8A79AA72B97();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_First_Cashout_Knockout_6FA197F44A71D7BD03FE5E9C0F8EECBA
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_First_Cashout_Knockout_6FA197F44A71D7BD03FE5E9C0F8EECBA();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_First_Cashout_Final_F4FDCEFD4D34394B4938E6A9A6F39061
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_First_Cashout_Final_F4FDCEFD4D34394B4938E6A9A6F39061();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Final_Round_Normal_61395BA44F6E66605BC83180F1AA76F5
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Final_Round_Normal_61395BA44F6E66605BC83180F1AA76F5();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Commentator___Quickcash_Tie_0525E9AB4A180511A51BEA8E6070BA97
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Commentator___Quickcash_Tie_0525E9AB4A180511A51BEA8E6070BA97();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Commentator___Final_Round_First_Cashout_Answer_647A112142550161C2DD529AF5459798
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Commentator___Final_Round_First_Cashout_Answer_647A112142550161C2DD529AF5459798();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Wait_B329E70B428585C372C140B419A1A33B
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Wait_B329E70B428585C372C140B419A1A33B();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Set_Winning_Team_Started_Last_Cashout_Bucket_56E237EC43BE88F3D5E1A8BB37888AB8
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Set_Winning_Team_Started_Last_Cashout_Bucket_56E237EC43BE88F3D5E1A8BB37888AB8();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Set_Last_Deposit_Buckets_0333B19B464493C35812A09CF1F9D670
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Set_Last_Deposit_Buckets_0333B19B464493C35812A09CF1F9D670();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Set_Generic_Deposit_Bucket_D0FA73FC4CF80C53DFE4F3B14EC001F8
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Set_Generic_Deposit_Bucket_D0FA73FC4CF80C53DFE4F3B14EC001F8();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Set_First_Deposit_Bucket_1E49E709449992100A6AB0A391C523A8
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Set_First_Deposit_Bucket_1E49E709449992100A6AB0A391C523A8();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Play_On_Commentator_4DC3D1244B65891AF3C3A0937A3850AC
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Play_On_Commentator_4DC3D1244B65891AF3C3A0937A3850AC();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Play_On_CoHost_BAB3C92440AF4C7739241A82064570AC
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Play_On_CoHost_BAB3C92440AF4C7739241A82064570AC();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_June_Responds_If_First_Cashout_Is_Throw_D84C192E4B4610B22D3EBC86DDEFE983
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_June_Responds_If_First_Cashout_Is_Throw_D84C192E4B4610B22D3EBC86DDEFE983();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Is_Leading_Team_Starting_Cashout__38E566F9408D03EE0F0C1CA5B92D71D3
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Is_Leading_Team_Starting_Cashout__38E566F9408D03EE0F0C1CA5B92D71D3();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Is_Last_Deposit__EAF18791459B4C4C8849BE87EEE5E7D8
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Is_Last_Deposit__EAF18791459B4C4C8849BE87EEE5E7D8();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Wait_33DB382049FB685636BC5C9DF7E7265E
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Wait_33DB382049FB685636BC5C9DF7E7265E();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Leader_or_Loser_in_either_Casual___Knockout___Final_E03C0A4D4BD0F8C85E826AB2D4358D8F
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Leader_or_Loser_in_either_Casual___Knockout___Final_E03C0A4D4BD0F8C85E826AB2D4358D8F();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Leader___Loser___Comeback_FBF2B4DC478522F2FA63DAAE35B4A18C
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Leader___Loser___Comeback_FBF2B4DC478522F2FA63DAAE35B4A18C();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Is_LeadTaken_VO_Enabled__0CBB44C445C15F699CEE2EBA7601881C
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Is_LeadTaken_VO_Enabled__0CBB44C445C15F699CEE2EBA7601881C();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Is_Knockout_VO_Enabled__Else_play_Lead_Taken_21675E9F49177D1910225BA69BA90B48
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Is_Knockout_VO_Enabled__Else_play_Lead_Taken_21675E9F49177D1910225BA69BA90B48();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Is_Comeback_VO_enabled__Else_play_Lead_Taken_AC099CB14F4BC1B6E100E59240728004
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Is_Comeback_VO_enabled__Else_play_Lead_Taken_AC099CB14F4BC1B6E100E59240728004();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_End_EBBBE2B24A373D5309A2D6B50B38BC71
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_End_EBBBE2B24A373D5309A2D6B50B38BC71();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Did_A_Comeback_Happen_D5E1516E4DABFFE2F4C03BBB3AFEC334
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Did_A_Comeback_Happen_D5E1516E4DABFFE2F4C03BBB3AFEC334();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Commentator___Lead_Taken_Quickcash_70C98641480CC5F9F4C556AF4337637D
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Commentator___Lead_Taken_Quickcash_70C98641480CC5F9F4C556AF4337637D();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Commentator___Lead_Taken_In_Knockout_531803B440256289E97D98A0FF6BB3FF
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Commentator___Lead_Taken_In_Knockout_531803B440256289E97D98A0FF6BB3FF();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_Wait_3CA0724B4BE97086A688BAAFC8C6FAEC
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_Wait_3CA0724B4BE97086A688BAAFC8C6FAEC();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Reset_All_Queues_CDA0FA204636DB3B2E9B0E85CB8E1A36
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Reset_All_Queues_CDA0FA204636DB3B2E9B0E85CB8E1A36();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Quick_Cash_Map_Switch___0___Monaco___1_Seoul___2_Arena___3_Arena02_BDB00B5C42E8E8E242423CAF0740FCBA
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Quick_Cash_Map_Switch___0___Monaco___1_Seoul___2_Arena___3_Arena02_BDB00B5C42E8E8E242423CAF0740FCBA();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Play_On_CoHost_A06A24E5437B8A802FA62E992F41D568
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Play_On_CoHost_A06A24E5437B8A802FA62E992F41D568();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Mention_Special_Event__69566F8B45528CED0AD428BCBD297F8F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Mention_Special_Event__69566F8B45528CED0AD428BCBD297F8F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Is_Easter__4F8F138E45727426B616759BA16DC832
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Is_Easter__4F8F138E45727426B616759BA16DC832();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Is_Arena02__E4F6C12B4D7E5269D31930832C95288A
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Is_Arena02__E4F6C12B4D7E5269D31930832C95288A();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Get_Weather_Bucket_F0F214C94FC85D96470AB18697D0758C
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Get_Weather_Bucket_F0F214C94FC85D96470AB18697D0758C();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Get_Variant_Bucket_1EF605D34CECBBBC9651B794E259E221
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Get_Variant_Bucket_1EF605D34CECBBBC9651B794E259E221();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Get_Random_Intro_Variation_Buckets_81A62819444E70F41AA1C8BD5C108459
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Get_Random_Intro_Variation_Buckets_81A62819444E70F41AA1C8BD5C108459();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Determine_Final_Round_Variation_Combination_EFCFE08541471B813CE2899121D58E90
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Determine_Final_Round_Variation_Combination_EFCFE08541471B813CE2899121D58E90();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Commentator___Quickcash_Intro_3BCC8BDF4B591D6BD962CABA7A3B66C0
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Commentator___Quickcash_Intro_3BCC8BDF4B591D6BD962CABA7A3B66C0();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Commentator___Map_Variant_3481D9C64EF7226F5B44208981B9C519
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Commentator___Map_Variant_3481D9C64EF7226F5B44208981B9C519();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Commentator___Intro_Easter_20BDEA5A4960D1924E01449E4CF64DAA
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Commentator___Intro_Easter_20BDEA5A4960D1924E01449E4CF64DAA();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Commentator___Intro_Answer_9363E9ED40A241ACC811CEBF1A186341
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Commentator___Intro_Answer_9363E9ED40A241ACC811CEBF1A186341();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Commentator___Final_Round_Answer_F0F09AEC4712A886E11C70BB1C721A33
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_Commentator___Final_Round_Answer_F0F09AEC4712A886E11C70BB1C721A33();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_CoHost___Weather_984EFFFB49E803A8BBF5D7AB074E7D2C
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_CoHost___Weather_984EFFFB49E803A8BBF5D7AB074E7D2C();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_CoHost___Quickcash_Intro_Answer_F1D3B5104C02713DD0F500B5B76E7431
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_CoHost___Quickcash_Intro_Answer_F1D3B5104C02713DD0F500B5B76E7431();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_CoHost___Intro_Answer_Easter_EF88A24A4D18BB9672D432868681DE2B
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_CoHost___Intro_Answer_Easter_EF88A24A4D18BB9672D432868681DE2B();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_CoHost___Intro_663F0FA44746C54CEE4DFDAB69CD1441
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_CoHost___Intro_663F0FA44746C54CEE4DFDAB69CD1441();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_CoHost___Final_Round_D3A3FF414AD6648790379199C7A98E39
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_CoHost___Final_Round_D3A3FF414AD6648790379199C7A98E39();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_0_Knockout___1_QuickCash___2_FinalRound___3_TugOfWar_855F8FB74A11D58B7DF8329257E76DA9
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_StateEntryNode_E42208F24E0311678BAF409B3D1957BE_0_Knockout___1_QuickCash___2_FinalRound___3_TugOfWar_855F8FB74A11D58B7DF8329257E76DA9();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_What_Team_Is_Wiped__60FE1530484052DB106DCB8916EA9E95
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_What_Team_Is_Wiped__60FE1530484052DB106DCB8916EA9E95();


// Function  BP_DialogueConditionInstance.BP_DialogueConditionInstance_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueConditionInstance_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueLogicStateInstance_Base.BP_DialogueLogicStateInstance_Base_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueLogicStateInstance_Base_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueLogicStateInstance_MakeArray.BP_DialogueLogicStateInstance_MakeArray_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueLogicStateInstance_MakeArray_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueLogicStateInstance_TagFilter.BP_DialogueLogicStateInstance_TagFilter_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueLogicStateInstance_TagFilter_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueStateInstance_End.BP_DialogueStateInstance_End_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateInstance_End_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueStateInstance_PlayDialogue.BP_DialogueStateInstance_PlayDialogue_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateInstance_PlayDialogue_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueStateInstance_Wait.BP_DialogueStateInstance_Wait_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateInstance_Wait_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueStateMachineCooldown.BP_DialogueStateMachineCooldown_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateMachineCooldown_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueStateTransition_Base.BP_DialogueStateTransition_Base_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateTransition_Base_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueStateTransition_Talk.BP_DialogueStateTransition_Talk_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateTransition_Talk_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueSwitchInstance.BP_DialogueSwitchInstance_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueSwitchInstance_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueStateInstance_PlayDialogueAsset_Announcer.BP_DialogueStateInstance_PlayDialogueAsset_Announcer_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateInstance_PlayDialogueAsset_Announcer_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueStateInstance_PlayOnCommentator.BP_DialogueStateInstance_PlayOnCommentator_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateInstance_PlayOnCommentator_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueStateTransition_FlavorEventUpdate.BP_DialogueStateTransition_FlavorEventUpdate_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateTransition_FlavorEventUpdate_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Is_Intro__2465CD124F03751A2B23F5B8915F0970
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Is_Intro__2465CD124F03751A2B23F5B8915F0970();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Is_First_Intro__90CE8FB04EC74E34E964B28EB1C09BD3
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Is_First_Intro__90CE8FB04EC74E34E964B28EB1C09BD3();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Intro_Wait_97CE7B3840C29F51FB274BB7CFD07B60
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_StateEntryNode_172ABC3B499012216116A4B05DE76DC0_Intro_Wait_97CE7B3840C29F51FB274BB7CFD07B60();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::SMGraphK2Node_GraphPropertyNode_172ABC3B499012216116A4B05DE76DC0_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.IsScottyLine
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::IsScottyLine(bool IsScotty,FGameplayTagContainer AllTags,bool CallFunc_DoesContainerMatchTagQuery_ReturnValue,FGameplayTagContainer CallFunc_GetAllBucketParameters_ReturnValue,FGameplayTag CallFunc_GetObjectTag_ReturnValue);


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.GetRandomIntroParameter
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::GetRandomIntroParameter(FGameplayTagContainer OutParameters,FGameplayTag CallFunc_GetRandomTagFromArray_ReturnValue,FGameplayTagContainer CallFunc_MakeGameplayTagContainerFromTag_ReturnValue);


// Function  DSM_AttackDefend_Announce.DSM_AttackDefend_Announce_C.ExecuteUbergraph_DSM_AttackDefend_Announce
// Offset::0x3D30810;
void FDSM_AttackDefend_Announce_C::ExecuteUbergraph_DSM_AttackDefend_Announce(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FGameplayTagContainer CallFunc_GetAllBucketParameters_ReturnValue,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetObjectTag_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetObjectTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,double CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,bool CallFunc_IsScottyLine_IsScotty,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTagContainer CallFunc_GetRandomIntroParameter_OutParameters,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetObjectTag_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetObjectTag_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FGameplayTag CallFunc_GetObjectTag_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FGameplayTagContainer CallFunc_GetAllBucketParameters_ReturnValue,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_StateEntryNode_CE8569C4496979BF55C260AC176B57F1_Wait_6FDADA364BB826B81F50A3BCD72AF573
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_StateEntryNode_CE8569C4496979BF55C260AC176B57F1_Wait_6FDADA364BB826B81F50A3BCD72AF573();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_StateEntryNode_CE8569C4496979BF55C260AC176B57F1_Play_On_Commentator__Interrupt_EF11A0C94E01C45AE1EBBA9706A71172
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_StateEntryNode_CE8569C4496979BF55C260AC176B57F1_Play_On_Commentator__Interrupt_EF11A0C94E01C45AE1EBBA9706A71172();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_StateEntryNode_CE8569C4496979BF55C260AC176B57F1_Play_On_Commentator_85545BBD4C98BA4C60427E8A68AD49F9
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_StateEntryNode_CE8569C4496979BF55C260AC176B57F1_Play_On_Commentator_85545BBD4C98BA4C60427E8A68AD49F9();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_StateEntryNode_CE8569C4496979BF55C260AC176B57F1_Did_we_interrupt_PlayerHasLotsOfCash__C35FFCEB4F707CA0D6E892AC78A3C13A
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_StateEntryNode_CE8569C4496979BF55C260AC176B57F1_Did_we_interrupt_PlayerHasLotsOfCash__C35FFCEB4F707CA0D6E892AC78A3C13A();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::SMGraphK2Node_GraphPropertyNode_CE8569C4496979BF55C260AC176B57F1_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrab_PlayerEliminated_Large.DSM_CashGrab_PlayerEliminated_Large_C.ExecuteUbergraph_DSM_CashGrab_PlayerEliminated_Large
// Offset::0x3D30810;
void FDSM_CashGrab_PlayerEliminated_Large_C::ExecuteUbergraph_DSM_CashGrab_PlayerEliminated_Large(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FDialogueInterruptInfo CallFunc_GetInterruptInfo_Info,bool CallFunc_GetInterruptInfo_bIsValid,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,bool CallFunc_MatchesTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,bool CallFunc_BooleanAND_ReturnValue);


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_StateEntryNode_FAB73C5548CB947FBBD7CE8E46129F2C_Wait_56BE330D43E419D7F5C76286BBD85C8D
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_StateEntryNode_FAB73C5548CB947FBBD7CE8E46129F2C_Wait_56BE330D43E419D7F5C76286BBD85C8D();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_StateEntryNode_FAB73C5548CB947FBBD7CE8E46129F2C_Play_On_Commentator___Interrupt_D302247343A36A7147BEE6B5B691A8F5
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_StateEntryNode_FAB73C5548CB947FBBD7CE8E46129F2C_Play_On_Commentator___Interrupt_D302247343A36A7147BEE6B5B691A8F5();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_StateEntryNode_FAB73C5548CB947FBBD7CE8E46129F2C_Play_On_Commentator_6CD735A64499BC29BA722FBE0A3B50A2
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_StateEntryNode_FAB73C5548CB947FBBD7CE8E46129F2C_Play_On_Commentator_6CD735A64499BC29BA722FBE0A3B50A2();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_StateEntryNode_FAB73C5548CB947FBBD7CE8E46129F2C_Get_Team_Bucket_6A1139ED4915EAD2912F22876F3165A5
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_StateEntryNode_FAB73C5548CB947FBBD7CE8E46129F2C_Get_Team_Bucket_6A1139ED4915EAD2912F22876F3165A5();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_StateEntryNode_FAB73C5548CB947FBBD7CE8E46129F2C_Did_we_interrupt_PlayerHasLotsOfCash__C57061A54B0D11FE81266ABB43CE6FA1
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_StateEntryNode_FAB73C5548CB947FBBD7CE8E46129F2C_Did_we_interrupt_PlayerHasLotsOfCash__C57061A54B0D11FE81266ABB43CE6FA1();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::SMGraphK2Node_GraphPropertyNode_FAB73C5548CB947FBBD7CE8E46129F2C_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrab_TransferComplete_Large.DSM_CashGrab_TransferComplete_Large_C.ExecuteUbergraph_DSM_CashGrab_TransferComplete_Large
// Offset::0x3D30810;
void FDSM_CashGrab_TransferComplete_Large_C::ExecuteUbergraph_DSM_CashGrab_TransferComplete_Large(int32_t EntryPoint,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FDialogueInterruptInfo CallFunc_GetInterruptInfo_Info,bool CallFunc_GetInterruptInfo_bIsValid,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,bool CallFunc_MatchesTag_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::SMGraphK2Node_GraphPropertyNode_1D56120E4836F5CE918480A00FF9F52F_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.GetWeatherBucket
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::GetWeatherBucket(FDialogueStateMachineContext* CallFunc_GetDialogueContext_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue);


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.GetVariantBucket
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::GetVariantBucket(FDialogueStateMachineContext* CallFunc_GetDialogueContext_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue);


// Function  DSM_CashGrabMatchIntroduction.DSM_CashGrabMatchIntroduction_C.ExecuteUbergraph_DSM_CashGrabMatchIntroduction
// Offset::0x3D30810;
void FDSM_CashGrabMatchIntroduction_C::ExecuteUbergraph_DSM_CashGrabMatchIntroduction(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,int32_t CallFunc_Array_Length_ReturnValue,int32_t CallFunc_Array_Length_ReturnValue,int32_t CallFunc_Min_ReturnValue,int32_t CallFunc_Subtract_IntInt_ReturnValue,int32_t CallFunc_RandomIntegerInRangeFromStream_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTagContainer CallFunc_GetActiveEventTags_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,bool CallFunc_HasTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTagContainer CallFunc_GetActiveEventTags_ReturnValue,bool CallFunc_DoesContainerMatchTagQuery_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTagContainer CallFunc_GetActiveEventTags_ReturnValue,bool CallFunc_HasTag_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Commentator___Equalizer_in_Final_Round_0DD4421D4F8A4871307A8FB3A7CC0E61
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_Commentator___Equalizer_in_Final_Round_0DD4421D4F8A4871307A8FB3A7CC0E61();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_CoHost___Final_Round_First_Cashout_8C04AE134656918E5D67ED9C2826F647
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_StateEntryNode_4FDCA22B4F9D74891B3A3280BC0A375E_CoHost___Final_Round_First_Cashout_8C04AE134656918E5D67ED9C2826F647();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_DepotComplete_C::SMGraphK2Node_GraphPropertyNode_4FDCA22B4F9D74891B3A3280BC0A375E_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_DepotComplete.DSM_DepotComplete_C.NormalDeposit
// Offset::0x3D30810;
void FDSM_DepotComplete_C::NormalDeposit(FGameplayTag SquadTag,int32_t NewLocalVar,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue);


// Function  DSM_DepotComplete.DSM_DepotComplete_C.ExecuteUbergraph_DSM_DepotComplete
// Offset::0x3D30810;
void FDSM_DepotComplete_C::ExecuteUbergraph_DSM_DepotComplete(int32_t EntryPoint,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,int32_t CallFunc_RandomInteger_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,int32_t CallFunc_Conv_BoolToInt_ReturnValue,int32_t CallFunc_Conv_BoolToInt_ReturnValue,int32_t CallFunc_Multiply_IntInt_ReturnValue,int32_t CallFunc_Add_IntInt_ReturnValue,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,int32_t Temp_int_Variable,FGameplayTag K2Node_Select_Default,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,int32_t Temp_int_Variable,bool CallFunc_HasTag_ReturnValue,FGameplayTag Temp_struct_Variable,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,int32_t CallFunc_Add_IntInt_ReturnValue,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,bool CallFunc_DepositsInARow_Success,bool CallFunc_MatchesTag_ReturnValue,FGameplayTag Temp_struct_Variable,FBP_DialogueSwitchInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Switch_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,int32_t Temp_int_Variable,FGameplayTag K2Node_Select_Default);


// Function  DSM_DepotComplete.DSM_DepotComplete_C.DepositsInARow
// Offset::0x3D30810;
void FDSM_DepotComplete_C::DepositsInARow(FGameplayTag SquadTag,bool Success,int32_t Temp_int_Variable,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,bool CallFunc_Greater_IntInt_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FGameplayTag K2Node_Select_Default);


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Is_First_Deposit__021FE1A048B57F26C49CC58090A2F595
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Is_First_Deposit__021FE1A048B57F26C49CC58090A2F595();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Is_First_Depist_AND_Throw__084DBB8A4C0CC2737BE7A8A8E0DE9BE0
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Is_First_Depist_AND_Throw__084DBB8A4C0CC2737BE7A8A8E0DE9BE0();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Is_Final_Round__A7852E05480F5DA7F4F2E2A3DDCDD78D
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Is_Final_Round__A7852E05480F5DA7F4F2E2A3DDCDD78D();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Init_Variables_F26DE2C84B878B7EC4B2ACB263BFCC26
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Init_Variables_F26DE2C84B878B7EC4B2ACB263BFCC26();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Commentator___Leading_Team_Starts_Cashout_in_Final_Round_C3F049414C64A3346D21ED9FF5BD1A35
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Commentator___Leading_Team_Starts_Cashout_in_Final_Round_C3F049414C64A3346D21ED9FF5BD1A35();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Commentator___Cash_out_Started_13B6C6BB47F503689F927B8F0A84474E
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_StateEntryNode_E8E510814095C848482ADF802CC0E30A_Commentator___Cash_out_Started_13B6C6BB47F503689F927B8F0A84474E();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotStarted_C::SMGraphK2Node_GraphPropertyNode_E8E510814095C848482ADF802CC0E30A_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotStarted.DSM_DepotStarted_C.ExecuteUbergraph_DSM_DepotStarted
// Offset::0x3D30810;
void FDSM_DepotStarted_C::ExecuteUbergraph_DSM_DepotStarted(int32_t EntryPoint,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,int32_t CallFunc_RandomInteger_ReturnValue,FGameplayTagContainer CallFunc_GetActiveEventTags_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_HasTag_ReturnValue,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag Temp_struct_Variable,bool CallFunc_MatchesTag_ReturnValue,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,int32_t Temp_int_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,int32_t Temp_int_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FGameplayTag K2Node_Select_Default,FGameplayTag K2Node_Select_Default,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_What_Team__2B8C16A9436A73B067F0839339C3B876
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_What_Team__2B8C16A9436A73B067F0839339C3B876();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_Wait_8C47F621484334BA542B9FA6BF962621
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_Wait_8C47F621484334BA542B9FA6BF962621();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_Is_Final_Round_80854E0642F92F3AF58412A87DAD3260
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_Is_Final_Round_80854E0642F92F3AF58412A87DAD3260();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_Determine_Final_Round_Variation_Combination_8D5EAB7A4F62A7EB095D08B06800F760
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_Determine_Final_Round_Variation_Combination_8D5EAB7A4F62A7EB095D08B06800F760();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_Commentator___Depot_Stolen_Final_Round_7BE133FB48D84D8E0D5A55B1E9B00545
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_Commentator___Depot_Stolen_Final_Round_7BE133FB48D84D8E0D5A55B1E9B00545();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_Commentator___Depot_Stolen_AE1FF8D0456B09CB324A82A634FB4DED
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_Commentator___Depot_Stolen_AE1FF8D0456B09CB324A82A634FB4DED();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_CoHost___Depot_Stolen_Generic_Answer_CA65B1BE4837BD71193A60B7A47B9FC7
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_CoHost___Depot_Stolen_Generic_Answer_CA65B1BE4837BD71193A60B7A47B9FC7();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_CoHost___Depot_Stolen_Final_Round_Answer_D7FF0A4542D152ECE37496844F46D48F
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_StateEntryNode_57A2237E4C35DEC31E741E8672CB2986_CoHost___Depot_Stolen_Final_Round_Answer_D7FF0A4542D152ECE37496844F46D48F();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_DepotStolen_C::SMGraphK2Node_GraphPropertyNode_57A2237E4C35DEC31E741E8672CB2986_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_DepotStolen.DSM_DepotStolen_C.ExecuteUbergraph_DSM_DepotStolen
// Offset::0x3D30810;
void FDSM_DepotStolen_C::ExecuteUbergraph_DSM_DepotStolen(int32_t EntryPoint,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,bool CallFunc_IsFinal_ReturnValue,int32_t Temp_int_Variable,int32_t CallFunc_RandomInteger_ReturnValue,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,int32_t Temp_int_Variable,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag K2Node_Select_Default,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FDialogueStateMachineContext* CallFunc_GetDialogueContext_ReturnValue,FGameplayTag Temp_struct_Variable,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,int32_t CallFunc_GetGameplayTagIndex_ReturnValue,TMap<FGameplayTag,FGameplayTag> K2Node_Select_Default,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FGameplayTag Temp_struct_Variable,int32_t Temp_int_Variable,FGameplayTag K2Node_Select_Default,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_StateEntryNode_1EA3BD504D5E518D8D286CB5D00FF2DA_What_team__282390AB42178CE781A5A5AF112D81C6
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_StateEntryNode_1EA3BD504D5E518D8D286CB5D00FF2DA_What_team__282390AB42178CE781A5A5AF112D81C6();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_StateEntryNode_1EA3BD504D5E518D8D286CB5D00FF2DA_Wait_197F760F47876237C94A61B00E1860AD
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_StateEntryNode_1EA3BD504D5E518D8D286CB5D00FF2DA_Wait_197F760F47876237C94A61B00E1860AD();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_StateEntryNode_1EA3BD504D5E518D8D286CB5D00FF2DA_End_84574F6A41461F2BA43297BF6AC9C3D2
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_StateEntryNode_1EA3BD504D5E518D8D286CB5D00FF2DA_End_84574F6A41461F2BA43297BF6AC9C3D2();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_StateEntryNode_1EA3BD504D5E518D8D286CB5D00FF2DA_Dont_Play_If_Bank_It_511A334E49DDFE18328B2387C63DEB74
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_StateEntryNode_1EA3BD504D5E518D8D286CB5D00FF2DA_Dont_Play_If_Bank_It_511A334E49DDFE18328B2387C63DEB74();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_StateEntryNode_1EA3BD504D5E518D8D286CB5D00FF2DA_Commentator___Respawn_95C6686B488649388FF8B9A6D0CDD43B
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_StateEntryNode_1EA3BD504D5E518D8D286CB5D00FF2DA_Commentator___Respawn_95C6686B488649388FF8B9A6D0CDD43B();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_HasRespawned_C::SMGraphK2Node_GraphPropertyNode_1EA3BD504D5E518D8D286CB5D00FF2DA_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_HasRespawned.DSM_HasRespawned_C.ExecuteUbergraph_DSM_HasRespawned
// Offset::0x3D30810;
void FDSM_HasRespawned_C::ExecuteUbergraph_DSM_HasRespawned(int32_t EntryPoint,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Commentator___Lead_Taken_Final_F981C6BB47689EE8F92B86BD53895A53
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Commentator___Lead_Taken_Final_F981C6BB47689EE8F92B86BD53895A53();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Commentator___Danger_Of_Knockout_A9A0327D42ED79CEB22E739024CC1B98
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Commentator___Danger_Of_Knockout_A9A0327D42ED79CEB22E739024CC1B98();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_CoHost___Comeback_D9830E7D4E0980AB495CAB8D2967C588
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_CoHost___Comeback_D9830E7D4E0980AB495CAB8D2967C588();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Clear_Commentator_Queue_A33D869F4DB8A4DF0EBE2294AE67DA5F
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_StateEntryNode_FA4D05C0445A3359219A9093CCD9BA03_Clear_Commentator_Queue_A33D869F4DB8A4DF0EBE2294AE67DA5F();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::SMGraphK2Node_GraphPropertyNode_FA4D05C0445A3359219A9093CCD9BA03_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_LeadTakenCommentator.DSM_LeadTakenCommentator_C.ExecuteUbergraph_DSM_LeadTakenCommentator
// Offset::0x3D30810;
void FDSM_LeadTakenCommentator_C::ExecuteUbergraph_DSM_LeadTakenCommentator(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,bool CallFunc_IsActiveTournament_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FBP_DialogueSwitchInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Switch_Instance,bool K2Node_DynamicCast_bSuccess,bool CallFunc_IsGameplayTagValid_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_HasTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,bool CallFunc_HasTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,int32_t CallFunc_GetGameplayTagIndex_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,bool CallFunc_HasTag_ReturnValue,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_Switch_on_map_name_505B76A8431C0F3251ED44A094ACD090
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_Switch_on_map_name_505B76A8431C0F3251ED44A094ACD090();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_LocalWelcomeSkyway_4BCDDE53434CF4B0C52614B84560AA06
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_LocalWelcomeSkyway_4BCDDE53434CF4B0C52614B84560AA06();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_LocalWelcomeSeoul_F1EA515D4700B3E3EA72ECB068C924D8
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_LocalWelcomeSeoul_F1EA515D4700B3E3EA72ECB068C924D8();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_LocalWelcomeMonaco_B0E3DFFF4D1B06DA5A8730A244510C2D
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_LocalWelcomeMonaco_B0E3DFFF4D1B06DA5A8730A244510C2D();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_IsFinalRoundOnMonaco__ED39D8604ECC767FAA0313A84E1B5A7E
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_IsFinalRoundOnMonaco__ED39D8604ECC767FAA0313A84E1B5A7E();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_IsFinalRoundOnKorea__C846D64C44318347BEFA05828A933435
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_IsFinalRoundOnKorea__C846D64C44318347BEFA05828A933435();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_AnnouncerKnockoutRoundOnMonaco_1FE019F048A1CB38BBB909A364838B72
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_AnnouncerKnockoutRoundOnMonaco_1FE019F048A1CB38BBB909A364838B72();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_AnnouncerFinalRoundOnMonaco_4C345A85457D6F9AFF8C4CB063FFA0F5
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_AnnouncerFinalRoundOnMonaco_4C345A85457D6F9AFF8C4CB063FFA0F5();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_Announcer___KnockoutOnKorea_8223D68944D5DE44B08ECE91C15544C1
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_Announcer___KnockoutOnKorea_8223D68944D5DE44B08ECE91C15544C1();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_Announcer___FinalRoundOnKorea_B3115A924C3C7A072877469AB6CD72AC
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_StateEntryNode_5D82D0BB4F3314C9CB20CBB3725D4A34_Announcer___FinalRoundOnKorea_B3115A924C3C7A072877469AB6CD72AC();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_D8D122E11884EA2DFA57CC200A9F947B
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_D8D122E11884EA2DFA57CC200A9F947B();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_D8D122E11884EA2DFA57CC200A9F947B
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_D8D122E11884EA2DFA57CC200A9F947B();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_D8D122E11884EA2DFA57CC200A9F947B
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_D8D122E11884EA2DFA57CC200A9F947B();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_5F9B942E651394D5B53EB05F21FF4BCA
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_5F9B942E651394D5B53EB05F21FF4BCA();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_5F9B942E651394D5B53EB05F21FF4BCA
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_5F9B942E651394D5B53EB05F21FF4BCA();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_5F9B942E651394D5B53EB05F21FF4BCA
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_5F9B942E651394D5B53EB05F21FF4BCA();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::SMGraphK2Node_GraphPropertyNode_5D82D0BB4F3314C9CB20CBB3725D4A34_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_LocalWelcome.DSM_LocalWelcome_C.ExecuteUbergraph_DSM_LocalWelcome
// Offset::0x3D30810;
void FDSM_LocalWelcome_C::ExecuteUbergraph_DSM_LocalWelcome(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FDialogueStateMachineContext* CallFunc_GetDialogueContext_ReturnValue,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,TArray<FGameplayTag> K2Node_MakeArray_Array,int32_t CallFunc_GetGameplayTagIndex_ReturnValue,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,bool CallFunc_HasTag_ReturnValue,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogueAsset_Announcer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue_Asset_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogueAsset_Announcer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue_Asset_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogueAsset_Announcer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue_Asset_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogueAsset_Announcer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue_Asset_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogueAsset_Announcer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue_Asset_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogueAsset_Announcer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue_Asset_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,bool CallFunc_HasTag_ReturnValue,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueSwitchInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Switch_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::SMGraphK2Node_GraphPropertyNode_E42208F24E0311678BAF409B3D1957BE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.GetWeatherBucket
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::GetWeatherBucket(FDialogueStateMachineContext* CallFunc_GetDialogueContext_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue);


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.GetVariantBucket
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::GetVariantBucket(FDialogueStateMachineContext* CallFunc_GetDialogueContext_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue);


// Function  DSM_MapIntroduction.DSM_MapIntroduction_C.ExecuteUbergraph_DSM_MapIntroduction
// Offset::0x3D30810;
void FDSM_MapIntroduction_C::ExecuteUbergraph_DSM_MapIntroduction(int32_t EntryPoint,TArray<FGameplayTag> K2Node_MakeArray_Array,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,int32_t CallFunc_GetGameplayTagIndex_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,int32_t CallFunc_Array_Length_ReturnValue,int32_t CallFunc_Array_Length_ReturnValue,int32_t CallFunc_Min_ReturnValue,int32_t CallFunc_Subtract_IntInt_ReturnValue,int32_t CallFunc_RandomIntegerInRangeFromStream_ReturnValue,bool CallFunc_HasTag_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTagContainer CallFunc_GetActiveEventTags_ReturnValue,bool CallFunc_DoesContainerMatchTagQuery_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,int32_t CallFunc_RandomInteger_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FDialogueStateMachineContext* CallFunc_GetDialogueContext_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,TArray<FGameplayTag> K2Node_MakeArray_Array,FGameplayTag Temp_struct_Variable,int32_t CallFunc_GetGameplayTagIndex_ReturnValue,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,int32_t Temp_int_Variable,FGameplayTag K2Node_Select_Default,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueSwitchInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Switch_Instance,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,int32_t Temp_int_Variable,FGameplayTag K2Node_Select_Default,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueSwitchInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Switch_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FGameplayTagContainer CallFunc_GetActiveEventTags_ReturnValue,FGameplayTagContainer CallFunc_MakeLiteralGameplayTagContainer_ReturnValue,bool CallFunc_HasAllTags_ReturnValue);


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_What_Map_987ABF3F4A59000A56FBE3942DDC1271
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_What_Map_987ABF3F4A59000A56FBE3942DDC1271();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Wait_952B25F240F5E1C332B29AAF0AE9CACF
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Wait_952B25F240F5E1C332B29AAF0AE9CACF();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Wait_1_526BF8E4426A158B45BB2DAA90D4424A
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Wait_1_526BF8E4426A158B45BB2DAA90D4424A();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Set_HasTriggered_BCF195F340E76CCC37A1F681BC956AAC
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Set_HasTriggered_BCF195F340E76CCC37A1F681BC956AAC();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Is_Final_Round_444768C34DE3AA9F72CD10BEB2D29479
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Is_Final_Round_444768C34DE3AA9F72CD10BEB2D29479();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Commentator___Tournament_Intro_Video_E0DC33414A82BD1B35CE1DAB7003EEDC
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Commentator___Tournament_Intro_Video_E0DC33414A82BD1B35CE1DAB7003EEDC();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Commentator___Final_Intro_Video_Map_Agnostic_C0D29CA04D4F2CF414FE81A41ECCD16E
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_StateEntryNode_B7B744FB401903E942FF27BCDD796F84_Commentator___Final_Intro_Video_Map_Agnostic_C0D29CA04D4F2CF414FE81A41ECCD16E();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::SMGraphK2Node_GraphPropertyNode_B7B744FB401903E942FF27BCDD796F84_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.ExecuteUbergraph_DSM_MapIntroVideo
// Offset::0x3D30810;
void FDSM_MapIntroVideo_C::ExecuteUbergraph_DSM_MapIntroVideo(int32_t EntryPoint,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,bool CallFunc_IsValid_ReturnValue,bool CallFunc_IsFinal_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_MapIntroVideo.DSM_MapIntroVideo_C.CheckPrerequisites
// Offset::0x3D30810;
bool FDSM_MapIntroVideo_C::CheckPrerequisites(FDialogueSMRequest Request);


// Function  DSM_OnePlayerLeftInSquad.DSM_OnePlayerLeftInSquad_C.SMGraphK2Node_StateEntryNode_B5F5F43545F548E5A78EA09B27BBF150_What_Team__AAF7ECD4450299978EE3B9A0F266E1F7
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInSquad_C::SMGraphK2Node_StateEntryNode_B5F5F43545F548E5A78EA09B27BBF150_What_Team__AAF7ECD4450299978EE3B9A0F266E1F7();


// Function  DSM_OnePlayerLeftInSquad.DSM_OnePlayerLeftInSquad_C.SMGraphK2Node_StateEntryNode_B5F5F43545F548E5A78EA09B27BBF150_End_E3AB72E14CA720239A0A0783103E73EE
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInSquad_C::SMGraphK2Node_StateEntryNode_B5F5F43545F548E5A78EA09B27BBF150_End_E3AB72E14CA720239A0A0783103E73EE();


// Function  DSM_OnePlayerLeftInSquad.DSM_OnePlayerLeftInSquad_C.SMGraphK2Node_StateEntryNode_B5F5F43545F548E5A78EA09B27BBF150_Dont_Play_If_Bank_It_B21E4A0A4B7D0A5602474C8D645A6E21
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInSquad_C::SMGraphK2Node_StateEntryNode_B5F5F43545F548E5A78EA09B27BBF150_Dont_Play_If_Bank_It_B21E4A0A4B7D0A5602474C8D645A6E21();


// Function  DSM_OnePlayerLeftInSquad.DSM_OnePlayerLeftInSquad_C.SMGraphK2Node_StateEntryNode_B5F5F43545F548E5A78EA09B27BBF150_Announcer___One_Player_Left_In_Squad_F50ABB1B466A739E6BC3889B66075C68
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInSquad_C::SMGraphK2Node_StateEntryNode_B5F5F43545F548E5A78EA09B27BBF150_Announcer___One_Player_Left_In_Squad_F50ABB1B466A739E6BC3889B66075C68();


// Function  DSM_OnePlayerLeftInSquad.DSM_OnePlayerLeftInSquad_C.SMGraphK2Node_GraphPropertyNode_B5F5F43545F548E5A78EA09B27BBF150_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInSquad_C::SMGraphK2Node_GraphPropertyNode_B5F5F43545F548E5A78EA09B27BBF150_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_OnePlayerLeftInSquad.DSM_OnePlayerLeftInSquad_C.SMGraphK2Node_GraphPropertyNode_B5F5F43545F548E5A78EA09B27BBF150_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInSquad_C::SMGraphK2Node_GraphPropertyNode_B5F5F43545F548E5A78EA09B27BBF150_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_OnePlayerLeftInSquad.DSM_OnePlayerLeftInSquad_C.SMGraphK2Node_GraphPropertyNode_B5F5F43545F548E5A78EA09B27BBF150_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInSquad_C::SMGraphK2Node_GraphPropertyNode_B5F5F43545F548E5A78EA09B27BBF150_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_OnePlayerLeftInSquad.DSM_OnePlayerLeftInSquad_C.SMGraphK2Node_GraphPropertyNode_B5F5F43545F548E5A78EA09B27BBF150_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInSquad_C::SMGraphK2Node_GraphPropertyNode_B5F5F43545F548E5A78EA09B27BBF150_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_OnePlayerLeftInSquad.DSM_OnePlayerLeftInSquad_C.ExecuteUbergraph_DSM_OnePlayerLeftInSquad
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInSquad_C::ExecuteUbergraph_DSM_OnePlayerLeftInSquad(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_StateEntryNode_38E2DDCB46F6117F47D500847DCA458C_Wait_7D686B034627B374783D0ABF9A61C4E7
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_StateEntryNode_38E2DDCB46F6117F47D500847DCA458C_Wait_7D686B034627B374783D0ABF9A61C4E7();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_StateEntryNode_38E2DDCB46F6117F47D500847DCA458C_Play_On_Commentator_1FD827234A1EFD93F12A849AD8932A31
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_StateEntryNode_38E2DDCB46F6117F47D500847DCA458C_Play_On_Commentator_1FD827234A1EFD93F12A849AD8932A31();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_StateEntryNode_38E2DDCB46F6117F47D500847DCA458C_Logic_State_C018F8754A3ECBC99CD7A186183AAA5C
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_StateEntryNode_38E2DDCB46F6117F47D500847DCA458C_Logic_State_C018F8754A3ECBC99CD7A186183AAA5C();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_StateEntryNode_38E2DDCB46F6117F47D500847DCA458C_End_239F83A24FF8425D483FE191EE0428BD
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_StateEntryNode_38E2DDCB46F6117F47D500847DCA458C_End_239F83A24FF8425D483FE191EE0428BD();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_StateEntryNode_38E2DDCB46F6117F47D500847DCA458C_Dont_Play_If_Bank_It_847671744B5A800E6DBF1B891E6FF081
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_StateEntryNode_38E2DDCB46F6117F47D500847DCA458C_Dont_Play_If_Bank_It_847671744B5A800E6DBF1B891E6FF081();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::SMGraphK2Node_GraphPropertyNode_38E2DDCB46F6117F47D500847DCA458C_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_OnePlayerLeftInTeamCommentator.DSM_OnePlayerLeftInTeamCommentator_C.ExecuteUbergraph_DSM_OnePlayerLeftInTeamCommentator
// Offset::0x3D30810;
void FDSM_OnePlayerLeftInTeamCommentator_C::ExecuteUbergraph_DSM_OnePlayerLeftInTeamCommentator(int32_t EntryPoint,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Switch_On_Intent_2451B1E1482CC61A9EF6CBA127A1A47A
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Switch_On_Intent_2451B1E1482CC61A9EF6CBA127A1A47A();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Play_On_Instigator_439CBF7C4C4ED775763B0DA55453DCDF
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Play_On_Instigator_439CBF7C4C4ED775763B0DA55453DCDF();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Is_Objective_Ping__BD007F5B40E11282BABEEEBA5A70516B
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Is_Objective_Ping__BD007F5B40E11282BABEEEBA5A70516B();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Is_Callout__5E621094451872AF4F32E7A7F947F5B9
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Is_Callout__5E621094451872AF4F32E7A7F947F5B9();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Generic_Ping_59006BFD49B11598F780858E26C664BE
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Generic_Ping_59006BFD49B11598F780858E26C664BE();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Contextual_Ping_51685C9043DB70D70B67319FB3B2BE2F
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Contextual_Ping_51685C9043DB70D70B67319FB3B2BE2F();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Callouts_101846CD4ED844E4D2E9F7BCE92C7583
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_StateEntryNode_9F6A1D8348383A11D137F1B9CC640613_Callouts_101846CD4ED844E4D2E9F7BCE92C7583();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_GraphPropertyNode_9F6A1D8348383A11D137F1B9CC640613_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_GraphPropertyNode_9F6A1D8348383A11D137F1B9CC640613_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_GraphPropertyNode_9F6A1D8348383A11D137F1B9CC640613_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_GraphPropertyNode_9F6A1D8348383A11D137F1B9CC640613_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_GraphPropertyNode_9F6A1D8348383A11D137F1B9CC640613_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_GraphPropertyNode_9F6A1D8348383A11D137F1B9CC640613_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_GraphPropertyNode_9F6A1D8348383A11D137F1B9CC640613_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_GraphPropertyNode_9F6A1D8348383A11D137F1B9CC640613_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_Ping.DSM_Ping_C.SMGraphK2Node_GraphPropertyNode_9F6A1D8348383A11D137F1B9CC640613_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_Ping_C::SMGraphK2Node_GraphPropertyNode_9F6A1D8348383A11D137F1B9CC640613_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_Ping.DSM_Ping_C.OnStateMachineInitialized
// Offset::0x3D30810;
void FDSM_Ping_C::OnStateMachineInitialized();


// Function  DSM_Ping.DSM_Ping_C.ExecuteUbergraph_DSM_Ping
// Offset::0x3D30810;
void FDSM_Ping_C::ExecuteUbergraph_DSM_Ping(int32_t EntryPoint,FGameplayTagContainer CallFunc_GetActiveEventTags_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,FGameplayTag CallFunc_GetIntentTag_ReturnValue,int32_t CallFunc_GetGameplayTagIndex_ReturnValue,int32_t CallFunc_Add_IntInt_ReturnValue,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueSwitchInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Switch_Instance,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FEmbarkSquad* CallFunc_GetPingerSquad_ReturnValue,FGameplayTag CallFunc_GetObjectTag_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FActor* CallFunc_GetPingedActor_ReturnValue,FGameplayTag CallFunc_GetObjectivePingBucket_ReturnValue,bool CallFunc_IsGameplayTagValid_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetObjectTag_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FActor* CallFunc_GetPingedActor_ReturnValue,FGameplayTag CallFunc_GetFriendlyPlayerPingBucket_ReturnValue,bool CallFunc_WasFriendlyPlayerPinged_ReturnValue,FDialogueBucketQueryArray CallFunc_GetContextualPingBuckets_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_Wait_FDD25C4B457584F6F5887287D4F7017B
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_Wait_FDD25C4B457584F6F5887287D4F7017B();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_How_Many_Vaults__F1A8B93747FF54E5367ACE87ACA267FD
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_How_Many_Vaults__F1A8B93747FF54E5367ACE87ACA267FD();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_End_4634746D42EB4E4BAFBD27B9E112C818
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_End_4634746D42EB4E4BAFBD27B9E112C818();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_Dont_Play_If_Bank_It_Solo_0CD873194AB1E3B0B96783863267CA48
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_Dont_Play_If_Bank_It_Solo_0CD873194AB1E3B0B96783863267CA48();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_Do_Not_Play_If_First_Time_12F1E70F47C41AC12E38108FF48B5D43
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_Do_Not_Play_If_First_Time_12F1E70F47C41AC12E38108FF48B5D43();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_Commentator___NewVault_or_NewVaults_115A1890403BAD7F891FB3B7F477A778
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_StateEntryNode_3218FCAE4539AEE1E05113A7956D4CCE_Commentator___NewVault_or_NewVaults_115A1890403BAD7F891FB3B7F477A778();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_EE1C67CA2053DD2014BBE98E07F4DAA2
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_EE1C67CA2053DD2014BBE98E07F4DAA2();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_EABD6AE9AFFFF4B2638CD7CDB02EA899
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_EABD6AE9AFFFF4B2638CD7CDB02EA899();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_74660C22CD0AEF078FA6959D621FE88F
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_74660C22CD0AEF078FA6959D621FE88F();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_019E79EF9D0F456CB0D3000642B484AA
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::SMGraphK2Node_GraphPropertyNode_3218FCAE4539AEE1E05113A7956D4CCE_019E79EF9D0F456CB0D3000642B484AA();


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.ExecuteUbergraph_DSM_RevealedVaults
// Offset::0x3D30810;
void FDSM_RevealedVaults_C::ExecuteUbergraph_DSM_RevealedVaults(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,bool CallFunc_MatchesTag_ReturnValue,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_RevealedVaults.DSM_RevealedVaults_C.CheckPrerequisites
// Offset::0x3D30810;
bool FDSM_RevealedVaults_C::CheckPrerequisites(FDialogueSMRequest Request);


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_Wait_CEB2211B4B2AD4E7F267D7BAE4A89F40
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_Wait_CEB2211B4B2AD4E7F267D7BAE4A89F40();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_Trigger_Announcer_Squad_Wipe_47A5D6DD4E3685D8566228A643E77456
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_Trigger_Announcer_Squad_Wipe_47A5D6DD4E3685D8566228A643E77456();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_Play_less_often_if_Bankit_2EDC007147C713AAEC5D09BDC406A6CF
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_Play_less_often_if_Bankit_2EDC007147C713AAEC5D09BDC406A6CF();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_Only_Play_If_Tournament_CCBDA4B64CBB5B9748E8E1A5A38E0B42
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_Only_Play_If_Tournament_CCBDA4B64CBB5B9748E8E1A5A38E0B42();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_Commentator___Squad_Wiped_679E6CB04452AED115009F896E79FC14
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_Commentator___Squad_Wiped_679E6CB04452AED115009F896E79FC14();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_CoHost___Squad_Wiped_Answer_5845E1F145AD8190C22E5A97F3654531
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_CoHost___Squad_Wiped_Answer_5845E1F145AD8190C22E5A97F3654531();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_CoHost___Explain_Team_Wipe_Consequences_F02DCC184D114A37C3808FBCFBD6A142
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_StateEntryNode_BBDFCF4746A2777F4C6BD38293E57176_CoHost___Explain_Team_Wipe_Consequences_F02DCC184D114A37C3808FBCFBD6A142();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_EE1C67CA2053DD2014BBE98E07F4DAA2
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_EE1C67CA2053DD2014BBE98E07F4DAA2();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_EABD6AE9AFFFF4B2638CD7CDB02EA899
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_EABD6AE9AFFFF4B2638CD7CDB02EA899();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_74660C22CD0AEF078FA6959D621FE88F
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_74660C22CD0AEF078FA6959D621FE88F();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_019E79EF9D0F456CB0D3000642B484AA
// Offset::0x3D30810;
void FDSM_SquadWiped_C::SMGraphK2Node_GraphPropertyNode_BBDFCF4746A2777F4C6BD38293E57176_019E79EF9D0F456CB0D3000642B484AA();


// Function  DSM_SquadWiped.DSM_SquadWiped_C.ExecuteUbergraph_DSM_SquadWiped
// Offset::0x3D30810;
void FDSM_SquadWiped_C::ExecuteUbergraph_DSM_SquadWiped(int32_t EntryPoint,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FDialogueTagPair K2Node_MakeStruct_DialogueTagPair,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FDialogueSMRequest K2Node_MakeStruct_DialogueSMRequest,int32_t CallFunc_RequestDialogue_ReturnValue,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_What_Team_Is_Opening_Vault_CDCD00C64FFBE04503C57B90935EA411
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_What_Team_Is_Opening_Vault_CDCD00C64FFBE04503C57B90935EA411();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Wait_5CC900E44A6CBEEF58F2B89E6DE3F01F
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Wait_5CC900E44A6CBEEF58F2B89E6DE3F01F();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Is_BankIt__0896B6264038E97E6F20C68F9803F28F
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Is_BankIt__0896B6264038E97E6F20C68F9803F28F();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Get_Simple_Bucket_925E8A624FC845FBBE67879203D75E0C
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Get_Simple_Bucket_925E8A624FC845FBBE67879203D75E0C();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Get_Bucket_for_Bankit_AA1445B64B984CC3E9B2019FE07FE6AF
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Get_Bucket_for_Bankit_AA1445B64B984CC3E9B2019FE07FE6AF();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Commentator___Vault_Open_Start_Generic_61C61CE5461ACFC5A8FF57937A8EC815
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Commentator___Vault_Open_Start_Generic_61C61CE5461ACFC5A8FF57937A8EC815();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Check_and_store_GameMode_switch_011AEA0A475BE0669B280991F01ED64D
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_StateEntryNode_8BD656DF424D12A3CB97EAA27495BD07_Check_and_store_GameMode_switch_011AEA0A475BE0669B280991F01ED64D();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_EE1C67CA2053DD2014BBE98E07F4DAA2
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_EE1C67CA2053DD2014BBE98E07F4DAA2();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_EABD6AE9AFFFF4B2638CD7CDB02EA899
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_EABD6AE9AFFFF4B2638CD7CDB02EA899();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_74660C22CD0AEF078FA6959D621FE88F
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_74660C22CD0AEF078FA6959D621FE88F();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_019E79EF9D0F456CB0D3000642B484AA
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::SMGraphK2Node_GraphPropertyNode_8BD656DF424D12A3CB97EAA27495BD07_019E79EF9D0F456CB0D3000642B484AA();


// Function  DSM_VaultOpenStart.DSM_VaultOpenStart_C.ExecuteUbergraph_DSM_VaultOpenStart
// Offset::0x3D30810;
void FDSM_VaultOpenStart_C::ExecuteUbergraph_DSM_VaultOpenStart(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetTagForCategory_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,int32_t CallFunc_GetGameplayTagIndex_ReturnValue,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,int32_t CallFunc_Add_IntInt_ReturnValue,int32_t Temp_int_Variable,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,TMap<FGameplayTag,FGameplayTag> K2Node_Select_Default,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueConditionInstance_C* K2Node_DynamicCast_AsBP_Dialogue_Condition_Instance,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_25PercentProgress.DSM_25PercentProgress_C.SMGraphK2Node_StateEntryNode_463E358B41A32E990E0F6B888D9EE244_Logic_State_1059608045C94B14301FDFB21808F07E
// Offset::0x3D30810;
void FDSM_25PercentProgress_C::SMGraphK2Node_StateEntryNode_463E358B41A32E990E0F6B888D9EE244_Logic_State_1059608045C94B14301FDFB21808F07E();


// Function  DSM_25PercentProgress.DSM_25PercentProgress_C.SMGraphK2Node_StateEntryNode_463E358B41A32E990E0F6B888D9EE244_Commentator___25_Percent_Reached_B77F980E47344414D837289B19C612EE
// Offset::0x3D30810;
void FDSM_25PercentProgress_C::SMGraphK2Node_StateEntryNode_463E358B41A32E990E0F6B888D9EE244_Commentator___25_Percent_Reached_B77F980E47344414D837289B19C612EE();


// Function  DSM_25PercentProgress.DSM_25PercentProgress_C.SMGraphK2Node_GraphPropertyNode_463E358B41A32E990E0F6B888D9EE244_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_25PercentProgress_C::SMGraphK2Node_GraphPropertyNode_463E358B41A32E990E0F6B888D9EE244_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_25PercentProgress.DSM_25PercentProgress_C.SMGraphK2Node_GraphPropertyNode_463E358B41A32E990E0F6B888D9EE244_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_25PercentProgress_C::SMGraphK2Node_GraphPropertyNode_463E358B41A32E990E0F6B888D9EE244_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_25PercentProgress.DSM_25PercentProgress_C.SMGraphK2Node_GraphPropertyNode_463E358B41A32E990E0F6B888D9EE244_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_25PercentProgress_C::SMGraphK2Node_GraphPropertyNode_463E358B41A32E990E0F6B888D9EE244_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_25PercentProgress.DSM_25PercentProgress_C.SMGraphK2Node_GraphPropertyNode_463E358B41A32E990E0F6B888D9EE244_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_25PercentProgress_C::SMGraphK2Node_GraphPropertyNode_463E358B41A32E990E0F6B888D9EE244_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_25PercentProgress.DSM_25PercentProgress_C.ExecuteUbergraph_DSM_25PercentProgress
// Offset::0x3D30810;
void FDSM_25PercentProgress_C::ExecuteUbergraph_DSM_25PercentProgress(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_50PercentProgress.DSM_50PercentProgress_C.SMGraphK2Node_StateEntryNode_8B391C8D478DCE79779C9985A97061C4_Logic_State_EC6800C8484D1D9B2D4F408BFDE05930
// Offset::0x3D30810;
void FDSM_50PercentProgress_C::SMGraphK2Node_StateEntryNode_8B391C8D478DCE79779C9985A97061C4_Logic_State_EC6800C8484D1D9B2D4F408BFDE05930();


// Function  DSM_50PercentProgress.DSM_50PercentProgress_C.SMGraphK2Node_StateEntryNode_8B391C8D478DCE79779C9985A97061C4_CoHost___50_Percent_Progress_2B9CB6D84908F464DE6E2589D3061934
// Offset::0x3D30810;
void FDSM_50PercentProgress_C::SMGraphK2Node_StateEntryNode_8B391C8D478DCE79779C9985A97061C4_CoHost___50_Percent_Progress_2B9CB6D84908F464DE6E2589D3061934();


// Function  DSM_50PercentProgress.DSM_50PercentProgress_C.SMGraphK2Node_GraphPropertyNode_8B391C8D478DCE79779C9985A97061C4_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_50PercentProgress_C::SMGraphK2Node_GraphPropertyNode_8B391C8D478DCE79779C9985A97061C4_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_50PercentProgress.DSM_50PercentProgress_C.SMGraphK2Node_GraphPropertyNode_8B391C8D478DCE79779C9985A97061C4_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_50PercentProgress_C::SMGraphK2Node_GraphPropertyNode_8B391C8D478DCE79779C9985A97061C4_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_50PercentProgress.DSM_50PercentProgress_C.SMGraphK2Node_GraphPropertyNode_8B391C8D478DCE79779C9985A97061C4_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_50PercentProgress_C::SMGraphK2Node_GraphPropertyNode_8B391C8D478DCE79779C9985A97061C4_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_50PercentProgress.DSM_50PercentProgress_C.SMGraphK2Node_GraphPropertyNode_8B391C8D478DCE79779C9985A97061C4_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_50PercentProgress_C::SMGraphK2Node_GraphPropertyNode_8B391C8D478DCE79779C9985A97061C4_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_50PercentProgress.DSM_50PercentProgress_C.ExecuteUbergraph_DSM_50PercentProgress
// Offset::0x3D30810;
void FDSM_50PercentProgress_C::ExecuteUbergraph_DSM_50PercentProgress(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_AutoTrigger.DSM_AutoTrigger_C.SMGraphK2Node_StateEntryNode_B9EED929497771CD34FD8F850F329867_PlayDialogue_8DF09A1C49276E767C6D0D8B39609706
// Offset::0x3D30810;
void FDSM_AutoTrigger_C::SMGraphK2Node_StateEntryNode_B9EED929497771CD34FD8F850F329867_PlayDialogue_8DF09A1C49276E767C6D0D8B39609706();


// Function  DSM_AutoTrigger.DSM_AutoTrigger_C.SMGraphK2Node_StateEntryNode_B9EED929497771CD34FD8F850F329867_Find_Bucket_from_Map_0B1421304FA6A1DCA7D298A0605EB0EF
// Offset::0x3D30810;
void FDSM_AutoTrigger_C::SMGraphK2Node_StateEntryNode_B9EED929497771CD34FD8F850F329867_Find_Bucket_from_Map_0B1421304FA6A1DCA7D298A0605EB0EF();


// Function  DSM_AutoTrigger.DSM_AutoTrigger_C.SMGraphK2Node_GraphPropertyNode_B9EED929497771CD34FD8F850F329867_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_AutoTrigger_C::SMGraphK2Node_GraphPropertyNode_B9EED929497771CD34FD8F850F329867_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_AutoTrigger.DSM_AutoTrigger_C.SMGraphK2Node_GraphPropertyNode_B9EED929497771CD34FD8F850F329867_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_AutoTrigger_C::SMGraphK2Node_GraphPropertyNode_B9EED929497771CD34FD8F850F329867_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_AutoTrigger.DSM_AutoTrigger_C.SMGraphK2Node_GraphPropertyNode_B9EED929497771CD34FD8F850F329867_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_AutoTrigger_C::SMGraphK2Node_GraphPropertyNode_B9EED929497771CD34FD8F850F329867_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_AutoTrigger.DSM_AutoTrigger_C.SMGraphK2Node_GraphPropertyNode_B9EED929497771CD34FD8F850F329867_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_AutoTrigger_C::SMGraphK2Node_GraphPropertyNode_B9EED929497771CD34FD8F850F329867_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_AutoTrigger.DSM_AutoTrigger_C.SMGraphK2Node_GraphPropertyNode_B9EED929497771CD34FD8F850F329867_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_AutoTrigger_C::SMGraphK2Node_GraphPropertyNode_B9EED929497771CD34FD8F850F329867_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_AutoTrigger.DSM_AutoTrigger_C.ExecuteUbergraph_DSM_AutoTrigger
// Offset::0x3D30810;
void FDSM_AutoTrigger_C::ExecuteUbergraph_DSM_AutoTrigger(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetObjectTag_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,bool CallFunc_IsGameplayTagValid_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_AutoTrigger.DSM_AutoTrigger_C.CheckPrerequisites
// Offset::0x3D30810;
bool FDSM_AutoTrigger_C::CheckPrerequisites(FDialogueSMRequest Request);


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_StateEntryNode_358C3E8D494DE0FE1DED638DC6BB99E6_Wait_374EB8DB44D46AA449A7F68DB851A767
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_StateEntryNode_358C3E8D494DE0FE1DED638DC6BB99E6_Wait_374EB8DB44D46AA449A7F68DB851A767();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_StateEntryNode_358C3E8D494DE0FE1DED638DC6BB99E6_PlayDialogue_54C2D65C49EAF60A684810AD4C083544
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_StateEntryNode_358C3E8D494DE0FE1DED638DC6BB99E6_PlayDialogue_54C2D65C49EAF60A684810AD4C083544();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_StateEntryNode_358C3E8D494DE0FE1DED638DC6BB99E6_Get_Scotty_and_June_031DDEAE443AB2ADFBC0879FDEE386F7
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_StateEntryNode_358C3E8D494DE0FE1DED638DC6BB99E6_Get_Scotty_and_June_031DDEAE443AB2ADFBC0879FDEE386F7();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_StateEntryNode_358C3E8D494DE0FE1DED638DC6BB99E6_Get_Buckets_272AEAD54EDDA3107D21D89BA39BB624
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_StateEntryNode_358C3E8D494DE0FE1DED638DC6BB99E6_Get_Buckets_272AEAD54EDDA3107D21D89BA39BB624();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_StateEntryNode_358C3E8D494DE0FE1DED638DC6BB99E6_Check_and_store_GameMode_switch_0812D47449D3E4BF7E45A79C3D36A4C3
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_StateEntryNode_358C3E8D494DE0FE1DED638DC6BB99E6_Check_and_store_GameMode_switch_0812D47449D3E4BF7E45A79C3D36A4C3();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_F19F329464824ECFC19C1C85BBBA1878
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_F19F329464824ECFC19C1C85BBBA1878();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_C0E87BED3A8C440D54C1F0487381B037
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_C0E87BED3A8C440D54C1F0487381B037();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_821886401B02B36F1D78B27C283FFA49
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_821886401B02B36F1D78B27C283FFA49();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_02D5906F5425ECAF722F7DA1584049D9
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::SMGraphK2Node_GraphPropertyNode_358C3E8D494DE0FE1DED638DC6BB99E6_02D5906F5425ECAF722F7DA1584049D9();


// Function  DSM_CashGrabAnnounce.DSM_CashGrabAnnounce_C.ExecuteUbergraph_DSM_CashGrabAnnounce
// Offset::0x3D30810;
void FDSM_CashGrabAnnounce_C::ExecuteUbergraph_DSM_CashGrabAnnounce(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FSMNodeInstance* CallFunc_Array_Get_Item,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FSMNodeInstance* CallFunc_Array_Get_Item,FBP_DialogueLogicStateInstance_MakeArray_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Make_Array,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FSMNodeInstance* CallFunc_Array_Get_Item,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FGameplayTagContainer CallFunc_GetActiveEventTags_ReturnValue,bool CallFunc_HasTag_ReturnValue);


// Function  DSM_EarlyLeader.DSM_EarlyLeader_C.SMGraphK2Node_StateEntryNode_F1739B474A4D55B92D2D5CA57549F1C4_Logic_State_58A573384E0159A8659E12A9DE9E588E
// Offset::0x3D30810;
void FDSM_EarlyLeader_C::SMGraphK2Node_StateEntryNode_F1739B474A4D55B92D2D5CA57549F1C4_Logic_State_58A573384E0159A8659E12A9DE9E588E();


// Function  DSM_EarlyLeader.DSM_EarlyLeader_C.SMGraphK2Node_StateEntryNode_F1739B474A4D55B92D2D5CA57549F1C4_Announcer___Early_Leader_7904715B4099C367A01949A7E87A21A1
// Offset::0x3D30810;
void FDSM_EarlyLeader_C::SMGraphK2Node_StateEntryNode_F1739B474A4D55B92D2D5CA57549F1C4_Announcer___Early_Leader_7904715B4099C367A01949A7E87A21A1();


// Function  DSM_EarlyLeader.DSM_EarlyLeader_C.SMGraphK2Node_GraphPropertyNode_F1739B474A4D55B92D2D5CA57549F1C4_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_EarlyLeader_C::SMGraphK2Node_GraphPropertyNode_F1739B474A4D55B92D2D5CA57549F1C4_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_EarlyLeader.DSM_EarlyLeader_C.SMGraphK2Node_GraphPropertyNode_F1739B474A4D55B92D2D5CA57549F1C4_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_EarlyLeader_C::SMGraphK2Node_GraphPropertyNode_F1739B474A4D55B92D2D5CA57549F1C4_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_EarlyLeader.DSM_EarlyLeader_C.SMGraphK2Node_GraphPropertyNode_F1739B474A4D55B92D2D5CA57549F1C4_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_EarlyLeader_C::SMGraphK2Node_GraphPropertyNode_F1739B474A4D55B92D2D5CA57549F1C4_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_EarlyLeader.DSM_EarlyLeader_C.SMGraphK2Node_GraphPropertyNode_F1739B474A4D55B92D2D5CA57549F1C4_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_EarlyLeader_C::SMGraphK2Node_GraphPropertyNode_F1739B474A4D55B92D2D5CA57549F1C4_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_EarlyLeader.DSM_EarlyLeader_C.ExecuteUbergraph_DSM_EarlyLeader
// Offset::0x3D30810;
void FDSM_EarlyLeader_C::ExecuteUbergraph_DSM_EarlyLeader(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_StateEntryNode_DD80987643A25CE355A0B5B4C4586A82_Wait_9DFA1B4E473D6C1FA564A0B601B3FD25
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_StateEntryNode_DD80987643A25CE355A0B5B4C4586A82_Wait_9DFA1B4E473D6C1FA564A0B601B3FD25();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_StateEntryNode_DD80987643A25CE355A0B5B4C4586A82_Set_HasTriggered_E3D110824EBBF978B4CA6BBD4304EED0
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_StateEntryNode_DD80987643A25CE355A0B5B4C4586A82_Set_HasTriggered_E3D110824EBBF978B4CA6BBD4304EED0();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_StateEntryNode_DD80987643A25CE355A0B5B4C4586A82_Logic_State_D8D4F6DA4F6E8624E2FF6CA61E577747
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_StateEntryNode_DD80987643A25CE355A0B5B4C4586A82_Logic_State_D8D4F6DA4F6E8624E2FF6CA61E577747();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_StateEntryNode_DD80987643A25CE355A0B5B4C4586A82_Commentator___Encouragement_9CE64A124F83AFE6E68DB9AFF541570A
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_StateEntryNode_DD80987643A25CE355A0B5B4C4586A82_Commentator___Encouragement_9CE64A124F83AFE6E68DB9AFF541570A();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_StateEntryNode_DD80987643A25CE355A0B5B4C4586A82_CoHost___Encouragement_Answer_D7FBD0364D5471936D8F29B9EF7AD090
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_StateEntryNode_DD80987643A25CE355A0B5B4C4586A82_CoHost___Encouragement_Answer_D7FBD0364D5471936D8F29B9EF7AD090();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_Encouragement.DSM_Encouragement_C.SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_Encouragement_C::SMGraphK2Node_GraphPropertyNode_DD80987643A25CE355A0B5B4C4586A82_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_Encouragement.DSM_Encouragement_C.ExecuteUbergraph_DSM_Encouragement
// Offset::0x3D30810;
void FDSM_Encouragement_C::ExecuteUbergraph_DSM_Encouragement(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,int32_t CallFunc_Array_Length_ReturnValue,int32_t CallFunc_RandomInteger_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_Encouragement.DSM_Encouragement_C.CheckPrerequisites
// Offset::0x3D30810;
bool FDSM_Encouragement_C::CheckPrerequisites(FDialogueSMRequest Request);


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_StateEntryNode_11AF4EE74B4494E19D58088E4FC4F178_Wait_08C48F4F409678019C8D93B16055C355
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_StateEntryNode_11AF4EE74B4494E19D58088E4FC4F178_Wait_08C48F4F409678019C8D93B16055C355();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_StateEntryNode_11AF4EE74B4494E19D58088E4FC4F178_Tag_Filter_93DC4A1A4EFD27266491FEBA0C008FE2
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_StateEntryNode_11AF4EE74B4494E19D58088E4FC4F178_Tag_Filter_93DC4A1A4EFD27266491FEBA0C008FE2();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_StateEntryNode_11AF4EE74B4494E19D58088E4FC4F178_Determine_Winner_and_Runner_up_2A41DF374D2146C2246C60A8ACE35B39
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_StateEntryNode_11AF4EE74B4494E19D58088E4FC4F178_Determine_Winner_and_Runner_up_2A41DF374D2146C2246C60A8ACE35B39();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_StateEntryNode_11AF4EE74B4494E19D58088E4FC4F178_Commentator___Winner_CC6F7F5843F1EE7EB7828FAE59E0A42F
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_StateEntryNode_11AF4EE74B4494E19D58088E4FC4F178_Commentator___Winner_CC6F7F5843F1EE7EB7828FAE59E0A42F();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_StateEntryNode_11AF4EE74B4494E19D58088E4FC4F178_CoHost___Runner_Up_1D65CCE84C33FBADE8F6A1B6C6E0D239
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_StateEntryNode_11AF4EE74B4494E19D58088E4FC4F178_CoHost___Runner_Up_1D65CCE84C33FBADE8F6A1B6C6E0D239();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_F77922121F2FEF9C834B583F6A0AE21B
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_F77922121F2FEF9C834B583F6A0AE21B();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_4057407B20CE351278263AF71B7DBB45
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_4057407B20CE351278263AF71B7DBB45();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_20CD296683AA943F50FE295743EE81F2
// Offset::0x3D30810;
void FDSM_EndOfRound_C::SMGraphK2Node_GraphPropertyNode_11AF4EE74B4494E19D58088E4FC4F178_20CD296683AA943F50FE295743EE81F2();


// Function  DSM_EndOfRound.DSM_EndOfRound_C.ExecuteUbergraph_DSM_EndOfRound
// Offset::0x3D30810;
void FDSM_EndOfRound_C::ExecuteUbergraph_DSM_EndOfRound(int32_t EntryPoint,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FDiscoveryGameState* CallFunc_GetGameState_ReturnValue,bool CallFunc_IsActiveTournament_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,bool Temp_bool_Variable,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FGameplayTag K2Node_Select_Default,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_EndOfRoundTugOfWar.DSM_EndOfRoundTugOfWar_C.SMGraphK2Node_StateEntryNode_15605CEE44A25B1E8682C0B33F94C6A8_What_Team_Has_Won_AFD164C645F7B54375A43B94E81C34CC
// Offset::0x3D30810;
void FDSM_EndOfRoundTugOfWar_C::SMGraphK2Node_StateEntryNode_15605CEE44A25B1E8682C0B33F94C6A8_What_Team_Has_Won_AFD164C645F7B54375A43B94E81C34CC();


// Function  DSM_EndOfRoundTugOfWar.DSM_EndOfRoundTugOfWar_C.SMGraphK2Node_StateEntryNode_15605CEE44A25B1E8682C0B33F94C6A8_Commentator___End_Of_Round_Winner_3C34555E41EA6AC34ED2C98AC3F3796E
// Offset::0x3D30810;
void FDSM_EndOfRoundTugOfWar_C::SMGraphK2Node_StateEntryNode_15605CEE44A25B1E8682C0B33F94C6A8_Commentator___End_Of_Round_Winner_3C34555E41EA6AC34ED2C98AC3F3796E();


// Function  DSM_EndOfRoundTugOfWar.DSM_EndOfRoundTugOfWar_C.SMGraphK2Node_GraphPropertyNode_15605CEE44A25B1E8682C0B33F94C6A8_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_EndOfRoundTugOfWar_C::SMGraphK2Node_GraphPropertyNode_15605CEE44A25B1E8682C0B33F94C6A8_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_EndOfRoundTugOfWar.DSM_EndOfRoundTugOfWar_C.SMGraphK2Node_GraphPropertyNode_15605CEE44A25B1E8682C0B33F94C6A8_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_EndOfRoundTugOfWar_C::SMGraphK2Node_GraphPropertyNode_15605CEE44A25B1E8682C0B33F94C6A8_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_EndOfRoundTugOfWar.DSM_EndOfRoundTugOfWar_C.SMGraphK2Node_GraphPropertyNode_15605CEE44A25B1E8682C0B33F94C6A8_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_EndOfRoundTugOfWar_C::SMGraphK2Node_GraphPropertyNode_15605CEE44A25B1E8682C0B33F94C6A8_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_EndOfRoundTugOfWar.DSM_EndOfRoundTugOfWar_C.SMGraphK2Node_GraphPropertyNode_15605CEE44A25B1E8682C0B33F94C6A8_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_EndOfRoundTugOfWar_C::SMGraphK2Node_GraphPropertyNode_15605CEE44A25B1E8682C0B33F94C6A8_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_EndOfRoundTugOfWar.DSM_EndOfRoundTugOfWar_C.ExecuteUbergraph_DSM_EndOfRoundTugOfWar
// Offset::0x3D30810;
void FDSM_EndOfRoundTugOfWar_C::ExecuteUbergraph_DSM_EndOfRoundTugOfWar(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_StateEntryNode_1FC88DB14A9FD942A9A6538763047025_Wait_7977917F40134E392A14EC8C28ECEA24
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_StateEntryNode_1FC88DB14A9FD942A9A6538763047025_Wait_7977917F40134E392A14EC8C28ECEA24();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_StateEntryNode_1FC88DB14A9FD942A9A6538763047025_Set_HasTriggered_058DF70A4AA44BB90DED969A2556D4EC
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_StateEntryNode_1FC88DB14A9FD942A9A6538763047025_Set_HasTriggered_058DF70A4AA44BB90DED969A2556D4EC();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_StateEntryNode_1FC88DB14A9FD942A9A6538763047025_Commentator_Flavor___StealerKilled_C7AD57D64581E346D56D7EAC1DAF1BFE
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_StateEntryNode_1FC88DB14A9FD942A9A6538763047025_Commentator_Flavor___StealerKilled_C7AD57D64581E346D56D7EAC1DAF1BFE();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_StateEntryNode_1FC88DB14A9FD942A9A6538763047025_Commentator___First_Kill_Answer_6E4E21D54E3C25FD430C5C8BBD13D004
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_StateEntryNode_1FC88DB14A9FD942A9A6538763047025_Commentator___First_Kill_Answer_6E4E21D54E3C25FD430C5C8BBD13D004();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_StateEntryNode_1FC88DB14A9FD942A9A6538763047025__CoHost___First_Kill_BA240B3143A0536EF67515A810EB7F7D
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_StateEntryNode_1FC88DB14A9FD942A9A6538763047025__CoHost___First_Kill_BA240B3143A0536EF67515A810EB7F7D();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_FirstKill.DSM_FirstKill_C.SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_FirstKill_C::SMGraphK2Node_GraphPropertyNode_1FC88DB14A9FD942A9A6538763047025_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_FirstKill.DSM_FirstKill_C.ExecuteUbergraph_DSM_FirstKill
// Offset::0x3D30810;
void FDSM_FirstKill_C::ExecuteUbergraph_DSM_FirstKill(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_FirstKill.DSM_FirstKill_C.CheckPrerequisites
// Offset::0x3D30810;
bool FDSM_FirstKill_C::CheckPrerequisites(FDialogueSMRequest Request);


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_StateEntryNode_55EBCC2F458F9E9D487611B2C99B4DF3_Wait_8E8862BC4125C31176009583AE47C8AE
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_StateEntryNode_55EBCC2F458F9E9D487611B2C99B4DF3_Wait_8E8862BC4125C31176009583AE47C8AE();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_StateEntryNode_55EBCC2F458F9E9D487611B2C99B4DF3_Play_On_Commentator_82DDCAA64CAB1107944DC0916532A3BB
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_StateEntryNode_55EBCC2F458F9E9D487611B2C99B4DF3_Play_On_Commentator_82DDCAA64CAB1107944DC0916532A3BB();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_StateEntryNode_55EBCC2F458F9E9D487611B2C99B4DF3_Play_On_CoHost_B98CB5CC40E6D36D00247B9201ABF4A3
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_StateEntryNode_55EBCC2F458F9E9D487611B2C99B4DF3_Play_On_CoHost_B98CB5CC40E6D36D00247B9201ABF4A3();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_StateEntryNode_55EBCC2F458F9E9D487611B2C99B4DF3_Logic_State_8AAAD6794221EF058F521998730C55DF
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_StateEntryNode_55EBCC2F458F9E9D487611B2C99B4DF3_Logic_State_8AAAD6794221EF058F521998730C55DF();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::SMGraphK2Node_GraphPropertyNode_55EBCC2F458F9E9D487611B2C99B4DF3_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_FlavorEvent_OnePlayerLeftInTeam.DSM_FlavorEvent_OnePlayerLeftInTeam_C.ExecuteUbergraph_DSM_FlavorEvent_OnePlayerLeftInTeam
// Offset::0x3D30810;
void FDSM_FlavorEvent_OnePlayerLeftInTeam_C::ExecuteUbergraph_DSM_FlavorEvent_OnePlayerLeftInTeam(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_StateEntryNode_1DBDCABF4D557199ADB2D9AD76F5CD41_Wait_8F6548FE407DA6D8E1DB3682F138D4D6
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_StateEntryNode_1DBDCABF4D557199ADB2D9AD76F5CD41_Wait_8F6548FE407DA6D8E1DB3682F138D4D6();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_StateEntryNode_1DBDCABF4D557199ADB2D9AD76F5CD41_Tag_Filter_D058AA004F85F7DD15056B89372E38E0
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_StateEntryNode_1DBDCABF4D557199ADB2D9AD76F5CD41_Tag_Filter_D058AA004F85F7DD15056B89372E38E0();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_StateEntryNode_1DBDCABF4D557199ADB2D9AD76F5CD41_PlayDialogue_90682AFE43454242F087F58E8DB1CDFE
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_StateEntryNode_1DBDCABF4D557199ADB2D9AD76F5CD41_PlayDialogue_90682AFE43454242F087F58E8DB1CDFE();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_StateEntryNode_1DBDCABF4D557199ADB2D9AD76F5CD41_Map_buckets_5EBD4F504034F23ACED90AA22FB29556
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_StateEntryNode_1DBDCABF4D557199ADB2D9AD76F5CD41_Map_buckets_5EBD4F504034F23ACED90AA22FB29556();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_F77922121F2FEF9C834B583F6A0AE21B
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_F77922121F2FEF9C834B583F6A0AE21B();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_4057407B20CE351278263AF71B7DBB45
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_4057407B20CE351278263AF71B7DBB45();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_20CD296683AA943F50FE295743EE81F2
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_20CD296683AA943F50FE295743EE81F2();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::SMGraphK2Node_GraphPropertyNode_1DBDCABF4D557199ADB2D9AD76F5CD41_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_FlavorEventGeneric.DSM_FlavorEventGeneric_C.ExecuteUbergraph_DSM_FlavorEventGeneric
// Offset::0x3D30810;
void FDSM_FlavorEventGeneric_C::ExecuteUbergraph_DSM_FlavorEventGeneric(int32_t EntryPoint,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetObjectTag_ReturnValue,FGameplayTag CallFunc_GetSquadTagForCategory_ReturnValue,bool CallFunc_IsGameplayTagValid_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_GameShowEventAlienInvasion.DSM_GameShowEventAlienInvasion_C.SMGraphK2Node_StateEntryNode_14D06CDB4B16784486DC838850F3051A_Wait_1D9F7E2F46BCEAF2CFD646B2E901942A
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasion_C::SMGraphK2Node_StateEntryNode_14D06CDB4B16784486DC838850F3051A_Wait_1D9F7E2F46BCEAF2CFD646B2E901942A();


// Function  DSM_GameShowEventAlienInvasion.DSM_GameShowEventAlienInvasion_C.SMGraphK2Node_StateEntryNode_14D06CDB4B16784486DC838850F3051A_Trigger_Mid_Gameshow_Line_0998FD714A47971C757E2EB0920D8858
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasion_C::SMGraphK2Node_StateEntryNode_14D06CDB4B16784486DC838850F3051A_Trigger_Mid_Gameshow_Line_0998FD714A47971C757E2EB0920D8858();


// Function  DSM_GameShowEventAlienInvasion.DSM_GameShowEventAlienInvasion_C.SMGraphK2Node_StateEntryNode_14D06CDB4B16784486DC838850F3051A_CoHost___Game_Show_Event_AlienInvasion_9A4EC62243B9E0CA126447AF51FB86C0
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasion_C::SMGraphK2Node_StateEntryNode_14D06CDB4B16784486DC838850F3051A_CoHost___Game_Show_Event_AlienInvasion_9A4EC62243B9E0CA126447AF51FB86C0();


// Function  DSM_GameShowEventAlienInvasion.DSM_GameShowEventAlienInvasion_C.SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasion_C::SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventAlienInvasion.DSM_GameShowEventAlienInvasion_C.SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasion_C::SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventAlienInvasion.DSM_GameShowEventAlienInvasion_C.SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasion_C::SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventAlienInvasion.DSM_GameShowEventAlienInvasion_C.SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasion_C::SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventAlienInvasion.DSM_GameShowEventAlienInvasion_C.SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasion_C::SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventAlienInvasion.DSM_GameShowEventAlienInvasion_C.SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasion_C::SMGraphK2Node_GraphPropertyNode_14D06CDB4B16784486DC838850F3051A_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventAlienInvasion.DSM_GameShowEventAlienInvasion_C.ExecuteUbergraph_DSM_GameShowEventAlienInvasion
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasion_C::ExecuteUbergraph_DSM_GameShowEventAlienInvasion(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDialogueTagPair K2Node_MakeStruct_DialogueTagPair,FDialogueSMRequest K2Node_MakeStruct_DialogueSMRequest,int32_t CallFunc_RequestDialogue_ReturnValue);


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.SMGraphK2Node_StateEntryNode_FEC861334B8CB8380B942CB728D68778_Wait_1F6A62B04C52780412061589ACA02C31
// Offset::0x3D30810;
void FDSM_GameShowEventAnnounced_C::SMGraphK2Node_StateEntryNode_FEC861334B8CB8380B942CB728D68778_Wait_1F6A62B04C52780412061589ACA02C31();


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.SMGraphK2Node_StateEntryNode_FEC861334B8CB8380B942CB728D68778_Set_HasTriggered_282F95144DA75CD6661B65B019E1FA31
// Offset::0x3D30810;
void FDSM_GameShowEventAnnounced_C::SMGraphK2Node_StateEntryNode_FEC861334B8CB8380B942CB728D68778_Set_HasTriggered_282F95144DA75CD6661B65B019E1FA31();


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.SMGraphK2Node_StateEntryNode_FEC861334B8CB8380B942CB728D68778_CoHost___Game_Show_Event_Announced_AC91314C44564E16145F8191C19283EB
// Offset::0x3D30810;
void FDSM_GameShowEventAnnounced_C::SMGraphK2Node_StateEntryNode_FEC861334B8CB8380B942CB728D68778_CoHost___Game_Show_Event_Announced_AC91314C44564E16145F8191C19283EB();


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventAnnounced_C::SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventAnnounced_C::SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventAnnounced_C::SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventAnnounced_C::SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventAnnounced_C::SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventAnnounced_C::SMGraphK2Node_GraphPropertyNode_FEC861334B8CB8380B942CB728D68778_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.ExecuteUbergraph_DSM_GameShowEventAnnounced
// Offset::0x3D30810;
void FDSM_GameShowEventAnnounced_C::ExecuteUbergraph_DSM_GameShowEventAnnounced(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_GameShowEventAnnounced.DSM_GameShowEventAnnounced_C.CheckPrerequisites
// Offset::0x3D30810;
bool FDSM_GameShowEventAnnounced_C::CheckPrerequisites(FDialogueSMRequest Request);


// Function  DSM_GameShowEventDeathMatch.DSM_GameShowEventDeathMatch_C.SMGraphK2Node_StateEntryNode_017C29224AE59EF8A39412B9B763AB0B_Wait_23CD39CD404FAEDE1358EA8FBD23D188
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatch_C::SMGraphK2Node_StateEntryNode_017C29224AE59EF8A39412B9B763AB0B_Wait_23CD39CD404FAEDE1358EA8FBD23D188();


// Function  DSM_GameShowEventDeathMatch.DSM_GameShowEventDeathMatch_C.SMGraphK2Node_StateEntryNode_017C29224AE59EF8A39412B9B763AB0B_Trigger_Mid_Gameshow_Line_B7B135D2469BF16F595F67998E2A2528
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatch_C::SMGraphK2Node_StateEntryNode_017C29224AE59EF8A39412B9B763AB0B_Trigger_Mid_Gameshow_Line_B7B135D2469BF16F595F67998E2A2528();


// Function  DSM_GameShowEventDeathMatch.DSM_GameShowEventDeathMatch_C.SMGraphK2Node_StateEntryNode_017C29224AE59EF8A39412B9B763AB0B_CoHost___Game_Show_Event_DeathMatch_447E034247E26793076F0997197ED4BF
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatch_C::SMGraphK2Node_StateEntryNode_017C29224AE59EF8A39412B9B763AB0B_CoHost___Game_Show_Event_DeathMatch_447E034247E26793076F0997197ED4BF();


// Function  DSM_GameShowEventDeathMatch.DSM_GameShowEventDeathMatch_C.SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatch_C::SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventDeathMatch.DSM_GameShowEventDeathMatch_C.SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatch_C::SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventDeathMatch.DSM_GameShowEventDeathMatch_C.SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatch_C::SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventDeathMatch.DSM_GameShowEventDeathMatch_C.SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatch_C::SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventDeathMatch.DSM_GameShowEventDeathMatch_C.SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatch_C::SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventDeathMatch.DSM_GameShowEventDeathMatch_C.SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatch_C::SMGraphK2Node_GraphPropertyNode_017C29224AE59EF8A39412B9B763AB0B_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventDeathMatch.DSM_GameShowEventDeathMatch_C.ExecuteUbergraph_DSM_GameShowEventDeathMatch
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatch_C::ExecuteUbergraph_DSM_GameShowEventDeathMatch(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDialogueTagPair K2Node_MakeStruct_DialogueTagPair,FDialogueSMRequest K2Node_MakeStruct_DialogueSMRequest,int32_t CallFunc_RequestDialogue_ReturnValue);


// Function  DSM_GameShowEventLava.DSM_GameShowEventLava_C.SMGraphK2Node_StateEntryNode_7457EECB4A1FA010C332378C3B05D08F_Wait_4A106D5F4322DE5720C9D79F54198D55
// Offset::0x3D30810;
void FDSM_GameShowEventLava_C::SMGraphK2Node_StateEntryNode_7457EECB4A1FA010C332378C3B05D08F_Wait_4A106D5F4322DE5720C9D79F54198D55();


// Function  DSM_GameShowEventLava.DSM_GameShowEventLava_C.SMGraphK2Node_StateEntryNode_7457EECB4A1FA010C332378C3B05D08F_Trigger_Mid_Gameshow_Line_B6C9C1A84C20003C0C2DBB8CC849C1D1
// Offset::0x3D30810;
void FDSM_GameShowEventLava_C::SMGraphK2Node_StateEntryNode_7457EECB4A1FA010C332378C3B05D08F_Trigger_Mid_Gameshow_Line_B6C9C1A84C20003C0C2DBB8CC849C1D1();


// Function  DSM_GameShowEventLava.DSM_GameShowEventLava_C.SMGraphK2Node_StateEntryNode_7457EECB4A1FA010C332378C3B05D08F_CoHost___Game_Show_Event_Lava_22E87A4841AC6843798016BDBCA3CD55
// Offset::0x3D30810;
void FDSM_GameShowEventLava_C::SMGraphK2Node_StateEntryNode_7457EECB4A1FA010C332378C3B05D08F_CoHost___Game_Show_Event_Lava_22E87A4841AC6843798016BDBCA3CD55();


// Function  DSM_GameShowEventLava.DSM_GameShowEventLava_C.SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventLava_C::SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventLava.DSM_GameShowEventLava_C.SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventLava_C::SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventLava.DSM_GameShowEventLava_C.SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventLava_C::SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventLava.DSM_GameShowEventLava_C.SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventLava_C::SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventLava.DSM_GameShowEventLava_C.SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventLava_C::SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventLava.DSM_GameShowEventLava_C.SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventLava_C::SMGraphK2Node_GraphPropertyNode_7457EECB4A1FA010C332378C3B05D08F_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventLava.DSM_GameShowEventLava_C.ExecuteUbergraph_DSM_GameShowEventLava
// Offset::0x3D30810;
void FDSM_GameShowEventLava_C::ExecuteUbergraph_DSM_GameShowEventLava(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDialogueTagPair K2Node_MakeStruct_DialogueTagPair,FDialogueSMRequest K2Node_MakeStruct_DialogueSMRequest,int32_t CallFunc_RequestDialogue_ReturnValue);


// Function  DSM_GameShowEventLowerGravity.DSM_GameShowEventLowerGravity_C.SMGraphK2Node_StateEntryNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_Wait_84DA97E74A6198C154A42A9E7A5A8ED0
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravity_C::SMGraphK2Node_StateEntryNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_Wait_84DA97E74A6198C154A42A9E7A5A8ED0();


// Function  DSM_GameShowEventLowerGravity.DSM_GameShowEventLowerGravity_C.SMGraphK2Node_StateEntryNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_Trigger_Mid_Gameshow_Line_B21422B246554DCB6D787FAB4F00F95C
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravity_C::SMGraphK2Node_StateEntryNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_Trigger_Mid_Gameshow_Line_B21422B246554DCB6D787FAB4F00F95C();


// Function  DSM_GameShowEventLowerGravity.DSM_GameShowEventLowerGravity_C.SMGraphK2Node_StateEntryNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_CoHost___Game_Show_Event_Low_Gravity_418871B14F6F6984E60390BE65DE3890
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravity_C::SMGraphK2Node_StateEntryNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_CoHost___Game_Show_Event_Low_Gravity_418871B14F6F6984E60390BE65DE3890();


// Function  DSM_GameShowEventLowerGravity.DSM_GameShowEventLowerGravity_C.SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravity_C::SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventLowerGravity.DSM_GameShowEventLowerGravity_C.SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravity_C::SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventLowerGravity.DSM_GameShowEventLowerGravity_C.SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravity_C::SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventLowerGravity.DSM_GameShowEventLowerGravity_C.SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravity_C::SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventLowerGravity.DSM_GameShowEventLowerGravity_C.SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravity_C::SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventLowerGravity.DSM_GameShowEventLowerGravity_C.SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravity_C::SMGraphK2Node_GraphPropertyNode_B32BD3AC4A36399DA9C2A0A2404BFDFF_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventLowerGravity.DSM_GameShowEventLowerGravity_C.ExecuteUbergraph_DSM_GameShowEventLowerGravity
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravity_C::ExecuteUbergraph_DSM_GameShowEventLowerGravity(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDialogueTagPair K2Node_MakeStruct_DialogueTagPair,FDialogueSMRequest K2Node_MakeStruct_DialogueSMRequest,int32_t CallFunc_RequestDialogue_ReturnValue);


// Function  DSM_GameShowEventMegaDamage.DSM_GameShowEventMegaDamage_C.SMGraphK2Node_StateEntryNode_90E651E545376F4A2A06758380C2FC6E_Wait_2EDAA8264CB756AFDD9327B556FA9380
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamage_C::SMGraphK2Node_StateEntryNode_90E651E545376F4A2A06758380C2FC6E_Wait_2EDAA8264CB756AFDD9327B556FA9380();


// Function  DSM_GameShowEventMegaDamage.DSM_GameShowEventMegaDamage_C.SMGraphK2Node_StateEntryNode_90E651E545376F4A2A06758380C2FC6E_Trigger_Mid_Gameshow_Line_C3086F1D48CE507C04D424A1A023FB08
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamage_C::SMGraphK2Node_StateEntryNode_90E651E545376F4A2A06758380C2FC6E_Trigger_Mid_Gameshow_Line_C3086F1D48CE507C04D424A1A023FB08();


// Function  DSM_GameShowEventMegaDamage.DSM_GameShowEventMegaDamage_C.SMGraphK2Node_StateEntryNode_90E651E545376F4A2A06758380C2FC6E_CoHost___Game_Show_Event_Mega_Damage_FCE5AE844D128EA325C66F8476000CA9
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamage_C::SMGraphK2Node_StateEntryNode_90E651E545376F4A2A06758380C2FC6E_CoHost___Game_Show_Event_Mega_Damage_FCE5AE844D128EA325C66F8476000CA9();


// Function  DSM_GameShowEventMegaDamage.DSM_GameShowEventMegaDamage_C.SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamage_C::SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventMegaDamage.DSM_GameShowEventMegaDamage_C.SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamage_C::SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventMegaDamage.DSM_GameShowEventMegaDamage_C.SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamage_C::SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventMegaDamage.DSM_GameShowEventMegaDamage_C.SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamage_C::SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventMegaDamage.DSM_GameShowEventMegaDamage_C.SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamage_C::SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventMegaDamage.DSM_GameShowEventMegaDamage_C.SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamage_C::SMGraphK2Node_GraphPropertyNode_90E651E545376F4A2A06758380C2FC6E_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventMegaDamage.DSM_GameShowEventMegaDamage_C.ExecuteUbergraph_DSM_GameShowEventMegaDamage
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamage_C::ExecuteUbergraph_DSM_GameShowEventMegaDamage(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDialogueTagPair K2Node_MakeStruct_DialogueTagPair,FDialogueSMRequest K2Node_MakeStruct_DialogueSMRequest,int32_t CallFunc_RequestDialogue_ReturnValue);


// Function  DSM_GameShowEventMeteorShower.DSM_GameShowEventMeteorShower_C.SMGraphK2Node_StateEntryNode_0EBB88614B30D685D4CCBA80F076C9B9_Wait_C29210874B52042A4CAE42B88F954785
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShower_C::SMGraphK2Node_StateEntryNode_0EBB88614B30D685D4CCBA80F076C9B9_Wait_C29210874B52042A4CAE42B88F954785();


// Function  DSM_GameShowEventMeteorShower.DSM_GameShowEventMeteorShower_C.SMGraphK2Node_StateEntryNode_0EBB88614B30D685D4CCBA80F076C9B9_Trigger_Mid_Gameshow_Line_764483464A8833BEF864A5AE9C2C9B9F
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShower_C::SMGraphK2Node_StateEntryNode_0EBB88614B30D685D4CCBA80F076C9B9_Trigger_Mid_Gameshow_Line_764483464A8833BEF864A5AE9C2C9B9F();


// Function  DSM_GameShowEventMeteorShower.DSM_GameShowEventMeteorShower_C.SMGraphK2Node_StateEntryNode_0EBB88614B30D685D4CCBA80F076C9B9_CoHost___Game_Show_Event_Meteor_Shower_C1FE4A964B9FB875AC101999481F7D20
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShower_C::SMGraphK2Node_StateEntryNode_0EBB88614B30D685D4CCBA80F076C9B9_CoHost___Game_Show_Event_Meteor_Shower_C1FE4A964B9FB875AC101999481F7D20();


// Function  DSM_GameShowEventMeteorShower.DSM_GameShowEventMeteorShower_C.SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShower_C::SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventMeteorShower.DSM_GameShowEventMeteorShower_C.SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShower_C::SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventMeteorShower.DSM_GameShowEventMeteorShower_C.SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShower_C::SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventMeteorShower.DSM_GameShowEventMeteorShower_C.SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShower_C::SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventMeteorShower.DSM_GameShowEventMeteorShower_C.SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShower_C::SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventMeteorShower.DSM_GameShowEventMeteorShower_C.SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShower_C::SMGraphK2Node_GraphPropertyNode_0EBB88614B30D685D4CCBA80F076C9B9_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventMeteorShower.DSM_GameShowEventMeteorShower_C.ExecuteUbergraph_DSM_GameShowEventMeteorShower
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShower_C::ExecuteUbergraph_DSM_GameShowEventMeteorShower(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDialogueTagPair K2Node_MakeStruct_DialogueTagPair,FDialogueSMRequest K2Node_MakeStruct_DialogueSMRequest,int32_t CallFunc_RequestDialogue_ReturnValue);


// Function  DSM_GameShowEventOrbitalLasers.DSM_GameShowEventOrbitalLasers_C.SMGraphK2Node_StateEntryNode_5D0995144D34E2768C1963A93939E55E_Wait_07064FD34EF89CA2527694BB3CF9BA09
// Offset::0x3D30810;
void FDSM_GameShowEventOrbitalLasers_C::SMGraphK2Node_StateEntryNode_5D0995144D34E2768C1963A93939E55E_Wait_07064FD34EF89CA2527694BB3CF9BA09();


// Function  DSM_GameShowEventOrbitalLasers.DSM_GameShowEventOrbitalLasers_C.SMGraphK2Node_StateEntryNode_5D0995144D34E2768C1963A93939E55E_Trigger_Mid_Gameshow_Line_9AA3B95440361BADA7AA958336D3440D
// Offset::0x3D30810;
void FDSM_GameShowEventOrbitalLasers_C::SMGraphK2Node_StateEntryNode_5D0995144D34E2768C1963A93939E55E_Trigger_Mid_Gameshow_Line_9AA3B95440361BADA7AA958336D3440D();


// Function  DSM_GameShowEventOrbitalLasers.DSM_GameShowEventOrbitalLasers_C.SMGraphK2Node_StateEntryNode_5D0995144D34E2768C1963A93939E55E_CoHost___Game_Show_Event_Orbital_Lasers_E45FC6174A203EFE8286828F352FDAFE
// Offset::0x3D30810;
void FDSM_GameShowEventOrbitalLasers_C::SMGraphK2Node_StateEntryNode_5D0995144D34E2768C1963A93939E55E_CoHost___Game_Show_Event_Orbital_Lasers_E45FC6174A203EFE8286828F352FDAFE();


// Function  DSM_GameShowEventOrbitalLasers.DSM_GameShowEventOrbitalLasers_C.SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventOrbitalLasers_C::SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventOrbitalLasers.DSM_GameShowEventOrbitalLasers_C.SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventOrbitalLasers_C::SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventOrbitalLasers.DSM_GameShowEventOrbitalLasers_C.SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventOrbitalLasers_C::SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventOrbitalLasers.DSM_GameShowEventOrbitalLasers_C.SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventOrbitalLasers_C::SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventOrbitalLasers.DSM_GameShowEventOrbitalLasers_C.SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventOrbitalLasers_C::SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventOrbitalLasers.DSM_GameShowEventOrbitalLasers_C.SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventOrbitalLasers_C::SMGraphK2Node_GraphPropertyNode_5D0995144D34E2768C1963A93939E55E_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventOrbitalLasers.DSM_GameShowEventOrbitalLasers_C.ExecuteUbergraph_DSM_GameShowEventOrbitalLasers
// Offset::0x3D30810;
void FDSM_GameShowEventOrbitalLasers_C::ExecuteUbergraph_DSM_GameShowEventOrbitalLasers(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDialogueTagPair K2Node_MakeStruct_DialogueTagPair,FDialogueSMRequest K2Node_MakeStruct_DialogueSMRequest,int32_t CallFunc_RequestDialogue_ReturnValue);


// Function  DSM_GameShowEventRetroInvastion82.DSM_GameShowEventRetroInvastion82_C.SMGraphK2Node_StateEntryNode_F3F72F724453879B3EC3E899E04DC6C7_Wait_E36FD26746492C2CDD25E4A8D0628ECE
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvastion82_C::SMGraphK2Node_StateEntryNode_F3F72F724453879B3EC3E899E04DC6C7_Wait_E36FD26746492C2CDD25E4A8D0628ECE();


// Function  DSM_GameShowEventRetroInvastion82.DSM_GameShowEventRetroInvastion82_C.SMGraphK2Node_StateEntryNode_F3F72F724453879B3EC3E899E04DC6C7_Trigger_Mid_Gameshow_Line_90AB68984A545908AA4A129593C0B2BC
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvastion82_C::SMGraphK2Node_StateEntryNode_F3F72F724453879B3EC3E899E04DC6C7_Trigger_Mid_Gameshow_Line_90AB68984A545908AA4A129593C0B2BC();


// Function  DSM_GameShowEventRetroInvastion82.DSM_GameShowEventRetroInvastion82_C.SMGraphK2Node_StateEntryNode_F3F72F724453879B3EC3E899E04DC6C7_CoHost___Game_Show_Event_Retro_Invasion_82_CD53EB144E2D46F8076156B41963C9B0
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvastion82_C::SMGraphK2Node_StateEntryNode_F3F72F724453879B3EC3E899E04DC6C7_CoHost___Game_Show_Event_Retro_Invasion_82_CD53EB144E2D46F8076156B41963C9B0();


// Function  DSM_GameShowEventRetroInvastion82.DSM_GameShowEventRetroInvastion82_C.SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvastion82_C::SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventRetroInvastion82.DSM_GameShowEventRetroInvastion82_C.SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvastion82_C::SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventRetroInvastion82.DSM_GameShowEventRetroInvastion82_C.SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvastion82_C::SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventRetroInvastion82.DSM_GameShowEventRetroInvastion82_C.SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvastion82_C::SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventRetroInvastion82.DSM_GameShowEventRetroInvastion82_C.SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvastion82_C::SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventRetroInvastion82.DSM_GameShowEventRetroInvastion82_C.SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvastion82_C::SMGraphK2Node_GraphPropertyNode_F3F72F724453879B3EC3E899E04DC6C7_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventRetroInvastion82.DSM_GameShowEventRetroInvastion82_C.ExecuteUbergraph_DSM_GameShowEventRetroInvastion82
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvastion82_C::ExecuteUbergraph_DSM_GameShowEventRetroInvastion82(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDialogueTagPair K2Node_MakeStruct_DialogueTagPair,FDialogueSMRequest K2Node_MakeStruct_DialogueSMRequest,int32_t CallFunc_RequestDialogue_ReturnValue);


// Function  DSM_GameShowEventVolatileContestant.DSM_GameShowEventVolatileContestant_C.SMGraphK2Node_StateEntryNode_E7ABCC4542A38FFB4900F7B875F0B231_Wait_5DC3D72A4DF604F8A3C3068AD1D95854
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestant_C::SMGraphK2Node_StateEntryNode_E7ABCC4542A38FFB4900F7B875F0B231_Wait_5DC3D72A4DF604F8A3C3068AD1D95854();


// Function  DSM_GameShowEventVolatileContestant.DSM_GameShowEventVolatileContestant_C.SMGraphK2Node_StateEntryNode_E7ABCC4542A38FFB4900F7B875F0B231_Trigger_Mid_Gameshow_Line_B6575007439EEF9FC35260BB19DB11C6
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestant_C::SMGraphK2Node_StateEntryNode_E7ABCC4542A38FFB4900F7B875F0B231_Trigger_Mid_Gameshow_Line_B6575007439EEF9FC35260BB19DB11C6();


// Function  DSM_GameShowEventVolatileContestant.DSM_GameShowEventVolatileContestant_C.SMGraphK2Node_StateEntryNode_E7ABCC4542A38FFB4900F7B875F0B231_CoHost___Game_Show_Event_Volatile_Contestant_B90327584219F7780A3503AF98900471
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestant_C::SMGraphK2Node_StateEntryNode_E7ABCC4542A38FFB4900F7B875F0B231_CoHost___Game_Show_Event_Volatile_Contestant_B90327584219F7780A3503AF98900471();


// Function  DSM_GameShowEventVolatileContestant.DSM_GameShowEventVolatileContestant_C.SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestant_C::SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventVolatileContestant.DSM_GameShowEventVolatileContestant_C.SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestant_C::SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventVolatileContestant.DSM_GameShowEventVolatileContestant_C.SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestant_C::SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventVolatileContestant.DSM_GameShowEventVolatileContestant_C.SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestant_C::SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventVolatileContestant.DSM_GameShowEventVolatileContestant_C.SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestant_C::SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventVolatileContestant.DSM_GameShowEventVolatileContestant_C.SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestant_C::SMGraphK2Node_GraphPropertyNode_E7ABCC4542A38FFB4900F7B875F0B231_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventVolatileContestant.DSM_GameShowEventVolatileContestant_C.ExecuteUbergraph_DSM_GameShowEventVolatileContestant
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestant_C::ExecuteUbergraph_DSM_GameShowEventVolatileContestant(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDialogueTagPair K2Node_MakeStruct_DialogueTagPair,FDialogueSMRequest K2Node_MakeStruct_DialogueSMRequest,int32_t CallFunc_RequestDialogue_ReturnValue);


// Function  DSM_MidGameShowEvent.DSM_MidGameShowEvent_C.SMGraphK2Node_StateEntryNode_698D428C42094DE4C912429308661ADC_Wait_F25CACD043F9B063565BD89E479F77EA
// Offset::0x3D30810;
void FDSM_MidGameShowEvent_C::SMGraphK2Node_StateEntryNode_698D428C42094DE4C912429308661ADC_Wait_F25CACD043F9B063565BD89E479F77EA();


// Function  DSM_MidGameShowEvent.DSM_MidGameShowEvent_C.SMGraphK2Node_StateEntryNode_698D428C42094DE4C912429308661ADC_Set_Bucket_C6250A2B406A861E627AD7A4D0D530C4
// Offset::0x3D30810;
void FDSM_MidGameShowEvent_C::SMGraphK2Node_StateEntryNode_698D428C42094DE4C912429308661ADC_Set_Bucket_C6250A2B406A861E627AD7A4D0D530C4();


// Function  DSM_MidGameShowEvent.DSM_MidGameShowEvent_C.SMGraphK2Node_StateEntryNode_698D428C42094DE4C912429308661ADC_Commentator___MidGameShow_9088FE29430952EDBD1ED495F7BD6360
// Offset::0x3D30810;
void FDSM_MidGameShowEvent_C::SMGraphK2Node_StateEntryNode_698D428C42094DE4C912429308661ADC_Commentator___MidGameShow_9088FE29430952EDBD1ED495F7BD6360();


// Function  DSM_MidGameShowEvent.DSM_MidGameShowEvent_C.SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_MidGameShowEvent_C::SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_MidGameShowEvent.DSM_MidGameShowEvent_C.SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_MidGameShowEvent_C::SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_MidGameShowEvent.DSM_MidGameShowEvent_C.SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_MidGameShowEvent_C::SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_MidGameShowEvent.DSM_MidGameShowEvent_C.SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_MidGameShowEvent_C::SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_MidGameShowEvent.DSM_MidGameShowEvent_C.SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_MidGameShowEvent_C::SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_MidGameShowEvent.DSM_MidGameShowEvent_C.SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_MidGameShowEvent_C::SMGraphK2Node_GraphPropertyNode_698D428C42094DE4C912429308661ADC_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_MidGameShowEvent.DSM_MidGameShowEvent_C.ExecuteUbergraph_DSM_MidGameShowEvent
// Offset::0x3D30810;
void FDSM_MidGameShowEvent_C::ExecuteUbergraph_DSM_MidGameShowEvent(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_OwnerChanged.DSM_OwnerChanged_C.SMGraphK2Node_StateEntryNode_8E52D89245AAC0C1C95519B9385A44C5_What_Team_96AC11124C904FC3005CB389E9B888B0
// Offset::0x3D30810;
void FDSM_OwnerChanged_C::SMGraphK2Node_StateEntryNode_8E52D89245AAC0C1C95519B9385A44C5_What_Team_96AC11124C904FC3005CB389E9B888B0();


// Function  DSM_OwnerChanged.DSM_OwnerChanged_C.SMGraphK2Node_StateEntryNode_8E52D89245AAC0C1C95519B9385A44C5_Wait_B57354204D51DADB9B3A6A9ACD40196D
// Offset::0x3D30810;
void FDSM_OwnerChanged_C::SMGraphK2Node_StateEntryNode_8E52D89245AAC0C1C95519B9385A44C5_Wait_B57354204D51DADB9B3A6A9ACD40196D();


// Function  DSM_OwnerChanged.DSM_OwnerChanged_C.SMGraphK2Node_StateEntryNode_8E52D89245AAC0C1C95519B9385A44C5_Commentator___Owner_Change_Regular_and_First_9502454243C5963FEA1A7C953C15E020
// Offset::0x3D30810;
void FDSM_OwnerChanged_C::SMGraphK2Node_StateEntryNode_8E52D89245AAC0C1C95519B9385A44C5_Commentator___Owner_Change_Regular_and_First_9502454243C5963FEA1A7C953C15E020();


// Function  DSM_OwnerChanged.DSM_OwnerChanged_C.SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_OwnerChanged_C::SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_OwnerChanged.DSM_OwnerChanged_C.SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_OwnerChanged_C::SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_OwnerChanged.DSM_OwnerChanged_C.SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_OwnerChanged_C::SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_OwnerChanged.DSM_OwnerChanged_C.SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_OwnerChanged_C::SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_OwnerChanged.DSM_OwnerChanged_C.SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_OwnerChanged_C::SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_OwnerChanged.DSM_OwnerChanged_C.SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_OwnerChanged_C::SMGraphK2Node_GraphPropertyNode_8E52D89245AAC0C1C95519B9385A44C5_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_OwnerChanged.DSM_OwnerChanged_C.ExecuteUbergraph_DSM_OwnerChanged
// Offset::0x3D30810;
void FDSM_OwnerChanged_C::ExecuteUbergraph_DSM_OwnerChanged(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,bool CallFunc_IsGameplayTagValid_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,bool CallFunc_IsGameplayTagValid_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_Wait_672CA78D46919C8A8BA674B4C251051A
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_Wait_672CA78D46919C8A8BA674B4C251051A();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_PlayDialogue_127FA87B462CA3A13BDF2AAAB0D6E8AF
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_PlayDialogue_127FA87B462CA3A13BDF2AAAB0D6E8AF();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_Get_Simple_Bucket_5167A2EC409AB4721354CEBAACADDC88
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_Get_Simple_Bucket_5167A2EC409AB4721354CEBAACADDC88();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_Get_Scotty_and_June_30329DAC4974C5C5F5EE0581D4C85E05
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_Get_Scotty_and_June_30329DAC4974C5C5F5EE0581D4C85E05();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_Get_Buckets_9D27943A4B26F3EDE65542B4C268AE72
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_Get_Buckets_9D27943A4B26F3EDE65542B4C268AE72();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_Check_and_store_GameMode_switch_EF41A83749B52E57AEC6F1AA2AE6A809
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_StateEntryNode_BED402314EC2BB63888A249AE75D80F2_Check_and_store_GameMode_switch_EF41A83749B52E57AEC6F1AA2AE6A809();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_F19F329464824ECFC19C1C85BBBA1878
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_F19F329464824ECFC19C1C85BBBA1878();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_EE1C67CA2053DD2014BBE98E07F4DAA2
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_EE1C67CA2053DD2014BBE98E07F4DAA2();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_EABD6AE9AFFFF4B2638CD7CDB02EA899
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_EABD6AE9AFFFF4B2638CD7CDB02EA899();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_C0E87BED3A8C440D54C1F0487381B037
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_C0E87BED3A8C440D54C1F0487381B037();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_821886401B02B36F1D78B27C283FFA49
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_821886401B02B36F1D78B27C283FFA49();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_74660C22CD0AEF078FA6959D621FE88F
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_74660C22CD0AEF078FA6959D621FE88F();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_02D5906F5425ECAF722F7DA1584049D9
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_02D5906F5425ECAF722F7DA1584049D9();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_019E79EF9D0F456CB0D3000642B484AA
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::SMGraphK2Node_GraphPropertyNode_BED402314EC2BB63888A249AE75D80F2_019E79EF9D0F456CB0D3000642B484AA();


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.ExecuteUbergraph_DSM_PlayerHasLotsOfCash
// Offset::0x3D30810;
void FDSM_PlayerHasLotsOfCash_C::ExecuteUbergraph_DSM_PlayerHasLotsOfCash(int32_t EntryPoint,FSMNodeInstance* CallFunc_Array_Get_Item,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FSMNodeInstance* CallFunc_Array_Get_Item,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FSMNodeInstance* CallFunc_Array_Get_Item,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_MakeArray_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Make_Array,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTagContainer CallFunc_GetActiveEventTags_ReturnValue,bool CallFunc_HasTag_ReturnValue,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateMachineCooldown_C* K2Node_DynamicCast_AsBP_Dialogue_State_Machine_Cooldown,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_PlayerHasLotsOfCash.DSM_PlayerHasLotsOfCash_C.CheckCanBeInterrupted
// Offset::0x3D30810;
bool FDSM_PlayerHasLotsOfCash_C::CheckCanBeInterrupted(FDialogueSMRequest IncomingRequest);


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::SMGraphK2Node_GraphPropertyNode_417D11C541B6CCC481512CADC5CB83D2_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.ExecuteUbergraph_DSM_PracticeRangeIntro
// Offset::0x3D30810;
void FDSM_PracticeRangeIntro_C::ExecuteUbergraph_DSM_PracticeRangeIntro(int32_t EntryPoint,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FPlayerController* CallFunc_GetPlayerController_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_PracticeRangeIntro.DSM_PracticeRangeIntro_C.CheckPrerequisites
// Offset::0x3D30810;
bool FDSM_PracticeRangeIntro_C::CheckPrerequisites(FDialogueSMRequest Request);


// Function  DSM_SquadIntro.DSM_SquadIntro_C.SMGraphK2Node_StateEntryNode_64F3486145271C3AD0E692A619546A5B_Play_On_Commentator_EBC6AD984C87AA22BB451EB9A3E2234E
// Offset::0x3D30810;
void FDSM_SquadIntro_C::SMGraphK2Node_StateEntryNode_64F3486145271C3AD0E692A619546A5B_Play_On_Commentator_EBC6AD984C87AA22BB451EB9A3E2234E();


// Function  DSM_SquadIntro.DSM_SquadIntro_C.SMGraphK2Node_StateEntryNode_64F3486145271C3AD0E692A619546A5B_Logic_State_13EAF42B4F228F30072BDAB883483821
// Offset::0x3D30810;
void FDSM_SquadIntro_C::SMGraphK2Node_StateEntryNode_64F3486145271C3AD0E692A619546A5B_Logic_State_13EAF42B4F228F30072BDAB883483821();


// Function  DSM_SquadIntro.DSM_SquadIntro_C.SMGraphK2Node_GraphPropertyNode_64F3486145271C3AD0E692A619546A5B_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_SquadIntro_C::SMGraphK2Node_GraphPropertyNode_64F3486145271C3AD0E692A619546A5B_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_SquadIntro.DSM_SquadIntro_C.SMGraphK2Node_GraphPropertyNode_64F3486145271C3AD0E692A619546A5B_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_SquadIntro_C::SMGraphK2Node_GraphPropertyNode_64F3486145271C3AD0E692A619546A5B_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_SquadIntro.DSM_SquadIntro_C.SMGraphK2Node_GraphPropertyNode_64F3486145271C3AD0E692A619546A5B_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_SquadIntro_C::SMGraphK2Node_GraphPropertyNode_64F3486145271C3AD0E692A619546A5B_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_SquadIntro.DSM_SquadIntro_C.SMGraphK2Node_GraphPropertyNode_64F3486145271C3AD0E692A619546A5B_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_SquadIntro_C::SMGraphK2Node_GraphPropertyNode_64F3486145271C3AD0E692A619546A5B_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_SquadIntro.DSM_SquadIntro_C.ExecuteUbergraph_DSM_SquadIntro
// Offset::0x3D30810;
void FDSM_SquadIntro_C::ExecuteUbergraph_DSM_SquadIntro(int32_t EntryPoint,int32_t CallFunc_Array_Length_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,int32_t CallFunc_Array_Add_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FDiscoveryGameState* K2Node_DynamicCast_AsDiscovery_Game_State,bool K2Node_DynamicCast_bSuccess,int32_t CallFunc_Array_Length_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,bool CallFunc_GetSquadIntroInfo_bIsFirstSquad,bool CallFunc_GetSquadIntroInfo_bIsVersus,bool CallFunc_GetSquadIntroInfo_bIsNextLastTeam,bool CallFunc_GetSquadIntroInfo_bIsLastTeam,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_TimeLeft.DSM_TimeLeft_C.SMGraphK2Node_StateEntryNode_ACBA426E44EC31FDB8FE43B23B5FB809_Wait_34DA2A2045B69E15DD5944AF9A141CF1
// Offset::0x3D30810;
void FDSM_TimeLeft_C::SMGraphK2Node_StateEntryNode_ACBA426E44EC31FDB8FE43B23B5FB809_Wait_34DA2A2045B69E15DD5944AF9A141CF1();


// Function  DSM_TimeLeft.DSM_TimeLeft_C.SMGraphK2Node_StateEntryNode_ACBA426E44EC31FDB8FE43B23B5FB809_Logic_State_7B585CB343D9FB660940B3BC77DFF12C
// Offset::0x3D30810;
void FDSM_TimeLeft_C::SMGraphK2Node_StateEntryNode_ACBA426E44EC31FDB8FE43B23B5FB809_Logic_State_7B585CB343D9FB660940B3BC77DFF12C();


// Function  DSM_TimeLeft.DSM_TimeLeft_C.SMGraphK2Node_StateEntryNode_ACBA426E44EC31FDB8FE43B23B5FB809_Announcer___EOR_Countdown_3E8DC26449E2B0D7AFDE07868CFDA9FA
// Offset::0x3D30810;
void FDSM_TimeLeft_C::SMGraphK2Node_StateEntryNode_ACBA426E44EC31FDB8FE43B23B5FB809_Announcer___EOR_Countdown_3E8DC26449E2B0D7AFDE07868CFDA9FA();


// Function  DSM_TimeLeft.DSM_TimeLeft_C.SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_TimeLeft_C::SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_TimeLeft.DSM_TimeLeft_C.SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_TimeLeft_C::SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_TimeLeft.DSM_TimeLeft_C.SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_TimeLeft_C::SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_TimeLeft.DSM_TimeLeft_C.SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_TimeLeft_C::SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_TimeLeft.DSM_TimeLeft_C.SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_TimeLeft_C::SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_TimeLeft.DSM_TimeLeft_C.SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_TimeLeft_C::SMGraphK2Node_GraphPropertyNode_ACBA426E44EC31FDB8FE43B23B5FB809_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_TimeLeft.DSM_TimeLeft_C.ExecuteUbergraph_DSM_TimeLeft
// Offset::0x3D30810;
void FDSM_TimeLeft_C::ExecuteUbergraph_DSM_TimeLeft(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FDialogueStateMachineContext* CallFunc_GetDialogueContext_ReturnValue,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_TimeLeft54321.DSM_TimeLeft54321_C.SMGraphK2Node_StateEntryNode_0DF725FC48D209F89999D996CCE21747_Logic_State_36CCFCFC4EA236AA9F5D8DAB254341D2
// Offset::0x3D30810;
void FDSM_TimeLeft54321_C::SMGraphK2Node_StateEntryNode_0DF725FC48D209F89999D996CCE21747_Logic_State_36CCFCFC4EA236AA9F5D8DAB254341D2();


// Function  DSM_TimeLeft54321.DSM_TimeLeft54321_C.SMGraphK2Node_StateEntryNode_0DF725FC48D209F89999D996CCE21747_Announcer___Countdown_C57755C54652A0FFB963B0A9F2B32E3E
// Offset::0x3D30810;
void FDSM_TimeLeft54321_C::SMGraphK2Node_StateEntryNode_0DF725FC48D209F89999D996CCE21747_Announcer___Countdown_C57755C54652A0FFB963B0A9F2B32E3E();


// Function  DSM_TimeLeft54321.DSM_TimeLeft54321_C.SMGraphK2Node_GraphPropertyNode_0DF725FC48D209F89999D996CCE21747_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_TimeLeft54321_C::SMGraphK2Node_GraphPropertyNode_0DF725FC48D209F89999D996CCE21747_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_TimeLeft54321.DSM_TimeLeft54321_C.SMGraphK2Node_GraphPropertyNode_0DF725FC48D209F89999D996CCE21747_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_TimeLeft54321_C::SMGraphK2Node_GraphPropertyNode_0DF725FC48D209F89999D996CCE21747_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_TimeLeft54321.DSM_TimeLeft54321_C.SMGraphK2Node_GraphPropertyNode_0DF725FC48D209F89999D996CCE21747_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_TimeLeft54321_C::SMGraphK2Node_GraphPropertyNode_0DF725FC48D209F89999D996CCE21747_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_TimeLeft54321.DSM_TimeLeft54321_C.SMGraphK2Node_GraphPropertyNode_0DF725FC48D209F89999D996CCE21747_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_TimeLeft54321_C::SMGraphK2Node_GraphPropertyNode_0DF725FC48D209F89999D996CCE21747_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_TimeLeft54321.DSM_TimeLeft54321_C.ExecuteUbergraph_DSM_TimeLeft54321
// Offset::0x3D30810;
void FDSM_TimeLeft54321_C::ExecuteUbergraph_DSM_TimeLeft54321(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_TimeLeftCommentator.DSM_TimeLeftCommentator_C.SMGraphK2Node_StateEntryNode_534B8D5346489584138672BEE1F59057_Wait_2503D3354FF431BDC0DD8FADEEB9E2CE
// Offset::0x3D30810;
void FDSM_TimeLeftCommentator_C::SMGraphK2Node_StateEntryNode_534B8D5346489584138672BEE1F59057_Wait_2503D3354FF431BDC0DD8FADEEB9E2CE();


// Function  DSM_TimeLeftCommentator.DSM_TimeLeftCommentator_C.SMGraphK2Node_StateEntryNode_534B8D5346489584138672BEE1F59057_Logic_State_48D7288B41423CF513654CA8C0828E25
// Offset::0x3D30810;
void FDSM_TimeLeftCommentator_C::SMGraphK2Node_StateEntryNode_534B8D5346489584138672BEE1F59057_Logic_State_48D7288B41423CF513654CA8C0828E25();


// Function  DSM_TimeLeftCommentator.DSM_TimeLeftCommentator_C.SMGraphK2Node_StateEntryNode_534B8D5346489584138672BEE1F59057_Commentator___Time_Left_60sec_and_30sec_74101E1C43CD429BAA5B05B51E28FB6C
// Offset::0x3D30810;
void FDSM_TimeLeftCommentator_C::SMGraphK2Node_StateEntryNode_534B8D5346489584138672BEE1F59057_Commentator___Time_Left_60sec_and_30sec_74101E1C43CD429BAA5B05B51E28FB6C();


// Function  DSM_TimeLeftCommentator.DSM_TimeLeftCommentator_C.SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_TimeLeftCommentator_C::SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_TimeLeftCommentator.DSM_TimeLeftCommentator_C.SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_TimeLeftCommentator_C::SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_TimeLeftCommentator.DSM_TimeLeftCommentator_C.SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_TimeLeftCommentator_C::SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_TimeLeftCommentator.DSM_TimeLeftCommentator_C.SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_TimeLeftCommentator_C::SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_TimeLeftCommentator.DSM_TimeLeftCommentator_C.SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_TimeLeftCommentator_C::SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_TimeLeftCommentator.DSM_TimeLeftCommentator_C.SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_TimeLeftCommentator_C::SMGraphK2Node_GraphPropertyNode_534B8D5346489584138672BEE1F59057_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_TimeLeftCommentator.DSM_TimeLeftCommentator_C.ExecuteUbergraph_DSM_TimeLeftCommentator
// Offset::0x3D30810;
void FDSM_TimeLeftCommentator_C::ExecuteUbergraph_DSM_TimeLeftCommentator(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_TugOFWar_Control.DSM_TugOFWar_Control_C.SMGraphK2Node_StateEntryNode_3FD50B4F4E9C4245BF656BB26511BA47_Logic_State_7168960042AC6F9304A86E94D9272FFF
// Offset::0x3D30810;
void FDSM_TugOFWar_Control_C::SMGraphK2Node_StateEntryNode_3FD50B4F4E9C4245BF656BB26511BA47_Logic_State_7168960042AC6F9304A86E94D9272FFF();


// Function  DSM_TugOFWar_Control.DSM_TugOFWar_Control_C.SMGraphK2Node_StateEntryNode_3FD50B4F4E9C4245BF656BB26511BA47_CoHost___Team_is_holding_platform_44FB26454E5D5EBA5D2B91B8B7B3F83B
// Offset::0x3D30810;
void FDSM_TugOFWar_Control_C::SMGraphK2Node_StateEntryNode_3FD50B4F4E9C4245BF656BB26511BA47_CoHost___Team_is_holding_platform_44FB26454E5D5EBA5D2B91B8B7B3F83B();


// Function  DSM_TugOFWar_Control.DSM_TugOFWar_Control_C.SMGraphK2Node_GraphPropertyNode_3FD50B4F4E9C4245BF656BB26511BA47_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_TugOFWar_Control_C::SMGraphK2Node_GraphPropertyNode_3FD50B4F4E9C4245BF656BB26511BA47_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_TugOFWar_Control.DSM_TugOFWar_Control_C.SMGraphK2Node_GraphPropertyNode_3FD50B4F4E9C4245BF656BB26511BA47_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_TugOFWar_Control_C::SMGraphK2Node_GraphPropertyNode_3FD50B4F4E9C4245BF656BB26511BA47_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_TugOFWar_Control.DSM_TugOFWar_Control_C.SMGraphK2Node_GraphPropertyNode_3FD50B4F4E9C4245BF656BB26511BA47_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_TugOFWar_Control_C::SMGraphK2Node_GraphPropertyNode_3FD50B4F4E9C4245BF656BB26511BA47_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_TugOFWar_Control.DSM_TugOFWar_Control_C.SMGraphK2Node_GraphPropertyNode_3FD50B4F4E9C4245BF656BB26511BA47_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_TugOFWar_Control_C::SMGraphK2Node_GraphPropertyNode_3FD50B4F4E9C4245BF656BB26511BA47_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_TugOFWar_Control.DSM_TugOFWar_Control_C.ExecuteUbergraph_DSM_TugOFWar_Control
// Offset::0x3D30810;
void FDSM_TugOFWar_Control_C::ExecuteUbergraph_DSM_TugOFWar_Control(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_TugOfWarCloseToWinning.DSM_TugOfWarCloseToWinning_C.SMGraphK2Node_StateEntryNode_42D594644A6F223A49001F9048555579_Play_On_Commentator_D8B505F943AC3F71A3D196AF951783E7
// Offset::0x3D30810;
void FDSM_TugOfWarCloseToWinning_C::SMGraphK2Node_StateEntryNode_42D594644A6F223A49001F9048555579_Play_On_Commentator_D8B505F943AC3F71A3D196AF951783E7();


// Function  DSM_TugOfWarCloseToWinning.DSM_TugOfWarCloseToWinning_C.SMGraphK2Node_StateEntryNode_42D594644A6F223A49001F9048555579_Logic_State_E474304B43CB393BD5F801AC9C3DBBCC
// Offset::0x3D30810;
void FDSM_TugOfWarCloseToWinning_C::SMGraphK2Node_StateEntryNode_42D594644A6F223A49001F9048555579_Logic_State_E474304B43CB393BD5F801AC9C3DBBCC();


// Function  DSM_TugOfWarCloseToWinning.DSM_TugOfWarCloseToWinning_C.SMGraphK2Node_GraphPropertyNode_42D594644A6F223A49001F9048555579_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_TugOfWarCloseToWinning_C::SMGraphK2Node_GraphPropertyNode_42D594644A6F223A49001F9048555579_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_TugOfWarCloseToWinning.DSM_TugOfWarCloseToWinning_C.SMGraphK2Node_GraphPropertyNode_42D594644A6F223A49001F9048555579_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_TugOfWarCloseToWinning_C::SMGraphK2Node_GraphPropertyNode_42D594644A6F223A49001F9048555579_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_TugOfWarCloseToWinning.DSM_TugOfWarCloseToWinning_C.SMGraphK2Node_GraphPropertyNode_42D594644A6F223A49001F9048555579_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_TugOfWarCloseToWinning_C::SMGraphK2Node_GraphPropertyNode_42D594644A6F223A49001F9048555579_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_TugOfWarCloseToWinning.DSM_TugOfWarCloseToWinning_C.SMGraphK2Node_GraphPropertyNode_42D594644A6F223A49001F9048555579_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_TugOfWarCloseToWinning_C::SMGraphK2Node_GraphPropertyNode_42D594644A6F223A49001F9048555579_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_TugOfWarCloseToWinning.DSM_TugOfWarCloseToWinning_C.ExecuteUbergraph_DSM_TugOfWarCloseToWinning
// Offset::0x3D30810;
void FDSM_TugOfWarCloseToWinning_C::ExecuteUbergraph_DSM_TugOfWarCloseToWinning(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetFirstMatchingTag_ReturnValue,FGameplayTag CallFunc_GetSquadSpecificBucket_ReturnValue,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_StateEntryNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_Tag_Filter_F5B727174320648783C194AE39CF0955
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_StateEntryNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_Tag_Filter_F5B727174320648783C194AE39CF0955();


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_StateEntryNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_PlayDialogue_96A88EC3407A05D47715AFBB926F5294
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_StateEntryNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_PlayDialogue_96A88EC3407A05D47715AFBB926F5294();


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_StateEntryNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_Map_Object_Tag_to_Bucket_86D42BE148303387DEF625B57BEFCBA9
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_StateEntryNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_Map_Object_Tag_to_Bucket_86D42BE148303387DEF625B57BEFCBA9();


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_F77922121F2FEF9C834B583F6A0AE21B
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_F77922121F2FEF9C834B583F6A0AE21B();


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_4057407B20CE351278263AF71B7DBB45
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_4057407B20CE351278263AF71B7DBB45();


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_20CD296683AA943F50FE295743EE81F2
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_20CD296683AA943F50FE295743EE81F2();


// Function  DSM_Tutorial.DSM_Tutorial_C.SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_Tutorial_C::SMGraphK2Node_GraphPropertyNode_C0BEB7FA4CD0144B1FDE8EB17A6CB228_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_Tutorial.DSM_Tutorial_C.ExecuteUbergraph_DSM_Tutorial
// Offset::0x3D30810;
void FDSM_Tutorial_C::ExecuteUbergraph_DSM_Tutorial(int32_t EntryPoint,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetObjectTag_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.SMGraphK2Node_StateEntryNode_020D83174E3B8EC1D0873086FE1716ED_Wait_4134470E442D49E0C4BC8D8059EAEBE7
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::SMGraphK2Node_StateEntryNode_020D83174E3B8EC1D0873086FE1716ED_Wait_4134470E442D49E0C4BC8D8059EAEBE7();


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.SMGraphK2Node_StateEntryNode_020D83174E3B8EC1D0873086FE1716ED_PlayDialogue_7980FA11466FAEE4DC1CF782D0F370F3
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::SMGraphK2Node_StateEntryNode_020D83174E3B8EC1D0873086FE1716ED_PlayDialogue_7980FA11466FAEE4DC1CF782D0F370F3();


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.SMGraphK2Node_StateEntryNode_020D83174E3B8EC1D0873086FE1716ED_Logic_State_859A57784A97B34E5FCD60972D6EA40B
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::SMGraphK2Node_StateEntryNode_020D83174E3B8EC1D0873086FE1716ED_Logic_State_859A57784A97B34E5FCD60972D6EA40B();


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::SMGraphK2Node_GraphPropertyNode_020D83174E3B8EC1D0873086FE1716ED_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_UseItem_DematerializeTool.DSM_UseItem_DematerializeTool_C.ExecuteUbergraph_DSM_UseItem_DematerializeTool
// Offset::0x3D30810;
void FDSM_UseItem_DematerializeTool_C::ExecuteUbergraph_DSM_UseItem_DematerializeTool(int32_t EntryPoint,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FGameplayTag Temp_struct_Variable,FGameplayTag CallFunc_GetObjectTag_ReturnValue,bool CallFunc_MatchesTag_ReturnValue,bool Temp_bool_Variable,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FGameplayTag K2Node_Select_Default);


// Function  DSM_UseItemGeneric.DSM_UseItemGeneric_C.SMGraphK2Node_StateEntryNode_1171F3CF4F172CB47D28AB9C398A4C9B_PlayDialogue_BFC7A06B47192CB1752919B3573D4205
// Offset::0x3D30810;
void FDSM_UseItemGeneric_C::SMGraphK2Node_StateEntryNode_1171F3CF4F172CB47D28AB9C398A4C9B_PlayDialogue_BFC7A06B47192CB1752919B3573D4205();


// Function  DSM_UseItemGeneric.DSM_UseItemGeneric_C.SMGraphK2Node_StateEntryNode_1171F3CF4F172CB47D28AB9C398A4C9B_Logic_State_FC6653DB4EFAEF9CAE58FFB796940E53
// Offset::0x3D30810;
void FDSM_UseItemGeneric_C::SMGraphK2Node_StateEntryNode_1171F3CF4F172CB47D28AB9C398A4C9B_Logic_State_FC6653DB4EFAEF9CAE58FFB796940E53();


// Function  DSM_UseItemGeneric.DSM_UseItemGeneric_C.SMGraphK2Node_GraphPropertyNode_1171F3CF4F172CB47D28AB9C398A4C9B_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_UseItemGeneric_C::SMGraphK2Node_GraphPropertyNode_1171F3CF4F172CB47D28AB9C398A4C9B_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_UseItemGeneric.DSM_UseItemGeneric_C.SMGraphK2Node_GraphPropertyNode_1171F3CF4F172CB47D28AB9C398A4C9B_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_UseItemGeneric_C::SMGraphK2Node_GraphPropertyNode_1171F3CF4F172CB47D28AB9C398A4C9B_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_UseItemGeneric.DSM_UseItemGeneric_C.SMGraphK2Node_GraphPropertyNode_1171F3CF4F172CB47D28AB9C398A4C9B_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_UseItemGeneric_C::SMGraphK2Node_GraphPropertyNode_1171F3CF4F172CB47D28AB9C398A4C9B_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_UseItemGeneric.DSM_UseItemGeneric_C.SMGraphK2Node_GraphPropertyNode_1171F3CF4F172CB47D28AB9C398A4C9B_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_UseItemGeneric_C::SMGraphK2Node_GraphPropertyNode_1171F3CF4F172CB47D28AB9C398A4C9B_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_UseItemGeneric.DSM_UseItemGeneric_C.SMGraphK2Node_GraphPropertyNode_1171F3CF4F172CB47D28AB9C398A4C9B_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_UseItemGeneric_C::SMGraphK2Node_GraphPropertyNode_1171F3CF4F172CB47D28AB9C398A4C9B_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_UseItemGeneric.DSM_UseItemGeneric_C.ExecuteUbergraph_DSM_UseItemGeneric
// Offset::0x3D30810;
void FDSM_UseItemGeneric_C::ExecuteUbergraph_DSM_UseItemGeneric(int32_t EntryPoint,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,bool CallFunc_MatchesTag_ReturnValue,FGameplayTag CallFunc_Map_Find_Value,bool CallFunc_Map_Find_ReturnValue,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_UseItemGeneric.DSM_UseItemGeneric_C.CheckPrerequisites
// Offset::0x3D30810;
bool FDSM_UseItemGeneric_C::CheckPrerequisites(FDialogueSMRequest Request);


// Function  DSM_WipedAnnouncer.DSM_WipedAnnouncer_C.SMGraphK2Node_StateEntryNode_2A6184D7420CF4529F08DBABA29AD3A9_What_Team_Got_Wiped_6B6F343C41EA15DBABC704BFCA14A455
// Offset::0x3D30810;
void FDSM_WipedAnnouncer_C::SMGraphK2Node_StateEntryNode_2A6184D7420CF4529F08DBABA29AD3A9_What_Team_Got_Wiped_6B6F343C41EA15DBABC704BFCA14A455();


// Function  DSM_WipedAnnouncer.DSM_WipedAnnouncer_C.SMGraphK2Node_StateEntryNode_2A6184D7420CF4529F08DBABA29AD3A9_Announcer___Team_Wiped_AA8CE4694C09F4AA03D837AE83CD42BB
// Offset::0x3D30810;
void FDSM_WipedAnnouncer_C::SMGraphK2Node_StateEntryNode_2A6184D7420CF4529F08DBABA29AD3A9_Announcer___Team_Wiped_AA8CE4694C09F4AA03D837AE83CD42BB();


// Function  DSM_WipedAnnouncer.DSM_WipedAnnouncer_C.SMGraphK2Node_GraphPropertyNode_2A6184D7420CF4529F08DBABA29AD3A9_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_WipedAnnouncer_C::SMGraphK2Node_GraphPropertyNode_2A6184D7420CF4529F08DBABA29AD3A9_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_WipedAnnouncer.DSM_WipedAnnouncer_C.SMGraphK2Node_GraphPropertyNode_2A6184D7420CF4529F08DBABA29AD3A9_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_WipedAnnouncer_C::SMGraphK2Node_GraphPropertyNode_2A6184D7420CF4529F08DBABA29AD3A9_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_WipedAnnouncer.DSM_WipedAnnouncer_C.SMGraphK2Node_GraphPropertyNode_2A6184D7420CF4529F08DBABA29AD3A9_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_WipedAnnouncer_C::SMGraphK2Node_GraphPropertyNode_2A6184D7420CF4529F08DBABA29AD3A9_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_WipedAnnouncer.DSM_WipedAnnouncer_C.SMGraphK2Node_GraphPropertyNode_2A6184D7420CF4529F08DBABA29AD3A9_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_WipedAnnouncer_C::SMGraphK2Node_GraphPropertyNode_2A6184D7420CF4529F08DBABA29AD3A9_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_WipedAnnouncer.DSM_WipedAnnouncer_C.ExecuteUbergraph_DSM_WipedAnnouncer
// Offset::0x3D30810;
void FDSM_WipedAnnouncer_C::ExecuteUbergraph_DSM_WipedAnnouncer(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnAnnouncer_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Announcer,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_Base_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Base,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.SMGraphK2Node_StateEntryNode_FAEB195B41243AE81B07148D2D67254C_Tag_Filter_E68693604B5142C3B4D17F87F6F17C30
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::SMGraphK2Node_StateEntryNode_FAEB195B41243AE81B07148D2D67254C_Tag_Filter_E68693604B5142C3B4D17F87F6F17C30();


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.SMGraphK2Node_StateEntryNode_FAEB195B41243AE81B07148D2D67254C_PlayDialogue_5CC509FB4BC098563CD4409B6234A7EA
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::SMGraphK2Node_StateEntryNode_FAEB195B41243AE81B07148D2D67254C_PlayDialogue_5CC509FB4BC098563CD4409B6234A7EA();


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_F77922121F2FEF9C834B583F6A0AE21B
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_F77922121F2FEF9C834B583F6A0AE21B();


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_4057407B20CE351278263AF71B7DBB45
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_4057407B20CE351278263AF71B7DBB45();


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_20CD296683AA943F50FE295743EE81F2
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_20CD296683AA943F50FE295743EE81F2();


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::SMGraphK2Node_GraphPropertyNode_FAEB195B41243AE81B07148D2D67254C_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_PracticeRangeReload.DSM_PracticeRangeReload_C.ExecuteUbergraph_DSM_PracticeRangeReload
// Offset::0x3D30810;
void FDSM_PracticeRangeReload_C::ExecuteUbergraph_DSM_PracticeRangeReload(int32_t EntryPoint,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueLogicStateInstance_TagFilter_C* K2Node_DynamicCast_AsBP_Dialogue_Logic_State_Instance_Tag_Filter,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_PlayerReloadWeapon.DSM_PlayerReloadWeapon_C.SMGraphK2Node_StateEntryNode_C32282C34E13A49D4F43CEB803CD5AFA_PlayDialogue_3B8202494B748C31459797A52DBE0A34
// Offset::0x3D30810;
void FDSM_PlayerReloadWeapon_C::SMGraphK2Node_StateEntryNode_C32282C34E13A49D4F43CEB803CD5AFA_PlayDialogue_3B8202494B748C31459797A52DBE0A34();


// Function  DSM_PlayerReloadWeapon.DSM_PlayerReloadWeapon_C.SMGraphK2Node_GraphPropertyNode_C32282C34E13A49D4F43CEB803CD5AFA_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_PlayerReloadWeapon_C::SMGraphK2Node_GraphPropertyNode_C32282C34E13A49D4F43CEB803CD5AFA_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_PlayerReloadWeapon.DSM_PlayerReloadWeapon_C.SMGraphK2Node_GraphPropertyNode_C32282C34E13A49D4F43CEB803CD5AFA_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_PlayerReloadWeapon_C::SMGraphK2Node_GraphPropertyNode_C32282C34E13A49D4F43CEB803CD5AFA_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_PlayerReloadWeapon.DSM_PlayerReloadWeapon_C.SMGraphK2Node_GraphPropertyNode_C32282C34E13A49D4F43CEB803CD5AFA_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_PlayerReloadWeapon_C::SMGraphK2Node_GraphPropertyNode_C32282C34E13A49D4F43CEB803CD5AFA_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_PlayerReloadWeapon.DSM_PlayerReloadWeapon_C.SMGraphK2Node_GraphPropertyNode_C32282C34E13A49D4F43CEB803CD5AFA_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_PlayerReloadWeapon_C::SMGraphK2Node_GraphPropertyNode_C32282C34E13A49D4F43CEB803CD5AFA_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_PlayerReloadWeapon.DSM_PlayerReloadWeapon_C.SMGraphK2Node_GraphPropertyNode_C32282C34E13A49D4F43CEB803CD5AFA_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_PlayerReloadWeapon_C::SMGraphK2Node_GraphPropertyNode_C32282C34E13A49D4F43CEB803CD5AFA_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_PlayerReloadWeapon.DSM_PlayerReloadWeapon_C.ExecuteUbergraph_DSM_PlayerReloadWeapon
// Offset::0x3D30810;
void FDSM_PlayerReloadWeapon_C::ExecuteUbergraph_DSM_PlayerReloadWeapon(int32_t EntryPoint,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_PlayerReloadWeapon.DSM_PlayerReloadWeapon_C.CheckPrerequisites
// Offset::0x3D30810;
bool FDSM_PlayerReloadWeapon_C::CheckPrerequisites(FDialogueSMRequest Request);


// Function  DSM_Vocalization.DSM_Vocalization_C.SMGraphK2Node_StateEntryNode_2DD0BCDC4F00DFA90B13269E82C8DB27_PlayDialogue_C8B8039148999648F3CD2EACE99E7DBA
// Offset::0x3D30810;
void FDSM_Vocalization_C::SMGraphK2Node_StateEntryNode_2DD0BCDC4F00DFA90B13269E82C8DB27_PlayDialogue_C8B8039148999648F3CD2EACE99E7DBA();


// Function  DSM_Vocalization.DSM_Vocalization_C.SMGraphK2Node_GraphPropertyNode_2DD0BCDC4F00DFA90B13269E82C8DB27_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_Vocalization_C::SMGraphK2Node_GraphPropertyNode_2DD0BCDC4F00DFA90B13269E82C8DB27_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_Vocalization.DSM_Vocalization_C.SMGraphK2Node_GraphPropertyNode_2DD0BCDC4F00DFA90B13269E82C8DB27_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_Vocalization_C::SMGraphK2Node_GraphPropertyNode_2DD0BCDC4F00DFA90B13269E82C8DB27_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_Vocalization.DSM_Vocalization_C.SMGraphK2Node_GraphPropertyNode_2DD0BCDC4F00DFA90B13269E82C8DB27_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_Vocalization_C::SMGraphK2Node_GraphPropertyNode_2DD0BCDC4F00DFA90B13269E82C8DB27_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_Vocalization.DSM_Vocalization_C.SMGraphK2Node_GraphPropertyNode_2DD0BCDC4F00DFA90B13269E82C8DB27_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_Vocalization_C::SMGraphK2Node_GraphPropertyNode_2DD0BCDC4F00DFA90B13269E82C8DB27_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_Vocalization.DSM_Vocalization_C.SMGraphK2Node_GraphPropertyNode_2DD0BCDC4F00DFA90B13269E82C8DB27_18B59905CC6FAC8B56897726853844BB
// Offset::0x3D30810;
void FDSM_Vocalization_C::SMGraphK2Node_GraphPropertyNode_2DD0BCDC4F00DFA90B13269E82C8DB27_18B59905CC6FAC8B56897726853844BB();


// Function  DSM_Vocalization.DSM_Vocalization_C.ExecuteUbergraph_DSM_Vocalization
// Offset::0x3D30810;
void FDSM_Vocalization_C::ExecuteUbergraph_DSM_Vocalization(int32_t EntryPoint,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FGameplayTag CallFunc_GetObjectTag_ReturnValue,FGameplayTag CallFunc_GetVocalizationBucket_ReturnValue,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayDialogue_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_Dialogue,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_FinalRoundOvertime.DSM_FinalRoundOvertime_C.SMGraphK2Node_StateEntryNode_EA0F363B47BA88D317127C9F751911B1_Wait_E6B969EF4EA96AECD310D2B2AAA09F70
// Offset::0x3D30810;
void FDSM_FinalRoundOvertime_C::SMGraphK2Node_StateEntryNode_EA0F363B47BA88D317127C9F751911B1_Wait_E6B969EF4EA96AECD310D2B2AAA09F70();


// Function  DSM_FinalRoundOvertime.DSM_FinalRoundOvertime_C.SMGraphK2Node_StateEntryNode_EA0F363B47BA88D317127C9F751911B1_CoHost___Final_Round_Overtime_0CFBE77C41A207A3C153A8BB5A57092F
// Offset::0x3D30810;
void FDSM_FinalRoundOvertime_C::SMGraphK2Node_StateEntryNode_EA0F363B47BA88D317127C9F751911B1_CoHost___Final_Round_Overtime_0CFBE77C41A207A3C153A8BB5A57092F();


// Function  DSM_FinalRoundOvertime.DSM_FinalRoundOvertime_C.SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_FinalRoundOvertime_C::SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_FinalRoundOvertime.DSM_FinalRoundOvertime_C.SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_FinalRoundOvertime_C::SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_FinalRoundOvertime.DSM_FinalRoundOvertime_C.SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_FinalRoundOvertime_C::SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_FinalRoundOvertime.DSM_FinalRoundOvertime_C.SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_FinalRoundOvertime_C::SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_FinalRoundOvertime.DSM_FinalRoundOvertime_C.SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_FinalRoundOvertime_C::SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_FinalRoundOvertime.DSM_FinalRoundOvertime_C.SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_FinalRoundOvertime_C::SMGraphK2Node_GraphPropertyNode_EA0F363B47BA88D317127C9F751911B1_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_FinalRoundOvertime.DSM_FinalRoundOvertime_C.ExecuteUbergraph_DSM_FinalRoundOvertime
// Offset::0x3D30810;
void FDSM_FinalRoundOvertime_C::ExecuteUbergraph_DSM_FinalRoundOvertime(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_GameShowEventAlienInvasionStopped.DSM_GameShowEventAlienInvasionStopped_C.SMGraphK2Node_StateEntryNode_477DBACB44798B151CD38B81F063B2F6_Wait_98DA3B0242E66F001392BAAD83291405
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasionStopped_C::SMGraphK2Node_StateEntryNode_477DBACB44798B151CD38B81F063B2F6_Wait_98DA3B0242E66F001392BAAD83291405();


// Function  DSM_GameShowEventAlienInvasionStopped.DSM_GameShowEventAlienInvasionStopped_C.SMGraphK2Node_StateEntryNode_477DBACB44798B151CD38B81F063B2F6_CoHost___Alien_Invasion_Stopped_ABCDF9B64B58F22B14A37A91CD50ED40
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasionStopped_C::SMGraphK2Node_StateEntryNode_477DBACB44798B151CD38B81F063B2F6_CoHost___Alien_Invasion_Stopped_ABCDF9B64B58F22B14A37A91CD50ED40();


// Function  DSM_GameShowEventAlienInvasionStopped.DSM_GameShowEventAlienInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventAlienInvasionStopped.DSM_GameShowEventAlienInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventAlienInvasionStopped.DSM_GameShowEventAlienInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventAlienInvasionStopped.DSM_GameShowEventAlienInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventAlienInvasionStopped.DSM_GameShowEventAlienInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventAlienInvasionStopped.DSM_GameShowEventAlienInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_477DBACB44798B151CD38B81F063B2F6_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventAlienInvasionStopped.DSM_GameShowEventAlienInvasionStopped_C.ExecuteUbergraph_DSM_GameShowEventAlienInvasionStopped
// Offset::0x3D30810;
void FDSM_GameShowEventAlienInvasionStopped_C::ExecuteUbergraph_DSM_GameShowEventAlienInvasionStopped(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_GameShowEventDeathMatchStopped.DSM_GameShowEventDeathMatchStopped_C.SMGraphK2Node_StateEntryNode_4AE58558473903BEEF0330A08A3F14E4_Wait_A2E2B06E4E0BB75698BFC9B8CAB3367C
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatchStopped_C::SMGraphK2Node_StateEntryNode_4AE58558473903BEEF0330A08A3F14E4_Wait_A2E2B06E4E0BB75698BFC9B8CAB3367C();


// Function  DSM_GameShowEventDeathMatchStopped.DSM_GameShowEventDeathMatchStopped_C.SMGraphK2Node_StateEntryNode_4AE58558473903BEEF0330A08A3F14E4_CoHost___DeathMatch_Stopped_52095DC04E1815DFB74693929C9065EA
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatchStopped_C::SMGraphK2Node_StateEntryNode_4AE58558473903BEEF0330A08A3F14E4_CoHost___DeathMatch_Stopped_52095DC04E1815DFB74693929C9065EA();


// Function  DSM_GameShowEventDeathMatchStopped.DSM_GameShowEventDeathMatchStopped_C.SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatchStopped_C::SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventDeathMatchStopped.DSM_GameShowEventDeathMatchStopped_C.SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatchStopped_C::SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventDeathMatchStopped.DSM_GameShowEventDeathMatchStopped_C.SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatchStopped_C::SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventDeathMatchStopped.DSM_GameShowEventDeathMatchStopped_C.SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatchStopped_C::SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventDeathMatchStopped.DSM_GameShowEventDeathMatchStopped_C.SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatchStopped_C::SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventDeathMatchStopped.DSM_GameShowEventDeathMatchStopped_C.SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatchStopped_C::SMGraphK2Node_GraphPropertyNode_4AE58558473903BEEF0330A08A3F14E4_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventDeathMatchStopped.DSM_GameShowEventDeathMatchStopped_C.ExecuteUbergraph_DSM_GameShowEventDeathMatchStopped
// Offset::0x3D30810;
void FDSM_GameShowEventDeathMatchStopped_C::ExecuteUbergraph_DSM_GameShowEventDeathMatchStopped(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_GameShowEventLowerGravityStopped.DSM_GameShowEventLowerGravityStopped_C.SMGraphK2Node_StateEntryNode_361E038E43CE01A2E1DD69A9A383C124_Wait_59215F2D451B593136F47F949E14383A
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravityStopped_C::SMGraphK2Node_StateEntryNode_361E038E43CE01A2E1DD69A9A383C124_Wait_59215F2D451B593136F47F949E14383A();


// Function  DSM_GameShowEventLowerGravityStopped.DSM_GameShowEventLowerGravityStopped_C.SMGraphK2Node_StateEntryNode_361E038E43CE01A2E1DD69A9A383C124_CoHost___Lower_Gravity_Stopped_5E21673349AB07F7FFF8C380B9F8969F
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravityStopped_C::SMGraphK2Node_StateEntryNode_361E038E43CE01A2E1DD69A9A383C124_CoHost___Lower_Gravity_Stopped_5E21673349AB07F7FFF8C380B9F8969F();


// Function  DSM_GameShowEventLowerGravityStopped.DSM_GameShowEventLowerGravityStopped_C.SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravityStopped_C::SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventLowerGravityStopped.DSM_GameShowEventLowerGravityStopped_C.SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravityStopped_C::SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventLowerGravityStopped.DSM_GameShowEventLowerGravityStopped_C.SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravityStopped_C::SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventLowerGravityStopped.DSM_GameShowEventLowerGravityStopped_C.SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravityStopped_C::SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventLowerGravityStopped.DSM_GameShowEventLowerGravityStopped_C.SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravityStopped_C::SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventLowerGravityStopped.DSM_GameShowEventLowerGravityStopped_C.SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravityStopped_C::SMGraphK2Node_GraphPropertyNode_361E038E43CE01A2E1DD69A9A383C124_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventLowerGravityStopped.DSM_GameShowEventLowerGravityStopped_C.ExecuteUbergraph_DSM_GameShowEventLowerGravityStopped
// Offset::0x3D30810;
void FDSM_GameShowEventLowerGravityStopped_C::ExecuteUbergraph_DSM_GameShowEventLowerGravityStopped(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_GameShowEventMegaDamageStopped.DSM_GameShowEventMegaDamageStopped_C.SMGraphK2Node_StateEntryNode_852A02EF49E0E804C9E55E8FACEC2330_CoHost___Mega_Damage_Stopped_63E19ADB4D91AA3B936AA3B3FCC3F6EF
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamageStopped_C::SMGraphK2Node_StateEntryNode_852A02EF49E0E804C9E55E8FACEC2330_CoHost___Mega_Damage_Stopped_63E19ADB4D91AA3B936AA3B3FCC3F6EF();


// Function  DSM_GameShowEventMegaDamageStopped.DSM_GameShowEventMegaDamageStopped_C.SMGraphK2Node_GraphPropertyNode_852A02EF49E0E804C9E55E8FACEC2330_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamageStopped_C::SMGraphK2Node_GraphPropertyNode_852A02EF49E0E804C9E55E8FACEC2330_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventMegaDamageStopped.DSM_GameShowEventMegaDamageStopped_C.SMGraphK2Node_GraphPropertyNode_852A02EF49E0E804C9E55E8FACEC2330_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamageStopped_C::SMGraphK2Node_GraphPropertyNode_852A02EF49E0E804C9E55E8FACEC2330_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventMegaDamageStopped.DSM_GameShowEventMegaDamageStopped_C.SMGraphK2Node_GraphPropertyNode_852A02EF49E0E804C9E55E8FACEC2330_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamageStopped_C::SMGraphK2Node_GraphPropertyNode_852A02EF49E0E804C9E55E8FACEC2330_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventMegaDamageStopped.DSM_GameShowEventMegaDamageStopped_C.SMGraphK2Node_GraphPropertyNode_852A02EF49E0E804C9E55E8FACEC2330_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamageStopped_C::SMGraphK2Node_GraphPropertyNode_852A02EF49E0E804C9E55E8FACEC2330_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventMegaDamageStopped.DSM_GameShowEventMegaDamageStopped_C.ExecuteUbergraph_DSM_GameShowEventMegaDamageStopped
// Offset::0x3D30810;
void FDSM_GameShowEventMegaDamageStopped_C::ExecuteUbergraph_DSM_GameShowEventMegaDamageStopped(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_GameShowEventMeteorShowerStopped.DSM_GameShowEventMeteorShowerStopped_C.SMGraphK2Node_StateEntryNode_717FEB154264FAA4A680E7A4ED084129_CoHost___Meteor_Shower_Stopped_CABE6BC2473878EB61389A9A5204473B
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShowerStopped_C::SMGraphK2Node_StateEntryNode_717FEB154264FAA4A680E7A4ED084129_CoHost___Meteor_Shower_Stopped_CABE6BC2473878EB61389A9A5204473B();


// Function  DSM_GameShowEventMeteorShowerStopped.DSM_GameShowEventMeteorShowerStopped_C.SMGraphK2Node_GraphPropertyNode_717FEB154264FAA4A680E7A4ED084129_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShowerStopped_C::SMGraphK2Node_GraphPropertyNode_717FEB154264FAA4A680E7A4ED084129_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventMeteorShowerStopped.DSM_GameShowEventMeteorShowerStopped_C.SMGraphK2Node_GraphPropertyNode_717FEB154264FAA4A680E7A4ED084129_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShowerStopped_C::SMGraphK2Node_GraphPropertyNode_717FEB154264FAA4A680E7A4ED084129_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventMeteorShowerStopped.DSM_GameShowEventMeteorShowerStopped_C.SMGraphK2Node_GraphPropertyNode_717FEB154264FAA4A680E7A4ED084129_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShowerStopped_C::SMGraphK2Node_GraphPropertyNode_717FEB154264FAA4A680E7A4ED084129_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventMeteorShowerStopped.DSM_GameShowEventMeteorShowerStopped_C.SMGraphK2Node_GraphPropertyNode_717FEB154264FAA4A680E7A4ED084129_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShowerStopped_C::SMGraphK2Node_GraphPropertyNode_717FEB154264FAA4A680E7A4ED084129_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventMeteorShowerStopped.DSM_GameShowEventMeteorShowerStopped_C.ExecuteUbergraph_DSM_GameShowEventMeteorShowerStopped
// Offset::0x3D30810;
void FDSM_GameShowEventMeteorShowerStopped_C::ExecuteUbergraph_DSM_GameShowEventMeteorShowerStopped(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_GameShowEventRetroInvasionStopped.DSM_GameShowEventRetroInvasionStopped_C.SMGraphK2Node_StateEntryNode_D4C3F2CE4930BD6CE450B8B5811D0777_Wait_77498F3448ED5DF1C731EB9E3DE535E6
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvasionStopped_C::SMGraphK2Node_StateEntryNode_D4C3F2CE4930BD6CE450B8B5811D0777_Wait_77498F3448ED5DF1C731EB9E3DE535E6();


// Function  DSM_GameShowEventRetroInvasionStopped.DSM_GameShowEventRetroInvasionStopped_C.SMGraphK2Node_StateEntryNode_D4C3F2CE4930BD6CE450B8B5811D0777_CoHost___Retro_Invasion_82_Stopped_B38E918341A225448B72DDA327E2E63C
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvasionStopped_C::SMGraphK2Node_StateEntryNode_D4C3F2CE4930BD6CE450B8B5811D0777_CoHost___Retro_Invasion_82_Stopped_B38E918341A225448B72DDA327E2E63C();


// Function  DSM_GameShowEventRetroInvasionStopped.DSM_GameShowEventRetroInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventRetroInvasionStopped.DSM_GameShowEventRetroInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_GameShowEventRetroInvasionStopped.DSM_GameShowEventRetroInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventRetroInvasionStopped.DSM_GameShowEventRetroInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventRetroInvasionStopped.DSM_GameShowEventRetroInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_GameShowEventRetroInvasionStopped.DSM_GameShowEventRetroInvasionStopped_C.SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvasionStopped_C::SMGraphK2Node_GraphPropertyNode_D4C3F2CE4930BD6CE450B8B5811D0777_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventRetroInvasionStopped.DSM_GameShowEventRetroInvasionStopped_C.ExecuteUbergraph_DSM_GameShowEventRetroInvasionStopped
// Offset::0x3D30810;
void FDSM_GameShowEventRetroInvasionStopped_C::ExecuteUbergraph_DSM_GameShowEventRetroInvasionStopped(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_GameShowEventVolatileContestantStopped.DSM_GameShowEventVolatileContestantStopped_C.SMGraphK2Node_StateEntryNode_CE3CDC73455270D9A9506491CF06B6FA_CoHost___Volatile_Contestant_Stopped_D9C6DAAE49FA06E61DD8F6911449F1E5
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestantStopped_C::SMGraphK2Node_StateEntryNode_CE3CDC73455270D9A9506491CF06B6FA_CoHost___Volatile_Contestant_Stopped_D9C6DAAE49FA06E61DD8F6911449F1E5();


// Function  DSM_GameShowEventVolatileContestantStopped.DSM_GameShowEventVolatileContestantStopped_C.SMGraphK2Node_GraphPropertyNode_CE3CDC73455270D9A9506491CF06B6FA_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestantStopped_C::SMGraphK2Node_GraphPropertyNode_CE3CDC73455270D9A9506491CF06B6FA_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_GameShowEventVolatileContestantStopped.DSM_GameShowEventVolatileContestantStopped_C.SMGraphK2Node_GraphPropertyNode_CE3CDC73455270D9A9506491CF06B6FA_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestantStopped_C::SMGraphK2Node_GraphPropertyNode_CE3CDC73455270D9A9506491CF06B6FA_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_GameShowEventVolatileContestantStopped.DSM_GameShowEventVolatileContestantStopped_C.SMGraphK2Node_GraphPropertyNode_CE3CDC73455270D9A9506491CF06B6FA_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestantStopped_C::SMGraphK2Node_GraphPropertyNode_CE3CDC73455270D9A9506491CF06B6FA_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_GameShowEventVolatileContestantStopped.DSM_GameShowEventVolatileContestantStopped_C.SMGraphK2Node_GraphPropertyNode_CE3CDC73455270D9A9506491CF06B6FA_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestantStopped_C::SMGraphK2Node_GraphPropertyNode_CE3CDC73455270D9A9506491CF06B6FA_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_GameShowEventVolatileContestantStopped.DSM_GameShowEventVolatileContestantStopped_C.ExecuteUbergraph_DSM_GameShowEventVolatileContestantStopped
// Offset::0x3D30810;
void FDSM_GameShowEventVolatileContestantStopped_C::ExecuteUbergraph_DSM_GameShowEventVolatileContestantStopped(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_StateEntryNode_37E42E424BD3A808773E9B9786079683_Wait_977C00BD4256EB4DCFDFCA9FA39D4A9B
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_StateEntryNode_37E42E424BD3A808773E9B9786079683_Wait_977C00BD4256EB4DCFDFCA9FA39D4A9B();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_StateEntryNode_37E42E424BD3A808773E9B9786079683_Commentator___Halftime_DC2F1E0A4E3EAE10B833AF89D0ABA111
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_StateEntryNode_37E42E424BD3A808773E9B9786079683_Commentator___Halftime_DC2F1E0A4E3EAE10B833AF89D0ABA111();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_StateEntryNode_37E42E424BD3A808773E9B9786079683_CoHost___Answer_989A743249CB25E29FB4C19673BC7A93
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_StateEntryNode_37E42E424BD3A808773E9B9786079683_CoHost___Answer_989A743249CB25E29FB4C19673BC7A93();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_Halfway.DSM_Halfway_C.SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_Halfway_C::SMGraphK2Node_GraphPropertyNode_37E42E424BD3A808773E9B9786079683_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_Halfway.DSM_Halfway_C.ExecuteUbergraph_DSM_Halfway
// Offset::0x3D30810;
void FDSM_Halfway_C::ExecuteUbergraph_DSM_Halfway(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_Overtime.DSM_Overtime_C.SMGraphK2Node_StateEntryNode_8543059347EFD164A51ECFA9CB3A29F1_Wait_2A36FA984A8D3729489BC1BE751AA019
// Offset::0x3D30810;
void FDSM_Overtime_C::SMGraphK2Node_StateEntryNode_8543059347EFD164A51ECFA9CB3A29F1_Wait_2A36FA984A8D3729489BC1BE751AA019();


// Function  DSM_Overtime.DSM_Overtime_C.SMGraphK2Node_StateEntryNode_8543059347EFD164A51ECFA9CB3A29F1_CoHost___Overtime_771555BB4C7E79D43A0C4C9414235824
// Offset::0x3D30810;
void FDSM_Overtime_C::SMGraphK2Node_StateEntryNode_8543059347EFD164A51ECFA9CB3A29F1_CoHost___Overtime_771555BB4C7E79D43A0C4C9414235824();


// Function  DSM_Overtime.DSM_Overtime_C.SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_Overtime_C::SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_Overtime.DSM_Overtime_C.SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_A20978DA60E5652D4C2282FE857519F5
// Offset::0x3D30810;
void FDSM_Overtime_C::SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_A20978DA60E5652D4C2282FE857519F5();


// Function  DSM_Overtime.DSM_Overtime_C.SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_Overtime_C::SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_Overtime.DSM_Overtime_C.SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_Overtime_C::SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_Overtime.DSM_Overtime_C.SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_2CBD9EB82C7B7C2A22E7305E5262474D
// Offset::0x3D30810;
void FDSM_Overtime_C::SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_2CBD9EB82C7B7C2A22E7305E5262474D();


// Function  DSM_Overtime.DSM_Overtime_C.SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_Overtime_C::SMGraphK2Node_GraphPropertyNode_8543059347EFD164A51ECFA9CB3A29F1_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_Overtime.DSM_Overtime_C.ExecuteUbergraph_DSM_Overtime
// Offset::0x3D30810;
void FDSM_Overtime_C::ExecuteUbergraph_DSM_Overtime(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_Wait_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Wait,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_TugOfWar_PlatformContested.DSM_TugOfWar_PlatformContested_C.SMGraphK2Node_StateEntryNode_7AB212434D35503C4F21E9A8174DFDE2_Play_On_CoHost_73A01EC84C07D1B8908D48B679A09EB0
// Offset::0x3D30810;
void FDSM_TugOfWar_PlatformContested_C::SMGraphK2Node_StateEntryNode_7AB212434D35503C4F21E9A8174DFDE2_Play_On_CoHost_73A01EC84C07D1B8908D48B679A09EB0();


// Function  DSM_TugOfWar_PlatformContested.DSM_TugOfWar_PlatformContested_C.SMGraphK2Node_GraphPropertyNode_7AB212434D35503C4F21E9A8174DFDE2_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_TugOfWar_PlatformContested_C::SMGraphK2Node_GraphPropertyNode_7AB212434D35503C4F21E9A8174DFDE2_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_TugOfWar_PlatformContested.DSM_TugOfWar_PlatformContested_C.SMGraphK2Node_GraphPropertyNode_7AB212434D35503C4F21E9A8174DFDE2_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_TugOfWar_PlatformContested_C::SMGraphK2Node_GraphPropertyNode_7AB212434D35503C4F21E9A8174DFDE2_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_TugOfWar_PlatformContested.DSM_TugOfWar_PlatformContested_C.SMGraphK2Node_GraphPropertyNode_7AB212434D35503C4F21E9A8174DFDE2_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_TugOfWar_PlatformContested_C::SMGraphK2Node_GraphPropertyNode_7AB212434D35503C4F21E9A8174DFDE2_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_TugOfWar_PlatformContested.DSM_TugOfWar_PlatformContested_C.SMGraphK2Node_GraphPropertyNode_7AB212434D35503C4F21E9A8174DFDE2_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_TugOfWar_PlatformContested_C::SMGraphK2Node_GraphPropertyNode_7AB212434D35503C4F21E9A8174DFDE2_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_TugOfWar_PlatformContested.DSM_TugOfWar_PlatformContested_C.ExecuteUbergraph_DSM_TugOfWar_PlatformContested
// Offset::0x3D30810;
void FDSM_TugOfWar_PlatformContested_C::ExecuteUbergraph_DSM_TugOfWar_PlatformContested(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCoHost_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Co_Host,bool K2Node_DynamicCast_bSuccess);


// Function  DSM_10SecondsLeftWarning.DSM_10SecondsLeftWarning_C.SMGraphK2Node_StateEntryNode_30DF8B184BF2E3C2C5AC24B0BEF0A9EB_Commentator___10_Second_Warning_20F84B684C1A19B0A98CB3842A0BCDFE
// Offset::0x3D30810;
void FDSM_10SecondsLeftWarning_C::SMGraphK2Node_StateEntryNode_30DF8B184BF2E3C2C5AC24B0BEF0A9EB_Commentator___10_Second_Warning_20F84B684C1A19B0A98CB3842A0BCDFE();


// Function  DSM_10SecondsLeftWarning.DSM_10SecondsLeftWarning_C.SMGraphK2Node_GraphPropertyNode_30DF8B184BF2E3C2C5AC24B0BEF0A9EB_DF7CC22DE6FE46E5F65D04F537E7042F
// Offset::0x3D30810;
void FDSM_10SecondsLeftWarning_C::SMGraphK2Node_GraphPropertyNode_30DF8B184BF2E3C2C5AC24B0BEF0A9EB_DF7CC22DE6FE46E5F65D04F537E7042F();


// Function  DSM_10SecondsLeftWarning.DSM_10SecondsLeftWarning_C.SMGraphK2Node_GraphPropertyNode_30DF8B184BF2E3C2C5AC24B0BEF0A9EB_96B795C34CF8ECE4812C3463ABFBCDDF
// Offset::0x3D30810;
void FDSM_10SecondsLeftWarning_C::SMGraphK2Node_GraphPropertyNode_30DF8B184BF2E3C2C5AC24B0BEF0A9EB_96B795C34CF8ECE4812C3463ABFBCDDF();


// Function  DSM_10SecondsLeftWarning.DSM_10SecondsLeftWarning_C.SMGraphK2Node_GraphPropertyNode_30DF8B184BF2E3C2C5AC24B0BEF0A9EB_7029191DC382CD1DEADCCBBCD33EDE2E
// Offset::0x3D30810;
void FDSM_10SecondsLeftWarning_C::SMGraphK2Node_GraphPropertyNode_30DF8B184BF2E3C2C5AC24B0BEF0A9EB_7029191DC382CD1DEADCCBBCD33EDE2E();


// Function  DSM_10SecondsLeftWarning.DSM_10SecondsLeftWarning_C.SMGraphK2Node_GraphPropertyNode_30DF8B184BF2E3C2C5AC24B0BEF0A9EB_26AE8674113BF0F399A68E15984CFCED
// Offset::0x3D30810;
void FDSM_10SecondsLeftWarning_C::SMGraphK2Node_GraphPropertyNode_30DF8B184BF2E3C2C5AC24B0BEF0A9EB_26AE8674113BF0F399A68E15984CFCED();


// Function  DSM_10SecondsLeftWarning.DSM_10SecondsLeftWarning_C.ExecuteUbergraph_DSM_10SecondsLeftWarning
// Offset::0x3D30810;
void FDSM_10SecondsLeftWarning_C::ExecuteUbergraph_DSM_10SecondsLeftWarning(int32_t EntryPoint,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess,FBP_DialogueStateInstance_PlayOnCommentator_C* K2Node_DynamicCast_AsBP_Dialogue_State_Instance_Play_on_Commentator,bool K2Node_DynamicCast_bSuccess);


// Function  BP_DialogueStateInstance_PlayOnAnnouncer.BP_DialogueStateInstance_PlayOnAnnouncer_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateInstance_PlayOnAnnouncer_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_DialogueStateInstance_PlayOnCoHost.BP_DialogueStateInstance_PlayOnCoHost_C.ConstructionScript
// Offset::0x3D30810;
void FBP_DialogueStateInstance_PlayOnCoHost_C::ConstructionScript(enum class ESMExecutionEnvironment CallFunc_WithExecutionEnvironment_ExecutionEnvironment,bool K2Node_SwitchEnum_CmpSuccess);


// Function  BP_ATK_CargoContainer_02.BP_ATK_CargoContainer_02_C.ExecuteUbergraph_BP_ATK_CargoContainer_02
// Offset::0x3D30810;
void FBP_ATK_CargoContainer_02_C::ExecuteUbergraph_BP_ATK_CargoContainer_02(int32_t EntryPoint);


// Function  BP_ATK_CargoContainer_02.BP_ATK_CargoContainer_02_C.ReceiveBeginPlay
// Offset::0x3D30810;
void FBP_ATK_CargoContainer_02_C::ReceiveBeginPlay();


// Function  BP_DirectionalShield.BP_DirectionalShield_C.BP_ActivateShield_Client
// Offset::0x3D30810;
void FBP_DirectionalShield_C::BP_ActivateShield_Client();


// Function  BP_DirectionalShield.BP_DirectionalShield_C.BP_DeactivateShield_Client
// Offset::0x3D30810;
void FBP_DirectionalShield_C::BP_DeactivateShield_Client();


// Function  BP_DirectionalShield.BP_DirectionalShield_C.Dissolve__FinishedFunc
// Offset::0x3D30810;
void FBP_DirectionalShield_C::Dissolve__FinishedFunc();


// Function  BP_DirectionalShield.BP_DirectionalShield_C.Dissolve__UpdateFunc
// Offset::0x3D30810;
void FBP_DirectionalShield_C::Dissolve__UpdateFunc();


// Function  BP_DirectionalShield.BP_DirectionalShield_C.ExecuteUbergraph_BP_DirectionalShield
// Offset::0x3D30810;
void FBP_DirectionalShield_C::ExecuteUbergraph_BP_DirectionalShield(int32_t EntryPoint);


// Function  BP_DirectionalShield.BP_DirectionalShield_C.Initialize__FinishedFunc
// Offset::0x3D30810;
void FBP_DirectionalShield_C::Initialize__FinishedFunc();


// Function  BP_DirectionalShield.BP_DirectionalShield_C.Initialize__UpdateFunc
// Offset::0x3D30810;
void FBP_DirectionalShield_C::Initialize__UpdateFunc();


// Function  BP_DirectionalShield.BP_DirectionalShield_C.StartEmissive__FinishedFunc
// Offset::0x3D30810;
void FBP_DirectionalShield_C::StartEmissive__FinishedFunc();


// Function  BP_DirectionalShield.BP_DirectionalShield_C.StartEmissive__UpdateFunc
// Offset::0x3D30810;
void FBP_DirectionalShield_C::StartEmissive__UpdateFunc();


// Function  BP_CashGrabCashCase.BP_CashGrabCashCase_C.UserConstructionScript
// Offset::0x3D30810;
void FBP_CashGrabCashCase_C::UserConstructionScript(double CallFunc_RandomFloat_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,FRotator CallFunc_MakeRotator_ReturnValue,FHitResult CallFunc_K2_SetWorldRotation_SweepHitResult,float CallFunc_SetCustomPrimitiveDataFloat_Value_NarrowingCast,float CallFunc_MakeRotator_Yaw_NarrowingCast);


// Function  BP_FlagPoleFB_02.BP_FlagPoleFB_02_C.UserConstructionScript
// Offset::0x3D30810;
void FBP_FlagPoleFB_02_C::UserConstructionScript(FHitResult CallFunc_K2_AddWorldRotation_SweepHitResult,FVector CallFunc_K2_GetComponentLocation_ReturnValue,FLinearColor CallFunc_GetVectorParameterValue_ReturnValue,FVector CallFunc_Conv_LinearColorToVector_ReturnValue,FVector CallFunc_Add_VectorVector_ReturnValue,FRotator CallFunc_FindLookAtRotation_ReturnValue,FVector CallFunc_K2_GetComponentScale_ReturnValue,FHitResult CallFunc_K2_SetWorldRotation_SweepHitResult,float CallFunc_MakeLiteralFloat_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,FVector CallFunc_Multiply_VectorFloat_ReturnValue,FVector CallFunc_MakeVector_ReturnValue,FHitResult CallFunc_K2_AddLocalOffset_SweepHitResult,double CallFunc_Multiply_DoubleDouble_A_WideningCast);


// Function  BP_FlagPoleFB_02.BP_FlagPoleFB_02_C.ReceiveBeginPlay
// Offset::0x3D30810;
void FBP_FlagPoleFB_02_C::ReceiveBeginPlay();


// Function  BP_FlagPoleFB_02.BP_FlagPoleFB_02_C.ExecuteUbergraph_BP_FlagPoleFB_02
// Offset::0x3D30810;
void FBP_FlagPoleFB_02_C::ExecuteUbergraph_BP_FlagPoleFB_02(int32_t EntryPoint,FLinearColor CallFunc_GetVectorParameterValue_ReturnValue,FVector CallFunc_Conv_LinearColorToVector_ReturnValue,FVector CallFunc_K2_GetComponentLocation_ReturnValue,FHitResult CallFunc_K2_AddWorldRotation_SweepHitResult,FVector CallFunc_Add_VectorVector_ReturnValue,FRotator CallFunc_FindLookAtRotation_ReturnValue,FHitResult CallFunc_K2_SetWorldRotation_SweepHitResult);


// Function  BP_GameShowEvent_LowerGravity.BP_GameShowEvent_LowerGravity_C.StopEvent_Server
// Offset::0x3D30810;
bool FBP_GameShowEvent_LowerGravity_C::StopEvent_Server();


// Function  BP_GameShowEvent_LowerGravity.BP_GameShowEvent_LowerGravity_C.StartEvent_Server
// Offset::0x3D30810;
bool FBP_GameShowEvent_LowerGravity_C::StartEvent_Server();


// Function  MainMenu.MainMenu_C.ReceiveBeginPlay
// Offset::0x3D30810;
void FMainMenu_C::ReceiveBeginPlay();


// Function  WBP_DI_DefaultCheckboxStyle.WBP_DI_DefaultCheckboxStyle_C.GetCheckBoxWidget
// Offset::0x3D30810;
FCheckBox* FWBP_DI_DefaultCheckboxStyle_C::GetCheckBoxWidget();


// Function  WBP_GameModifierListEntry.WBP_GameModifierListEntry_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_GameModifierListEntry_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_CashoutTabBoardPlayer.WBP_CashoutTabBoardPlayer_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_CashoutTabBoardPlayer_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_ExtrasPageLinkEntry.WBP_ExtrasPageLinkEntry_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_ExtrasPageLinkEntry_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_CustomizationCollectionListItemWidget.WBP_CustomizationCollectionListItemWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_CustomizationCollectionListItemWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_ItemProgression.WBP_ItemProgression_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_ItemProgression_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WABP_Revolver_02_FoundStick_Frontend.WABP_Revolver_02_FoundStick_Frontend_C.ExecuteUbergraph_WABP_Revolver_02_FoundStick_Frontend
// Offset::0x3D30810;
void FWABP_Revolver_02_FoundStick_Frontend_C::ExecuteUbergraph_WABP_Revolver_02_FoundStick_Frontend(int32_t EntryPoint);


// Function  WABP_Revolver_02_FoundStick.WABP_Revolver_02_FoundStick_C.ExecuteUbergraph_WABP_Revolver_02_FoundStick
// Offset::0x3D30810;
void FWABP_Revolver_02_FoundStick_C::ExecuteUbergraph_WABP_Revolver_02_FoundStick(int32_t EntryPoint);


// Function  WABP_GrenadeSonar_01_Frontend.WABP_GrenadeSonar_01_Frontend_C.EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeSonar_01_Frontend_AnimGraphNode_ControlRig_C49794144C45C40204A8B7B9453461EF
// Offset::0x3D30810;
void FWABP_GrenadeSonar_01_Frontend_C::EvaluateGraphExposedInputs_ExecuteUbergraph_WABP_GrenadeSonar_01_Frontend_AnimGraphNode_ControlRig_C49794144C45C40204A8B7B9453461EF();


// Function  WABP_GrenadeSonar_01_Frontend.WABP_GrenadeSonar_01_Frontend_C.ExecuteUbergraph_WABP_GrenadeSonar_01_Frontend
// Offset::0x3D30810;
void FWABP_GrenadeSonar_01_Frontend_C::ExecuteUbergraph_WABP_GrenadeSonar_01_Frontend(int32_t EntryPoint,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_Multiply_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet_Alpha_NarrowingCast);


// Function  WABP_C4.WABP_C4_C.ExecuteUbergraph_WABP_C4
// Offset::0x3D30810;
void FWABP_C4_C::ExecuteUbergraph_WABP_C4(int32_t EntryPoint);


// Function  WABP_ThrowingKnives_CD.WABP_ThrowingKnives_CD_C.ExecuteUbergraph_WABP_ThrowingKnives_CD
// Offset::0x3D30810;
void FWABP_ThrowingKnives_CD_C::ExecuteUbergraph_WABP_ThrowingKnives_CD(int32_t EntryPoint);


// Function  WABP_BattleRifle_01.WABP_BattleRifle_01_C.ExecuteUbergraph_WABP_BattleRifle_01
// Offset::0x3D30810;
void FWABP_BattleRifle_01_C::ExecuteUbergraph_WABP_BattleRifle_01(int32_t EntryPoint);


// Function  WABP_Shotgun_03_RetroComputer.WABP_Shotgun_03_RetroComputer_C.ExecuteUbergraph_WABP_Shotgun_03_RetroComputer
// Offset::0x3D30810;
void FWABP_Shotgun_03_RetroComputer_C::ExecuteUbergraph_WABP_Shotgun_03_RetroComputer(int32_t EntryPoint);


// Function  WABP_Tiny_Frontend.WABP_Tiny_Frontend_C.ExecuteUbergraph_WABP_Tiny_Frontend
// Offset::0x3D30810;
void FWABP_Tiny_Frontend_C::ExecuteUbergraph_WABP_Tiny_Frontend(int32_t EntryPoint);


// Function  WABP_Tiny.WABP_Tiny_C.ExecuteUbergraph_WABP_Tiny
// Offset::0x3D30810;
void FWABP_Tiny_C::ExecuteUbergraph_WABP_Tiny(int32_t EntryPoint);


// Function  WABP_Launcher_02_GiftWrapped_01.WABP_Launcher_02_GiftWrapped_01_C.ExecuteUbergraph_WABP_Launcher_02_GiftWrapped_01
// Offset::0x3D30810;
void FWABP_Launcher_02_GiftWrapped_01_C::ExecuteUbergraph_WABP_Launcher_02_GiftWrapped_01(int32_t EntryPoint);


// Function  WABP_Smg_01_Retro.WABP_Smg_01_Retro_C.ExecuteUbergraph_WABP_Smg_01_Retro
// Offset::0x3D30810;
void FWABP_Smg_01_Retro_C::ExecuteUbergraph_WABP_Smg_01_Retro(int32_t EntryPoint);


// Function  WABP_LewisGun_01.WABP_LewisGun_01_C.ExecuteUbergraph_WABP_LewisGun_01
// Offset::0x3D30810;
void FWABP_LewisGun_01_C::ExecuteUbergraph_WABP_LewisGun_01(int32_t EntryPoint);


// Function  WABP_Defibrillator_01_A.WABP_Defibrillator_01_A_C.ExecuteUbergraph_WABP_Defibrillator_01_A
// Offset::0x3D30810;
void FWABP_Defibrillator_01_A_C::ExecuteUbergraph_WABP_Defibrillator_01_A(int32_t EntryPoint);


// Function  WABP_Flamethrower_01.WABP_Flamethrower_01_C.ExecuteUbergraph_WABP_Flamethrower_01
// Offset::0x3D30810;
void FWABP_Flamethrower_01_C::ExecuteUbergraph_WABP_Flamethrower_01(int32_t EntryPoint);


// Function  WABP_ThrowingKnives_Scissors_Frontend.WABP_ThrowingKnives_Scissors_Frontend_C.ExecuteUbergraph_WABP_ThrowingKnives_Scissors_Frontend
// Offset::0x3D30810;
void FWABP_ThrowingKnives_Scissors_Frontend_C::ExecuteUbergraph_WABP_ThrowingKnives_Scissors_Frontend(int32_t EntryPoint);


// Function  WABP_ThrowingKnives_Scissors.WABP_ThrowingKnives_Scissors_C.ExecuteUbergraph_WABP_ThrowingKnives_Scissors
// Offset::0x3D30810;
void FWABP_ThrowingKnives_Scissors_C::ExecuteUbergraph_WABP_ThrowingKnives_Scissors(int32_t EntryPoint);


// Function  WABP_RemingtonModel1900.WABP_RemingtonModel1900_C.ExecuteUbergraph_WABP_RemingtonModel1900
// Offset::0x3D30810;
void FWABP_RemingtonModel1900_C::ExecuteUbergraph_WABP_RemingtonModel1900(int32_t EntryPoint);


// Function  WABP_AssaultRifle_01.WABP_AssaultRifle_01_C.ExecuteUbergraph_WABP_AssaultRifle_01
// Offset::0x3D30810;
void FWABP_AssaultRifle_01_C::ExecuteUbergraph_WABP_AssaultRifle_01(int32_t EntryPoint);


// Function  WABP_RiotShield.WABP_RiotShield_C.ExecuteUbergraph_WABP_RiotShield
// Offset::0x3D30810;
void FWABP_RiotShield_C::ExecuteUbergraph_WABP_RiotShield(int32_t EntryPoint);


// Function  WABP_PistolSuppressed_01.WABP_PistolSuppressed_01_C.ExecuteUbergraph_WABP_PistolSuppressed_01
// Offset::0x3D30810;
void FWABP_PistolSuppressed_01_C::ExecuteUbergraph_WABP_PistolSuppressed_01(int32_t EntryPoint);


// Function  WABP_Shotgun_02.WABP_Shotgun_02_C.ExecuteUbergraph_WABP_Shotgun_02
// Offset::0x3D30810;
void FWABP_Shotgun_02_C::ExecuteUbergraph_WABP_Shotgun_02(int32_t EntryPoint);


// Function  WABP_FoxTacticalElementum_CheeseSlicer_Frontend.WABP_FoxTacticalElementum_CheeseSlicer_Frontend_C.ExecuteUbergraph_WABP_FoxTacticalElementum_CheeseSlicer_Frontend
// Offset::0x3D30810;
void FWABP_FoxTacticalElementum_CheeseSlicer_Frontend_C::ExecuteUbergraph_WABP_FoxTacticalElementum_CheeseSlicer_Frontend(int32_t EntryPoint);


// Function  WABP_FoxTacticalElementum.WABP_FoxTacticalElementum_C.ExecuteUbergraph_WABP_FoxTacticalElementum
// Offset::0x3D30810;
void FWABP_FoxTacticalElementum_C::ExecuteUbergraph_WABP_FoxTacticalElementum(int32_t EntryPoint);


// Function  WABP_Revolver_02.WABP_Revolver_02_C.ExecuteUbergraph_WABP_Revolver_02
// Offset::0x3D30810;
void FWABP_Revolver_02_C::ExecuteUbergraph_WABP_Revolver_02(int32_t EntryPoint);


// Function  WABP_Mine_01.WABP_Mine_01_C.ExecuteUbergraph_WABP_Mine_01
// Offset::0x3D30810;
void FWABP_Mine_01_C::ExecuteUbergraph_WABP_Mine_01(int32_t EntryPoint);


// Function  WABP_Taser7.WABP_Taser7_C.ExecuteUbergraph_WABP_Taser7
// Offset::0x3D30810;
void FWABP_Taser7_C::ExecuteUbergraph_WABP_Taser7(int32_t EntryPoint);


// Function  MainMenu.MainMenu_C.ExecuteUbergraph_MainMenu
// Offset::0x3D30810;
void FMainMenu_C::ExecuteUbergraph_MainMenu(int32_t EntryPoint);


// Function  BP_DiscoveryGameModeMainMenu.BP_DiscoveryGameModeMainMenu_C.StopVideo
// Offset::0x3D30810;
void FBP_DiscoveryGameModeMainMenu_C::StopVideo();


// Function  BP_DiscoveryGameModeMainMenu.BP_DiscoveryGameModeMainMenu_C.PlayVideo
// Offset::0x3D30810;
void FBP_DiscoveryGameModeMainMenu_C::PlayVideo(FMediaSource* MediaSource,FMediaPlayer* MediaPlayer);


// Function  BP_DiscoveryGameModeMainMenu.BP_DiscoveryGameModeMainMenu_C.GetVideoDuration
// Offset::0x3D30810;
double FBP_DiscoveryGameModeMainMenu_C::GetVideoDuration(FMediaPlayer* Target);


// Function  BP_DiscoveryGameModeMainMenu.BP_DiscoveryGameModeMainMenu_C.ExecuteUbergraph_BP_DiscoveryGameModeMainMenu
// Offset::0x3D30810;
void FBP_DiscoveryGameModeMainMenu_C::ExecuteUbergraph_BP_DiscoveryGameModeMainMenu(int32_t EntryPoint,bool Temp_bool_Has_Been_Initd_Variable,bool Temp_bool_IsClosed_Variable,FMediaSource* K2Node_CustomEvent_MediaSource,FMediaPlayer* K2Node_CustomEvent_MediaPlayer,double CallFunc_GetVideoDuration_ReturnValue,bool CallFunc_Play_ReturnValue,double CallFunc_Subtract_DoubleDouble_ReturnValue,bool CallFunc_OpenSource_ReturnValue,bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable,float CallFunc_Delay_Duration_NarrowingCast);


// Function  BP_FirstPersonPreview.BP_FirstPersonPreview_C.ExecuteUbergraph_BP_FirstPersonPreview
// Offset::0x3D30810;
void FBP_FirstPersonPreview_C::ExecuteUbergraph_BP_FirstPersonPreview(int32_t EntryPoint);


// Function  BP_CinematicWeapon.BP_CinematicWeapon_C.UserConstructionScript
// Offset::0x3D30810;
void FBP_CinematicWeapon_C::UserConstructionScript();


// Function  BP_CinematicWeapon.BP_CinematicWeapon_C.SetLabel
// Offset::0x3D30810;
void FBP_CinematicWeapon_C::SetLabel(FString NewText);


// Function  BP_CinematicWeapon.BP_CinematicWeapon_C.ExecuteUbergraph_BP_CinematicWeapon
// Offset::0x3D30810;
void FBP_CinematicWeapon_C::ExecuteUbergraph_BP_CinematicWeapon(int32_t EntryPoint,FString K2Node_Event_NewText,FText CallFunc_Conv_StringToText_ReturnValue);


// Function  BP_FrontendItemActor.BP_FrontendItemActor_C.ReceiveBeginPlay
// Offset::0x3D30810;
void FBP_FrontendItemActor_C::ReceiveBeginPlay();


// Function  BP_FrontendItemActor.BP_FrontendItemActor_C.ExecuteUbergraph_BP_FrontendItemActor
// Offset::0x3D30810;
void FBP_FrontendItemActor_C::ExecuteUbergraph_BP_FrontendItemActor(int32_t EntryPoint);


// Function  BP_ArchetypePreviewActor.BP_ArchetypePreviewActor_C.ExecuteUbergraph_BP_ArchetypePreviewActor
// Offset::0x3D30810;
void FBP_ArchetypePreviewActor_C::ExecuteUbergraph_BP_ArchetypePreviewActor(int32_t EntryPoint);


// Function  MABP_Avatar_001_AnimationMesh_Skeleton.MABP_Avatar_001_AnimationMesh_Skeleton_C.ExecuteUbergraph_MABP_Avatar_001_AnimationMesh_Skeleton
// Offset::0x3D30810;
void FMABP_Avatar_001_AnimationMesh_Skeleton_C::ExecuteUbergraph_MABP_Avatar_001_AnimationMesh_Skeleton(int32_t EntryPoint);


// Function  MABP_Avatar_001_AnimationMesh_Skeleton.MABP_Avatar_001_AnimationMesh_Skeleton_C.AnimGraph
// Offset::0x3D30810;
void FMABP_Avatar_001_AnimationMesh_Skeleton_C::AnimGraph(FPoseLink InPose,FPoseLink AnimGraph);


// Function  MABP_Physics_Template.MABP_Physics_Template_C.ExecuteUbergraph_MABP_Physics_Template
// Offset::0x3D30810;
void FMABP_Physics_Template_C::ExecuteUbergraph_MABP_Physics_Template(int32_t EntryPoint);


// Function  MABP_Physics_Template.MABP_Physics_Template_C.AnimGraph
// Offset::0x3D30810;
void FMABP_Physics_Template_C::AnimGraph(FPoseLink InPose,FPoseLink AnimGraph);


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.ExecuteUbergraph_ABP_1P_FrontEndPreview
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::ExecuteUbergraph_ABP_1P_FrontEndPreview(int32_t EntryPoint,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,float CallFunc_GetCurveValue_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,bool CallFunc_Less_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_ByteByte_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_ByteByte_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,bool CallFunc_WasAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_EqualEqual_IntInt_ReturnValue,float CallFunc_GetInstanceStateWeight_ReturnValue,bool CallFunc_Less_DoubleDouble_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,float CallFunc_GetInstanceStateWeight_ReturnValue,bool CallFunc_Less_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_ByteByte_ReturnValue,bool CallFunc_WasAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_ByteByte_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_Less_DoubleDouble_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_Greater_IntInt_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_ByteByte_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_ByteByte_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_IsAnimNotifyStateActive_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_EqualEqual_IntInt_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_Greater_IntInt_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_WasAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,float CallFunc_GetCurveValue_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_WasAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_EqualEqual_IntInt_ReturnValue,bool CallFunc_WasAnimNotifyStateActiveInSourceState_ReturnValue,float CallFunc_GetCurveValue_ReturnValue,bool CallFunc_Greater_DoubleDouble_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,float CallFunc_GetCurveValue_ReturnValue,bool CallFunc_Less_DoubleDouble_ReturnValue,float CallFunc_GetCurveValue_ReturnValue,bool CallFunc_Greater_DoubleDouble_ReturnValue,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_ByteByte_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,float CallFunc_GetCurveValue_ReturnValue,bool CallFunc_Less_DoubleDouble_ReturnValue,float CallFunc_GetCurveValue_ReturnValue,bool CallFunc_Greater_DoubleDouble_ReturnValue,bool CallFunc_WasAnimNotifyStateActiveInSourceState_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_WasAnimNotifyStateActiveInAnyState_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_HasTag_ReturnValue,bool CallFunc_EqualEqual_ByteByte_ReturnValue,bool CallFunc_HasTag_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,bool CallFunc_BooleanOR_ReturnValue,bool CallFunc_BooleanAND_ReturnValue,bool CallFunc_Not_PreBool_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,float CallFunc_GetCurveValue_ReturnValue,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue,bool CallFunc_EqualEqual_DoubleDouble_ReturnValue,float CallFunc_GetCurveValue_ReturnValue,int32_t CallFunc_Conv_ByteToInt_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,float CallFunc_GetCurveValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_ReturnValue,double CallFunc_Add_DoubleDouble_ReturnValue,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_Less_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet___FloatProperty_29_NarrowingCast,float K2Node_StructMemberSet___FloatProperty_31_NarrowingCast,double CallFunc_Less_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet___FloatProperty_19_NarrowingCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_Less_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_Less_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet___FloatProperty_37_NarrowingCast,float K2Node_StructMemberSet___FloatProperty_39_NarrowingCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet___FloatProperty_17_NarrowingCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet___FloatProperty_11_NarrowingCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,float K2Node_StructMemberSet___FloatProperty_9_NarrowingCast,double CallFunc_Greater_DoubleDouble_A_WideningCast,double CallFunc_Less_DoubleDouble_A_WideningCast,double CallFunc_Greater_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_Less_DoubleDouble_A_WideningCast,double CallFunc_Greater_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_Multiply_DoubleDouble_A_WideningCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,float CallFunc_Array_Set_Item_NarrowingCast,double CallFunc_EqualEqual_DoubleDouble_A_WideningCast,double CallFunc_Multiply_DoubleDouble_A_WideningCast,double CallFunc_Multiply_DoubleDouble_A_WideningCast);


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_FB60E61D45F442350DB20B902F764420
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_FB60E61D45F442350DB20B902F764420();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_FA675E8A4C343E086FC075BEF94E2219
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_FA675E8A4C343E086FC075BEF94E2219();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_F314C1A048967F66BC3B209E2E5C8AEE
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_F314C1A048967F66BC3B209E2E5C8AEE();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_ED4D421E45A4D0E6DE383C94FEBA9553
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_ED4D421E45A4D0E6DE383C94FEBA9553();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_E6860AB24F0BDF80D053B1AFEF2BE129
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_E6860AB24F0BDF80D053B1AFEF2BE129();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_E684A24C4BF4F734CFD6D4B878AEA600
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_E684A24C4BF4F734CFD6D4B878AEA600();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_D917F7EB403D6E0FAA68D5B3308EED86
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_D917F7EB403D6E0FAA68D5B3308EED86();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_D42585C44A3EEC99A5F159BD8897119A
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_D42585C44A3EEC99A5F159BD8897119A();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_D05EFEB1490C201EBB0A4D803CA640F4
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_D05EFEB1490C201EBB0A4D803CA640F4();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_CEADEF5546923BBE6F31459692CA2CE7
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_CEADEF5546923BBE6F31459692CA2CE7();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_CABD1D564D641DCF35C205B5B5FD542C
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_CABD1D564D641DCF35C205B5B5FD542C();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_C554985F4CA1E15B4A7B9E80B4C5C7E9
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_C554985F4CA1E15B4A7B9E80B4C5C7E9();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_C0BD527B406FB40F8A8F2695D9EB401D
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_C0BD527B406FB40F8A8F2695D9EB401D();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_BEE0184D48B5A403FE8BF8916E32913A
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_BEE0184D48B5A403FE8BF8916E32913A();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_B65665574B894102087155A7B81B49BE
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_B65665574B894102087155A7B81B49BE();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_B37FB3554A7D46B56D18ED829651113B
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_B37FB3554A7D46B56D18ED829651113B();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_B10180DD4F0A0817A62E6B82A47F9CBD
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_B10180DD4F0A0817A62E6B82A47F9CBD();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_AFE719C248F69212ED0B49A467B1E730
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_AFE719C248F69212ED0B49A467B1E730();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_ACD5121C41B219168ACABCB4BFF16985
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_ACD5121C41B219168ACABCB4BFF16985();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_AAA351CE4AF4569BAB9A6E8F050242AA
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_AAA351CE4AF4569BAB9A6E8F050242AA();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_A71D074F4EA66A73BDEF7383750AB2BF
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_A71D074F4EA66A73BDEF7383750AB2BF();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_A47EF92D41B97E3B82032E81CCD0B34C
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_A47EF92D41B97E3B82032E81CCD0B34C();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_A44694BC458DE518FDE0558C5C31E2A9
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_A44694BC458DE518FDE0558C5C31E2A9();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_9999EB6745C36B624ACD1A95E84872AE
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_9999EB6745C36B624ACD1A95E84872AE();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_96E656514B50D62EFCC2A38989612D9D
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_96E656514B50D62EFCC2A38989612D9D();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_91130E7F4F20619408692CB3E2A68774
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_91130E7F4F20619408692CB3E2A68774();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_8DCFD0B24B494694B11A809DEE2A8026
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_8DCFD0B24B494694B11A809DEE2A8026();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_878B2B8B414C25A1280ED78981E51B1A
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_878B2B8B414C25A1280ED78981E51B1A();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_800D229F4B5A48199383918B7D43179A
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_800D229F4B5A48199383918B7D43179A();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_7FDB6A804FA03911EA7717A0D00CFD14
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_7FDB6A804FA03911EA7717A0D00CFD14();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_7CC70CB248E5038A7FF45BA429EC53DB
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_7CC70CB248E5038A7FF45BA429EC53DB();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_7838AE914B31958FDB049A85B93569F5
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_7838AE914B31958FDB049A85B93569F5();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_752C773F45ED966A28BFFDBC6DDE275E
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_752C773F45ED966A28BFFDBC6DDE275E();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_724D09A14A4BFF02FC3FF186D15B4DAB
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_724D09A14A4BFF02FC3FF186D15B4DAB();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_693AFB12452AD7A240B38090E824FF94
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_693AFB12452AD7A240B38090E824FF94();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_4F71A2894EA9BEFDD198208A7DB2E362
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_4F71A2894EA9BEFDD198208A7DB2E362();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_4D0C9A9B4B8BFEA4DD0B2989146E67DE
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_4D0C9A9B4B8BFEA4DD0B2989146E67DE();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_49A33644495294E24F7081B44482A92C
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_49A33644495294E24F7081B44482A92C();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_4729105F4E1CC1ECDE8145ACF3CB6851
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_4729105F4E1CC1ECDE8145ACF3CB6851();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_43051B824D8D673A478FE4A2434F411D
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_43051B824D8D673A478FE4A2434F411D();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_332F0D6946CFCDA5433526BDCC1933B5
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_332F0D6946CFCDA5433526BDCC1933B5();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_25FD43D944354AA60DF4849B6D0952EB
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_25FD43D944354AA60DF4849B6D0952EB();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_23BEFB894AF569E61C44CCA8421E6DF6
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_23BEFB894AF569E61C44CCA8421E6DF6();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_1CECB30340DD656BBA22E3A5F9037BDA
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_1CECB30340DD656BBA22E3A5F9037BDA();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_18200A0D4C707367D394919D30AC05E3
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_18200A0D4C707367D394919D30AC05E3();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_154D409346C7981CA370E3BCE877A357
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_154D409346C7981CA370E3BCE877A357();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_12C01B6C4B13AE90B47C1595680E2AF9
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_12C01B6C4B13AE90B47C1595680E2AF9();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_1180A1A34823D47ED0F9528CAE415914
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_1180A1A34823D47ED0F9528CAE415914();


// Function  BP_CannonBall_Projectile.BP_CannonBall_Projectile_C.ExecuteUbergraph_BP_CannonBall_Projectile
// Offset::0x3D30810;
void FBP_CannonBall_Projectile_C::ExecuteUbergraph_BP_CannonBall_Projectile(int32_t EntryPoint);


// Function  BP_CannonBall_Projectile.BP_CannonBall_Projectile_C.ReceiveBeginPlay
// Offset::0x3D30810;
void FBP_CannonBall_Projectile_C::ReceiveBeginPlay();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_03A4125B4F31FDC3134B61A673F69CD2
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_TransitionResult_03A4125B4F31FDC3134B61A673F69CD2();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_StateMachine_C5F161A547D71BE70AB190801E9C8C7A
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_StateMachine_C5F161A547D71BE70AB190801E9C8C7A();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_StateMachine_1B869DE043353420308A4F9B71870AF3
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_StateMachine_1B869DE043353420308A4F9B71870AF3();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_F680C281498D8B79D759B2A485C4C6F3
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_F680C281498D8B79D759B2A485C4C6F3();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_F58A6E714B49FCE0C01E41B4A449C466
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_F58A6E714B49FCE0C01E41B4A449C466();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_BF9736874A25E9282D415C9C19A5EC95
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_BF9736874A25E9282D415C9C19A5EC95();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_B40BC4B0424D9C4678D530AD64BF8429
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_B40BC4B0424D9C4678D530AD64BF8429();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_6D858AB745701AD274A87B8A52B7BBEE
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_6D858AB745701AD274A87B8A52B7BBEE();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_44AF06B3445929CD7806A985A7CB7983
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_44AF06B3445929CD7806A985A7CB7983();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_0EEAE5D644C74D13B2CCFF83EB8B6A0F
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_0EEAE5D644C74D13B2CCFF83EB8B6A0F();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_09A43EDF499D3E96DEFA04976CBD8DAC
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_SequencePlayer_09A43EDF499D3E96DEFA04976CBD8DAC();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_PoseSelectionMatrix_8A591B474F1578F2E2B73C8C5856C617
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_PoseSelectionMatrix_8A591B474F1578F2E2B73C8C5856C617();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_Layers_D4CF37A1478A18E094DE0B9E1DDEF70D
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_Layers_D4CF37A1478A18E094DE0B9E1DDEF70D();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_ControlRig_841BE8AB442341446942FE8C31720B02
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_1P_FrontEndPreview_AnimGraphNode_ControlRig_841BE8AB442341446942FE8C31720B02();


// Function  ABP_1P_FrontEndPreview.ABP_1P_FrontEndPreview_C.AnimGraph
// Offset::0x3D30810;
void FABP_1P_FrontEndPreview_C::AnimGraph(FPoseLink AnimGraph);


// Function  WBP_DI_Root.WBP_DI_Root_C.ExecuteUbergraph_WBP_DI_Root
// Offset::0x3D30810;
void FWBP_DI_Root_C::ExecuteUbergraph_WBP_DI_Root(int32_t EntryPoint);


// Function  WBP_DI_Root.WBP_DI_Root_C.Construct
// Offset::0x3D30810;
void FWBP_DI_Root_C::Construct();


// Function  WBP_DI_DefaultButtonStyle.WBP_DI_DefaultButtonStyle_C.PreConstruct
// Offset::0x3D30810;
void FWBP_DI_DefaultButtonStyle_C::PreConstruct(bool IsDesignTime);


// Function  WBP_DI_DefaultButtonStyle.WBP_DI_DefaultButtonStyle_C.GetButtonWidget
// Offset::0x3D30810;
FButton* FWBP_DI_DefaultButtonStyle_C::GetButtonWidget();


// Function  WBP_DI_DefaultButtonStyle.WBP_DI_DefaultButtonStyle_C.ExecuteUbergraph_WBP_DI_DefaultButtonStyle
// Offset::0x3D30810;
void FWBP_DI_DefaultButtonStyle_C::ExecuteUbergraph_WBP_DI_DefaultButtonStyle(int32_t EntryPoint,bool K2Node_Event_IsDesignTime);


// Function  WBP_DI_DefaultButtonStyle.WBP_DI_DefaultButtonStyle_C.Construct
// Offset::0x3D30810;
void FWBP_DI_DefaultButtonStyle_C::Construct();


// Function  WBP_DI_DefaultCheckboxStyle.WBP_DI_DefaultCheckboxStyle_C.ExecuteUbergraph_WBP_DI_DefaultCheckboxStyle
// Offset::0x3D30810;
void FWBP_DI_DefaultCheckboxStyle_C::ExecuteUbergraph_WBP_DI_DefaultCheckboxStyle(int32_t EntryPoint,bool K2Node_ComponentBoundEvent_bIsChecked);


// Function  WBP_DI_DefaultComboBoxStyle.WBP_DI_DefaultComboBoxStyle_C.PreConstruct
// Offset::0x3D30810;
void FWBP_DI_DefaultComboBoxStyle_C::PreConstruct(bool IsDesignTime);


// Function  WBP_DI_DefaultComboBoxStyle.WBP_DI_DefaultComboBoxStyle_C.GetComboBoxWidget
// Offset::0x3D30810;
FComboBoxString* FWBP_DI_DefaultComboBoxStyle_C::GetComboBoxWidget();


// Function  WBP_DI_DefaultComboBoxStyle.WBP_DI_DefaultComboBoxStyle_C.ExecuteUbergraph_WBP_DI_DefaultComboBoxStyle
// Offset::0x3D30810;
void FWBP_DI_DefaultComboBoxStyle_C::ExecuteUbergraph_WBP_DI_DefaultComboBoxStyle(int32_t EntryPoint,FString K2Node_ComponentBoundEvent_SelectedItem,enum class ESelectInfo K2Node_ComponentBoundEvent_SelectionType,bool K2Node_Event_IsDesignTime);


// Function  WBP_DI_DefaultComboBoxStyle.WBP_DI_DefaultComboBoxStyle_C.Construct
// Offset::0x3D30810;
void FWBP_DI_DefaultComboBoxStyle_C::Construct();


// Function  WBP_DI_DefaultEditableTextStyle.WBP_DI_DefaultEditableTextStyle_C.PreConstruct
// Offset::0x3D30810;
void FWBP_DI_DefaultEditableTextStyle_C::PreConstruct(bool IsDesignTime);


// Function  WBP_DI_DefaultEditableTextStyle.WBP_DI_DefaultEditableTextStyle_C.GetEditableText
// Offset::0x3D30810;
FEditableText* FWBP_DI_DefaultEditableTextStyle_C::GetEditableText();


// Function  WBP_DI_DefaultEditableTextStyle.WBP_DI_DefaultEditableTextStyle_C.ExecuteUbergraph_WBP_DI_DefaultEditableTextStyle
// Offset::0x3D30810;
void FWBP_DI_DefaultEditableTextStyle_C::ExecuteUbergraph_WBP_DI_DefaultEditableTextStyle(int32_t EntryPoint,FText K2Node_ComponentBoundEvent_Text,bool K2Node_Event_IsDesignTime);


// Function  WBP_DI_DefaultEditableTextStyle.WBP_DI_DefaultEditableTextStyle_C.Construct
// Offset::0x3D30810;
void FWBP_DI_DefaultEditableTextStyle_C::Construct();


// Function  WBP_DI_DefaultMultiLineEditableTextStyle.WBP_DI_DefaultMultiLineEditableTextStyle_C.PreConstruct
// Offset::0x3D30810;
void FWBP_DI_DefaultMultiLineEditableTextStyle_C::PreConstruct(bool IsDesignTime);


// Function  WBP_DI_DefaultMultiLineEditableTextStyle.WBP_DI_DefaultMultiLineEditableTextStyle_C.GetEditableText
// Offset::0x3D30810;
FMultiLineEditableText* FWBP_DI_DefaultMultiLineEditableTextStyle_C::GetEditableText();


// Function  WBP_DI_DefaultMultiLineEditableTextStyle.WBP_DI_DefaultMultiLineEditableTextStyle_C.ExecuteUbergraph_WBP_DI_DefaultMultiLineEditableTextStyle
// Offset::0x3D30810;
void FWBP_DI_DefaultMultiLineEditableTextStyle_C::ExecuteUbergraph_WBP_DI_DefaultMultiLineEditableTextStyle(int32_t EntryPoint,bool K2Node_Event_IsDesignTime,FText K2Node_ComponentBoundEvent_Text);


// Function  WBP_DI_DefaultMultiLineEditableTextStyle.WBP_DI_DefaultMultiLineEditableTextStyle_C.Construct
// Offset::0x3D30810;
void FWBP_DI_DefaultMultiLineEditableTextStyle_C::Construct();


// Function  WBP_DI_DefaultSliderStyle.WBP_DI_DefaultSliderStyle_C.PreConstruct
// Offset::0x3D30810;
void FWBP_DI_DefaultSliderStyle_C::PreConstruct(bool IsDesignTime);


// Function  WBP_DI_DefaultSliderStyle.WBP_DI_DefaultSliderStyle_C.GetSliderWidget
// Offset::0x3D30810;
FSlider* FWBP_DI_DefaultSliderStyle_C::GetSliderWidget();


// Function  WBP_DI_DefaultSliderStyle.WBP_DI_DefaultSliderStyle_C.ExecuteUbergraph_WBP_DI_DefaultSliderStyle
// Offset::0x3D30810;
void FWBP_DI_DefaultSliderStyle_C::ExecuteUbergraph_WBP_DI_DefaultSliderStyle(int32_t EntryPoint,float K2Node_ComponentBoundEvent_Value,bool K2Node_Event_IsDesignTime,double CallFunc_ValueChangedWithContext_NewValue_WideningCast);


// Function  WBP_DI_DefaultSliderStyle.WBP_DI_DefaultSliderStyle_C.Construct
// Offset::0x3D30810;
void FWBP_DI_DefaultSliderStyle_C::Construct();


// Function  WBP_DI_DefaultTextBlockStyle.WBP_DI_DefaultTextBlockStyle_C.PreConstruct
// Offset::0x3D30810;
void FWBP_DI_DefaultTextBlockStyle_C::PreConstruct(bool IsDesignTime);


// Function  WBP_DI_DefaultTextBlockStyle.WBP_DI_DefaultTextBlockStyle_C.GetTextWidget
// Offset::0x3D30810;
FTextBlock* FWBP_DI_DefaultTextBlockStyle_C::GetTextWidget();


// Function  WBP_DI_DefaultTextBlockStyle.WBP_DI_DefaultTextBlockStyle_C.ExecuteUbergraph_WBP_DI_DefaultTextBlockStyle
// Offset::0x3D30810;
void FWBP_DI_DefaultTextBlockStyle_C::ExecuteUbergraph_WBP_DI_DefaultTextBlockStyle(int32_t EntryPoint,bool K2Node_Event_IsDesignTime);


// Function  WBP_DI_DefaultTextBlockStyle.WBP_DI_DefaultTextBlockStyle_C.Construct
// Offset::0x3D30810;
void FWBP_DI_DefaultTextBlockStyle_C::Construct();


// Function  WBP_DI_DefaultWindowStyle.WBP_DI_DefaultWindowStyle_C.SetOpacitySliderValue
// Offset::0x3D30810;
void FWBP_DI_DefaultWindowStyle_C::SetOpacitySliderValue(double NewOpacity,FFormatArgumentData K2Node_MakeStruct_FormatArgumentData,FSlider* CallFunc_GetSliderWidget_ReturnValue,TArray<FFormatArgumentData> K2Node_MakeArray_Array,FText CallFunc_Format_ReturnValue);


// Function  WBP_DI_DefaultWindowStyle.WBP_DI_DefaultWindowStyle_C.SetNewActualWindow
// Offset::0x3D30810;
void FWBP_DI_DefaultWindowStyle_C::SetNewActualWindow(FWidget* InActualWindow);


// Function  WBP_DI_DefaultWindowStyle.WBP_DI_DefaultWindowStyle_C.ResizeStart
// Offset::0x3D30810;
FEventReply FWBP_DI_DefaultWindowStyle_C::ResizeStart(FGeometry MyGeometry,FPointerEvent MouseEvent);


// Function  WBP_DI_DefaultWindowStyle.WBP_DI_DefaultWindowStyle_C.ReloadOpacityValue
// Offset::0x3D30810;
void FWBP_DI_DefaultWindowStyle_C::ReloadOpacityValue(FFeatherWidget* Widget);


// Function  WBP_DI_DefaultWindowStyle.WBP_DI_DefaultWindowStyle_C.OnOpacityChanged
// Offset::0x3D30810;
void FWBP_DI_DefaultWindowStyle_C::OnOpacityChanged(float Value);


// Function  WBP_DI_DefaultWindowStyle.WBP_DI_DefaultWindowStyle_C.Move Start
// Offset::0x3D30810;
FEventReply FWBP_DI_DefaultWindowStyle_C::Move Start(FGeometry MyGeometry,FPointerEvent MouseEvent);


// Function  WBP_DI_DefaultWindowStyle.WBP_DI_DefaultWindowStyle_C.GetWindowContentSlot
// Offset::0x3D30810;
FNamedSlot* FWBP_DI_DefaultWindowStyle_C::GetWindowContentSlot();


// Function  WBP_DI_DefaultWindowStyle.WBP_DI_DefaultWindowStyle_C.ExecuteUbergraph_WBP_DI_DefaultWindowStyle
// Offset::0x3D30810;
void FWBP_DI_DefaultWindowStyle_C::ExecuteUbergraph_WBP_DI_DefaultWindowStyle(int32_t EntryPoint,FDelegate K2Node_CreateDelegate_OutputDelegate,FFeatherWindow* K2Node_DynamicCast_AsFeather_Window,bool K2Node_DynamicCast_bSuccess,FFeatherWindow* K2Node_DynamicCast_AsFeather_Window,bool K2Node_DynamicCast_bSuccess,float K2Node_CustomEvent_Value,FSlider* CallFunc_GetSliderWidget_ReturnValue,FFormatArgumentData K2Node_MakeStruct_FormatArgumentData,TArray<FFormatArgumentData> K2Node_MakeArray_Array,FText CallFunc_Format_ReturnValue,FFeatherButtonStyle* K2Node_ComponentBoundEvent_ThisButton,FWidget* K2Node_Event_InActualWindow,FFeatherWidget* K2Node_CustomEvent_Widget,FFeatherWindow* K2Node_DynamicCast_AsFeather_Window,bool K2Node_DynamicCast_bSuccess,double CallFunc_GetWindowOpacity_ReturnValue,FFeatherWindow* K2Node_DynamicCast_AsFeather_Window,bool K2Node_DynamicCast_bSuccess,double CallFunc_GetWindowOpacity_ReturnValue,FDelegate K2Node_CreateDelegate_OutputDelegate,double CallFunc_SetWindowOpacity_NewOpacityUNorm_WideningCast);


// Function  WBP_DI_ClassSelectorStyle.WBP_DI_ClassSelectorStyle_C.GetFilterTextBox
// Offset::0x3D30810;
FFeatherEditableTextStyle* FWBP_DI_ClassSelectorStyle_C::GetFilterTextBox();


// Function  WBP_DI_ClassSelectorStyle.WBP_DI_ClassSelectorStyle_C.GetClassListComboBox
// Offset::0x3D30810;
FFeatherComboBoxStyle* FWBP_DI_ClassSelectorStyle_C::GetClassListComboBox();


// Function  WBP_DI_CloseButtonStyle.WBP_DI_CloseButtonStyle_C.PreConstruct
// Offset::0x3D30810;
void FWBP_DI_CloseButtonStyle_C::PreConstruct(bool IsDesignTime);


// Function  WBP_DI_CloseButtonStyle.WBP_DI_CloseButtonStyle_C.GetButtonWidget
// Offset::0x3D30810;
FButton* FWBP_DI_CloseButtonStyle_C::GetButtonWidget();


// Function  WBP_DI_CloseButtonStyle.WBP_DI_CloseButtonStyle_C.ExecuteUbergraph_WBP_DI_CloseButtonStyle
// Offset::0x3D30810;
void FWBP_DI_CloseButtonStyle_C::ExecuteUbergraph_WBP_DI_CloseButtonStyle(int32_t EntryPoint,bool K2Node_Event_IsDesignTime);


// Function  WBP_DI_CloseButtonStyle.WBP_DI_CloseButtonStyle_C.Construct
// Offset::0x3D30810;
void FWBP_DI_CloseButtonStyle_C::Construct();


// Function  WBP_DI_FavouriteCheckBoxStyle.WBP_DI_FavouriteCheckBoxStyle_C.GetCheckBoxWidget
// Offset::0x3D30810;
FCheckBox* FWBP_DI_FavouriteCheckBoxStyle_C::GetCheckBoxWidget();


// Function  WBP_DI_HotkeyCaptureCheckBoxStyle.WBP_DI_HotkeyCaptureCheckBoxStyle_C.GetCheckBoxWidget
// Offset::0x3D30810;
FCheckBox* FWBP_DI_HotkeyCaptureCheckBoxStyle_C::GetCheckBoxWidget();


// Function  WBP_DI_MenuCheckBoxStyle.WBP_DI_MenuCheckBoxStyle_C.GetCheckBoxWidget
// Offset::0x3D30810;
FCheckBox* FWBP_DI_MenuCheckBoxStyle_C::GetCheckBoxWidget();


// Function  WBP_DI_SaveCheckBoxStyle.WBP_DI_SaveCheckBoxStyle_C.GetCheckBoxWidget
// Offset::0x3D30810;
FCheckBox* FWBP_DI_SaveCheckBoxStyle_C::GetCheckBoxWidget();


// Function  WBP_DI_SearchCheckBoxStyle.WBP_DI_SearchCheckBoxStyle_C.GetCheckBoxWidget
// Offset::0x3D30810;
FCheckBox* FWBP_DI_SearchCheckBoxStyle_C::GetCheckBoxWidget();


// Function  WBP_DI_AutoExecWindow.WBP_DI_AutoExecWindow_C.GetWindowStyle
// Offset::0x3D30810;
FFeatherWindowStyle* FWBP_DI_AutoExecWindow_C::GetWindowStyle();


// Function  WBP_DI_AutoExecWindow.WBP_DI_AutoExecWindow_C.GetStartUpBox
// Offset::0x3D30810;
FMultiLineEditableText* FWBP_DI_AutoExecWindow_C::GetStartUpBox();


// Function  WBP_DI_AutoExecWindow.WBP_DI_AutoExecWindow_C.GetShutDownBox
// Offset::0x3D30810;
FMultiLineEditableText* FWBP_DI_AutoExecWindow_C::GetShutDownBox();


// Function  WBP_DI_MainWindow.WBP_DI_MainWindow_C.GetWindowStyle
// Offset::0x3D30810;
FFeatherWindowStyle* FWBP_DI_MainWindow_C::GetWindowStyle();


// Function  WBP_DI_MainWindow.WBP_DI_MainWindow_C.GetWindowManager
// Offset::0x3D30810;
FFeatherWindowSelectionBox* FWBP_DI_MainWindow_C::GetWindowManager();


// Function  WBP_DI_MainWindow.WBP_DI_MainWindow_C.GetSearchBox
// Offset::0x3D30810;
FFeatherSearchBox* FWBP_DI_MainWindow_C::GetSearchBox();


// Function  WBP_DI_MainWindow.WBP_DI_MainWindow_C.GetResultsPanel
// Offset::0x3D30810;
FVerticalBox* FWBP_DI_MainWindow_C::GetResultsPanel();


// Function  WBP_DI_OptionsWindow.WBP_DI_OptionsWindow_C.GetWindowStyle
// Offset::0x3D30810;
FFeatherWindowStyle* FWBP_DI_OptionsWindow_C::GetWindowStyle();


// Function  WBP_DI_OptionsWindow.WBP_DI_OptionsWindow_C.GetResetButton
// Offset::0x3D30810;
FButton* FWBP_DI_OptionsWindow_C::GetResetButton();


// Function  WBP_DI_OptionsWindow.WBP_DI_OptionsWindow_C.GetQuickSelectFoldoutSizeText
// Offset::0x3D30810;
FEditableText* FWBP_DI_OptionsWindow_C::GetQuickSelectFoldoutSizeText();


// Function  WBP_DI_OptionsWindow.WBP_DI_OptionsWindow_C.GetMaxSearchSuggestionsText
// Offset::0x3D30810;
FEditableText* FWBP_DI_OptionsWindow_C::GetMaxSearchSuggestionsText();


// Function  WBP_DI_SearchBox.WBP_DI_SearchBox_C.GetSearchTextBox
// Offset::0x3D30810;
FEditableText* FWBP_DI_SearchBox_C::GetSearchTextBox();


// Function  WBP_DI_SearchBox.WBP_DI_SearchBox_C.GetSearchSuggestionsPanel
// Offset::0x3D30810;
FVerticalBox* FWBP_DI_SearchBox_C::GetSearchSuggestionsPanel();


// Function  WBP_DI_SearchBox.WBP_DI_SearchBox_C.GetSearchSuggestions
// Offset::0x3D30810;
FSizeBox* FWBP_DI_SearchBox_C::GetSearchSuggestions();


// Function  WBP_DI_SearchBox.WBP_DI_SearchBox_C.GetSearchButton
// Offset::0x3D30810;
FCheckBox* FWBP_DI_SearchBox_C::GetSearchButton();


// Function  WBP_DI_WindowSelector.WBP_DI_WindowSelector_C.GetMenuPanel
// Offset::0x3D30810;
FVerticalBox* FWBP_DI_WindowSelector_C::GetMenuPanel();


// Function  WBP_DI_WindowSelector.WBP_DI_WindowSelector_C.GetMenuButton
// Offset::0x3D30810;
FCheckBox* FWBP_DI_WindowSelector_C::GetMenuButton();


// Function  WBP_BattlepassOpenBetaPromotionScreen.WBP_BattlepassOpenBetaPromotionScreen_C.SequenceEvent__ENTRYPOINTWBP_BattlepassOpenBetaPromotionScreen
// Offset::0x3D30810;
void FWBP_BattlepassOpenBetaPromotionScreen_C::SequenceEvent__ENTRYPOINTWBP_BattlepassOpenBetaPromotionScreen();


// Function  WBP_BattlepassOpenBetaPromotionScreen.WBP_BattlepassOpenBetaPromotionScreen_C.SequenceEvent
// Offset::0x3D30810;
void FWBP_BattlepassOpenBetaPromotionScreen_C::SequenceEvent();


// Function  WBP_BattlepassOpenBetaPromotionScreen.WBP_BattlepassOpenBetaPromotionScreen_C.ExecuteUbergraph_WBP_BattlepassOpenBetaPromotionScreen
// Offset::0x3D30810;
void FWBP_BattlepassOpenBetaPromotionScreen_C::ExecuteUbergraph_WBP_BattlepassOpenBetaPromotionScreen(int32_t EntryPoint,FEmbarkFXHandle CallFunc_CueUISound_ReturnValue);


// Function  WBP_BattlepassScreen.WBP_BattlepassScreen_C.UpdateVFXPosition
// Offset::0x3D30810;
void FWBP_BattlepassScreen_C::UpdateVFXPosition(FWidget* InWidget,FWidget* Widget,FGeometry CallFunc_GetCachedGeometry_ReturnValue,FVector2D CallFunc_LocalToAbsolute_ReturnValue,FVector2D CallFunc_GetDesiredSize_ReturnValue,FVector2D CallFunc_Multiply_Vector2DVector2D_ReturnValue,FGeometry CallFunc_GetCachedGeometry_ReturnValue,FVector2D CallFunc_AbsoluteToLocal_ReturnValue,FVector2D CallFunc_Add_Vector2DVector2D_ReturnValue);


// Function  WBP_BattlepassScreen.WBP_BattlepassScreen_C.ExecuteUbergraph_WBP_BattlepassScreen
// Offset::0x3D30810;
void FWBP_BattlepassScreen_C::ExecuteUbergraph_WBP_BattlepassScreen(int32_t EntryPoint,FWidget* K2Node_Event_RewardWidget,FVector2D CallFunc_GetDesiredSize_ReturnValue,FNiagaraUIComponent* CallFunc_GetNiagaraComponent_ReturnValue,double CallFunc_BreakVector2D_X,double CallFunc_BreakVector2D_Y,FVector CallFunc_MakeVector_ReturnValue);


// Function  WBP_BattlepassScreen.WBP_BattlepassScreen_C.BP_OnRewardClaimed
// Offset::0x3D30810;
void FWBP_BattlepassScreen_C::BP_OnRewardClaimed(FWidget* RewardWidget);


// Function  WBP_BattlepassTakeoverScreen.WBP_BattlepassTakeoverScreen_C.SequenceEvent__ENTRYPOINTWBP_BattlepassTakeoverScreen
// Offset::0x3D30810;
void FWBP_BattlepassTakeoverScreen_C::SequenceEvent__ENTRYPOINTWBP_BattlepassTakeoverScreen();


// Function  WBP_BattlepassTakeoverScreen.WBP_BattlepassTakeoverScreen_C.SequenceEvent
// Offset::0x3D30810;
void FWBP_BattlepassTakeoverScreen_C::SequenceEvent();


// Function  WBP_BattlepassTakeoverScreen.WBP_BattlepassTakeoverScreen_C.ExecuteUbergraph_WBP_BattlepassTakeoverScreen
// Offset::0x3D30810;
void FWBP_BattlepassTakeoverScreen_C::ExecuteUbergraph_WBP_BattlepassTakeoverScreen(int32_t EntryPoint,FEmbarkFXHandle CallFunc_CueUISound_ReturnValue);


// Function  WBP_GameSummaryScoreboardScreen.WBP_GameSummaryScoreboardScreen_C.OnInitialized
// Offset::0x3D30810;
void FWBP_GameSummaryScoreboardScreen_C::OnInitialized();


// Function  WBP_GameSummaryScoreboardScreen.WBP_GameSummaryScoreboardScreen_C.ExecuteUbergraph_WBP_GameSummaryScoreboardScreen
// Offset::0x3D30810;
void FWBP_GameSummaryScoreboardScreen_C::ExecuteUbergraph_WBP_GameSummaryScoreboardScreen(int32_t EntryPoint);


// Function  WBP_DEV_PersistentPlayerKeysEntry.WBP_DEV_PersistentPlayerKeysEntry_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_DEV_PersistentPlayerKeysEntry_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_DEV_PersistentPlayerKeysEntry.WBP_DEV_PersistentPlayerKeysEntry_C.ExecuteUbergraph_WBP_DEV_PersistentPlayerKeysEntry
// Offset::0x3D30810;
void FWBP_DEV_PersistentPlayerKeysEntry_C::ExecuteUbergraph_WBP_DEV_PersistentPlayerKeysEntry(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_DEV_PersistentPlayerKeysEntry.WBP_DEV_PersistentPlayerKeysEntry_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_DEV_PersistentPlayerKeysEntry_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_DEV_PersistentPlayerKeysEntry.WBP_DEV_PersistentPlayerKeysEntry_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_DEV_PersistentPlayerKeysEntry_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_DEV_PersistentPlayerKeysEntry.WBP_DEV_PersistentPlayerKeysEntry_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_DEV_PersistentPlayerKeysEntry_C::BP_OnEntryReleased();


// Function  WBP_CTAButton.WBP_CTAButton_C.ExecuteUbergraph_WBP_CTAButton
// Offset::0x3D30810;
void FWBP_CTAButton_C::ExecuteUbergraph_WBP_CTAButton(int32_t EntryPoint,FDelegate K2Node_CreateDelegate_OutputDelegate,FDelegate K2Node_CreateDelegate_OutputDelegate,FGeometry CallFunc_GetCachedGeometry_ReturnValue,FNiagaraUIComponent* CallFunc_GetNiagaraComponent_ReturnValue,FVector2D CallFunc_GetLocalSize_ReturnValue,FVector CallFunc_Conv_Vector2DToVector_ReturnValue);


// Function  WBP_CTAButton.WBP_CTAButton_C.Construct
// Offset::0x3D30810;
void FWBP_CTAButton_C::Construct();


// Function  WBP_CTAButton.WBP_CTAButton_C.ButtonUnHovered
// Offset::0x3D30810;
void FWBP_CTAButton_C::ButtonUnHovered();


// Function  WBP_CTAButton.WBP_CTAButton_C.ButtonHovered
// Offset::0x3D30810;
void FWBP_CTAButton_C::ButtonHovered();


// Function  WBP_FrontendStoreOfferAlternative.WBP_FrontendStoreOfferAlternative_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_FrontendStoreOfferAlternative_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_FrontendStoreOfferAlternative.WBP_FrontendStoreOfferAlternative_C.ExecuteUbergraph_WBP_FrontendStoreOfferAlternative
// Offset::0x3D30810;
void FWBP_FrontendStoreOfferAlternative_C::ExecuteUbergraph_WBP_FrontendStoreOfferAlternative(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_FrontendStoreOfferAlternative.WBP_FrontendStoreOfferAlternative_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_FrontendStoreOfferAlternative_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_FrontendStoreOfferAlternative.WBP_FrontendStoreOfferAlternative_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_FrontendStoreOfferAlternative_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_FrontendStoreOfferAlternative.WBP_FrontendStoreOfferAlternative_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_FrontendStoreOfferAlternative_C::BP_OnEntryReleased();


// Function  WBP_Atom_ExpiringMultibucksListEntry.WBP_Atom_ExpiringMultibucksListEntry_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_Atom_ExpiringMultibucksListEntry_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_Atom_ExpiringMultibucksListEntry.WBP_Atom_ExpiringMultibucksListEntry_C.ExecuteUbergraph_WBP_Atom_ExpiringMultibucksListEntry
// Offset::0x3D30810;
void FWBP_Atom_ExpiringMultibucksListEntry_C::ExecuteUbergraph_WBP_Atom_ExpiringMultibucksListEntry(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_Atom_ExpiringMultibucksListEntry.WBP_Atom_ExpiringMultibucksListEntry_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_Atom_ExpiringMultibucksListEntry_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_Atom_ExpiringMultibucksListEntry.WBP_Atom_ExpiringMultibucksListEntry_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_Atom_ExpiringMultibucksListEntry_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_Atom_ExpiringMultibucksListEntry.WBP_Atom_ExpiringMultibucksListEntry_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_Atom_ExpiringMultibucksListEntry_C::BP_OnEntryReleased();


// Function  WBP_DiscoverySelectEntry.WBP_DiscoverySelectEntry_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_DiscoverySelectEntry_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_DiscoverySelectEntry.WBP_DiscoverySelectEntry_C.ExecuteUbergraph_WBP_DiscoverySelectEntry
// Offset::0x3D30810;
void FWBP_DiscoverySelectEntry_C::ExecuteUbergraph_WBP_DiscoverySelectEntry(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_DiscoverySelectEntry.WBP_DiscoverySelectEntry_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_DiscoverySelectEntry_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_DiscoverySelectEntry.WBP_DiscoverySelectEntry_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_DiscoverySelectEntry_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_DiscoverySelectEntry.WBP_DiscoverySelectEntry_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_DiscoverySelectEntry_C::BP_OnEntryReleased();


// Function  WBP_EquippingContestantPackWidget.WBP_EquippingContestantPackWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_EquippingContestantPackWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_EquippingContestantPackWidget.WBP_EquippingContestantPackWidget_C.ExecuteUbergraph_WBP_EquippingContestantPackWidget
// Offset::0x3D30810;
void FWBP_EquippingContestantPackWidget_C::ExecuteUbergraph_WBP_EquippingContestantPackWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_EquippingContestantPackWidget.WBP_EquippingContestantPackWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_EquippingContestantPackWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_EquippingContestantPackWidget.WBP_EquippingContestantPackWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_EquippingContestantPackWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_EquippingContestantPackWidget.WBP_EquippingContestantPackWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_EquippingContestantPackWidget_C::BP_OnEntryReleased();


// Function  WBP_GameModeOverviewInfoSectionWidget.WBP_GameModeOverviewInfoSectionWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_GameModeOverviewInfoSectionWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_GameModeOverviewInfoSectionWidget.WBP_GameModeOverviewInfoSectionWidget_C.ExecuteUbergraph_WBP_GameModeOverviewInfoSectionWidget
// Offset::0x3D30810;
void FWBP_GameModeOverviewInfoSectionWidget_C::ExecuteUbergraph_WBP_GameModeOverviewInfoSectionWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_GameModeOverviewInfoSectionWidget.WBP_GameModeOverviewInfoSectionWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_GameModeOverviewInfoSectionWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_GameModeOverviewInfoSectionWidget.WBP_GameModeOverviewInfoSectionWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_GameModeOverviewInfoSectionWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_GameModeOverviewInfoSectionWidget.WBP_GameModeOverviewInfoSectionWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_GameModeOverviewInfoSectionWidget_C::BP_OnEntryReleased();


// Function  WBP_GameModifierListEntry.WBP_GameModifierListEntry_C.ExecuteUbergraph_WBP_GameModifierListEntry
// Offset::0x3D30810;
void FWBP_GameModifierListEntry_C::ExecuteUbergraph_WBP_GameModifierListEntry(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_GameModifierListEntry.WBP_GameModifierListEntry_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_GameModifierListEntry_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_GameModifierListEntry.WBP_GameModifierListEntry_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_GameModifierListEntry_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_GameModifierListEntry.WBP_GameModifierListEntry_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_GameModifierListEntry_C::BP_OnEntryReleased();


// Function  WBP_Atom_TileListItem_OverviewScreen.WBP_Atom_TileListItem_OverviewScreen_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_Atom_TileListItem_OverviewScreen_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_Atom_TileListItem_OverviewScreen.WBP_Atom_TileListItem_OverviewScreen_C.ExecuteUbergraph_WBP_Atom_TileListItem_OverviewScreen
// Offset::0x3D30810;
void FWBP_Atom_TileListItem_OverviewScreen_C::ExecuteUbergraph_WBP_Atom_TileListItem_OverviewScreen(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_Atom_TileListItem_OverviewScreen.WBP_Atom_TileListItem_OverviewScreen_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_Atom_TileListItem_OverviewScreen_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_Atom_TileListItem_OverviewScreen.WBP_Atom_TileListItem_OverviewScreen_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_Atom_TileListItem_OverviewScreen_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_Atom_TileListItem_OverviewScreen.WBP_Atom_TileListItem_OverviewScreen_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_Atom_TileListItem_OverviewScreen_C::BP_OnEntryReleased();


// Function  WBP_GameModeOverviewInfoTextWidget.WBP_GameModeOverviewInfoTextWidget_C.OnListItemObjectSet
// Offset::0x3D30810;
void FWBP_GameModeOverviewInfoTextWidget_C::OnListItemObjectSet(FObject* ListItemObject);


// Function  WBP_GameModeOverviewInfoTextWidget.WBP_GameModeOverviewInfoTextWidget_C.ExecuteUbergraph_WBP_GameModeOverviewInfoTextWidget
// Offset::0x3D30810;
void FWBP_GameModeOverviewInfoTextWidget_C::ExecuteUbergraph_WBP_GameModeOverviewInfoTextWidget(int32_t EntryPoint,FObject* K2Node_Event_ListItemObject,bool K2Node_Event_bIsExpanded,bool K2Node_Event_bIsSelected);


// Function  WBP_GameModeOverviewInfoTextWidget.WBP_GameModeOverviewInfoTextWidget_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_GameModeOverviewInfoTextWidget_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_GameModeOverviewInfoTextWidget.WBP_GameModeOverviewInfoTextWidget_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_GameModeOverviewInfoTextWidget_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_GameModeOverviewInfoTextWidget.WBP_GameModeOverviewInfoTextWidget_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_GameModeOverviewInfoTextWidget_C::BP_OnEntryReleased();


// Function  MABP_Character_Proxy_Mesh.MABP_Character_Proxy_Mesh_C.AnimGraph
// Offset::0x3D30810;
void FMABP_Character_Proxy_Mesh_C::AnimGraph(FPoseLink AnimGraph);


// Function  MABP_Character_Proxy_Mesh.MABP_Character_Proxy_Mesh_C.ExecuteUbergraph_MABP_Character_Proxy_Mesh
// Offset::0x3D30810;
void FMABP_Character_Proxy_Mesh_C::ExecuteUbergraph_MABP_Character_Proxy_Mesh(int32_t EntryPoint);


// Function  WBP_PresentationStageScreen_Neutral.WBP_PresentationStageScreen_Neutral_C.Finished_25B27ABB4A78E3516C62DDA175BE415F
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Neutral_C::Finished_25B27ABB4A78E3516C62DDA175BE415F();


// Function  WBP_PresentationStageScreen_Neutral.WBP_PresentationStageScreen_Neutral_C.Finished_BA88BDA0439646052154F2AA8DDE8F85
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Neutral_C::Finished_BA88BDA0439646052154F2AA8DDE8F85();


// Function  WBP_PresentationStageScreen_Neutral.WBP_PresentationStageScreen_Neutral_C.RequestRefreshScreenLights
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Neutral_C::RequestRefreshScreenLights();


// Function  WBP_PresentationStageScreen_Neutral.WBP_PresentationStageScreen_Neutral_C.TransitionIn
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Neutral_C::TransitionIn();


// Function  WBP_PresentationStageScreen_Neutral.WBP_PresentationStageScreen_Neutral_C.TransitionOut
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_Neutral_C::TransitionOut();


// Function  WBP_PresentationStageScreen_FinalsLogo.WBP_PresentationStageScreen_FinalsLogo_C.Finished_5FCD225B4457A3DC1F9BBFB7A60FE311
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_FinalsLogo_C::Finished_5FCD225B4457A3DC1F9BBFB7A60FE311();


// Function  WBP_PresentationStageScreen_FinalsLogo.WBP_PresentationStageScreen_FinalsLogo_C.RequestRefreshScreenLights
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_FinalsLogo_C::RequestRefreshScreenLights();


// Function  WBP_PresentationStageScreen_FinalsLogo.WBP_PresentationStageScreen_FinalsLogo_C.SequenceEvent__ENTRYPOINTWBP_PresentationStageScreen_FinalsLogo
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_FinalsLogo_C::SequenceEvent__ENTRYPOINTWBP_PresentationStageScreen_FinalsLogo();


// Function  WBP_PresentationStageScreen_FinalsLogo.WBP_PresentationStageScreen_FinalsLogo_C.SequenceEvent__ENTRYPOINTWBP_PresentationStageScreen_FinalsLogo
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_FinalsLogo_C::SequenceEvent__ENTRYPOINTWBP_PresentationStageScreen_FinalsLogo();


// Function  WBP_PresentationStageScreen_FinalsLogo.WBP_PresentationStageScreen_FinalsLogo_C.SequenceEvent__ENTRYPOINTWBP_PresentationStageScreen_FinalsLogo
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_FinalsLogo_C::SequenceEvent__ENTRYPOINTWBP_PresentationStageScreen_FinalsLogo();


// Function  WBP_PresentationStageScreen_FinalsLogo.WBP_PresentationStageScreen_FinalsLogo_C.TransitionIn
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_FinalsLogo_C::TransitionIn();


// Function  WBP_PresentationStageScreen_CharacterCustomization.WBP_PresentationStageScreen_CharacterCustomization_C.RequestRefreshScreenLights
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_CharacterCustomization_C::RequestRefreshScreenLights();


// Function  WBP_PresentationStageScreen_CharacterCustomization.WBP_PresentationStageScreen_CharacterCustomization_C.TransitionIn
// Offset::0x3D30810;
void FWBP_PresentationStageScreen_CharacterCustomization_C::TransitionIn();


// Function  BP_Frontend_ExtraplayerLights_01.BP_Frontend_ExtraplayerLights_01_C.ExecuteUbergraph_BP_Frontend_ExtraplayerLights_01
// Offset::0x3D30810;
void FBP_Frontend_ExtraplayerLights_01_C::ExecuteUbergraph_BP_Frontend_ExtraplayerLights_01(int32_t EntryPoint,float CallFunc_GetScalarParameterValue_ReturnValue,float K2Node_Event_DeltaSeconds,double CallFunc_Multiply_DoubleDouble_ReturnValue,FLinearColor CallFunc_GetVectorParameterValue_ReturnValue,double CallFunc_Multiply_DoubleDouble_B_WideningCast,float CallFunc_SetIntensity_NewIntensity_NarrowingCast);


// Function  BP_Frontend_ExtraplayerLights_01.BP_Frontend_ExtraplayerLights_01_C.ReceiveTick
// Offset::0x3D30810;
void FBP_Frontend_ExtraplayerLights_01_C::ReceiveTick(float DeltaSeconds);


// Function  BP_SeasonalFrontendFX.BP_SeasonalFrontendFX_C.ExecuteUbergraph_BP_SeasonalFrontendFX
// Offset::0x3D30810;
void FBP_SeasonalFrontendFX_C::ExecuteUbergraph_BP_SeasonalFrontendFX(int32_t EntryPoint,bool CallFunc_IsItEaster_ReturnValue,bool CallFunc_IsItJul_ReturnValue,bool CallFunc_IsClientLogic_ReturnValue,bool CallFunc_IsItValentines_ReturnValue);


// Function  BP_SeasonalFrontendFX.BP_SeasonalFrontendFX_C.ReceiveBeginPlay
// Offset::0x3D30810;
void FBP_SeasonalFrontendFX_C::ReceiveBeginPlay();


// Function  BP_FrontEnd_EmissiveIntensity.BP_FrontEnd_EmissiveIntensity_C.UserConstructionScript
// Offset::0x3D30810;
void FBP_FrontEnd_EmissiveIntensity_C::UserConstructionScript(FNiagaraParameterCollectionInstance* CallFunc_GetNiagaraParameterCollection_ReturnValue);


// Function  WBP_PlayerGraphics_NamesRenderer_Entry.WBP_PlayerGraphics_NamesRenderer_Entry_C.BP_OnEntryReleased
// Offset::0x3D30810;
void FWBP_PlayerGraphics_NamesRenderer_Entry_C::BP_OnEntryReleased();


// Function  WBP_PlayerGraphics_NamesRenderer_Entry.WBP_PlayerGraphics_NamesRenderer_Entry_C.BP_OnItemExpansionChanged
// Offset::0x3D30810;
void FWBP_PlayerGraphics_NamesRenderer_Entry_C::BP_OnItemExpansionChanged(bool bIsExpanded);


// Function  WBP_PlayerGraphics_NamesRenderer_Entry.WBP_PlayerGraphics_NamesRenderer_Entry_C.BP_OnItemSelectionChanged
// Offset::0x3D30810;
void FWBP_PlayerGraphics_NamesRenderer_Entry_C::BP_OnItemSelectionChanged(bool bIsSelected);


// Function  WBP_PlayerGraphics_NamesRenderer_Entry.WBP_PlayerGraphics_NamesRenderer_Entry_C.ExecuteUbergraph_WBP_PlayerGraphics_NamesRenderer_Entry
// Offset::0x3D30810;
void FWBP_PlayerGraphics_NamesRenderer_Entry_C::ExecuteUbergraph_WBP_PlayerGraphics_NamesRenderer_Entry(int32_t EntryPoint,bool K2Node_Event_bIsSelected,bool K2Node_Event_bIsExpanded);


// Function  BP_MeteorShower_ProjectileBase.BP_MeteorShower_ProjectileBase_C.ExecuteUbergraph_BP_MeteorShower_ProjectileBase
// Offset::0x3D30810;
void FBP_MeteorShower_ProjectileBase_C::ExecuteUbergraph_BP_MeteorShower_ProjectileBase(int32_t EntryPoint);


// Function  BP_MeteorShower_ProjectileBase.BP_MeteorShower_ProjectileBase_C.ReceiveBeginPlay
// Offset::0x3D30810;
void FBP_MeteorShower_ProjectileBase_C::ReceiveBeginPlay();


// Function  MABP_Head_Face_07_Base.MABP_Head_Face_07_Base_C.AnimGraph
// Offset::0x3D30810;
void FMABP_Head_Face_07_Base_C::AnimGraph(FPoseLink AnimGraph);


// Function  MABP_Head_Face_07_Base.MABP_Head_Face_07_Base_C.ExecuteUbergraph_MABP_Head_Face_07_Base
// Offset::0x3D30810;
void FMABP_Head_Face_07_Base_C::ExecuteUbergraph_MABP_Head_Face_07_Base(int32_t EntryPoint);


// Function  MABP_Body_H.MABP_Body_H_C.AnimGraph
// Offset::0x3D30810;
void FMABP_Body_H_C::AnimGraph(FPoseLink AnimGraph);


// Function  MABP_Body_H.MABP_Body_H_C.ExecuteUbergraph_MABP_Body_H
// Offset::0x3D30810;
void FMABP_Body_H_C::ExecuteUbergraph_MABP_Body_H(int32_t EntryPoint);


// Function  MABP_Head_Face_06_Base.MABP_Head_Face_06_Base_C.AnimGraph
// Offset::0x3D30810;
void FMABP_Head_Face_06_Base_C::AnimGraph(FPoseLink AnimGraph);


// Function  MABP_Head_Face_06_Base.MABP_Head_Face_06_Base_C.ExecuteUbergraph_MABP_Head_Face_06_Base
// Offset::0x3D30810;
void FMABP_Head_Face_06_Base_C::ExecuteUbergraph_MABP_Head_Face_06_Base(int32_t EntryPoint);


// Function  MABP_Body_L.MABP_Body_L_C.AnimGraph
// Offset::0x3D30810;
void FMABP_Body_L_C::AnimGraph(FPoseLink AnimGraph);


// Function  MABP_Body_L.MABP_Body_L_C.ExecuteUbergraph_MABP_Body_L
// Offset::0x3D30810;
void FMABP_Body_L_C::ExecuteUbergraph_MABP_Body_L(int32_t EntryPoint);


// Function  MABP_Head_Face_02_Base.MABP_Head_Face_02_Base_C.AnimGraph
// Offset::0x3D30810;
void FMABP_Head_Face_02_Base_C::AnimGraph(FPoseLink AnimGraph);


// Function  MABP_Head_Face_02_Base.MABP_Head_Face_02_Base_C.ExecuteUbergraph_MABP_Head_Face_02_Base
// Offset::0x3D30810;
void FMABP_Head_Face_02_Base_C::ExecuteUbergraph_MABP_Head_Face_02_Base(int32_t EntryPoint);


// Function  MABP_Body_M.MABP_Body_M_C.AnimGraph
// Offset::0x3D30810;
void FMABP_Body_M_C::AnimGraph(FPoseLink AnimGraph);


// Function  MABP_Body_M.MABP_Body_M_C.ExecuteUbergraph_MABP_Body_M
// Offset::0x3D30810;
void FMABP_Body_M_C::ExecuteUbergraph_MABP_Body_M(int32_t EntryPoint);


